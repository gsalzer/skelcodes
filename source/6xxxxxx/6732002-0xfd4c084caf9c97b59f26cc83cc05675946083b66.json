{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  \r\n  mapping(address => uint8) public operators;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() \r\n    public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the operator\r\n   */\r\n  modifier onlyOperator() {\r\n    require(operators[msg.sender] == uint8(1)); \r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev operator management\r\n   */\r\n  function operatorManager(address[] _operators,uint8 flag) \r\n    public \r\n    onlyOwner \r\n    returns(bool){\r\n      for(uint8 i = 0; i< _operators.length; i++) {\r\n        if(flag == uint8(0)){\r\n          operators[_operators[i]] = 1;\r\n        } else {\r\n          delete operators[_operators[i]];\r\n        }\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) \r\n    public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n    emit OwnershipTransferred(owner, newOwner);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n  event Pause();\r\n\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused \r\n    returns (bool) {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused \r\n    returns (bool) {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// ERC20 Token\r\ncontract ERC20Token {\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n *  预测事件合约对象 \r\n *  @author linq <1018053166@qq.com>\r\n */\r\ncontract GuessBaseBiz is Pausable {\r\n    \r\n  // MOS合约地址 \r\n  address public mosContractAddress = 0x420a43153DA24B9e2aedcEC2B8158A8653a3317e;\r\n  // 平台地址\r\n  address public platformAddress = 0xe0F969610699f88612518930D88C0dAB39f67985;\r\n  // 平台手续费\r\n  uint256 public serviceChargeRate = 5;\r\n  // 平台维护费\r\n  uint256 public maintenanceChargeRate = 0;\r\n  // 单次上限\r\n  uint256 public upperLimit = 1000 * 10 ** 18;\r\n  // 单次下限\r\n  uint256 public lowerLimit = 1 * 10 ** 18;\r\n  \r\n  \r\n  ERC20Token MOS;\r\n  \r\n  // =============================== Event ===============================\r\n    \r\n  // 创建预测事件成功后广播\r\n  event CreateGuess(uint256 indexed id, address indexed creator);\r\n\r\n//   直投事件\r\n//   event Deposit(uint256 indexed id,address indexed participant,uint256 optionId,uint256 bean);\r\n\r\n  // 代投事件  \r\n  event DepositAgent(address indexed participant, uint256 indexed id, uint256 optionId, uint256 totalBean);\r\n\r\n  // 公布选项事件 \r\n  event PublishOption(uint256 indexed id, uint256 indexed optionId, uint256 odds);\r\n\r\n  // 预测事件流拍事件\r\n  event Abortive(uint256 indexed id);\r\n  \r\n  constructor() public {\r\n      MOS = ERC20Token(mosContractAddress);\r\n  }\r\n\r\n  struct Guess {\r\n    // 预测事件ID\r\n    uint256 id;\r\n    // 预测事件创建者\r\n    address creator;\r\n    // 预测标题\r\n    string title;\r\n    // 数据源名称+数据源链接\r\n    string source;\r\n    // 预测事件分类\r\n    string category;\r\n    // 是否下架 1.是 0.否\r\n    uint8 disabled;\r\n    // 预测事件描述\r\n    bytes desc;\r\n    // 开始时间\r\n    uint256 startAt;\r\n    // 封盘时间  \r\n    uint256 endAt; \r\n    // 是否结束\r\n    uint8 finished; \r\n    // 是否流拍\r\n    uint8 abortive; \r\n    // // 选项ID\r\n    // uint256[] optionIds;\r\n    // // 选项名称\r\n    // bytes32[] optionNames;\r\n  }\r\n\r\n//   // 订单\r\n//   struct Order {\r\n//     address user;\r\n//     uint256 bean;\r\n//   }\r\n\r\n  // 平台代理订单\r\n  struct AgentOrder {\r\n    address participant;\r\n    string ipfsBase58;\r\n    string dataHash;\r\n    uint256 bean;\r\n  }\r\n  \r\n  struct Option {\r\n    // 选项ID\r\n    uint256 id;\r\n    // 选项名称\r\n    bytes32 name;\r\n  } \r\n  \r\n\r\n  // 存储所有的预测事件\r\n  mapping (uint256 => Guess) public guesses;\r\n  // 存储所有的预测事件选项 \r\n  mapping (uint256 => Option[]) public options;\r\n\r\n  // 存储所有用户直投订单\r\n//   mapping (uint256 => mapping(uint256 => Order[])) public orders;\r\n\r\n  // 通过预测事件ID和选项ID，存储该选项所有参与的地址\r\n  mapping (uint256 => mapping (uint256 => AgentOrder[])) public agentOrders;\r\n  \r\n  // 存储事件总投注 \r\n  mapping (uint256 => uint256) public guessTotalBean;\r\n  \r\n  // 存储某选项总投注 \r\n  mapping (uint256 => mapping(uint256 => uint256)) public optionTotalBean;\r\n\r\n  // 存储某选项某用户总投注 \r\n//   mapping (uint256 => mapping(address => uint256)) public userOptionTotalBean;\r\n\r\n  /**\r\n   * 预测事件状态\r\n   */\r\n  enum GuessStatus {\r\n    // 未开始\r\n    NotStarted, \r\n    // 进行中\r\n    Progress,\r\n    // 待公布\r\n    Deadline,\r\n    // 已结束\r\n    Finished,\r\n    // 流拍\r\n    Abortive\r\n  }\r\n\r\n  // 判断是否为禁用状态\r\n  function disabled(uint256 id) public view returns(bool) {\r\n      if(guesses[id].disabled == 0){\r\n          return false;\r\n      }else {\r\n          return true;\r\n      }\r\n  }\r\n\r\n /**\r\n   * 获取预测事件状态\r\n   * \r\n   * 未开始\r\n   *     未到开始时间\r\n   * 进行中\r\n   *     在开始到结束时间范围内\r\n   * 待公布/已截止\r\n   *     已经过了结束时间，并且finished为0\r\n   * 已结束\r\n   *     已经过了结束时间，并且finished为1,abortive=0\r\n   * 流拍\r\n   *     abortive=1，并且finished为1 流拍。（退币）\r\n   */\r\n  function getGuessStatus(uint256 guessId) \r\n    internal \r\n    view\r\n    returns(GuessStatus) {\r\n      GuessStatus gs;\r\n      Guess memory guess = guesses[guessId];\r\n      uint256 _now = now; \r\n      if(guess.startAt > _now) {\r\n        gs = GuessStatus.NotStarted;\r\n      } else if((guess.startAt <= _now && _now <= guess.endAt)\r\n                 && guess.finished == 0 \r\n                 && guess.abortive == 0 ) {\r\n        gs = GuessStatus.Progress;\r\n      } else if(_now > guess.endAt && guess.finished == 0) {\r\n        gs = GuessStatus.Deadline;\r\n      } else if(_now > guess.endAt && guess.finished == 1 && guess.abortive == 0) {\r\n        gs = GuessStatus.Finished;  \r\n      } else if(guess.abortive == 1 && guess.finished == 1){\r\n        gs = GuessStatus.Abortive; \r\n      }\r\n    return gs;\r\n  }\r\n  \r\n  //判断选项是否存在\r\n  function optionExist(uint256 guessId,uint256 optionId)\r\n    internal\r\n    view\r\n    returns(bool){\r\n      Option[] memory _options = options[guessId];\r\n      for (uint8 i = 0; i < _options.length; i++) {\r\n         if(optionId == _options[i].id){\r\n            return true;\r\n         }\r\n      }\r\n      return false;\r\n  }\r\n    \r\n  function() public payable {\r\n  }\r\n\r\n  /**\r\n   * 修改预测系统变量\r\n   * @author linq\r\n   */\r\n  function modifyVariable\r\n    (\r\n        address _platformAddress, \r\n        uint256 _serviceChargeRate, \r\n        uint256 _maintenanceChargeRate,\r\n        uint256 _upperLimit,\r\n        uint256 _lowerLimit\r\n    ) \r\n    public \r\n    onlyOwner {\r\n      platformAddress = _platformAddress;\r\n      serviceChargeRate = _serviceChargeRate;\r\n      maintenanceChargeRate = _maintenanceChargeRate;\r\n      upperLimit = _upperLimit * 10 ** 18;\r\n      lowerLimit = _lowerLimit * 10 ** 18;\r\n  }\r\n  \r\n   // 创建预测事件\r\n  function createGuess(\r\n       uint256 _id, \r\n       string _title,\r\n       string _source, \r\n       string _category,\r\n       uint8 _disabled,\r\n       bytes _desc, \r\n       uint256 _startAt, \r\n       uint256 _endAt,\r\n       uint256[] _optionId, \r\n       bytes32[] _optionName\r\n       ) \r\n       public \r\n       whenNotPaused {\r\n        require(guesses[_id].id == uint256(0), \"The current guess already exists !!!\");\r\n        require(_optionId.length == _optionName.length, \"please check options !!!\");\r\n        \r\n        guesses[_id] = Guess(_id,\r\n              msg.sender,\r\n              _title,\r\n              _source,\r\n              _category,\r\n              _disabled,\r\n              _desc,\r\n              _startAt,\r\n              _endAt,\r\n              0,\r\n              0\r\n            );\r\n            \r\n        Option[] storage _options = options[_id];\r\n        for (uint8 i = 0;i < _optionId.length; i++) {\r\n            require(!optionExist(_id,_optionId[i]),\"The current optionId already exists !!!\");\r\n            _options.push(Option(_optionId[i],_optionName[i]));\r\n        }\r\n    \r\n    emit CreateGuess(_id, msg.sender);\r\n  }\r\n\r\n\r\n    /**\r\n     * 审核|更新预测事件\r\n     */\r\n    function auditGuess\r\n    (\r\n        uint256 _id,\r\n        string _title,\r\n        uint8 _disabled,\r\n        bytes _desc, \r\n        uint256 _endAt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        require(guesses[_id].id != uint256(0), \"The current guess not exists !!!\");\r\n        require(getGuessStatus(_id) == GuessStatus.NotStarted, \"The guess cannot audit !!!\");\r\n        Guess storage guess = guesses[_id];\r\n        guess.title = _title;\r\n        guess.disabled = _disabled;\r\n        guess.desc = _desc;\r\n        guess.endAt = _endAt;\r\n   }\r\n\r\n  /**\r\n   * 用户直接参与事件预测\r\n   */ \r\n//   function deposit(uint256 id, uint256 optionId, uint256 bean) \r\n//     public\r\n//     payable\r\n//     whenNotPaused\r\n//     returns (bool) {\r\n//       require(!disabled(id), \"The guess disabled!!!\");\r\n//       require(getGuessStatus(id) == GuessStatus.Progress, \"The guess cannot participate !!!\");\r\n//       require(bean >= lowerLimit && bean <= upperLimit, \"Bean quantity nonconformity!!!\");\r\n      \r\n//       // 存储用户订单\r\n//       Order memory order = Order(msg.sender, bean);\r\n//       orders[id][optionId].push(order);\r\n//       // 某用户订单该选项总投注数\r\n//       userOptionTotalBean[optionId][msg.sender] += bean;\r\n//       // 存储事件总投注\r\n//       guessTotalBean[id] += bean;\r\n//       MOS.transferFrom(msg.sender, address(this), bean);\r\n    \r\n//       emit Deposit(id, msg.sender, optionId, bean);\r\n//       return true;\r\n//   }\r\n\r\n   /**\r\n    * 平台代理用户参与事件预测\r\n    */\r\n  function depositAgent\r\n  (\r\n      uint256 id, \r\n      uint256 optionId, \r\n      string ipfsBase58,\r\n      string dataHash,\r\n      uint256 totalBean\r\n  ) \r\n    public\r\n    onlyOperator\r\n    whenNotPaused\r\n    returns (bool) {\r\n    require(guesses[id].id != uint256(0), \"The current guess not exists !!!\");\r\n    require(optionExist(id, optionId),\"The current optionId not exists !!!\");\r\n    require(!disabled(id), \"The guess disabled!!!\");\r\n    require(getGuessStatus(id) == GuessStatus.Deadline, \"The guess cannot participate !!!\");\r\n    \r\n    // 通过预测事件ID和选项ID，存储该选项所有参与的地址\r\n    AgentOrder[] storage _agentOrders = agentOrders[id][optionId];\r\n    \r\n     AgentOrder memory agentOrder = AgentOrder(msg.sender,ipfsBase58,dataHash,totalBean);\r\n    _agentOrders.push(agentOrder);\r\n   \r\n    MOS.transferFrom(msg.sender, address(this), totalBean);\r\n    \r\n    // 某用户订单该选项总投注数\r\n    // userOptionTotalBean[optionId][msg.sender] += totalBean;\r\n    // 订单选项总投注 \r\n    optionTotalBean[id][optionId] += totalBean;\r\n    // 存储事件总投注\r\n    guessTotalBean[id] += totalBean;\r\n    \r\n    emit DepositAgent(msg.sender, id, optionId, totalBean);\r\n    return true;\r\n  }\r\n  \r\n\r\n    /**\r\n     * 公布事件的结果\r\n     */ \r\n    function publishOption(uint256 id, uint256 optionId) \r\n      public \r\n      onlyOwner\r\n      whenNotPaused\r\n      returns (bool) {\r\n      require(guesses[id].id != uint256(0), \"The current guess not exists !!!\");\r\n      require(optionExist(id, optionId),\"The current optionId not exists !!!\");\r\n      require(!disabled(id), \"The guess disabled!!!\");\r\n      require(getGuessStatus(id) == GuessStatus.Deadline, \"The guess cannot publish !!!\");\r\n      Guess storage guess = guesses[id];\r\n      guess.finished = 1;\r\n      // 该预测时间总投注 \r\n      uint256 totalBean = guessTotalBean[id];\r\n      // 成功选项投注总数\r\n      uint256 _optionTotalBean = optionTotalBean[id][optionId];\r\n      // 判断是否低赔率事件\r\n      uint256 odds = totalBean * (100 - serviceChargeRate - maintenanceChargeRate) / _optionTotalBean;\r\n      \r\n      AgentOrder[] memory _agentOrders = agentOrders[id][optionId];\r\n      if(odds >= uint256(100)){\r\n        // 平台收取手续费\r\n        uint256 platformFee = totalBean * (serviceChargeRate + maintenanceChargeRate) / 100;\r\n        MOS.transfer(platformAddress, platformFee);\r\n        \r\n        for(uint8 i = 0; i< _agentOrders.length; i++){\r\n            MOS.transfer(_agentOrders[i].participant, (totalBean - platformFee) \r\n                        * _agentOrders[i].bean \r\n                        / _optionTotalBean);\r\n        }\r\n      } else {\r\n        // 低赔率事件，平台不收取手续费\r\n        for(uint8 j = 0; j< _agentOrders.length; j++){\r\n            MOS.transfer(_agentOrders[j].participant, totalBean\r\n                        * _agentOrders[j].bean\r\n                        / _optionTotalBean);\r\n        }\r\n      }\r\n\r\n      emit PublishOption(id, optionId, odds);\r\n      return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * 事件流拍\r\n     */\r\n    function abortive(uint256 id) \r\n        public \r\n        onlyOwner\r\n        returns(bool) {\r\n        require(guesses[id].id != uint256(0), \"The current guess not exists !!!\");\r\n        require(getGuessStatus(id) == GuessStatus.Progress ||\r\n                getGuessStatus(id) == GuessStatus.Deadline, \"The guess cannot abortive !!!\");\r\n    \r\n        Guess storage guess = guesses[id];\r\n        guess.abortive = 1;\r\n        guess.finished = 1;\r\n        // 退回\r\n        Option[] memory _options = options[id];\r\n        \r\n        for(uint8 i = 0; i< _options.length;i ++){\r\n            //代投退回\r\n            AgentOrder[] memory _agentOrders = agentOrders[id][_options[i].id];\r\n            for(uint8 j = 0; j < _agentOrders.length; j++){\r\n                uint256 _bean = _agentOrders[j].bean;\r\n                MOS.transfer(_agentOrders[j].participant, _bean);\r\n            }\r\n        }\r\n        emit Abortive(id);\r\n        return true;\r\n    }\r\n    \r\n    // /**\r\n    //  * 获取事件投注总额 \r\n    //  */ \r\n    // function guessTotalBeanOf(uint256 id) public view returns(uint256){\r\n    //     return guessTotalBean[id];\r\n    // }\r\n    \r\n    // /**\r\n    //  * 获取事件选项代投订单信息\r\n    //  */ \r\n    // function agentOrdersOf(uint256 id,uint256 optionId) \r\n    //     public \r\n    //     view \r\n    //     returns(\r\n    //         address participant,\r\n    //         address[] users,\r\n    //         uint256[] beans\r\n    //     ) {\r\n    //     AgentOrder[] memory agentOrder = agentOrders[id][optionId];\r\n    //     return (\r\n    //         agentOrder.participant, \r\n    //         agentOrder.users, \r\n    //         agentOrder.beans\r\n    //     );\r\n    // }\r\n    \r\n    \r\n    // /**\r\n    //  * 获取用户直投订单 \r\n    //  */ \r\n    // function ordersOf(uint256 id, uint256 optionId) public view \r\n    //     returns(address[] users,uint256[] beans){\r\n    //     Order[] memory _orders = orders[id][optionId];\r\n    //     address[] memory _users;\r\n    //     uint256[] memory _beans;\r\n        \r\n    //     for (uint8 i = 0; i < _orders.length; i++) {\r\n    //         _users[i] = _orders[i].user;\r\n    //         _beans[i] = _orders[i].bean;\r\n    //     }\r\n    //     return (_users, _beans);\r\n    // }\r\n\r\n}\r\n\r\n\r\ncontract MosesContract is GuessBaseBiz {\r\n//   // MOS合约地址 \r\n//   address internal INITIAL_MOS_CONTRACT_ADDRESS = 0x001439818dd11823c45fff01af0cd6c50934e27ac0;\r\n//   // 平台地址\r\n//   address internal INITIAL_PLATFORM_ADDRESS = 0x00063150d38ac0b008abe411ab7e4fb8228ecead3e;\r\n//   // 平台手续费\r\n//   uint256 internal INITIAL_SERVICE_CHARGE_RATE = 5;\r\n//   // 平台维护费\r\n//   uint256 internal INITIAL_MAINTENANCE_CHARGE_RATE = 0;\r\n//   // 单次上限\r\n//   uint256 UPPER_LIMIT = 1000 * 10 ** 18;\r\n//   // 单次下限\r\n//   uint256 LOWER_LIMIT = 1 * 10 ** 18;\r\n  \r\n  \r\n  constructor(address[] _operators) public {\r\n    for(uint8 i = 0; i< _operators.length; i++) {\r\n        operators[_operators[i]] = uint8(1);\r\n    }\r\n  }\r\n\r\n    /**\r\n     *  Recovery donated ether\r\n     */\r\n    function collectEtherBack(address collectorAddress) public onlyOwner {\r\n        uint256 b = address(this).balance;\r\n        require(b > 0);\r\n        require(collectorAddress != 0x0);\r\n\r\n        collectorAddress.transfer(b);\r\n    }\r\n\r\n    /**\r\n    *  Recycle other ERC20 tokens\r\n    */\r\n    function collectOtherTokens(address tokenContract, address collectorAddress) onlyOwner public returns (bool) {\r\n        ERC20Token t = ERC20Token(tokenContract);\r\n\r\n        uint256 b = t.balanceOf(address(this));\r\n        return t.transfer(collectorAddress, b);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guessTotalBean\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guesses\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"disabled\",\"type\":\"uint8\"},{\"name\":\"desc\",\"type\":\"bytes\"},{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"endAt\",\"type\":\"uint256\"},{\"name\":\"finished\",\"type\":\"uint8\"},{\"name\":\"abortive\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_disabled\",\"type\":\"uint8\"},{\"name\":\"_desc\",\"type\":\"bytes\"},{\"name\":\"_endAt\",\"type\":\"uint256\"}],\"name\":\"auditGuess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upperLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintenanceChargeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentOrders\",\"outputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"ipfsBase58\",\"type\":\"string\"},{\"name\":\"dataHash\",\"type\":\"string\"},{\"name\":\"bean\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"},{\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"operatorManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_platformAddress\",\"type\":\"address\"},{\"name\":\"_serviceChargeRate\",\"type\":\"uint256\"},{\"name\":\"_maintenanceChargeRate\",\"type\":\"uint256\"},{\"name\":\"_upperLimit\",\"type\":\"uint256\"},{\"name\":\"_lowerLimit\",\"type\":\"uint256\"}],\"name\":\"modifyVariable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"optionId\",\"type\":\"uint256\"},{\"name\":\"ipfsBase58\",\"type\":\"string\"},{\"name\":\"dataHash\",\"type\":\"string\"},{\"name\":\"totalBean\",\"type\":\"uint256\"}],\"name\":\"depositAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"collectorAddress\",\"type\":\"address\"}],\"name\":\"collectOtherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowerLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"abortive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_source\",\"type\":\"string\"},{\"name\":\"_category\",\"type\":\"string\"},{\"name\":\"_disabled\",\"type\":\"uint8\"},{\"name\":\"_desc\",\"type\":\"bytes\"},{\"name\":\"_startAt\",\"type\":\"uint256\"},{\"name\":\"_endAt\",\"type\":\"uint256\"},{\"name\":\"_optionId\",\"type\":\"uint256[]\"},{\"name\":\"_optionName\",\"type\":\"bytes32[]\"}],\"name\":\"createGuess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionTotalBean\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mosContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"disabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collectorAddress\",\"type\":\"address\"}],\"name\":\"collectEtherBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"publishOption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceChargeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateGuess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalBean\",\"type\":\"uint256\"}],\"name\":\"DepositAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"odds\",\"type\":\"uint256\"}],\"name\":\"PublishOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Abortive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MosesContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000014704b1507dc5a94b3cb3d6c02f61386a50f719d0000000000000000000000003a7d6f1712789ffb6c99a8afd1287630543bfae900000000000000000000000044d50f302686a180f25014483d94e9fde049bd940000000000000000000000005885249af2cdcda171144157c8fdc8da2018492e00000000000000000000000012055a2840581e951083112e4902a5132a5c0926000000000000000000000000c3e02a4b219e9f58af3c0d785111b763e2d7854e00000000000000000000000048d7c180479c44576c87ebd54cd970de3cee33d3000000000000000000000000d734050dd3fbbffa3d38c74abe7c833cb218a166000000000000000000000000af69752150d064da0ac5d599971986813a0b8b9f0000000000000000000000006e552f58d45dca7fc0ddc087cb5e9e4a0cebc75e","Library":"","SwarmSource":"bzzr://df4a7c502bfdfb7c2df42fa4a4e13cf60e2f3f889e3bc4b1e18d232096709b24"}]}