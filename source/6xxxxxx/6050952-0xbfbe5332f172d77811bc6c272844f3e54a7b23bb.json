{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  // @notice An address for the transfer event where the burned tokens are transferred in a faux Transfer event\r\n  address public constant BURN_ADDRESS = 0;\r\n\r\n  /** How many tokens we burned */\r\n  event Burned(address burner, uint burnedAmount);\r\n\r\n  /**\r\n   * Burn extra tokens from a balance.\r\n   *\r\n   */\r\n  function burn(uint burnAmount) {\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(burnAmount);\r\n    totalSupply_ = totalSupply_.sub(burnAmount);\r\n    Burned(burner, burnAmount);\r\n\r\n    // Inform the blockchain explores that track the\r\n    // balances only by a transfer event that the balance in this\r\n    // address has decreased\r\n    Transfer(burner, BURN_ADDRESS, burnAmount);\r\n  }\r\n}\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n    /**\r\n     * @dev Checks whether it can transfer or otherwise throws.\r\n     */\r\n    modifier canTransferLimitedTransferToken(address _sender, uint256 _value) {\r\n        require(_value <= transferableTokens(_sender, uint64(now)));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n     * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n     * specific logic for limiting token transferability for a holder over time.\r\n     */\r\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n        return balanceOf(holder);\r\n    }\r\n}\r\n\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    if(releaseState != released) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    if(msg.sender != releaseAgent) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransferReleasable(address _sender) {\r\n\r\n    if(!released) {\r\n        if(!transferAgents[_sender]) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n}\r\n\r\ncontract UpgradeAgent {\r\n\r\n  uint public originalSupply;\r\n\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n    address public upgradeMaster;\r\n\r\n    /** The next contract where the tokens will be migrated. */\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    /** How many tokens we have upgraded by now. */\r\n    uint256 public totalUpgraded;\r\n\r\n    /**\r\n     * Upgrade states.\r\n     *\r\n     * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\r\n     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n     *\r\n     */\r\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n    /**\r\n     * Somebody has upgraded some of his tokens.\r\n     */\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * New upgrade agent available.\r\n     */\r\n    event UpgradeAgentSet(address agent);\r\n\r\n    /**\r\n     * Do not allow construction without upgrade master set.\r\n     */\r\n    function UpgradeableToken(address _upgradeMaster) public {\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    /**\r\n     * Allow the token holder to upgrade some of their tokens to a new contract.\r\n     */\r\n    function upgrade(uint256 value) public {\r\n\r\n        UpgradeState state = getUpgradeState();\r\n        if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\r\n            // Called in a bad state\r\n            revert();\r\n        }\r\n\r\n        // Validate input value.\r\n        if (value == 0) revert();\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n\r\n        // Take tokens out from circulation\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        totalUpgraded = totalUpgraded.add(value);\r\n\r\n        // Upgrade agent reissues the tokens\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        Upgrade(msg.sender, upgradeAgent, value);\r\n    }\r\n\r\n    /**\r\n     * Set an upgrade agent that handles\r\n     */\r\n    function setUpgradeAgent(address agent) external {\r\n        if (!canUpgrade()) {\r\n            // The token is not yet in a state that we could think upgrading\r\n            revert();\r\n        }\r\n\r\n        if (agent == 0x0) revert();\r\n        // Only a master can designate the next agent\r\n        if (msg.sender != upgradeMaster) revert();\r\n        // Upgrade has already begun for an agent\r\n        if (getUpgradeState() == UpgradeState.Upgrading) revert();\r\n\r\n        upgradeAgent = UpgradeAgent(agent);\r\n\r\n        // Bad interface\r\n        if (!upgradeAgent.isUpgradeAgent()) revert();\r\n        // Make sure that token supplies match in source and target\r\n        if (upgradeAgent.originalSupply() != totalSupply_) revert();\r\n\r\n        UpgradeAgentSet(upgradeAgent);\r\n    }\r\n\r\n    /**\r\n     * Get the state of the token upgrade.\r\n     */\r\n    function getUpgradeState() public constant returns (UpgradeState) {\r\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n        else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n        else return UpgradeState.Upgrading;\r\n    }\r\n\r\n    /**\r\n     * Change the upgrade master.\r\n     *\r\n     * This allows us to set a new owner for the upgrade mechanism.\r\n     */\r\n    function setUpgradeMaster(address master) public {\r\n        if (master == 0x0) revert();\r\n        if (msg.sender != upgradeMaster) revert();\r\n        upgradeMaster = master;\r\n    }\r\n\r\n    /**\r\n     * Child contract can enable to provide the condition when the upgrade can begun.\r\n     */\r\n    function canUpgrade() public constant returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CrowdsaleToken is ReleasableToken, UpgradeableToken {\r\n\r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  uint8 public decimals;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   */\r\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals)\r\n    UpgradeableToken(msg.sender) public {\r\n\r\n    // Create any address, can be transferred\r\n    // to team multisig via changeOwner(),\r\n    // also remember to call setUpgradeMaster()\r\n    owner = msg.sender;\r\n\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    totalSupply_ = _initialSupply;\r\n\r\n    decimals = _decimals;\r\n\r\n    // Create initially all balance on the team multisig\r\n    balances[owner] = totalSupply_;\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, enforce no new tokens can be created.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\r\n   */\r\n  function canUpgrade() public constant returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  /**\r\n   * Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}\r\n\r\ncontract VestedToken is StandardToken, LimitedTransferToken {\r\n\r\n    uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n    struct TokenGrant {\r\n        address granter;     // 20 bytes\r\n        uint256 value;       // 32 bytes\r\n        uint64 cliff;\r\n        uint64 vesting;\r\n        uint64 start;        // 3 * 8 = 24 bytes\r\n        bool revokable;\r\n        bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n    } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n    mapping (address => TokenGrant[]) public grants;\r\n\r\n    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n    /**\r\n     * @dev Grant tokens to a specified address\r\n     * @param _to address The address which the tokens will be granted to.\r\n     * @param _value uint256 The amount of tokens to be granted.\r\n     * @param _start uint64 Time of the beginning of the grant.\r\n     * @param _cliff uint64 Time of the cliff period.\r\n     * @param _vesting uint64 The vesting period.\r\n     */\r\n    function grantVestedTokens(\r\n        address _to,\r\n        uint256 _value,\r\n        uint64 _start,\r\n        uint64 _cliff,\r\n        uint64 _vesting,\r\n        bool _revokable,\r\n        bool _burnsOnRevoke\r\n    ) public {\r\n\r\n        // Check for date inconsistencies that may cause unexpected behavior\r\n        require(_cliff >= _start && _vesting >= _cliff);\r\n\r\n        require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n        uint256 count = grants[_to].push(\r\n            TokenGrant(\r\n                _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                _value,\r\n                _cliff,\r\n                _vesting,\r\n                _start,\r\n                _revokable,\r\n                _burnsOnRevoke\r\n            )\r\n        );\r\n\r\n        transfer(_to, _value);\r\n\r\n        NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke the grant of tokens of a specifed address.\r\n     * @param _holder The address which will have its tokens revoked.\r\n     * @param _grantId The id of the token grant.\r\n     */\r\n    function revokeTokenGrant(address _holder, uint256 _grantId) public {\r\n        TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n        require(grant.revokable);\r\n        require(grant.granter == msg.sender); // Only granter can revoke it\r\n\r\n        address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n\r\n        uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n        // remove grant from array\r\n        delete grants[_holder][_grantId];\r\n        grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n        grants[_holder].length -= 1;\r\n\r\n        balances[receiver] = balances[receiver].add(nonVested);\r\n        balances[_holder] = balances[_holder].sub(nonVested);\r\n\r\n        Transfer(_holder, receiver, nonVested);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n     * @param holder address The address of the holder\r\n     * @param time uint64 The specific time.\r\n     * @return An uint256 representing a holder's total amount of transferable tokens.\r\n     */\r\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n        uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n        if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\r\n\r\n        // Iterate through all the grants the holder has, and add all non-vested tokens\r\n        uint256 nonVested = 0;\r\n        for (uint256 i = 0; i < grantIndex; i++) {\r\n            nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n        }\r\n\r\n        // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n        uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\r\n\r\n        // Return the minimum of how many vested can transfer and other value\r\n        // in case there are other limiting transferability factors (default is balanceOf)\r\n        return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n    }\r\n\r\n    /**\r\n     * @dev Check the amount of grants that an address has.\r\n     * @param _holder The holder of the grants.\r\n     * @return A uint256 representing the total amount of grants.\r\n     */\r\n    function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\r\n        return grants[_holder].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of vested tokens at a specific time\r\n     * @param tokens uint256 The amount of tokens granted\r\n     * @param time uint64 The time to be checked\r\n     * @param start uint64 The time representing the beginning of the grant\r\n     * @param cliff uint64  The cliff period, the period before nothing can be paid out\r\n     * @param vesting uint64 The vesting period\r\n     * @return An uint256 representing the amount of vested tokens of a specific grant\r\n     *  transferableTokens\r\n     *   |                         _/--------   vestedTokens rect\r\n     *   |                       _/\r\n     *   |                     _/\r\n     *   |                   _/\r\n     *   |                 _/\r\n     *   |                /\r\n     *   |              .|\r\n     *   |            .  |\r\n     *   |          .    |\r\n     *   |        .      |\r\n     *   |      .        |\r\n     *   |    .          |\r\n     *   +===+===========+---------+----------> time\r\n     *      Start       Cliff    Vesting\r\n     */\r\n    function calculateVestedTokens(\r\n        uint256 tokens,\r\n        uint256 time,\r\n        uint256 start,\r\n        uint256 cliff,\r\n        uint256 vesting) public pure returns (uint256)\r\n    {\r\n        // Shortcuts for before cliff and after vesting cases.\r\n        if (time < cliff) return 0;\r\n        if (time >= vesting) return tokens;\r\n\r\n        // Interpolate all vested tokens.\r\n        // As before cliff the shortcut returns 0, we can use just calculate a value\r\n        // in the vesting rect (as shown in above's figure)\r\n\r\n        // vestedTokens = (tokens * (time - start)) / (vesting - start)\r\n        uint256 vestedTokens = SafeMath.div(\r\n            SafeMath.mul(\r\n                tokens,\r\n                SafeMath.sub(time, start)\r\n            ),\r\n            SafeMath.sub(vesting, start)\r\n        );\r\n\r\n        return vestedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Get all information about a specific grant.\r\n     * @param _holder The address which will have its tokens revoked.\r\n     * @param _grantId The id of the token grant.\r\n     * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n     * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n     */\r\n    function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n        TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n        granter = grant.granter;\r\n        value = grant.value;\r\n        start = grant.start;\r\n        cliff = grant.cliff;\r\n        vesting = grant.vesting;\r\n        revokable = grant.revokable;\r\n        burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n        vested = vestedTokens(grant, uint64(now));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of vested tokens at a specific time.\r\n     * @param grant TokenGrant The grant to be checked.\r\n     * @param time The time to be checked\r\n     * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\r\n     */\r\n    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n        return calculateVestedTokens(\r\n            grant.value,\r\n            uint256(time),\r\n            uint256(grant.start),\r\n            uint256(grant.cliff),\r\n            uint256(grant.vesting)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the amount of non vested tokens at a specific time.\r\n     * @param grant TokenGrant The grant to be checked.\r\n     * @param time uint64 The time to be checked\r\n     * @return An uint256 representing the amount of non vested tokens of a specific grant on the\r\n     * passed time frame.\r\n     */\r\n    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n        return grant.value.sub(vestedTokens(grant, time));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the date when the holder can transfer all its tokens\r\n     * @param holder address The address of the holder\r\n     * @return An uint256 representing the date of the last transferable tokens.\r\n     */\r\n    function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\r\n        date = uint64(now);\r\n        uint256 grantIndex = grants[holder].length;\r\n        for (uint256 i = 0; i < grantIndex; i++) {\r\n            date = Math.max64(grants[holder][i].vesting, date);\r\n        }\r\n    }\r\n}\r\n\r\ncontract WemarkToken is CrowdsaleToken, BurnableToken, VestedToken {\r\n\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n\r\n    function WemarkToken() CrowdsaleToken('WemarkToken', 'WMK', 135000000 * (10 ** 18), 18) public {\r\n        /** Initially allow only token creator to transfer tokens */\r\n        setTransferAgent(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\r\n     * @param _to The address that will receive the tokens.\r\n     * @param _value The amount of tokens to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value)\r\n        validDestination(_to)\r\n        canTransferReleasable(msg.sender)\r\n        canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\r\n        // Call BasicToken.transfer()\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\r\n     * @param _from The address that will send the tokens.\r\n     * @param _to The address that will receive the tokens.\r\n     * @param _value The amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        validDestination(_to)\r\n        canTransferReleasable(_from)\r\n        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\r\n        // Call StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // Call StandardToken.transferForm()\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        // Call StandardToken.transferForm()\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Can upgrade token contract only if token is released and super class allows too.\r\n     */\r\n    function canUpgrade() public constant returns(bool) {\r\n        return released && super.canUpgrade();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\r\n     * @param holder address The address of the holder\r\n     * @return An uint256 representing a holder's total amount of transferable tokens.\r\n     */\r\n    function transferableTokensNow(address holder) public constant returns (uint) {\r\n        return transferableTokens(holder, uint64(now));\r\n    }\r\n\r\n    function () payable {\r\n        // If ether is sent to this address, send it back\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"transferableTokensNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WemarkToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51a3e325ad2c01ac625077397002a63699ecc5026315ec9371412dcbce19176b"}]}