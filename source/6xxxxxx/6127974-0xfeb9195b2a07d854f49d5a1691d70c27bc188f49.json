{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// Implements the ERC20 standard contract\r\ncontract ERC20Standard \r\n{\r\n    // #region Fields\r\n    \r\n    // The total token supply\r\n    uint256 internal totalSupply_;\r\n    \r\n    // This creates a dictionary with all the balances\r\n    mapping (address => uint256) internal balances;\r\n    \r\n    // This creates a dictionary with allowances\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    // #endregion\r\n    \r\n    // #region Events\r\n    \r\n    // Public events on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    // #endregion\r\n    \r\n    // #region Public methods\r\n    \r\n    /// @return Total number of tokens in existence\r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /// @dev Gets the balance of the specified address\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance of the account with address _owner\r\n    function balanceOf(address _owner) public view returns (uint256) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Transfers _value amount of tokens to address _to\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool) \r\n    {\r\n        require(msg.data.length >= 68);                   // Guard against short address\r\n        require(_to != 0x0);                              // Prevent transfer to 0x0 address\r\n        require(balances[msg.sender] >= _value);          // Check if the sender has enough tokens\r\n        require(balances[_to] + _value >= balances[_to]); // Check for overflows\r\n        \r\n        // Update balance\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        \r\n        // Raise the event\r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers _value amount of tokens from address _from to address _to\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n    {\r\n        require(msg.data.length >= 68);                   // Guard against short address\r\n        require(_to != 0x0);                              // Prevent transfer to 0x0 address\r\n        require(balances[_from] >= _value);               // Check if the sender has enough tokens\r\n        require(balances[_to] + _value >= balances[_to]); // Check for overflows\r\n        require(allowed[_from][msg.sender] >= _value);    // Check allowance\r\n        \r\n        // Update balance\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        \r\n        // Raise the event\r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /// Sets allowance for another address, i.e. allows _spender to spend _value tokens on behalf of msg.sender.\r\n    /// ERC20 standard at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md recommends not implementing \r\n    /// checks for the approval double-spend attack, as this should be implemented in user interfaces.\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool) \r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        // Raise the event\r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    // #endregion\r\n}\r\n\r\n// Token that is ERC20 compliant\r\ncontract BinvToken is ERC20Standard \r\n{\r\n    // #region Constants\r\n    \r\n    string public constant name = \"BINV\";              \r\n    string public constant symbol = \"BINV\";            \r\n    uint256 public constant initialSupply = 100000000;\r\n    uint8 public constant decimals = 18;               \r\n    \r\n    // #endregion\r\n    \r\n    // #region Getters\r\n    \r\n    address public owner;                     \r\n    address public contractAddress;            \r\n    bool public payableEnabled = false;        \r\n    uint256 public payableWeiReceived = 0;    \r\n    uint256 public payableFinneyReceived = 0;  \r\n    uint256 public payableEtherReceived = 0;       \r\n    uint256 public milliTokensPaid = 0;        \r\n    uint256 public milliTokensSent = 0;        \r\n    \r\n    uint256 public tokensPerEther = 10000;     \r\n    uint256 public hardCapInEther = 7000;      \r\n    uint256 public maxPaymentInEther = 50; \r\n    \r\n    // #endregion\r\n    \r\n    // #region Constructors\r\n    \r\n    /// @dev Constructor\r\n    constructor() public\r\n    {\r\n        totalSupply_ = initialSupply * (10 ** uint256(decimals));  \r\n        balances[msg.sender] = totalSupply_;                      \r\n        \r\n        owner = msg.sender;              \r\n        contractAddress = address(this); \r\n    }\r\n    \r\n    // #endregion\r\n    \r\n    // #region Public methods\r\n    \r\n    /// @dev payable\r\n    function() payable public\r\n    {\r\n        require(payableEnabled);\r\n        require(msg.sender != 0x0);\r\n     \r\n        require(maxPaymentInEther > uint256(msg.value / (10 ** 18)));\r\n        require(hardCapInEther > payableEtherReceived);\r\n        \r\n        uint256 actualTokensPerEther = getActualTokensPerEther();\r\n        uint256 tokensAmount = msg.value * actualTokensPerEther;\r\n        \r\n        require(balances[owner] >= tokensAmount);\r\n        \r\n        balances[owner] -= tokensAmount;\r\n        balances[msg.sender] += tokensAmount;\r\n\r\n        payableWeiReceived += msg.value;  \r\n        payableFinneyReceived = uint256(payableWeiReceived / (10 ** 15));\r\n        payableEtherReceived = uint256(payableWeiReceived / (10 ** 18));\r\n        milliTokensPaid += uint256(tokensAmount / (10 ** uint256(decimals - 3)));\r\n\r\n        emit Transfer(owner, msg.sender, tokensAmount); \r\n               \r\n        owner.transfer(msg.value); \r\n    }\r\n    \r\n    /// @dev getOwnerBalance\r\n    function getOwnerBalance() public view returns (uint256)\r\n    {\r\n        return balances[owner];\r\n    }\r\n    \r\n    /// @dev getOwnerBalanceInMilliTokens\r\n    function getOwnerBalanceInMilliTokens() public view returns (uint256)\r\n    {\r\n        return uint256(balances[owner] / (10 ** uint256(decimals - 3)));\r\n    }\r\n        \r\n    /// @dev getActualTokensPerEther\r\n    function getActualTokensPerEther() public view returns (uint256)\r\n    {\r\n       uint256 etherReceived = payableEtherReceived;\r\n       \r\n       uint256 bonusPercent = 0;\r\n       if(etherReceived < 1000)\r\n           bonusPercent = 16;\r\n       else if(etherReceived < 2200)\r\n           bonusPercent = 12; \r\n       else if(etherReceived < 3600)\r\n           bonusPercent = 8; \r\n       else if(etherReceived < 5200)\r\n           bonusPercent = 4; \r\n       \r\n       uint256 actualTokensPerEther = tokensPerEther * (100 + bonusPercent) / 100;\r\n       return actualTokensPerEther;\r\n    }\r\n    \r\n    /// @dev setTokensPerEther\r\n    function setTokensPerEther(uint256 amount) public returns (bool)\r\n    {\r\n       require(msg.sender == owner); \r\n       require(amount > 0);\r\n       tokensPerEther = amount;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    /// @dev setHardCapInEther\r\n    function setHardCapInEther(uint256 amount) public returns (bool)\r\n    {\r\n       require(msg.sender == owner); \r\n       require(amount > 0);\r\n       hardCapInEther = amount;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    /// @dev setMaxPaymentInEther\r\n    function setMaxPaymentInEther(uint256 amount) public returns (bool)\r\n    {\r\n       require(msg.sender == owner); \r\n       require(amount > 0);\r\n       maxPaymentInEther = amount;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    /// @dev enablePayable\r\n    function enablePayable() public returns (bool)\r\n    {\r\n       require(msg.sender == owner); \r\n       payableEnabled = true;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    /// @dev disablePayable\r\n    function disablePayable() public returns (bool)\r\n    {\r\n       require(msg.sender == owner); \r\n       payableEnabled = false;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    /// @dev sendTokens\r\n    function sendTokens(uint256 milliTokensAmount, address destination) public returns (bool) \r\n    {\r\n        require(msg.sender == owner); \r\n        \r\n        uint256 tokensAmount = milliTokensAmount * (10 ** uint256(decimals - 3));\r\n        \r\n        require(balances[owner] >= tokensAmount);\r\n\r\n        balances[owner] -= tokensAmount;\r\n        balances[destination] += tokensAmount;\r\n        \r\n        milliTokensSent += milliTokensAmount;\r\n\r\n        emit Transfer(owner, destination, tokensAmount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // #endregion\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"milliTokensAmount\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActualTokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payableEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePayable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxPaymentInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePayable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milliTokensPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHardCapInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milliTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payableEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payableFinneyReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payableWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerBalanceInMilliTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPaymentInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BinvToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f787bbb34749dc671772b401587d1ce7aabca4a7ced7854819a2b81300ea9c9"}]}