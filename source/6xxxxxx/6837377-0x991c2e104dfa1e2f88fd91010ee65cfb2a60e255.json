{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//  _______  .______        ___      .__   __.  __  ___\r\n// |       \\ |   _  \\      /   \\     |  \\ |  | |  |/  /\r\n// |  .--.  ||  |_)  |    /  ^  \\    |   \\|  | |  '  /\r\n// |  |  |  ||   _  <    /  /_\\  \\   |  . `  | |    <\r\n// |  '--'  ||  |_)  |  /  _____  \\  |  |\\   | |  .  \\\r\n// |_______/ |______/  /__/     \\__\\ |__| \\__| |__|\\__\\\r\n// \r\n// VISIT => http://dbank.money\r\n// \r\n// The first global decentralized bank.\r\n// \r\n// 1. GAIN 4% PER 24 HOURS (every 5900 blocks)\r\n// 2. [FREE BONUS] New users get a 0.1 ETH bonus immediately!\r\n// 3. [REFERRAL BONUS] If you invite your friend to invest, you both get a 10% bonus.\r\n// 4. NO COMMISSION. NO FEES.\r\n// \r\n// Contracts reviewed and approved by pros!\r\n\r\ncontract DBank {\r\n    uint256 dbk_;   // total investment in DBank\r\n    mapping (address => uint256) invested; // address => investment\r\n    mapping (address => uint256) atBlock; // address => user's investment at block\r\n    uint256 public r_ = 4; //profit ratioï¼Œevery 5900 blocks(1 day) you earn 4%\r\n    uint256 public blocks_ = 5900; //blocks in every cycle\r\n\r\n    // Player and referral bonus\r\n    uint256 public pID_;    // total number of players\r\n    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\r\n    mapping (uint256 => address) public plyr_;   // (pID => data) player data\r\n\r\n    // New User Bonus\r\n    bool public bonusOn_ = true;    // give bonus or not\r\n    uint256 public bonusAmount_ = 1 * 10**16;   // 0.01 ETH\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function ()\r\n        external \r\n        payable\r\n    {\r\n        buyCore(msg.sender, msg.value);\r\n    }\r\n\r\n    // buy with refferal ID\r\n    function buy(uint256 refID)\r\n        public\r\n        payable\r\n    {\r\n        buyCore(msg.sender, msg.value);\r\n\r\n        // bonus for refferal 10%\r\n        if (plyr_[refID] != address(0)) {\r\n            invested[plyr_[refID]] += msg.value / 10;\r\n        }\r\n\r\n        // bonus for user self 10%\r\n        invested[msg.sender] += msg.value / 10;\r\n    }\r\n\r\n    // Reinvest\r\n    function reinvest()\r\n        public\r\n    {\r\n        if (invested[msg.sender] != 0) {\r\n            uint256 amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\r\n            \r\n            atBlock[msg.sender] = block.number;\r\n            invested[msg.sender] += amount;\r\n        }\r\n    }\r\n\r\n    // === Getters ===\r\n\r\n    // get investment and profit\r\n    // returns: base, profit, playerID, players\r\n    function getMyInvestment()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        uint256 amount = 0;\r\n        if (invested[msg.sender] != 0) {\r\n            amount = invested[msg.sender] * r_ / 100 * (block.number - atBlock[msg.sender]) / blocks_;\r\n        }\r\n        return (invested[msg.sender], amount, pIDxAddr_[msg.sender], pID_);\r\n    }\r\n\r\n    // === Private Methods ===\r\n\r\n    // Core Logic of Buying\r\n    function buyCore(address _addr, uint256 _value)\r\n        private\r\n    {\r\n        // New user check\r\n        bool isNewPlayer = determinePID(_addr);\r\n\r\n        // If you have investment\r\n        if (invested[_addr] != 0) {\r\n            uint256 amount = invested[_addr] * r_ / 100 * (block.number - atBlock[_addr]) / blocks_;\r\n            \r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            if (amount <= dbk_){\r\n                _addr.transfer(amount);\r\n                dbk_ -= amount;\r\n            }\r\n        }\r\n\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        atBlock[_addr] = block.number;\r\n        invested[_addr] += _value;\r\n        dbk_ += _value;\r\n        \r\n        // if bonus is On and you're a new player, then you'll get bonus\r\n        if (bonusOn_ && isNewPlayer) {\r\n            invested[_addr] += bonusAmount_;\r\n        }\r\n    }\r\n\r\n    // get players ID by address\r\n    // If doesn't exist, then create one.\r\n    // returns: is new player or not\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_] = _addr;\r\n            \r\n            return (true);  // New Player\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    // === Only owner ===\r\n\r\n    address owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        pID_ = 500;\r\n    }\r\n\r\n    // Only owner modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Set new user bonus on/off\r\n    function setBonusOn(bool _on)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        bonusOn_ = _on;\r\n    }\r\n\r\n    // Set new user bonus amount\r\n    function setBonusAmount(uint256 _amount)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        bonusAmount_ = _amount;\r\n    }\r\n\r\n    // Set profit ratio\r\n    function setProfitRatio(uint256 _r)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        r_ = _r;\r\n    }\r\n\r\n    // Set profit ratio\r\n    function setBlocks(uint256 _blocks)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        blocks_ = _blocks;\r\n    }\r\n\r\n    // ======= Deprecated Version of DBank =======\r\n\r\n    // *** Deprecated. ***\r\n    // deposit in dbank\r\n    mapping (address => uint256) public deposit_; \r\n\r\n    // *** Deprecated. ***\r\n    // deposit in dbk deposit(no reward)\r\n    function dbkDeposit()\r\n        public\r\n        payable\r\n    {\r\n        deposit_[msg.sender] += msg.value;\r\n    }\r\n\r\n    // *** Deprecated. ***\r\n    // withdraw from dbk deposit\r\n    function dbkWithdraw()\r\n        public\r\n    {\r\n        uint256 _eth = deposit_[msg.sender];\r\n        if (_eth > 0) {\r\n            msg.sender.transfer(_eth);\r\n            deposit_[msg.sender] = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setBonusOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_r\",\"type\":\"uint256\"}],\"name\":\"setProfitRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dbkWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dbkDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonusAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"r_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocks_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOn_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DBank","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da68d11387e2d568cb6b6df608abd1f025e0d384e5079febac49450d4ad6adda"}]}