{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts\\SignatureVerifier.sol\r\n\r\n/**\r\n * @title Signature verifier\r\n * @dev To verify C level actions\r\n */\r\ncontract SignatureVerifier {\r\n\r\n    function splitSignature(bytes sig)\r\n    internal\r\n    pure\r\n    returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n        // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n        // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n        // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    // Returns the address that signed a given string message\r\n    function verifyString(\r\n        string message,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s)\r\n    internal pure\r\n    returns (address signer) {\r\n\r\n        // The message header; we will fill in the length next\r\n        string memory header = \"\\x19Ethereum Signed Message:\\n000000\";\r\n        uint256 lengthOffset;\r\n        uint256 length;\r\n\r\n        assembly {\r\n        // The first word of a string is its length\r\n            length := mload(message)\r\n        // The beginning of the base-10 message length in the prefix\r\n            lengthOffset := add(header, 57)\r\n        }\r\n\r\n        // Maximum length we support\r\n        require(length <= 999999);\r\n        // The length of the message's length in base-10\r\n        uint256 lengthLength = 0;\r\n        // The divisor to get the next left-most message length digit\r\n        uint256 divisor = 100000;\r\n        // Move one digit of the message length to the right at a time\r\n\r\n        while (divisor != 0) {\r\n            // The place value at the divisor\r\n            uint256 digit = length / divisor;\r\n            if (digit == 0) {\r\n                // Skip leading zeros\r\n                if (lengthLength == 0) {\r\n                    divisor /= 10;\r\n                    continue;\r\n                }\r\n            }\r\n            // Found a non-zero digit or non-leading zero digit\r\n            lengthLength++;\r\n            // Remove this digit from the message length's current value\r\n            length -= digit * divisor;\r\n            // Shift our base-10 divisor over\r\n            divisor /= 10;\r\n\r\n            // Convert the digit to its ASCII representation (man ascii)\r\n            digit += 0x30;\r\n            // Move to the next character and write the digit\r\n            lengthOffset++;\r\n            assembly {\r\n                mstore8(lengthOffset, digit)\r\n            }\r\n        }\r\n        // The null string requires exactly 1 zero (unskip 1 leading 0)\r\n        if (lengthLength == 0) {\r\n            lengthLength = 1 + 0x19 + 1;\r\n        } else {\r\n            lengthLength += 1 + 0x19;\r\n        }\r\n        // Truncate the tailing zeros from the header\r\n        assembly {\r\n            mstore(header, lengthLength)\r\n        }\r\n        // Perform the elliptic curve recover operation\r\n        bytes32 check = keccak256(abi.encodePacked(header, message));\r\n        return ecrecover(check, v, r, s);\r\n    }\r\n}\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20Token.sol\r\n\r\n/**\r\n * @title A DEKLA token access control\r\n * @author DEKLA (https://www.dekla.io)\r\n * @dev The Dekla token has 3 C level address to manage.\r\n * They can execute special actions but it need to be approved by another C level address.\r\n */\r\ncontract DeklaAccessControl is SignatureVerifier {\r\n    using SafeMath for uint256;\r\n\r\n    // C level address that can execute special actions.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n    uint256 public CLevelTxCount_ = 0;\r\n\r\n    // @dev store nonces\r\n    mapping(address => uint256) nonces;\r\n\r\n    // @dev C level transaction must be approved with another C level address\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        //Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n        // Divide the signature in r, s and v variables\r\n        (v, r, s) = splitSignature(sig);\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n            return ecrecover(prefixedHash, v, r, s);\r\n        }\r\n    }\r\n\r\n    // @dev return true if transaction already signed by a C Level address\r\n    // @param _message The string to be verify\r\n    function signedCLevel(\r\n        bytes32 _message,\r\n        bytes _sig\r\n    )\r\n    internal\r\n    view\r\n    onlyCLevel\r\n    returns (bool)\r\n    {\r\n        address signer = recover(_message, _sig);\r\n\r\n        require(signer != msg.sender);\r\n        return (\r\n        signer == cooAddress ||\r\n        signer == ceoAddress ||\r\n        signer == cfoAddress\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCEO\r\n     * @param _newCEO address The address of the new CEO\r\n     * @param _nonce uint256 setCEO transaction number.\r\n     */\r\n    function getCEOHashing(address _newCEO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F3E), _newCEO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the CEO. The C level transaction, must verify.\r\n    // @param _newCEO The address of the new CEO\r\n    function setCEO(\r\n        address _newCEO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCEO != address(0) &&\r\n            _newCEO != cfoAddress &&\r\n            _newCEO != cooAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCEOHashing(_newCEO, nonces[msg.sender]);\r\n        require(signedCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        ceoAddress = _newCEO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCFO\r\n     * @param _newCFO address The address of the new CFO\r\n     * @param _nonce uint256 setCFO transaction number.\r\n     */\r\n    function getCFOHashing(address _newCFO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F3F), _newCFO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the CFO. The C level transaction, must verify.\r\n    // @param _newCFO The address of the new CFO\r\n    function setCFO(\r\n        address _newCFO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCFO != address(0) &&\r\n            _newCFO != ceoAddress &&\r\n            _newCFO != cooAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCFOHashing(_newCFO, nonces[msg.sender]);\r\n        require(signedCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        cfoAddress = _newCFO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCOO\r\n     * @param _newCOO address The address of the new COO\r\n     * @param _nonce uint256 setCO transaction number.\r\n     */\r\n    function getCOOHashing(address _newCOO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F40), _newCOO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the COO. The C level transaction, must verify.\r\n    // @param _newCOO The address of the new COO\r\n    function setCOO(\r\n        address _newCOO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCOO != address(0) &&\r\n            _newCOO != ceoAddress &&\r\n            _newCOO != cfoAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCOOHashing(_newCOO, nonces[msg.sender]);\r\n        require(signedCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        cooAddress = _newCOO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    function getNonce() external view returns (uint256) {\r\n        return nonces[msg.sender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title ERC865Token Token\r\n*\r\n* ERC865Token allows users paying transfers in tokens instead of gas\r\n* https://github.com/ethereum/EIPs/issues/865\r\n*\r\n*/\r\ncontract ERC865 is ERC20Basic {\r\n    function transferPreSigned(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool);\r\n\r\n    function approvePreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool);\r\n\r\n    function increaseApprovalPreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool);\r\n\r\n    function decreaseApprovalPreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool);\r\n\r\n    function transferFromPreSigned(\r\n        bytes _signature,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n *\r\n */\r\ncontract BasicToken is ERC20Basic, DeklaAccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    // Setable mint rate for the first time\r\n    uint256 mintTxCount_ = 1;\r\n    uint256 public teamRate = 20;\r\n    uint256 public saleRate = 80;\r\n\r\n    // Team address\r\n    address public saleAddress;\r\n    address public teamAddress;\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n    public\r\n    returns (bool) {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n    public\r\n    returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ERC865Token Token\r\n*\r\n* ERC865Token allows users paying transfers in tokens instead of gas\r\n* https://github.com/ethereum/EIPs/issues/865\r\n*\r\n*/\r\ncontract ERC865Token is ERC865, StandardToken {\r\n    /* Nonces of transfers performed */\r\n    // mapping(bytes => bool) signatures;\r\n\r\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        //Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n        // Divide the signature in r, s and v variables\r\n        (v, r, s) = splitSignature(sig);\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n            return ecrecover(prefixedHash, v, r, s);\r\n        }\r\n    }\r\n\r\n    function recoverSigner(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        require(_to != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        return from;\r\n    }\r\n\r\n\r\n    function transferPreSigned(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        balances[from] = balances[from].sub(_value).sub(_fee);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        // signatures[_signature] = true;\r\n        emit Transfer(from, _to, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n    /**\r\n    * @notice Submit a presigned approval\r\n    * @param _signature bytes The signature, issued by the owner.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _value uint256 The amount of tokens to allow.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function approvePreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        allowed[from][_spender] = _value;\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        // signatures[_signature] = true;\r\n        emit Approval(from, _spender, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n    * @param _signature bytes The signature, issued by the owner.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _addedValue uint256 The amount of tokens to increase the allowance by.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function increaseApprovalPreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        // signatures[_signature] = true;\r\n        emit Approval(from, _spender, allowed[from][_spender]);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n    * @param _signature bytes The signature, issued by the owner\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function decreaseApprovalPreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        uint oldValue = allowed[from][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[from][_spender] = 0;\r\n        } else {\r\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        // signatures[_signature] = true;\r\n        emit Approval(from, _spender, _subtractedValue);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer tokens from one address to another\r\n    * @param _signature bytes The signature, issued by the spender.\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function transferFromPreSigned(\r\n        bytes _signature,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\r\n        address spender = recover(hashedTx, _signature);\r\n        require(spender != address(0));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\r\n        balances[spender] = balances[spender].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        // signatures[_signature] = true;\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(spender, msg.sender, _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\r\n    * @param _token address The address of the token.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function transferPreSignedHashing(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F41), _token, _to, _value, _fee, _nonce));\r\n    }\r\n    /**\r\n    * @notice Hash (keccak256) of the payload used by approvePreSigned\r\n    * @param _token address The address of the token\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _value uint256 The amount of tokens to allow.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function approvePreSignedHashing(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_token, _spender, _value, _fee, _nonce));\r\n    }\r\n    /**\r\n    * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\r\n    * @param _token address The address of the token\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _addedValue uint256 The amount of tokens to increase the allowance by.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function increaseApprovalPreSignedHashing(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        /* \"a45f71ff\": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F42), _token, _spender, _addedValue, _fee, _nonce));\r\n    }\r\n    /**\r\n    * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\r\n    * @param _token address The address of the token\r\n    * @param _spender address The address which will spend the funds.\r\n    * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function decreaseApprovalPreSignedHashing(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        /* \"59388d78\": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F43), _token, _spender, _subtractedValue, _fee, _nonce));\r\n    }\r\n    /**\r\n    * @notice Hash (keccak256) of the payload used by transferFromPreSigned\r\n    * @param _token address The address of the token\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n    function transferFromPreSignedHashing(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        /* \"b7656dc5\": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F44), _token, _from, _to, _value, _fee, _nonce));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is ERC865Token {\r\n    using SafeMath for uint256;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    // Limit total supply to 10 billion\r\n    uint256 public constant totalTokenLimit = 10000000000000000000000000000;\r\n\r\n    // Max token left percent allow to mint, based on 100%\r\n    uint256 public maxTokenRateToMint = 20;\r\n    uint256 public canMintLimit = 0;\r\n\r\n\r\n    /**\r\n     * @dev Throws if total supply is higher than total token limit\r\n     */\r\n    modifier canMint()\r\n    {\r\n\r\n        // Address to mint must defined\r\n        require(\r\n            teamAddress != address(0) &&\r\n            saleAddress != address(0)\r\n\r\n        );\r\n\r\n        // Total supply after mint must lower or equal total token limit\r\n        require(totalSupply_ <= totalTokenLimit);\r\n        require(balances[saleAddress] <= canMintLimit);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to mint tokens: mint 1000000000000000000000000000 every times\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint() onlyCLevel external {\r\n        _mint(1000000000000000000000000000);\r\n    }\r\n\r\n    function _mint(uint256 _amount)\r\n    canMint\r\n    internal\r\n    {\r\n        uint256 saleAmount_ = _amount.mul(saleRate).div(100);\r\n        uint256 teamAmount_ = _amount.mul(teamRate).div(100);\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[saleAddress] = balances[saleAddress].add(saleAmount_);\r\n        balances[teamAddress] = balances[teamAddress].add(teamAmount_);\r\n\r\n        canMintLimit = balances[saleAddress]\r\n        .mul(maxTokenRateToMint)\r\n        .div(100);\r\n        mintTxCount_++;\r\n\r\n        emit Mint(saleAddress, saleAmount_);\r\n        emit Mint(teamAddress, teamAmount_);\r\n    }\r\n\r\n    function getMaxTokenRateToMintHashing(uint256 _rate, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F45), _rate, _nonce));\r\n    }\r\n\r\n    function setMaxTokenRateToMint(\r\n        uint256 _rate,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(_rate <= 100);\r\n        require(_rate >= 0);\r\n\r\n        bytes32 hashedTx = getMaxTokenRateToMintHashing(_rate, nonces[msg.sender]);\r\n        require(signedCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        maxTokenRateToMint = _rate;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    function getMintRatesHashing(uint256 _saleRate, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F46), _saleRate, _nonce));\r\n    }\r\n\r\n    function setMintRates(\r\n        uint256 saleRate_,\r\n        bytes _sig\r\n    )\r\n    external\r\n    onlyCLevel\r\n    {\r\n        require(saleRate.add(teamRate) == 100);\r\n        require(mintTxCount_ >= 3);\r\n\r\n        bytes32 hashedTx = getMintRatesHashing(saleRate_, nonces[msg.sender]);\r\n        require(signedCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        saleRate = saleRate_;\r\n        CLevelTxCount_++;\r\n    }\r\n}\r\n\r\n\r\ncontract DeklaToken is MintableToken {\r\n    string public name = \"Dekla Token\";\r\n    string public symbol = \"DKL\";\r\n    uint256 public decimals = 18;\r\n    uint256 public INITIAL_SUPPLY = 1000000000 * (10 ** decimals);\r\n\r\n    function isDeklaToken() public pure returns (bool){\r\n        return true;\r\n    }\r\n\r\n    constructor (\r\n        address _ceoAddress,\r\n        address _cfoAddress,\r\n        address _cooAddress,\r\n        address _teamAddress,\r\n        address _saleAddress\r\n    ) public {\r\n        // initial prize address\r\n        teamAddress = _teamAddress;\r\n\r\n        // initial C level address\r\n        ceoAddress = _ceoAddress;\r\n        cfoAddress = _cfoAddress;\r\n        cooAddress = _cooAddress;\r\n        saleAddress = _saleAddress;\r\n\r\n        // mint tokens first time\r\n        _mint(INITIAL_SUPPLY);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCFOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenRateToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeklaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMaxTokenRateToMintHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCEOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLevelTxCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleRate\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMintRatesHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCOOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleRate_\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setMintRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setMaxTokenRateToMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceoAddress\",\"type\":\"address\"},{\"name\":\"_cfoAddress\",\"type\":\"address\"},{\"name\":\"_cooAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_saleAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DeklaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007aeaf9c8a62caf79c60b0eeb1e57eaefc140a5ca0000000000000000000000005425a1ca8b650ccfe0620fd10fe6e3dc46f0211d000000000000000000000000d75c77816c83537a6bb97819398fc2694e2e147800000000000000000000000032b528329271a828a1f098e782b5a2a021bfb70b000000000000000000000000b28bf5232f743c61f8c8f0db7b89ba88447261da","Library":"","SwarmSource":"bzzr://b064175b97ef48c5b91ce9f5e24fe37a3fd9e70dbdee93ecc9951897346d4cd9"}]}