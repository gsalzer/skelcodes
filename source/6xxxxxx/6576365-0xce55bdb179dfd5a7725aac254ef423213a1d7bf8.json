{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract distribution is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event OnDepositeReceived(address investorAddress, uint value);\r\n    event OnPaymentSent(address investorAddress, uint value);\r\n    \r\n    uint public minDeposite = 10000000000000000; // 0.01 eth\r\n    uint public maxDeposite = 10000000000000000000000; // 10000 eth\r\n    uint public currentPaymentIndex = 0;\r\n    uint public amountForDistribution = 0;\r\n    uint public percent = 120;\r\n    \r\n    // migration data from old contract - 0x65dfE1db61f1AC75Ed8bCCCc18E6e90c04b95dE2\r\n    bool public migrationFinished = false;\r\n    uint public amountRaised = 3295255217937131845260;\r\n    uint public depositorsCount = 285;\r\n    \r\n    address distributorWallet;    // wallet for initialize distribution\r\n    address promoWallet;    \r\n    address wallet1;\r\n    address wallet2;\r\n    address wallet3;\r\n    \r\n    struct Deposite {\r\n        address depositor;\r\n        uint amount;\r\n        uint depositeTime;\r\n        uint paimentTime;\r\n    }\r\n    \r\n    // list of all deposites\r\n    Deposite[] public deposites;\r\n    // list of deposites for 1 user\r\n    mapping ( address => uint[]) public depositors;\r\n    \r\n    modifier onlyDistributor () {\r\n        require (msg.sender == distributorWallet);\r\n        _;\r\n    }\r\n    \r\n    function setDistributorAddress(address newDistributorAddress) public onlyOwner {\r\n        require (newDistributorAddress!=address(0));\r\n        distributorWallet = newDistributorAddress;\r\n    }\r\n    \r\n    function setNewMinDeposite(uint newMinDeposite) public onlyOwner {\r\n        minDeposite = newMinDeposite;\r\n    }\r\n    \r\n    function setNewMaxDeposite(uint newMaxDeposite) public onlyOwner {\r\n        maxDeposite = newMaxDeposite;\r\n    }\r\n    \r\n    function setNewWallets(address newWallet1, address newWallet2, address newWallet3) public onlyOwner {\r\n        wallet1 = newWallet1;\r\n        wallet2 = newWallet2;\r\n        wallet3 = newWallet3;\r\n    }\r\n    \r\n    function setPromoWallet(address newPromoWallet) public onlyOwner {\r\n        require (newPromoWallet != address(0));\r\n        promoWallet = newPromoWallet;\r\n    }\r\n    \r\n\r\n    constructor () public {\r\n        distributorWallet = address(0x494A7A2D0599f2447487D7fA10BaEAfCB301c41B);\r\n        promoWallet = address(0xFd3093a4A3bd68b46dB42B7E59e2d88c6D58A99E);\r\n        wallet1 = address(0xBaa2CB97B6e28ef5c0A7b957398edf7Ab5F01A1B);\r\n        wallet2 = address(0xFDd46866C279C90f463a08518e151bC78A1a5f38);\r\n        wallet3 = address(0xdFa5662B5495E34C2aA8f06Feb358A6D90A6d62e);\r\n        \r\n    }\r\n    \r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    function () public payable {\r\n        require ( (msg.value >= minDeposite) && (msg.value <= maxDeposite) );\r\n        require ( !isContract(msg.sender) );\r\n        Deposite memory newDeposite = Deposite(msg.sender, msg.value, now, 0);\r\n        deposites.push(newDeposite);\r\n        if (depositors[msg.sender].length == 0) depositorsCount+=1;\r\n        depositors[msg.sender].push(deposites.length - 1);\r\n        amountForDistribution = amountForDistribution.add(msg.value);\r\n        amountRaised = amountRaised.add(msg.value);\r\n        \r\n        emit OnDepositeReceived(msg.sender,msg.value);\r\n    }\r\n    \r\n    function addMigrateBalance() public payable onlyOwner {\r\n    }\r\n    \r\n    function migrateDeposite (address _oldContract, uint _from, uint _to) public onlyOwner {\r\n        require(!migrationFinished);\r\n        distribution oldContract = distribution(_oldContract);\r\n\r\n        address depositor;\r\n        uint amount;\r\n        uint depositeTime;\r\n        uint paimentTime;\r\n\r\n        for (uint i = _from; i <= _to; i++) {\r\n            (depositor, amount, depositeTime, paimentTime) = oldContract.getDeposit(i);\r\n            if (!isContract(depositor)) {\r\n                Deposite memory newDeposite = Deposite(depositor, amount, depositeTime, paimentTime);\r\n                deposites.push(newDeposite);\r\n                depositors[msg.sender].push(deposites.length - 1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function finishMigration() onlyOwner public {\r\n        migrationFinished = true;\r\n    }\r\n    \r\n    function distribute (uint numIterations) public onlyDistributor {\r\n        \r\n        promoWallet.transfer(amountForDistribution.mul(6).div(100));\r\n        distributorWallet.transfer(amountForDistribution.mul(1).div(100));\r\n        wallet1.transfer(amountForDistribution.mul(1).div(100));\r\n        wallet2.transfer(amountForDistribution.mul(1).div(100));\r\n        wallet3.transfer(amountForDistribution.mul(1).div(100));\r\n        \r\n        uint i = 0;\r\n        uint toSend = deposites[currentPaymentIndex].amount.mul(percent).div(100);    // 120% of user deposite\r\n        \r\n        while ( (i <= numIterations) && ( address(this).balance > toSend)  ) {\r\n            deposites[currentPaymentIndex].depositor.transfer(toSend);\r\n            deposites[currentPaymentIndex].paimentTime = now;\r\n            emit OnPaymentSent(deposites[currentPaymentIndex].depositor,toSend);\r\n            \r\n            //amountForDistribution = amountForDistribution.sub(toSend);\r\n            currentPaymentIndex = currentPaymentIndex.add(1);\r\n            i = i.add(1);\r\n            toSend = deposites[currentPaymentIndex].amount.mul(percent).div(100);    // 120% of user deposite\r\n        }\r\n        \r\n        amountForDistribution = 0;\r\n    }\r\n    \r\n    // get all depositors count\r\n    function getAllDepositorsCount() public view returns(uint) {\r\n        return depositorsCount;\r\n    }\r\n    \r\n    function getAllDepositesCount() public view returns (uint) {\r\n        return deposites.length;\r\n    }\r\n\r\n    function getLastDepositId() public view returns (uint) {\r\n        return deposites.length - 1;\r\n    }\r\n\r\n    function getDeposit(uint _id) public view returns (address, uint, uint, uint){\r\n        return (deposites[_id].depositor, deposites[_id].amount, deposites[_id].depositeTime, deposites[_id].paimentTime);\r\n    }\r\n\r\n    // get count of deposites for 1 user\r\n    function getDepositesCount(address depositor) public view returns (uint) {\r\n        return depositors[depositor].length;\r\n    }\r\n    \r\n    // how much raised\r\n    function getAmountRaised() public view returns (uint) {\r\n        return amountRaised;\r\n    }\r\n    \r\n    // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount\r\n    function getLastPayments(uint lastIndex) public view returns (address, uint, uint) {\r\n        uint depositeIndex = currentPaymentIndex.sub(lastIndex).sub(1);\r\n        require ( depositeIndex >= 0 );\r\n        return ( deposites[depositeIndex].depositor , deposites[depositeIndex].paimentTime , deposites[depositeIndex].amount.mul(percent).div(100) );\r\n    }\r\n\r\n    function getUserDeposit(address depositor, uint depositeNumber) public view returns(uint, uint, uint) {\r\n        return (deposites[depositors[depositor][depositeNumber]].amount,\r\n                deposites[depositors[depositor][depositeNumber]].depositeTime,\r\n                deposites[depositors[depositor][depositeNumber]].paimentTime);\r\n    }\r\n\r\n\r\n    function getDepositeTime(address depositor, uint depositeNumber) public view returns(uint) {\r\n        return deposites[depositors[depositor][depositeNumber]].depositeTime;\r\n    }\r\n    \r\n    function getPaimentTime(address depositor, uint depositeNumber) public view returns(uint) {\r\n        return deposites[depositors[depositor][depositeNumber]].paimentTime;\r\n    }\r\n    \r\n    function getPaimentStatus(address depositor, uint depositeNumber) public view returns(bool) {\r\n        if ( deposites[depositors[depositor][depositeNumber]].paimentTime == 0 ) return false;\r\n        else return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newWallet1\",\"type\":\"address\"},{\"name\":\"newWallet2\",\"type\":\"address\"},{\"name\":\"newWallet3\",\"type\":\"address\"}],\"name\":\"setNewWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositeNumber\",\"type\":\"uint256\"}],\"name\":\"getPaimentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposites\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"depositeTime\",\"type\":\"uint256\"},{\"name\":\"paimentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositeNumber\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositeNumber\",\"type\":\"uint256\"}],\"name\":\"getPaimentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPromoWallet\",\"type\":\"address\"}],\"name\":\"setPromoWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPaymentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldContract\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"migrateDeposite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountForDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxDeposite\",\"type\":\"uint256\"}],\"name\":\"setNewMaxDeposite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDistributorAddress\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numIterations\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDepositorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositeNumber\",\"type\":\"uint256\"}],\"name\":\"getDepositeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"getLastPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDeposite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastDepositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDepositesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addMigrateBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinDeposite\",\"type\":\"uint256\"}],\"name\":\"setNewMinDeposite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnDepositeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnPaymentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"distribution","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ba35f780027540e16b50e2882d5fa1336836123c34dffdb2ff1faa6cbc538ab"}]}