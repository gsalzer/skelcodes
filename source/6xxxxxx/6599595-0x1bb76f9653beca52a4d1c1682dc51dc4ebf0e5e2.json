{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\token\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address owner) public view returns (uint256);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\common\\Ownable.sol\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \"Unauthorized.\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Non-zero address required.\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\common\\SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b, \"Invalid argument.\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0, \"Invalid argument.\");\r\n    uint256 c = _a / _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a, \"Invalid argument.\");\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a, \"Invalid argument.\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"Invalid argument.\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\StandardToken.sol\r\n\r\ncontract StandardToken is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal _totalSupply;\r\n\r\n  mapping (address => uint256) internal _balances;\r\n  mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  constructor(uint256 initialSupply) public {\r\n    _totalSupply = initialSupply;\r\n    _balances[msg.sender] = initialSupply;\r\n  }\r\n\r\n  function () public payable {\r\n    revert(\"You cannot buy tokens.\");\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer\r\n   */\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(to != address(0), \"Non-zero address required.\");\r\n    require(_balances[msg.sender] >= value, \"Insufficient balance.\");\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(to != address(0), \"Non-zero address required.\");\r\n    require(_balances[from] >= value, \"Insufficient balance.\");\r\n    require(_allowed[from][msg.sender] >= value, \"Insufficient balance.\");\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Approve\r\n   */\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC223.sol\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract ERC223 {\r\n  function name() public view returns (string);\r\n  function symbol() public view returns (string);\r\n  function decimals() public view returns (uint8);\r\n\r\n  function transfer(address to, uint256 value, bytes data) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n}\r\n\r\ncontract ERC223Receiver {\r\n  function tokenFallback(address from, uint256 value, bytes data) public;\r\n}\r\n\r\n// File: contracts\\token\\MintableToken.sol\r\n\r\ncontract MintableToken {\r\n  function mintingFinished() public view returns (bool);\r\n  function finishMinting() public returns (bool);\r\n\r\n  function mint(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n// File: contracts\\token\\BurnableToken.sol\r\n\r\ncontract BurnableToken {\r\n  function burn(uint256 value) public returns (bool);\r\n  function burnFrom(address from, uint256 value) public returns (bool);\r\n}\r\n\r\n// File: contracts\\token\\ExtendedToken.sol\r\n\r\ncontract ExtendedToken is StandardToken, ERC223, MintableToken, BurnableToken {\r\n  using SafeMath for uint256;\r\n\r\n  string internal _name;\r\n  string internal _symbol;\r\n  uint8 internal _decimals;\r\n  bool internal _mintingFinished;\r\n\r\n  event Burn(address indexed account, uint256 value);\r\n  event Mint(address indexed account, uint256 value);\r\n  event MintingFinished();\r\n\r\n  constructor(uint256 totalSupply, string name, string symbol, uint8 decimals) StandardToken(totalSupply) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n    _mintingFinished = false;\r\n  }\r\n\r\n  function name() public view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * Transfer\r\n   */\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    bytes memory empty;\r\n    return transfer(to, value, empty);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    bytes memory empty;\r\n    return transferFrom(from, to, value, empty);\r\n  }\r\n\r\n  function transfer(address to, uint256 value, bytes data) public returns (bool) {\r\n    if (_isContract(to)) {\r\n      ERC223Receiver receiver = ERC223Receiver(to);\r\n      receiver.tokenFallback(msg.sender, value, data);\r\n\r\n      super.transfer(to, value);\r\n\r\n      emit Transfer(msg.sender, to, value, data);\r\n      return true;\r\n    }\r\n\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool) {\r\n    if (_isContract(to)) {\r\n      ERC223Receiver receiver = ERC223Receiver(to);\r\n      receiver.tokenFallback(from, value, data);\r\n\r\n      super.transferFrom(from, to, value);\r\n\r\n      emit Transfer(from, to, value, data);\r\n      return true;\r\n    }\r\n\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * Burn\r\n   */\r\n\r\n  function burn(uint256 value) public returns (bool) {\r\n    require(_balances[msg.sender] >= value, \"Insufficient balance.\");\r\n\r\n    return _burn(msg.sender, value);\r\n  }\r\n\r\n  function burnFrom(address from, uint256 value) public returns (bool) {\r\n    require(from != address(0), \"Non-zero address required.\");\r\n    require(_balances[from] >= value, \"Insufficient balance.\");\r\n    require(_allowed[from][msg.sender] >= value, \"Insufficient balance.\");\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    return _burn(from, value);\r\n  }\r\n\r\n  function _burn(address from, uint256 value) private returns (bool) {\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[from] = _balances[from].sub(value);\r\n    emit Transfer(from, address(0), value);\r\n    emit Burn(from, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Mint\r\n   */\r\n\r\n  function mintingFinished() public view returns(bool) {\r\n    return _mintingFinished;\r\n  }\r\n\r\n  function finishMinting() public returns (bool) {\r\n    require(_mintingFinished == false, \"\");\r\n    _mintingFinished = true;\r\n    emit MintingFinished();\r\n    return true;\r\n  }\r\n\r\n  function mint(address to, uint256 value) public returns (bool) {\r\n    require(to != address(0), \"Non-zero address required.\");\r\n\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(address(0), to, value);\r\n    emit Mint(to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Etc\r\n   */\r\n\r\n  function _isContract(address _account) private view returns (bool) {\r\n    uint256 size = 0;\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: contracts\\LivePodToken.sol\r\n\r\ncontract LivePodToken is ExtendedToken {\r\n  using SafeMath for uint256;\r\n\r\n  bool private _tradingStarted;\r\n  address private _preSaleAgent;\r\n  address private _publicSaleAgent;\r\n\r\n  event TradeStarted();\r\n\r\n  constructor() ExtendedToken(0 * (10 ** 18), \"LIVEPOD TOKEN\", \"LVPD\", 18) public {\r\n    _tradingStarted = false;\r\n    _preSaleAgent = 0;\r\n    _publicSaleAgent = 0;\r\n  }\r\n\r\n  /**\r\n   * Transfer\r\n   */\r\n\r\n  function transfer(address to, uint256 value) public hasStartedTrading returns (bool) {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public hasStartedTrading returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public hasStartedTrading returns (bool) {\r\n    return super.approve(spender, value);\r\n  }\r\n\r\n  function transfer(address to, uint256 value, bytes data) public hasStartedTrading returns (bool) {\r\n    return super.transfer(to, value, data);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value, bytes data) public hasStartedTrading returns (bool) {\r\n    return super.transferFrom(from, to, value, data);\r\n  }\r\n\r\n  /**\r\n   * Trade\r\n   */\r\n\r\n  modifier hasStartedTrading() {\r\n    require(_tradingStarted, \"The trade has not started yet.\");\r\n    _;\r\n  }\r\n\r\n  function trading() public view returns (bool) {\r\n    return _tradingStarted;\r\n  }\r\n\r\n  function startTrading() public onlyOwnerAndAgents returns (bool) {\r\n    _tradingStarted = true;\r\n    emit TradeStarted();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Agents\r\n   */\r\n\r\n  function setPreSaleAgent(address agent) public onlyOwner returns (bool) {\r\n    require(agent != address(0), \"Non-zero address required.\");\r\n\r\n    _preSaleAgent = agent;\r\n    return true;\r\n  }\r\n\r\n  function setPublicSaleAgent(address agent) public onlyOwner returns (bool) {\r\n    require(agent != address(0), \"Non-zero address required.\");\r\n\r\n    _publicSaleAgent = agent;\r\n    return true;\r\n  }\r\n\r\n  modifier onlyOwnerAndAgents() {\r\n    require((msg.sender == owner()) || (msg.sender == _preSaleAgent) || (msg.sender == _publicSaleAgent), \"Unauthorized.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Mint\r\n   */\r\n\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    return super.finishMinting();\r\n  }\r\n\r\n  function mint(address to, uint256 value) public onlyOwnerAndAgents returns (bool) {\r\n    //require(!_tradingStarted, \"Trading has started.\");\r\n\r\n    return super.mint(to, value);\r\n  }\r\n\r\n  /**\r\n   * Etc\r\n   */\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint256 amount) public onlyOwner returns (bool) {\r\n    return ERC20(tokenAddress).transfer(owner(), amount);\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner());\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setPublicSaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setPreSaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LivePodToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e86fa697c9910927c376e970399ec49ae69cd9ef23a5800907902989e32a2d09"}]}