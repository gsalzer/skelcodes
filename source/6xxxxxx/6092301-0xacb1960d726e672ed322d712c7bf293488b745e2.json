{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/****************************************************************************\r\n*                   ******MAJz Token Smart Contract******                   *\r\n*                   Symbol      :   MAZ                                     *\r\n*                   Name        :   MAJz                                    *\r\n*                   Total Supply:   560 000 000                             *\r\n*                   Decimals    :   18                                      *\r\n*                   Almar Blockchain Technology                             *\r\n*                   *************************************                   *\r\n****************************************************************************/\r\n\r\n/****************************************************************************\r\n*                       Ownership Contract                                  *\r\n*                       for authorization Control                           *\r\n*                       and 0x0 Validation                                  *\r\n****************************************************************************/\r\ncontract Ownership {\r\n    address public _owner;\r\n\r\n    modifier onlyOwner() { require(msg.sender == _owner); _; }\r\n    modifier validDestination( address to ) { require(to != address(0x0)); _; }\r\n}\r\n\r\n/****************************************************************************\r\n*                       Safemath Library                                    *\r\n*                       to prevent Over / Underflow                         *\r\n****************************************************************************/\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b; assert(c >= a); return c; }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0){return 0;} c = a * b; assert(c / a == b); return c; }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\r\n}\r\n\r\n/****************************************************************************\r\n*                   Basic Token Interface                                   *\r\n*                   Contains Standart Token Functionalities                 *\r\n****************************************************************************/\r\n\r\ncontract BasicToken {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/****************************************************************************\r\n*                   Token Smart Contract                                    *\r\n****************************************************************************/\r\n\r\ncontract MAJz is BasicToken, Ownership {\r\n    using SafeMath for uint256;\r\n\r\n    string public _symbol;\r\n    string public _name;\r\n    uint256 public _decimals;\r\n    uint256 public _totalSupply;\r\n\r\n    mapping(address => uint256) public _balances;\r\n    \r\n\r\n    //Constructor of the Token\r\n    constructor() public{\r\n        _symbol = \"MAZ\";\r\n        _name = \"MAJz\";\r\n        _decimals = 18;\r\n        _totalSupply = 560000000000000000000000000;\r\n        _balances[msg.sender] = _totalSupply;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    //Returns the totalSupply\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    //Return the balance of an specified account\r\n    function balanceOf(address targetAddress) public view returns (uint256) {\r\n        return _balances[targetAddress];\r\n    }\r\n    \r\n    //Transfer function. Validates targetAdress not to be 0x0\r\n    function transfer(address targetAddress, uint256 value) validDestination(targetAddress) public returns (bool) {\r\n        _balances[msg.sender] = SafeMath.sub(_balances[msg.sender], value); //SafeMath will throw if value > balance\r\n        _balances[targetAddress] = SafeMath.add(_balances[targetAddress], value);\r\n        emit Transfer(msg.sender, targetAddress, value); \r\n        return true; \r\n    }\r\n\r\n    //Burn some of the tokens\r\n    function burnTokens(uint256 value) public onlyOwner returns (bool){\r\n        _balances[_owner] = SafeMath.sub(_balances[_owner], value); //SafeMath will throw if value > balance\r\n        _totalSupply = SafeMath.sub(_totalSupply, value); \r\n        emit BurnTokens(value);\r\n        return true;\r\n    }\r\n\r\n    //Emit new tokens\r\n    function emitTokens(uint256 value) public onlyOwner returns (bool){\r\n        _balances[_owner] = SafeMath.add(_balances[_owner], value); //SafeMath will throw if Overflow\r\n        _totalSupply = SafeMath.add(_totalSupply, value);\r\n        emit EmitTokens(value);\r\n        return true;\r\n    }\r\n\r\n    //Revert a transfer in case of error\r\n    function revertTransfer (address targetAddress, uint256 value) public onlyOwner returns (bool){\r\n        _balances[targetAddress] = SafeMath.sub(_balances[targetAddress], value);\r\n        _balances[_owner] = SafeMath.add(_balances[_owner], value);\r\n        emit RevertTransfer(targetAddress, value);\r\n        return true;\r\n    }\r\n    event BurnTokens(uint256 value);\r\n    event EmitTokens(uint256 value);\r\n    event RevertTransfer(address targetAddress, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"revertTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emitTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EmitTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RevertTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MAJz","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7447f44f1082c8135d7857afe2fc10c323400ecbf0e291cd2b2d672c658d394a"}]}