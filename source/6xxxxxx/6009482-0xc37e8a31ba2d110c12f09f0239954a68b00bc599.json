{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/EubChainIco.sol\r\n\r\ncontract EubChainIco is PausableToken {\r\n\r\n  using SafeMath for uint;\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for StandardToken;\r\n\r\n  string public name = 'EUB Chain';\r\n  string public symbol = 'EUBC';\r\n  uint8 public decimals = 8;\r\n\r\n  uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);  // 1 billion tokens\r\n\r\n  uint public startTime;  // contract deployed timestamp\r\n\r\n  uint256 public tokenSold = 0; // total token sold\r\n\r\n  uint8 private teamShare = 10; // 10 percent\r\n  uint8 private teamExtraShare = 2; // 2 percent\r\n  uint8 private communityShare = 10; // 10 percent\r\n  uint8 private foundationShare = 10; // 10 percent\r\n  uint8 private operationShare = 40; // 40 percent\r\n\r\n  uint8 private icoShare = 30; // 30 percent\r\n  uint256 private icoCap = totalSupply.mul(icoShare).div(100);\r\n\r\n  uint256 private teamLockPeriod = 365 days;\r\n  uint256 private minVestLockMonths = 3;\r\n\r\n  address private fundsWallet;\r\n  address private teamWallet; // for team, lock for 1 year (can not transfer)\r\n  address private communityWallet; // for community group\r\n  address private foundationWallet; // for the foundation group\r\n\r\n  struct Locking {\r\n    uint256 amount;\r\n    uint endTime;\r\n  }\r\n  struct Vesting {\r\n    uint256 amount;\r\n    uint startTime;\r\n    uint lockMonths;\r\n    uint256 released;\r\n  }\r\n\r\n  mapping (address => Locking) private lockingMap;\r\n  mapping (address => Vesting) private vestingMap;\r\n\r\n  event VestTransfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 amount, \r\n    uint startTime, \r\n    uint lockMonths\r\n  );\r\n  event Release(address indexed to, uint256 amount);\r\n\r\n  /*\r\n    Contract constructor\r\n\r\n    @param _fundsWallet - funding wallet address\r\n    @param _teamWallet - team wallet address\r\n\r\n    @return address of created contract\r\n  */\r\n  constructor () public {\r\n\r\n    startTime = now;\r\n    uint teamLockEndTime = startTime.add(teamLockPeriod);\r\n\r\n    // save wallet addresses\r\n    fundsWallet = 0x1D64D9957e54711bf681985dB11Ac4De6508d2d8;\r\n    teamWallet = 0xe0f58e3b40d5B97aa1C72DD4853cb462E8628386;\r\n    communityWallet = 0x12bEfdd7D64312353eA0Cb0803b14097ee4cE28F;\r\n    foundationWallet = 0x8e037d80dD9FF654a17A4a009B49BfB71a992Cab;\r\n\r\n    // calculate token/allocation for each wallet type\r\n    uint256 teamTokens = totalSupply.mul(teamShare).div(100);\r\n    uint256 teamExtraTokens = totalSupply.mul(teamExtraShare).div(100);\r\n    uint256 communityTokens = totalSupply.mul(communityShare).div(100);\r\n    uint256 foundationTokens = totalSupply.mul(foundationShare).div(100);\r\n    uint256 operationTokens = totalSupply.mul(operationShare).div(100);\r\n\r\n    // team wallet enter vesting period after lock period\r\n    Vesting storage teamVesting = vestingMap[teamWallet];\r\n    teamVesting.amount = teamTokens;\r\n    teamVesting.startTime = teamLockEndTime;\r\n    teamVesting.lockMonths = 6;\r\n    emit VestTransfer(0x0, teamWallet, teamTokens, teamLockEndTime, teamVesting.lockMonths);\r\n\r\n    // transfer tokens to wallets\r\n    balances[communityWallet] = communityTokens;\r\n    emit Transfer(0x0, communityWallet, communityTokens);\r\n    balances[foundationWallet] = foundationTokens;\r\n    emit Transfer(0x0, foundationWallet, foundationTokens);\r\n\r\n    // transfer extra tokens from community wallet to team wallet\r\n    balances[communityWallet] = balances[communityWallet].sub(teamExtraTokens);\r\n    balances[teamWallet] = balances[teamWallet].add(teamExtraTokens);\r\n    emit Transfer(communityWallet, teamWallet, teamExtraTokens);\r\n  \r\n    // assign the rest to the funds wallet\r\n    uint256 restOfTokens = (\r\n      totalSupply\r\n        .sub(teamTokens)\r\n        .sub(communityTokens)\r\n        .sub(foundationTokens)\r\n        .sub(operationTokens)\r\n    );\r\n    balances[fundsWallet] = restOfTokens;\r\n    emit Transfer(0x0, fundsWallet, restOfTokens);\r\n    \r\n  }\r\n\r\n  /*\r\n    transfer vested tokens to receiver with lock period in months\r\n\r\n    @param _to - address of token receiver \r\n    @param _amount - amount of token allocate \r\n    @param _lockMonths - number of months to vest\r\n\r\n    @return true if the transfer is done\r\n  */\r\n  function vestedTransfer(address _to, uint256 _amount, uint _lockMonths) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\r\n    require(\r\n      msg.sender == fundsWallet ||\r\n      msg.sender == teamWallet\r\n    );\r\n  \r\n    // minimum vesting 3 months\r\n    require(_lockMonths >= minVestLockMonths);\r\n\r\n    // make sure it is a brand new vesting on the address\r\n    Vesting storage vesting = vestingMap[_to];\r\n    require(vesting.amount == 0);\r\n\r\n    if (msg.sender == fundsWallet) {\r\n      // check if token amount exceeds ico token cap\r\n      require(allowPurchase(_amount));\r\n      require(isPurchaseWithinCap(tokenSold, _amount));\r\n    \r\n      // check if msg.sender allow to send the amount\r\n      require(allowTransfer(msg.sender, _amount));\r\n\r\n      uint256 transferAmount = _amount.mul(15).div(100);\r\n      uint256 vestingAmount = _amount.sub(transferAmount);\r\n\r\n      vesting.amount = vestingAmount;\r\n      vesting.startTime = now;\r\n      vesting.lockMonths = _lockMonths;\r\n\r\n      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n      tokenSold = tokenSold.add(_amount);\r\n\r\n      balances[_to] = balances[_to].add(transferAmount);\r\n      emit Transfer(msg.sender, _to, transferAmount);\r\n    } else if (msg.sender == teamWallet) {\r\n      Vesting storage teamVesting = vestingMap[teamWallet];\r\n\r\n      require(now < teamVesting.startTime);\r\n      require(\r\n        teamVesting.amount.sub(teamVesting.released) > _amount\r\n      );\r\n\r\n      teamVesting.amount = teamVesting.amount.sub(_amount);\r\n\r\n      vesting.amount = _amount;\r\n      vesting.startTime = teamVesting.startTime;\r\n      vesting.lockMonths = _lockMonths;\r\n\r\n      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // @return true if ico is open\r\n  function isIcoOpen() public view returns (bool) {\r\n    bool capReached = tokenSold >= icoCap;\r\n    return !capReached;\r\n  }\r\n\r\n  /*\r\n    check if purchase amount exists ico cap\r\n\r\n    @param _tokenSold - amount of token sold \r\n    @param _purchaseAmount - amount of token want to purchase\r\n\r\n    @return true if _purchaseAmount is allowed\r\n  */\r\n  function isPurchaseWithinCap(uint256 _tokenSold, uint256 _purchaseAmount) internal view returns(bool) {\r\n    bool isLessThanCap = _tokenSold.add(_purchaseAmount) <= icoCap;\r\n    return isLessThanCap;\r\n  }\r\n\r\n  /*\r\n    @param _amount - amount of token\r\n    @return true if the purchase is valid\r\n  */\r\n  function allowPurchase(uint256 _amount) internal view returns (bool) {\r\n    bool nonZeroPurchase = _amount != 0;\r\n    return nonZeroPurchase && isIcoOpen();\r\n  }\r\n\r\n  /*\r\n    @param _wallet - wallet address of the token sender\r\n    @param _amount - amount of token\r\n    @return true if the transfer is valid\r\n  */\r\n  function allowTransfer(address _wallet, uint256 _amount) internal view returns (bool) {\r\n    Locking memory locking = lockingMap[_wallet];\r\n    if (locking.endTime > now) {\r\n      return balances[_wallet].sub(_amount) >= locking.amount;\r\n    } else {\r\n      return balances[_wallet] >= _amount;\r\n    }\r\n  }\r\n\r\n  /*\r\n    transfer token from caller to receiver\r\n\r\n    @param _to - wallet address of the token receiver\r\n    @param _value - amount of token to be transferred\r\n\r\n    @return true if the transfer is done\r\n  */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(allowTransfer(msg.sender, _value));\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /*\r\n    transfer token from sender to receiver \r\n\r\n    @param _from - wallet address of the token sender\r\n    @param _to - wallet address of the token receiver\r\n    @param _value - amount of token to be transferred\r\n\r\n    @return true if the transfer is done\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value)  onlyPayloadSize(3 * 32) public returns (bool) {\r\n    require(allowTransfer(_from, _value));\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /*\r\n    @param _wallet - wallet address wanted to check\r\n    @return amount of token allocated\r\n  */\r\n  function allocationOf(address _wallet) public view returns (uint256) {\r\n    Vesting memory vesting = vestingMap[_wallet];\r\n    return vesting.amount;\r\n  }\r\n\r\n  /*\r\n    get the releasable tokens\r\n    @return amount of released tokens\r\n  */\r\n  function release() public onlyPayloadSize(0 * 32) returns (uint256) {\r\n    uint256 unreleased = releasableAmount(msg.sender);\r\n    Vesting storage vesting = vestingMap[msg.sender];\r\n\r\n    if (unreleased > 0) {\r\n      vesting.released = vesting.released.add(unreleased);\r\n      emit Release(msg.sender, unreleased);\r\n\r\n      balances[msg.sender] = balances[msg.sender].add(unreleased);\r\n      emit Transfer(0x0, msg.sender, unreleased);\r\n    }\r\n\r\n    return unreleased;\r\n  }\r\n\r\n  /*\r\n    @param _wallet - wallet address wanted to check\r\n    @return amount of releasable token\r\n  */\r\n  function releasableAmount(address _wallet) public view returns (uint256) {\r\n    Vesting memory vesting = vestingMap[_wallet];\r\n    return vestedAmount(_wallet).sub(vesting.released);\r\n  }\r\n\r\n  /*\r\n    @param _wallet - wallet address wanted to check\r\n    @return amount of vested token\r\n  */\r\n  function vestedAmount(address _wallet) public view returns (uint256) {\r\n    uint amonth = 30 days;\r\n    Vesting memory vesting = vestingMap[_wallet];\r\n    uint lockPeriod = vesting.lockMonths.mul(amonth);\r\n    uint lockEndTime = vesting.startTime.add(lockPeriod);\r\n\r\n    if (now >= lockEndTime) {\r\n      return vesting.amount;\r\n    } else if (now > vesting.startTime) {\r\n      // vest a portion of token each month\r\n      \r\n      uint roundedPeriod = now\r\n        .sub(vesting.startTime)\r\n        .div(amonth)\r\n        .mul(amonth);\r\n\r\n      return vesting.amount\r\n        .mul(roundedPeriod)\r\n        .div(lockPeriod);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /*\r\n    modifiers to avoid short address attack\r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length == size + 4);\r\n    _;\r\n  } \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockMonths\",\"type\":\"uint256\"}],\"name\":\"vestedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"allocationOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockMonths\",\"type\":\"uint256\"}],\"name\":\"VestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EubChainIco","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d2c7af40170f7efe2fb2530d037718d38fbe6c154d39a3b993c550311464c583"}]}