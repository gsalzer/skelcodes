{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* \r\nWelcome to the greates pyramid scheme of the Internet! And it's UNSTOPPABLE\r\nYou can access it on IPFS here: https://ipfs.io/ipfs/Qmb6q3oWG33xeNoVppRHv1Mk23e5zMd8JK7dmKAhgiFk9H/\r\n*/\r\n\r\ncontract UnstoppablePyramid {\r\n    \r\n    /* Admin */\r\n    address devAddress = 0x75E129b02D12ECa5A5D7548a5F75007f84387b8F;\r\n\r\n    /* The Unstoppable Ponzi Core */\r\n    uint256 basePricePonzi = 50000000000000000;    // 0.05 ETH\r\n\r\n    /* Some stats */\r\n    uint256 totalAmountPlayed;\r\n    uint256 totalCommissionSent;\r\n\r\n    struct PonziFriend {\r\n        address playerAddr;\r\n        uint parent;\r\n        uint256 amountPlayed;   // We keep track of the amount invested\r\n        uint256 amountEarned;   // We keep track of the commissions received. It can't be more than 10x the amount invested\r\n    }\r\n    PonziFriend[] ponziFriends;\r\n    mapping (address => uint) public ponziFriendsToId;\r\n    \r\n    /* Track Level 1, 2 and 3 commissions */\r\n    mapping (uint => uint) public ponziFriendToLevel1Ref;\r\n    mapping (uint => uint) public ponziFriendToLevel2Ref;\r\n    mapping (uint => uint) public ponziFriendToLevel3Ref;\r\n\r\n    // The main function, we call it when a new friend wants to join\r\n    function newPonziFriend(uint _parentId) public payable isHuman() {\r\n        /* Commissions */\r\n        uint256 com1percent = msg.value / 100;\r\n        uint256 comLevel1 = com1percent * 50; // 50%\r\n        uint256 comLevel2 = com1percent * 35; // 35%\r\n        uint256 comLevel3 = com1percent * 15; // 15%\r\n    \r\n        require(msg.value >= basePricePonzi);\r\n\r\n        /* Transfer commission to parents (level 1, 2 & 3) */\r\n\r\n        // Transfer to level 1 if parent[l1] hasn't reached its limit\r\n        if(ponziFriends[_parentId].amountEarned < (ponziFriends[_parentId].amountPlayed * 5) && _parentId < ponziFriends.length) {\r\n            // Transfer commission\r\n            ponziFriends[_parentId].playerAddr.transfer(comLevel1);\r\n\r\n            // Record amount received\r\n            ponziFriends[_parentId].amountEarned += comLevel1;\r\n            \r\n            // Increment level 1 ref\r\n            ponziFriendToLevel1Ref[_parentId]++;\r\n        } else {\r\n            // If the parent has exceeded its x5 limit we transfer the commission to the dev\r\n            devAddress.transfer(comLevel1);\r\n        }\r\n        \r\n\r\n        // Transfer to level 2\r\n        uint level2parent = ponziFriends[_parentId].parent;\r\n        if(ponziFriends[level2parent].amountEarned < (ponziFriends[level2parent].amountPlayed *5 )) {\r\n            // Transfer commission\r\n            ponziFriends[level2parent].playerAddr.transfer(comLevel2);\r\n\r\n            // Record amount received\r\n            ponziFriends[level2parent].amountEarned += comLevel2;\r\n            \r\n            // Increment level 2 ref\r\n            ponziFriendToLevel2Ref[level2parent]++;\r\n        } else {\r\n            // If the parent has exceeded its x5 limit we transfer the commission to the dev\r\n            devAddress.transfer(comLevel2);\r\n        }\r\n        \r\n\r\n        // Transfer to level 3\r\n        uint level3parent = ponziFriends[level2parent].parent;\r\n        if(ponziFriends[level3parent].amountEarned < (ponziFriends[level3parent].amountPlayed * 5)) {\r\n            // Transfer commission\r\n            ponziFriends[level3parent].playerAddr.transfer(comLevel3); \r\n\r\n            // Record amount received\r\n            ponziFriends[level3parent].amountEarned += comLevel3;\r\n            \r\n            // Increment level 3 ref\r\n            ponziFriendToLevel3Ref[level3parent]++;\r\n        } else {\r\n            // If the parent has exceeded its x5 limit we transfer the commission to the dev\r\n            devAddress.transfer(comLevel3);\r\n        }\r\n\r\n        /* End Transfer */\r\n\r\n        /* Save Ponzi Friend in struct */\r\n\r\n        if(ponziFriendsToId[msg.sender] > 0) {\r\n            // Player exists, update data\r\n            ponziFriends[ponziFriendsToId[msg.sender]].amountPlayed += msg.value;\r\n        } else {\r\n            // Player doesn't exist create it\r\n            uint pzfId = ponziFriends.push(PonziFriend(msg.sender, _parentId, msg.value, 0)) - 1;\r\n            ponziFriendsToId[msg.sender] = pzfId;\r\n        }\r\n\r\n        /* End Save Ponzi Friend */\r\n\r\n        /* Save stats */\r\n        totalAmountPlayed = totalAmountPlayed + msg.value;\r\n        totalCommissionSent = totalCommissionSent + comLevel1 + comLevel2 + comLevel3;\r\n\r\n    }\r\n\r\n    // This function is called when the contract is deployed\r\n    constructor() public {\r\n        // We initiate the first player\r\n        uint pzfId = ponziFriends.push(PonziFriend(devAddress, 0, 1000000000000000000000000000, 0)) - 1;\r\n        ponziFriendsToId[msg.sender] = pzfId;\r\n    }\r\n\r\n    // This will return the stats for a ponzi friend // returns(ponziFriendId, parent, amoutPlayed, amountEarned)\r\n    function getPonziFriend(address _addr) public view returns(uint, uint, uint256, uint256, uint, uint, uint) {\r\n        uint pzfId = ponziFriendsToId[_addr];\r\n        if(pzfId == 0) {\r\n            return(0, 0, 0, 0, 0, 0, 0);\r\n        } else {\r\n            return(pzfId, ponziFriends[pzfId].parent, ponziFriends[pzfId].amountPlayed, ponziFriends[pzfId].amountEarned, ponziFriendToLevel1Ref[pzfId], ponziFriendToLevel2Ref[pzfId], ponziFriendToLevel3Ref[pzfId]);\r\n        }\r\n    }\r\n\r\n    // Return some general stats about the game // returns(friendsLength, amountPlayed, commissionsSent)\r\n    function getStats() public view returns(uint, uint256, uint256) {\r\n        return(ponziFriends.length, totalAmountPlayed, totalCommissionSent);\r\n    }\r\n\r\n    // Add isHuman check for the newPonziFriend function (we want to avoid contract to participate in this experience)\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPonziFriend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponziFriendToLevel3Ref\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ponziFriendsToId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponziFriendToLevel2Ref\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parentId\",\"type\":\"uint256\"}],\"name\":\"newPonziFriend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponziFriendToLevel1Ref\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UnstoppablePyramid","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a58b165f5681a2e0dfa2b43bd70b09c000a21011d923386e10ef6b2b40c457c2"}]}