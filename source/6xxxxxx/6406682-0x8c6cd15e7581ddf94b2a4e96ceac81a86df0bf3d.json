{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Base\r\n{\r\n    uint8 constant HEROLEVEL_MIN = 1;\r\n    uint8 constant HEROLEVEL_MAX = 5;\r\n\r\n    uint8 constant LIMITCHIP_MINLEVEL = 3;\r\n    uint constant PARTWEIGHT_NORMAL = 100;\r\n    uint constant PARTWEIGHT_LIMIT = 40;\r\n\r\n    address creator;\r\n\r\n    constructor() public\r\n    {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    modifier MasterAble()\r\n    {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function IsLimitPart(uint8 level, uint part) internal pure returns(bool)\r\n    {\r\n        if (level < LIMITCHIP_MINLEVEL) return false;\r\n        if (part < GetPartNum(level)) return false;\r\n        return true;\r\n    }\r\n\r\n    function GetPartWeight(uint8 level, uint part) internal pure returns(uint)\r\n    {\r\n        if (IsLimitPart(level, part)) return PARTWEIGHT_LIMIT;\r\n        return PARTWEIGHT_NORMAL;\r\n    }\r\n    \r\n    function GetPartNum(uint8 level) internal pure returns(uint)\r\n    {\r\n        if (level <= 2) return 3;\r\n        else if (level <= 4) return 4;\r\n        return 5;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicTime\r\n{\r\n    uint constant DAY_SECONDS = 60 * 60 * 24;\r\n\r\n    function GetDayCount(uint timestamp) pure internal returns(uint)\r\n    {\r\n        return timestamp/DAY_SECONDS;\r\n    }\r\n\r\n    function GetExpireTime(uint timestamp, uint dayCnt) pure internal returns(uint)\r\n    {\r\n        uint dayEnd = GetDayCount(timestamp) + dayCnt;\r\n        return dayEnd * DAY_SECONDS;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAuth is Base\r\n{\r\n\r\n    address master;\r\n    mapping(address => bool) auth_list;\r\n\r\n    function InitMaster(address acc) internal\r\n    {\r\n        require(address(0) != acc);\r\n        master = acc;\r\n    }\r\n\r\n    modifier MasterAble()\r\n    {\r\n        require(msg.sender == creator || msg.sender == master);\r\n        _;\r\n    }\r\n\r\n    modifier OwnerAble(address acc)\r\n    {\r\n        require(acc == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier AuthAble()\r\n    {\r\n        require(auth_list[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function CanHandleAuth(address from) internal view returns(bool)\r\n    {\r\n        return from == creator || from == master;\r\n    }\r\n    \r\n    function SetAuth(address target) external\r\n    {\r\n        require(CanHandleAuth(tx.origin) || CanHandleAuth(msg.sender));\r\n        auth_list[target] = true;\r\n    }\r\n\r\n    function ClearAuth(address target) external\r\n    {\r\n        require(CanHandleAuth(tx.origin) || CanHandleAuth(msg.sender));\r\n        delete auth_list[target];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract StoreChipBag is BasicAuth\r\n{\r\n\r\n    mapping(address => uint32[]) g_ChipBag;\r\n\r\n    constructor(address Master) public\r\n    {\r\n        InitMaster(Master);\r\n    }\r\n\r\n    function AddChip(address acc, uint32 iChip) external OwnerAble(acc) AuthAble\r\n    {\r\n        g_ChipBag[acc].push(iChip);\r\n    }\r\n\r\n    function CollectChips(address acc) external returns(uint32[] chips)\r\n    {\r\n        chips = g_ChipBag[acc];\r\n        delete g_ChipBag[acc];\r\n    }\r\n\r\n    function GetChipsInfo(address acc) external view returns(uint32[] chips)\r\n    {\r\n        chips = g_ChipBag[acc];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"GetChipsInfo\",\"outputs\":[{\"name\":\"chips\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SetAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ClearAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"iChip\",\"type\":\"uint32\"}],\"name\":\"AddChip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"CollectChips\",\"outputs\":[{\"name\":\"chips\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"Master\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"StoreChipBag","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000035f9610d5c11755bb58313b19dab2929038618ed","Library":"","SwarmSource":"bzzr://c5f2c94a42e9d528d890f14b6ff33aa814d8a69361a8de6789b36ab1efad359a"}]}