{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BlockWar {\r\n    using SafeMath for uint256;\r\n    address owner;\r\n    mapping (uint => mapping(address => uint)) public leftUserBlockNumber;\r\n    mapping (uint => mapping(address => uint)) public rightUserBlockNumber;\r\n    mapping (uint => bool) public mapGameLeftWin;  // 0 for left, 1 for right\r\n    mapping (uint => uint) public mapGamePrizePerBlock;  // gamePrizePerBlock\r\n    mapping (address => uint) public userWithdrawRound;  //round lower than userWithdrawRound has withdraw\r\n    uint currentRound = 0;\r\n    uint leftBlockNumber = 0;\r\n    uint rightBlockNumber = 0;\r\n    uint maxBlockNumber = 1000;  \r\n    uint buildFee = 100 finney;\r\n    uint gameStartTimestamp;  // if gameEnded and currentRound==0 wait gameStartTimestamp\r\n    uint gameIntervalTimestamp = 600;  // how many seconds game start after game end\r\n    uint gamePrizePool = 0;  // game prize pool\r\n    uint public gameLength = 10800;  \r\n    uint public doCallNumber;\r\n    /* Modifiers */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInGame() {\r\n        require(now > gameStartTimestamp);\r\n        _;\r\n    }\r\n\r\n    /* Owner */\r\n    function setOwner (address _owner) onlyOwner() public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function BlockWar() public {\r\n        owner = msg.sender;\r\n        gameStartTimestamp = 1535547600;  // set gameStartTimestamp\r\n    }\r\n\r\n    function getBlockBuildFee(uint currentBlockNumber) public view returns(uint) {\r\n\t\tif (currentBlockNumber <= 100) {\r\n\t\t\treturn buildFee.div(2);  // 50 percent\r\n\t\t}\r\n\t\tif (currentBlockNumber <= 200) {\r\n\t\t\treturn buildFee.mul(3).div(4);  // 75 percent\r\n\t\t}\r\n\t\treturn buildFee; // 100 percent\r\n    }\r\n\r\n    function buildLeft(address inviteAddress, uint blockNumber) public payable onlyInGame {\r\n    \tuint totalMoney = buildFee.mul(blockNumber);\r\n    \trequire(msg.value >= totalMoney);\r\n        require(blockNumber > 0);\r\n        uint excess = msg.value.sub(totalMoney);\r\n        uint totalBuildFee = 0;\r\n        for (uint i=leftBlockNumber;i<leftBlockNumber+blockNumber;i++) {\r\n    \t\ttotalBuildFee = totalBuildFee.add(getBlockBuildFee(i+1));\r\n        }\r\n        excess = excess.add(totalMoney.sub(totalBuildFee));\r\n        if (excess > 0) {\r\n        \tmsg.sender.transfer(excess);\r\n        }\r\n        // handle ether\r\n        uint devFee = 0;\r\n        uint inviteFee = 0;\r\n        devFee = totalBuildFee.mul(4).div(100);\r\n        if (inviteAddress != address(0)) {\r\n    \t\tinviteFee = totalBuildFee.mul(3).div(100);\r\n        } else {\r\n    \t\tdevFee = totalBuildFee.mul(7).div(100);  // 7% percent if not invite\r\n        }\r\n        owner.transfer(devFee);\r\n        if (inviteFee > 0) {\r\n    \t\tinviteAddress.transfer(inviteFee);\r\n        }\r\n        leftBlockNumber = leftBlockNumber.add(blockNumber);\r\n        gamePrizePool = gamePrizePool.add(totalBuildFee.sub(devFee).sub(inviteFee));\r\n\r\n        // record user block number\r\n        leftUserBlockNumber[currentRound][msg.sender] += blockNumber;\r\n       \t// try trigger game end\r\n       \ttrigger_game_end(totalBuildFee);\r\n    }\r\n\r\n    function buildRight(address inviteAddress, uint blockNumber) public payable onlyInGame {\r\n\t\tuint totalMoney = buildFee.mul(blockNumber);\r\n\t\trequire(msg.value >= totalMoney);\r\n        require(blockNumber > 0);\r\n        uint excess = msg.value.sub(totalMoney);\r\n        uint totalBuildFee = 0;\r\n        for (uint i=rightBlockNumber;i<rightBlockNumber+blockNumber;i++) {\r\n    \t\ttotalBuildFee = totalBuildFee.add(getBlockBuildFee(i+1));\r\n        }\r\n        excess = excess.add(totalMoney.sub(totalBuildFee));\r\n        if (excess > 0) {\r\n        \tmsg.sender.transfer(excess);\r\n        }\r\n        // handle ether\r\n        uint devFee = 0;\r\n        uint inviteFee = 0;\r\n        devFee = totalBuildFee.mul(4).div(100);\r\n        if (inviteAddress != address(0)) {\r\n    \t\tinviteFee = totalBuildFee.mul(3).div(100);\r\n        } else {\r\n    \t\tdevFee = totalBuildFee.mul(7).div(100);  // 7% percent if not invite\r\n        }\r\n        owner.transfer(devFee);\r\n        if (inviteFee > 0) {\r\n    \t\tinviteAddress.transfer(inviteFee);\r\n        }\r\n        rightBlockNumber = rightBlockNumber.add(blockNumber);\r\n        gamePrizePool = gamePrizePool.add(totalBuildFee.sub(devFee).sub(inviteFee));\r\n\r\n        // record user block number\r\n        rightUserBlockNumber[currentRound][msg.sender] += blockNumber;\r\n       \t// try trigger game end\r\n       \ttrigger_game_end(totalBuildFee);\r\n    }\r\n\r\n    function trigger_game_end(uint totalBuildFee) private onlyInGame {\r\n\t\t// game end\r\n\t\tbool gameEnd = false;\r\n\t\tif (rightBlockNumber > maxBlockNumber) {\r\n\t\t\t\tgameEnd = true;\r\n\t\t}\r\n\t\tif (leftBlockNumber > maxBlockNumber) {\r\n\t\t\t\tgameEnd = true;\r\n\t\t}\r\n\t\tif (now.sub(gameStartTimestamp) > gameLength) {\r\n\t\t\t\tgameEnd = true;\r\n\t\t}\r\n\t\tif (gameEnd) {\r\n\t\t\tuint maxUserPrize = gamePrizePool.mul(5).div(100);\r\n\t\t\tuint nextGamePrizePool = gamePrizePool.div(10);\r\n\t\t\tif (gamePrizePool > 0) {\r\n\t\t\t\t\tmsg.sender.transfer(maxUserPrize);\r\n\t\t\t}\r\n\t\t\tgamePrizePool = gamePrizePool.sub(maxUserPrize).sub(nextGamePrizePool);\r\n\t\t\tuint prizePerBlock = 0;\r\n\t\t\tif (leftBlockNumber > maxBlockNumber) {\r\n\t\t\t\t// right win\r\n\t\t\t\tif (rightBlockNumber > 0) {\r\n\t\t\t\t    prizePerBlock = gamePrizePool/rightBlockNumber;\r\n\t\t\t\t} else {\r\n\t\t\t\t    owner.transfer(gamePrizePool);\r\n\t\t\t\t    prizePerBlock = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmapGameLeftWin[currentRound] = false;\r\n\t\t\t} else if (rightBlockNumber > maxBlockNumber) {\r\n\t\t\t\t// left win\r\n\t\t\t\tif (leftBlockNumber > 0) {\r\n\t\t\t\t    prizePerBlock = gamePrizePool/leftBlockNumber;\r\n\t\t\t\t} else {\r\n\t\t\t\t    owner.transfer(gamePrizePool);\r\n\t\t\t\t    prizePerBlock = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmapGameLeftWin[currentRound] = true;\r\n\t\t\t} else {\r\n\t\t\t\tif (leftBlockNumber >= rightBlockNumber) {\r\n\t\t\t\t\t// left win\r\n\t\t\t\t\tprizePerBlock = gamePrizePool/leftBlockNumber;\r\n\t\t\t\t\tmapGameLeftWin[currentRound] = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// right win\r\n\t\t\t\t\tprizePerBlock = gamePrizePool/rightBlockNumber;\r\n\t\t\t\t\tmapGameLeftWin[currentRound] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// record game prize\r\n\t\t\tmapGamePrizePerBlock[currentRound] = prizePerBlock;\r\n\t\t\t// start next game\r\n\t\t\tgamePrizePool = nextGamePrizePool;\r\n\t\t\tgameStartTimestamp = now + gameIntervalTimestamp;  // new game start\r\n\t\t\tcurrentRound += 1;\r\n\t\t\tleftBlockNumber = 0;\r\n\t\t\trightBlockNumber = 0;\r\n\t\t}\r\n    }\r\n\r\n    function getUserMoney(address userAddress) public view returns(uint){\r\n\t\tuint userTotalPrize = 0;\r\n\t\tfor (uint i=userWithdrawRound[userAddress]; i<currentRound;i++) {\r\n\t\t\tif (mapGameLeftWin[i]) {\r\n\t\t\t\tuserTotalPrize = userTotalPrize.add(leftUserBlockNumber[i][userAddress].mul(mapGamePrizePerBlock[i]));\r\n\t\t\t} else {\r\n\t\t\t\tuserTotalPrize = userTotalPrize.add(rightUserBlockNumber[i][userAddress].mul(mapGamePrizePerBlock[i]));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn userTotalPrize;\r\n    }\r\n\r\n    function withdrawUserPrize() public {\r\n\t\trequire(currentRound > 0);\r\n\t\tuint userTotalPrize = getUserMoney(msg.sender);\r\n\t\tuserWithdrawRound[msg.sender] = currentRound;\r\n\t\tif (userTotalPrize > 0) {\r\n\t\t\tmsg.sender.transfer(userTotalPrize);\r\n\t\t}\r\n    }\r\n\r\n    function daCall() public {\r\n        doCallNumber += 1;\r\n    }\r\n\r\n    function getGameStats() public view returns(uint[]) {\r\n        // 1. currentRound\r\n        // 2. gameStartTimestamp\r\n        // 3. leftBlockNumber\r\n        // 4. rightBlockNumber\r\n        // 5. gamePrizePool\r\n        // 6. userPrize\r\n        uint[] memory result = new uint[](8);\r\n        uint userPrize = getUserMoney(msg.sender);\r\n        result[0] = currentRound;\r\n        result[1] = gameStartTimestamp;\r\n        result[2] = leftBlockNumber;\r\n        result[3] = rightBlockNumber;\r\n        result[4] = gamePrizePool;\r\n        result[5] = userPrize;\r\n        result[6] = leftUserBlockNumber[currentRound][msg.sender];\r\n        result[7] = rightUserBlockNumber[currentRound][msg.sender];\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapGamePrizePerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leftUserBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUserPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteAddress\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"buildLeft\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapGameLeftWin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteAddress\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"buildRight\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"daCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockBuildFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rightUserBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"doCallNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BlockWar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f708be62cf2df9fbf791a888c6097d594e0756a312b9a81cebe2ed7b5b90449e"}]}