{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner());\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n  \r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function tokenURI(uint256 tokenId) public view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkAndCallSafeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n  // Token name\r\n  string internal _name;\r\n\r\n  // Token symbol\r\n  string internal _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string name, string symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 tokenId) public view returns (string) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param tokenId uint256 ID of the token to set its URI\r\n   * @param uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 tokenId, string uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * @title String & slice utility library for Solidity contracts.\r\n * @author Nick Johnson <arachnid@notdot.net>\r\n *\r\n * @dev Functionality in this library is largely implemented using an\r\n *      abstraction called a 'slice'. A slice represents a part of a string -\r\n *      anything from the entire string to a single character, or even no\r\n *      characters at all (a 0-length slice). Since a slice only has to specify\r\n *      an offset and a length, copying and manipulating slices is a lot less\r\n *      expensive than copying and manipulating the strings they reference.\r\n *\r\n *      To further reduce gas costs, most functions on slice that need to return\r\n *      a slice modify the original one instead of allocating a new one; for\r\n *      instance, `s.split(\".\")` will return the text up to the first '.',\r\n *      modifying s to only contain the remainder of the string after the '.'.\r\n *      In situations where you do not want to modify the original slice, you\r\n *      can make a copy first with `.copy()`, for example:\r\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\r\n *      Solidity has no memory management, it will result in allocating many\r\n *      short-lived slices that are later discarded.\r\n *\r\n *      Functions that return two slices come in two versions: a non-allocating\r\n *      version that takes the second slice as an argument, modifying it in\r\n *      place, and an allocating version that allocates and returns the second\r\n *      slice; see `nextRune` for example.\r\n *\r\n *      Functions that have to copy string data will return strings rather than\r\n *      slices; these can be cast back to slices for further processing if\r\n *      required.\r\n *\r\n *      For convenience, some functions are provided with non-modifying\r\n *      variants that create a new slice and return both; for instance,\r\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\r\n *      corresponding to the left and right parts of the string.\r\n */\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string memory self) internal pure returns (slice memory) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal pure returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-terminated utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice memory self) internal pure returns (slice memory) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice memory self) internal pure returns (string memory) {\r\n        string memory ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice memory self) internal pure returns (uint l) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        uint ptr = self._ptr - 31;\r\n        uint end = ptr + self._len;\r\n        for (l = 0; ptr < end; l++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice memory self) internal pure returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        uint selfptr = self._ptr;\r\n        uint otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint256 mask = uint256(-1); // 0xffff...\r\n                if(shortest < 32) {\r\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                }\r\n                uint256 diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint l;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            l = 1;\r\n        } else if(b < 0xE0) {\r\n            l = 2;\r\n        } else if(b < 0xF0) {\r\n            l = 3;\r\n        } else {\r\n            l = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (l > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += l;\r\n        self._len -= l;\r\n        rune._len = l;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice memory self) internal pure returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint length;\r\n        uint divisor = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        uint b = word / divisor;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            length = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            length = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            length = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            length = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (length > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < length; i++) {\r\n            divisor = divisor / 256;\r\n            b = (word / divisor) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\r\n        assembly {\r\n            ret := keccak256(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let length := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        uint selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let length := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        uint selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\r\n        uint ptr = selfptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\r\n\r\n                bytes32 needledata;\r\n                assembly { needledata := and(mload(needleptr), mask) }\r\n\r\n                uint end = selfptr + selflen - needlelen;\r\n                bytes32 ptrdata;\r\n                assembly { ptrdata := and(mload(ptr), mask) }\r\n\r\n                while (ptrdata != needledata) {\r\n                    if (ptr >= end)\r\n                        return selfptr + selflen;\r\n                    ptr++;\r\n                    assembly { ptrdata := and(mload(ptr), mask) }\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := keccak256(needleptr, needlelen) }\r\n\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := keccak256(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\r\n\r\n                bytes32 needledata;\r\n                assembly { needledata := and(mload(needleptr), mask) }\r\n\r\n                ptr = selfptr + selflen - needlelen;\r\n                bytes32 ptrdata;\r\n                assembly { ptrdata := and(mload(ptr), mask) }\r\n\r\n                while (ptrdata != needledata) {\r\n                    if (ptr <= selfptr)\r\n                        return selfptr;\r\n                    ptr--;\r\n                    assembly { ptrdata := and(mload(ptr), mask) }\r\n                }\r\n                return ptr + needlelen;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := keccak256(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := keccak256(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            cnt++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\r\n        string memory ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint length = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            length += parts[i]._len;\r\n\r\n        string memory ret = new string(length);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\ncontract CarFactory is Ownable {\r\n    using strings for *;\r\n\r\n    uint256 public constant MAX_CARS = 30000 + 150000 + 1000000;\r\n    uint256 public mintedCars = 0;\r\n    address preOrderAddress;\r\n    CarToken token;\r\n\r\n    mapping(uint256 => uint256) public tankSizes;\r\n    mapping(uint256 => uint) public savedTypes;\r\n    mapping(uint256 => bool) public giveawayCar;\r\n    \r\n    mapping(uint => uint256[]) public availableIds;\r\n    mapping(uint => uint256) public idCursor;\r\n\r\n    event CarMinted(uint256 _tokenId, string _metadata, uint cType);\r\n    event CarSellingBeings();\r\n\r\n\r\n\r\n    modifier onlyPreOrder {\r\n        require(msg.sender == preOrderAddress, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(preOrderAddress != address(0), \"No linked preorder\");\r\n        require(address(token) != address(0), \"No linked token\");\r\n        _;\r\n    }\r\n\r\n    function uintToString(uint v) internal pure returns (string) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i); // i + 1 is inefficient\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\r\n        }\r\n        string memory str = string(s);  // memory isn't implicitly convertible to storage\r\n        return str; // this was missing\r\n    }\r\n\r\n    function mintFor(uint cType, address newOwner) public onlyPreOrder isInitialized returns (uint256) {\r\n        require(mintedCars < MAX_CARS, \"Factory has minted the max number of cars\");\r\n        \r\n        uint256 _tokenId = nextAvailableId(cType);\r\n        require(!token.exists(_tokenId), \"Token already exists\");\r\n\r\n        string memory id = uintToString(_tokenId).toSlice().concat(\".json\".toSlice());\r\n\r\n        uint256 tankSize = tankSizes[_tokenId];\r\n        string memory _metadata = \"https://vault.warriders.com/\".toSlice().concat(id.toSlice());\r\n\r\n        token.mint(_tokenId, _metadata, cType, tankSize, newOwner);\r\n        mintedCars++;\r\n        \r\n        return _tokenId;\r\n    }\r\n\r\n    function giveaway(uint256 _tokenId, uint256 _tankSize, uint cType, bool markCar, address dst) public onlyOwner isInitialized {\r\n        require(dst != address(0), \"No destination address given\");\r\n        require(!token.exists(_tokenId), \"Token already exists\");\r\n        require(dst != owner());\r\n        require(dst != address(this));\r\n        require(_tankSize <= token.maxTankSizes(cType));\r\n            \r\n        tankSizes[_tokenId] = _tankSize;\r\n        savedTypes[_tokenId] = cType;\r\n\r\n        string memory id = uintToString(_tokenId).toSlice().concat(\".json\".toSlice());\r\n        string memory _metadata = \"https://vault.warriders.com/\".toSlice().concat(id.toSlice());\r\n\r\n        token.mint(_tokenId, _metadata, cType, _tankSize, dst);\r\n        mintedCars++;\r\n\r\n        giveawayCar[_tokenId] = markCar;\r\n    }\r\n\r\n    function setTokenMeta(uint256[] _tokenIds, uint256[] ts, uint[] cTypes) public onlyOwner isInitialized {\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            uint256 _tokenId = _tokenIds[i];\r\n            uint cType = cTypes[i];\r\n            uint256 _tankSize = ts[i];\r\n\r\n            require(_tankSize <= token.maxTankSizes(cType));\r\n            \r\n            tankSizes[_tokenId] = _tankSize;\r\n            savedTypes[_tokenId] = cType;\r\n            \r\n            \r\n            availableIds[cTypes[i]].push(_tokenId);\r\n        }\r\n    }\r\n    \r\n    function nextAvailableId(uint cType) private returns (uint256) {\r\n        uint256 currentCursor = idCursor[cType];\r\n        \r\n        require(currentCursor < availableIds[cType].length);\r\n        \r\n        uint256 nextId = availableIds[cType][currentCursor];\r\n        idCursor[cType] = currentCursor + 1;\r\n        return nextId;\r\n    }\r\n\r\n    /**\r\n    Attach the preOrder that will be receiving tokens being marked for sale by the\r\n    sellCar function\r\n    */\r\n    function attachPreOrder(address dst) public onlyOwner {\r\n        require(preOrderAddress == address(0));\r\n        require(dst != address(0));\r\n\r\n        //Enforce that address is indeed a preorder\r\n        PreOrder preOrder = PreOrder(dst);\r\n\r\n        preOrderAddress = address(preOrder);\r\n    }\r\n\r\n    /**\r\n    Attach the token being used for things\r\n    */\r\n    function attachToken(address dst) public onlyOwner {\r\n        require(address(token) == address(0));\r\n        require(dst != address(0));\r\n\r\n        //Enforce that address is indeed a preorder\r\n        CarToken ct = CarToken(dst);\r\n\r\n        token = ct;\r\n    }\r\n}\r\n\r\ncontract CarToken is ERC721Full, Ownable {\r\n    using strings for *;\r\n    \r\n    address factory;\r\n\r\n    /*\r\n    * Car Types:\r\n    * 0 - Unknown\r\n    * 1 - SUV\r\n    * 2 - Truck\r\n    * 3 - Hovercraft\r\n    * 4 - Tank\r\n    * 5 - Lambo\r\n    * 6 - Buggy\r\n    * 7 - midgrade type 2\r\n    * 8 - midgrade type 3\r\n    * 9 - Hatchback\r\n    * 10 - regular type 2\r\n    * 11 - regular type 3\r\n    */\r\n    uint public constant UNKNOWN_TYPE = 0;\r\n    uint public constant SUV_TYPE = 1;\r\n    uint public constant TANKER_TYPE = 2;\r\n    uint public constant HOVERCRAFT_TYPE = 3;\r\n    uint public constant TANK_TYPE = 4;\r\n    uint public constant LAMBO_TYPE = 5;\r\n    uint public constant DUNE_BUGGY = 6;\r\n    uint public constant MIDGRADE_TYPE2 = 7;\r\n    uint public constant MIDGRADE_TYPE3 = 8;\r\n    uint public constant HATCHBACK = 9;\r\n    uint public constant REGULAR_TYPE2 = 10;\r\n    uint public constant REGULAR_TYPE3 = 11;\r\n    \r\n    string public constant METADATA_URL = \"https://vault.warriders.com/\";\r\n    \r\n    //Number of premium type cars\r\n    uint public PREMIUM_TYPE_COUNT = 5;\r\n    //Number of midgrade type cars\r\n    uint public MIDGRADE_TYPE_COUNT = 3;\r\n    //Number of regular type cars\r\n    uint public REGULAR_TYPE_COUNT = 3;\r\n\r\n    mapping(uint256 => uint256) public maxBznTankSizeOfPremiumCarWithIndex;\r\n    mapping(uint256 => uint256) public maxBznTankSizeOfMidGradeCarWithIndex;\r\n    mapping(uint256 => uint256) public maxBznTankSizeOfRegularCarWithIndex;\r\n\r\n    /**\r\n     * Whether any given car (tokenId) is special\r\n     */\r\n    mapping(uint256 => bool) public isSpecial;\r\n    /**\r\n     * The type of any given car (tokenId)\r\n     */\r\n    mapping(uint256 => uint) public carType;\r\n    /**\r\n     * The total supply for any given type (int)\r\n     */\r\n    mapping(uint => uint256) public carTypeTotalSupply;\r\n    /**\r\n     * The current supply for any given type (int)\r\n     */\r\n    mapping(uint => uint256) public carTypeSupply;\r\n    /**\r\n     * Whether any given type (int) is special\r\n     */\r\n    mapping(uint => bool) public isTypeSpecial;\r\n\r\n    /**\r\n    * How much BZN any given car (tokenId) can hold\r\n    */\r\n    mapping(uint256 => uint256) public tankSizes;\r\n    \r\n    /**\r\n     * Given any car type (uint), get the max tank size for that type (uint256)\r\n     */\r\n    mapping(uint => uint256) public maxTankSizes;\r\n    \r\n    mapping (uint => uint[]) public premiumTotalSupplyForCar;\r\n    mapping (uint => uint[]) public midGradeTotalSupplyForCar;\r\n    mapping (uint => uint[]) public regularTotalSupplyForCar;\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address factoryAddress) public ERC721Full(\"WarRiders\", \"WR\") {\r\n        factory = factoryAddress;\r\n\r\n        carTypeTotalSupply[UNKNOWN_TYPE] = 0; //Unknown\r\n        carTypeTotalSupply[SUV_TYPE] = 20000; //SUV\r\n        carTypeTotalSupply[TANKER_TYPE] = 9000; //Tanker\r\n        carTypeTotalSupply[HOVERCRAFT_TYPE] = 600; //Hovercraft\r\n        carTypeTotalSupply[TANK_TYPE] = 300; //Tank\r\n        carTypeTotalSupply[LAMBO_TYPE] = 100; //Lambo\r\n        carTypeTotalSupply[DUNE_BUGGY] = 40000; //migrade type 1\r\n        carTypeTotalSupply[MIDGRADE_TYPE2] = 50000; //midgrade type 2\r\n        carTypeTotalSupply[MIDGRADE_TYPE3] = 60000; //midgrade type 3\r\n        carTypeTotalSupply[HATCHBACK] = 200000; //regular type 1\r\n        carTypeTotalSupply[REGULAR_TYPE2] = 300000; //regular type 2\r\n        carTypeTotalSupply[REGULAR_TYPE3] = 500000; //regular type 3\r\n        \r\n        maxTankSizes[SUV_TYPE] = 200; //SUV tank size\r\n        maxTankSizes[TANKER_TYPE] = 450; //Tanker tank size\r\n        maxTankSizes[HOVERCRAFT_TYPE] = 300; //Hovercraft tank size\r\n        maxTankSizes[TANK_TYPE] = 200; //Tank tank size\r\n        maxTankSizes[LAMBO_TYPE] = 250; //Lambo tank size\r\n        maxTankSizes[DUNE_BUGGY] = 120; //migrade type 1 tank size\r\n        maxTankSizes[MIDGRADE_TYPE2] = 110; //midgrade type 2 tank size\r\n        maxTankSizes[MIDGRADE_TYPE3] = 100; //midgrade type 3 tank size\r\n        maxTankSizes[HATCHBACK] = 90; //regular type 1 tank size\r\n        maxTankSizes[REGULAR_TYPE2] = 70; //regular type 2 tank size\r\n        maxTankSizes[REGULAR_TYPE3] = 40; //regular type 3 tank size\r\n        \r\n        maxBznTankSizeOfPremiumCarWithIndex[1] = 200; //SUV tank size\r\n        maxBznTankSizeOfPremiumCarWithIndex[2] = 450; //Tanker tank size\r\n        maxBznTankSizeOfPremiumCarWithIndex[3] = 300; //Hovercraft tank size\r\n        maxBznTankSizeOfPremiumCarWithIndex[4] = 200; //Tank tank size\r\n        maxBznTankSizeOfPremiumCarWithIndex[5] = 250; //Lambo tank size\r\n        maxBznTankSizeOfMidGradeCarWithIndex[1] = 100; //migrade type 1 tank size\r\n        maxBznTankSizeOfMidGradeCarWithIndex[2] = 110; //midgrade type 2 tank size\r\n        maxBznTankSizeOfMidGradeCarWithIndex[3] = 120; //midgrade type 3 tank size\r\n        maxBznTankSizeOfRegularCarWithIndex[1] = 40; //regular type 1 tank size\r\n        maxBznTankSizeOfRegularCarWithIndex[2] = 70; //regular type 2 tank size\r\n        maxBznTankSizeOfRegularCarWithIndex[3] = 90; //regular type 3 tank size\r\n\r\n        isTypeSpecial[HOVERCRAFT_TYPE] = true;\r\n        isTypeSpecial[TANK_TYPE] = true;\r\n        isTypeSpecial[LAMBO_TYPE] = true;\r\n    }\r\n\r\n    function isCarSpecial(uint256 tokenId) public view returns (bool) {\r\n        return isSpecial[tokenId];\r\n    }\r\n\r\n    function getCarType(uint256 tokenId) public view returns (uint) {\r\n        return carType[tokenId];\r\n    }\r\n\r\n    function mint(uint256 _tokenId, string _metadata, uint cType, uint256 tankSize, address newOwner) public onlyFactory {\r\n        //Since any invalid car type would have a total supply of 0 \r\n        //This require will also enforce that a valid cType is given\r\n        require(carTypeSupply[cType] < carTypeTotalSupply[cType], \"This type has reached total supply\");\r\n        \r\n        //This will enforce the tank size is less than the max\r\n        require(tankSize <= maxTankSizes[cType], \"Tank size provided bigger than max for this type\");\r\n        \r\n        if (isPremium(cType)) {\r\n            premiumTotalSupplyForCar[cType].push(_tokenId);\r\n        } else if (isMidGrade(cType)) {\r\n            midGradeTotalSupplyForCar[cType].push(_tokenId);\r\n        } else {\r\n            regularTotalSupplyForCar[cType].push(_tokenId);\r\n        }\r\n\r\n        super._mint(newOwner, _tokenId);\r\n        super._setTokenURI(_tokenId, _metadata);\r\n\r\n        carType[_tokenId] = cType;\r\n        isSpecial[_tokenId] = isTypeSpecial[cType];\r\n        carTypeSupply[cType] = carTypeSupply[cType] + 1;\r\n        tankSizes[_tokenId] = tankSize;\r\n    }\r\n    \r\n    function isPremium(uint cType) public pure returns (bool) {\r\n        return cType == SUV_TYPE || cType == TANKER_TYPE || cType == HOVERCRAFT_TYPE || cType == TANK_TYPE || cType == LAMBO_TYPE;\r\n    }\r\n    \r\n    function isMidGrade(uint cType) public pure returns (bool) {\r\n        return cType == DUNE_BUGGY || cType == MIDGRADE_TYPE2 || cType == MIDGRADE_TYPE3;\r\n    }\r\n    \r\n    function isRegular(uint cType) public pure returns (bool) {\r\n        return cType == HATCHBACK || cType == REGULAR_TYPE2 || cType == REGULAR_TYPE3;\r\n    }\r\n    \r\n    function getTotalSupplyForType(uint cType) public view returns (uint256) {\r\n        return carTypeSupply[cType];\r\n    }\r\n    \r\n    function getPremiumCarsForVariant(uint variant) public view returns (uint[]) {\r\n        return premiumTotalSupplyForCar[variant];\r\n    }\r\n    \r\n    function getMidgradeCarsForVariant(uint variant) public view returns (uint[]) {\r\n        return midGradeTotalSupplyForCar[variant];\r\n    }\r\n\r\n    function getRegularCarsForVariant(uint variant) public view returns (uint[]) {\r\n        return regularTotalSupplyForCar[variant];\r\n    }\r\n\r\n    function getPremiumCarSupply(uint variant) public view returns (uint) {\r\n        return premiumTotalSupplyForCar[variant].length;\r\n    }\r\n    \r\n    function getMidgradeCarSupply(uint variant) public view returns (uint) {\r\n        return midGradeTotalSupplyForCar[variant].length;\r\n    }\r\n\r\n    function getRegularCarSupply(uint variant) public view returns (uint) {\r\n        return regularTotalSupplyForCar[variant].length;\r\n    }\r\n    \r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        return super._exists(_tokenId);\r\n    }\r\n}\r\n\r\ncontract PreOrder is Destructible {\r\n    /**\r\n     * The current price for any given type (int)\r\n     */\r\n    mapping(uint => uint256) public currentTypePrice;\r\n\r\n    // Maps Premium car variants to the tokens minted for their description\r\n    // INPUT: variant #\r\n    // OUTPUT: list of cars\r\n    mapping(uint => uint256[]) public premiumCarsBought;\r\n    mapping(uint => uint256[]) public midGradeCarsBought;\r\n    mapping(uint => uint256[]) public regularCarsBought;\r\n    mapping(uint256 => address) public tokenReserve;\r\n\r\n    event consumerBulkBuy(uint256[] variants, address reserver, uint category);\r\n    event CarBought(uint256 carId, uint256 value, address purchaser, uint category);\r\n    event Withdrawal(uint256 amount);\r\n\r\n    uint256 public constant COMMISSION_PERCENT = 5;\r\n\r\n    //Max number of premium cars\r\n    uint256 public constant MAX_PREMIUM = 30000;\r\n    //Max number of midgrade cars\r\n    uint256 public constant MAX_MIDGRADE = 150000;\r\n    //Max number of regular cars\r\n    uint256 public constant MAX_REGULAR = 1000000;\r\n\r\n    //Max number of premium type cars\r\n    uint public PREMIUM_TYPE_COUNT = 5;\r\n    //Max number of midgrade type cars\r\n    uint public MIDGRADE_TYPE_COUNT = 3;\r\n    //Max number of regular type cars\r\n    uint public REGULAR_TYPE_COUNT = 3;\r\n\r\n    uint private midgrade_offset = 5;\r\n    uint private regular_offset = 6;\r\n\r\n    uint256 public constant GAS_REQUIREMENT = 250000;\r\n\r\n    //Premium type id\r\n    uint public constant PREMIUM_CATEGORY = 1;\r\n    //Midgrade type id\r\n    uint public constant MID_GRADE_CATEGORY = 2;\r\n    //Regular type id\r\n    uint public constant REGULAR_CATEGORY = 3;\r\n    \r\n    mapping(address => uint256) internal commissionRate;\r\n    \r\n    address internal constant OPENSEA = 0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\r\n\r\n    //The percent increase for any given type\r\n    mapping(uint => uint256) internal percentIncrease;\r\n    mapping(uint => uint256) internal percentBase;\r\n    //uint public constant PERCENT_INCREASE = 101;\r\n\r\n    //How many car is in each category currently\r\n    uint256 public premiumHold = 30000;\r\n    uint256 public midGradeHold = 150000;\r\n    uint256 public regularHold = 1000000;\r\n\r\n    bool public premiumOpen = false;\r\n    bool public midgradeOpen = false;\r\n    bool public regularOpen = false;\r\n\r\n    //Reference to other contracts\r\n    CarToken public token;\r\n    //AuctionManager public auctionManager;\r\n    CarFactory internal factory;\r\n\r\n    address internal escrow;\r\n\r\n    modifier premiumIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(premiumHold > 0, \"No more premium cars\");\r\n        require(premiumOpen, \"Premium store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier midGradeIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(midGradeHold > 0, \"No more midgrade cars\");\r\n        require(midgradeOpen, \"Midgrade store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier regularIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(regularHold > 0, \"No more regular cars\");\r\n        require(regularOpen, \"Regular store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        //Only factory can use this function\r\n        require(msg.sender == address(factory), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOrOwner {\r\n        //Only factory or owner can use this function\r\n        require(msg.sender == address(factory) || msg.sender == owner(), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function() public payable { }\r\n\r\n    constructor(\r\n        address tokenAddress,\r\n        address tokenFactory,\r\n        address e\r\n    ) public {\r\n        token = CarToken(tokenAddress);\r\n\r\n        //auctionManager = new AuctionManager(tokenAddress);\r\n\r\n        factory = CarFactory(tokenFactory);\r\n\r\n        escrow = e;\r\n\r\n        //Set percent increases\r\n        percentIncrease[1] = 100008;\r\n        percentBase[1] = 100000;\r\n        percentIncrease[2] = 100015;\r\n        percentBase[2] = 100000;\r\n        percentIncrease[3] = 1002;\r\n        percentBase[3] = 1000;\r\n        percentIncrease[4] = 1004;\r\n        percentBase[4] = 1000;\r\n        percentIncrease[5] = 102;\r\n        percentBase[5] = 100;\r\n        \r\n        commissionRate[OPENSEA] = 10;\r\n    }\r\n    \r\n    function setCommission(address referral, uint256 percent) public onlyOwner {\r\n        require(percent > COMMISSION_PERCENT);\r\n        require(percent < 95);\r\n        percent = percent - COMMISSION_PERCENT;\r\n        \r\n        commissionRate[referral] = percent;\r\n    }\r\n    \r\n    function setPercentIncrease(uint256 increase, uint256 base, uint cType) public onlyOwner {\r\n        require(increase > base);\r\n        \r\n        percentIncrease[cType] = increase;\r\n        percentBase[cType] = base;\r\n    }\r\n\r\n    function openShop(uint category) public onlyOwner {\r\n        require(category == 1 || category == 2 || category == 3, \"Invalid category\");\r\n\r\n        if (category == PREMIUM_CATEGORY) {\r\n            premiumOpen = true;\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            midgradeOpen = true;\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            regularOpen = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the starting price for any given type. Can only be set once, and value must be greater than 0\r\n     */\r\n    function setTypePrice(uint cType, uint256 price) public onlyOwner {\r\n        if (currentTypePrice[cType] == 0) {\r\n            require(price > 0, \"Price already set\");\r\n            currentTypePrice[cType] = price;\r\n        }\r\n    }\r\n\r\n    /**\r\n    Withdraw the amount from the contract's balance. Only the contract owner can execute this function\r\n    */\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(amount <= balance, \"Requested to much\");\r\n        owner().transfer(amount);\r\n\r\n        emit Withdrawal(amount);\r\n    }\r\n\r\n    function reserveManyTokens(uint[] cTypes, uint category) public payable returns (bool) {\r\n        if (category == PREMIUM_CATEGORY) {\r\n            require(premiumOpen, \"Premium is not open for sale\");\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            require(midgradeOpen, \"Midgrade is not open for sale\");\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            require(regularOpen, \"Regular is not open for sale\");\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        address reserver = msg.sender;\r\n\r\n        uint256 ether_required = 0;\r\n        for (uint i = 0; i < cTypes.length; i++) {\r\n            uint cType = cTypes[i];\r\n\r\n            uint256 price = priceFor(cType);\r\n\r\n            ether_required += (price + GAS_REQUIREMENT);\r\n\r\n            currentTypePrice[cType] = price;\r\n        }\r\n\r\n        require(msg.value >= ether_required);\r\n\r\n        uint256 refundable = msg.value - ether_required;\r\n\r\n        escrow.transfer(ether_required);\r\n\r\n        if (refundable > 0) {\r\n            reserver.transfer(refundable);\r\n        }\r\n\r\n        emit consumerBulkBuy(cTypes, reserver, category);\r\n    }\r\n\r\n     function buyBulkPremiumCar(address referal, uint[] variants, address new_owner) public payable premiumIsOpen returns (bool) {\r\n         uint n = variants.length;\r\n         require(n <= 10, \"Max bulk buy is 10 cars\");\r\n\r\n         for (uint i = 0; i < n; i++) {\r\n             buyCar(referal, variants[i], false, new_owner, PREMIUM_CATEGORY);\r\n         }\r\n     }\r\n\r\n     function buyBulkMidGradeCar(address referal, uint[] variants, address new_owner) public payable midGradeIsOpen returns (bool) {\r\n         uint n = variants.length;\r\n         require(n <= 10, \"Max bulk buy is 10 cars\");\r\n\r\n         for (uint i = 0; i < n; i++) {\r\n             buyCar(referal, variants[i], false, new_owner, MID_GRADE_CATEGORY);\r\n         }\r\n     }\r\n\r\n     function buyBulkRegularCar(address referal, uint[] variants, address new_owner) public payable regularIsOpen returns (bool) {\r\n         uint n = variants.length;\r\n         require(n <= 10, \"Max bulk buy is 10 cars\");\r\n\r\n         for (uint i = 0; i < n; i++) {\r\n             buyCar(referal, variants[i], false, new_owner, REGULAR_CATEGORY);\r\n         }\r\n     }\r\n\r\n    function buyCar(address referal, uint cType, bool give_refund, address new_owner, uint category) public payable returns (bool) {\r\n        require(category == PREMIUM_CATEGORY || category == MID_GRADE_CATEGORY || category == REGULAR_CATEGORY);\r\n        if (category == PREMIUM_CATEGORY) {\r\n            require(cType == 1 || cType == 2 || cType == 3 || cType == 4 || cType == 5, \"Invalid car type\");\r\n            require(premiumHold > 0, \"No more premium cars\");\r\n            require(premiumOpen, \"Premium store not open for sale\");\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            require(cType == 6 || cType == 7 || cType == 8, \"Invalid car type\");\r\n            require(midGradeHold > 0, \"No more midgrade cars\");\r\n            require(midgradeOpen, \"Midgrade store not open for sale\");\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            require(cType == 9 || cType == 10 || cType == 11, \"Invalid car type\");\r\n            require(regularHold > 0, \"No more regular cars\");\r\n            require(regularOpen, \"Regular store not open for sale\");\r\n        }\r\n\r\n        uint256 price = priceFor(cType);\r\n        require(price > 0, \"Price not yet set\");\r\n        require(msg.value >= price, \"Not enough ether sent\");\r\n        /*if (tokenReserve[_tokenId] != address(0)) {\r\n            require(new_owner == tokenReserve[_tokenId], \"You don't have the rights to buy this token\");\r\n        }*/\r\n        currentTypePrice[cType] = price; //Set new type price\r\n\r\n        uint256 _tokenId = factory.mintFor(cType, new_owner); //Now mint the token\r\n        \r\n        if (category == PREMIUM_CATEGORY) {\r\n            premiumCarsBought[cType].push(_tokenId);\r\n            premiumHold--;\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            midGradeCarsBought[cType - 5].push(_tokenId);\r\n            midGradeHold--;\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            regularCarsBought[cType - 8].push(_tokenId);\r\n            regularHold--;\r\n        }\r\n\r\n        if (give_refund && msg.value > price) {\r\n            uint256 change = msg.value - price;\r\n\r\n            msg.sender.transfer(change);\r\n        }\r\n\r\n        if (referal != address(0)) {\r\n            require(referal != msg.sender, \"The referal cannot be the sender\");\r\n            require(referal != tx.origin, \"The referal cannot be the tranaction origin\");\r\n            require(referal != new_owner, \"The referal cannot be the new owner\");\r\n\r\n            //The commissionRate map adds any partner bonuses, or 0 if a normal user referral\r\n            uint256 totalCommision = COMMISSION_PERCENT + commissionRate[referal];\r\n\r\n            uint256 commision = (price * totalCommision) / 100;\r\n\r\n            referal.transfer(commision);\r\n        }\r\n\r\n        emit CarBought(_tokenId, price, new_owner, category);\r\n    }\r\n\r\n    /**\r\n    Get the price for any car with the given _tokenId\r\n    */\r\n    function priceFor(uint cType) public view returns (uint256) {\r\n        uint256 percent = percentIncrease[cType];\r\n        uint256 base = percentBase[cType];\r\n\r\n        uint256 currentPrice = currentTypePrice[cType];\r\n        uint256 nextPrice = (currentPrice * percent);\r\n\r\n        //Return the next price, as this is the true price\r\n        return nextPrice / base;\r\n    }\r\n\r\n    function sold(uint256 _tokenId) public view returns (bool) {\r\n        return token.exists(_tokenId);\r\n    }\r\n}\r\n\r\ncontract BatchPreOrder is Destructible {\r\n    /**\r\n     * The current price for any given type (int)\r\n     */\r\n    mapping(uint => uint256) public currentTypePrice;\r\n\r\n    // Maps Premium car variants to the tokens minted for their description\r\n    // INPUT: variant #\r\n    // OUTPUT: list of cars\r\n    mapping(uint => uint256[]) public premiumCarsBought;\r\n    mapping(uint => uint256[]) public midGradeCarsBought;\r\n    mapping(uint => uint256[]) public regularCarsBought;\r\n    mapping(uint256 => address) public tokenReserve;\r\n\r\n    event consumerBulkBuy(uint256[] variants, address reserver, uint category, address referral);\r\n    event CarBought(uint256 carId, uint256 value, address purchaser, uint category);\r\n    event Withdrawal(uint256 amount);\r\n\r\n    uint256 public constant COMMISSION_PERCENT = 5;\r\n\r\n    //Max number of premium cars\r\n    uint256 public constant MAX_PREMIUM = 30000;\r\n    //Max number of midgrade cars\r\n    uint256 public constant MAX_MIDGRADE = 150000;\r\n    //Max number of regular cars\r\n    uint256 public constant MAX_REGULAR = 1000000;\r\n\r\n    //Max number of premium type cars\r\n    uint public PREMIUM_TYPE_COUNT = 5;\r\n    //Max number of midgrade type cars\r\n    uint public MIDGRADE_TYPE_COUNT = 3;\r\n    //Max number of regular type cars\r\n    uint public REGULAR_TYPE_COUNT = 3;\r\n\r\n    uint private midgrade_offset = 5;\r\n    uint private regular_offset = 6;\r\n\r\n    uint256 public constant GAS_REQUIREMENT = 4500000;\r\n    uint256 public constant BUFFER = 0.0001 ether;\r\n\r\n    //Premium type id\r\n    uint public constant PREMIUM_CATEGORY = 1;\r\n    //Midgrade type id\r\n    uint public constant MID_GRADE_CATEGORY = 2;\r\n    //Regular type id\r\n    uint public constant REGULAR_CATEGORY = 3;\r\n    \r\n    mapping(address => uint256) internal commissionRate;\r\n    \r\n    address internal constant OPENSEA = 0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\r\n\r\n    //The percent increase for any given type\r\n    mapping(uint => uint256) internal percentIncrease;\r\n    mapping(uint => uint256) internal percentBase;\r\n    //uint public constant PERCENT_INCREASE = 101;\r\n\r\n    //How many car is in each category currently\r\n    uint256 public premiumHold = 30000;\r\n    uint256 public midGradeHold = 150000;\r\n    uint256 public regularHold = 1000000;\r\n\r\n    bool public premiumOpen = false;\r\n    bool public midgradeOpen = false;\r\n    bool public regularOpen = false;\r\n\r\n    //Reference to other contracts\r\n    CarToken public token;\r\n    //AuctionManager public auctionManager;\r\n    CarFactory internal factory;\r\n    \r\n    PreOrder internal og;\r\n\r\n    address internal escrow;\r\n\r\n    modifier premiumIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(premiumHold > 0, \"No more premium cars\");\r\n        require(premiumOpen, \"Premium store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier midGradeIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(midGradeHold > 0, \"No more midgrade cars\");\r\n        require(midgradeOpen, \"Midgrade store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier regularIsOpen {\r\n        //Ensure we are selling at least 1 car\r\n        require(regularHold > 0, \"No more regular cars\");\r\n        require(regularOpen, \"Regular store not open for sale\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        //Only factory can use this function\r\n        require(msg.sender == address(factory), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOrOwner {\r\n        //Only factory or owner can use this function\r\n        require(msg.sender == address(factory) || msg.sender == owner(), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function() public payable { }\r\n\r\n    constructor(\r\n        address tokenAddress,\r\n        address tokenFactory,\r\n        address e,\r\n        address preorder\r\n    ) public {\r\n        token = CarToken(tokenAddress);\r\n\r\n        //auctionManager = new AuctionManager(tokenAddress);\r\n\r\n        factory = CarFactory(tokenFactory);\r\n\r\n        escrow = e;\r\n        \r\n        og = PreOrder(preorder);\r\n\r\n        //Set percent increases\r\n        percentIncrease[1] = 100008;\r\n        percentBase[1] = 100000;\r\n        percentIncrease[2] = 100015;\r\n        percentBase[2] = 100000;\r\n        percentIncrease[3] = 1002;\r\n        percentBase[3] = 1000;\r\n        percentIncrease[4] = 1004;\r\n        percentBase[4] = 1000;\r\n        percentIncrease[5] = 1012;\r\n        percentBase[5] = 1000;\r\n        \r\n        commissionRate[OPENSEA] = 10;\r\n    }\r\n    \r\n    function setCommission(address referral, uint256 percent) public onlyOwner {\r\n        revert(); //NOT IMPLEMENTED \r\n    }\r\n    \r\n    function setPercentIncrease(uint256 increase, uint256 base, uint cType) public onlyOwner {\r\n        require(increase > base);\r\n        \r\n        percentIncrease[cType] = increase;\r\n        percentBase[cType] = base;\r\n    }\r\n\r\n    function openShop(uint category) public onlyOwner {\r\n        require(category == 1 || category == 2 || category == 3, \"Invalid category\");\r\n\r\n        if (category == PREMIUM_CATEGORY) {\r\n            premiumOpen = true;\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            midgradeOpen = true;\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            regularOpen = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the starting price for any given type. Can only be set once, and value must be greater than 0\r\n     */\r\n    function setTypePrice(uint cType, uint256 price) public onlyOwner {\r\n        revert(); //NOT IMPLEMENTED \r\n    }\r\n\r\n    /**\r\n    Withdraw the amount from the contract's balance. Only the contract owner can execute this function\r\n    */\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(amount <= balance, \"Requested to much\");\r\n        owner().transfer(amount);\r\n\r\n        emit Withdrawal(amount);\r\n    }\r\n\r\n    function reserveManyTokens(uint[] cTypes, uint category, address referral) public payable returns (bool) {\r\n        if (category == PREMIUM_CATEGORY) {\r\n            require(premiumOpen, \"Premium is not open for sale\");\r\n        } else if (category == MID_GRADE_CATEGORY) {\r\n            require(midgradeOpen, \"Midgrade is not open for sale\");\r\n        } else if (category == REGULAR_CATEGORY) {\r\n            require(regularOpen, \"Regular is not open for sale\");\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        address reserver = msg.sender;\r\n\r\n        uint256 ether_required = 0;\r\n        \r\n        //Reset all type prices to current price\r\n        for (uint c = 1; c <= 11; c++) {\r\n            currentTypePrice[c] = og.currentTypePrice(c);\r\n        }\r\n        \r\n        for (uint i = 0; i < cTypes.length; i++) {\r\n            uint cType = cTypes[i];\r\n\r\n            uint256 price = currentTypePrice[cType];\r\n            \r\n            uint256 percent = percentIncrease[cType];\r\n            uint256 base = percentBase[cType];\r\n            \r\n            uint256 nextPrice = (price * percent) / base;\r\n\r\n            ether_required += (price + (GAS_REQUIREMENT * tx.gasprice) + BUFFER);\r\n\r\n            currentTypePrice[cType] = nextPrice;\r\n        }\r\n\r\n        require(msg.value >= ether_required);\r\n\r\n        uint256 refundable = msg.value - ether_required;\r\n\r\n        escrow.transfer(ether_required);\r\n\r\n        if (refundable > 0) {\r\n            reserver.transfer(refundable);\r\n        }\r\n\r\n        emit consumerBulkBuy(cTypes, reserver, category, referral);\r\n    }\r\n\r\n     function buyBulkPremiumCar(address referal, uint[] variants, address new_owner) public payable premiumIsOpen returns (bool) {\r\n         revert(); //NOT IMPLEMENTED \r\n     }\r\n\r\n     function buyBulkMidGradeCar(address referal, uint[] variants, address new_owner) public payable midGradeIsOpen returns (bool) {\r\n          revert(); //NOT IMPLEMENTED \r\n     }\r\n\r\n     function buyBulkRegularCar(address referal, uint[] variants, address new_owner) public payable regularIsOpen returns (bool) {\r\n          revert(); //NOT IMPLEMENTED \r\n     }\r\n\r\n    function buyCar(address referal, uint cType, bool give_refund, address new_owner, uint category) public payable returns (bool) {\r\n         revert(); //NOT IMPLEMENTED \r\n    }\r\n\r\n    /**\r\n    Get the price for any car with the given _tokenId\r\n    */\r\n    function priceFor(uint cType) public view returns (uint256) {\r\n         revert(); //NOT IMPLEMENTED \r\n    }\r\n\r\n    function sold(uint256 _tokenId) public view returns (bool) {\r\n         revert(); //NOT IMPLEMENTED \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"referal\",\"type\":\"address\"},{\"name\":\"variants\",\"type\":\"uint256[]\"},{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"buyBulkMidGradeCar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"midgradeOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIDGRADE_TYPE_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regularOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regularHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premiumOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REGULAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MID_GRADE_CATEGORY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MIDGRADE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_REQUIREMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PREMIUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referal\",\"type\":\"address\"},{\"name\":\"variants\",\"type\":\"uint256[]\"},{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"buyBulkPremiumCar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REGULAR_TYPE_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PREMIUM_CATEGORY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cType\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTypePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cType\",\"type\":\"uint256\"}],\"name\":\"priceFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUFFER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"regularCarsBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referal\",\"type\":\"address\"},{\"name\":\"cType\",\"type\":\"uint256\"},{\"name\":\"give_refund\",\"type\":\"bool\"},{\"name\":\"new_owner\",\"type\":\"address\"},{\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"buyCar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premiumHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumCarsBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"midGradeHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REGULAR_CATEGORY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"midGradeCarsBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTypes\",\"type\":\"uint256[]\"},{\"name\":\"category\",\"type\":\"uint256\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"reserveManyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PREMIUM_TYPE_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTypePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"openShop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increase\",\"type\":\"uint256\"},{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"cType\",\"type\":\"uint256\"}],\"name\":\"setPercentIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referal\",\"type\":\"address\"},{\"name\":\"variants\",\"type\":\"uint256[]\"},{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"buyBulkRegularCar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenFactory\",\"type\":\"address\"},{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"preorder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"variants\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"reserver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"consumerBulkBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"carId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"CarBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BatchPreOrder","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005caebd3b32e210e85ce3e9d51638b9c445481567000000000000000000000000e6963576e14aad7743ef627b1ada417fc4c8d32100000000000000000000000040b046d0563c498e5b13414ba9e41ed60291f5b9000000000000000000000000e272fddbd056240149c771f9fd917fa040dceb39","Library":"","SwarmSource":"bzzr://2be05f1e90d2038ac2e2a928cacd6fdbc2d20095d2c021d40a0668f234b92367"}]}