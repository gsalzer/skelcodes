{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract frozen is owned {\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    modifier isFrozen(address _target) {\r\n        require(!frozenAccount[_target]);\r\n        _;\r\n    }\r\n\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n}\r\n\r\n\r\ncontract DDP is frozen{\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 private constant LOCK_PERCENT= 100; \r\n    uint256 private constant UN_FREEZE_CYCLE = 30 days;\r\n    uint256 private constant EVERY_RELEASE_COUNT = 10;\r\n    uint256 private constant INT100 = 100;\r\n    \r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;  \r\n    uint256 public totalSupply;\r\n   \r\n    \r\n    uint256 private startLockTime;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping(address => uint256) freezeBalance;\r\n    mapping(address => uint256) public preTotalTokens;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function DDP() public {\r\n        totalSupply = 2100000000 * 10 ** uint256(decimals);  \r\n        balanceOf[msg.sender] = totalSupply;                \r\n        name = \"Distributed Diversion Paradise\";                                   \r\n        symbol = \"DDP\";                               \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal isFrozen(_from) isFrozen(_to){\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to]+ _value > balanceOf[_to]);\r\n        if(freezeBalance[_from] > 0){\r\n            require(now > startLockTime);\r\n            uint256 percent = (now - startLockTime) / UN_FREEZE_CYCLE * EVERY_RELEASE_COUNT;\r\n            if(percent <= LOCK_PERCENT){\r\n                freezeBalance[_from] = preTotalTokens[_from] * (LOCK_PERCENT - percent) / INT100;\r\n                require (_value <= balanceOf[_from] - freezeBalance[_from]); \r\n            }else{\r\n                freezeBalance[_from] = 0;\r\n            }\r\n        } \r\n        balanceOf[_from] = balanceOf[_from] - _value;\r\n        balanceOf[_to] = balanceOf[_to] + _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function lock(address _to, uint256 _value) public onlyOwner isFrozen(_to){\r\n        _value = _value.mul(10 ** uint256(decimals));\r\n\t\trequire(balanceOf[owner] >= _value);\r\n\t\trequire (balanceOf[_to].add(_value)> balanceOf[_to]); \r\n\t\trequire (_to != 0x0);\r\n        balanceOf[owner] = balanceOf[owner].sub(_value);\r\n        balanceOf[ _to] =balanceOf[_to].add(_value);\r\n        preTotalTokens[_to] = preTotalTokens[_to].add(_value);\r\n        freezeBalance[_to] = preTotalTokens[_to].mul(LOCK_PERCENT).div(INT100);\r\n\t    emit Transfer(owner, _to, _value);\r\n    }\r\n    \r\n    function transfers(address[] _dests, uint256[] _values) onlyOwner public {\r\n        uint256 i = 0;\r\n        while (i < _dests.length) {\r\n            transfer(_dests[i], _values[i]);\r\n            i += 1;\r\n        }\r\n    }\r\n   \r\n    function locks(address[] _dests, uint256[] _values) onlyOwner public {\r\n        uint256 i = 0;\r\n        while (i < _dests.length) {\r\n            lock(_dests[i], _values[i]);\r\n            i += 1;\r\n        }\r\n    }\r\n    \r\n    function setStartLockTime(uint256 _time) external onlyOwner{\r\n        startLockTime = _time;\r\n    }\r\n    \r\n    function releaseCount() public view returns(uint256) {\r\n        if(startLockTime == 0 || startLockTime > now){\r\n            return 0;\r\n        }\r\n        uint256 percent = now.sub(startLockTime).div(UN_FREEZE_CYCLE).add(1);\r\n        if(percent < INT100.div(EVERY_RELEASE_COUNT)){\r\n            return percent;\r\n        }else{\r\n            return INT100.div(EVERY_RELEASE_COUNT);\r\n        }\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"locks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"DDP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61e046fb8016ba4f96132a2da11d1c9950997c7369632f0c75b0abed4373ffd3"}]}