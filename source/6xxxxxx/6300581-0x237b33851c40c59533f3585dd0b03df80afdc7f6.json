{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Constants {\r\n    uint public constant RESELLING_LOCK_UP_PERIOD = 210 days;\r\n    uint public constant RESELLING_UNLOCK_COUNT = 10;\r\n}\r\n\r\ncontract CardioCoin is ERC20Basic, Ownable, Constants {\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant UNLOCK_PERIOD = 30 days;\r\n\r\n    string public name = \"CardioCoin\";\r\n    string public symbol = \"CRDC\";\r\n\r\n    uint8 public decimals = 18;\r\n    uint256 internal totalSupply_ = 50000000000 * (10 ** uint256(decimals));\r\n\r\n    mapping (address => uint256) internal reselling;\r\n    uint256 internal resellingAmount = 0;\r\n\r\n    struct locker {\r\n        bool isLocker;\r\n        string role;\r\n        uint lockUpPeriod;\r\n        uint unlockCount;\r\n    }\r\n\r\n    mapping (address => locker) internal lockerList;\r\n\r\n    event AddToLocker(address owner, uint lockUpPeriod, uint unlockCount);\r\n\r\n    event ResellingAdded(address seller, uint256 amount);\r\n    event ResellingSubtracted(address seller, uint256 amount);\r\n    event Reselled(address seller, address buyer, uint256 amount);\r\n\r\n    event TokenLocked(address owner, uint256 amount);\r\n    event TokenUnlocked(address owner, uint256 amount);\r\n\r\n    constructor() public Ownable() {\r\n        balance memory b;\r\n\r\n        b.available = totalSupply_;\r\n        balances[msg.sender] = b;\r\n    }\r\n\r\n    function addLockedUpTokens(address _owner, uint256 amount, uint lockUpPeriod, uint unlockCount)\r\n    internal {\r\n        balance storage b = balances[_owner];\r\n        lockUp memory l;\r\n\r\n        l.amount = amount;\r\n        l.unlockTimestamp = now + lockUpPeriod;\r\n        l.unlockCount = unlockCount;\r\n        b.lockedUp += amount;\r\n        b.lockUpData[b.lockUpCount] = l;\r\n        b.lockUpCount += 1;\r\n        emit TokenLocked(_owner, amount);\r\n    }\r\n\r\n    function addResellingAmount(address seller, uint256 amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(seller != address(0));\r\n        require(amount > 0);\r\n        require(balances[seller].available >= amount);\r\n\r\n        reselling[seller] = reselling[seller].add(amount);\r\n        balances[seller].available = balances[seller].available.sub(amount);\r\n        resellingAmount = resellingAmount.add(amount);\r\n        emit ResellingAdded(seller, amount);\r\n    }\r\n\r\n    function subtractResellingAmount(address seller, uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        uint256 amount = reselling[seller];\r\n\r\n        require(seller != address(0));\r\n        require(_amount > 0);\r\n        require(amount >= _amount);\r\n\r\n        reselling[seller] = reselling[seller].sub(_amount);\r\n        resellingAmount = resellingAmount.sub(_amount);\r\n        balances[seller].available = balances[seller].available.add(_amount);\r\n        emit ResellingSubtracted(seller, _amount);\r\n    }\r\n\r\n    function cancelReselling(address seller)\r\n    public\r\n    onlyOwner {\r\n        uint256 amount = reselling[seller];\r\n\r\n        require(seller != address(0));\r\n        require(amount > 0);\r\n\r\n        subtractResellingAmount(seller, amount);\r\n    }\r\n\r\n    function resell(address seller, address buyer, uint256 amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        require(seller != address(0));\r\n        require(buyer != address(0));\r\n        require(amount > 0);\r\n        require(reselling[seller] >= amount);\r\n        require(balances[owner].available >= amount);\r\n\r\n        reselling[seller] = reselling[seller].sub(amount);\r\n        resellingAmount = resellingAmount.sub(amount);\r\n        addLockedUpTokens(buyer, amount, RESELLING_LOCK_UP_PERIOD, RESELLING_UNLOCK_COUNT);\r\n        emit Reselled(seller, buyer, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    struct lockUp {\r\n        uint256 amount;\r\n        uint unlockTimestamp;\r\n        uint unlockedCount;\r\n        uint unlockCount;\r\n    }\r\n\r\n    struct balance {\r\n        uint256 available;\r\n        uint256 lockedUp;\r\n        mapping (uint => lockUp) lockUpData;\r\n        uint lockUpCount;\r\n        uint unlockIndex;\r\n    }\r\n\r\n    mapping(address => balance) internal balances;\r\n\r\n    function unlockBalance(address _owner) internal {\r\n        balance storage b = balances[_owner];\r\n\r\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\r\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\r\n                lockUp storage l = b.lockUpData[i];\r\n\r\n                if (l.unlockTimestamp <= now) {\r\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\r\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\r\n\r\n                    if (unlockedAmount > b.lockedUp) {\r\n                        unlockedAmount = b.lockedUp;\r\n                        l.unlockedCount = l.unlockCount;\r\n                    } else {\r\n                        b.available = b.available.add(unlockedAmount);\r\n                        b.lockedUp = b.lockedUp.sub(unlockedAmount);\r\n                        l.unlockedCount += count;\r\n                    }\r\n                    emit TokenUnlocked(_owner, unlockedAmount);\r\n                    if (l.unlockedCount == l.unlockCount) {\r\n                        lockUp memory tempA = b.lockUpData[i];\r\n                        lockUp memory tempB = b.lockUpData[b.unlockIndex];\r\n\r\n                        b.lockUpData[i] = tempB;\r\n                        b.lockUpData[b.unlockIndex] = tempA;\r\n                        b.unlockIndex += 1;\r\n                    } else {\r\n                        l.unlockTimestamp += UNLOCK_PERIOD * count;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateUnlockCount(uint timestamp, uint unlockedCount, uint unlockCount) view internal returns (uint) {\r\n        uint count = 0;\r\n        uint nowFixed = now;\r\n\r\n        while (timestamp < nowFixed && unlockedCount + count < unlockCount) {\r\n            count++;\r\n            timestamp += UNLOCK_PERIOD;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    returns (bool) {\r\n        unlockBalance(msg.sender);\r\n\r\n        locker storage l = lockerList[msg.sender];\r\n\r\n        if (l.isLocker) {\r\n            require(_value <= balances[msg.sender].available);\r\n            require(_to != address(0));\r\n\r\n            balances[msg.sender].available = balances[msg.sender].available.sub(_value);\r\n            addLockedUpTokens(_to, _value, l.lockUpPeriod, l.unlockCount);\r\n        } else {\r\n            require(_value <= balances[msg.sender].available);\r\n            require(_to != address(0));\r\n\r\n            balances[msg.sender].available = balances[msg.sender].available.sub(_value);\r\n            balances[_to].available = balances[_to].available.add(_value);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner].available.add(balances[_owner].lockedUp);\r\n    }\r\n\r\n    function lockedUpBalanceOf(address _owner) public view returns (uint256) {\r\n        balance storage b = balances[_owner];\r\n        uint256 lockedUpBalance = b.lockedUp;\r\n\r\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\r\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\r\n                lockUp storage l = b.lockUpData[i];\r\n\r\n                if (l.unlockTimestamp <= now) {\r\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\r\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\r\n\r\n                    if (unlockedAmount > lockedUpBalance) {\r\n                        lockedUpBalance = 0;\r\n                        break;\r\n                    } else {\r\n                        lockedUpBalance = lockedUpBalance.sub(unlockedAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return lockedUpBalance;\r\n    }\r\n\r\n    function resellingBalanceOf(address _owner) public view returns (uint256) {\r\n        return reselling[_owner];\r\n    }\r\n\r\n    function transferWithLockUp(address _to, uint256 _value, uint lockUpPeriod, uint unlockCount)\r\n    public\r\n    onlyOwner\r\n    returns (bool) {\r\n        require(_value <= balances[owner].available);\r\n        require(_to != address(0));\r\n\r\n        balances[owner].available = balances[owner].available.sub(_value);\r\n        addLockedUpTokens(_to, _value, lockUpPeriod, unlockCount);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who].available);\r\n\r\n        balances[_who].available = balances[_who].available.sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    function addAddressToLockerList(address _operator, string role, uint lockUpPeriod, uint unlockCount)\r\n    public\r\n    onlyOwner {\r\n        locker storage existsLocker = lockerList[_operator];\r\n\r\n        require(!existsLocker.isLocker);\r\n\r\n        locker memory l;\r\n\r\n        l.isLocker = true;\r\n        l.role = role;\r\n        l.lockUpPeriod = lockUpPeriod;\r\n        l.unlockCount = unlockCount;\r\n        lockerList[_operator] = l;\r\n        emit AddToLocker(_operator, lockUpPeriod, unlockCount);\r\n    }\r\n\r\n    function lockerRole(address _operator) public view returns (string) {\r\n        return lockerList[_operator].role;\r\n    }\r\n\r\n    function lockerLockUpPeriod(address _operator) public view returns (uint) {\r\n        return lockerList[_operator].lockUpPeriod;\r\n    }\r\n\r\n    function lockerUnlockCount(address _operator) public view returns (uint) {\r\n        return lockerList[_operator].unlockCount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"addAddressToLockerList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"lockerUnlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"resell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedUpBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESELLING_UNLOCK_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"transferWithLockUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"lockerLockUpPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"cancelReselling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"resellingBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESELLING_LOCK_UP_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"lockerRole\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"AddToLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reselled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CardioCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3279c452680fcd1f7ed543e008978517cc084a36629c3a9f2ce04b5b74eccce2"}]}