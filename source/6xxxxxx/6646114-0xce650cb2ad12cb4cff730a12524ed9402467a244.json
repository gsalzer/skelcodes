{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract IUserData {\r\n    //set\r\n    function setUserRef(address _address, address _refAddress, string _gameName) public;\r\n    //get\r\n    function getUserRef(address _address, string _gameName) public view returns (address);\r\n}\r\n\r\ncontract Dice_BrickGame {\r\n    IUserData userData = IUserData(address(0x21d364b66d9065B5207124e2b1e49e4193e0a2ff));\r\n\r\n    //Setup Contract\r\n    uint8 public FEE_PERCENT = 2;\r\n    uint8 public JACKPOT_PERCENT = 1;\r\n    uint constant MIN_JACKPOT = 0.1 ether;\r\n    uint public JACKPOT_WIN = 1000;\r\n    uint public MIN_BET = 0.01 ether;\r\n    uint public MAX_BET = 1 ether;\r\n    uint public MAX_PROFIT = 5 ether;\r\n    uint public REF_PERCENT = 5;\r\n    address public owner;\r\n    address private bot;\r\n    uint public jackpotFund;\r\n    uint public resolve = 0;\r\n    uint public payLoan = 0;\r\n\r\n    struct Bet {\r\n        uint blockNumber;\r\n        address player;\r\n        uint amount;\r\n        bytes hexData;\r\n    }\r\n\r\n    struct Loan {\r\n        address player;\r\n        uint amount;\r\n    }\r\n\r\n    Bet[] public bets;\r\n    Loan[] private loans;\r\n\r\n\r\n    // Events\r\n    event DiceBet(address indexed player, uint amount, uint blockNumber, bytes data, uint8 result, uint reward, uint16 jackpotNumber, uint indexed modulo);\r\n    event Jackpot(address indexed player, uint amount);\r\n    event JackpotIncrease(uint amount);\r\n    event FailedPayment(address indexed beneficiary, uint amount);\r\n    event Payment(address indexed beneficiary, uint amount);\r\n    event Repayment(address indexed beneficiary, uint amount);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"OnlyOwner can call.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBot {\r\n        require(msg.sender == bot || msg.sender == owner, \"OnlyOwner can call.\");\r\n        _;\r\n    }\r\n\r\n    function() public payable {\r\n        uint8 length = uint8(msg.data.length);\r\n        require(length >= 2, \"Wrong bet number!\");\r\n        address ref = address(0x0);\r\n        uint8 index;\r\n        if(length > 12) {\r\n            index = 20;\r\n            ref = toAddress(msg.data, 0);\r\n            require(ref != msg.sender, \"Reference must be different than sender\");\r\n        } else {\r\n            index = 0;\r\n        }\r\n        uint8 modulo = uint8((msg.data[index] >> 4) & 0xF) * 10 + uint8(msg.data[index] & 0xF);\r\n        require(modulo == 2 || modulo == 6 || modulo == 12 || modulo == 0, \"Wrong modulo!\");\r\n        if (modulo == 0) {\r\n            modulo = 100;\r\n        }\r\n        uint8[] memory number = new uint8[](length - index - 1);\r\n        for (uint8 j = 0; j < length - index - 1; j++) {\r\n            number[j] = uint8((msg.data[j + index + 1] >> 4) & 0xF) * 10 + uint8(msg.data[j + index + 1] & 0xF);\r\n            if (modulo == 12) {\r\n                require(number[j] > 1 && number[j] <= 12, \"Two Dice Confirm!\");\r\n            } else {\r\n                require(number[j] <= modulo, \"Wrong number bet!\");\r\n                if (modulo != 100) {\r\n                    require(number[j] > 0, \"Wrong number bet!\");\r\n                }\r\n            }\r\n        }\r\n        if (modulo == 100) {\r\n            require(number[0] == 0 || number[0] == 1, \"Etheroll Confirm!\");\r\n            require(number[1] > 1 && number[1] < 100, \"Etheroll Confirm!\");\r\n        } else if (modulo == 12) {\r\n            require(number.length < 11, \"Much number bet!\");\r\n        } else {\r\n            require(number.length < modulo, \"Much number bet!\");\r\n        }\r\n        require(msg.value >= MIN_BET && msg.value <= MAX_BET, \"Value confirm!\");\r\n        uint winPossible;\r\n        if (modulo == 100) {\r\n            if (number[0] == 1) {\r\n                winPossible = (100 - number[1]) / number[1] * msg.value * (100 - FEE_PERCENT - (msg.value >= MIN_JACKPOT ? 1 : 0)) / 100;\r\n            } else {\r\n                winPossible = (number[1] - 1) / (101 - number[1]) * msg.value * (100 - FEE_PERCENT - (msg.value >= MIN_JACKPOT ? 1 : 0)) / 100;\r\n            }\r\n        } else {\r\n            if (modulo == 12) {\r\n                winPossible = ((modulo - 1 - number.length) / number.length + 1) * msg.value * (100 - FEE_PERCENT - (msg.value >= MIN_JACKPOT ? 1 : 0)) / 100;\r\n            } else {\r\n                winPossible = ((modulo - number.length) / number.length + 1) * msg.value * (100 - FEE_PERCENT - (msg.value >= MIN_JACKPOT ? 1 : 0)) / 100;\r\n            }\r\n\r\n        }\r\n        require(winPossible <= MAX_PROFIT);\r\n        if(userData.getUserRef(msg.sender, \"Dice\") != address(0x0)) {\r\n            userData.getUserRef(msg.sender, \"Dice\").transfer(msg.value * REF_PERCENT / 1000);\r\n        } else if(ref != address(0x0)) {\r\n            ref.transfer(msg.value * REF_PERCENT / 1000);\r\n            userData.setUserRef(msg.sender, ref, \"Dice\");\r\n        }\r\n        bets.length++;\r\n        bets[bets.length - 1].blockNumber = block.number;\r\n        bets[bets.length - 1].player = msg.sender;\r\n        bets[bets.length - 1].amount = msg.value;\r\n        bets[bets.length - 1].hexData.length = length - index;\r\n        for(j = 0; j < bets[bets.length - 1].hexData.length; j++){\r\n            bets[bets.length - 1].hexData[j] = msg.data[j + index];\r\n        }\r\n    }\r\n\r\n    function setBot(address _bot) public onlyOwner {\r\n        require(_bot != address(0x0));\r\n        bot = _bot;\r\n    }\r\n\r\n    function setConfig(uint8 _FEE_PERCENT, uint8 _JACKPOT_PERCENT, uint _MAX_PROFIT, uint _MIN_BET, uint _MAX_BET, uint _JACKPOT_WIN, uint8 _REF_PERCENT) public onlyOwner {\r\n        FEE_PERCENT = _FEE_PERCENT;\r\n        JACKPOT_PERCENT = _JACKPOT_PERCENT;\r\n        MAX_PROFIT = _MAX_PROFIT;\r\n        MIN_BET = _MIN_BET;\r\n        MAX_BET = _MAX_BET;\r\n        MAX_PROFIT = _MAX_PROFIT;\r\n        JACKPOT_WIN = _JACKPOT_WIN;\r\n        REF_PERCENT = _REF_PERCENT;\r\n    }\r\n\r\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\r\n        require(increaseAmount <= address(this).balance, \"Not enough funds\");\r\n        jackpotFund += uint(increaseAmount);\r\n        emit JackpotIncrease(jackpotFund);\r\n    }\r\n\r\n    function withdrawFunds(address beneficiary, uint withdrawAmount) external onlyOwner {\r\n        require(withdrawAmount <= address(this).balance, \"Not enough funds\");\r\n        require(jackpotFund + withdrawAmount <= address(this).balance, \"Not enough funds.\");\r\n        sendFunds(beneficiary, withdrawAmount);\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        sendFunds(owner, address(this).balance);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n\r\n    function doBet(uint gameNumber) private {\r\n        uint8 modulo = uint8((bets[gameNumber].hexData[0] >> 4) & 0xF) * 10 + uint8(bets[gameNumber].hexData[0] & 0xF);\r\n        uint8 result;\r\n        if (modulo == 12) {\r\n            uint8 dice1 = uint8(keccak256(abi.encodePacked(bets[gameNumber].hexData, blockhash(bets[gameNumber].blockNumber)))) % 6;\r\n            uint8 dice2 = uint8(keccak256(abi.encodePacked(address(this).balance, blockhash(bets[gameNumber].blockNumber), bets[gameNumber].player))) % 6;\r\n            result = (dice1 == 0 ? 6 : dice1) + (dice2 == 0 ? 6 : dice2);\r\n        } else {\r\n            result = uint8(keccak256(abi.encodePacked(bets[gameNumber].hexData, address(this).balance, blockhash(bets[gameNumber].blockNumber), bets[gameNumber].player))) % modulo;\r\n        }\r\n        if (result == 0) {\r\n            result = modulo;\r\n        }\r\n        uint winValue = 0;\r\n        uint8[] memory number = new uint8[](bets[gameNumber].hexData.length - 1);\r\n        for (uint8 j = 0; j < bets[gameNumber].hexData.length - 1; j++) {\r\n            number[j] = uint8((bets[gameNumber].hexData[j + 1] >> 4) & 0xF) * 10 + uint8(bets[gameNumber].hexData[j + 1] & 0xF);\r\n        }\r\n\r\n        for (uint8 i = 0; i < number.length; i++) {\r\n            if (number[i] == result) {\r\n                if (modulo == 12) {\r\n                    winValue = bets[gameNumber].amount * (100 - FEE_PERCENT) / 100 + (modulo - 1 - number.length) * bets[gameNumber].amount * (100 - FEE_PERCENT) / (100 * number.length);\r\n                } else {\r\n                    winValue = bets[gameNumber].amount * (100 - FEE_PERCENT) / 100 + (modulo - number.length) * bets[gameNumber].amount * (100 - FEE_PERCENT) / (100 * number.length);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (bets[gameNumber].amount >= MIN_JACKPOT) {\r\n            jackpotFund += bets[gameNumber].amount * JACKPOT_PERCENT / 100;\r\n            emit JackpotIncrease(jackpotFund);\r\n            if (winValue != 0) {\r\n                winValue = bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / 100 + (modulo - number.length) * bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / (100 * number.length);\r\n            }\r\n            uint16 jackpotNumber = uint16(uint(keccak256(abi.encodePacked(bets[gameNumber].player, winValue, blockhash(bets[gameNumber].blockNumber), bets[gameNumber].hexData))) % JACKPOT_WIN);\r\n            if (jackpotNumber == 999) {\r\n                emit Jackpot(bets[gameNumber].player, jackpotFund);\r\n                sendFunds(bets[gameNumber].player, jackpotFund + winValue);\r\n                jackpotFund = 0;\r\n            } else {\r\n                if (winValue > 0) {\r\n                    sendFunds(bets[gameNumber].player, winValue);\r\n                }\r\n            }\r\n        } else {\r\n            if (winValue > 0) {\r\n                sendFunds(bets[gameNumber].player, winValue);\r\n            }\r\n        }\r\n        emit DiceBet(bets[gameNumber].player, bets[gameNumber].amount, bets[gameNumber].blockNumber, bets[gameNumber].hexData, result, winValue, jackpotNumber, modulo);\r\n    }\r\n\r\n    function etheRoll(uint gameNumber) private {\r\n        uint8 result = uint8(keccak256(abi.encodePacked(bets[gameNumber].hexData, blockhash(bets[gameNumber].blockNumber), bets[gameNumber].player))) % 100;\r\n        if (result == 0) {\r\n            result = 100;\r\n        }\r\n        uint winValue = 0;\r\n\r\n        uint8[] memory number = new uint8[](bets[gameNumber].hexData.length - 1);\r\n        for (uint8 j = 0; j < bets[gameNumber].hexData.length - 1; j++) {\r\n            number[j] = uint8((bets[gameNumber].hexData[j + 1] >> 4) & 0xF) * 10 + uint8(bets[gameNumber].hexData[j + 1] & 0xF);\r\n        }\r\n\r\n        if (number[0] == 0 && number[1] >= result) {\r\n            winValue = bets[gameNumber].amount * (100 - FEE_PERCENT) / 100 + (100 - uint(number[1])) * bets[gameNumber].amount * (100 - FEE_PERCENT) / (100 * uint(number[1]));\r\n        }\r\n        if (number[0] == 1 && number[1] <= result) {\r\n            winValue = bets[gameNumber].amount * (100 - FEE_PERCENT) / 100 + (uint(number[1]) - 1) * bets[gameNumber].amount * (100 - FEE_PERCENT) / (100 * (101 - uint(number[1])));\r\n        }\r\n        if (bets[gameNumber].amount >= MIN_JACKPOT) {\r\n            jackpotFund += bets[gameNumber].amount * JACKPOT_PERCENT / 100;\r\n            emit JackpotIncrease(jackpotFund);\r\n            if (number[0] == 0 && number[1] >= result) {\r\n                winValue = bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / 100 + (100 - uint(number[1])) * bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / (100 * uint(number[1]));\r\n            }\r\n            if (number[0] == 1 && number[1] <= result) {\r\n                winValue = bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / 100 + (uint(number[1]) - 1) * bets[gameNumber].amount * (100 - FEE_PERCENT - JACKPOT_PERCENT) / (100 * (101 - uint(number[1])));\r\n            }\r\n            uint16 jackpotNumber = uint16(uint(keccak256(abi.encodePacked(bets[gameNumber].hexData, winValue, blockhash(bets[gameNumber].blockNumber), bets[gameNumber].player))) % JACKPOT_WIN);\r\n            if (jackpotNumber == 999) {\r\n                emit Jackpot(bets[gameNumber].player, jackpotFund);\r\n                sendFunds(bets[gameNumber].player, jackpotFund + winValue);\r\n                jackpotFund = 0;\r\n            } else {\r\n                if (winValue > 0) {\r\n                    sendFunds(bets[gameNumber].player, winValue);\r\n                }\r\n            }\r\n        } else {\r\n            if (winValue > 0) {\r\n                sendFunds(bets[gameNumber].player, winValue);\r\n            }\r\n        }\r\n\r\n        emit DiceBet(bets[gameNumber].player, bets[gameNumber].amount, bets[gameNumber].blockNumber, bets[gameNumber].hexData, result, winValue, jackpotNumber, 100);\r\n    }\r\n\r\n    function resolveBet() public onlyBot {\r\n        uint i = 0;\r\n        for (uint k = resolve; k < bets.length; k++) {\r\n            uint8 modulo = uint8((bets[k].hexData[0] >> 4) & 0xF) * 10 + uint8(bets[k].hexData[0] & 0xF);\r\n            if (modulo == 0) {\r\n                modulo = 100;\r\n            }\r\n\r\n            if (bets[k].blockNumber <= (block.number - 1)) {\r\n                if (modulo == 100) {\r\n                    etheRoll(k);\r\n                    i++;\r\n                } else {\r\n                    doBet(k);\r\n                    i++;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        resolve += i;\r\n    }\r\n\r\n    function addBalance() public payable {}\r\n\r\n\r\n    function sendFunds(address beneficiary, uint amount) private {\r\n        if (beneficiary.send(amount)) {\r\n            emit Payment(beneficiary, amount);\r\n        } else {\r\n            emit FailedPayment(beneficiary, amount);\r\n            loans.push(Loan(beneficiary, amount));\r\n        }\r\n    }\r\n\r\n    function payLoan() public onlyBot {\r\n        uint pay = 0;\r\n        for (uint i = payLoan; i < loans.length; i++) {\r\n            if (loans[i].player.send(loans[i].amount)) {\r\n                emit Repayment(loans[i].player, loans[i].amount);\r\n                pay++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        payLoan += pay;\r\n    }\r\n\r\n    function getLengthBets() public view returns (uint) {\r\n        return bets.length;\r\n    }\r\n    function toAddress(bytes _bytes, uint _start) internal  pure returns (address) {\r\n        require(_bytes.length >= (_start + 20),\"Wrong size!\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hexData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PROFIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bot\",\"type\":\"address\"}],\"name\":\"setBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resolveBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLengthBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_WIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_FEE_PERCENT\",\"type\":\"uint8\"},{\"name\":\"_JACKPOT_PERCENT\",\"type\":\"uint8\"},{\"name\":\"_MAX_PROFIT\",\"type\":\"uint256\"},{\"name\":\"_MIN_BET\",\"type\":\"uint256\"},{\"name\":\"_MAX_BET\",\"type\":\"uint256\"},{\"name\":\"_JACKPOT_WIN\",\"type\":\"uint256\"},{\"name\":\"_REF_PERCENT\",\"type\":\"uint8\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REF_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotNumber\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"modulo\",\"type\":\"uint256\"}],\"name\":\"DiceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"}]","ContractName":"Dice_BrickGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bdc8d251972108b6106d4cc31ea3228dd71441c28a07d68478af36f9daf7d1c1"}]}