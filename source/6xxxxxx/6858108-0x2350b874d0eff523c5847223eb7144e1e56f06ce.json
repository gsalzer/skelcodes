{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n}  \r\n\r\n/// @title Synpatreg smart conract for synpat service\r\n/// @author Telegram: @msmobile, IBerGroup\r\n/// @notice This smart contract write events  with steem post hash\r\n///in particular ProofOfConnect.\r\n\r\ncontract Synpatreg is Claimable {\r\n    string public version = '1.1.0';\r\n    mapping(bytes32 => bool) public permlinkSaved;\r\n    \r\n    event SynpatRecord(string indexed permlinkSaved_permlink, bytes32 _hashSha);\r\n    \r\n    function() external { } \r\n \r\n    ///@notice Make event record in Ethereumblockchain\r\n    /// @dev Implied that _hashSha is hash of steemet post title+body\r\n    /// @param _permlink  string, _permlink of steem post.\r\n    /// @param _hashSha   - result of Keccak SHA256 function.\r\n    /// @return true if ok, false otherwise \r\n    function writeSha3(string calldata _permlink, bytes32 _hashSha) external  returns (bool){\r\n        bytes32 hash = calculateSha3(_permlink);\r\n        require(!permlinkSaved[hash],\"Permalink already exist!\");\r\n        permlinkSaved[hash]=true;\r\n        emit SynpatRecord(_permlink, _hashSha);\r\n        return true;\r\n    }\r\n    \r\n    ///@notice Calculate hash\r\n    /// @dev There is web3py analog exists: Web3.soliditySha3(['string'], ['_hashinput'])\r\n    /// @param _hashinput   - string .\r\n    /// @return byte32, result of keccak256 (sha3 in old style) \r\n    function calculateSha3(string memory _hashinput) public pure returns (bytes32){\r\n        return keccak256(bytes(_hashinput)); \r\n    }\r\n   \r\n    \r\n    ///@dev use in case of depricate this contract\r\n    function kill() external onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hashinput\",\"type\":\"string\"}],\"name\":\"calculateSha3\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"permlinkSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permlink\",\"type\":\"string\"},{\"name\":\"_hashSha\",\"type\":\"bytes32\"}],\"name\":\"writeSha3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"permlinkSaved_permlink\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hashSha\",\"type\":\"bytes32\"}],\"name\":\"SynpatRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Synpatreg","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0de40778047762e17f35711b03d16103dda044a370ca05b8b7bd2608e117af3"}]}