{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address internal owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public returns (bool) {\r\n        require(newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface MintableToken {\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function transferOwnership(address newOwner) external returns (bool);\r\n}\r\n\r\ninterface BitNauticWhitelist {\r\n    function AMLWhitelisted(address) external returns (bool);\r\n}\r\n\r\ninterface BitNauticCrowdsale {\r\n    function creditOf(address) external returns (uint256);\r\n}\r\n\r\ncontract BitNauticCrowdsaleTokenDistributor is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant ICOStartTime = 1531267200; // 11 Jul 2018 00:00 GMT\r\n    uint256 public constant ICOEndTime = 1536969600; // 15 Sep 2018 00:00 GMT\r\n\r\n    uint256 public teamSupply =     3000000 * 10 ** 18; // 6% of token cap\r\n    uint256 public bountySupply =   2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public reserveSupply =  5000000 * 10 ** 18; // 10% of token cap\r\n    uint256 public advisorSupply =  2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public founderSupply =  2000000 * 10 ** 18; // 4% of token cap\r\n\r\n    MintableToken public token;\r\n    BitNauticWhitelist public whitelist;\r\n    BitNauticCrowdsale public crowdsale;\r\n\r\n    mapping (address => bool) public hasClaimedTokens;\r\n\r\n    constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public {\r\n        token = _token;\r\n        whitelist = _whitelist;\r\n        crowdsale = _crowdsale;\r\n    }\r\n\r\n    function privateSale(address beneficiary, uint256 tokenAmount) onlyOwner public {\r\n        require(beneficiary != 0x0);\r\n\r\n        assert(token.mint(beneficiary, tokenAmount));\r\n    }\r\n\r\n    // this function can be called by the contributor to claim his BTNT tokens at the end of the ICO\r\n    function claimBitNauticTokens() public returns (bool) {\r\n        return grantContributorTokens(msg.sender);\r\n    }\r\n\r\n    // if the ICO is finished and the goal has been reached, this function will be used to mint and transfer BTNT tokens to each contributor\r\n    function grantContributorTokens(address contributor) public returns (bool) {\r\n        require(!hasClaimedTokens[contributor]);\r\n        require(crowdsale.creditOf(contributor) > 0);\r\n        require(whitelist.AMLWhitelisted(contributor));\r\n        require(now > ICOEndTime);\r\n\r\n        assert(token.mint(contributor, crowdsale.creditOf(contributor)));\r\n        hasClaimedTokens[contributor] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferTokenOwnership(address newTokenOwner) onlyOwner public returns (bool) {\r\n        return token.transferOwnership(newTokenOwner);\r\n    }\r\n\r\n    function grantBountyTokens(address beneficiary) onlyOwner public {\r\n        require(bountySupply > 0);\r\n\r\n        token.mint(beneficiary, bountySupply);\r\n        bountySupply = 0;\r\n    }\r\n\r\n    function grantReserveTokens(address beneficiary) onlyOwner public {\r\n        require(reserveSupply > 0);\r\n\r\n        token.mint(beneficiary, reserveSupply);\r\n        reserveSupply = 0;\r\n    }\r\n\r\n    function grantAdvisorsTokens(address beneficiary) onlyOwner public {\r\n        require(advisorSupply > 0);\r\n\r\n        token.mint(beneficiary, advisorSupply);\r\n        advisorSupply = 0;\r\n    }\r\n\r\n    function grantFoundersTokens(address beneficiary) onlyOwner public {\r\n        require(founderSupply > 0);\r\n\r\n        token.mint(beneficiary, founderSupply);\r\n        founderSupply = 0;\r\n    }\r\n\r\n    function grantTeamTokens(address beneficiary) onlyOwner public {\r\n        require(teamSupply > 0);\r\n\r\n        token.mint(beneficiary, teamSupply);\r\n        teamSupply = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantAdvisorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantFoundersTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"grantContributorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBitNauticTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"privateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitNauticCrowdsaleTokenDistributor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d9964e1306dda055f5284c52048712c35ddb61fd00000000000000000000000019fefe079d1035ca7ca9fcc058ba44542f5393e4000000000000000000000000e9fc0c55f9f3a38c0e972d6444273ebdcc7aa46f","Library":"","SwarmSource":"bzzr://105ea0830d4539be283eb149b490985b8c270b50d5623a0d969cac6499882c8f"}]}