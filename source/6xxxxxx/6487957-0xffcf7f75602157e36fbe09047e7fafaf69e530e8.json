{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract DiceGame {\r\n\r\n    using SafeMath for *;\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBanker {\r\n        if(banker[msg.sender] == false) revert();\r\n        _;\r\n    }\r\n\r\n    uint constant BET_EXPIRATION_BLOCKS = 250;\r\n    uint constant public maxNumber = 96;\r\n    uint constant public minNumber = 2;\r\n    uint public maxProfit = 4 ether;\r\n    uint public maxPendingPayouts; //total unpaid\r\n    uint public minBet = 0.01 ether;\r\n    uint public pID = 160000;\r\n\r\n\r\n    struct Bet {\r\n\r\n        uint amount;\r\n        uint40 placeBlockNumber;\r\n        uint8 roll;\r\n        bool lessThan;\r\n        address player;\r\n    }\r\n\r\n    address public signer = 0x62fF37a452F8fc3A471a59127430C1bCFAeaf313;\r\n    address public owner;\r\n\r\n    mapping(bytes32 => Bet) public bets;\r\n    mapping(address => uint) playerPendingWithdrawals;\r\n    mapping(address => uint) playerIdxAddr;\r\n    mapping(uint => address) playerAddrIdx;\r\n    mapping(address => bool) banker;\r\n\r\n    event LogBet(bytes32 indexed BetID, address indexed PlayerAddress, uint BetValue, uint PlayerNumber, bool LessThan, uint256 Timestamp);\r\n    event LogResult(bytes32 indexed BetID, address indexed PlayerAddress, uint PlayerNumber, bool LessThan, uint DiceResult, uint BetValue, uint Value, int Status, uint256 Timestamp);\r\n    event LogRefund(bytes32 indexed BetID, address indexed PlayerAddress, uint indexed RefundValue);\r\n    event LogHouseWithdraw(uint indexed amount);\r\n    event BlockHashVerifyFailed(bytes32 commit);\r\n\r\n    constructor() payable public {\r\n        owner = msg.sender;\r\n        playerIdxAddr[msg.sender] = pID;\r\n        playerAddrIdx[pID] = msg.sender;\r\n\r\n    }\r\n\r\n\r\n    function setSecretSigner(address _signer) external onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function setMinBet(uint _minBet) public onlyOwner {\r\n        minBet = _minBet;\r\n    }\r\n\r\n    function addBankerAddress(address bankerAddress) public onlyOwner {\r\n        banker[bankerAddress] = true;\r\n    }\r\n\r\n    function setInvite(address inviteAddress, uint inviteID, uint profit) public onlyOwner {\r\n        playerIdxAddr[inviteAddress] = inviteID;\r\n        playerAddrIdx[inviteID] = inviteAddress;\r\n        playerPendingWithdrawals[inviteAddress] = profit;\r\n    }\r\n\r\n    function batchSetInvite(address[] inviteAddress, uint[] inviteID, uint[] profit) public onlyOwner {\r\n        uint length = inviteAddress.length;\r\n        for(uint i = 0;i< length; i++) {\r\n            setInvite(inviteAddress[i], inviteID[i], profit[i]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getPlayerAddr(uint _pid) public view returns (address) {\r\n        return playerAddrIdx[_pid];\r\n    }\r\n\r\n    function createInviteID(address _addr) public returns (bool) {\r\n        if (playerIdxAddr[_addr] == 0) {\r\n            pID++;\r\n            playerIdxAddr[_addr] = pID;\r\n            playerAddrIdx[pID] = _addr;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getPlayerId(address _addr) public view returns (uint){\r\n        return playerIdxAddr[_addr];\r\n    }\r\n\r\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\r\n        maxProfit = _maxProfit;\r\n    }\r\n\r\n\r\n    function() public payable {\r\n\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function placeBet(uint8 roll, bool lessThan, uint affID, uint lastBlock, bytes32 commit, uint8 v, bytes32 r, bytes32 s) public payable {\r\n        uint amount = msg.value;\r\n        require(amount >= minBet, \"Amount is less than minimum bet size\");\r\n        require(roll >= minNumber && roll <= maxNumber, \"Place number should be with rang.\");\r\n        require(block.number < lastBlock, \"Commit has expired.\");\r\n\r\n        bytes32 signatureHash = keccak256(abi.encodePacked(lastBlock, commit));\r\n        require(signer == ecrecover(signatureHash, v, r, s), \"ECDSA signature is not valid.\");\r\n\r\n        Bet storage bet = bets[commit];\r\n        require(bet.player == address(0x0));\r\n\r\n\r\n        uint possibleWinAmount = getDiceWinAmount(amount, roll, lessThan);\r\n\r\n        require(possibleWinAmount <=  amount + maxProfit, \"maxProfit limit violation.\");\r\n\r\n        maxPendingPayouts = maxPendingPayouts.add(possibleWinAmount);\r\n\r\n        require(maxPendingPayouts  <=   address(this).balance, \"insufficient contract balance for payout.\");\r\n\r\n\r\n        bet.amount = amount;\r\n        bet.placeBlockNumber = uint40(block.number);\r\n        bet.roll = uint8(roll);\r\n        bet.lessThan = lessThan;\r\n        bet.player = msg.sender;\r\n\r\n        emit LogBet(commit, msg.sender, amount, bet.roll, bet.lessThan, now);\r\n\r\n        if (affID > 150000 && affID <= pID) {\r\n            address affAddress = playerAddrIdx[affID];\r\n            if(affAddress != address(0x0)) {\r\n                playerPendingWithdrawals[affAddress] = playerPendingWithdrawals[affAddress].add(amount.div(100));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function getDiceWinAmount(uint amount, uint roll, bool lessThan) private pure returns (uint) {\r\n\r\n        uint rollNumber = lessThan ? roll : 101 - roll;\r\n\r\n        return amount * 98 / rollNumber;\r\n    }\r\n\r\n    /**\r\n        refund user bet amount\r\n    */\r\n    function refundBet(bytes32 commit) external {\r\n\r\n        Bet storage bet = bets[commit];\r\n        uint amount = bet.amount;\r\n        address player = bet.player;\r\n\r\n        require(amount != 0);\r\n        require(block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS);\r\n\r\n        bet.amount = 0;\r\n        uint winAmount = getDiceWinAmount(amount, bet.roll, bet.lessThan);\r\n        maxPendingPayouts = maxPendingPayouts.sub(winAmount);\r\n\r\n        safeSendFunds(player, amount);\r\n\r\n    }\r\n\r\n    function settleUncle(bytes32 reveal,bytes32 uncleHash) onlyBanker external {\r\n        bytes32 commit = keccak256(abi.encodePacked(reveal));\r\n\r\n        Bet storage bet = bets[commit];\r\n\r\n        settle(bet, reveal, uncleHash);\r\n    }\r\n\r\n    function settleBet(bytes32 reveal,bytes32 blockHash) external {\r\n\r\n\r\n        bytes32 commit = keccak256(abi.encodePacked(reveal));\r\n\r\n        Bet storage bet = bets[commit];\r\n\r\n        uint placeBlockNumber = bet.placeBlockNumber;\r\n\r\n        require(block.number > placeBlockNumber);\r\n        require(block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS);\r\n\r\n\r\n        if(blockhash(placeBlockNumber) != blockHash) { //the place bet in uncle block\r\n            emit BlockHashVerifyFailed(commit);\r\n            return;\r\n        }\r\n\r\n        settle(bet, reveal, blockHash);\r\n\r\n    }\r\n\r\n    function settle(Bet storage bet,bytes32 reveal,bytes32 blockHash) private {\r\n\r\n        uint amount = bet.amount;\r\n        uint8 roll = bet.roll;\r\n        bool lessThan = bet.lessThan;\r\n        address player = bet.player;\r\n\r\n        require(amount != 0);\r\n\r\n\r\n        bet.amount = 0;\r\n\r\n        bytes32 seed = keccak256(abi.encodePacked(reveal, blockHash));\r\n\r\n        uint dice = uint(seed) % 100 + 1;\r\n\r\n        uint diceWinAmount = getDiceWinAmount(amount, roll, lessThan);\r\n\r\n\r\n        maxPendingPayouts = maxPendingPayouts.sub(diceWinAmount);\r\n\r\n        uint diceWin = 0;\r\n\r\n        if ((lessThan && dice <= roll) || (!lessThan && dice >= roll)){ //win\r\n            diceWin = diceWinAmount;\r\n            safeSendFunds(player, diceWin);\r\n        }\r\n\r\n        bytes32 commit = keccak256(abi.encodePacked(reveal));\r\n\r\n        emit LogResult(commit, player, roll,lessThan,  dice, amount, diceWin, diceWin == 0 ? 1 : 2, now);\r\n    }\r\n\r\n    function safeSendFunds(address beneficiary, uint amount) private {\r\n        if (!beneficiary.send(amount)) {\r\n            playerPendingWithdrawals[beneficiary] = playerPendingWithdrawals[beneficiary].add(amount);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function playerWithdrawPendingTransactions() public returns (bool) {\r\n        uint withdrawAmount = playerPendingWithdrawals[msg.sender];\r\n        require(withdrawAmount > 0);\r\n        playerPendingWithdrawals[msg.sender] = 0;\r\n        if (msg.sender.call.value(withdrawAmount)()) {\r\n            return true;\r\n        } else {\r\n            playerPendingWithdrawals[msg.sender] = withdrawAmount;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function pendingWithdrawalsBalance() public view returns (uint) {\r\n        return playerPendingWithdrawals[msg.sender];\r\n    }\r\n\r\n    function inviteProfit(address _player) public view returns (uint) {\r\n        return playerPendingWithdrawals[_player];\r\n    }\r\n\r\n\r\n    function houseWithdraw(uint amount) public onlyOwner {\r\n\r\n        if (!owner.send(amount)) revert();\r\n\r\n        emit LogHouseWithdraw(amount);\r\n    }\r\n\r\n    function ownerkill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bankerAddress\",\"type\":\"address\"}],\"name\":\"addBankerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roll\",\"type\":\"uint8\"},{\"name\":\"lessThan\",\"type\":\"bool\"},{\"name\":\"affID\",\"type\":\"uint256\"},{\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"houseWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playerWithdrawPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteAddress\",\"type\":\"address[]\"},{\"name\":\"inviteID\",\"type\":\"uint256[]\"},{\"name\":\"profit\",\"type\":\"uint256[]\"}],\"name\":\"batchSetInvite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reveal\",\"type\":\"bytes32\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"createInviteID\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"inviteProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint40\"},{\"name\":\"roll\",\"type\":\"uint8\"},{\"name\":\"lessThan\",\"type\":\"bool\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWithdrawalsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reveal\",\"type\":\"bytes32\"},{\"name\":\"uncleHash\",\"type\":\"bytes32\"}],\"name\":\"settleUncle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPendingPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteAddress\",\"type\":\"address\"},{\"name\":\"inviteID\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"setInvite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"BetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PlayerNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"LessThan\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"PlayerNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"LessThan\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"DiceResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"BetValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"BetID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"PlayerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"RefundValue\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogHouseWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"BlockHashVerifyFailed\",\"type\":\"event\"}]","ContractName":"DiceGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://180b791ba83b36bc31ef79c9c1263ea2d480508934526d578eef13efd380ecac"}]}