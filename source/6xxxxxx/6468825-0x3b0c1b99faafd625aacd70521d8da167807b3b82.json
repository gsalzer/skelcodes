{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Fxxx Land Rush Contract - Purchase land parcels with GZE and ETH\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for GazeCoin 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    bool private initialised;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function initOwned(address _owner) internal {\r\n        require(!initialised);\r\n        owner = _owner;\r\n        initialised = true;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    function max(uint a, uint b) internal pure returns (uint c) {\r\n        c = a >= b ? a : b;\r\n    }\r\n    function min(uint a, uint b) internal pure returns (uint c) {\r\n        c = a <= b ? a : b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Token Teleportation Service Interface v1.10\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsTokenTeleportationServiceSmartContract\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contracts that can have tokens approved, and then a function executed\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Token Teleportation Service Interface v1.10\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\ncontract BTTSTokenInterface is ERC20Interface {\r\n    uint public constant bttsVersion = 110;\r\n\r\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\r\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\r\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\r\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event MinterUpdated(address from, address to);\r\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\r\n    event MintingDisabled();\r\n    event TransfersEnabled();\r\n    event AccountUnlocked(address indexed tokenOwner);\r\n\r\n    function symbol() public view returns (string);\r\n    function name() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X} functions\r\n    // ------------------------------------------------------------------------\r\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\r\n    function unlockAccount(address tokenOwner) public;\r\n    function disableMinting() public;\r\n    function enableTransfers() public;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X}Check return status\r\n    // ------------------------------------------------------------------------\r\n    enum CheckResult {\r\n        Success,                           // 0 Success\r\n        NotTransferable,                   // 1 Tokens not transferable yet\r\n        AccountLocked,                     // 2 Account locked\r\n        SignerMismatch,                    // 3 Mismatch in signing account\r\n        InvalidNonce,                      // 4 Invalid nonce\r\n        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\r\n        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\r\n        InsufficientTokens,                // 7 Insufficient tokens\r\n        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\r\n        OverflowError                      // 9 Overflow error\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// PriceFeed Interface - _live is true if the rate is valid, false if invalid\r\n// ----------------------------------------------------------------------------\r\ncontract PriceFeedInterface {\r\n    function name() public view returns (string);\r\n    function getRate() public view returns (uint _rate, bool _live);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Bonus List interface\r\n// ----------------------------------------------------------------------------\r\ncontract BonusListInterface {\r\n    function isInBonusList(address account) public view returns (bool);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// FxxxLandRush Contract\r\n// ----------------------------------------------------------------------------\r\ncontract FxxxLandRush is Owned, ApproveAndCallFallBack {\r\n    using SafeMath for uint;\r\n\r\n    uint private constant TENPOW18 = 10 ** 18;\r\n\r\n    BTTSTokenInterface public parcelToken;\r\n    BTTSTokenInterface public gzeToken;\r\n    PriceFeedInterface public ethUsdPriceFeed;\r\n    PriceFeedInterface public gzeEthPriceFeed;\r\n    BonusListInterface public bonusList;\r\n\r\n    address public wallet;\r\n    uint public startDate;\r\n    uint public endDate;\r\n    uint public maxParcels;\r\n    uint public parcelUsd;                  // USD per parcel, e.g., USD 1,500 * 10^18\r\n    uint public usdLockAccountThreshold;    // e.g., USD 7,000 * 10^18\r\n    uint public gzeBonusOffList;            // e.g., 20 = 20% bonus\r\n    uint public gzeBonusOnList;             // e.g., 30 = 30% bonus\r\n\r\n    uint public parcelsSold;\r\n    uint public contributedGze;\r\n    uint public contributedEth;\r\n    bool public finalised;\r\n\r\n    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\r\n    event StartDateUpdated(uint oldStartDate, uint newStartDate);\r\n    event EndDateUpdated(uint oldEndDate, uint newEndDate);\r\n    event MaxParcelsUpdated(uint oldMaxParcels, uint newMaxParcels);\r\n    event ParcelUsdUpdated(uint oldParcelUsd, uint newParcelUsd);\r\n    event UsdLockAccountThresholdUpdated(uint oldUsdLockAccountThreshold, uint newUsdLockAccountThreshold);\r\n    event GzeBonusOffListUpdated(uint oldGzeBonusOffList, uint newGzeBonusOffList);\r\n    event GzeBonusOnListUpdated(uint oldGzeBonusOnList, uint newGzeBonusOnList);\r\n    event Purchased(address indexed addr, uint parcels, uint gzeToTransfer, uint ethToTransfer, uint parcelsSold, uint contributedGze, uint contributedEth, bool lockAccount);\r\n\r\n    constructor(address _parcelToken, address _gzeToken, address _ethUsdPriceFeed, address _gzeEthPriceFeed, address _bonusList, address _wallet, uint _startDate, uint _endDate, uint _maxParcels, uint _parcelUsd, uint _usdLockAccountThreshold, uint _gzeBonusOffList, uint _gzeBonusOnList) public {\r\n        require(_parcelToken != address(0) && _gzeToken != address(0));\r\n        require(_ethUsdPriceFeed != address(0) && _gzeEthPriceFeed != address(0) && _bonusList != address(0));\r\n        require(_wallet != address(0));\r\n        require(_startDate >= now && _endDate > _startDate);\r\n        require(_maxParcels > 0 && _parcelUsd > 0);\r\n        initOwned(msg.sender);\r\n        parcelToken = BTTSTokenInterface(_parcelToken);\r\n        gzeToken = BTTSTokenInterface(_gzeToken);\r\n        ethUsdPriceFeed = PriceFeedInterface(_ethUsdPriceFeed);\r\n        gzeEthPriceFeed = PriceFeedInterface(_gzeEthPriceFeed);\r\n        bonusList = BonusListInterface(_bonusList);\r\n        wallet = _wallet;\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n        maxParcels = _maxParcels;\r\n        parcelUsd = _parcelUsd;\r\n        usdLockAccountThreshold = _usdLockAccountThreshold;\r\n        gzeBonusOffList = _gzeBonusOffList;\r\n        gzeBonusOnList = _gzeBonusOnList;\r\n    }\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        require(!finalised);\r\n        require(_wallet != address(0));\r\n        emit WalletUpdated(wallet, _wallet);\r\n        wallet = _wallet;\r\n    }\r\n    function setStartDate(uint _startDate) public onlyOwner {\r\n        require(!finalised);\r\n        require(_startDate >= now);\r\n        emit StartDateUpdated(startDate, _startDate);\r\n        startDate = _startDate;\r\n    }\r\n    function setEndDate(uint _endDate) public onlyOwner {\r\n        require(!finalised);\r\n        require(_endDate > startDate);\r\n        emit EndDateUpdated(endDate, _endDate);\r\n        endDate = _endDate;\r\n    }\r\n    function setMaxParcels(uint _maxParcels) public onlyOwner {\r\n        require(!finalised);\r\n        require(_maxParcels >= parcelsSold);\r\n        emit MaxParcelsUpdated(maxParcels, _maxParcels);\r\n        maxParcels = _maxParcels;\r\n    }\r\n    function setParcelUsd(uint _parcelUsd) public onlyOwner {\r\n        require(!finalised);\r\n        require(_parcelUsd > 0);\r\n        emit ParcelUsdUpdated(parcelUsd, _parcelUsd);\r\n        parcelUsd = _parcelUsd;\r\n    }\r\n    function setUsdLockAccountThreshold(uint _usdLockAccountThreshold) public onlyOwner {\r\n        require(!finalised);\r\n        emit UsdLockAccountThresholdUpdated(usdLockAccountThreshold, _usdLockAccountThreshold);\r\n        usdLockAccountThreshold = _usdLockAccountThreshold;\r\n    }\r\n    function setGzeBonusOffList(uint _gzeBonusOffList) public onlyOwner {\r\n        require(!finalised);\r\n        emit GzeBonusOffListUpdated(gzeBonusOffList, _gzeBonusOffList);\r\n        gzeBonusOffList = _gzeBonusOffList;\r\n    }\r\n    function setGzeBonusOnList(uint _gzeBonusOnList) public onlyOwner {\r\n        require(!finalised);\r\n        emit GzeBonusOnListUpdated(gzeBonusOnList, _gzeBonusOnList);\r\n        gzeBonusOnList = _gzeBonusOnList;\r\n    }\r\n\r\n    function symbol() public view returns (string _symbol) {\r\n        _symbol = parcelToken.symbol();\r\n    }\r\n    function name() public view returns (string _name) {\r\n        _name = parcelToken.name();\r\n    }\r\n\r\n    // USD per ETH, e.g., 221.99 * 10^18\r\n    function ethUsd() public view returns (uint _rate, bool _live) {\r\n        return ethUsdPriceFeed.getRate();\r\n    }\r\n    // ETH per GZE, e.g., 0.00004366 * 10^18\r\n    function gzeEth() public view returns (uint _rate, bool _live) {\r\n        return gzeEthPriceFeed.getRate();\r\n    }\r\n    // USD per GZE, e.g., 0.0096920834 * 10^18\r\n    function gzeUsd() public view returns (uint _rate, bool _live) {\r\n        uint _ethUsd;\r\n        bool _ethUsdLive;\r\n        (_ethUsd, _ethUsdLive) = ethUsdPriceFeed.getRate();\r\n        uint _gzeEth;\r\n        bool _gzeEthLive;\r\n        (_gzeEth, _gzeEthLive) = gzeEthPriceFeed.getRate();\r\n        if (_ethUsdLive && _gzeEthLive) {\r\n            _live = true;\r\n            _rate = _ethUsd.mul(_gzeEth).div(TENPOW18);\r\n        }\r\n    }\r\n    // ETH per parcel, e.g., 6.757061128879679264 * 10^18\r\n    function parcelEth() public view returns (uint _rate, bool _live) {\r\n        uint _ethUsd;\r\n        (_ethUsd, _live) = ethUsd();\r\n        if (_live) {\r\n            _rate = parcelUsd.mul(TENPOW18).div(_ethUsd);\r\n        }\r\n    }\r\n    // GZE per parcel, without bonus, e.g., 154765.486231783766945298 * 10^18\r\n    function parcelGzeWithoutBonus() public view returns (uint _rate, bool _live) {\r\n        uint _gzeUsd;\r\n        (_gzeUsd, _live) = gzeUsd();\r\n        if (_live) {\r\n            _rate = parcelUsd.mul(TENPOW18).div(_gzeUsd);\r\n        }\r\n    }\r\n    // GZE per parcel, with bonus but not on bonus list, e.g., 128971.238526486472454415 * 10^18\r\n    function parcelGzeWithBonusOffList() public view returns (uint _rate, bool _live) {\r\n        uint _parcelGzeWithoutBonus;\r\n        (_parcelGzeWithoutBonus, _live) = parcelGzeWithoutBonus();\r\n        if (_live) {\r\n            _rate = _parcelGzeWithoutBonus.mul(100).div(gzeBonusOffList.add(100));\r\n        }\r\n    }\r\n    // GZE per parcel, with bonus and on bonus list, e.g., 119050.374024449051496383 * 10^18\r\n    function parcelGzeWithBonusOnList() public view returns (uint _rate, bool _live) {\r\n        uint _parcelGzeWithoutBonus;\r\n        (_parcelGzeWithoutBonus, _live) = parcelGzeWithoutBonus();\r\n        if (_live) {\r\n            _rate = _parcelGzeWithoutBonus.mul(100).div(gzeBonusOnList.add(100));\r\n        }\r\n    }\r\n\r\n    // Account contributes by:\r\n    // 1. calling GZE.approve(landRushAddress, tokens)\r\n    // 2. calling this.purchaseWithGze(tokens)\r\n    function purchaseWithGze(uint256 tokens) public {\r\n        require(gzeToken.allowance(msg.sender, this) >= tokens);\r\n        receiveApproval(msg.sender, tokens, gzeToken, \"\");\r\n    }\r\n    // Account contributes by calling GZE.approveAndCall(landRushAddress, tokens, \"\")\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes /* data */) public {\r\n        require(now >= startDate && now <= endDate);\r\n        require(token == address(gzeToken));\r\n        uint _parcelGze;\r\n        bool _live;\r\n        if (bonusList.isInBonusList(from)) {\r\n            (_parcelGze, _live) = parcelGzeWithBonusOnList();\r\n        } else {\r\n            (_parcelGze, _live) = parcelGzeWithBonusOffList();\r\n        }\r\n        require(_live);\r\n        uint parcels = tokens.div(_parcelGze);\r\n        if (parcelsSold.add(parcels) >= maxParcels) {\r\n            parcels = maxParcels.sub(parcelsSold);\r\n        }\r\n        uint gzeToTransfer = parcels.mul(_parcelGze);\r\n        contributedGze = contributedGze.add(gzeToTransfer);\r\n        require(ERC20Interface(token).transferFrom(from, wallet, gzeToTransfer));\r\n        bool lock = mintParcelTokens(from, parcels);\r\n        emit Purchased(from, parcels, gzeToTransfer, 0, parcelsSold, contributedGze, contributedEth, lock);\r\n    }\r\n    // Account contributes by sending ETH\r\n    function () public payable {\r\n        require(now >= startDate && now <= endDate);\r\n        uint _parcelEth;\r\n        bool _live;\r\n        (_parcelEth, _live) = parcelEth();\r\n        require(_live);\r\n        uint parcels = msg.value.div(_parcelEth);\r\n        if (parcelsSold.add(parcels) >= maxParcels) {\r\n            parcels = maxParcels.sub(parcelsSold);\r\n        }\r\n        uint ethToTransfer = parcels.mul(_parcelEth);\r\n        contributedEth = contributedEth.add(ethToTransfer);\r\n        uint ethToRefund = msg.value.sub(ethToTransfer);\r\n        if (ethToRefund > 0) {\r\n            msg.sender.transfer(ethToRefund);\r\n        }\r\n        bool lock = mintParcelTokens(msg.sender, parcels);\r\n        emit Purchased(msg.sender, parcels, 0, ethToTransfer, parcelsSold, contributedGze, contributedEth, lock);\r\n    }\r\n    // Contract owner allocates parcels to tokenOwner for offline purchase\r\n    function offlinePurchase(address tokenOwner, uint parcels) public onlyOwner {\r\n        require(!finalised);\r\n        if (parcelsSold.add(parcels) >= maxParcels) {\r\n            parcels = maxParcels.sub(parcelsSold);\r\n        }\r\n        bool lock = mintParcelTokens(tokenOwner, parcels);\r\n        emit Purchased(tokenOwner, parcels, 0, 0, parcelsSold, contributedGze, contributedEth, lock);\r\n    }\r\n    // Internal function to mint tokens and disable minting if maxParcels sold\r\n    function mintParcelTokens(address account, uint parcels) internal returns (bool _lock) {\r\n        require(parcels > 0);\r\n        parcelsSold = parcelsSold.add(parcels);\r\n        _lock = parcelToken.balanceOf(account).add(parcelUsd.mul(parcels)) >= usdLockAccountThreshold;\r\n        require(parcelToken.mint(account, parcelUsd.mul(parcels), _lock));\r\n        if (parcelsSold >= maxParcels) {\r\n            parcelToken.disableMinting();\r\n            finalised = true;\r\n        }\r\n    }\r\n    // Contract owner finalises to disable parcel minting\r\n    function finalise() public onlyOwner {\r\n        require(!finalised);\r\n        require(now > endDate || parcelsSold >= maxParcels);\r\n        parcelToken.disableMinting();\r\n        finalised = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUsdPriceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelGzeWithBonusOffList\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeBonusOnList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gzeBonusOffList\",\"type\":\"uint256\"}],\"name\":\"setGzeBonusOffList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUsd\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdLockAccountThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"purchaseWithGze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipImmediately\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeEth\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxParcels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxParcels\",\"type\":\"uint256\"}],\"name\":\"setMaxParcels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parcelUsd\",\"type\":\"uint256\"}],\"name\":\"setParcelUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"parcels\",\"type\":\"uint256\"}],\"name\":\"offlinePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeEthPriceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedGze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeBonusOffList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeUsd\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gzeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gzeBonusOnList\",\"type\":\"uint256\"}],\"name\":\"setGzeBonusOnList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelGzeWithBonusOnList\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelEth\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdLockAccountThreshold\",\"type\":\"uint256\"}],\"name\":\"setUsdLockAccountThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parcelGzeWithoutBonus\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_parcelToken\",\"type\":\"address\"},{\"name\":\"_gzeToken\",\"type\":\"address\"},{\"name\":\"_ethUsdPriceFeed\",\"type\":\"address\"},{\"name\":\"_gzeEthPriceFeed\",\"type\":\"address\"},{\"name\":\"_bonusList\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_maxParcels\",\"type\":\"uint256\"},{\"name\":\"_parcelUsd\",\"type\":\"uint256\"},{\"name\":\"_usdLockAccountThreshold\",\"type\":\"uint256\"},{\"name\":\"_gzeBonusOffList\",\"type\":\"uint256\"},{\"name\":\"_gzeBonusOnList\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldStartDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStartDate\",\"type\":\"uint256\"}],\"name\":\"StartDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"EndDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMaxParcels\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMaxParcels\",\"type\":\"uint256\"}],\"name\":\"MaxParcelsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldParcelUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newParcelUsd\",\"type\":\"uint256\"}],\"name\":\"ParcelUsdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdLockAccountThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdLockAccountThreshold\",\"type\":\"uint256\"}],\"name\":\"UsdLockAccountThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldGzeBonusOffList\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newGzeBonusOffList\",\"type\":\"uint256\"}],\"name\":\"GzeBonusOffListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldGzeBonusOnList\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newGzeBonusOnList\",\"type\":\"uint256\"}],\"name\":\"GzeBonusOnListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parcels\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gzeToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parcelsSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedGze\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FxxxLandRush","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005b98a13e7c6aef063551643b0171d5cd681bf4da0000000000000000000000004ac00f287f36a6aad655281fe1ca6798c9cb727b000000000000000000000000f31aa1dfbed873ab957896a0204a016f5e123e02000000000000000000000000d649c9b68bb78e8fd25c0b7a9c22c42f57768c9100000000000000000000000057d2f4b8f55a26dfe8aba3c9f1c73cadbbc55c460000000000000000000000008cd8baa410e9172b949f2c4433d3b5905f8606ff000000000000000000000000000000000000000000000000000000005bc66d70000000000000000000000000000000000000000000000000000000005bef4bf000000000000000000000000000000000000000000000000000000000000002b100000000000000000000000000000000000000000000005150ae84a8cdf0000000000000000000000000000000000000000000000000017b7883c069166000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e","Library":"","SwarmSource":"bzzr://2f29928ea2b0007ca81090aaf5afb69b74b149026c8819c686e08e86cb921fa5"}]}