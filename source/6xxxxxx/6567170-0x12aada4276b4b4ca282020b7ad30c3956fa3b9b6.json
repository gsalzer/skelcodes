{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract IMarketData {\r\n\r\n\tfunction getTokenExchangeRatio(address _tokenNum, address _tokenDenom) public returns (uint256 num, uint256 denom);\r\n\r\n}\r\n\r\ncontract IToken {\r\n\r\n\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n\r\n  /// @param _to The address of the recipient\r\n\r\n  /// @param _value The amount of token to be transferred\r\n\r\n  /// @return Whether the transfer was successful or not\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n\r\n  /// @param _from The address of the sender\r\n\r\n  /// @param _to The address of the recipient\r\n\r\n  /// @param _value The amount of token to be transferred\r\n\r\n  /// @return Whether the transfer was successful or not\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n}\r\n\r\ncontract ILoanLogic {\r\n\r\n\tfunction getTotalPledgeAmount(address token, address account) public constant returns (uint256);\r\n\r\n\tfunction hasUnpaidLoan(address account) public constant returns (bool);\r\n\r\n\tfunction getTotalBorrowAmount(address _token) public constant returns (uint256);\r\n\r\n}\r\n\r\ncontract Ownable \r\n\r\n{\r\n\r\n  address public owner;\r\n\r\n \r\n\r\n  constructor(address _owner) public \r\n\r\n  {\r\n\r\n    owner = _owner;\r\n\r\n  }\r\n\r\n \r\n\r\n  modifier onlyOwner() \r\n\r\n  {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferOwnership(address newOwner) onlyOwner \r\n\r\n  {\r\n\r\n    require(newOwner != address(0));      \r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract Balance is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n     \r\n\r\n\tmapping (address => mapping (address => uint256)) public account2Token2Balance;\r\n\r\n\tmapping (address => uint256) public token2ProfitShare;\r\n\r\n\tmapping (address => address) public token2AssuranceAccount;\r\n\r\n\tmapping (address => uint256) public assuranceAccount2LastDepositTime;\r\n\r\n\r\n\r\n\taddress public contractBLK;\r\n\r\n\taddress public contractBiLinkLoan;\r\n\r\n\taddress public contractLoanLogic;\r\n\r\n\taddress public contractBiLinkExchange;\r\n\r\n\taddress public contractMarketData;\r\n\r\n\t\r\n\r\n\taddress public accountCost;\r\n\r\n\tuint256 public ratioProfit2Cost;//percentage\r\n\r\n\tuint256 public ratioProfit2BuyBLK;//percentage\r\n\r\n\tuint256 public ETH_BLK_MULTIPLIER= 1000;\r\n\r\n\tuint256 public amountEthToBuyBLK;\r\n\r\n\tuint256 public priceBLK;//eth\r\n\r\n\r\n\r\n\tbool public isLegacy;//if true, not allow new trade,new deposit\r\n\r\n\tbool private depositingTokenFlag;\r\n\r\n\r\n\r\n\tevent OnShareProfit(address token, uint256 amount, uint256 timestamp );\r\n\r\n\tevent OnSellBLK(address account, uint256 amount, uint256 timestamp );\r\n\r\n\t\r\n\r\n\tevent OnDeposit(address token, address account, uint256 amount, uint256 balance, uint256 timestamp);\r\n\r\n\tevent OnWithdraw(address token, address account, uint256 amount, uint256 balance, uint256 timestamp);\r\n\r\n\tevent OnFundsMigrated(address account, address newContract, uint256 timestamp);\r\n\r\n\r\n\r\n    constructor (address _owner, address _contractBLK, address _contractBiLinkLoan, address _contractLoanLogic, address _contractBiLinkExchange, address _contractMarketData\r\n\r\n\t\t, address _accountCost, uint256 _ratioProfit2Cost, uint256 _ratioProfit2BuyBLK, uint256 _priceBLK) public Ownable(_owner) {\r\n\r\n\t\tcontractBLK= _contractBLK;\r\n\r\n\t\tcontractBiLinkExchange= _contractBiLinkExchange;\r\n\r\n\t\tcontractBiLinkLoan= _contractBiLinkLoan;\r\n\r\n\t\tcontractLoanLogic= _contractLoanLogic;\r\n\r\n\t\tcontractMarketData= _contractMarketData;\r\n\r\n\t\taccountCost= _accountCost;\r\n\r\n\t\tratioProfit2Cost= _ratioProfit2Cost;\r\n\r\n\t\tratioProfit2BuyBLK= _ratioProfit2BuyBLK;\r\n\r\n\t\tpriceBLK= _priceBLK;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setThisContractAsLegacy() public onlyOwner {\r\n\r\n\t\tisLegacy= true;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setRatioProfit2Cost(uint256 _ratio) public onlyOwner {\r\n\r\n\t\trequire(_ratio <= 20);\r\n\r\n\t\tratioProfit2Cost= _ratio;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setRatioProfit2BuyBLK(uint256 _ratio) public onlyOwner {\r\n\r\n\t\tratioProfit2BuyBLK= _ratio;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setTokenAssuranceAccount(address _token, address _account) public onlyOwner {\r\n\r\n\t\trequire(token2AssuranceAccount[_token]== address(0));\r\n\r\n\r\n\r\n\t\ttoken2AssuranceAccount[_token]= _account;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getTokenAssuranceAccount(address _token) public constant returns (address) {\r\n\r\n\t\treturn token2AssuranceAccount[_token];\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getTokenAssuranceAmount(address _token) public constant returns (uint256) {\r\n\r\n\t\treturn account2Token2Balance[token2AssuranceAccount[_token]][_token];\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction depositEther() public payable {\r\n\r\n\t\trequire(isLegacy== false);\r\n\r\n\r\n\r\n\t\taccount2Token2Balance[msg.sender][address(0)]= account2Token2Balance[msg.sender][address(0)].add(msg.value);\r\n\r\n\t\temit OnDeposit(0, msg.sender, msg.value, account2Token2Balance[msg.sender][0], now);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction withdrawEther(uint256 _amount) public {\r\n\r\n\t\trequire(account2Token2Balance[msg.sender][0] >= _amount);\r\n\r\n\t\taccount2Token2Balance[msg.sender][0] = account2Token2Balance[msg.sender][0].sub(_amount);\r\n\r\n\r\n\r\n\t\tmsg.sender.transfer(_amount);\r\n\r\n\t\temit OnWithdraw(0, msg.sender, _amount, account2Token2Balance[msg.sender][0], now);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction depositToken(address _token, uint256 _amount) public {\r\n\r\n\t\trequire(_token != address(0)&& isLegacy== false);\r\n\r\n\t\tdepositingTokenFlag = true;\r\n\r\n\t\trequire(IToken(_token).transferFrom(msg.sender, this, _amount));\r\n\r\n\t\tdepositingTokenFlag = false;\r\n\r\n\r\n\r\n\t\tif(token2AssuranceAccount[_token]== msg.sender)\r\n\r\n\t\t\tassuranceAccount2LastDepositTime[msg.sender]= now;\r\n\r\n\t\t \r\n\r\n\t\taccount2Token2Balance[msg.sender][_token] = account2Token2Balance[msg.sender][_token].add(_amount);\r\n\r\n\t\temit OnDeposit(_token, msg.sender, _amount, account2Token2Balance[msg.sender][_token], now);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction withdrawToken(address _token, uint256 _amount) public {\r\n\r\n\t\trequire(_token != address(0));\r\n\r\n\t\trequire(account2Token2Balance[msg.sender][_token] >= _amount);\r\n\r\n\r\n\r\n\t\tif(token2AssuranceAccount[_token]== msg.sender) {\r\n\r\n\t\t\trequire(_amount<= account2Token2Balance[msg.sender][_token].sub(ILoanLogic(contractLoanLogic).getTotalBorrowAmount(_token)));\r\n\r\n\t\t\trequire(now.sub(assuranceAccount2LastDepositTime[msg.sender]) > 30 * 24 * 3600);\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\taccount2Token2Balance[msg.sender][_token] = account2Token2Balance[msg.sender][_token].sub(_amount);\r\n\r\n\t\trequire(IToken(_token).transfer(msg.sender, _amount));\r\n\r\n\t\temit OnWithdraw(_token, msg.sender, _amount, account2Token2Balance[msg.sender][_token], now);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction tokenFallback( address _sender, uint256 _amount, bytes _data) public returns (bool ok) {\r\n\r\n\t\tif (depositingTokenFlag) {\r\n\r\n\t\t\t// Transfer was initiated from depositToken(). User token balance will be updated there.\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} \r\n\r\n\t\telse {\r\n\r\n\t\t\t// Direct ECR223 Token.transfer into this contract not allowed, to keep it consistent\r\n\r\n\t\t\t// with direct transfers of ECR20 and ETH.\r\n\r\n\t\t\trevert();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getBalance(address _token, address _account) public constant returns (uint256, uint256) {\t\t\r\n\r\n\t\treturn (account2Token2Balance[_account][_token] , getAvailableBalance(_token, _account)); \r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getAvailableBalance(address _token, address _account) public constant returns (uint256) {\t\t\r\n\r\n\t\treturn account2Token2Balance[_account][_token].sub(ILoanLogic(contractLoanLogic).getTotalPledgeAmount(_token, _account)); \r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction modifyBalance(address _account, address _token, uint256 _amount, bool _addOrSub) public {\r\n\r\n\t\trequire(msg.sender== contractBiLinkLoan|| msg.sender== contractBiLinkExchange);\r\n\r\n\r\n\r\n\t\tif(_addOrSub)\r\n\r\n\t\t\taccount2Token2Balance[_account][_token]= account2Token2Balance[_account][_token].add(_amount);\r\n\r\n\t\telse\r\n\r\n\t\t\taccount2Token2Balance[_account][_token]= account2Token2Balance[_account][_token].sub(_amount);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction distributeEthProfit (address _profitMaker, uint256 _amount) public {\r\n\r\n\t\tuint256 _amountCost= _amount.mul(ratioProfit2Cost).div(100);\r\n\r\n\t\taccount2Token2Balance[accountCost][address(0)]= account2Token2Balance[accountCost][address(0)].add(_amountCost);\r\n\r\n\r\n\r\n\t\tuint256 _amountToBuyBLK= _amount.mul(ratioProfit2BuyBLK).div(100);\r\n\r\n\t\tamountEthToBuyBLK= amountEthToBuyBLK.add(_amountToBuyBLK);\r\n\r\n\r\n\r\n\t\ttoken2ProfitShare[address(0)]= token2ProfitShare[address(0)].add(_amount.sub(_amountCost).sub(_amountToBuyBLK));\r\n\r\n\t\t\r\n\r\n\t\tIBiLinkToken(contractBLK).mint(_profitMaker, _amountToBuyBLK.mul(ETH_BLK_MULTIPLIER));\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction distributeTokenProfit (address _profitMaker, address _token, uint256 _amount) public {\r\n\r\n\t\ttoken2ProfitShare[_token]= token2ProfitShare[_token].add(_amount);\r\n\r\n\r\n\r\n\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(address(0), _token);\r\n\r\n\t\tIBiLinkToken(contractBLK).mint(_profitMaker, _amount.mul(_num* 5).div(_denom* 8).mul(ETH_BLK_MULTIPLIER));\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction shareProfit(address _token) public {\r\n\r\n\t\trequire(token2ProfitShare[_token]> 0);\r\n\r\n\r\n\r\n\t\tuint256 _amountBLKMined= IBiLinkToken(contractBLK).totalSupply();\r\n\r\n\t\tuint256 _amountEachBLKShare= token2ProfitShare[_token].div(_amountBLKMined);\r\n\r\n\t\trequire(_amountEachBLKShare> 0);\r\n\r\n\r\n\r\n\t\ttoken2ProfitShare[_token]= token2ProfitShare[_token].sub(_amountBLKMined.mul(_amountEachBLKShare));\r\n\r\n\r\n\r\n\t\taddress[] memory _accounts= IBiLinkToken(contractBLK).getCanShareProfitAccounts();\r\n\r\n\t\tfor(uint256 i= 0; i< _accounts.length; i++) {\r\n\r\n\t\t\tuint256 _balance= IBiLinkToken(contractBLK).balanceOf(_accounts[i]);\r\n\r\n\t\t\tif(_balance> 0)\r\n\r\n\t\t\t\trequire(IToken(_token).transfer(_accounts[i], _balance.mul(_amountEachBLKShare)));\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\temit OnShareProfit(_token, _amountBLKMined.mul(_amountEachBLKShare), now);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction migrateFund(address _newContract, address[] _tokens) public {\r\n\r\n\t\trequire(_newContract != address(0)&& ILoanLogic(contractLoanLogic).hasUnpaidLoan(msg.sender)== false);\r\n\r\n    \r\n\r\n\t\tBalance _newBalance= Balance(_newContract);\r\n\r\n\r\n\r\n\t\tuint256 _amountEther = account2Token2Balance[msg.sender][0];\r\n\r\n\t\tif (_amountEther > 0) {\r\n\r\n\t\t\taccount2Token2Balance[msg.sender][0] = 0;\r\n\r\n\t\t\t_newBalance.depositFromUserMigration.value(_amountEther)(msg.sender);\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\tfor (uint16 n = 0; n < _tokens.length; n++) {\r\n\r\n\t\t\taddress _token = _tokens[n];\r\n\r\n\t\t\trequire(_token != address(0)); // Ether is handled above.\r\n\r\n\t\t\tuint256 _amountToken = account2Token2Balance[msg.sender][_token];\r\n\r\n      \r\n\r\n\t\t\tif (_amountToken != 0) {      \r\n\r\n\t\t\t\trequire(IToken(_token).approve(_newBalance, _amountToken));\r\n\r\n\t\t\t\taccount2Token2Balance[msg.sender][_token] = 0;\r\n\r\n\t\t\t\t_newBalance.depositTokenFromUserMigration(_token, _amountToken, msg.sender);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\temit OnFundsMigrated(msg.sender, _newBalance, now);\r\n\r\n\t}\r\n\r\n\t \r\n\r\n\tfunction depositFromUserMigration(address _account) public payable {\r\n\r\n\t\trequire(_account != address(0));\r\n\r\n\t\trequire(msg.value > 0);\r\n\r\n\t\taccount2Token2Balance[_account][0] = account2Token2Balance[_account][0].add(msg.value);\r\n\r\n\t}\r\n\r\n  \r\n\r\n\tfunction depositTokenFromUserMigration(address _token, uint _amount, address _account) public {\r\n\r\n\t\trequire(_token != address(0));\r\n\r\n\t\trequire(_account != address(0));\r\n\r\n\t\trequire(_amount > 0);\r\n\r\n\t\tdepositingTokenFlag = true;\r\n\r\n\t\trequire(IToken(_token).transferFrom(msg.sender, this, _amount));\r\n\r\n\t\tdepositingTokenFlag = false;\r\n\r\n\t\taccount2Token2Balance[_account][_token] = account2Token2Balance[_account][_token].add(_amount);\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction getRemainBuyBLKAmount() public constant returns (uint256) {\r\n\r\n\t\treturn amountEthToBuyBLK;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction sellBLK(uint256 _amountBLK) public {\r\n\r\n\t\trequire(_amountBLK> 0);\r\n\r\n\t\taccount2Token2Balance[msg.sender][contractBLK]= account2Token2Balance[msg.sender][contractBLK].sub(_amountBLK);\r\n\r\n\t\tuint256 _amountEth= _amountBLK.mul(priceBLK).div(1 ether);\r\n\r\n\t\tamountEthToBuyBLK= amountEthToBuyBLK.sub(_amountEth);\r\n\r\n\t\taccount2Token2Balance[msg.sender][address(0)]= account2Token2Balance[msg.sender][address(0)].add(_amountEth);\r\n\r\n\r\n\r\n\t\tIBiLinkToken(contractBLK).burn(_amountBLK);\r\n\r\n\r\n\r\n\t\temit OnSellBLK(msg.sender, _amountBLK, now);\r\n\r\n\t}\r\n\r\n}\r\n\r\ncontract IBiLinkToken is IToken {\r\n\r\n\tfunction getCanShareProfitAccounts() public constant returns (address[]);\r\n\r\n\tfunction totalSupply() public view returns (uint256);\r\n\r\n\tfunction balanceOf(address _account) public view returns (uint256);\r\n\r\n\tfunction mint(address _to, uint256 _amount) public returns (bool);\r\n\r\n\tfunction burn(uint256 amount) public;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    require(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Adds two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    require(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"migrateFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"shareProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractMarketData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountEthToBuyBLK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBLK\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioProfit2Cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountCost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setThisContractAsLegacy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"assuranceAccount2LastDepositTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLoanLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioProfit2Cost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioProfit2BuyBLK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositFromUserMigration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_addOrSub\",\"type\":\"bool\"}],\"name\":\"modifyBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBiLinkExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainBuyBLKAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitMaker\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeTokenProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"account2Token2Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountBLK\",\"type\":\"uint256\"}],\"name\":\"sellBLK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositTokenFromUserMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenAssuranceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioProfit2BuyBLK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"token2AssuranceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBiLinkLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTokenAssuranceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"token2ProfitShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceBLK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLegacy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_BLK_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenAssuranceAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitMaker\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeEthProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_contractBLK\",\"type\":\"address\"},{\"name\":\"_contractBiLinkLoan\",\"type\":\"address\"},{\"name\":\"_contractLoanLogic\",\"type\":\"address\"},{\"name\":\"_contractBiLinkExchange\",\"type\":\"address\"},{\"name\":\"_contractMarketData\",\"type\":\"address\"},{\"name\":\"_accountCost\",\"type\":\"address\"},{\"name\":\"_ratioProfit2Cost\",\"type\":\"uint256\"},{\"name\":\"_ratioProfit2BuyBLK\",\"type\":\"uint256\"},{\"name\":\"_priceBLK\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnShareProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnSellBLK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnFundsMigrated\",\"type\":\"event\"}]","ContractName":"Balance","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4e3627034a97b75d899ee7525d446bf2d42ad66000000000000000000000000e04d19104ce9062634f439406bf907fab665522f00000000000000000000000065514cd2d795d535a7bec8e0a08f43453fa26118000000000000000000000000fd668532feffca0b708da8937070727ef8e474c9000000000000000000000000a7945b42af7de9d96f8d763b5abd38cf0e07bef1000000000000000000000000611ce695290729805e138c9c14dbddf132e76de300000000000000000000000019350aa51f45965b783ec8e40538d4b88d24698a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000002386f26fc10000","Library":"","SwarmSource":"bzzr://edbbe2f76b43aee7896092ff06855259bdc6d46f99a36fcb369b16a261ad6be6"}]}