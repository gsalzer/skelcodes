{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Memberships is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    uint256 private numOfMembers;\r\n    uint256 private maxGramsPerMonth;\r\n    uint256 private monthNo;\r\n    ERC20 public ELYC;\r\n    \r\n    \r\n    constructor() public {\r\n        maxGramsPerMonth = 60;\r\n        ELYC = ERC20(0xFD96F865707ec6e6C0d6AfCe1f6945162d510351); \r\n    }\r\n    \r\n    \r\n    /**\r\n     * MAPPINGS\r\n     * */\r\n    mapping (address => uint256) private memberIdByAddr;\r\n    mapping (uint256 => address) private memberAddrById;\r\n    mapping (address => bool) private addrIsMember;\r\n    mapping (address => mapping (uint256 => uint256)) private memberPurchases;\r\n    mapping (address => bool) private blacklist;\r\n    \r\n    \r\n    /**\r\n     * EVENTS\r\n     * */\r\n    event MaxGramsPerMonthChanged(uint256 from, uint256 to);\r\n    event MemberBlacklisted(address indexed addr, uint256 indexed id, uint256 block);\r\n    event MemberRemovedFromBlacklist(address indexed addr, uint256 indexed id, uint256 block);\r\n    event NewMemberAdded(address indexed addr, uint256 indexed id, uint256 block);\r\n    event CannabisPurchaseMade(address indexed by, uint256 milligrams, uint256 price, address indexed vendor, uint256 block);\r\n    event PurchaseMade(address indexed by, uint256 _price, address indexed _vendor, uint256 block);\r\n    event MonthNumberIncremented(uint256 block);\r\n    \r\n    \r\n    /**\r\n     * MODIFIERS\r\n     * */\r\n     modifier onlyMembers {\r\n         require(\r\n             addressHasMembership(msg.sender)\r\n             && !memberIsBlacklisted(msg.sender)\r\n             );\r\n         _;\r\n     }\r\n\r\n    \r\n    \r\n    /**\r\n     * GETTERS\r\n     * */\r\n     \r\n    /**\r\n     * @return The current number of months the contract has been running for\r\n     * */\r\n     function getMonthNo() public view returns(uint256) {\r\n         return monthNo;\r\n     }\r\n     \r\n    /**\r\n     * @return The total amount of members \r\n     * */\r\n    function getNumOfMembers() public view returns(uint256) {\r\n        return numOfMembers;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The maximum grams of cannabis each member can buy per month\r\n     * */\r\n    function getMaxGramsPerMonth() public view returns(uint256) {\r\n        return maxGramsPerMonth;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param _addr The address which is being queried for membership\r\n     * @return true if the address is a member, false otherwise\r\n     * */\r\n    function addressHasMembership(address _addr) public view returns(bool) {\r\n        return addrIsMember[_addr];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param _addr The address associated with a member ID (if any).\r\n     * @return The member ID if it exists, 0 otherwise\r\n     * */\r\n    function getMemberIdByAddr(address _addr) public view returns(uint256) {\r\n        return memberIdByAddr[_addr];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param _id The ID associated with a member address (if any).\r\n     * @return The member address if it exists, 0x00...00 otherwise.\r\n     * */\r\n    function getMemberAddrById(uint256 _id) public view returns(address) {\r\n        return memberAddrById[_id];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param _addr The address which is being checked if it is on the blacklist\r\n     * @return true if the address is on the blacklist, false otherwise\r\n     * */\r\n    function memberIsBlacklisted(address _addr) public view returns(bool) {\r\n        return blacklist[_addr];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param _addr The address for which is being checked how many milligrams the address owner\r\n     * (i.e. the registered member) can buy.\r\n     * @return The total amount of milligrams the address owner can buy.\r\n     * */\r\n    function getMilligramsMemberCanBuy(address _addr) public view returns(uint256) {\r\n        uint256 milligrams = memberPurchases[_addr][monthNo];\r\n        if(milligrams >= maxGramsPerMonth.mul(1000)) {\r\n            return 0;\r\n        } else {\r\n            return (maxGramsPerMonth.mul(1000)).sub(milligrams);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @param _id The member ID for which is being checked how many milligrams the ID owner\r\n     * (i.e. the registered member) can buy.\r\n     * @return The total amount of milligrams the ID owner can buy.\r\n     * */\r\n    function getMilligramsMemberCanBuy(uint256 _id) public view returns(uint256) {\r\n        uint256 milligrams = memberPurchases[getMemberAddrById(_id)][monthNo];\r\n        if(milligrams >= maxGramsPerMonth.mul(1000)) {\r\n            return 0;\r\n        } else {\r\n            return (maxGramsPerMonth.mul(1000)).sub(milligrams);\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * ONLY MEMBER FUNCTIONS\r\n     * */\r\n     \r\n     /**\r\n      * Allows members to buy cannabis.\r\n      * @param _price The total amount of ELYC tokens that should be paid.\r\n      * @param _milligrams The total amount of milligrams which is being purchased \r\n      * @param _vendor The vendors address \r\n      * @return true if the function executes successfully, false otherwise\r\n      * */\r\n    function buyCannabis(uint256 _price, uint256 _milligrams, address _vendor) public onlyMembers returns(bool) {\r\n        require(_milligrams > 0 && _price > 0 && _vendor != address(0));\r\n        require(_milligrams <= getMilligramsMemberCanBuy(msg.sender));\r\n        ELYC.transferFrom(msg.sender, _vendor, _price);\r\n        memberPurchases[msg.sender][monthNo] = memberPurchases[msg.sender][monthNo].add(_milligrams);\r\n        emit CannabisPurchaseMade(msg.sender, _milligrams, _price, _vendor, block.number);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * ONLY OWNER FUNCTIONS\r\n     * */\r\n     \r\n    /**\r\n     * Allows the owner of this contract to add new members.\r\n     * @param _addr The address of the new member. \r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function addMember(address _addr) public onlyOwner returns(bool) {\r\n        require(!addrIsMember[_addr]);\r\n        addrIsMember[_addr] = true;\r\n        numOfMembers += 1;\r\n        memberIdByAddr[_addr] = numOfMembers;\r\n        memberAddrById[numOfMembers] = _addr;\r\n        emit NewMemberAdded(_addr, numOfMembers, block.number);\r\n        //assignment of owner variable made to overcome bug found in EVM which \r\n        //caused the owner address to overflow to 0x00...01\r\n        owner = msg.sender;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to change the maximum amount of grams which members can buy \r\n     * each month. \r\n     * @param _newMax The new maximum amount of grams \r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function setMaxGramsPerMonth(uint256 _newMax) public onlyOwner returns(bool) {\r\n        require(_newMax != maxGramsPerMonth && _newMax > 0);\r\n        emit MaxGramsPerMonthChanged(maxGramsPerMonth, _newMax);\r\n        maxGramsPerMonth = _newMax;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to add members to the blacklist using the member's address\r\n     * @param _addr The address of the member who is to be blacklisted\r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function addMemberToBlacklist(address _addr) public onlyOwner returns(bool) {\r\n        emit MemberBlacklisted(_addr, getMemberIdByAddr(_addr), block.number);\r\n        blacklist[_addr] = true;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to add members to the blacklist using the member's ID\r\n     * @param _id The ID of the member who is to be blacklisted.\r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function addMemberToBlacklist(uint256 _id) public onlyOwner returns(bool) {\r\n        emit MemberBlacklisted(getMemberAddrById(_id), _id, block.number);\r\n        blacklist[getMemberAddrById(_id)] = true;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to remove members from the blacklist using the member's address. \r\n     * @param _addr The address of the member who is to be removed from the blacklist. \r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function removeMemberFromBlacklist(address _addr) public onlyOwner returns(bool) {\r\n        emit MemberRemovedFromBlacklist(_addr, getMemberIdByAddr(_addr), block.number);\r\n        blacklist[_addr] = false;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to remove members from the blacklist using the member's ID.\r\n     * @param _id The ID of the member who is to be removed from the blacklist.\r\n     * @return true if the function executes successfully, false otherwise.\r\n     * */\r\n    function removeMemberFromBlacklist(uint256 _id) public onlyOwner returns(bool) {\r\n        emit MemberRemovedFromBlacklist(getMemberAddrById(_id), _id, block.number);\r\n        blacklist[getMemberAddrById(_id)] = false;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to withdraw any ERC20 token which may have been sent to this \r\n     * contract address by mistake. \r\n     * @param _addressOfToken The contract address of the ERC20 token\r\n     * @param _recipient The receiver of the token. \r\n     * */\r\n    function withdrawAnyERC20(address _addressOfToken, address _recipient) public onlyOwner {\r\n        ERC20 token = ERC20(_addressOfToken);\r\n        token.transfer(_recipient, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to update the monnth on the contract\r\n     * */\r\n    function incrementMonthNo() public onlyOwner {\r\n        emit MonthNumberIncremented(now);\r\n        monthNo = monthNo.add(1);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxGramsPerMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOfToken\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAnyERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMilligramsMemberCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeMemberFromBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incrementMonthNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"memberIsBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMilligramsMemberCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMemberAddrById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressHasMembership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeMemberFromBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMemberIdByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_milligrams\",\"type\":\"uint256\"},{\"name\":\"_vendor\",\"type\":\"address\"}],\"name\":\"buyCannabis\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addMemberToBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxGramsPerMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ELYC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addMemberToBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMonthNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"MaxGramsPerMonthChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"MemberBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"MemberRemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"NewMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"milligrams\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"CannabisPurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_vendor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"PurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"MonthNumberIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Memberships","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13c6816723499e67fdf1414e467fd47bdbfd1da501e77cc811d29c0f7df17860"}]}