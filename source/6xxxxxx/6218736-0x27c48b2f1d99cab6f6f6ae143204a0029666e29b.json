{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract ClockAuctionBase {\r\n  function createAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _seller\r\n  ) external;\r\n\r\n  function isSaleAuction() public returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\ncontract CardBase is Ownable {\r\n  bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\r\n  bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n\r\n  /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n  ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n  ///  ERC-165 (obviously!) and ERC-721.\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n  {\r\n    return (\r\n      (_interfaceID == InterfaceSignature_ERC165) ||\r\n      (_interfaceID == InterfaceSignature_ERC721) ||\r\n      (_interfaceID == InterfaceId_ERC721Exists)\r\n    );\r\n  }\r\n}\r\n\r\ncontract CardMint is CardBase {\r\n\r\n  using AddressUtils for address;\r\n\r\n  /* EVENTS */\r\n  event TemplateMint(uint256 _templateId);\r\n  // Transfer from address 0x0 = newly minted card.\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /* DATA TYPES */\r\n  struct Template {\r\n    uint256 generation;\r\n    uint256 category;\r\n    uint256 variation;\r\n    string name;\r\n  }\r\n\r\n  /* STORAGE */\r\n  // Minter address can mint cards but not templates.\r\n  address public minter;\r\n\r\n  Template[] internal templates;\r\n  // Each Card is a template ID (index of a template in `templates`).\r\n  uint256[] internal cards;\r\n\r\n  // Template ID => max number of cards that can be minted with this template ID.\r\n  mapping (uint256 => uint256) internal templateIdToMintLimit;\r\n  // Template ID => number of cards that have been minted with this template ID.\r\n  mapping (uint256 => uint256) internal templateIdToMintCount;\r\n  // Card ID => owner of card.\r\n  mapping (uint256 => address) internal cardIdToOwner;\r\n  // Owner => number of cards owner owns.\r\n  mapping (address => uint256) internal ownerToCardCount;\r\n  // Card ID => address approved to transfer on behalf of owner.\r\n  mapping (uint256 => address) internal cardIdToApproved;\r\n  // Operator => from address to operated or not.\r\n  mapping (address => mapping (address => bool)) internal operatorToApprovals;\r\n\r\n  /* MODIFIERS */\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter);\r\n    _;\r\n  }\r\n\r\n  /* FUNCTIONS */\r\n  /** PRIVATE FUNCTIONS **/\r\n  function _addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(cardIdToOwner[_tokenId] == address(0));\r\n    ownerToCardCount[_to] = ownerToCardCount[_to] + 1;\r\n    cardIdToOwner[_tokenId] = _to;\r\n  }\r\n\r\n  /** PUBLIC FUNCTIONS **/\r\n  function setMinter(address _minter) external onlyOwner {\r\n    minter = _minter;\r\n  }\r\n\r\n  function mintTemplate(\r\n    uint256 _mintLimit,\r\n    uint256 _generation,\r\n    uint256 _category,\r\n    uint256 _variation,\r\n    string _name\r\n  ) external onlyOwner {\r\n    require(_mintLimit > 0);\r\n\r\n    uint256 newTemplateId = templates.push(Template({\r\n      generation: _generation,\r\n      category: _category,\r\n      variation: _variation,\r\n      name: _name\r\n    })) - 1;\r\n    templateIdToMintLimit[newTemplateId] = _mintLimit;\r\n\r\n    emit TemplateMint(newTemplateId);\r\n  }\r\n\r\n  function mintCard(\r\n    uint256 _templateId,\r\n    address _owner\r\n  ) external onlyMinter {\r\n    require(templateIdToMintCount[_templateId] < templateIdToMintLimit[_templateId]);\r\n    templateIdToMintCount[_templateId] = templateIdToMintCount[_templateId] + 1;\r\n\r\n    uint256 newCardId = cards.push(_templateId) - 1;\r\n    _addTokenTo(_owner, newCardId);\r\n\r\n    emit Transfer(0, _owner, newCardId);\r\n  }\r\n\r\n  function mintCards(\r\n    uint256[] _templateIds,\r\n    address _owner\r\n  ) external onlyMinter {\r\n    uint256 mintCount = _templateIds.length;\r\n    uint256 templateId;\r\n\r\n    for (uint256 i = 0; i < mintCount; ++i) {\r\n      templateId = _templateIds[i];\r\n\r\n      require(templateIdToMintCount[templateId] < templateIdToMintLimit[templateId]);\r\n      templateIdToMintCount[templateId] = templateIdToMintCount[templateId] + 1;\r\n\r\n      uint256 newCardId = cards.push(templateId) - 1;\r\n      cardIdToOwner[newCardId] = _owner;\r\n\r\n      emit Transfer(0, _owner, newCardId);\r\n    }\r\n\r\n    // Bulk add to ownerToCardCount.\r\n    ownerToCardCount[_owner] = ownerToCardCount[_owner] + mintCount;\r\n  }\r\n}\r\n\r\ncontract CardOwnership is CardMint {\r\n\r\n  /* FUNCTIONS */\r\n  /** PRIVATE FUNCTIONS **/\r\n  function _approve(address _owner, address _approved, uint256 _tokenId) internal {\r\n    cardIdToApproved[_tokenId] = _approved;\r\n    emit Approval(_owner, _approved, _tokenId);\r\n  }\r\n\r\n  function _clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (cardIdToApproved[_tokenId] != address(0)) {\r\n      cardIdToApproved[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  function _removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownerToCardCount[_from] = ownerToCardCount[_from] - 1;\r\n    cardIdToOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /** PUBLIC FUNCTIONS **/\r\n  function approve(address _to, uint256 _tokenId) external {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _approve(owner, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    _clearApproval(_from, _tokenId);\r\n    _removeTokenFrom(_from, _tokenId);\r\n    _addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) public {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  ) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == 0x150b7a02);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  ) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _operator operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) public {\r\n    require(_operator != msg.sender);\r\n    require(_operator != address(0));\r\n    operatorToApprovals[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return cardIdToApproved[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) public view returns (bool) {\r\n    return operatorToApprovals[_owner][_operator];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = cardIdToOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = cardIdToOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n}\r\n\r\ncontract CardAuction is CardOwnership {\r\n\r\n  ClockAuctionBase public saleAuction;\r\n\r\n  function setSaleAuction(address _address) external onlyOwner {\r\n    ClockAuctionBase candidateContract = ClockAuctionBase(_address);\r\n    require(candidateContract.isSaleAuction());\r\n    saleAuction = candidateContract;\r\n  }\r\n\r\n  function createSaleAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration\r\n  ) external {\r\n    require(saleAuction != address(0));\r\n    require(msg.sender == cardIdToOwner[_tokenId]);\r\n\r\n    _approve(msg.sender, saleAuction, _tokenId);\r\n    saleAuction.createAuction(\r\n        _tokenId,\r\n        _startingPrice,\r\n        _endingPrice,\r\n        _duration,\r\n        msg.sender\r\n    );\r\n  }\r\n}\r\n\r\ncontract CardTreasury is CardAuction {\r\n\r\n  /* FUNCTIONS */\r\n  /** PUBLIC FUNCTIONS **/\r\n  function getTemplate(uint256 _templateId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 generation,\r\n      uint256 category,\r\n      uint256 variation,\r\n      string name\r\n    )\r\n  {\r\n    require(_templateId < templates.length);\r\n\r\n    Template storage template = templates[_templateId];\r\n\r\n    generation = template.generation;\r\n    category = template.category;\r\n    variation = template.variation;\r\n    name = template.name;\r\n  }\r\n\r\n  function getCard(uint256 _cardId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 generation,\r\n      uint256 category,\r\n      uint256 variation,\r\n      string name\r\n    )\r\n  {\r\n    require(_cardId < cards.length);\r\n\r\n    uint256 templateId = cards[_cardId];\r\n    Template storage template = templates[templateId];\r\n\r\n    generation = template.generation;\r\n    category = template.category;\r\n    variation = template.variation;\r\n    name = template.name;\r\n  }\r\n\r\n  function templateIdOf(uint256 _cardId) external view returns (uint256) {\r\n    require(_cardId < cards.length);\r\n    return cards[_cardId];\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownerToCardCount[_owner];\r\n  }\r\n\r\n  function templateSupply() external view returns (uint256) {\r\n    return templates.length;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return cards.length;\r\n  }\r\n\r\n  function mintLimitByTemplate(uint256 _templateId) external view returns(uint256) {\r\n    require(_templateId < templates.length);\r\n    return templateIdToMintLimit[_templateId];\r\n  }\r\n\r\n  function mintCountByTemplate(uint256 _templateId) external view returns(uint256) {\r\n    require(_templateId < templates.length);\r\n    return templateIdToMintCount[_templateId];\r\n  }\r\n\r\n  function name() external pure returns (string) {\r\n    return \"Battlebound\";\r\n  }\r\n\r\n  function symbol() external pure returns (string) {\r\n    return \"BB\";\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          result[resultIndex] = cardId;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function templatesOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          uint256 templateId = cards[cardId];\r\n          result[resultIndex] = templateId;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function variationsOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n\r\n      for (uint256 cardId = 0; cardId < cards.length; ++cardId) {\r\n        if (cardIdToOwner[cardId] == _owner) {\r\n          uint256 templateId = cards[cardId];\r\n          Template storage template = templates[templateId];\r\n          result[resultIndex] = template.variation;\r\n          ++resultIndex;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"variationsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"templatesOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templateSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"getTemplate\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"},{\"name\":\"variation\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"mintCountByTemplate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintLimit\",\"type\":\"uint256\"},{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_variation\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mintTemplate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"},{\"name\":\"variation\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_templateIds\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"mintLimitByTemplate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"templateIdOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_templateId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"TemplateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CardTreasury","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://154b781e2e507a368e9761613aed262948c317618cae2a09c6351f5d1990a1f5"}]}