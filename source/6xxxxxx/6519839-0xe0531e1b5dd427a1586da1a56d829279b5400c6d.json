{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Mathematical functions to check for overflows\r\n */\r\ncontract SafeMath {\r\n\tfunction safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a && c >= b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract CURESToken is SafeMath {\r\n\t// Public variables of the token\r\n\tstring public name = \"CURESToken\";\t\t\t\t\t\t\t\t\t// Token name\r\n\tstring public symbol = \"CRS\";\t\t\t\t\t\t\t\t\t\t// Token symbol\r\n\tuint8 public decimals = 18;\t\t\t\t\t\t\t\t\t\t\t// Token amount of decimals\r\n\tuint256 public totalSupply = 500000000 * 10 ** uint256(decimals);\t// Token supply - 500 Million\r\n\taddress public CURES = this;\t\t\t\t\t\t\t\t\t\t// Token address\r\n\r\n\t// Creates array with balances\r\n\tmapping (address => uint256) public balances;\r\n\tmapping (address => mapping (address => uint256)) public allowances;\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * @dev Constructor function - Deploy the contract\r\n\t */\r\n\tconstructor() public {\r\n\t\t// Give the creator all initial tokens\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @param _owner The address from which the balance will be retrieved\r\n\t * @return The balance\r\n\t */\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows `_spender` to spend no more than `_value` tokens in msg.sender behalf\r\n\t * @param _owner The address of the account owning tokens\r\n\t * @param _spender The address of the account able to transfer the tokens\r\n\t * @return Amount of remaining tokens allowed to spent\r\n\t */\t\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowances[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice send `_value` token to `_to` from `msg.sender`\r\n\t * @param _to The address of the recipient\r\n\t * @param _value The amount of token to be transferred\r\n\t * @return Whether the transfer was successful or not\r\n\t */\t\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t// Prevent transfer to 0x0 (empty) address, use burn() instead\r\n\t\trequire(_to != 0x0);\r\n\r\n\t\t// Prevent empty transactions\r\n\t\trequire(_value > 0);\r\n\r\n\t\t// Check if sender has enough\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\r\n\t\t// Subtract the amount from the sender\r\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n\r\n\t\t// Add the same amount to the recipient\r\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\r\n\r\n\t\t// Generate the public transfer event and return success\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value The amount of token to be transferred\r\n\t * @return Whether the transfer was successful or not\r\n\t */\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\t// Prevent transfer to 0x0 (empty) address\r\n\t\trequire(_to != 0x0);\r\n\r\n\t\t// Prevent empty transactions\r\n\t\trequire(_value > 0);\r\n\r\n\t\t// Check if sender is allowed to spend the amount\r\n\t\trequire(allowances[_from][msg.sender] >= _value);\r\n\r\n\t\t// Check if token owner has enough\r\n\t\trequire(balances[_from] >= _value);\r\n\r\n\t\t// Subtract the amount from the sender\r\n\t\tallowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\r\n\r\n\t\t// Subtract the amount from the token owner\r\n\t\tbalances[_from] = safeSub(balances[_from], _value);\r\n\r\n\t\t// Add the same amount to the recipient\r\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\r\n\r\n\t\t// Generate the public transfer event and return success\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n\t * @param _spender The address of the account able to transfer the tokens\r\n\t * @param _value The amount of tokens to be approved for transfer\r\n\t * @return Whether the approval was successful or not\r\n\t */\t\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\t// The amount has to be bigger or equal to 0\r\n\t\trequire(_value >= 0);\r\n\r\n\t\tallowances[msg.sender][_spender] = _value;\r\n\r\n\t\t// Generate the public approval event and return success\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Remove `_value` tokens from the system irreversibly\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\t// Check if value is less than 0\r\n\t\trequire(_value > 0);\r\n\r\n\t\t// Check if the owner has enough tokens\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\r\n\t\t// Subtract the value from the owner\r\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n\r\n\t\t// Subtract the value from the Total Balance\r\n\t\ttotalSupply = safeSub(totalSupply, _value);\r\n\r\n\t\t// Generate the public burn event and return success\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Public events on the blockchain to notify clients\r\n\tevent Transfer(address indexed _owner, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Burn(address indexed _owner, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURES\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CURESToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e1c9a736d4bbfe873735f489d430c01d2003e7ae84a79cf1a35ee984869b7931"}]}