{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/**\r\n * @author EtherDrop\r\n * repository: https://github.com/etherdrop\r\n */\r\ncontract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n\taddress public owner;\r\n\r\n    constructor() public { owner = msg.sender; }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    event Pause();\r\n\t\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract EtherDrop is Pausable {\r\n\r\n    /*\r\n     * subscription ticket price\r\n     */\r\n    uint priceWei;\r\n\r\n    /*\r\n     * subscription queue size: power of 10\r\n     */\r\n\tuint qMax;\r\n    \r\n\t/*\r\n     * Queue Order - Log10 qMax\r\n     * e.g. random [0 to 999] is of order 3 => rand = 100*x + 10*y + z\r\n     */\r\n\t uint dMax;\r\n\r\n\t/*\r\n     * log a new subscription\r\n     */\r\n    event NewSubscriber(address indexed addr, uint indexed round, uint place);\r\n    \r\n\t/*\r\n     * log a new round - drop out\r\n     */\r\n\tevent NewDropOut(address indexed addr, uint indexed round, uint place, uint price);\r\n\t\r\n\t/*\r\n     * round lock - future block hash lock\r\n     */\r\n\tuint _lock;\r\n\t\r\n\t/*\r\n     * last round block\r\n     */\r\n\tuint _block;\r\n    \r\n\t/*\r\n     * active round\r\n     */\r\n\tuint _round; \r\n\t\r\n    /*\r\n     * team support\r\n     */\r\n    uint _collectibles;\r\n\t\r\n\t/*\r\n     * active subscription queue\r\n     */\r\n\taddress[] _queue;\r\n\t\r\n    /*\r\n     * last user subscriptions\r\n     */\r\n\tmapping(address => uint) _userRound;\r\n\t\r\n\t/*\r\n\t * starting by round one\r\n\t * set round block\r\n\t */\r\n\tconstructor(uint order, uint price) public {\r\n\t\t\r\n\t\t/* \r\n\t\t * queue order and price limits \r\n\t\t */\r\n\t\trequire(0 < order && order < 4 && price >= 1e16 && price <= 1e18);\r\n\t\t\r\n\t\t/*\r\n\t\t * queue size\r\n\t\t */\r\n\t\tdMax = order;\r\n\t\tqMax = 10**order;\r\n\r\n        /*\r\n\t     * subscription price\r\n\t     */\r\n\t    priceWei = price;\r\n\t\t\r\n\t\t/*\r\n\t\t * initial round & block start\r\n\t\t */\r\n\t    _round = 1;\r\n\t    _block = block.number;\r\n\t}\r\n\t\r\n\t/*\r\n\t * returns current drop stats: [ round, position, max, price, block, lock]\r\n\t */\r\n    function stat() public view returns (uint round, uint position, uint max, \r\n        uint price, uint blok, uint lock) {\r\n        return ( _round - (_queue.length == qMax ? 1 : 0), _queue.length, qMax, \r\n            priceWei, _block, _lock);\r\n    }\r\n\t\r\n\t/*\r\n\t * returns user's stats: [last_subscription_round, current_drop_round]\r\n\t */\r\n\tfunction userRound(address user) public view returns (uint lastRound, uint currentRound) {\r\n\t\treturn (_userRound[user], _round - (_queue.length == qMax ? 1 : 0));\r\n\t}\r\n\r\n\t/*\r\n\t * fallback subscription\r\n\t */\r\n    function() public payable whenNotPaused {\r\n\r\n\t\t/*\r\n\t\t * contracts are not allowed to participate\r\n\t\t */\r\n        require(tx.origin == msg.sender && msg.value >= priceWei);\r\n\t\r\n\t\t/*\r\n\t\t * unlock new round condition\r\n\t\t */\r\n\t\tif (_lock > 0 && block.number >= _lock) {\t\r\n\t\t\t/*\r\n\t\t\t * random winner ticket position\r\n\t\t\t * block hash number derivation\r\n\t\t\t */\r\n\t\t\tuint _r = dMax;\r\n            uint _winpos = 0;\r\n\t\t\tbytes32 _a = blockhash(_lock);\r\n\t\t\tfor (uint i = 31; i >= 1; i--) {\r\n\t\t\t\tif (uint8(_a[i]) >= 48 && uint8(_a[i]) <= 57) {\r\n\t\t\t\t\t_winpos = 10 * _winpos + (uint8(_a[i]) - 48);\r\n\t\t\t\t\tif (--_r == 0) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n            \r\n\t\t\t/*\r\n\t\t\t * rewards and collection\r\n\t\t\t */\r\n\t\t\tuint _reward = (qMax * priceWei * 90) / 100;\r\n            _collectibles += address(this).balance - _reward;\r\n\t\t\t_queue[_winpos].transfer(_reward);\r\n            \r\n\t\t\t/*\r\n\t\t\t * log ether drop event\r\n\t\t\t */\r\n\t\t\temit NewDropOut(_queue[_winpos], _round - 1, _winpos + 1, _reward);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * update the block number\r\n\t\t\t */\r\n            _block = block.number;\r\n            \r\n            /*\r\n\t\t\t * reset lock\r\n\t\t\t */\r\n            _lock = 0;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * queue reset\r\n\t\t\t */\r\n\t\t\tdelete _queue;\r\n        }\r\n\t\t/*\r\n\t\t * prevent round Txn(s) in one block overflow\r\n\t\t */\r\n\t\telse if (block.number + 1 == _lock) {\r\n\t\t\trevert();\r\n\t\t}\r\n        \r\n\t\t/*\r\n\t\t * only one address per round\r\n\t\t */\r\n\t\trequire(_userRound[msg.sender] != _round);\r\n\t\t\r\n\t\t/*\r\n\t\t * set address subscription flag\r\n\t\t */\r\n\t\t_userRound[msg.sender] = _round;\r\n\t\t\r\n\t\t/*\r\n\t\t * save subscription\r\n\t\t */\r\n        _queue.push(msg.sender);\r\n\r\n\t\t/*\r\n\t\t * log ticket subscription event\r\n\t\t */\r\n        emit NewSubscriber(msg.sender, _round, _queue.length);\r\n        \r\n\t\t/*\r\n\t\t * new round handler\r\n\t\t */\r\n        if (_queue.length == qMax) {\r\n            _round++;\r\n            _lock = block.number + 1;\r\n        }\r\n    }\r\n\r\n    /*\r\n\t * team R&D support\r\n\t */\r\n    function support() public onlyOwner {\r\n        owner.transfer(_collectibles);\r\n\t\t_collectibles = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stat\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"blok\",\"type\":\"uint256\"},{\"name\":\"lock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"support\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRound\",\"outputs\":[{\"name\":\"lastRound\",\"type\":\"uint256\"},{\"name\":\"currentRound\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"order\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NewSubscriber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewDropOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherDrop","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000018de76816d80000","Library":"","SwarmSource":"bzzr://f485745c6079e37447f182fbc20d8f74be79f00f3d6f6a4111104dfe289242c7"}]}