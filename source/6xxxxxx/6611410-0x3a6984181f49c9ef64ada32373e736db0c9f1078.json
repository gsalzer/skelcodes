{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n/// @title Auctionify, A platform to auction stuff, using ethereum\r\n/// @author Auctionify.xyz\r\n/// @notice This is the stand alone version of the auction\r\n/// // @dev All function calls are currently implement without side effects\r\ncontract Auctionify {\r\n    // Parameters of the auction.\r\n    // Time is absolute unix timestamps\r\n\r\n    address public beneficiary;\r\n    uint public auctionEnd;\r\n    string public auctionTitle;\r\n    string public auctionDescription;\r\n    uint public minimumBid;\r\n\r\n    // Escrow\r\n    address public escrowModerator;\r\n    //bool public escrowEnabled;\r\n\r\n    // Current state of the auction.\r\n    address public highestBidder;\r\n\r\n    // List of all the bids\r\n    mapping(address => uint) public bids;\r\n\r\n    // State of the Auction\r\n    enum AuctionStates { Started, Ongoing, Ended }\r\n    AuctionStates public auctionState;\r\n\r\n\r\n    //modifiers\r\n    modifier auctionNotEnded()\r\n    {\r\n        // Revert the call if the bidding\r\n        // period is over.\r\n        require(\r\n            now < auctionEnd, // do not front-run me miners\r\n            \"Auction already ended.\"\r\n        );\r\n        require(\r\n          auctionState != AuctionStates.Ended,\r\n           \"Auction already ended.\"\r\n          );\r\n        _;\r\n    }\r\n\r\n    //modifiers\r\n    modifier isMinimumBid()\r\n    {\r\n      // If the bid is higher than minimumBid\r\n      require(\r\n          msg.value >= minimumBid,\r\n          \"The value is smaller than minimum bid.\"\r\n      );\r\n      _;\r\n    }\r\n\r\n    modifier isHighestBid()\r\n    {\r\n      // If the bid is not higher than higestBid,\r\n      // send the money back.\r\n      require(\r\n          msg.value > bids[highestBidder],\r\n          \"There already is a higher bid.\"\r\n      );\r\n      _;\r\n    }\r\n\r\n    modifier onlyHighestBidderOrEscrow()\r\n    {\r\n      // only highestBidder or the moderator can call.\r\n      // Also callable if no one has bidded\r\n      if ((msg.sender == highestBidder) || (msg.sender == escrowModerator) || (highestBidder == address(0))) {\r\n        _;\r\n      }\r\n      else{\r\n        revert();\r\n      }\r\n    }\r\n\r\n\r\n    // Events that will be fired on changes.\r\n    event HighestBidIncreased(address bidder, uint amount);\r\n    event AuctionEnded(address winner, uint amount);\r\n    event CheaterBidder(address cheater, uint amount);\r\n\r\n    constructor(\r\n        string _auctionTitle,\r\n        uint _auctionEnd,\r\n        address _beneficiary,\r\n        string _auctionDesc,\r\n        uint _minimumBid,\r\n        bool _escrowEnabled,\r\n        bool _listed\r\n    ) public {\r\n        auctionTitle = _auctionTitle;\r\n        beneficiary = _beneficiary;\r\n        auctionEnd = _auctionEnd;\r\n        auctionDescription = _auctionDesc;\r\n        auctionState = AuctionStates.Started;\r\n        minimumBid = _minimumBid;\r\n        if (_escrowEnabled) {\r\n          // TODO: get moderatorID, (delegate moderator list to a ens resolver)\r\n          escrowModerator = address(0x32cEfb2dC869BBfe636f7547CDa43f561Bf88d5A); //TODO: ENS resolver for auctionify.eth\r\n        }\r\n        if (_listed) {\r\n          // TODO: List in the registrar\r\n        }\r\n    }\r\n\r\n    /// @author Auctionify.xyz\r\n   /// @notice Bid on the auction with the amount of `msg.value`\r\n   /// The lesser value will be refunded.\r\n   /// updates highestBidder\r\n   /// @dev should satisfy auctionNotEnded(), isMinimumBid(), isHighestBid()\r\n    function bid() public payable auctionNotEnded isMinimumBid isHighestBid {\r\n        // No arguments are necessary, all\r\n        // information is already part of\r\n        // the transaction.\r\n        if (highestBidder != address(0)) {\r\n            //refund the last highest bid\r\n            uint lastBid = bids[highestBidder];\r\n            bids[highestBidder] = 0;\r\n            if(!highestBidder.send(lastBid)) {\r\n                // if failed to send, the bid is kept in the contract\r\n                emit CheaterBidder(highestBidder, lastBid);\r\n            }\r\n        }\r\n\r\n        //set the new highestBidder\r\n        highestBidder = msg.sender;\r\n        bids[msg.sender] = msg.value;\r\n\r\n        //change state and trigger event\r\n        auctionState = AuctionStates.Ongoing;\r\n        emit HighestBidIncreased(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @author auctionify.xyz\r\n   /// @notice Getter function for highestBid `bids[highestBidder]`\r\n   /// @dev View only function, free\r\n   /// @return the highest bid value\r\n    function highestBid() public view returns(uint){\r\n      return (bids[highestBidder]);\r\n    }\r\n\r\n    /// End the auction and send the highest bid\r\n    /// to the beneficiary.\r\n    /// @author auctionify.xyz\r\n   /// @notice Ends the auction and sends the `bids[highestBidder]` to `beneficiary`\r\n   /// @dev onlyHighestBidderOrEscrow, after `auctionEnd`, only if `auctionState != AuctionStates.Ended`\r\n    function endAuction() public onlyHighestBidderOrEscrow {\r\n\r\n        // 1. Conditions\r\n        require(now >= auctionEnd, \"Auction not yet ended.\");\r\n        require(auctionState != AuctionStates.Ended, \"Auction has already ended.\");\r\n\r\n        // 2. Effects\r\n        auctionState = AuctionStates.Ended;\r\n        emit AuctionEnded(highestBidder, bids[highestBidder]);\r\n\r\n        // 3. Interaction. send the money to the beneficiary\r\n        if(!beneficiary.send(bids[highestBidder])) {\r\n            // if failed to send, the final bid is kept in the contract\r\n            // the funds can be released using cleanUpAfterYourself()\r\n        }\r\n    }\r\n\r\n    /// @author auctionify.xyz\r\n   /// @notice selfdestructs and sends the balance to `escrowModerator` or `beneficiary`\r\n   /// @dev only if `auctionState == AuctionStates.Ended`\r\n  function cleanUpAfterYourself() public {\r\n    require(auctionState == AuctionStates.Ended, \"Auction is not ended.\");\r\n      if (escrowModerator != address(0)) {\r\n        selfdestruct(escrowModerator);\r\n      } else {\r\n        selfdestruct(beneficiary); //save blockchain space, save lives\r\n      }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAfterYourself\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auctionTitle\",\"type\":\"string\"},{\"name\":\"_auctionEnd\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_auctionDesc\",\"type\":\"string\"},{\"name\":\"_minimumBid\",\"type\":\"uint256\"},{\"name\":\"_escrowEnabled\",\"type\":\"bool\"},{\"name\":\"_listed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cheater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CheaterBidder\",\"type\":\"event\"}]","ContractName":"Auctionify","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000005bdb85700000000000000000000000005b655eda7d101f98934392cc3610bcb25b6337890000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b766974616c696b2e78797a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c7496620796f752061726520617420446576436f6e3420507269736d20726f6f6d2c205b454e535d2868747470733a2f2f6775696465626f6f6b2e636f6d2f67756964652f3131373233332f6576656e742f32313935363031312f292063726577206d656e74696f6e656420457468657265756d20737570706f7274206f66202e78797a20646f6d61696e732e200a48657265206973207468652061756374696f6e20666f722060566974616c696b2e78797a60207374617274696e6720617420302e3031204554482e0a0a596f752063616e20636865636b207468652076616c6964697479206f6620746869732061756374696f6e20627920636865636b696e67205b766974616c696b2e78797a5d28687474703a2f2f766974616c696b2e78797a292c2069742073686f756c6420726564697265637420796f7520746f20746869732061756374696f6e2e0a0a2a446973636c61696d65722a3a20546869732061756374696f6e20697320646f6e652062792041756374696f6e6966792e78797a207465616d20746f2070726f6d6f746520616e6420616c736f20746573742074686520706c6174666f726d2020696e207265616c2d776f726c64207363656e6172696f2e2000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://930a565c6108b2dca9089ebd41e6284f276f98060d51fc6216d044a5fa739d52"}]}