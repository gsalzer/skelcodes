{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *  as the code is not actually created until after the constructor finishes.\r\n     * @param addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        assembly {size := extcodesize(addr)}\r\n        // solium-disable-line security/no-inline-assembly\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n\r\n    function approve(address _to, uint256 _tokenId) external;\r\n\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract AccessControl is Ownable {\r\n\r\n    address private MainAdmin;\r\n    address private TechnicalAdmin;\r\n    address private FinancialAdmin;\r\n    address private MarketingAdmin;\r\n\r\n    constructor() public {\r\n        MainAdmin = owner;\r\n    }\r\n\r\n    modifier onlyMainAdmin() {\r\n        require(msg.sender == MainAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinancialAdmin() {\r\n        require(msg.sender == FinancialAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMarketingAdmin() {\r\n        require(msg.sender == MarketingAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTechnicalAdmin() {\r\n        require(msg.sender == TechnicalAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins() {\r\n        require(msg.sender == TechnicalAdmin || msg.sender == MarketingAdmin\r\n        || msg.sender == FinancialAdmin || msg.sender == MainAdmin);\r\n        _;\r\n    }\r\n\r\n    function setMainAdmin(address _newMainAdmin) external onlyOwner {\r\n        require(_newMainAdmin != address(0));\r\n        MainAdmin = _newMainAdmin;\r\n    }\r\n\r\n    function setFinancialAdmin(address _newFinancialAdmin) external onlyMainAdmin {\r\n        require(_newFinancialAdmin != address(0));\r\n        FinancialAdmin = _newFinancialAdmin;\r\n    }\r\n\r\n    function setMarketingAdmin(address _newMarketingAdmin) external onlyMainAdmin {\r\n        require(_newMarketingAdmin != address(0));\r\n        MarketingAdmin = _newMarketingAdmin;\r\n    }\r\n\r\n\r\n    function setTechnicalAdmin(address _newTechnicalAdmin) external onlyMainAdmin {\r\n        require(_newTechnicalAdmin != address(0));\r\n        TechnicalAdmin = _newTechnicalAdmin;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Pausable is AccessControl {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused;\r\n\r\n\r\n    constructor() public {\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyAdmins whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyAdmins whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract PullPayment is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    mapping(address => uint256) public payments;\r\n    uint256 public totalPayments;\r\n\r\n    /**\r\n    * @dev Withdraw accumulated balance, called by payee.\r\n    */\r\n    function withdrawPayments() whenNotPaused public {\r\n        address payee = msg.sender;\r\n        uint256 payment = payments[payee];\r\n\r\n        require(payment != 0);\r\n        require(address(this).balance >= payment);\r\n\r\n        totalPayments = totalPayments.sub(payment);\r\n        payments[payee] = 0;\r\n\r\n        payee.transfer(payment);\r\n    }\r\n\r\n    /**\r\n    * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n    * @param dest The destination address of the funds.\r\n    * @param amount The amount to transfer.\r\n    */\r\n    function asyncSend(address dest, uint256 amount) whenNotPaused internal {\r\n        payments[dest] = payments[dest].add(amount);\r\n        totalPayments = totalPayments.add(amount);\r\n    }\r\n}\r\n\r\ncontract FootballPlayerBase is PullPayment, ERC721 {\r\n\r\n\r\n    struct FootballPlayer {\r\n        bytes32 name;\r\n        uint8 position;\r\n        uint8 star;\r\n        uint256 level;\r\n        uint256 dna;\r\n    }\r\n\r\n    uint32[14] public maxStaminaForLevel = [\r\n    uint32(50 minutes),\r\n    uint32(80 minutes),\r\n    uint32(110 minutes),\r\n    uint32(130 minutes),\r\n    uint32(150 minutes),\r\n    uint32(160 minutes),\r\n    uint32(170 minutes),\r\n    uint32(185 minutes),\r\n    uint32(190 minutes),\r\n    uint32(210 minutes),\r\n    uint32(230 minutes),\r\n    uint32(235 minutes),\r\n    uint32(245 minutes),\r\n    uint32(250 minutes)\r\n    ];\r\n\r\n    FootballPlayer[] players;\r\n\r\n    mapping(uint256 => address) playerIndexToOwner;\r\n\r\n    mapping(address => uint256) addressToPlayerCount;\r\n\r\n    mapping(uint256 => address) public playerIndexToApproved;\r\n\r\n    mapping(uint256 => bool) dnaExists;\r\n\r\n    mapping(uint256 => bool) tokenIsFreezed;\r\n\r\n    function GetPlayer(uint256 _playerId) external view returns (bytes32, uint8, uint8, uint256, uint256) {\r\n        require(_playerId < players.length);\r\n        require(_playerId > 0);\r\n        FootballPlayer memory _player = players[_playerId];\r\n        return (_player.name, _player.position, _player.star, _player.level, _player.dna);\r\n    }\r\n\r\n    function ToggleFreezeToken(uint256 _tokenId) public returns (bool){\r\n        require(_tokenId < players.length);\r\n        require(_tokenId > 0);\r\n\r\n        tokenIsFreezed[_tokenId] = !tokenIsFreezed[_tokenId];\r\n\r\n        return tokenIsFreezed[_tokenId];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0), \"to address is invalid\");\r\n        require(tokenIsFreezed[_tokenId] == false, \"token is freezed\");\r\n\r\n        addressToPlayerCount[_to]++;\r\n\r\n        playerIndexToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            addressToPlayerCount[_from]--;\r\n            delete playerIndexToApproved[_tokenId];\r\n        }\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function CreateSpecialPlayer(bytes32 _name, uint8 _position, uint8 _star, uint256 _dna, uint256 _level,\r\n        address _owner) external whenNotPaused onlyMarketingAdmin returns (uint256)\r\n    {\r\n        require(dnaExists[_dna] == false, \"DNA exists\");\r\n\r\n        FootballPlayer memory _player = FootballPlayer(\r\n            _name,\r\n            _position,\r\n            _star,\r\n            _level,\r\n            _dna\r\n        );\r\n\r\n        dnaExists[_dna] = true;\r\n\r\n        uint256 newPlayerId = players.push(_player) - 1;\r\n\r\n        _transfer(0, _owner, newPlayerId);\r\n\r\n        return newPlayerId;\r\n\r\n    }\r\n\r\n    function CreateDummyPlayer(bytes32 _name, uint8 _position, uint256 _dna,\r\n        address _owner) external whenNotPaused onlyAdmins returns (uint256)\r\n    {\r\n        require(dnaExists[_dna] == false, \"DNA exists!\");\r\n\r\n        FootballPlayer memory _player = FootballPlayer(\r\n            _name,\r\n            _position,\r\n            uint8(1),\r\n            uint256(1),\r\n            _dna\r\n        );\r\n\r\n        dnaExists[_dna] = true;\r\n\r\n        uint256 newPlayerId = players.push(_player) - 1;\r\n\r\n        _transfer(0, _owner, newPlayerId);\r\n\r\n        return newPlayerId;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC721Metadata {\r\n\r\n    function getMetadata(uint256 _tokenId, string) public pure returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello Football! :D\";\r\n            count = 18;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FootballPlayerOwnership is FootballPlayerBase {\r\n\r\n    string public constant name = \"CryptoFantasyFootball\";\r\n    string public constant symbol = \"CFF\"; // Crypto Fantasy Football\r\n    uint256 public version;\r\n\r\n    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n\r\n    constructor(uint256 _currentVersion) public {\r\n        version = _currentVersion;\r\n    }\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    function setMetadataAddress(address _contractAddress) public onlyMainAdmin {\r\n        require(_contractAddress != address(0));\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n    }\r\n\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return playerIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return playerIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        playerIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return addressToPlayerCount[_owner];\r\n    }\r\n\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any players \r\n        require(_to != address(this), \"you can not transfer player to this contract\");\r\n\r\n        // You can only send your own player.\r\n        require(_owns(msg.sender, _tokenId), \"You do not own this player\");\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n    function approve(address _to, uint256 _tokenId) external whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    ///  Transfer a player owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any players.\r\n        require(_to != address(this) , \"You can not send players to this contract\");\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId) , \"You don't have permission to transfer this player\");\r\n        require(_owns(_from, _tokenId) , \"from address doesn't have this player\");\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return players.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = playerIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalPlayers = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all players have IDs starting at 1 and increasing\r\n            // sequentially up to the total players count.\r\n            uint256 playerId;\r\n\r\n            for (playerId = 1; playerId <= totalPlayers; playerId++) {\r\n                if (playerIndexToOwner[playerId] == _owner) {\r\n                    result[resultIndex] = playerId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTechnicalAdmin\",\"type\":\"address\"}],\"name\":\"setTechnicalAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ToggleFreezeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_position\",\"type\":\"uint8\"},{\"name\":\"_dna\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CreateDummyPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"}],\"name\":\"GetPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMainAdmin\",\"type\":\"address\"}],\"name\":\"setMainAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinancialAdmin\",\"type\":\"address\"}],\"name\":\"setFinancialAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMarketingAdmin\",\"type\":\"address\"}],\"name\":\"setMarketingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxStaminaForLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_position\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"},{\"name\":\"_dna\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CreateSpecialPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_currentVersion\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FootballPlayerOwnership","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://59edd93686d43ab724c2e2722461a72cf9233f91da39efb7700106486dc96dcb"}]}