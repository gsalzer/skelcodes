{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract UsdPrice {\r\n    function USD(uint _id) public constant returns (uint256);\r\n}\r\n\r\n\r\ncontract ICO is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    UsdPrice public fiat;\r\n    ERC20 public ELYC;\r\n    \r\n    uint256 private tokenPrice;\r\n    uint256 private tokensSold;\r\n    \r\n    constructor() public {\r\n        fiat = UsdPrice(0x8055d0504666e2B6942BeB8D6014c964658Ca591); \r\n        ELYC = ERC20(0xFD96F865707ec6e6C0d6AfCe1f6945162d510351); \r\n        tokenPrice = 8; //$0.08\r\n        tokensSold = 0;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * EVENTS\r\n     * */\r\n    event PurchaseMade(address indexed by, uint256 tokensPurchased, uint256 tokenPricee);\r\n    event WithdrawOfELYC(address recipient, uint256 tokensSent);\r\n    event TokenPriceChanged(uint256 oldPrice, uint256 newPrice);\r\n     \r\n     \r\n\r\n    /**\r\n     * GETTERS\r\n     * */  \r\n     \r\n    /**\r\n     * @return The unit price of the ELYC token in ETH. \r\n     * */\r\n    function getTokenPriceInETH() public view returns(uint256) {\r\n        return fiat.USD(0).mul(tokenPrice);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The unit price of ELYC in USD cents. \r\n     * */\r\n    function getTokenPriceInUsdCents() public view returns(uint256) {\r\n        return tokenPrice;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return The total amount of tokens which have been sold.\r\n     * */\r\n    function getTokensSold() public view returns(uint256) {\r\n        return tokensSold;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return 1 ETH worth of ELYC tokens. \r\n     * */\r\n    function getRate() public view returns(uint256) {\r\n        uint256 e18 = 1e18;\r\n        return e18.div(getTokenPriceInETH());\r\n    }\r\n\r\n\r\n    /**\r\n     * Fallback function invokes the buyTokens() function when ETH is received to \r\n     * enable easy and automatic token distributions to investors.\r\n     * */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows investors to buy tokens. In most cases this function will be invoked \r\n     * internally by the fallback function, so no manual work is required from investors\r\n     * (unless they want to purchase tokens for someone else).\r\n     * @param _investor The address which will be receiving ELYC tokens \r\n     * @return true if the address is on the blacklist, false otherwise\r\n     * */\r\n    function buyTokens(address _investor) public payable returns(bool) {\r\n        require(_investor != address(0) && msg.value > 0);\r\n        ELYC.transfer(_investor, msg.value.mul(getRate()));\r\n        tokensSold = tokensSold.add(msg.value.mul(getRate()));\r\n        owner.transfer(msg.value);\r\n        emit PurchaseMade(_investor, msg.value.mul(getRate()), getTokenPriceInETH());\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * ONLY OWNER FUNCTIONS\r\n     * */\r\n     \r\n    /**\r\n     * Allows the owner to withdraw any ERC20 token which may have been sent to this \r\n     * contract address by mistake. \r\n     * @param _addressOfToken The contract address of the ERC20 token\r\n     * @param _recipient The receiver of the token. \r\n     * */\r\n    function withdrawAnyERC20(address _addressOfToken, address _recipient) public onlyOwner {\r\n        ERC20 token = ERC20(_addressOfToken);\r\n        token.transfer(_recipient, token.balanceOf(address(this)));\r\n    }\r\n    \r\n\r\n    /**\r\n     * Allows the owner to withdraw any unsold ELYC tokens at any time during or \r\n     * after the ICO. Can also be used to process offchain payments such as from \r\n     * BTC, LTC or any other currency and can be used to pay partners and team \r\n     * members. \r\n     * @param _recipient The receiver of the token. \r\n     * @param _value The total amount of tokens to send \r\n     * */\r\n    function withdrawELYC(address _recipient, uint256 _value) public onlyOwner {\r\n        require(_recipient != address(0));\r\n        ELYC.transfer(_recipient, _value);\r\n        emit WithdrawOfELYC(_recipient, _value);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to change the price of the token in USD cents anytime during \r\n     * the ICO. \r\n     * @param _newTokenPrice The price in cents. For example the value 1 would mean \r\n     * $0.01\r\n     * */\r\n    function changeTokenPriceInCent(uint256 _newTokenPrice) public onlyOwner {\r\n        require(_newTokenPrice != tokenPrice && _newTokenPrice > 0);\r\n        emit TokenPriceChanged(tokenPrice, _newTokenPrice);\r\n        tokenPrice = _newTokenPrice;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Allows the owner to kill the ICO contract. This function call is irreversible\r\n     * and cannot be invoked until there are no remaining ELYC tokens stored on the \r\n     * ICO contract address. \r\n     * */\r\n    function terminateICO() public onlyOwner {\r\n        require(ELYC.balanceOf(address(this)) == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addressOfToken\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAnyERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPriceInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPriceInUsdCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPriceInCent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ELYC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawELYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPricee\",\"type\":\"uint256\"}],\"name\":\"PurchaseMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensSent\",\"type\":\"uint256\"}],\"name\":\"WithdrawOfELYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a52e4aa7252689ea665d794018345f00afae7a4edd0bc0565bf624ff5c60bce4"}]}