{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external returns (bool);\r\n    function balanceOf(address tokenOwner) external returns (uint);\r\n}\r\n\r\ncontract CucuSale {\r\n    address public beneficiary;\r\n    uint public amountRaised;\r\n    uint public price;\r\n    uint public dynamicLocktime; // tokens are locked for this number of minutes since purchase\r\n    uint public globalLocktime;\r\n    /*\r\n    * 0 - locktime depends on time of token purchase\r\n    * 1 - same locktime for all investers\r\n    * 2 - no locktimes\r\n    */\r\n    uint public lockType = 0;\r\n    token public tokenReward;\r\n    uint public exchangeRate;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public tokenBalanceOf;\r\n    mapping(address => uint256) public timelocksOf;\r\n\r\n    address[] public founders;\r\n    address public owner;\r\n\r\n    event FundTransfer(address backer, uint amount, uint exchangeRate, uint token, uint time, uint timelock, bool isContribution);\r\n    event IsCharged(bool isCharged);\r\n    event TokensClaimed(address founder, uint tokens);\r\n    event TransferOwnership();\r\n    event ChangeExchangeRate(uint oldExchangeRate, uint newExchangeRate);\r\n    event NewGlobalLocktime(uint timelockUntil);\r\n    event NewDynamicLocktime(uint timelockUntil);\r\n    uint public tokenAvailable = 0;\r\n    bool public charged = false;\r\n    uint lastActionId = 0;\r\n\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(\r\n        address _beneficiary,\r\n        address _addressOfTokenUsedAsReward,\r\n        uint _globalLocktime,\r\n        uint _dynamicLocktime,\r\n        uint _exchangeRate\r\n    ) public {\r\n        beneficiary = _beneficiary;\r\n        dynamicLocktime = _dynamicLocktime;//now + dynamicTimeLockInMinutes * 1 minutes;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        globalLocktime = now + _globalLocktime * 1 minutes;\r\n        exchangeRate = _exchangeRate;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public {\r\n          require(charged);\r\n          require(msg.value >= 10000000000); // min allowed pay since token has only 8 decimals\r\n          uint am = (msg.value* exchangeRate * 100000000)/(1 ether); // 8 decimals for cocon token\r\n          require( tokenAvailable >= am);\r\n          uint amount = msg.value;\r\n          balanceOf[msg.sender] += amount;\r\n          amountRaised += amount;\r\n          tokenBalanceOf[msg.sender] += am;\r\n          tokenAvailable -= am;\r\n\r\n          if(timelocksOf[msg.sender] == 0){\r\n            timelocksOf[msg.sender] = now + dynamicLocktime * 1 minutes;\r\n          }\r\n\r\n          emit FundTransfer(msg.sender, amount, exchangeRate, am, now, timelocksOf[msg.sender], true);\r\n          founders.push(msg.sender);\r\n    }\r\n\r\n    // modifier onlyOwner\r\n    modifier onlyOwner(){\r\n      require(msg.sender == owner || msg.sender == beneficiary);\r\n      _;\r\n    }\r\n\r\n    // function to charge the crowdsale\r\n    function doChargeCrowdsale(uint act) public onlyOwner{\r\n      lastActionId = act;\r\n      tokenAvailable = tokenReward.balanceOf(address(this));\r\n      if(tokenAvailable > 0){\r\n        charged = true;\r\n        emit IsCharged(charged);\r\n      }\r\n    }\r\n\r\n    /*\r\n      Function that allows to claim tokens after timelock has expired\r\n    */\r\n    function claimTokens(address adr) public{\r\n      require(tokenBalanceOf[adr] > 0);\r\n\r\n      if(lockType == 0){ // lock by address\r\n        require(now >= timelocksOf[adr]);\r\n      }else if(lockType == 1){ // global lock\r\n        require(now >= globalLocktime);\r\n      } // else there is no lock\r\n\r\n      if(tokenReward.transfer(adr, tokenBalanceOf[adr])){\r\n        emit TokensClaimed(adr, tokenBalanceOf[adr]);\r\n        tokenBalanceOf[adr] = 0;\r\n        balanceOf[adr] = 0;\r\n      }\r\n    }\r\n\r\n    //  Allows owner to transfer raised amount\r\n    function transferRaisedFunds(uint act) public onlyOwner {\r\n        lastActionId = act;\r\n        if (beneficiary.send(amountRaised)) {\r\n           emit FundTransfer(beneficiary, amountRaised, exchangeRate, 0, now, 0, false);\r\n        }\r\n    }\r\n\r\n    // to transfer ownership of the contract\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n      owner = newOwner;\r\n      emit TransferOwnership();\r\n    }\r\n\r\n    // changing exchangeRate\r\n    function setExchangeRate(uint newExchangeRate) public onlyOwner{\r\n      emit ChangeExchangeRate(exchangeRate, newExchangeRate);\r\n      exchangeRate = newExchangeRate;\r\n    }\r\n\r\n    // set new globalLocktime\r\n    function setGlobalLocktime(uint mins) public onlyOwner{\r\n      globalLocktime = now + mins * 1 minutes;\r\n      emit NewGlobalLocktime(globalLocktime);\r\n    }\r\n\r\n    // set new dynamicLocktime\r\n    function setDynamicLocktime(uint mins) public onlyOwner{\r\n      dynamicLocktime = now + mins * 1 minutes;\r\n      emit NewDynamicLocktime(dynamicLocktime);\r\n    }\r\n\r\n    // setting new locktype\r\n    function setLockType(uint newType) public onlyOwner{\r\n        require(newType == 0 || newType == 1 || newType == 2);\r\n        lockType = newType;\r\n    }\r\n\r\n    // unlock tokens for address makes tokens unlockable even for the future token purchases\r\n    function unlockTokensFor(address adr) public onlyOwner{\r\n      timelocksOf[adr] = 1;\r\n    }\r\n\r\n    // reset lock for address makes tokens lockable for address again\r\n    function resetLockFor(address adr) public onlyOwner{\r\n      timelocksOf[adr] = 0;\r\n    }\r\n\r\n    // get all tokens that were left from token sale\r\n    function getLeftOver(uint act) public onlyOwner{\r\n      lastActionId = act;\r\n      if(tokenReward.transfer(beneficiary, tokenAvailable)){\r\n        emit TokensClaimed(beneficiary, tokenAvailable);\r\n        tokenAvailable = 0;\r\n      }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dynamicLocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mins\",\"type\":\"uint256\"}],\"name\":\"setGlobalLocktime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"act\",\"type\":\"uint256\"}],\"name\":\"getLeftOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"act\",\"type\":\"uint256\"}],\"name\":\"doChargeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"resetLockFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charged\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newType\",\"type\":\"uint256\"}],\"name\":\"setLockType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"act\",\"type\":\"uint256\"}],\"name\":\"transferRaisedFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mins\",\"type\":\"uint256\"}],\"name\":\"setDynamicLocktime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unlockTokensFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelocksOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_globalLocktime\",\"type\":\"uint256\"},{\"name\":\"_dynamicLocktime\",\"type\":\"uint256\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isCharged\",\"type\":\"bool\"}],\"name\":\"IsCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"founder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldExchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"ChangeExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timelockUntil\",\"type\":\"uint256\"}],\"name\":\"NewGlobalLocktime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timelockUntil\",\"type\":\"uint256\"}],\"name\":\"NewDynamicLocktime\",\"type\":\"event\"}]","ContractName":"CucuSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b3cbd7824d75debfcfe1b16db73e80603b3079e000000000000000000000000aa767692c3382b18ab151d74fa16a532ab068edd00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000018a88","Library":"","SwarmSource":"bzzr://9002dc7e1f283e8df52dbea396fe913eaea138a2716a400220019ed05adf4b3f"}]}