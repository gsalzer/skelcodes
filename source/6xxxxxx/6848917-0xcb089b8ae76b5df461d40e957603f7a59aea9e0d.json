{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n    _;\r\n    }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Arroundtoken\r\n * @dev The Arroundtoken contract is ERC20-compatible token processing contract\r\n * with additional  features like multiTransfer and reclaimTokens\r\n *\r\n */\r\ncontract Arroundtoken is ERC20, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    uint64 public constant TDE_FINISH = 1542326400;//!!!!Check before deploy\r\n    // 1542326400  GMT: 16 November 2018 г., 00:00:00\r\n    // 1542326399  GMT: 15 November 2018 г., 23:59:59\r\n\r\n\r\n    //////////////////////\r\n    // State var       ///\r\n    //////////////////////\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    address public accTDE;\r\n    address public accFoundCDF;\r\n    address public accFoundNDF1;\r\n    address public accFoundNDF2;\r\n    address public accFoundNDF3;\r\n    address public accTeam;\r\n    address public accBounty;\r\n  \r\n    // Implementation of frozen funds\r\n    mapping(address => uint64) public frozenAccounts;\r\n\r\n    //////////////\r\n    // EVENTS    //\r\n    ///////////////\r\n    event NewFreeze(address _acc, uint64 _timestamp);\r\n    event BatchDistrib(uint8 cnt, uint256 batchAmount);\r\n    \r\n    /**\r\n     * @param _accTDE - main address for token distribution\r\n     * @param _accFoundCDF  - address for CDF Found tokens (WP)\r\n     * @param _accFoundNDF1 - address for NDF Found tokens (WP)\r\n     * @param _accFoundNDF2 - address for NDF Found tokens (WP)\r\n     * @param _accFoundNDF3 - address for NDF Found tokens (WP)\r\n     * @param _accTeam - address for team tokens, will frozzen by one year\r\n     * @param _accBounty - address for bounty tokens \r\n     * @param _initialSupply - subj\r\n     */  \r\n    constructor (\r\n        address _accTDE, \r\n        address _accFoundCDF,\r\n        address _accFoundNDF1,\r\n        address _accFoundNDF2,\r\n        address _accFoundNDF3,\r\n        address _accTeam,\r\n        address _accBounty, \r\n        uint256 _initialSupply\r\n    )\r\n    public \r\n    {\r\n        require(_accTDE       != address(0));\r\n        require(_accFoundCDF  != address(0));\r\n        require(_accFoundNDF1 != address(0));\r\n        require(_accFoundNDF2 != address(0));\r\n        require(_accFoundNDF3 != address(0));\r\n        require(_accTeam      != address(0));\r\n        require(_accBounty    != address(0));\r\n        require(_initialSupply > 0);\r\n        name           = \"Arround\";\r\n        symbol         = \"ARR\";\r\n        decimals       = 18;\r\n        accTDE         = _accTDE;\r\n        accFoundCDF    = _accFoundCDF;\r\n        accFoundNDF1   = _accFoundNDF1;\r\n        accFoundNDF2   = _accFoundNDF2;\r\n        accFoundNDF3   = _accFoundNDF3;\r\n        \r\n        accTeam        = _accTeam;\r\n        accBounty      = _accBounty;\r\n        _totalSupply   = _initialSupply * (10 ** uint256(decimals));// All ARR tokens in the world\r\n        \r\n       //Initial token distribution\r\n        _balances[_accTDE]       = 1104000000 * (10 ** uint256(decimals)); // TDE,      36.8%=28.6+8.2 \r\n        _balances[_accFoundCDF]  = 1251000000 * (10 ** uint256(decimals)); // CDF,      41.7%\r\n        _balances[_accFoundNDF1] =  150000000 * (10 ** uint256(decimals)); // 0.50*NDF, 10.0%\r\n        _balances[_accFoundNDF2] =  105000000 * (10 ** uint256(decimals)); // 0.35*NDF, 10.0%\r\n        _balances[_accFoundNDF3] =   45000000 * (10 ** uint256(decimals)); // 0.15*NDF, 10.0%\r\n        _balances[_accTeam]      =  300000000 * (10 ** uint256(decimals)); // team,     10.0%\r\n        _balances[_accBounty]    =   45000000 * (10 ** uint256(decimals)); // Bounty,    1.5%\r\n        require(  _totalSupply ==  3000000000 * (10 ** uint256(decimals)), \"Total Supply exceeded!!!\");\r\n        emit Transfer(address(0), _accTDE,       1104000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accFoundCDF,  1251000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accFoundNDF1,  150000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accFoundNDF2,  105000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accFoundNDF3,   45000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accTeam,       300000000 * (10 ** uint256(decimals)));\r\n        emit Transfer(address(0), _accBounty,      45000000 * (10 ** uint256(decimals)));\r\n        //initisl freeze\r\n        frozenAccounts[_accTeam]      = TDE_FINISH + 31536000; //+3600*24*365 sec\r\n        frozenAccounts[_accFoundNDF2] = TDE_FINISH + 31536000; //+3600*24*365 sec\r\n        frozenAccounts[_accFoundNDF3] = TDE_FINISH + 63158400; //+(3600*24*365)*2 +3600*24(leap year 2020)\r\n        emit NewFreeze(_accTeam,        TDE_FINISH + 31536000);\r\n        emit NewFreeze(_accFoundNDF2,   TDE_FINISH + 31536000);\r\n        emit NewFreeze(_accFoundNDF3,   TDE_FINISH + 63158400);\r\n\r\n    }\r\n    \r\n    modifier onlyTokenKeeper() {\r\n        require(\r\n            msg.sender == accTDE || \r\n            msg.sender == accFoundCDF ||\r\n            msg.sender == accFoundNDF1 ||\r\n            msg.sender == accBounty\r\n        );\r\n        _;\r\n    }\r\n\r\n    function() external { } \r\n\r\n    /**\r\n     * @dev Returns standart ERC20 result with frozen accounts check\r\n     */\r\n    function transfer(address _to, uint256 _value) public  returns (bool) {\r\n        require(frozenAccounts[msg.sender] < now);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns standart ERC20 result with frozen accounts check\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\r\n        require(frozenAccounts[_from] < now);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns standart ERC20 result with frozen accounts check\r\n     */\r\n    function approve(address _spender, uint256 _value) public  returns (bool) {\r\n        require(frozenAccounts[msg.sender] < now);\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns standart ERC20 result with frozen accounts check\r\n     */\r\n    function increaseAllowance(address _spender, uint _addedValue) public  returns (bool success) {\r\n        require(frozenAccounts[msg.sender] < now);\r\n        return super.increaseAllowance(_spender, _addedValue);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns standart ERC20 result with frozen accounts check\r\n     */\r\n    function decreaseAllowance(address _spender, uint _subtractedValue) public  returns (bool success) {\r\n        require(frozenAccounts[msg.sender] < now);\r\n        return super.decreaseAllowance(_spender, _subtractedValue);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Batch transfer function. Allow to save up 50% of gas\r\n     */\r\n    function multiTransfer(address[] calldata  _investors, uint256[] calldata   _value )  \r\n        external \r\n        onlyTokenKeeper \r\n        returns (uint256 _batchAmount)\r\n    {\r\n        require(_investors.length <= 255); //audit recommendation\r\n        require(_value.length == _investors.length);\r\n        uint8      cnt = uint8(_investors.length);\r\n        uint256 amount = 0;\r\n        for (uint i=0; i<cnt; i++){\r\n            amount = amount.add(_value[i]);\r\n            require(_investors[i] != address(0));\r\n            _balances[_investors[i]] = _balances[_investors[i]].add(_value[i]);\r\n            emit Transfer(msg.sender, _investors[i], _value[i]);\r\n        }\r\n        require(amount <= _balances[msg.sender]);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        emit BatchDistrib(cnt, amount);\r\n        return amount;\r\n    }\r\n  \r\n    /**\r\n     * @dev Owner can claim any tokens that transfered to this contract address\r\n     */\r\n    function reclaimToken(ERC20 token) external onlyOwner {\r\n        require(address(token) != address(0));\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n    }\r\n}\r\n  //***************************************************************\r\n  // Based on best practice of https://github.com/Open Zeppelin/zeppelin-solidity\r\n  // Adapted and amended by IBERGroup; \r\n  // Code released under the MIT License(see git root).\r\n  ////**************************************************************","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"_batchAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accFoundNDF3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TDE_FINISH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accFoundNDF1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accFoundCDF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accTDE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accFoundNDF2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_accTDE\",\"type\":\"address\"},{\"name\":\"_accFoundCDF\",\"type\":\"address\"},{\"name\":\"_accFoundNDF1\",\"type\":\"address\"},{\"name\":\"_accFoundNDF2\",\"type\":\"address\"},{\"name\":\"_accFoundNDF3\",\"type\":\"address\"},{\"name\":\"_accTeam\",\"type\":\"address\"},{\"name\":\"_accBounty\",\"type\":\"address\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_acc\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"NewFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnt\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"batchAmount\",\"type\":\"uint256\"}],\"name\":\"BatchDistrib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Arroundtoken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d5e098c0cd57628f94ce738ed92538f6bab2f602000000000000000000000000934d72539b7796bb3a9ee7d82815981b4fdb3bc1000000000000000000000000f8f0ca069e3f3207df5f7d4ba5668bcd17688bb1000000000000000000000000a070c62c307f3523ccaf9c5aa3eafdf4c4808c8d0000000000000000000000007b9e47d08685c792da1b9c1826c0c4aed73fa0950000000000000000000000005ecc841315ab512d0aaa390dcbfd2f0df21ca750000000000000000000000000d8db91efaf41be13449b668dff1efada744cb81a00000000000000000000000000000000000000000000000000000000b2d05e00","Library":"","SwarmSource":"bzzr://3fec7aa8321ab04ade0d88642bb9d3bec1d962d2e32f91ffcd76cae60bf949cb"}]}