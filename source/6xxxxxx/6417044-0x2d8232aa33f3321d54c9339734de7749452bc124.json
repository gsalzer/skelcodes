{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/interfaces/IOwned.sol\r\n\r\n/*\r\n    Owned Contract Interface\r\n*/\r\ncontract IOwned {\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n    function transferOwnershipNow(address newContractOwner) public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\n/*\r\n    This is the \"owned\" utility contract used by bancor with one additional function - transferOwnershipNow()\r\n    \r\n    The original unmodified version can be found here:\r\n    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\r\n    \r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n        @dev transfers the contract ownership without needing the new owner to accept ownership\r\n        @param newContractOwner    new contract owner\r\n    */\r\n    function transferOwnershipNow(address newContractOwner) ownerOnly public {\r\n        require(newContractOwner != owner);\r\n        emit OwnerUpdate(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ILogger.sol\r\n\r\n/*\r\n    Logger Contract Interface\r\n*/\r\n\r\ncontract ILogger {\r\n    function addNewLoggerPermission(address addressToPermission) public;\r\n    function emitTaskCreated(uint uuid, uint amount) public;\r\n    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public;\r\n    function emitNewSmartToken(address token) public;\r\n    function emitIssuance(uint256 amount) public;\r\n    function emitDestruction(uint256 amount) public;\r\n    function emitTransfer(address from, address to, uint256 value) public;\r\n    function emitApproval(address owner, address spender, uint256 value) public;\r\n    function emitGenericLog(string messageType, string message) public;\r\n}\r\n\r\n// File: contracts/Logger.sol\r\n\r\n/*\r\n\r\nCentralized logger allows backend to easily watch all events on all communities without needing to watch each community individually\r\n\r\n*/\r\ncontract Logger is Owned, ILogger  {\r\n\r\n    // Community\r\n    event TaskCreated(address msgSender, uint _uuid, uint _amount);\r\n    event ProjectCreated(address msgSender, uint _uuid, uint _amount, address _address);\r\n\r\n    // SmartToken\r\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility\r\n    //  in case we want to trigger the event from a factory\r\n    event NewSmartToken(address msgSender, address _token);\r\n    // triggered when the total supply is increased\r\n    event Issuance(address msgSender, uint256 _amount);\r\n    // triggered when the total supply is decreased\r\n    event Destruction(address msgSender, uint256 _amount);\r\n    // erc20\r\n    event Transfer(address msgSender, address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address msgSender, address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Logger\r\n    event NewCommunityAddress(address msgSender, address _newAddress);\r\n\r\n    event GenericLog(address msgSender, string messageType, string message);\r\n    mapping (address => bool) public permissionedAddresses;\r\n\r\n    modifier hasLoggerPermissions(address _address) {\r\n        require(permissionedAddresses[_address] == true);\r\n        _;\r\n    }\r\n\r\n    function addNewLoggerPermission(address addressToPermission) ownerOnly public {\r\n        permissionedAddresses[addressToPermission] = true;\r\n    }\r\n\r\n    function emitTaskCreated(uint uuid, uint amount) public hasLoggerPermissions(msg.sender) {\r\n        emit TaskCreated(msg.sender, uuid, amount);\r\n    }\r\n\r\n    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public hasLoggerPermissions(msg.sender) {\r\n        emit ProjectCreated(msg.sender, uuid, amount, rewardAddress);\r\n    }\r\n\r\n    function emitNewSmartToken(address token) public hasLoggerPermissions(msg.sender) {\r\n        emit NewSmartToken(msg.sender, token);\r\n    }\r\n\r\n    function emitIssuance(uint256 amount) public hasLoggerPermissions(msg.sender) {\r\n        emit Issuance(msg.sender, amount);\r\n    }\r\n\r\n    function emitDestruction(uint256 amount) public hasLoggerPermissions(msg.sender) {\r\n        emit Destruction(msg.sender, amount);\r\n    }\r\n\r\n    function emitTransfer(address from, address to, uint256 value) public hasLoggerPermissions(msg.sender) {\r\n        emit Transfer(msg.sender, from, to, value);\r\n    }\r\n\r\n    function emitApproval(address owner, address spender, uint256 value) public hasLoggerPermissions(msg.sender) {\r\n        emit Approval(msg.sender, owner, spender, value);\r\n    }\r\n\r\n    function emitGenericLog(string messageType, string message) public hasLoggerPermissions(msg.sender) {\r\n        emit GenericLog(msg.sender, messageType, message);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"messageType\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"emitGenericLog\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToPermission\",\"type\":\"address\"}],\"name\":\"addNewLoggerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDestruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"emitProjectCreated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emitNewSmartToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitTaskCreated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_uuid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_uuid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NewSmartToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"NewCommunityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"GenericLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"Logger","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://473b7445ace7dab9e3866ff70878b0cbf78185c3dfc0f5186d8b8fef83fad737"}]}