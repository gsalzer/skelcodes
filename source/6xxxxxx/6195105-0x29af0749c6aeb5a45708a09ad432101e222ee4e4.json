{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SMILE Token\r\n * @author Alex Papageorgiou - <alex.ppg@protonmail.com>\r\n * @notice The Smile Token token & airdrop contract which conforms to EIP-20 & partially ERC-223\r\n */\r\ncontract SMILE {\r\n\r\n    /**\r\n     * Constant EIP-20 / ERC-223 variables & getters\r\n     */\r\n\r\n    string constant public name = \"Smile Token\";\r\n    string constant public symbol = \"SMILE\";\r\n    uint256 constant public decimals = 18;\r\n    uint256 constant public totalSupply = 100000000 * (10 ** decimals);\r\n\r\n    /**\r\n     * A variable to store the contract creator\r\n     */\r\n\r\n    address public creator;\r\n\r\n    /**\r\n     * A variable to declare whether distribution is on-going\r\n     */\r\n\r\n    bool public distributionFinished = false;\r\n\r\n    /**\r\n     * Classic EIP-20 / ERC-223 mappings and getters\r\n     */\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /**\r\n     *      EIP-20 Events. As the ERC-223 Transfer overlaps with EIP-20,\r\n     *      observers are unable to track both. In order to be compatible,\r\n     *      the ERC-223 Event spec is not integrated.\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Mint(address indexed to, uint value);\r\n\r\n    /**\r\n     *      Ensures that the caller is the owner of the\r\n     *      contract and that the address to withdraw from\r\n     *      is not the contract itself.\r\n     */\r\n\r\n    modifier canWithdraw(address _tokenAddress) {\r\n        assert(msg.sender == creator && _tokenAddress != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *      Ensures that the caller is the owner of the\r\n     *      contract and that the distribution is still\r\n     *      in effect.\r\n     */\r\n\r\n    modifier canDistribute() {\r\n        assert(msg.sender == creator && !distributionFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Contract constructor which assigns total supply to caller & assigns caller as creator\r\n     */\r\n\r\n    constructor() public {\r\n        creator = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * Partial SafeMath library import of safe substraction\r\n     * @param _a Minuend: The number to substract from\r\n     * @param _b Subtrahend: The number that is to be subtracted\r\n     */\r\n\r\n    function safeSub(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        assert((c = _a - _b) <= _a);\r\n    }\r\n\r\n    /**\r\n     * Partial SafeMath library import of safe multiplication\r\n     * @param _a Multiplicand: The number to multiply\r\n     * @param _b Multiplier: The number to multiply by\r\n     */\r\n\r\n    function safeMul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Automatic failure on division by zero\r\n        assert((c = _a * _b) / _a == _b);\r\n    }\r\n\r\n    /**\r\n     * EIP-20 Transfer implementation\r\n     * @param _to The address to send tokens to\r\n     * @param _value The amount of tokens to send\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // Prevent accidental transfers to the default 0x0 address\r\n        assert(_to != 0x0);\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ERC-223 Transfer implementation\r\n     * @param _to The address to send tokens to\r\n     * @param _value The amount of tokens to send\r\n     * @param _data Any accompanying data for contract transfers\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n        // Prevent accidental transfers to the default 0x0 address\r\n        assert(_to != 0x0);\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * EIP-20 Transfer From implementation\r\n     * @param _from The address to transfer tokens from\r\n     * @param _to The address to transfer tokens to\r\n     * @param _value The amount of tokens to transfer\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        allowance[_from][_to] = safeSub(allowance[_from][_to], _value);\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * EIP-20 Approve implementation (Susceptible to Race Condition, mitigation optional)\r\n     * @param _spender The address to delegate spending rights to\r\n     * @param _value The amount of tokens to delegate\r\n     */\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-223 Transfer to Contract implementation\r\n     * @param _to The contract address to send tokens to\r\n     * @param _value The amount of tokens to send\r\n     * @param _data Any accompanying data to relay to the contract\r\n     */\r\n\r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool) {\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n        balanceOf[_to] += _value;\r\n        SMILE interfaceProvider = SMILE(_to);\r\n        interfaceProvider.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-223 Token Fallback interface implementation\r\n     * @param _from The address that initiated the transfer\r\n     * @param _value The amount of tokens transferred\r\n     * @param _data Any accompanying data to relay to the contract\r\n     */\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public {}\r\n\r\n    /**\r\n     * \r\n     *      Partial ERC-223 Transfer to Address implementation.\r\n     *      The bytes parameter is intentioanlly dropped as it\r\n     *      is not utilized.\r\n     *\r\n     * @param _to The address to send tokens to\r\n     * @param _value The amount of tokens to send\r\n     */\r\n\r\n    function transferToAddress(address _to, uint256 _value) private returns (bool) {\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-223 Contract check implementation\r\n     * @param _addr The address to check contract existance in\r\n     */\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        // NE is more gas efficient than GT\r\n        return (length != 0);\r\n    }\r\n\r\n    /**\r\n     * Implementation of a multi-user distribution function\r\n     * @param _addresses The array of addresses to transfer to\r\n     * @param _value The amount of tokens to transfer to each\r\n     */\r\n\r\n    function distributeSMILE(address[] _addresses, uint256 _value) canDistribute external {\r\n         for (uint256 i = 0; i < _addresses.length; i++) {\r\n             balanceOf[_addresses[i]] += _value;\r\n             emit Transfer(msg.sender, _addresses[i], _value);\r\n         }\r\n         // Can be removed in one call instead of each time within the loop\r\n         balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], safeMul(_value, _addresses.length));\r\n    }\r\n\r\n    /**\r\n     * Implementation to retrieve accidentally sent EIP-20 compliant tokens\r\n     * @param _token The contract address of the EIP-20 compliant token\r\n     */\r\n\r\n    function retrieveERC(address _token) external canWithdraw(_token) {\r\n        SMILE interfaceProvider = SMILE(_token);\r\n        // By default, the whole balance of the contract is sent to the caller\r\n        interfaceProvider.transfer(msg.sender, interfaceProvider.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     *      Absence of payable modifier is intentional as\r\n     *      it causes accidental Ether transfers to throw.\r\n     */\r\n\r\n    function() public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeSMILE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveERC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"SMILE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d961b42794b05f7fdb5a8bb64d4752b53113dd6e40af507618fb164ef1780887"}]}