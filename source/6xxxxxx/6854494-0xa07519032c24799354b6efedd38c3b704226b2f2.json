{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract TokenRepository is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Name of the ERC-20 token.\r\n    string public name;\r\n\r\n    // Symbol of the ERC-20 token.\r\n    string public symbol;\r\n\r\n    // Total decimals of the ERC-20 token.\r\n    uint256 public decimals;\r\n\r\n    // Total supply of the ERC-20 token.\r\n    uint256 public totalSupply;\r\n\r\n    // Mapping to hold balances.\r\n    mapping(address => uint256) public balances;\r\n\r\n    // Mapping to hold allowances.\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    /**\r\n    * @dev Sets the name of ERC-20 token.\r\n    * @param _name Name of the token to set.\r\n    */\r\n    function setName(string _name) public onlyOwner {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the symbol of ERC-20 token.\r\n    * @param _symbol Symbol of the token to set.\r\n    */\r\n    function setSymbol(string _symbol) public onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the total decimals of ERC-20 token.\r\n    * @param _decimals Total decimals of the token to set.\r\n    */\r\n    function setDecimals(uint256 _decimals) public onlyOwner {\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the total supply of ERC-20 token.\r\n    * @param _totalSupply Total supply of the token to set.\r\n    */\r\n    function setTotalSupply(uint256 _totalSupply) public onlyOwner {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets balance of the address.\r\n    * @param _owner Address to set the balance of.\r\n    * @param _value Value to set.\r\n    */\r\n    function setBalances(address _owner, uint256 _value) public onlyOwner {\r\n        balances[_owner] = _value;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the value of tokens allowed to be spent.\r\n    * @param _owner Address owning the tokens.\r\n    * @param _spender Address allowed to spend the tokens.\r\n    * @param _value Value of tokens to be allowed to spend.\r\n    */\r\n    function setAllowed(address _owner, address _spender, uint256 _value) public onlyOwner {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    /**\r\n    * @dev Mints new tokens.\r\n    * @param _owner Address to transfer new tokens to.\r\n    * @param _value Amount of tokens to be minted.\r\n    */\r\n    function mintTokens(address _owner, uint256 _value) public onlyOwner {\r\n        require(_value > totalSupply.add(_value), \"\");\r\n        \r\n        totalSupply = totalSupply.add(_value);\r\n        setBalances(_owner, _value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Burns tokens and decreases the total supply.\r\n    * @param _value Amount of tokens to burn.\r\n    */\r\n    function burnTokens(uint256 _value) public onlyOwner {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Increases the balance of the address.\r\n    * @param _owner Address to increase the balance of.\r\n    * @param _value Value to increase.\r\n    */\r\n    function increaseBalance(address _owner, uint256 _value) public onlyOwner {\r\n        balances[_owner] = balances[_owner].add(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Increases the tokens allowed to be spent.\r\n    * @param _owner Address owning the tokens.\r\n    * @param _spender Address to increase the allowance of.\r\n    * @param _value Value to increase.\r\n    */\r\n    function increaseAllowed(address _owner, address _spender, uint256 _value) public onlyOwner {\r\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Decreases the balance of the address.\r\n    * @param _owner Address to decrease the balance of.\r\n    * @param _value Value to decrease.\r\n    */\r\n    function decreaseBalance(address _owner, uint256 _value) public onlyOwner {\r\n        balances[_owner] = balances[_owner].sub(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Decreases the tokens allowed to be spent.\r\n    * @param _owner Address owning the tokens.\r\n    * @param _spender Address to decrease the allowance of.\r\n    * @param _value Value to decrease.\r\n    */\r\n    function decreaseAllowed(address _owner, address _spender, uint256 _value) public onlyOwner {\r\n        allowed[_owner][_spender] = allowed[_owner][_spender].sub(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the balance from one address to another.\r\n    * @param _from Address to transfer the balance from.\r\n    * @param _to Address to transfer the balance to.\r\n    * @param _value Value to transfer.\r\n    */\r\n    function transferBalance(address _from, address _to, uint256 _value) public onlyOwner {\r\n        decreaseBalance(_from, _value);\r\n        increaseBalance(_to, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC223Receiver {\r\n    function tokenFallback(address _sender, address _origin, uint _value, bytes _data) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC223Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint256);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token.\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC223Token is ERC223Interface, Pausable {\r\n\r\n    TokenRepository public tokenRepository;\r\n\r\n    /**\r\n    * @dev Constructor function.\r\n    */\r\n    constructor() public {\r\n        tokenRepository = new TokenRepository();\r\n    }\r\n\r\n    /**\r\n    * @dev Name of the token.\r\n    */\r\n    function name() public view returns (string) {\r\n        return tokenRepository.name();\r\n    }\r\n\r\n    /**\r\n    * @dev Symbol of the token.\r\n    */\r\n    function symbol() public view returns (string) {\r\n        return tokenRepository.symbol();\r\n    }\r\n\r\n    /**\r\n    * @dev Total decimals of tokens.\r\n    */\r\n    function decimals() public view returns (uint256) {\r\n        return tokenRepository.decimals();\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence.\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenRepository.totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return tokenRepository.balances(_owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return tokenRepository.allowed(_owner, _spender);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to execute transfer of token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\r\n        return transfer(_to, _value, new bytes(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Function to execute transfer of token from one address to another.\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 the amount of tokens to be transferred.\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\r\n        return transferFrom(_from, _to, _value, new bytes(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to execute transfer of token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _data Data to be passed.\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) public whenNotPaused returns (bool) {\r\n        //filtering if the target is a contract with bytecode inside it\r\n        if (!_transfer(_to, _value)) revert(); // do a normal token transfer\r\n        if (_isContract(_to)) return _contractFallback(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to execute transfer of token from one address to another.\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 the amount of tokens to be transferred.\r\n    * @param _data Data to be passed.\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public whenNotPaused returns (bool) {\r\n        if (!_transferFrom(_from, _to, _value)) revert(); // do a normal token transfer\r\n        if (_isContract(_to)) return _contractFallback(_from, _to, _value, _data);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        tokenRepository.setAllowed(msg.sender, _spender, _value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * Approve should be called when allowed[_spender] == 0. To increment\r\n    * Allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined).\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        tokenRepository.increaseAllowed(msg.sender, _spender, _value);\r\n        emit Approval(msg.sender, _spender, tokenRepository.allowed(msg.sender, _spender));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * Approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined).\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        uint256 oldValue = tokenRepository.allowed(msg.sender, _spender);\r\n        if (_value >= oldValue) {\r\n            tokenRepository.setAllowed(msg.sender, _spender, 0);\r\n        } else {\r\n            tokenRepository.decreaseAllowed(msg.sender, _spender, _value);\r\n        }\r\n        emit Approval(msg.sender, _spender, tokenRepository.allowed(msg.sender, _spender));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to execute transfer of token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function _transfer(address _to, uint256 _value) internal returns (bool) {\r\n        require(_value <= tokenRepository.balances(msg.sender));\r\n        require(_to != address(0));\r\n\r\n        tokenRepository.transferBalance(msg.sender, _to, _value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to execute transfer of token from one address to another.\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 the amount of tokens to be transferred.\r\n    */\r\n    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_value <= tokenRepository.balances(_from));\r\n        require(_value <= tokenRepository.allowed(_from, msg.sender));\r\n        require(_to != address(0));\r\n\r\n        tokenRepository.transferBalance(_from, _to, _value);\r\n        tokenRepository.decreaseAllowed(_from, msg.sender, _value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Private function that is called when target address is a contract.\r\n    * @param _from address The address which you want to send tokens from.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 the amount of tokens to be transferred.\r\n    * @param _data Data to be passed.\r\n    */\r\n    function _contractFallback(address _from, address _to, uint _value, bytes _data) private returns (bool) {\r\n        ERC223Receiver reciever = ERC223Receiver(_to);\r\n        return reciever.tokenFallback(msg.sender, _from, _value, _data);\r\n    }\r\n\r\n    /**\r\n    * @dev Private function that differentiates between an external account and contract account.\r\n    * @param _address Address of contract/account.\r\n    */\r\n    function _isContract(address _address) private view returns (bool) {\r\n        // Retrieve the size of the code on target address, this needs assembly.\r\n        uint length;\r\n        assembly { length := extcodesize(_address) }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\ncontract NAi is ERC223Token {\r\n\r\n    constructor() public {\r\n        tokenRepository.setName(\"NAi\");\r\n        tokenRepository.setSymbol(\"NAi\");\r\n        tokenRepository.setDecimals(6);\r\n        tokenRepository.setTotalSupply(20000000 * 10 ** uint(tokenRepository.decimals()));\r\n\r\n        tokenRepository.setBalances(msg.sender, tokenRepository.totalSupply());\r\n    }\r\n\r\n    /**\r\n    * @dev Owner of the storage contract.\r\n    */\r\n    function storageOwner() public view returns(address) {\r\n        return tokenRepository.owner();\r\n    }\r\n    \r\n    /**\r\n    * @dev Burns tokens and decreases the total supply.\r\n    * @param _value Amount of tokens to burn.\r\n    */\r\n    function burnTokens(uint256 _value) public onlyOwner {\r\n        tokenRepository.burnTokens(_value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of storage contract.\r\n    * @param _newContract The address to transfer to.\r\n    */\r\n    function transferStorageOwnership(address _newContract) public onlyOwner {\r\n        tokenRepository.transferOwnership(_newContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Kills the contract and renders it useless.\r\n    * Can only be executed after transferring the ownership of storage.\r\n    */\r\n    function killContract() public onlyOwner {\r\n        require(storageOwner() != address(this));\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"storageOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRepository\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"transferStorageOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NAi","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f53690dc62b70a0a62f43fe6aac621fff35afca8da8c63fea3406ca14c0e9d2a"}]}