{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Base\r\n{\r\n    uint8 constant HEROLEVEL_MIN = 1;\r\n    uint8 constant HEROLEVEL_MAX = 5;\r\n\r\n    uint8 constant LIMITCHIP_MINLEVEL = 3;\r\n    uint constant PARTWEIGHT_NORMAL = 100;\r\n    uint constant PARTWEIGHT_LIMIT = 40;\r\n\r\n    address creator;\r\n\r\n    constructor() public\r\n    {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    modifier CreatorAble()\r\n    {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function IsLimitPart(uint8 level, uint part) internal pure returns(bool)\r\n    {\r\n        if (level < LIMITCHIP_MINLEVEL) return false;\r\n        if (part < GetPartNum(level)) return false;\r\n        return true;\r\n    }\r\n\r\n    function GetPartWeight(uint8 level, uint part) internal pure returns(uint)\r\n    {\r\n        if (IsLimitPart(level, part)) return PARTWEIGHT_LIMIT;\r\n        return PARTWEIGHT_NORMAL;\r\n    }\r\n    \r\n    function GetPartNum(uint8 level) internal pure returns(uint)\r\n    {\r\n        if (level <= 2) return 3;\r\n        else if (level <= 4) return 4;\r\n        return 5;\r\n    }\r\n\r\n    function GetPartLimit(uint8 level, uint part) internal pure returns(uint8)\r\n    {\r\n        if (!IsLimitPart(level, part)) return 0;\r\n        if (level == 5) return 1;\r\n        if (level == 4) return 8;\r\n        return 15;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract BasicAuth is Base\r\n{\r\n\r\n    mapping(address => bool) auth_list;\r\n\r\n    modifier OwnerAble(address acc)\r\n    {\r\n        require(acc == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier AuthAble()\r\n    {\r\n        require(auth_list[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier ValidHandleAuth()\r\n    {\r\n        require(tx.origin==creator || msg.sender==creator);\r\n        _;\r\n    }\r\n   \r\n    function SetAuth(address target) external ValidHandleAuth\r\n    {\r\n        auth_list[target] = true;\r\n    }\r\n\r\n    function ClearAuth(address target) external ValidHandleAuth\r\n    {\r\n        delete auth_list[target];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract OldProductionBoiler\r\n{\r\n    function GetBoilerInfo(address acc, uint idx) external view returns(uint, uint32[]);\r\n}\r\n\r\ncontract ProductionBoiler is BasicAuth\r\n{\r\n\r\n    struct Boiler\r\n    {\r\n        uint m_Expire;\r\n        uint32[] m_Chips;\r\n    }\r\n\r\n    mapping(address => mapping(uint => Boiler)) g_Boilers;\r\n\r\n    bool g_Synced = false;\r\n    function SyncOldData(OldProductionBoiler oldBoiler, address[] accounts) external CreatorAble\r\n    {\r\n        require(!g_Synced);\r\n        g_Synced = true;\r\n        for (uint i=0; i<accounts.length; i++)\r\n        {\r\n            address acc = accounts[i];\r\n            for (uint idx=0; idx<3; idx++)\r\n            {\r\n                (uint expire, uint32[] memory chips) = oldBoiler.GetBoilerInfo(acc,idx);\r\n                if (expire == 0) continue;\r\n                g_Boilers[acc][idx].m_Expire = expire;\r\n                g_Boilers[acc][idx].m_Chips = chips;\r\n            }\r\n        }\r\n    }\r\n\r\n    //=========================================================================\r\n    function IsBoilerValid(address acc, uint idx) external view returns(bool)\r\n    {\r\n        Boiler storage obj = g_Boilers[acc][idx];\r\n        if (obj.m_Chips.length > 0) return false;\r\n        return true;\r\n    }\r\n\r\n    function IsBoilerExpire(address acc, uint idx) external view returns(bool)\r\n    {\r\n        Boiler storage obj = g_Boilers[acc][idx];\r\n        return obj.m_Expire <= now;\r\n    }\r\n\r\n    //=========================================================================\r\n\r\n    function GenerateChips(address acc, uint idx, uint cd, uint32[] chips) external AuthAble OwnerAble(acc)\r\n    {\r\n        Boiler storage obj = g_Boilers[acc][idx];\r\n        obj.m_Expire = cd+now;\r\n        obj.m_Chips = chips;\r\n    }\r\n\r\n    function CollectChips(address acc, uint idx) external AuthAble OwnerAble(acc) returns(uint32[] chips)\r\n    {\r\n        Boiler storage obj = g_Boilers[acc][idx];\r\n        chips = obj.m_Chips;\r\n        delete g_Boilers[acc][idx];\r\n    }\r\n\r\n    function GetBoilerInfo(address acc, uint idx) external view returns(uint, uint32[])\r\n    {\r\n        Boiler storage obj = g_Boilers[acc][idx];\r\n        return (obj.m_Expire,obj.m_Chips);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"cd\",\"type\":\"uint256\"},{\"name\":\"chips\",\"type\":\"uint32[]\"}],\"name\":\"GenerateChips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"IsBoilerValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"GetBoilerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"IsBoilerExpire\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"SetAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ClearAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"acc\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"CollectChips\",\"outputs\":[{\"name\":\"chips\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldBoiler\",\"type\":\"address\"},{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"SyncOldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProductionBoiler","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eed70ab742e51b5bca29d3d27e0d5915fefe327d885e64797697a2633fc25f58"}]}