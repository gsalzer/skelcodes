{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;  \r\n\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal pure returns(uint) {  \r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns(uint) { \r\n\t\tuint c = a / b;\r\n\t\treturn c; \r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns(uint) {  \r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint a, uint b) internal pure returns(uint) {  \r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction max64(uint64 a, uint64 b) internal pure  returns(uint64) { \r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\tfunction min64(uint64 a, uint64 b) internal pure  returns(uint64) { \r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\tfunction max256(uint256 a, uint256 b) internal pure returns(uint256) { \r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\tfunction min256(uint256 a, uint256 b) internal pure returns(uint256) {  \r\n\t\treturn a < b ? a : b;\r\n\t}\r\n \r\n}\r\n\r\ncontract ERC20Basic {\r\n\tuint public totalSupply;\r\n\tfunction balanceOf(address who) public constant returns(uint);  \r\n\tfunction transfer(address to, uint value) public;  \r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public constant returns(uint);  \r\n\tfunction transferFrom(address from, address to, uint value) public;  \r\n\tfunction approve(address spender, uint value) public;  \r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A contract can unlock token at designated time.\r\n */\r\ncontract TokenVesting  {\r\n  using SafeMath for uint256;\r\n\r\n  event Released(uint256 amounts);\r\n\r\n  address[] private _beneficiary ;\r\n  uint256[] private _unlocktime;  \r\n  uint256[] private _amount;\r\n\r\n  constructor() public\r\n  {\r\n   \t _beneficiary = [0x9138D3b9d45cd8901aD1C2e670428Bc51f85c350,\r\n   \t 0x2968d05dCF6e706F68ca8fC16F6e430fd822d742,\r\n   \t 0xCD2C7D18325B7E09DA08DBA6f58D0E6F0e6BDf68,\r\n   \t 0xA29459226F9aFa33b2b22093f5f9FCB9B16a9851,\r\n   \t 0xD20D3CaC06BfC68f1d0e84855c3395D2D10CDb14,\r\n   \t 0xd8B5C428E7F37e84d13a25C400a35fD97a2BfaBd,\r\n   \t 0x2e5f02cb099c2b6ddc71694cafa6801eb30b60ce,\r\n   \t 0x4e8b6b5b94ffc827b1ec2f6c172a93067248c4fa,\r\n   \t 0xbe4c612de6221f557799b7ed456572f0c0a14bd1,\r\n   \t 0xbe4c612de6221f557799b7ed456572f0c0a14bd1,\r\n   \t 0x9c0A93e70143611fD5107eb865963b1E4670C852,\r\n   \t 0x7A2D687BEDeb0B0C6e7Ef27db97Bcc5ab4d68c02,\r\n   \t 0xf5991c3be1677F62Ac7A631108D56300634CFAcF];\r\n   \t \r\n     _unlocktime = [1546272000,1572969600,1572969600,1572969600,1569859200,1546185600,1556640000,1559318400,1551369600,1569859200,1545321600,1557244800,1564416000];\r\n     _amount=[227500000,773500000,136500000,91000000,1708182733,9614599,39173094,15054061,230700000,384500000,9000000,17500000,7500000];\r\n     \r\n  }\r\n\r\n  /**\r\n   * @return the beneficiary of the tokens.\r\n   */\r\n  function beneficiary() public view returns(address[]) {\r\n    return _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @return the unlocktime time of the token vesting.\r\n   */\r\n  function unlocktime() public view returns(uint256[]) {\r\n    return _unlocktime;\r\n  }\r\n   /**\r\n   * @return the amount of the tokens.\r\n   */\r\n  function amount() public view returns(uint256[]) {\r\n    return _amount;\r\n  }\r\n \r\n \r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20 token) public {\r\n       for(uint i = 0; i < _beneficiary.length; i++) {\r\n            if(block.timestamp >= _unlocktime[i] ){\r\n                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\r\n                    emit Released( _amount[i]);\r\n                    _amount[i]=0;\r\n            }\r\n       }\r\n  }\r\n\r\n  /**\r\n   * @notice Release the unexpected token.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  \r\n    function checkRelease(ERC20 token) public {\r\n        \r\n       uint num = 0;\r\n        for(uint i = 0; i < _amount.length; i++) {\r\n            num = num.add(_amount[i]); \r\n        }\r\n        if(num==0){\r\n             token.transfer(_beneficiary[0],token.balanceOf(this));\r\n        }\r\n        \r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc1fc8f217daf996a7049929b5b0f2251d61bc3db86e89c9a974f44fb61f2866"}]}