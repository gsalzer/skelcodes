{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n    * 0x80ac58cd ===\r\n    *   bytes4(keccak256('balanceOf(address)')) ^\r\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n    *   bytes4(keccak256('approve(address,uint256)')) ^\r\n    *   bytes4(keccak256('getApproved(uint256)')) ^\r\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n    /*\r\n    * 0x4f558e79 ===\r\n    *   bytes4(keccak256('exists(uint256)'))\r\n    */\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    /**\r\n    * @dev Guarantees msg.sender is owner of the given token\r\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n    */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n    * @param _tokenId uint256 ID of the token to validate\r\n    */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId)); //, \"canTransfer\"\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721);\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified token ID\r\n    * @param _tokenId uint256 ID of the token to query the owner of\r\n    * @return owner address currently marked as the owner of the given token ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param _tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to transfer the given token ID\r\n    * The zero address indicates there is no approved address.\r\n    * There can only be one approved address per token at a given time.\r\n    * Can only be called by the token owner or an approved operator.\r\n    * @param _to address to be approved for the given token ID\r\n    * @param _tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner); //, \"_to eq owner\"\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address for a token ID, or zero if no address set\r\n    * @param _tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved for the given token ID\r\n    */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets or unsets the approval of a given operator\r\n    * An operator is allowed to transfer all tokens of the sender on their behalf\r\n    * @param _to operator address to set the approval\r\n    * @param _approved representing the status of the approval to be set\r\n    */\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require(_to != msg.sender);\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether an operator is approved by a given owner\r\n    * @param _owner owner address which you want to query the approval of\r\n    * @param _operator operator address which you want to query the approval of\r\n    * @return bool whether the given operator is approved by the given owner\r\n    */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        require(_from != address(0)); //, \"transferFrom 1\"\r\n        require(_to != address(0)); //, \"transferFrom 2\"\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    *\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the msg sender to be the owner, approved, or operator\r\n    * @param _from current owner of the token\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        canTransfer(_tokenId)\r\n    {\r\n        transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param _spender address of the spender to query\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function isApprovedOrOwner(\r\n        address _spender,\r\n        uint256 _tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (\r\n        _spender == owner ||\r\n        getApproved(_tokenId) == _spender ||\r\n        isApprovedForAll(owner, _spender)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to mint a new token\r\n    * Reverts if the given token ID already exists\r\n    * @param _to The address that will own the minted token\r\n    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n    */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * Reverts if the token does not exist\r\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * Reverts if the given address is not indeed the owner of the token\r\n    * @param _owner owner of the token\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner); //, \"clearApproval\"\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0)); //, \"addTokenTo\"\r\n        tokenOwner[_tokenId] = _to;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from); //, \"removeTokenFrom\"\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to invoke `onERC721Received` on a target address\r\n    * The call is not executed if the target address is not a contract\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _to target address that will receive the tokens\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes optional data to send along with the call\r\n    * @return whether the call correctly returned the expected magic value\r\n    */\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n        msg.sender, _from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\n// File: contracts/IEntityStorage.sol\r\n\r\ninterface IEntityStorage {\r\n    function storeBulk(uint256[] _tokenIds, uint256[] _attributes) external;\r\n    function store(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function remove(uint256 _tokenId) external;\r\n    function list() external view returns (uint256[] tokenIds);\r\n    function getAttributes(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds);\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md Customized to support non-transferability.\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n    IEntityStorage internal cbStorage;\r\n\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n    /**\r\n    * 0x780e9d63 ===\r\n    *   bytes4(keccak256('totalSupply()')) ^\r\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n    */\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n    /**\r\n    * 0x5b5e139f ===\r\n    *   bytes4(keccak256('name()')) ^\r\n    *   bytes4(keccak256('symbol()')) ^\r\n    *   bytes4(keccak256('tokenURI(uint256)'))\r\n    */\r\n\r\n    string internal uriPrefix;\r\n\r\n    // Token name\r\n    string internal name_;\r\n\r\n    // Token symbol\r\n    string internal symbol_;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping to index within the ownedTokens array for the owner\r\n    mapping(uint256 => uint) internal ownedTokenIndexes;\r\n    \r\n    // Array with transferable Tokens\r\n    uint256[] internal transferableTokens;\r\n\r\n    // Mapping to index within the ownedTokens array for the owner\r\n    mapping(uint256 => uint) internal transferableIndexes;\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor(string _name, string _symbol, string _uriPrefix, address _storage) public {\r\n        require(_storage != address(0), \"Storage Address is required\");\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n        cbStorage = IEntityStorage(_storage);\r\n        uriPrefix = _uriPrefix;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token name\r\n    * @return string representing the token name\r\n    */\r\n    function name() external view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token symbol\r\n    */\r\n    function symbol() external view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an URI for a given token ID\r\n    * Throws if the token ID does not exist. May return an empty string.\r\n    * @param _tokenId uint256 ID of the token to query\r\n    */\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return strConcat(uriPrefix, uintToString(_tokenId));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return cbStorage.totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list owned by a given address\r\n    * @param _to address representing the new owner of the token ID\r\n    * @param _tokenId uint256 ID of the token to be added \r\n    */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n\r\n        ownedTokens[_to].push(_tokenId);\r\n        // index is +1 to avoid Solidity's zero default mapping value\r\n        ownedTokenIndexes[_tokenId] = ownedTokens[_to].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list owned by a given address\r\n    * @param _from address representing the previous owner of the token ID\r\n    * @param _tokenId uint256 ID of the token to be removed\r\n    */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        uint lastTokenIndex = ownedTokens[_from].length;\r\n        require(lastTokenIndex > 0);\r\n        lastTokenIndex--;\r\n\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        uint256 tokenIndex = ownedTokenIndexes[_tokenId].sub(1);\r\n        \r\n        // reorg the ownedTokens array for this address\r\n        uint256 lastTokenId = ownedTokens[_from][lastTokenIndex];\r\n\r\n        // reposition the last token to its new location\r\n        ownedTokens[_from][tokenIndex] = lastTokenId;\r\n\r\n        // fix the index mapping for the repositioned lastToken\r\n        ownedTokenIndexes[lastTokenId] = tokenIndex.add(1);\r\n\r\n        // empty out the last token position in the array\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n        ownedTokens[_from].length--;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to burn a specific token\r\n    * Reverts if the token does not exist, or is marked transferable\r\n    * @param _owner owner address of the token being burned\r\n    * @param _tokenId uint256 ID of the token being burned \r\n    */\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        // cannot burn a token that is up for sale\r\n        require(!isTransferable(_tokenId)); //, \"_burn\"\r\n        super._burn(_owner, _tokenId);\r\n        cbStorage.remove(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the number of tokens owned by the specified address\r\n    * @param _owner address of the token owner\r\n    * @return uint256 the number of tokens owned \r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n        /**\r\n    * @dev List all token Ids that can be transfered\r\n    * @return array of token IDs\r\n    */\r\n    function listTransferableTokens() public view returns(uint256[]) {\r\n        return transferableTokens;\r\n    } \r\n\r\n    /**\r\n    * @dev Is Token Transferable\r\n    * @param _tokenId uint256 ID of the token\r\n    * @return bool is tokenId transferable \r\n    */\r\n    function isTransferable(uint256 _tokenId) public view returns (bool) {\r\n        return (transferableIndexes[_tokenId] > 0);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the given spender can transfer a given token ID\r\n    * @param _spender address of the spender to query\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the token is transferable and msg.sender is approved for the given token ID,\r\n    *  is an operator of the owner, or is the owner of the token\r\n    */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        if (isTransferable(_tokenId)) {\r\n            return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Converts a uint, such aa a token ID number, to a string\r\n    */\r\n    function uintToString(uint v) internal pure returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    /**\r\n    * Basic smashing together of strings.\r\n    */\r\n    function strConcat(string _a, string _b)internal pure returns (string) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ab = new string(_ba.length + _bb.length);\r\n        bytes memory ba = bytes(ab);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) ba[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) ba[k++] = _bb[i];\r\n        return string(ba);\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    // mapping for creature Type to Sale\r\n    address[] internal controllers;\r\n    //mapping(address => address) internal controllers;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n   \r\n    /**\r\n    * @dev Throws if called by any account that's not a superuser.\r\n    */\r\n    modifier onlyController() {\r\n        require(isController(msg.sender), \"only Controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrController() {\r\n        require(msg.sender == owner || isController(msg.sender), \"only Owner Or Controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"sender address must be the owner's address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(address(0) != _newOwner, \"new owner address must not be the owner's address\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the new owner to confirm that they are taking control of the contract..tr\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"sender address must not be the new owner's address\");\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function isController(address _controller) internal view returns(bool) {\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getControllers() public onlyOwner view returns(address[]) {\r\n        return controllers;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function addController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        require(_controller != owner, \"controller address must not be the owner's address\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return;\r\n            }\r\n        }\r\n        controllers.push(_controller);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function removeController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                delete controllers[index];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ICryptoBeastiesToken.sol\r\n\r\ninterface ICryptoBeastiesToken {\r\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external;\r\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external;\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] tokens);\r\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds); \r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external; \r\n    function updateStorage(address _storage) external;\r\n    function listTokens() external view returns (uint256[] tokens);\r\n    function setURI(string _uriPrefix) external;\r\n    function setTransferable(uint256 _tokenId) external;\r\n    function removeTransferable(uint256 _tokenId) external;\r\n}\r\n\r\n// File: contracts/CryptoBeastiesToken.sol\r\n\r\n/**\r\n * @title CryptoBeasties Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard,\r\n * plus references a separate storage contract for recording the game-specific data for each token. \r\n */\r\ncontract CryptoBeastiesToken is ERC721Token, Ownable, ICryptoBeastiesToken { \r\n    using SafeMath for uint256;\r\n\r\n    address proxyRegistryAddress;\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    * @param _storage address for Creature Storage\r\n    * @param _uriPrefix string for url prefix\r\n    */\r\n    constructor(address _storage, string _uriPrefix) \r\n        ERC721Token(\"CryptoBeasties Token\", \"CRYB\", _uriPrefix, _storage) public {\r\n        proxyRegistryAddress = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Set a Proxy Registry Address, to be used by 3rd-party marketplaces.\r\n    * @param _proxyRegistryAddress Address of the marketplace's proxy registry address\r\n    */\r\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwnerOrController {\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk load a number of tokens, as a way of reducing gas fees and migration time.\r\n    * @param _tokenIds Array of tokenIds\r\n    * @param _attributes Matching array of CryptoBeasties attributes\r\n    * @param _owners Matching array of token owner addresses\r\n    */\r\n    function bulk(uint256[] _tokenIds, uint256[] _attributes, address[] _owners) external onlyOwnerOrController {\r\n        for (uint index = 0; index < _tokenIds.length; index++) {\r\n            \r\n            ownedTokens[_owners[index]].push(_tokenIds[index]);\r\n            ownedTokenIndexes[_tokenIds[index]] = ownedTokens[_owners[index]].length;\r\n\r\n            tokenOwner[_tokenIds[index]] = _owners[index];\r\n            emit Transfer(address(0), _owners[index], _tokenIds[index]);\r\n        }\r\n        cbStorage.storeBulk(_tokenIds, _attributes);\r\n    }\r\n\r\n    /**\r\n    * @dev Create CryptoBeasties Token \r\n    * @param _tokenId ID of the new token\r\n    * @param _attributes CryptoBeasties attributes\r\n    * @param _owner address of the token owner\r\n    */\r\n    function create(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds, address _owner) external onlyOwnerOrController {\r\n        require(_owner != address(0));\r\n        require(_attributes > 0); \r\n        super._mint(_owner, _tokenId);\r\n        cbStorage.store(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n   /**\r\n   * Override isApprovedForAll to whitelist a 3rd-party marketplace's proxy accounts to enable gas-less listings.\r\n   */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    )\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (proxyRegistryAddress != address(0)) {\r\n            ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n            if (proxyRegistry.proxies(owner) == operator) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return super.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n    * @dev List all token ids for a owner\r\n    * @param _owner address of the token owner\r\n    */\r\n    function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n    \r\n    /**\r\n    * @dev List all token ids, an array of their attributes and an array componentIds (i.e. PowerStones)\r\n    * @param _owner address for the given token ID\r\n    */\r\n    function getOwnedTokenData(\r\n        address _owner\r\n        ) \r\n        public \r\n        view \r\n        returns \r\n        (\r\n            uint256[] tokens, \r\n            uint256[] attrs, \r\n            uint256[] componentIds, \r\n            bool[] isTransferable\r\n        ) {\r\n\r\n        uint256[] memory tokenIds = this.tokensOfOwner(_owner);\r\n        uint256[] memory attribs = new uint256[](tokenIds.length);\r\n        uint256[] memory firstCompIds = new uint256[](tokenIds.length);\r\n        bool[] memory transferable = new bool[](tokenIds.length);\r\n        \r\n        uint256[] memory compIds;\r\n\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            (attribs[i], compIds) = cbStorage.getAttributes(tokenIds[i]);\r\n            transferable[i] = this.isTransferable(tokenIds[i]);\r\n            if (compIds.length > 0)\r\n            {\r\n                firstCompIds[i] = compIds[0];\r\n            }\r\n        }\r\n        return (tokenIds, attribs, firstCompIds, transferable);\r\n    }\r\n\r\n    /**\r\n    * @dev Get attributes and Component Ids (i.e. PowerStones) CryptoBeastie\r\n    * @param _tokenId uint256 for the given token\r\n    */\r\n    function getProperties(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds) {\r\n        return cbStorage.getAttributes(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev attributes and Component Ids (i.e. PowerStones) CryptoBeastie\r\n    * @param _tokenId uint256 for the given token\r\n    * @param _attributes Cryptobeasties attributes\r\n    * @param _componentIds Array of Cryptobeasties componentIds (i.e. PowerStones)\r\n    */\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        cbStorage.updateAttributes(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n    /**\r\n    * @dev Update the reference to the CryptoBeasties storage contract\r\n    * @param _storage address for CryptoBeasties storage contract\r\n    */\r\n    function updateStorage(address _storage) external  onlyOwnerOrController {\r\n        cbStorage = IEntityStorage(_storage);\r\n    }\r\n\r\n    /**\r\n    * @dev List all of the CryptoBeasties token Ids held in the Storage Contract\r\n    */\r\n    function listTokens() external view returns (uint256[] tokens) {\r\n        return cbStorage.list();\r\n    }\r\n\r\n    /**\r\n    * @dev Update the URI prefix\r\n    * @param _uriPrefix string for url prefix\r\n    */\r\n    function setURI(string _uriPrefix) external onlyOwnerOrController {\r\n        uriPrefix = _uriPrefix;\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk setup of token Ids that can be transferred\r\n    * @param _tokenIds array of token Ids that will be set for transfer\r\n    */\r\n    function bulkTransferable(uint256[] _tokenIds) external {\r\n        address _owner = ownerOf(_tokenIds[0]);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            if (_owner == msg.sender) {\r\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\r\n            } \r\n            transferableTokens.push(_tokenIds[index]);\r\n            // save index as +1 to avoid Solidity's zero default mapping value\r\n            transferableIndexes[_tokenIds[index]] = transferableTokens.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set a Token Id that can be transfer\r\n    * @param _tokenId Token Id that will be set for transfer\r\n    */\r\n    function setTransferable(uint256 _tokenId) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        transferableTokens.push(_tokenId);\r\n        // save index as +1 to avoid Solidity's zero default mapping value\r\n        transferableIndexes[_tokenId] = transferableTokens.length;        \r\n    }\r\n\r\n    /**\r\n    * @dev Bulk remove transferability of token Ids\r\n    * @param _tokenIds array of token Ids that will be removed for transfer\r\n    */\r\n    function bulkRemoveTransferable(uint256[] _tokenIds) external {\r\n        address _owner = ownerOf(_tokenIds[0]);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            if (_owner == msg.sender) {\r\n                require(ownerOf(_tokenIds[index]) == _owner); //, \"token owner\"\r\n            }\r\n            _removeTransfer(_tokenIds[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev A token Id that will be removed from transfer\r\n    * @param _tokenId Token Id that will be removed for transfer\r\n    */\r\n    function removeTransferable(uint256 _tokenId) external {\r\n        require(ownerOf(_tokenId) == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        _removeTransfer(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove transferability of a token Id\r\n    * @param _tokenId Token Id that will be removed for Transfer\r\n    */\r\n    function _removeTransfer(uint256 _tokenId) internal {\r\n        uint lastTokenIndex = transferableTokens.length;\r\n        require(lastTokenIndex > 0);\r\n        // reduce the index by 1 to make it zero-based\r\n        uint256 tokenIndex = transferableIndexes[_tokenId].sub(1);\r\n\r\n        // reorg transferableTokens array\r\n        lastTokenIndex--;\r\n        uint256 lastTokenId = transferableTokens[lastTokenIndex];\r\n\r\n        // reposition the last item\r\n        transferableTokens[tokenIndex] = lastTokenId;\r\n        transferableIndexes[lastTokenId] = tokenIndex.add(1);\r\n\r\n        // clear out the last item slot\r\n        transferableTokens[lastTokenIndex] = 0;\r\n        transferableTokens.length--;\r\n    }\r\n\r\n    /**\r\n    * @dev Support merging multiple tokens into one, to increase XP and level-up the target.\r\n    * @param _mergeTokenIds Array of tokens to be removed and merged into the target\r\n    * @param _targetTokenId The token whose attributes will be improved by the merge\r\n    * @param _targetAttributes The new improved attributes for the target token\r\n    */\r\n    function mergeTokens(uint256[] _mergeTokenIds, uint256 _targetTokenId, uint256 _targetAttributes) external {\r\n        address _owner = ownerOf(_targetTokenId);\r\n        require(_owner == msg.sender || owner == msg.sender || isController(msg.sender)); //, \"token owner\"\r\n        require(_mergeTokenIds.length > 0); //, \"mergeTokens\"\r\n        require(!isTransferable(_targetTokenId)); // cannot target a token that is up for sale\r\n\r\n\r\n        // remove merge material tokens\r\n        for (uint256 index = 0; index < _mergeTokenIds.length; index++) {\r\n            require(ownerOf(_mergeTokenIds[index]) == _owner); //, \"array\"\r\n            _burn(_owner, _mergeTokenIds[index]);\r\n        }\r\n\r\n        // update target token\r\n        uint256 attribs;\r\n        uint256[] memory compIds;\r\n        (attribs, compIds) = cbStorage.getAttributes(_targetTokenId);\r\n        cbStorage.updateAttributes(_targetTokenId, _targetAttributes, compIds);\r\n    }\r\n}\r\n\r\ncontract OwnableDelegateProxy { }\r\n\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProperties\",\"outputs\":[{\"name\":\"attrs\",\"type\":\"uint256\"},{\"name\":\"compIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"updateStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenData\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"name\":\"attrs\",\"type\":\"uint256[]\"},{\"name\":\"componentIds\",\"type\":\"uint256[]\"},{\"name\":\"isTransferable\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mergeTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_targetTokenId\",\"type\":\"uint256\"},{\"name\":\"_targetAttributes\",\"type\":\"uint256\"}],\"name\":\"mergeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_attributes\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"bulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkRemoveTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listTransferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storage\",\"type\":\"address\"},{\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"CryptoBeastiesToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e8ec272d1d55f0c5e9b539c189915f9631cb693c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b68747470733a2f2f6170692e63727970746f62656173746965732e636f6d2f6170692f6f70656e7365612f000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://72b6bce8a69602d2e074e0357e7f61a93ee6d5350f53969022b1fd36139cc98b"}]}