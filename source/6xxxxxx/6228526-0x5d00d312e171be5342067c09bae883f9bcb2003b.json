{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract SupportsInterface is ERC165 {\r\n    \r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n}\r\n\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    \r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n    \r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // write\r\n    function withdrawEther(address _sendTo, uint _amount) external returns(EtheremonEnum.ResultCode);\r\n    function addElementToArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint8 _value) external returns(uint);\r\n    function updateIndexOfArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint _index, uint8 _value) external returns(uint);\r\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) external returns(uint32);\r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) external returns(uint64);\r\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) external;\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) external;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) external;\r\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) external;\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) external;\r\n    function clearMonsterReturnBalance(uint64 _monsterId) external returns(uint256 amount);\r\n    function collectAllReturnBalance(address _trainer) external returns(uint256 amount);\r\n    function transferMonster(address _from, address _to, uint64 _monsterId) external returns(EtheremonEnum.ResultCode);\r\n    function addExtraBalance(address _trainer, uint256 _amount) external returns(uint256);\r\n    function deductExtraBalance(address _trainer, uint256 _amount) external returns(uint256);\r\n    function setExtraBalance(address _trainer, uint256 _amount) external;\r\n    \r\n    // read\r\n    function getSizeArrayType(EtheremonEnum.ArrayType _type, uint64 _id) constant external returns(uint);\r\n    function getElementInArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint _index) constant external returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant external returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant external returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant external returns(string name);\r\n    function getExtraBalance(address _trainer) constant external returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant external returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant external returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant external returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant external returns(uint256 current, uint256 total);\r\n}\r\n\r\ninterface EtheremonBattle {\r\n    function isOnBattle(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\ninterface EtheremonTradeInterface {\r\n    function isOnTrading(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\n\r\ncontract EtheremonMonsterTokenBasic is ERC721, SupportsInterface, BasicAccessControl {\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n    \r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n\r\n    // data contract\r\n    address public dataContract;\r\n    address public battleContract;\r\n    address public tradeContract;\r\n    \r\n    // Mapping from NFT ID to approved address.\r\n    mapping (uint256 => address) internal idToApprovals;\r\n    \r\n    // Mapping from owner address to mapping of operator addresses.\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n    \r\n    /**\r\n    * @dev Magic value of a smart contract that can recieve NFT.\r\n    * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n    */\r\n    bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    // internal function\r\n    function _canOperate(address _tokenOwner) constant internal {\r\n        require(_tokenOwner == msg.sender || ownerToOperators[_tokenOwner][msg.sender]);\r\n    }\r\n    \r\n    function _canTransfer(uint256 _tokenId, address _tokenOwner) constant internal {\r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        require(!battle.isOnBattle(uint64(_tokenId)) && !trade.isOnTrading(uint64(_tokenId)));\r\n        require(_tokenOwner != address(0));\r\n        require(_tokenOwner == msg.sender || idToApprovals[_tokenId] == msg.sender || ownerToOperators[_tokenOwner][msg.sender]);\r\n    }\r\n    \r\n    function setOperationContracts(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n        battleContract = _battleContract;\r\n        tradeContract = _tradeContract;\r\n    }\r\n    \r\n    // public function\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n    }\r\n\r\n    function isApprovable(address _owner, uint256 _tokenId) public constant returns(bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        if (obj.monsterId != uint64(_tokenId))\r\n            return false;\r\n        if (obj.trainer != _owner)\r\n            return false;\r\n        // check battle & trade contract \r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        return (!battle.isOnBattle(obj.monsterId) && !trade.isOnTrading(obj.monsterId));\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.getMonsterDexSize(_owner);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, _owner, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(_owner != address(0));\r\n    }\r\n\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        _canTransfer(_tokenId, obj.trainer);\r\n        \r\n        require(obj.trainer == _from);\r\n        require(_to != address(0));\r\n        _transfer(obj.trainer, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        _canTransfer(_tokenId, obj.trainer);\r\n        \r\n        require(obj.trainer == msg.sender);\r\n        require(_to != address(0));\r\n        _transfer(obj.trainer, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        _canOperate(obj.trainer);\r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if(battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\r\n            revert();\r\n        \r\n        require(_approved != obj.trainer);\r\n\r\n        idToApprovals[_tokenId] = _approved;\r\n        emit Approval(obj.trainer, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0));\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        return idToApprovals[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        require(_owner != address(0));\r\n        require(_operator != address(0));\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) internal {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        _canTransfer(_tokenId, obj.trainer);\r\n        \r\n        require(obj.trainer == _from);\r\n        require(_to != address(0));\r\n\r\n        _transfer(obj.trainer, _to, _tokenId);\r\n\r\n        if (_to.isContract()) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        _clearApproval(_tokenId);\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.removeMonsterIdMapping(_from, uint64(_tokenId));\r\n        data.addMonsterIdMapping(_to, uint64(_tokenId));\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\r\n    function _burn(uint256 _tokenId) internal { \r\n        _clearApproval(_tokenId);\r\n        \r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(uint64(_tokenId));\r\n        require(obj.trainer != address(0));\r\n        \r\n        EtheremonBattle battle = EtheremonBattle(battleContract);\r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if(battle.isOnBattle(obj.monsterId) || trade.isOnTrading(obj.monsterId))\r\n            revert();\r\n        \r\n        data.removeMonsterIdMapping(obj.trainer, uint64(_tokenId));\r\n        \r\n        emit Transfer(obj.trainer, address(0), _tokenId);\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) internal {\r\n        if(idToApprovals[_tokenId] != 0) {\r\n            delete idToApprovals[_tokenId];\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract EtheremonMonsterEnumerable is EtheremonMonsterTokenBasic, ERC721Enumerable {\r\n\r\n    constructor() public {\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.totalMonster();\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        return _index;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        return data.getMonsterObjId(_owner, _index);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract EtheremonMonsterStandard is EtheremonMonsterEnumerable, ERC721Metadata {\r\n    string internal nftName;\r\n    string internal nftSymbol;\r\n    \r\n    mapping (uint256 => string) internal idToUri;\r\n    \r\n    constructor(string _name, string _symbol) public {\r\n        nftName = _name;\r\n        nftSymbol = _symbol;\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n    }\r\n    \r\n    function _burn(uint256 _tokenId) internal {\r\n        super._burn(_tokenId);\r\n        if (bytes(idToUri[_tokenId]).length != 0) {\r\n            delete idToUri[_tokenId];\r\n        }\r\n    }\r\n    \r\n    function _setTokenUri(uint256 _tokenId, string _uri) internal {\r\n        idToUri[_tokenId] = _uri;\r\n    }\r\n    \r\n    function name() external view returns (string _name) {\r\n        _name = nftName;\r\n    }\r\n    \r\n    function symbol() external view returns (string _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n    \r\n    function tokenURI(uint256 _tokenId) external view returns (string) {\r\n        return idToUri[_tokenId];\r\n    }\r\n}\r\n\r\ncontract EtheremonMonsterToken is EtheremonMonsterStandard(\"EtheremonMonster\", \"EMONA\") {\r\n    uint8 constant public STAT_COUNT = 6;\r\n    uint8 constant public STAT_MAX = 32;\r\n\r\n    uint seed = 0;\r\n    \r\n    mapping(uint8 => uint32) public levelExps;\r\n    mapping(uint32 => bool) classWhitelist;\r\n    mapping(address => bool) addressWhitelist;\r\n    \r\n    uint public gapFactor = 0.001 ether;\r\n    uint16 public priceIncreasingRatio = 1000;\r\n    \r\n    function setPriceIncreasingRatio(uint16 _ratio) onlyModerators external {\r\n        priceIncreasingRatio = _ratio;\r\n    }\r\n    \r\n    function setFactor(uint _gapFactor) onlyModerators public {\r\n        gapFactor = _gapFactor;\r\n    }\r\n    \r\n    function genLevelExp() onlyModerators external {\r\n        uint8 level = 1;\r\n        uint32 requirement = 100;\r\n        uint32 sum = requirement;\r\n        while(level <= 100) {\r\n            levelExps[level] = sum;\r\n            level += 1;\r\n            requirement = (requirement * 11) / 10 + 5;\r\n            sum += requirement;\r\n        }\r\n    }\r\n    \r\n    function setClassWhitelist(uint32 _classId, bool _status) onlyModerators external {\r\n        classWhitelist[_classId] = _status;\r\n    }\r\n\r\n    function setAddressWhitelist(address _smartcontract, bool _status) onlyModerators external {\r\n        addressWhitelist[_smartcontract] = _status;\r\n    }\r\n\r\n    function setTokenURI(uint256 _tokenId, string _uri) onlyModerators external {\r\n        _setTokenUri(_tokenId, _uri);\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public {\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function mintMonster(uint32 _classId, address _trainer, string _name) onlyModerators external returns(uint){\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        // add monster\r\n        uint64 objId = data.addMonsterObj(_classId, _trainer, _name);\r\n        uint8 value;\r\n        seed = getRandom(_trainer, block.number-1, seed, objId);\r\n        // generate base stat for the previous one\r\n        for (uint i=0; i < STAT_COUNT; i+= 1) {\r\n            value = uint8(seed % STAT_MAX) + data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_START, uint64(_classId), i);\r\n            data.addElementToArrayType(EtheremonEnum.ArrayType.STAT_BASE, objId, value);\r\n        }\r\n        emit Transfer(address(0), _trainer, objId);\r\n        return objId;\r\n    }\r\n    \r\n    function burnMonster(uint64 _tokenId) onlyModerators external {\r\n        _burn(_tokenId);\r\n    }\r\n    \r\n    function clearApproval(uint _tokenId) onlyModerators external {\r\n        _clearApproval(_tokenId);\r\n    }\r\n    \r\n    function triggerTransferEvent(address _from, address _to, uint _tokenId) onlyModerators external {\r\n        _clearApproval(_tokenId);\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    // public api \r\n    function getRandom(address _player, uint _block, uint _seed, uint _count) view public returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(blockhash(_block), _player, _seed, _count)));\r\n    }\r\n    \r\n    function getLevel(uint32 exp) view public returns (uint8) {\r\n        uint8 minIndex = 1;\r\n        uint8 maxIndex = 100;\r\n        uint8 currentIndex;\r\n     \r\n        while (minIndex < maxIndex) {\r\n            currentIndex = (minIndex + maxIndex) / 2;\r\n            if (exp < levelExps[currentIndex])\r\n                maxIndex = currentIndex;\r\n            else\r\n                minIndex = currentIndex + 1;\r\n        }\r\n\r\n        return minIndex;\r\n    }\r\n    \r\n    function getMonsterBaseStats(uint64 _monsterId) constant external returns(uint hp, uint pa, uint pd, uint sa, uint sd, uint speed) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        uint[6] memory stats;\r\n        for(uint i=0; i < STAT_COUNT; i+=1) {\r\n            stats[i] = data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_BASE, _monsterId, i);\r\n        }\r\n        return (stats[0], stats[1], stats[2], stats[3], stats[4], stats[5]);\r\n    }\r\n    \r\n    function getMonsterCurrentStats(uint64 _monsterId) constant external returns(uint exp, uint level, uint hp, uint pa, uint pd, uint sa, uint sd, uint speed) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_monsterId);\r\n        \r\n        uint[6] memory stats;\r\n        uint i = 0;\r\n        level = getLevel(obj.exp);\r\n        for(i=0; i < STAT_COUNT; i+=1) {\r\n            stats[i] = data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_BASE, _monsterId, i);\r\n        }\r\n        for(i=0; i < STAT_COUNT; i++) {\r\n            stats[i] += uint(data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_STEP, obj.classId, i)) * level * 3;\r\n        }\r\n        \r\n        return (obj.exp, level, stats[0], stats[1], stats[2], stats[3], stats[4], stats[5]);\r\n    }\r\n    \r\n    function getMonsterCP(uint64 _monsterId) constant external returns(uint cp) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_monsterId);\r\n        \r\n        uint[6] memory stats;\r\n        uint i = 0;\r\n        cp = getLevel(obj.exp);\r\n        for(i=0; i < STAT_COUNT; i+=1) {\r\n            stats[i] = data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_BASE, _monsterId, i);\r\n        }\r\n        for(i=0; i < STAT_COUNT; i++) {\r\n            stats[i] += uint(data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_STEP, obj.classId, i)) * cp * 3;\r\n        }\r\n        \r\n        cp = (stats[0] + stats[1] + stats[2] + stats[3] + stats[4] + stats[5]) / 6;\r\n    }\r\n    \r\n    function getPrice(uint32 _classId) constant external returns(bool catchable, uint price) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        \r\n        price = class.price;\r\n        if (class.total > 0)\r\n            price += class.price*(class.total-1)/priceIncreasingRatio;\r\n        \r\n        if (class.catchable == false) {\r\n            if (addressWhitelist[msg.sender] == true && classWhitelist[_classId] == true) {\r\n                return (true, price);\r\n            }\r\n        }\r\n        \r\n        return (class.catchable, price);\r\n    }\r\n    \r\n    function getMonsterClassBasic(uint32 _classId) constant external returns(uint256, uint256, uint256, bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        return (class.price, class.returnPrice, class.total, class.catchable);\r\n    }\r\n    \r\n    function renameMonster(uint64 _objId, string name) isActive external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        if (obj.monsterId != _objId || obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        data.setMonsterObj(_objId, name, obj.exp, obj.createIndex, obj.lastClaimIndex);\r\n    }\r\n    \r\n    function catchMonster(address _player, uint32 _classId, string _name) isActive external payable returns(uint tokenId) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        if (class.classId == 0) {\r\n            revert();\r\n        }\r\n        \r\n        if (class.catchable == false) {\r\n            if (addressWhitelist[msg.sender] == false || classWhitelist[_classId] == false) {\r\n                revert();\r\n            }\r\n        }\r\n        \r\n        uint price = class.price;\r\n        if (class.total > 0)\r\n            price += class.price*(class.total-1)/priceIncreasingRatio;\r\n        if (msg.value + gapFactor < price) {\r\n            revert();\r\n        }\r\n        \r\n        // add new monster \r\n        uint64 objId = data.addMonsterObj(_classId, _player, _name);\r\n        uint8 value;\r\n        seed = getRandom(_player, block.number-1, seed, objId);\r\n        // generate base stat for the previous one\r\n        for (uint i=0; i < STAT_COUNT; i+= 1) {\r\n            value = uint8(seed % STAT_MAX) + data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_START, uint64(_classId), i);\r\n            data.addElementToArrayType(EtheremonEnum.ArrayType.STAT_BASE, objId, value);\r\n        }\r\n        \r\n        emit Transfer(address(0), _player, objId);\r\n\r\n        return objId; \r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint64\"}],\"name\":\"getMonsterCP\",\"outputs\":[{\"name\":\"cp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mintMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_seed\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_battleContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"}],\"name\":\"setOperationContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genLevelExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint64\"}],\"name\":\"getMonsterCurrentStats\",\"outputs\":[{\"name\":\"exp\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"hp\",\"type\":\"uint256\"},{\"name\":\"pa\",\"type\":\"uint256\"},{\"name\":\"pd\",\"type\":\"uint256\"},{\"name\":\"sa\",\"type\":\"uint256\"},{\"name\":\"sd\",\"type\":\"uint256\"},{\"name\":\"speed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setClassWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint16\"}],\"name\":\"setPriceIncreasingRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelExps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"clearApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gapFactor\",\"type\":\"uint256\"}],\"name\":\"setFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"name\":\"burnMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"renameMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getMonsterClassBasic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_smartcontract\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAddressWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"catchMonster\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gapFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerTransferEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint64\"}],\"name\":\"getMonsterBaseStats\",\"outputs\":[{\"name\":\"hp\",\"type\":\"uint256\"},{\"name\":\"pa\",\"type\":\"uint256\"},{\"name\":\"pd\",\"type\":\"uint256\"},{\"name\":\"sa\",\"type\":\"uint256\"},{\"name\":\"sd\",\"type\":\"uint256\"},{\"name\":\"speed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"catchable\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceIncreasingRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"EtheremonMonsterToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://89a567cea9b3bb8422cf1b9a2493b8775bc1007b0c9f0a20c9626c790722f9b6"}]}