{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title POPO v3.0.1\r\n * \r\n * This product is protected under license.  Any unauthorized copy, modification, or use without \r\n * express written consent from the creators is prohibited.\r\n * \r\n * WARNING:  THIS PRODUCT IS HIGHLY ADDICTIVE.  IF YOU HAVE AN ADDICTIVE NATURE.  DO NOT PLAY.\r\n */\r\n// author: https://playpopo.com\r\n// contact: playpopoteam@gmail.com\r\npragma solidity ^0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\nlibrary PopoDatasets {\r\n\r\n  struct Order {\r\n    uint256 pID;\r\n    uint256 createTime;\r\n    uint256 createDayIndex;\r\n    uint256 orderValue;\r\n    uint256 refund;\r\n    uint256 withdrawn;\r\n    bool hasWithdrawn;\r\n  }\r\n  \r\n  struct Player {\r\n    address addr;\r\n    bytes32 name;\r\n\r\n    bool inviteEnable;\r\n    uint256 inviterPID;\r\n    uint256 [] inviteePIDs;\r\n    uint256 inviteReward1;\r\n    uint256 inviteReward2;\r\n    uint256 inviteReward3;\r\n    uint256 inviteRewardWithdrawn;\r\n\r\n    uint256 [] oIDs;\r\n    uint256 lastOrderDayIndex;\r\n    uint256 dayEthIn;\r\n  }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract PopoEvents {\r\n\r\n  event onEnableInvite\r\n  (\r\n    uint256 pID,\r\n    address pAddr,\r\n    bytes32 pName,\r\n    uint256 timeStamp\r\n  );\r\n  \r\n\r\n  event onSetInviter\r\n  (\r\n    uint256 pID,\r\n    address pAddr,\r\n    uint256 indexed inviterPID,\r\n    address indexed inviterAddr,\r\n    bytes32 indexed inviterName,\r\n    uint256 timeStamp\r\n  );\r\n\r\n  event onOrder\r\n  (\r\n    uint256 indexed pID,\r\n    address indexed pAddr,\r\n    uint256 indexed dayIndex,\r\n    uint256 oID,\r\n    uint256 value,\r\n    uint256 timeStamp\r\n  );\r\n\r\n  event onWithdrawOrderRefund\r\n  (\r\n    uint256 indexed pID,\r\n    address indexed pAddr,\r\n    uint256 oID,\r\n    uint256 value,\r\n    uint256 timeStamp\r\n  );\r\n\r\n  event onWithdrawOrderRefundToOrder\r\n  (\r\n    uint256 indexed pID,\r\n    address indexed pAddr,\r\n    uint256 oID,\r\n    uint256 value,\r\n    uint256 timeStamp\r\n  );\r\n\r\n  event onWithdrawInviteReward\r\n  (\r\n    uint256 indexed pID,\r\n    address indexed pAddr,\r\n    uint256 value,\r\n    uint256 timeStamp\r\n  );\r\n\r\n  event onWithdrawInviteRewardToOrder\r\n  (\r\n    uint256 indexed pID,\r\n    address indexed pAddr,\r\n    uint256 value,\r\n    uint256 timeStamp\r\n  );\r\n    \r\n}\r\nlibrary NameFilter {\r\n  \r\n    using SafeMath for *;\r\n\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length.sub(1)] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i = i.add(1))\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require(_temp[i.add(1)] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\ncontract SafePopo {\r\n\r\n  using SafeMath for *;\r\n\r\n  bool public activated_;\r\n  uint256 public activated_time_;\r\n\r\n  modifier isHuman() {\r\n    address _addr = msg.sender;\r\n    uint256 _codeLength;\r\n      \r\n    assembly {_codeLength := extcodesize(_addr)}\r\n    require (_codeLength == 0, \"sorry humans only\");\r\n    _;\r\n  }\r\n\r\n  modifier isWithinLimits(uint256 _eth) {\r\n    require (_eth >= 0.1 ether, \"0.1 ether at least\");\r\n    require (_eth <= 10000000 ether, \"no, too much ether\");\r\n    _;    \r\n  }\r\n\r\n  modifier isActivated() {\r\n    require (activated_ == true, \"popo is not activated\"); \r\n    _;\r\n  }\r\n\r\n  modifier onlyCEO() {\r\n    require \r\n    (\r\n      msg.sender == 0x5927774a0438f452747b847E4e9097884DA6afE9 || \r\n      msg.sender == 0xA2CDecFe929Eccbd519A6c98b1220b16f5b6B0B5 ||\r\n      msg.sender == 0xede5Adf9F68C02537Cc1737CFF4506BCfFAAB63d\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyCommunityLeader() { \r\n    require \r\n    (\r\n      msg.sender == 0x5927774a0438f452747b847E4e9097884DA6afE9 || \r\n      msg.sender == 0xA2CDecFe929Eccbd519A6c98b1220b16f5b6B0B5 ||\r\n      msg.sender == 0xede5Adf9F68C02537Cc1737CFF4506BCfFAAB63d\r\n    );\r\n    _;\r\n  }\r\n\r\n  function activate() \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n  {\r\n    require (activated_ == false, \"popo has been activated already\");\r\n\r\n    activated_ = true;\r\n    activated_time_ = now;\r\n  }\r\n  \r\n}\r\ncontract CorePopo is SafePopo, PopoEvents {\r\n\r\n  uint256 public startTime_;\r\n\r\n  uint256 public teamPot_;\r\n  uint256 public communityPot_;\r\n  \r\n  mapping (uint256 => uint256) public day_ethIn;\r\n  uint256 public ethIn_;\r\n\r\n  uint256 public dayEthInLimit_ = 300 ether;\r\n  uint256 public playerDayEthInLimit_ = 10 ether;\r\n\r\n  uint256 public pIDIndex_;\r\n  mapping (uint256 => PopoDatasets.Player) public pID_Player_;\r\n  mapping (address => uint256) public addr_pID_;\r\n  mapping (bytes32 => uint256) public name_pID_;\r\n\r\n  mapping (uint256 => uint256) public inviteePID_inviteReward1_;\r\n\r\n  uint256 public oIDIndex_;\r\n  mapping (uint256 => PopoDatasets.Order) public oID_Order_;\r\n\r\n  uint256 [] public refundOIDs_;\r\n  uint256 public refundOIDIndex_;\r\n\r\n  function determinePID ()\r\n    internal\r\n  {\r\n    if (addr_pID_[msg.sender] != 0) {\r\n      return;\r\n    }\r\n\r\n    pIDIndex_ = pIDIndex_.add(1);\r\n    \r\n    pID_Player_[pIDIndex_].addr = msg.sender;\r\n\r\n    addr_pID_[msg.sender] = pIDIndex_;\r\n  }\r\n\r\n  function getDayIndex (uint256 _time)\r\n    internal\r\n    view\r\n    returns (uint256) \r\n  {\r\n    return _time.sub(activated_time_).div(1 days).add(1);\r\n  }\r\n  \r\n}\r\ncontract InvitePopo is CorePopo {\r\n\r\n  using NameFilter for string;\r\n  \r\n  function enableInvite (string _nameString, bytes32 _inviterName)\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n    payable\r\n  {\r\n    require (msg.value == 0.01 ether, \"enable invite need 0.01 ether\");     \r\n\r\n    determinePID();\r\n    determineInviter(addr_pID_[msg.sender], _inviterName);\r\n   \r\n    require (pID_Player_[addr_pID_[msg.sender]].inviteEnable == false, \"you can only enable invite once\");\r\n\r\n    bytes32 _name = _nameString.nameFilter();\r\n    require (name_pID_[_name] == 0, \"your name is already registered by others\");\r\n    \r\n    pID_Player_[addr_pID_[msg.sender]].name = _name;\r\n    pID_Player_[addr_pID_[msg.sender]].inviteEnable = true;\r\n\r\n    name_pID_[_name] = addr_pID_[msg.sender];\r\n\r\n    communityPot_ = communityPot_.add(msg.value);\r\n\r\n    emit PopoEvents.onEnableInvite\r\n    (\r\n      addr_pID_[msg.sender],\r\n      msg.sender,\r\n      _name,\r\n      now\r\n    );\r\n  }\r\n\r\n  function enableInviteOfSU (string _nameString) \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    determinePID();\r\n   \r\n    require (pID_Player_[addr_pID_[msg.sender]].inviteEnable == false, \"you can only enable invite once\");\r\n\r\n    bytes32 _name = _nameString.nameFilter();\r\n    require (name_pID_[_name] == 0, \"your name is already registered by others\");\r\n    \r\n    name_pID_[_name] = addr_pID_[msg.sender];\r\n\r\n    pID_Player_[addr_pID_[msg.sender]].name = _name;\r\n    pID_Player_[addr_pID_[msg.sender]].inviteEnable = true;\r\n  }\r\n\r\n  function determineInviter (uint256 _pID, bytes32 _inviterName) \r\n    internal\r\n  {\r\n    if (pID_Player_[_pID].inviterPID != 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 _inviterPID = name_pID_[_inviterName];\r\n    require (_inviterPID != 0, \"your inviter name must be registered\");\r\n    require (pID_Player_[_inviterPID].inviteEnable == true, \"your inviter must enable invite\");\r\n    require (_inviterPID != _pID, \"you can not invite yourself\");\r\n\r\n    pID_Player_[_pID].inviterPID = _inviterPID;\r\n\r\n    emit PopoEvents.onSetInviter\r\n    (\r\n      _pID,\r\n      msg.sender,\r\n      _inviterPID,\r\n      pID_Player_[_inviterPID].addr,\r\n      _inviterName,\r\n      now\r\n    );\r\n  }\r\n\r\n  function distributeInviteReward (uint256 _pID, uint256 _inviteReward1, uint256 _inviteReward2, uint256 _inviteReward3, uint256 _percent) \r\n    internal\r\n    returns (uint256)\r\n  {\r\n    uint256 inviterPID = pID_Player_[_pID].inviterPID;\r\n    if (pID_Player_[inviterPID].inviteEnable) \r\n    {\r\n      pID_Player_[inviterPID].inviteReward1 = pID_Player_[inviterPID].inviteReward1.add(_inviteReward1);\r\n\r\n      if (inviteePID_inviteReward1_[_pID] == 0) {\r\n        pID_Player_[inviterPID].inviteePIDs.push(_pID);\r\n      }\r\n      inviteePID_inviteReward1_[_pID] = inviteePID_inviteReward1_[_pID].add(_inviteReward1);\r\n\r\n      _percent = _percent.sub(5);\r\n    } \r\n    \r\n    uint256 inviterPID_inviterPID = pID_Player_[inviterPID].inviterPID;\r\n    if (pID_Player_[inviterPID_inviterPID].inviteEnable) \r\n    {\r\n      pID_Player_[inviterPID_inviterPID].inviteReward2 = pID_Player_[inviterPID_inviterPID].inviteReward2.add(_inviteReward2);\r\n\r\n      _percent = _percent.sub(2);\r\n    }\r\n\r\n    uint256 inviterPID_inviterPID_inviterPID = pID_Player_[inviterPID_inviterPID].inviterPID;\r\n    if (pID_Player_[inviterPID_inviterPID_inviterPID].inviteEnable) \r\n    {\r\n      pID_Player_[inviterPID_inviterPID_inviterPID].inviteReward3 = pID_Player_[inviterPID_inviterPID_inviterPID].inviteReward3.add(_inviteReward3);\r\n\r\n      _percent = _percent.sub(1);\r\n    } \r\n\r\n    return\r\n    (\r\n      _percent\r\n    );\r\n  }\r\n  \r\n}\r\ncontract OrderPopo is InvitePopo {\r\n\r\n  function setDayEthInLimit (uint256 dayEthInLimit) \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n  {\r\n    dayEthInLimit_ = dayEthInLimit;\r\n  }\r\n\r\n  function setPlayerDayEthInLimit (uint256 playerDayEthInLimit) \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n  {\r\n    playerDayEthInLimit_ = playerDayEthInLimit;\r\n  }\r\n  \r\n  function order (bytes32 _inviterName)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    require (_nowDayIndex > 2, \"only third day can order\");\r\n            \r\n    determinePID();\r\n    determineInviter(addr_pID_[msg.sender], _inviterName);\r\n\r\n    orderCore(_now, _nowDayIndex, msg.value);\r\n  }\r\n\r\n  function orderInternal (uint256 _value, bytes32 _inviterName)\r\n    internal\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    require (_nowDayIndex > 2, \"only third day can order\");\r\n            \r\n    determinePID();\r\n    determineInviter(addr_pID_[msg.sender], _inviterName);\r\n\r\n    orderCore(_now, _nowDayIndex, _value);\r\n  }\r\n\r\n  function orderCore (uint256 _now, uint256 _nowDayIndex, uint256 _value)\r\n    private\r\n  {\r\n    teamPot_ = teamPot_.add(_value.mul(3).div(100));\r\n    communityPot_ = communityPot_.add(_value.mul(4).div(100));\r\n\r\n    require (day_ethIn[_nowDayIndex] < dayEthInLimit_, \"beyond the day eth in limit\");\r\n    day_ethIn[_nowDayIndex] = day_ethIn[_nowDayIndex].add(_value);\r\n    ethIn_ = ethIn_.add(_value);\r\n\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    if (pID_Player_[_pID].lastOrderDayIndex == _nowDayIndex) {\r\n      require (pID_Player_[_pID].dayEthIn < playerDayEthInLimit_, \"beyond the player day eth in limit\");\r\n      pID_Player_[_pID].dayEthIn = pID_Player_[_pID].dayEthIn.add(_value);\r\n    } else {\r\n      pID_Player_[_pID].lastOrderDayIndex = _nowDayIndex;\r\n      pID_Player_[_pID].dayEthIn = _value;\r\n    }\r\n\r\n    oIDIndex_ = oIDIndex_.add(1);\r\n    \r\n    oID_Order_[oIDIndex_].pID = _pID;\r\n    oID_Order_[oIDIndex_].createTime = _now;\r\n    oID_Order_[oIDIndex_].createDayIndex = _nowDayIndex;\r\n    oID_Order_[oIDIndex_].orderValue = _value;\r\n\r\n    pID_Player_[_pID].oIDs.push(oIDIndex_);\r\n\r\n    refundOIDs_.push(oIDIndex_);\r\n\r\n    uint256 _percent = 33;\r\n    if (pID_Player_[_pID].oIDs.length < 3) {\r\n      _percent = distributeInviteReward(_pID, _value.mul(5).div(100), _value.mul(2).div(100), _value.mul(1).div(100), _percent);\r\n      refund(_nowDayIndex, _value.mul(_percent).div(100));\r\n    } else {\r\n      refund(_nowDayIndex, _value.mul(_percent).div(100));\r\n    }\r\n\r\n    emit PopoEvents.onOrder\r\n    (\r\n      _pID,\r\n      msg.sender,\r\n      _nowDayIndex,\r\n      oIDIndex_,\r\n      _value,\r\n      now\r\n    );\r\n  }\r\n\r\n  function refund (uint256 _nowDayIndex, uint256 _pot)\r\n    private\r\n  {\r\n    while\r\n    (\r\n      (_pot > 0) &&\r\n      (refundOIDIndex_ < refundOIDs_.length)\r\n    )\r\n    {\r\n      (_pot, refundOIDIndex_) = doRefund(_nowDayIndex, refundOIDIndex_, _pot);\r\n    }\r\n  }\r\n  \r\n  function doRefund (uint256 _nowDayIndex, uint256 _refundOIDIndex, uint256 _pot)\r\n    private\r\n    returns (uint256, uint256)\r\n  {\r\n    uint256 _refundOID = refundOIDs_[_refundOIDIndex];\r\n\r\n    uint _orderState = getOrderStateHelper(_nowDayIndex, _refundOID);\r\n    if (_orderState != 1) {\r\n      return\r\n      (\r\n        _pot,\r\n        _refundOIDIndex.add(1)\r\n      );\r\n    }\r\n\r\n    uint256 _maxRefund = oID_Order_[_refundOID].orderValue.mul(60).div(100);\r\n    if (oID_Order_[_refundOID].refund < _maxRefund) {\r\n      uint256 _needRefund = _maxRefund.sub(oID_Order_[_refundOID].refund);\r\n\r\n      if \r\n      (\r\n        _needRefund > _pot\r\n      ) \r\n      {\r\n        oID_Order_[_refundOID].refund = oID_Order_[_refundOID].refund.add(_pot);\r\n\r\n        return\r\n        (\r\n          0,\r\n          _refundOIDIndex\r\n        );\r\n      } \r\n      else\r\n      {\r\n        oID_Order_[_refundOID].refund = oID_Order_[_refundOID].refund.add(_needRefund);\r\n\r\n        return\r\n        (\r\n          _pot.sub(_needRefund),\r\n          _refundOIDIndex.add(1)\r\n        );\r\n      }\r\n    }\r\n    else\r\n    {\r\n      return\r\n      (\r\n        _pot,\r\n        _refundOIDIndex.add(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  function getOrderStateHelper (uint256 _nowDayIndex, uint256 _oID)\r\n    internal\r\n    view\r\n    returns (uint)\r\n  {\r\n    PopoDatasets.Order memory _order = oID_Order_[_oID];\r\n    \r\n    if \r\n    (\r\n      _order.hasWithdrawn\r\n    ) \r\n    {\r\n      return\r\n      (\r\n        3\r\n      );\r\n    } \r\n    else \r\n    {\r\n      if \r\n      (\r\n        _nowDayIndex < _order.createDayIndex || \r\n        _nowDayIndex > _order.createDayIndex.add(5)\r\n      )\r\n      {\r\n        return\r\n        (\r\n          2\r\n        );\r\n      }\r\n      else \r\n      {\r\n        return\r\n        (\r\n          1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n}\r\ncontract InspectorPopo is OrderPopo {\r\n\r\n  function getAdminDashboard () \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n    view \r\n    returns (uint256, uint256)\r\n  {\r\n    return\r\n    (\r\n      teamPot_,\r\n      communityPot_\r\n    ); \r\n  }\r\n\r\n  function getDayEthIn (uint256 _dayIndex) \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n    view \r\n    returns (uint256)\r\n  {\r\n    return\r\n    (\r\n      day_ethIn[_dayIndex]\r\n    ); \r\n  }\r\n\r\n  function getAddressLost (address _addr) \r\n    onlyCEO()\r\n    onlyCommunityLeader()\r\n    public\r\n    view \r\n    returns (uint256) \r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    uint256 pID = addr_pID_[_addr];\r\n    require (pID != 0, \"address need to be registered\");\r\n    \r\n    uint256 _orderValue = 0;\r\n    uint256 _actualTotalRefund = 0;\r\n\r\n    uint256 [] memory _oIDs = pID_Player_[pID].oIDs;\r\n    for (uint256 _index = 0; _index < _oIDs.length; _index = _index.add(1)) {\r\n      PopoDatasets.Order memory _order = oID_Order_[_oIDs[_index]];\r\n      _orderValue = _orderValue.add(_order.orderValue);\r\n      _actualTotalRefund = _actualTotalRefund.add(getOrderActualTotalRefundHelper(_nowDayIndex, _oIDs[_index]));\r\n    }\r\n\r\n    if (_orderValue > _actualTotalRefund) {\r\n      return \r\n      (\r\n        _orderValue.sub(_actualTotalRefund)\r\n      );\r\n    }\r\n    else\r\n    {\r\n      return \r\n      (\r\n        0\r\n      );\r\n    }\r\n  }\r\n\r\n  function getInviteInfo () \r\n    public\r\n    view\r\n    returns (bool, bytes32, uint256, bytes32, uint256, uint256, uint256, uint256)\r\n  {\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    return \r\n    (\r\n      pID_Player_[_pID].inviteEnable,\r\n      pID_Player_[_pID].name,\r\n      pID_Player_[_pID].inviterPID,\r\n      pID_Player_[pID_Player_[_pID].inviterPID].name,\r\n      pID_Player_[_pID].inviteReward1,\r\n      pID_Player_[_pID].inviteReward2,\r\n      pID_Player_[_pID].inviteReward3,\r\n      pID_Player_[_pID].inviteRewardWithdrawn\r\n    );\r\n  }\r\n\r\n  function getInviteePIDs () \r\n    public\r\n    view\r\n    returns (uint256 []) \r\n  {\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    return \r\n    (\r\n      pID_Player_[_pID].inviteePIDs\r\n    );\r\n  }\r\n\r\n  function getInviteeInfo (uint256 _inviteePID) \r\n    public\r\n    view\r\n    returns (uint256, bytes32) \r\n  {\r\n\r\n    require (pID_Player_[_inviteePID].inviterPID == addr_pID_[msg.sender], \"you must have invited this player\");\r\n\r\n    return \r\n    (\r\n      inviteePID_inviteReward1_[_inviteePID],\r\n      pID_Player_[_inviteePID].name\r\n    );\r\n  }\r\n\r\n  function getOrderInfo () \r\n    public\r\n    view\r\n    returns (bool, uint256 []) \r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    bool _isWithinPlayerDayEthInLimits = true;\r\n    if\r\n    (\r\n      (pID_Player_[_pID].lastOrderDayIndex == _nowDayIndex) &&\r\n      (pID_Player_[_pID].dayEthIn >= playerDayEthInLimit_) \r\n    )\r\n    {\r\n      _isWithinPlayerDayEthInLimits = false;\r\n    }\r\n\r\n    return \r\n    (\r\n      _isWithinPlayerDayEthInLimits,\r\n      pID_Player_[_pID].oIDs\r\n    );\r\n  }\r\n\r\n  function getOrder (uint256 _oID) \r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256, uint, uint256)\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    require (oID_Order_[_oID].pID == addr_pID_[msg.sender], \"only owner can get its order\");\r\n\r\n    return \r\n    (\r\n      oID_Order_[_oID].createTime,\r\n      oID_Order_[_oID].createDayIndex,\r\n      oID_Order_[_oID].orderValue,\r\n      getOrderStateHelper(_nowDayIndex, _oID),\r\n      getOrderActualTotalRefundHelper(_nowDayIndex, _oID)\r\n    );\r\n  }\r\n\r\n  function getOverall ()\r\n    public\r\n    view \r\n    returns (uint256, uint256, uint256, uint256, uint256, bool, uint256)\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n    uint256 _tommorrow = _nowDayIndex.mul(1 days).add(activated_time_);\r\n    bool _isWithinDayEthInLimits = day_ethIn[_nowDayIndex] < dayEthInLimit_ ? true : false;\r\n\r\n    return (\r\n      _now,\r\n      _nowDayIndex,\r\n      _tommorrow,\r\n      ethIn_,\r\n      dayEthInLimit_,\r\n      _isWithinDayEthInLimits,\r\n      playerDayEthInLimit_\r\n    ); \r\n  }\r\n\r\n  function getOrderActualTotalRefundHelper (uint256 _nowDayIndex, uint256 _oID) \r\n    internal\r\n    view \r\n    returns (uint256)\r\n  {\r\n    if (oID_Order_[_oID].hasWithdrawn) {\r\n      return\r\n      (\r\n        oID_Order_[_oID].withdrawn\r\n      );\r\n    }\r\n\r\n    uint256 _actualTotalRefund = oID_Order_[_oID].orderValue.mul(60).div(100);\r\n    uint256 _dayGap = _nowDayIndex.sub(oID_Order_[_oID].createDayIndex);\r\n    if (_dayGap > 0) {\r\n      _dayGap = _dayGap > 5 ? 5 : _dayGap;\r\n      uint256 _maxRefund = oID_Order_[_oID].orderValue.mul(12).mul(_dayGap).div(100);\r\n\r\n      if (oID_Order_[_oID].refund < _maxRefund)\r\n      {\r\n        _actualTotalRefund = _actualTotalRefund.add(oID_Order_[_oID].refund);\r\n      } \r\n      else \r\n      {\r\n        _actualTotalRefund = _actualTotalRefund.add(_maxRefund);\r\n      }\r\n    }\r\n    return\r\n    (\r\n      _actualTotalRefund\r\n    );\r\n  }\r\n\r\n}\r\ncontract WithdrawPopo is InspectorPopo {\r\n\r\n  function withdrawOrderRefund(uint256 _oID)\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    PopoDatasets.Order memory _order = oID_Order_[_oID];\r\n    require (_order.pID == addr_pID_[msg.sender], \"only owner can withdraw\");\r\n    require (!_order.hasWithdrawn, \"order refund has been withdrawn\");\r\n\r\n    uint256 _actualTotalRefund = getOrderActualTotalRefundHelper(_nowDayIndex, _oID);\r\n    require (_actualTotalRefund > 0, \"no order refund need to be withdrawn\");\r\n\r\n    msg.sender.transfer(_actualTotalRefund);\r\n\r\n    oID_Order_[_oID].withdrawn = _actualTotalRefund;\r\n    oID_Order_[_oID].hasWithdrawn = true;\r\n\r\n    uint256 _totalRefund = _order.orderValue.mul(60).div(100);\r\n    _totalRefund = _totalRefund.add(_order.refund);\r\n    communityPot_ = communityPot_.add(_totalRefund.sub(_actualTotalRefund));\r\n\r\n    emit PopoEvents.onWithdrawOrderRefund\r\n    (\r\n      _order.pID,\r\n      msg.sender,\r\n      _oID,\r\n      _actualTotalRefund,\r\n      now\r\n    );\r\n  }\r\n\r\n  function withdrawOrderRefundToOrder(uint256 _oID)\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    uint256 _now = now;\r\n    uint256 _nowDayIndex = getDayIndex(_now);\r\n\r\n    PopoDatasets.Order memory _order = oID_Order_[_oID];\r\n    require (_order.pID == addr_pID_[msg.sender], \"only owner can withdraw\");\r\n    require (!_order.hasWithdrawn, \"order refund has been withdrawn\");\r\n\r\n    uint256 _actualTotalRefund = getOrderActualTotalRefundHelper(_nowDayIndex, _oID);\r\n    require (_actualTotalRefund > 0, \"no order refund need to be withdrawn\");\r\n\r\n    orderInternal(_actualTotalRefund, pID_Player_[pID_Player_[_order.pID].inviterPID].name);\r\n\r\n    oID_Order_[_oID].withdrawn = _actualTotalRefund;\r\n    oID_Order_[_oID].hasWithdrawn = true;\r\n\r\n    uint256 _totalRefund = _order.orderValue.mul(60).div(100);\r\n    _totalRefund = _totalRefund.add(_order.refund);\r\n    communityPot_ = communityPot_.add(_totalRefund.sub(_actualTotalRefund));\r\n\r\n    emit PopoEvents.onWithdrawOrderRefundToOrder\r\n    (\r\n      _order.pID,\r\n      msg.sender,\r\n      _oID,\r\n      _actualTotalRefund,\r\n      now\r\n    );\r\n  }\r\n\r\n  function withdrawInviteReward ()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    uint256 _withdrawal = pID_Player_[_pID].inviteReward1\r\n                            .add(pID_Player_[_pID].inviteReward2)\r\n                            .add(pID_Player_[_pID].inviteReward3)\r\n                            .sub(pID_Player_[_pID].inviteRewardWithdrawn);\r\n    require (_withdrawal > 0, \"you have no invite reward to withdraw\");\r\n\r\n    msg.sender.transfer(_withdrawal);\r\n\r\n    pID_Player_[_pID].inviteRewardWithdrawn = pID_Player_[_pID].inviteRewardWithdrawn.add(_withdrawal);\r\n\r\n    emit PopoEvents.onWithdrawInviteReward\r\n    (\r\n      _pID,\r\n      msg.sender,\r\n      _withdrawal,\r\n      now\r\n    );\r\n  }\r\n\r\n  function withdrawInviteRewardToOrder ()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    uint256 _pID = addr_pID_[msg.sender];\r\n\r\n    uint256 _withdrawal = pID_Player_[_pID].inviteReward1\r\n                            .add(pID_Player_[_pID].inviteReward2)\r\n                            .add(pID_Player_[_pID].inviteReward3)\r\n                            .sub(pID_Player_[_pID].inviteRewardWithdrawn);\r\n    require (_withdrawal > 0, \"you have no invite reward to withdraw\");\r\n\r\n    orderInternal(_withdrawal, pID_Player_[pID_Player_[_pID].inviterPID].name);\r\n\r\n    pID_Player_[_pID].inviteRewardWithdrawn = pID_Player_[_pID].inviteRewardWithdrawn.add(_withdrawal);\r\n\r\n    emit PopoEvents.onWithdrawInviteRewardToOrder\r\n    (\r\n      _pID,\r\n      msg.sender,\r\n      _withdrawal,\r\n      now\r\n    );\r\n  }\r\n\r\n  function withdrawTeamPot ()\r\n    onlyCEO()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    if (teamPot_ <= 0) {\r\n      return;\r\n    }\r\n\r\n    msg.sender.transfer(teamPot_);\r\n    teamPot_ = 0;\r\n  }\r\n\r\n  function withdrawCommunityPot ()\r\n    onlyCommunityLeader()\r\n    isActivated()\r\n    isHuman()\r\n    public\r\n  {\r\n    if (communityPot_ <= 0) {\r\n      return;\r\n    }\r\n\r\n    msg.sender.transfer(communityPot_);\r\n    communityPot_ = 0;\r\n  }\r\n\r\n}\r\ncontract Popo is WithdrawPopo {\r\n  \r\n  constructor()\r\n    public \r\n  {\r\n\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getOrderInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pIDIndex_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAddressLost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteePID_inviteReward1_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dayEthInLimit\",\"type\":\"uint256\"}],\"name\":\"setDayEthInLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oID\",\"type\":\"uint256\"}],\"name\":\"withdrawOrderRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dayIndex\",\"type\":\"uint256\"}],\"name\":\"getDayEthIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oIDIndex_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOverall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInviteePIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_time_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOIDIndex_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pID_Player_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"inviteEnable\",\"type\":\"bool\"},{\"name\":\"inviterPID\",\"type\":\"uint256\"},{\"name\":\"inviteReward1\",\"type\":\"uint256\"},{\"name\":\"inviteReward2\",\"type\":\"uint256\"},{\"name\":\"inviteReward3\",\"type\":\"uint256\"},{\"name\":\"inviteRewardWithdrawn\",\"type\":\"uint256\"},{\"name\":\"lastOrderDayIndex\",\"type\":\"uint256\"},{\"name\":\"dayEthIn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"name_pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addr_pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethIn_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"enableInviteOfSU\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oID_Order_\",\"outputs\":[{\"name\":\"pID\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"createDayIndex\",\"type\":\"uint256\"},{\"name\":\"orderValue\",\"type\":\"uint256\"},{\"name\":\"refund\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"hasWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayEthInLimit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeamPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_inviteePID\",\"type\":\"uint256\"}],\"name\":\"getInviteeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInviteReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oID\",\"type\":\"uint256\"}],\"name\":\"withdrawOrderRefundToOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_inviterName\",\"type\":\"bytes32\"}],\"name\":\"enableInvite\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCommunityPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerDayEthInLimit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundOIDs_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oID\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInviteInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInviteRewardToOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminDashboard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"day_ethIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviterName\",\"type\":\"bytes32\"}],\"name\":\"order\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerDayEthInLimit\",\"type\":\"uint256\"}],\"name\":\"setPlayerDayEthInLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onEnableInvite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"inviterPID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"inviterAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"inviterName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onSetInviter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dayIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawOrderRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawOrderRefundToOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawInviteReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawInviteRewardToOrder\",\"type\":\"event\"}]","ContractName":"Popo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c874319752a69bf4765b9d9edeaa45cff30721e348063269dd6f045b1e277f3"}]}