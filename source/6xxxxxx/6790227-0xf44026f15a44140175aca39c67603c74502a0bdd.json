{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract UpgradeController is Ownable {\r\n    function migrate(address _oldAddress, address _newAddress) external onlyOwner {\r\n        require(_oldAddress != _newAddress, \"addresses are equal\");\r\n        Upgradable _oldContract = Upgradable(_oldAddress);\r\n        Upgradable _newContract = Upgradable(_newAddress);\r\n        Upgradable _externalDependency;\r\n        Upgradable _internalDependency;\r\n        address[] memory _externalDependenciesOfInternal;\r\n        address[] memory _internalDependenciesOfExternal;\r\n        address[] memory _externalDependencies = _oldContract.getExternalDependencies();\r\n        address[] memory _internalDependencies = _oldContract.getInternalDependencies();\r\n        require(\r\n            _externalDependencies.length > 0 ||\r\n            _internalDependencies.length > 0,\r\n            \"no dependencies\"\r\n        );\r\n        uint256 i;\r\n        uint256 j;\r\n\r\n        for (i = 0; i < _externalDependencies.length; i++) {\r\n            _externalDependency = Upgradable(_externalDependencies[i]);\r\n            _internalDependenciesOfExternal = _externalDependency.getInternalDependencies();\r\n\r\n            for (j = 0; j < _internalDependenciesOfExternal.length; j++) {\r\n                if (_internalDependenciesOfExternal[j] == _oldAddress) {\r\n                    _internalDependenciesOfExternal[j] = _newAddress;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            _externalDependency.setInternalDependencies(_internalDependenciesOfExternal);\r\n        }\r\n\r\n        for (i = 0; i < _internalDependencies.length; i++) {\r\n            _internalDependency = Upgradable(_internalDependencies[i]);\r\n            _externalDependenciesOfInternal = _internalDependency.getExternalDependencies();\r\n\r\n            for (j = 0; j < _externalDependenciesOfInternal.length; j++) {\r\n                if (_externalDependenciesOfInternal[j] == _oldAddress) {\r\n                    _externalDependenciesOfInternal[j] = _newAddress;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            _internalDependency.setExternalDependencies(_externalDependenciesOfInternal);\r\n        }\r\n\r\n        _newContract.setInternalDependencies(_internalDependencies);\r\n        _newContract.setExternalDependencies(_externalDependencies);\r\n\r\n        // Return old contract ownership to original owner for\r\n        // cases when we want to transfer some data manually\r\n        returnOwnership(_oldAddress);\r\n    }\r\n\r\n    // Return ownership to original owner. That's important for cases when\r\n    // the new contract have an additional dependency that couldn't be\r\n    // transferred from the old contract. After that original owner\r\n    // have to transfer ownership to this contract again.\r\n    function returnOwnership(address _address) public onlyOwner {\r\n        Upgradable(_address).transferOwnership(owner);\r\n    }\r\n\r\n    function pause(address _address) external onlyOwner {\r\n        Pausable(_address).pause();\r\n    }\r\n\r\n    function unpause(address _address) external onlyOwner {\r\n        Pausable(_address).unpause();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"returnOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UpgradeController","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://30f75743e9e2257824a84af3e0bd5adb7b9ab411610d650a4a50bade35046b65"}]}