{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n/******************************************************************************\\\r\n* Author: Nick Mudge, nick@mokens.io\r\n* Mokens\r\n* Copyright (c) 2018\r\n*\r\n* Re-creates the mokens from the old Mokens contract\r\n* (0xAAF401585B72c678AfC09036510D3eF759BDaf7e) to the new Mokens contract.\r\n/******************************************************************************/\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Storage contracts\r\n////////////\r\n//Some delegate contracts are listed with storage contracts they inherit.\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Mokens\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage0 {\r\n    // funcId => delegate contract\r\n    mapping(bytes4 => address) internal delegates;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenUpdates\r\n//MokenOwner\r\n//QueryMokenDelegates\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage1 is Storage0 {\r\n    address internal contractOwner;\r\n    bytes[] internal funcSignatures;\r\n    // signature => index+1\r\n    mapping(bytes => uint256) internal funcSignatureToIndex;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokensSupportsInterfaces\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage2 is Storage1 {\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenRootOwnerOf\r\n//MokenERC721Metadata\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage3 is Storage2 {\r\n    struct Moken {\r\n        string name;\r\n        uint256 data;\r\n        uint256 parentTokenId;\r\n    }\r\n    //tokenId => moken\r\n    mapping(uint256 => Moken) internal mokens;\r\n    uint256 internal mokensLength;\r\n    // child address => child tokenId => tokenId+1\r\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC721Enumerable\r\n//MokenLinkHash\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage4 is Storage3 {\r\n    // root token owner address => (tokenId => approved address)\r\n    mapping(address => mapping(uint256 => address)) internal rootOwnerAndTokenIdToApprovedAddress;\r\n    // token owner => (operator address => bool)\r\n    mapping(address => mapping(address => bool)) internal tokenOwnerToOperators;\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint32[]) internal ownedTokens;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC721TopDown\r\n//MokenERC998ERC721TopDownBatch\r\n//MokenERC721\r\n//MokenERC721Batch\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage5 is Storage4 {\r\n    // tokenId => (child address => array of child tokens)\r\n    mapping(uint256 => mapping(address => uint256[])) internal childTokens;\r\n    // tokenId => (child address => (child token => child index)\r\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal childTokenIndex;\r\n    // tokenId => (child address => contract index)\r\n    mapping(uint256 => mapping(address => uint256)) internal childContractIndex;\r\n    // tokenId => child contract\r\n    mapping(uint256 => address[]) internal childContracts;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC20TopDown\r\n//MokenStateChange\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage6 is Storage5 {\r\n    // tokenId => token contract\r\n    mapping(uint256 => address[]) internal erc20Contracts;\r\n    // tokenId => (token contract => token contract index)\r\n    mapping(uint256 => mapping(address => uint256)) erc20ContractIndex;\r\n    // tokenId => (token contract => balance)\r\n    mapping(uint256 => mapping(address => uint256)) internal erc20Balances;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC721BottomUp\r\n//MokenERC998ERC721BottomUpBatch\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage7 is Storage6 {\r\n    // parent address => (parent tokenId => array of child tokenIds)\r\n    mapping(address => mapping(uint256 => uint32[])) internal parentToChildTokenIds;\r\n    // tokenId => position in childTokens array\r\n    mapping(uint256 => uint256) internal tokenIdToChildTokenIdsIndex;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenMinting\r\n//MokenMintContractManagement\r\n//MokenEras\r\n//QueryMokenData\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage8 is Storage7 {\r\n    // index => era\r\n    mapping(uint256 => bytes32) internal eras;\r\n    uint256 internal eraLength;\r\n    // era => index+1\r\n    mapping(bytes32 => uint256) internal eraIndex;\r\n    uint256 internal mintPriceOffset; // = 0 szabo;\r\n    uint256 internal mintStepPrice; // = 500 szabo;\r\n    uint256 internal mintPriceBuffer; // = 5000 szabo;\r\n    address[] internal mintContracts;\r\n    mapping(address => uint256) internal mintContractIndex;\r\n    //moken name => tokenId+1\r\n    mapping(string => uint256) internal tokenByName_;\r\n}\r\n\r\ncontract MokenContractTransitionMinting is Storage8 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Mint(\r\n        address indexed mintContract,\r\n        address indexed owner,\r\n        bytes32 indexed era,\r\n        string mokenName,\r\n        bytes32 data,\r\n        uint256 tokenId,\r\n        bytes32 currencyName,\r\n        uint256 price\r\n    );\r\n\r\n    function recreateMokens(address[] _tokenOwners, string _mokenNames, uint256 delimiter) public {\r\n        require(msg.sender == contractOwner, \"Must own Mokens contract.\");\r\n        string memory mokenNames = string(_mokenNames);\r\n        uint256 mokenNamesNum;\r\n        uint256 namesEnd;\r\n        uint256 pos;\r\n        uint256 start;\r\n        assembly {\r\n            pos := add(mokenNames,32)\r\n            start := pos\r\n            namesEnd := add(pos,mload(mokenNames))\r\n        }\r\n        uint256 num;\r\n        uint256 char;\r\n        for (; pos < namesEnd; pos++) {\r\n            assembly {char := byte(0,mload(pos))}\r\n            if (char == delimiter) {\r\n                num = (pos - start);\r\n                pos++;\r\n                start = pos;\r\n                assembly {\r\n                    mstore(mokenNames,num)\r\n                }\r\n                mint(_tokenOwners[mokenNamesNum], mokenNames);\r\n                mokenNamesNum++;\r\n                assembly {\r\n                    mokenNames := add(mokenNames,add(num, 1))\r\n                }\r\n            }\r\n        }\r\n        require(mokenNamesNum == _tokenOwners.length, \"Number of moken names does not match number of tokenOwers.\");\r\n    }\r\n\r\n\r\n    function mint(address _tokenOwner, string _mokenName) internal {\r\n        require(_tokenOwner != address(0), \"Owner cannot be the 0 address.\");\r\n\r\n        uint256 tokenId = mokensLength++;\r\n\r\n        uint256 eraIndex_ = 0;\r\n        uint256 ownedTokensIndex = ownedTokens[_tokenOwner].length;\r\n\r\n        // adding the current era index, ownedTokenIndex and owner address to data\r\n        // this saves gas for each mint.\r\n        uint256 data = 0 | eraIndex_ << 176 | ownedTokensIndex << 160 | uint160(_tokenOwner);\r\n\r\n        // create moken\r\n        mokens[tokenId].name = _mokenName;\r\n        mokens[tokenId].data = data;\r\n\r\n        //add moken to the specific owner\r\n        ownedTokens[_tokenOwner].push(uint32(tokenId));\r\n\r\n        //emit events\r\n        emit Transfer(address(0), _tokenOwner, tokenId);\r\n        emit Mint(this, _tokenOwner, eras[eraIndex_], _mokenName, bytes32(data), tokenId, \"Ether\", 0);\r\n        validateAndLower(_mokenName);\r\n        require(tokenByName_[_mokenName] == 0, \"Moken name already exists.\");\r\n        tokenByName_[_mokenName] = tokenId + 1;\r\n    }\r\n\r\n    function validateAndLower(string _s) internal pure returns (string mokenName) {\r\n        assembly {\r\n        // get length of _s\r\n            let len := mload(_s)\r\n        // get position of _s\r\n            let p := add(_s, 0x20)\r\n        // _s cannot be 0 characters\r\n            if eq(len, 0) {\r\n                revert(0, 0)\r\n            }\r\n        // _s cannot be more than 100 characters\r\n            if gt(len, 100) {\r\n                revert(0, 0)\r\n            }\r\n        // get first character\r\n            let b := byte(0, mload(add(_s, 0x20)))\r\n        // first character cannot be whitespace/unprintable\r\n            if lt(b, 0x21) {\r\n                revert(0, 0)\r\n            }\r\n        // get last character\r\n            b := byte(0, mload(add(p, sub(len, 1))))\r\n        // last character cannot be whitespace/unprintable\r\n            if lt(b, 0x21) {\r\n                revert(0, 0)\r\n            }\r\n        // loop through _s and lowercase uppercase characters\r\n            for {let end := add(p, len)}\r\n            lt(p, end)\r\n            {p := add(p, 1)}\r\n            {\r\n                b := byte(0, mload(p))\r\n                if lt(b, 0x5b) {\r\n                    if gt(b, 0x40) {\r\n                        mstore8(p, add(b, 32))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return _s;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwners\",\"type\":\"address[]\"},{\"name\":\"_mokenNames\",\"type\":\"string\"},{\"name\":\"delimiter\",\"type\":\"uint256\"}],\"name\":\"recreateMokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"mintContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"era\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"mokenName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currencyName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"MokenContractTransitionMinting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://894f456bc856544870dde7a70bd0d00e115138a5638e08828a28ab9e976c9c55"}]}