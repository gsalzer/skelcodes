{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n * @title ERC20 Interface\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SwapToken\r\n */\r\ncontract  SwapToken{\r\n    using SafeMath for uint256;\r\n    ERC20 public oldToken;\r\n    ERC20 public newToken;\r\n    address public tokenOwner;\r\n\r\n    address public owner;\r\n    bool public swap_able;\r\n    bool public setup_token;\r\n\r\n    event Swap(address sender, uint256 amount);\r\n    event SwapAble(bool swapable);\r\n\r\n    modifier isOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isSwap() {\r\n        require (swap_able);\r\n        _;\r\n    }\r\n\r\n    modifier isNotSetup() {\r\n        require (!setup_token);\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n        swap_able = false;\r\n    }\r\n\r\n    function setupToken(address _oldToken, address _newToken, address _tokenOwner)\r\n    public\r\n    isNotSetup\r\n    isOwner\r\n    {\r\n        require(_oldToken != 0 && _newToken != 0 && _tokenOwner != 0);\r\n        oldToken = ERC20(_oldToken);\r\n        newToken = ERC20(_newToken);\r\n        tokenOwner = _tokenOwner;\r\n        setup_token = true;\r\n    }\r\n\r\n    function swapAble(bool _swap_able)\r\n    public\r\n    isOwner\r\n    {\r\n        swap_able = _swap_able;\r\n        emit SwapAble(_swap_able);\r\n    }\r\n\r\n    function withdrawOldToken(address to, uint256 amount)\r\n    public\r\n    isOwner\r\n    returns (bool success)\r\n    {\r\n        require(oldToken.transfer(to, amount));\r\n        return true;\r\n    }\r\n\r\n    function swapAbleToken()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return newToken.allowance(tokenOwner, this);\r\n    }\r\n\r\n    function swapToken(uint256 amount)\r\n    public\r\n    isSwap\r\n    returns (bool success)\r\n    {\r\n        require(newToken.allowance(tokenOwner, this) >= amount);\r\n        require(oldToken.transferFrom(msg.sender, this, amount));\r\n        require(newToken.transferFrom(tokenOwner, msg.sender, amount));\r\n        emit Swap(msg.sender, amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_swap_able\",\"type\":\"bool\"}],\"name\":\"swapAble\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOldToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swap_able\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldToken\",\"type\":\"address\"},{\"name\":\"_newToken\",\"type\":\"address\"},{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"setupToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapAbleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setup_token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"swapable\",\"type\":\"bool\"}],\"name\":\"SwapAble\",\"type\":\"event\"}]","ContractName":"SwapToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://78c7ee20f3caad71a2897870f845414625ca0d30bfb5937c9d9662b6470d176e"}]}