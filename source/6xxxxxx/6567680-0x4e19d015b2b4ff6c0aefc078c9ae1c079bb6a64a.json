{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * UserRegistry.sol\r\n * Mt Pelerin user registry.\r\n\r\n * The unflattened code is available through this github tag:\r\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-1\r\n\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n\r\n * @notice All matters regarding the intellectual property of this code \r\n * @notice or software are subject to Swiss Law without reference to its \r\n * @notice conflicts of law rules.\r\n\r\n * @notice License for each contract is available in the respective file\r\n * @notice or in the LICENSE.md file.\r\n * @notice https://github.com/MtPelerin/\r\n\r\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\r\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Authority.sol\r\n\r\n/**\r\n * @title Authority\r\n * @dev The Authority contract has an authority address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Authority means to represent a legal entity that is entitled to specific rights\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n * AU01: Message sender must be an authority\r\n */\r\ncontract Authority is Ownable {\r\n\r\n  address authority;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the authority.\r\n   */\r\n  modifier onlyAuthority {\r\n    require(msg.sender == authority, \"AU01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev return the address associated to the authority\r\n   */\r\n  function authorityAddress() public view returns (address) {\r\n    return authority;\r\n  }\r\n\r\n  /**\r\n   * @dev rdefines an authority\r\n   * @param _name the authority name\r\n   * @param _address the authority address.\r\n   */\r\n  function defineAuthority(string _name, address _address) public onlyOwner {\r\n    emit AuthorityDefined(_name, _address);\r\n    authority = _address;\r\n  }\r\n\r\n  event AuthorityDefined(\r\n    string name,\r\n    address _address\r\n  );\r\n}\r\n\r\n// File: contracts/interface/IRule.sol\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IUserRegistry.sol\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n **/\r\ncontract IUserRegistry {\r\n\r\n  function registerManyUsers(address[] _addresses, uint256 _validUntilTime)\r\n    public;\r\n\r\n  function attachManyAddresses(uint256[] _userIds, address[] _addresses)\r\n    public;\r\n\r\n  function detachManyAddresses(address[] _addresses)\r\n    public;\r\n\r\n  function userCount() public view returns (uint256);\r\n  function userId(address _address) public view returns (uint256);\r\n  function addressConfirmed(address _address) public view returns (bool);\r\n  function validUntilTime(uint256 _userId) public view returns (uint256);\r\n  function suspended(uint256 _userId) public view returns (bool);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    public view returns (uint256);\r\n\r\n  function isAddressValid(address _address) public view returns (bool);\r\n  function isValid(uint256 _userId) public view returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime) public;\r\n  function attachAddress(uint256 _userId, address _address) public;\r\n  function confirmSelf() public;\r\n  function detachAddress(address _address) public;\r\n  function detachSelf() public;\r\n  function detachSelfAddress(address _address) public;\r\n  function suspendUser(uint256 _userId) public;\r\n  function unsuspendUser(uint256 _userId) public;\r\n  function suspendManyUsers(uint256[] _userIds) public;\r\n  function unsuspendManyUsers(uint256[] _userIds) public;\r\n  function updateUser(uint256 _userId, uint256 _validUntil, bool _suspended)\r\n    public;\r\n\r\n  function updateManyUsers(\r\n    uint256[] _userIds,\r\n    uint256 _validUntil,\r\n    bool _suspended) public;\r\n\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    public;\r\n\r\n  function updateManyUsersExtended(\r\n    uint256[] _userIds,\r\n    uint256 _key,\r\n    uint256 _value) public;\r\n}\r\n\r\n// File: contracts/UserRegistry.sol\r\n\r\n/**\r\n * @title UserRegistry\r\n * @dev UserRegistry contract\r\n * Configure and manage users\r\n * Extended may be used externaly to store data within a user context\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n * UR01: Users length does not match addresses length\r\n * UR02: UserId is invalid\r\n * UR03: WalletOwner is invalid\r\n * UR04: WalletOwner is already confirmed\r\n * UR05: User is already suspended\r\n * UR06: User is not suspended\r\n*/\r\ncontract UserRegistry is IUserRegistry, Authority {\r\n\r\n  struct User {\r\n    uint256 validUntilTime;\r\n    bool suspended;\r\n    mapping(uint256 => uint256) extended;\r\n  }\r\n  struct WalletOwner {\r\n    uint256 userId;\r\n    bool confirmed;\r\n  }\r\n\r\n  mapping(uint256 => User) internal users;\r\n  mapping(address => WalletOwner) internal walletOwners;\r\n  uint256 public userCount;\r\n\r\n  /**\r\n   * @dev contructor\r\n   **/\r\n  constructor(address[] _addresses, uint256 _validUntilTime) public {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      registerUserInternal(_addresses[i], _validUntilTime);\r\n      walletOwners[_addresses[i]].confirmed = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev register many users\r\n   */\r\n  function registerManyUsers(address[] _addresses, uint256 _validUntilTime)\r\n    public onlyAuthority\r\n  {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      registerUserInternal(_addresses[i], _validUntilTime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev attach many addresses to many users\r\n   */\r\n  function attachManyAddresses(uint256[] _userIds, address[] _addresses)\r\n    public onlyAuthority\r\n  {\r\n    require(_addresses.length == _userIds.length, \"UR01\");\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      attachAddress(_userIds[i], _addresses[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev detach many addresses association between addresses and their respective users\r\n   */\r\n  function detachManyAddresses(address[] _addresses) public onlyAuthority {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      detachAddress(_addresses[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev number of user registred\r\n   */\r\n  function userCount() public view returns (uint256) {\r\n    return userCount;\r\n  }\r\n\r\n  /**\r\n   * @dev the userId associated to the provided address\r\n   */\r\n  function userId(address _address) public view returns (uint256) {\r\n    return walletOwners[_address].userId;\r\n  }\r\n\r\n  /**\r\n   * @dev the userId associated to the provided address if the user is valid\r\n   */\r\n  function validUserId(address _address) public view returns (uint256) {\r\n    if (isAddressValid(_address)) {\r\n      return walletOwners[_address].userId;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev the userId associated to the provided address\r\n   */\r\n  function addressConfirmed(address _address) public view returns (bool) {\r\n    return walletOwners[_address].confirmed;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the time at which user validity ends\r\n   */\r\n  function validUntilTime(uint256 _userId) public view returns (uint256) {\r\n    return users[_userId].validUntilTime;\r\n  }\r\n\r\n  /**\r\n   * @dev is the user suspended\r\n   */\r\n  function suspended(uint256 _userId) public view returns (bool) {\r\n    return users[_userId].suspended;\r\n  }\r\n\r\n  /**\r\n   * @dev access to extended user data\r\n   */\r\n  function extended(uint256 _userId, uint256 _key)\r\n    public view returns (uint256)\r\n  {\r\n    return users[_userId].extended[_key];\r\n  }\r\n\r\n  /**\r\n   * @dev validity of the current user\r\n   */\r\n  function isAddressValid(address _address) public view returns (bool) {\r\n    return walletOwners[_address].confirmed &&\r\n      isValid(walletOwners[_address].userId);\r\n  }\r\n\r\n  /**\r\n   * @dev validity of the current user\r\n   */\r\n  function isValid(uint256 _userId) public view returns (bool) {\r\n    return isValidInternal(users[_userId]);\r\n  }\r\n\r\n  /**\r\n   * @dev register a user\r\n   */\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    public onlyAuthority\r\n  {\r\n    registerUserInternal(_address, _validUntilTime);\r\n  }\r\n\r\n  /**\r\n   * @dev register a user\r\n   */\r\n  function registerUserInternal(address _address, uint256 _validUntilTime)\r\n    public\r\n  {\r\n    require(walletOwners[_address].userId == 0, \"UR03\");\r\n    users[++userCount] = User(_validUntilTime, false);\r\n    walletOwners[_address] = WalletOwner(userCount, false);\r\n  }\r\n\r\n  /**\r\n   * @dev attach an address with a user\r\n   */\r\n  function attachAddress(uint256 _userId, address _address)\r\n    public onlyAuthority\r\n  {\r\n    require(_userId > 0 && _userId <= userCount, \"UR02\");\r\n    require(walletOwners[_address].userId == 0, \"UR03\");\r\n    walletOwners[_address] = WalletOwner(_userId, false);\r\n  }\r\n\r\n  /**\r\n   * @dev confirm the address by the user to activate it\r\n   */\r\n  function confirmSelf() public {\r\n    require(walletOwners[msg.sender].userId != 0, \"UR03\");\r\n    require(!walletOwners[msg.sender].confirmed, \"UR04\");\r\n    walletOwners[msg.sender].confirmed = true;\r\n  }\r\n\r\n  /**\r\n   * @dev detach the association between an address and its user\r\n   */\r\n  function detachAddress(address _address) public onlyAuthority {\r\n    require(walletOwners[_address].userId != 0, \"UR03\");\r\n    delete walletOwners[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev detach the association between an address and its user\r\n   */\r\n  function detachSelf() public {\r\n    detachSelfAddress(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev detach the association between an address and its user\r\n   */\r\n  function detachSelfAddress(address _address) public {\r\n    uint256 senderUserId = walletOwners[msg.sender].userId;\r\n    require(senderUserId != 0, \"UR03\");\r\n    require(walletOwners[_address].userId == senderUserId, \"UR06\");\r\n    delete walletOwners[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev suspend a user\r\n   */\r\n  function suspendUser(uint256 _userId) public onlyAuthority {\r\n    require(_userId > 0 && _userId <= userCount, \"UR02\");\r\n    require(!users[_userId].suspended, \"UR06\");\r\n    users[_userId].suspended = true;\r\n  }\r\n\r\n  /**\r\n   * @dev unsuspend a user\r\n   */\r\n  function unsuspendUser(uint256 _userId) public onlyAuthority {\r\n    require(_userId > 0 && _userId <= userCount, \"UR02\");\r\n    require(users[_userId].suspended, \"UR06\");\r\n    users[_userId].suspended = false;\r\n  }\r\n\r\n  /**\r\n   * @dev suspend many users\r\n   */\r\n  function suspendManyUsers(uint256[] _userIds) public onlyAuthority {\r\n    for (uint256 i = 0; i < _userIds.length; i++) {\r\n      suspendUser(_userIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev unsuspend many users\r\n   */\r\n  function unsuspendManyUsers(uint256[] _userIds) public onlyAuthority {\r\n    for (uint256 i = 0; i < _userIds.length; i++) {\r\n      unsuspendUser(_userIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev update a user\r\n   */\r\n  function updateUser(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) public onlyAuthority\r\n  {\r\n    require(_userId > 0 && _userId <= userCount, \"UR02\");\r\n    users[_userId].validUntilTime = _validUntilTime;\r\n    users[_userId].suspended = _suspended;\r\n  }\r\n\r\n  /**\r\n   * @dev update many users\r\n   */\r\n  function updateManyUsers(\r\n    uint256[] _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) public onlyAuthority\r\n  {\r\n    for (uint256 i = 0; i < _userIds.length; i++) {\r\n      updateUser(_userIds[i], _validUntilTime, _suspended);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev update user extended information\r\n   */\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    public onlyAuthority\r\n  {\r\n    require(_userId > 0 && _userId <= userCount, \"UR02\");\r\n    users[_userId].extended[_key] = _value;\r\n  }\r\n\r\n  /**\r\n   * @dev update many users' extended information\r\n   */\r\n  function updateManyUsersExtended(\r\n    uint256[] _userIds,\r\n    uint256 _key,\r\n    uint256 _value) public onlyAuthority\r\n  {\r\n    for (uint256 i = 0; i < _userIds.length; i++) {\r\n      updateUserExtended(_userIds[i], _key, _value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev validity of the current user\r\n   */\r\n  function isValidInternal(User user) internal view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return !user.suspended && user.validUntilTime > now;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"suspendUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"validUntilTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"detachManyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateUserExtended\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"}],\"name\":\"registerManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"}],\"name\":\"registerUserInternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"attachAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"unsuspendUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"detachAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint256[]\"}],\"name\":\"suspendManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"validUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"detachSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"suspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint256[]\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"attachManyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"extended\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"detachSelfAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint256[]\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"},{\"name\":\"_suspended\",\"type\":\"bool\"}],\"name\":\"updateManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"},{\"name\":\"_suspended\",\"type\":\"bool\"}],\"name\":\"updateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint256[]\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateManyUsersExtended\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userIds\",\"type\":\"uint256[]\"}],\"name\":\"unsuspendManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"defineAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_validUntilTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AuthorityDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UserRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://003ea36d035c1cda57d299bb611404946b1f7968df454945623923bf5791b247"}]}