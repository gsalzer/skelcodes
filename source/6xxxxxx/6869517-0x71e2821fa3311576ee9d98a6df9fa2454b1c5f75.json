{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/*\r\n* Pantheon China 第一份智能合約提供穩定的收入。 \r\n* 智能合約可確保您的資金免遭盜竊和黑客攻擊\r\n* 不要投入超過你可以輸的\r\n* 我們正在等待一場大型比賽\r\n*/\r\n\r\ncontract PantheonEcoSystemChina {\r\n\r\n    struct UserRecord {\r\n        address referrer;\r\n        uint tokens;\r\n        uint gained_funds;\r\n        uint ref_funds;\r\n        // 這個領域可能是負面的\r\n        int funds_correction;\r\n    }\r\n\r\n    using SafeMath for uint;\r\n    using SafeMathInt for int;\r\n    using Fee for Fee.fee;\r\n    using ToAddress for bytes;\r\n\r\n    // ERC20\r\n    string constant public name = \"PantheonEcoSystem China\";\r\n    string constant public symbol = \"PEC\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    // Fees\r\n    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%\r\n    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%\r\n    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%\r\n    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%\r\n\r\n    // 最少量的令牌將成為推薦計劃的參與者\r\n    uint constant private minimal_stake = 10e18;\r\n\r\n    // 轉換eth < - >令牌的因素，具有所需的計算精度\r\n    uint constant private precision_factor = 1e18;\r\n\r\n    // 定價政策\r\n    //  - 如果用戶購買1個令牌，價格將增加“price_offset”值\r\n    //  - 如果用戶賣出1個令牌，價格將降低“price_offset”值\r\n    // 有關詳細信息，請參閱方法“fundsToTokens”和“tokensToFunds”\r\n    uint private price = 1e29; // 100 Gwei * precision_factor\r\n    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor\r\n\r\n    // 令牌總數\r\n    uint private total_supply = 0;\r\n\r\n    // 令牌持有者之間共享的總利潤。由於此參數，它並不能準確反映資金總額\r\n    // 可以修改以在總供應量發生變化時保持真實用戶的股息\r\n    // 有關詳細信息，請參閱方法“dividendsOf”並在代碼中使用“funds_correction”\r\n    uint private shared_profit = 0;\r\n\r\n    // 用戶數據的映射\r\n    mapping(address => UserRecord) private user_data;\r\n\r\n    // ==== 修改 ==== //\r\n\r\n    modifier onlyValidTokenAmount(uint tokens) {\r\n        require(tokens > 0, \"令牌數量必須大於零\");\r\n        require(tokens <= user_data[msg.sender].tokens, \"你沒有足夠的令牌\");\r\n        _;\r\n    }\r\n\r\n    // ==== 上市 API ==== //\r\n\r\n    // ---- 寫作方法 ---- //\r\n\r\n    function () public payable {\r\n        buy(msg.data.toAddr());\r\n    }\r\n\r\n    /*\r\n    *  從收到的資金購買代幣\r\n    */\r\n    function buy(address referrer) public payable {\r\n\r\n        // 報名費\r\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);\r\n        require(fee_funds != 0, \"Incoming funds is too small\");\r\n\r\n        // 更新用戶的推薦人\r\n        //  - 你不能成為自己的推薦人\r\n        //  - 用戶和他的推薦人將在一起生活\r\n        UserRecord storage user = user_data[msg.sender];\r\n        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        // 申請推薦獎金\r\n        if (user.referrer != 0x0) {\r\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);\r\n            require(fee_funds != 0, \"收入資金太小\");\r\n        }\r\n\r\n        // 計算代幣金額和變更價格\r\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\r\n        require(tokens != 0, \"收入資金太小\");\r\n        price = _price;\r\n\r\n        // 薄荷代幣，增加共享利潤\r\n        mintTokens(msg.sender, tokens);\r\n        shared_profit = shared_profit.add(fee_funds);\r\n\r\n        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);\r\n    }\r\n\r\n    /*\r\n    *  出售給定數量的代幣並獲得資金\r\n    */\r\n    function sell(uint tokens) public onlyValidTokenAmount(tokens) {\r\n\r\n        // 計算資金數額和變更價格\r\n        (uint funds, uint _price) = tokensToFunds(tokens);\r\n        require(funds != 0, \"沒有足夠的令牌來做這件事\");\r\n        price = _price;\r\n\r\n        // 申請費\r\n        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);\r\n        require(fee_funds != 0, \"沒有足夠的令牌來做這件事\");\r\n\r\n        // 刻錄令牌並為用戶的股息增加資金\r\n        burnTokens(msg.sender, tokens);\r\n        UserRecord storage user = user_data[msg.sender];\r\n        user.gained_funds = user.gained_funds.add(taxed_funds);\r\n\r\n        // 增加共享利潤\r\n        shared_profit = shared_profit.add(fee_funds);\r\n\r\n        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);\r\n    }\r\n\r\n    /*\r\n    *  將給定數量的令牌從發件人轉移到另一個用戶\r\n    * ERC20\r\n    */\r\n    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {\r\n\r\n        require(to_addr != msg.sender, \"You cannot transfer tokens to yourself\");\r\n\r\n        // 申請費\r\n        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);\r\n        require(fee_tokens != 0, \"Insufficient tokens to do that\");\r\n\r\n        // 計算資金數額和變更價格\r\n        (uint funds, uint _price) = tokensToFunds(fee_tokens);\r\n        require(funds != 0, \"Insufficient tokens to do that\");\r\n        price = _price;\r\n\r\n        // 燃燒和薄荷代幣，不含費用\r\n        burnTokens(msg.sender, tokens);\r\n        mintTokens(to_addr, taxed_tokens);\r\n\r\n        // 增加共享利潤\r\n        shared_profit = shared_profit.add(funds);\r\n\r\n        emit Transfer(msg.sender, to_addr, tokens);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    *  再投資所有股息\r\n    */\r\n    function reinvest() public {\r\n\r\n        // 獲得所有股息\r\n        uint funds = dividendsOf(msg.sender);\r\n        require(funds > 0, \"You have no dividends\");\r\n\r\n        // 做出更正，之後的事件將為0\r\n        UserRecord storage user = user_data[msg.sender];\r\n        user.funds_correction = user.funds_correction.add(int(funds));\r\n\r\n        // 申請費\r\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);\r\n        require(fee_funds != 0, \"Insufficient dividends to do that\");\r\n\r\n        // 申請推薦獎金\r\n        if (user.referrer != 0x0) {\r\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);\r\n            require(fee_funds != 0, \"Insufficient dividends to do that\");\r\n        }\r\n\r\n        // 計算代幣金額和變更價格\r\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\r\n        require(tokens != 0, \"Insufficient dividends to do that\");\r\n        price = _price;\r\n\r\n        // 薄荷代幣，增加共享利潤\r\n        mintTokens(msg.sender, tokens);\r\n        shared_profit = shared_profit.add(fee_funds);\r\n\r\n        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);\r\n    }\r\n\r\n    /*\r\n    *  撤回所有股息\r\n    */\r\n    function withdraw() public {\r\n\r\n        // 獲得所有股息\r\n        uint funds = dividendsOf(msg.sender);\r\n        require(funds > 0, \"You have no dividends\");\r\n\r\n        // 做出更正，之後的事件將為0\r\n        UserRecord storage user = user_data[msg.sender];\r\n        user.funds_correction = user.funds_correction.add(int(funds));\r\n\r\n        // 發送資金\r\n        msg.sender.transfer(funds);\r\n\r\n        emit Withdrawal(msg.sender, funds, now);\r\n    }\r\n\r\n    /*\r\n    *  出售所有代幣和分紅\r\n    */\r\n    function exit() public {\r\n\r\n        // 賣掉所有代幣\r\n        uint tokens = user_data[msg.sender].tokens;\r\n        if (tokens > 0) {\r\n            sell(tokens);\r\n        }\r\n\r\n        withdraw();\r\n    }\r\n\r\n    /*\r\n    * 警告！此方法在令牌持有者之間分配所有傳入資金，並且不提供任何內容\r\n    * 它將在未來由我們的生態系統中的其他合同/地址使用\r\n    * 但如果你想捐款，歡迎你\r\n    */\r\n    function donate() public payable {\r\n        shared_profit = shared_profit.add(msg.value);\r\n        emit Donation(msg.sender, msg.value, now);\r\n    }\r\n\r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return total_supply;\r\n    }\r\n\r\n   \r\n    function balanceOf(address addr) public view returns (uint) {\r\n        return user_data[addr].tokens;\r\n    }\r\n\r\n   \r\n    function dividendsOf(address addr) public view returns (uint) {\r\n\r\n        UserRecord memory user = user_data[addr];\r\n\r\n       \r\n        int d = int(user.gained_funds.add(user.ref_funds));\r\n        require(d >= 0);\r\n\r\n        if (total_supply > 0) {\r\n            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));\r\n        }\r\n\r\n        if (user.funds_correction > 0) {\r\n            d = d.sub(user.funds_correction);\r\n        }\r\n        else if (user.funds_correction < 0) {\r\n            d = d.add(-user.funds_correction);\r\n        }\r\n\r\n        require(d >= 0);\r\n\r\n        return uint(d);\r\n    }\r\n\r\n   \r\n    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {\r\n        if (funds == 0) {\r\n            return 0;\r\n        }\r\n        if (apply_fee) {\r\n            (,uint _funds) = fee_purchase.split(funds);\r\n            funds = _funds;\r\n        }\r\n        (uint tokens,) = fundsToTokens(funds);\r\n        return tokens;\r\n    }\r\n\r\n    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {\r\n        // 總共有空令牌或沒有銷售代幣\r\n        if (tokens == 0 || total_supply == 0) {\r\n            return 0;\r\n        }\r\n        // 比總共開採更多的令牌，只是從計算中排除不必要的令牌\r\n        else if (tokens > total_supply) {\r\n            tokens = total_supply;\r\n        }\r\n        (uint funds,) = tokensToFunds(tokens);\r\n        if (apply_fee) {\r\n            (,uint _funds) = fee_selling.split(funds);\r\n            funds = _funds;\r\n        }\r\n        return funds;\r\n    }\r\n\r\n    /*\r\n    *  下一個令牌的購買價格\r\n    */\r\n    function buyPrice() public view returns (uint) {\r\n        return price / precision_factor;\r\n    }\r\n\r\n    /*\r\n    *  售價下一個令牌\r\n    */\r\n    function sellPrice() public view returns (uint) {\r\n        return price.sub(price_offset) / precision_factor;\r\n    }\r\n\r\n    // ==== 私人的 API ==== //\r\n\r\n    function mintTokens(address addr, uint tokens) internal {\r\n\r\n        UserRecord storage user = user_data[addr];\r\n\r\n        bool not_first_minting = total_supply > 0;\r\n\r\n        if (not_first_minting) {\r\n            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;\r\n        }\r\n\r\n        total_supply = total_supply.add(tokens);\r\n        user.tokens = user.tokens.add(tokens);\r\n\r\n        if (not_first_minting) {\r\n            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));\r\n        }\r\n    }\r\n\r\n    function burnTokens(address addr, uint tokens) internal {\r\n\r\n        UserRecord storage user = user_data[addr];\r\n\r\n        uint dividends_from_tokens = 0;\r\n        if (total_supply == tokens) {\r\n            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;\r\n        }\r\n\r\n        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;\r\n\r\n        total_supply = total_supply.sub(tokens);\r\n        user.tokens = user.tokens.sub(tokens);\r\n\r\n        if (total_supply > 0) {\r\n            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));\r\n        }\r\n        else if (dividends_from_tokens != 0) {\r\n            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));\r\n        }\r\n    }\r\n\r\n    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {\r\n        UserRecord storage referrer = user_data[referrer_addr];\r\n        if (referrer.tokens >= minimal_stake) {\r\n            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);\r\n            referrer.ref_funds = referrer.ref_funds.add(reward_funds);\r\n            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);\r\n            return taxed_funds;\r\n        }\r\n        else {\r\n            return funds;\r\n        }\r\n    }\r\n\r\n    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {\r\n        uint b = price.mul(2).sub(price_offset);\r\n        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));\r\n        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);\r\n        uint anp1 = price.add(price_offset.mul(n) / precision_factor);\r\n        return (n, anp1);\r\n    }\r\n\r\n    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {\r\n        uint sell_price = price.sub(price_offset);\r\n        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);\r\n        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);\r\n        return (sn / precision_factor, an);\r\n    }\r\n\r\n    // ==== 活動 ==== //\r\n\r\n    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);\r\n    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);\r\n    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);\r\n    event Withdrawal(address indexed addr, uint funds, uint time);\r\n    event Donation(address indexed addr, uint funds, uint time);\r\n    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);\r\n\r\n    //ERC20\r\n    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add failed\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = add(x, 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = add(x / z, z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\r\n    function sub(int a, int b) internal pure returns (int) {\r\n        int c = a - b;\r\n        require(c <= a, \"sub failed\");\r\n        return c;\r\n    }\r\n\r\n    function add(int a, int b) internal pure returns (int) {\r\n        int c = a + b;\r\n        require(c >= a, \"add failed\");\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Fee {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct fee {\r\n        uint num;\r\n        uint den;\r\n    }\r\n\r\n    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {\r\n        if (value == 0) {\r\n            return (0, 0);\r\n        }\r\n        tax = value.mul(f.num) / f.den;\r\n        taxed_value = value.sub(tax);\r\n    }\r\n\r\n    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {\r\n        if (value == 0) {\r\n            return 0;\r\n        }\r\n        tax = value.mul(f.num) / f.den;\r\n    }\r\n}\r\n\r\nlibrary ToAddress {\r\n\r\n    function toAddr(bytes source) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(source, 0x14))\r\n        }\r\n        return addr;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_addr\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"apply_fee\",\"type\":\"bool\"}],\"name\":\"expectedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"funds\",\"type\":\"uint256\"},{\"name\":\"apply_fee\",\"type\":\"bool\"}],\"name\":\"expectedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Selling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral_addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward_funds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from_addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PantheonEcoSystemChina","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://46bd7f9fea23e7fa6e33face08cdbcac3243af4ddaa76d644a347fa23e5be0f7"}]}