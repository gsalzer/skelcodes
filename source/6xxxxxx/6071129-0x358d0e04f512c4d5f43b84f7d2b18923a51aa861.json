{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract PixelFactory {\r\n    address public contractOwner;\r\n    uint    public startPrice = 0.1 ether;\r\n    bool    public isInGame = false;\r\n    uint    public finishTime;\r\n    \r\n    uint    public lastWinnerId;\r\n    address public lastWinnerAddress;\r\n\r\n    constructor() public {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    struct Pixel {\r\n        uint price;\r\n    }\r\n\r\n    Pixel[] public pixels;\r\n\r\n    mapping(uint => address) pixelToOwner;\r\n    mapping(address => string) ownerToUsername;\r\n\r\n    /** ACCOUNT FUNCTIONS **/\r\n    event Username(string username);\r\n    \r\n    function setUsername(string username) public {\r\n        ownerToUsername[msg.sender] = username;\r\n        emit Username(username);\r\n    }\r\n    \r\n    function getUsername() public view returns(string) {\r\n        return ownerToUsername[msg.sender];\r\n    }\r\n\r\n    /** GAME FUNCTIONS **/\r\n    // this function is triggered manually by owner after all pixels sold\r\n    function startGame() public onlyOwner {\r\n        require(isInGame == false);\r\n        isInGame = true;\r\n        finishTime = 86400 + now;\r\n    }\r\n    \r\n    function sendOwnerCommission() public payable onlyOwner {\r\n        contractOwner.transfer(msg.value);\r\n    } \r\n     \r\n    function _sendWinnerJackpot(address winner) private {\r\n        uint jackpot = 10 ether;\r\n        winner.transfer(jackpot);\r\n    } \r\n    \r\n    // this function is called to calculate countdown on the front side\r\n    function getFinishTime() public view returns(uint) {\r\n        return finishTime;\r\n    }\r\n    \r\n    function getLastWinner() public view returns(uint id, address addr) {\r\n        id = lastWinnerId;\r\n        addr = lastWinnerAddress;\r\n    }\r\n    \r\n    function _rand(uint min, uint max) private view returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(now)))%(min+max)-min;\r\n    }\r\n    \r\n    // this function is triggered manually by owner to finish game after countdown stops\r\n    function finisGame() public onlyOwner {\r\n        require(isInGame == true);\r\n        isInGame = false;\r\n        finishTime = 0;\r\n\r\n        // get winner id\r\n        uint winnerId = _rand(0, 399);\r\n        lastWinnerId = winnerId;\r\n        \r\n        // get winner address\r\n        address winnerAddress = pixelToOwner[winnerId];\r\n        lastWinnerAddress = winnerAddress;\r\n        \r\n        // transfer jackpot amount to winner\r\n        _sendWinnerJackpot(winnerAddress);\r\n        \r\n        // reset pixels\r\n        delete pixels;\r\n    }\r\n    \r\n    /** PIXEL FUNCTIONS **/\r\n    function createPixels(uint amount) public onlyOwner {\r\n        // it can be max 400 pixels\r\n        require(pixels.length + amount <= 400);\r\n        \r\n        // P.S. creating 400 pixels in one time is costing too much gas that's why we are using amount\r\n        \r\n        // system is creating pixels\r\n        for(uint i=0; i<amount; i++) {\r\n            uint id = pixels.push(Pixel(startPrice)) - 1;\r\n            pixelToOwner[id] = msg.sender;\r\n        }\r\n    }\r\n\r\n    function getAllPixels() public view returns(uint[], uint[], address[]) {\r\n        uint[]    memory id           = new uint[](pixels.length);\r\n        uint[]    memory price        = new uint[](pixels.length);\r\n        address[] memory owner        = new address[](pixels.length);\r\n\r\n        for (uint i = 0; i < pixels.length; i++) {\r\n            Pixel storage pixel = pixels[i];\r\n            \r\n            id[i]           = i;\r\n            price[i]        = pixel.price;\r\n            owner[i]        = pixelToOwner[i];\r\n        }\r\n\r\n        return (id, price, owner);\r\n    }\r\n\r\n    function _checkPixelIdExists(uint id) private constant returns(bool) {\r\n        if(id < pixels.length) return true;\r\n        return false;\r\n    }\r\n\r\n    function _transfer(address to, uint id) private {\r\n        pixelToOwner[id] = to;\r\n    }\r\n\r\n    function buy(uint id) external payable {\r\n        // checking pixel id exists before buying\r\n        require(_checkPixelIdExists(id) == true);\r\n\r\n        // preparing pixel data\r\n        Pixel storage pixel = pixels[id];\r\n        uint currentPrice = pixel.price;\r\n        address currentOwner = pixelToOwner[id];\r\n        address newOwner = msg.sender;\r\n        \r\n        // cheking buyer is sending correct price for pixel\r\n        require(currentPrice == msg.value);\r\n        \r\n        // cheking buyer is not at the same time owner of pixel \r\n        require(currentOwner != msg.sender);\r\n\r\n        // calculating new price of pixel\r\n        uint newPrice = currentPrice * 2;\r\n        pixel.price = newPrice;\r\n\r\n        // transfering money to current owner if current is not contractOwner, otherweise pot is collected in contract address\r\n        if(currentOwner != contractOwner) {\r\n            currentOwner.transfer(msg.value);\r\n        }\r\n        \r\n        // transfering pixel to new owner\r\n        _transfer(newOwner, id);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastWinnerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createPixels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendOwnerCommission\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPixels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixels\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finisGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Username\",\"type\":\"event\"}]","ContractName":"PixelFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9745c425b6ce62f7dffe79f32bf1b9013a06f8ddc102a01a23403adec98a5566"}]}