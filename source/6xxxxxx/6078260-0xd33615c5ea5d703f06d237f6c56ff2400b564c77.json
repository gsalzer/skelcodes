{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//Slightly modified SafeMath library - includes a min function\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n*This contract allows users to sign up for the DDA Cooperative Membership.\r\n*To complete membership DDA will provide instructions to complete KYC/AML verification\r\n*through a system external to this contract.\r\n*/\r\ncontract Membership {\r\n    using SafeMath for uint256;\r\n    \r\n    /*Variables*/\r\n    address public owner;\r\n    //Memebership fees\r\n    uint public memberFee;\r\n\r\n    /*Structs*/\r\n    /**\r\n    *@dev Keeps member information \r\n    */\r\n    struct Member {\r\n        uint memberId;\r\n        uint membershipType;\r\n    }\r\n    \r\n    /*Mappings*/\r\n    //Members information\r\n    mapping(address => Member) public members;\r\n    address[] public membersAccts;\r\n    mapping (address => uint) public membersAcctsIndex;\r\n\r\n    /*Events*/\r\n    event UpdateMemberAddress(address _from, address _to);\r\n    event NewMember(address _address, uint _memberId, uint _membershipType);\r\n    event Refund(address _address, uint _amount);\r\n\r\n    /*Modifiers*/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /*Functions*/\r\n    /**\r\n    *@dev Constructor - Sets owner\r\n    */\r\n     constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n    *@dev Updates the fee amount\r\n    *@param _memberFee fee amount for member\r\n    */\r\n    function setFee(uint _memberFee) public onlyOwner() {\r\n        //define fee structure for the three membership types\r\n        memberFee = _memberFee;\r\n    }\r\n    \r\n    /**\r\n    *@notice Allows a user to become DDA members if they pay the fee. However, they still have to complete\r\n    *complete KYC/AML verification off line\r\n    *@dev This creates and transfers the token to the msg.sender\r\n    */\r\n    function requestMembership() public payable {\r\n        Member storage sender = members[msg.sender];\r\n        require(msg.value >= memberFee && sender.membershipType == 0 );\r\n        membersAccts.push(msg.sender);\r\n        sender.memberId = membersAccts.length;\r\n        sender.membershipType = 1;\r\n        emit NewMember(msg.sender, sender.memberId, sender.membershipType);\r\n    }\r\n    \r\n    /**\r\n    *@dev This updates/transfers the member address \r\n    *@param _from is the current member address\r\n    *@param _to is the address the member would like to update their current address with\r\n    */\r\n    function updateMemberAddress(address _from, address _to) public onlyOwner {\r\n        require(_to != address(0));\r\n        Member storage currentAddress = members[_from];\r\n        Member storage newAddress = members[_to];\r\n        require(newAddress.memberId == 0);\r\n        newAddress.memberId = currentAddress.memberId;\r\n        newAddress.membershipType = currentAddress.membershipType;\r\n        membersAccts[currentAddress.memberId - 1] = _to;\r\n        currentAddress.memberId = 0;\r\n        currentAddress.membershipType = 0;\r\n        emit UpdateMemberAddress(_from, _to);\r\n    }\r\n\r\n    /**\r\n    *@dev Use this function to set membershipType for the member\r\n    *@param _memberAddress address of member that we need to update membershipType\r\n    *@param _membershipType type of membership to assign to member\r\n    */\r\n    function setMembershipType(address _memberAddress,  uint _membershipType) public onlyOwner{\r\n        Member storage memberAddress = members[_memberAddress];\r\n        memberAddress.membershipType = _membershipType;\r\n    }\r\n\r\n    /**\r\n    *@dev Use this function to set memberId for the member\r\n    *@param _memberAddress address of member that we need to update membershipType\r\n    *@param _memberId is the manually assigned memberId\r\n    */\r\n    function setMemberId(address _memberAddress,  uint _memberId) public onlyOwner{\r\n        Member storage memberAddress = members[_memberAddress];\r\n        memberAddress.memberId = _memberId;\r\n    }\r\n\r\n    /**\r\n    *@dev Use this function to remove member acct from array memberAcct\r\n    *@param _memberAddress address of member to remove\r\n    */\r\n    function removeMemberAcct(address _memberAddress) public onlyOwner{\r\n        require(_memberAddress != address(0));\r\n        uint256 indexToDelete;\r\n        uint256 lastAcctIndex;\r\n        address lastAdd;\r\n        Member storage memberAddress = members[_memberAddress];\r\n        memberAddress.memberId = 0;\r\n        memberAddress.membershipType = 0;\r\n        indexToDelete = membersAcctsIndex[_memberAddress];\r\n        lastAcctIndex = membersAccts.length.sub(1);\r\n        lastAdd = membersAccts[lastAcctIndex];\r\n        membersAccts[indexToDelete]=lastAdd;\r\n        membersAcctsIndex[lastAdd] = indexToDelete;   \r\n        membersAccts.length--;\r\n        membersAcctsIndex[_memberAddress]=0; \r\n    }\r\n\r\n\r\n    /**\r\n    *@dev Use this function to member acct from array memberAcct\r\n    *@param _memberAddress address of member to add\r\n    */\r\n    function addMemberAcct(address _memberAddress) public onlyOwner{\r\n        require(_memberAddress != address(0));\r\n        Member storage memberAddress = members[_memberAddress];\r\n        membersAcctsIndex[_memberAddress] = membersAccts.length; \r\n        membersAccts.push(_memberAddress);\r\n        memberAddress.memberId = membersAccts.length;\r\n        memberAddress.membershipType = 1;\r\n        emit NewMember(_memberAddress, memberAddress.memberId, memberAddress.membershipType);\r\n    }\r\n\r\n    /**\r\n    *@dev getter function to get all membersAccts\r\n    */\r\n    function getMembers() view public returns (address[]){\r\n        return membersAccts;\r\n    }\r\n    \r\n    /**\r\n    *@dev Get member information\r\n    *@param _memberAddress address to pull the memberId, membershipType and membership\r\n    */\r\n    function getMember(address _memberAddress) view public returns(uint, uint) {\r\n        return(members[_memberAddress].memberId, members[_memberAddress].membershipType);\r\n    }\r\n\r\n    /**\r\n    *@dev Gets length of array containing all member accounts or total supply\r\n    */\r\n    function countMembers() view public returns(uint) {\r\n        return membersAccts.length;\r\n    }\r\n\r\n    /**\r\n    *@dev Gets membership type\r\n    *@param _memberAddress address to view the membershipType\r\n    */\r\n    function getMembershipType(address _memberAddress) public constant returns(uint){\r\n        return members[_memberAddress].membershipType;\r\n    }\r\n    \r\n    /**\r\n    *@dev Allows the owner to set a new owner address\r\n    *@param _new_owner the new owner address\r\n    */\r\n    function setOwner(address _new_owner) public onlyOwner() { \r\n        owner = _new_owner; \r\n    }\r\n\r\n    /**\r\n    *@dev Refund money if KYC/AML fails\r\n    *@param _to address to send refund\r\n    *@param _amount to refund. If no amount  is specified the current memberFee is refunded\r\n    */\r\n    function refund(address _to, uint _amount) public onlyOwner {\r\n        require (_to != address(0));\r\n        if (_amount == 0) {_amount = memberFee;}\r\n        removeMemberAcct(_to);\r\n        _to.transfer(_amount);\r\n        emit Refund(_to, _amount);\r\n    }\r\n\r\n    /**\r\n    *@dev Allow owner to withdraw funds\r\n    *@param _to address to send funds\r\n    *@param _amount to send\r\n    */\r\n    function withdraw(address _to, uint _amount) public onlyOwner {\r\n        _to.transfer(_amount);\r\n    }    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"memberId\",\"type\":\"uint256\"},{\"name\":\"membershipType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"addMemberAcct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membersAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"updateMemberAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestMembership\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"},{\"name\":\"_memberId\",\"type\":\"uint256\"}],\"name\":\"setMemberId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMembershipType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersAcctsIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"removeMemberAcct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"},{\"name\":\"_membershipType\",\"type\":\"uint256\"}],\"name\":\"setMembershipType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"UpdateMemberAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_memberId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_membershipType\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"Membership","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48f9b4a76bb22db4973e5dec0054ec7120f4effc005438b6e71716e7b9b7aa09"}]}