{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract Team {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public teamAddressOne = 0x5947D8b85c5D3f8655b136B5De5D0Dd33f8E93D9;\r\n    address payable public teamAddressTwo = 0xC923728AD95f71BC77186D6Fb091B3B30Ba42247;\r\n    address payable public teamAddressThree = 0x763BFB050F9b973Dd32693B1e2181A68508CdA54;\r\n\r\n    JackPot public JPContract;\r\n    CBCToken public CBCTokenContract;\r\n\r\n    /**\r\n    * @dev Payable function\r\n    */\r\n    function () external payable {\r\n        require(JPContract.getState() && msg.value >= 0.05 ether);\r\n\r\n        JPContract.setInfo(msg.sender, msg.value.mul(90).div(100));\r\n\r\n        teamAddressOne.transfer(msg.value.mul(4).div(100));\r\n        teamAddressTwo.transfer(msg.value.mul(4).div(100));\r\n        teamAddressThree.transfer(msg.value.mul(2).div(100));\r\n        address(JPContract).transfer(msg.value.mul(90).div(100));\r\n    }\r\n}\r\n\r\ncontract Bears is Team {\r\n    constructor(address payable _jackPotAddress, address payable _CBCTokenAddress) public {\r\n        JPContract = JackPot(_jackPotAddress);\r\n        JPContract.setBearsAddress(address(this));\r\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\r\n        CBCTokenContract.approve(_jackPotAddress, 9999999999999999999000000000000000000);\r\n    }\r\n}\r\n\r\ncontract Bulls is Team {\r\n    constructor(address payable _jackPotAddress, address payable _CBCTokenAddress) public {\r\n        JPContract = JackPot(_jackPotAddress);\r\n        JPContract.setBullsAddress(address(this));\r\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\r\n        CBCTokenContract.approve(_jackPotAddress, 9999999999999999999000000000000000000);\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.1;\r\n\r\ncontract JackPot {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public depositBears;\r\n    mapping (address => uint256) public depositBulls;\r\n    uint256 public currentDeadline;\r\n    uint256 public lastDeadline = 1546257600;\r\n    uint256 public countOfBears;\r\n    uint256 public countOfBulls;\r\n    uint256 public totalSupplyOfBulls;\r\n    uint256 public totalSupplyOfBears;\r\n    uint256 public totalCBCSupplyOfBulls;\r\n    uint256 public totalCBCSupplyOfBears;\r\n    uint256 public probabilityOfBulls;\r\n    uint256 public probabilityOfBears;\r\n    address public lastHero;\r\n    address public lastHeroHistory;\r\n    uint256 public jackPot;\r\n    uint256 public winner;\r\n    bool public finished = false;\r\n\r\n    Bears public BearsContract;\r\n    Bulls public BullsContract;\r\n    CBCToken public CBCTokenContract;\r\n\r\n    constructor() public {\r\n        currentDeadline = block.timestamp + 60 * 60 * 24 * 3;\r\n    }\r\n\r\n    /**\r\n    * @dev Setter the CryptoBossCoin contract address. Address can be set at once.\r\n    * @param _CBCTokenAddress Address of the CryptoBossCoin contract\r\n    */\r\n    function setCBCTokenAddress(address _CBCTokenAddress) public {\r\n        require(address(CBCTokenContract) == address(0x0));\r\n        CBCTokenContract = CBCToken(_CBCTokenAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Setter the Bears contract address. Address can be set at once.\r\n    * @param _bearsAddress Address of the Bears contract\r\n    */\r\n    function setBearsAddress(address payable _bearsAddress) external {\r\n        require(address(BearsContract) == address(0x0));\r\n        BearsContract = Bears(_bearsAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Setter the Bulls contract address. Address can be set at once.\r\n    * @param _bullsAddress Address of the Bulls contract\r\n    */\r\n    function setBullsAddress(address payable _bullsAddress) external {\r\n        require(address(BullsContract) == address(0x0));\r\n        BullsContract = Bulls(_bullsAddress);\r\n    }\r\n\r\n    function getNow() view public returns(uint){\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getState() view public returns(bool) {\r\n        if (block.timestamp > currentDeadline) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setInfo(address _lastHero, uint256 _deposit) public {\r\n        require(address(BearsContract) == msg.sender || address(BullsContract) == msg.sender);\r\n\r\n        if (address(BearsContract) == msg.sender) {\r\n            require(depositBulls[_lastHero] == 0, \"You are already in bulls team\");\r\n            if (depositBears[_lastHero] == 0)\r\n                countOfBears++;\r\n            totalSupplyOfBears = totalSupplyOfBears.add(_deposit.mul(90).div(100));\r\n            depositBears[_lastHero] = depositBears[_lastHero].add(_deposit.mul(90).div(100));\r\n        }\r\n\r\n        if (address(BullsContract) == msg.sender) {\r\n            require(depositBears[_lastHero] == 0, \"You are already in bears team\");\r\n            if (depositBulls[_lastHero] == 0)\r\n                countOfBulls++;\r\n            totalSupplyOfBulls = totalSupplyOfBulls.add(_deposit.mul(90).div(100));\r\n            depositBulls[_lastHero] = depositBulls[_lastHero].add(_deposit.mul(90).div(100));\r\n        }\r\n\r\n        lastHero = _lastHero;\r\n\r\n        if (currentDeadline.add(120) <= lastDeadline) {\r\n            currentDeadline = currentDeadline.add(120);\r\n        } else {\r\n            currentDeadline = lastDeadline;\r\n        }\r\n\r\n        jackPot = (address(this).balance.add(_deposit)).mul(10).div(100);\r\n\r\n        calculateProbability();\r\n    }\r\n\r\n    function calculateProbability() public {\r\n        require(winner == 0 && getState());\r\n\r\n        totalCBCSupplyOfBulls = CBCTokenContract.balanceOf(address(BullsContract));\r\n        totalCBCSupplyOfBears = CBCTokenContract.balanceOf(address(BearsContract));\r\n        uint256 percent = (totalSupplyOfBulls.add(totalSupplyOfBears)).div(100);\r\n\r\n        if (totalCBCSupplyOfBulls < 1 ether) {\r\n            totalCBCSupplyOfBulls = 0;\r\n        }\r\n\r\n        if (totalCBCSupplyOfBears < 1 ether) {\r\n            totalCBCSupplyOfBears = 0;\r\n        }\r\n\r\n        if (totalCBCSupplyOfBulls <= totalCBCSupplyOfBears) {\r\n            uint256 difference = totalCBCSupplyOfBears.sub(totalCBCSupplyOfBulls).div(0.01 ether);\r\n            probabilityOfBears = totalSupplyOfBears.mul(100).div(percent).add(difference);\r\n\r\n            if (probabilityOfBears > 8000) {\r\n                probabilityOfBears = 8000;\r\n            }\r\n            if (probabilityOfBears < 2000) {\r\n                probabilityOfBears = 2000;\r\n            }\r\n            probabilityOfBulls = 10000 - probabilityOfBears;\r\n        } else {\r\n            uint256 difference = totalCBCSupplyOfBulls.sub(totalCBCSupplyOfBears).div(0.01 ether);\r\n            probabilityOfBulls = totalSupplyOfBulls.mul(100).div(percent).add(difference);\r\n\r\n            if (probabilityOfBulls > 8000) {\r\n                probabilityOfBulls = 8000;\r\n            }\r\n            if (probabilityOfBulls < 2000) {\r\n                probabilityOfBulls = 2000;\r\n            }\r\n            probabilityOfBears = 10000 - probabilityOfBulls;\r\n        }\r\n\r\n        totalCBCSupplyOfBulls = CBCTokenContract.balanceOf(address(BullsContract));\r\n        totalCBCSupplyOfBears = CBCTokenContract.balanceOf(address(BearsContract));\r\n    }\r\n\r\n    function getWinners() public {\r\n        require(winner == 0 && !getState());\r\n\r\n        uint256 seed1 = address(this).balance;\r\n        uint256 seed2 = totalSupplyOfBulls;\r\n        uint256 seed3 = totalSupplyOfBears;\r\n        uint256 seed4 = totalCBCSupplyOfBulls;\r\n        uint256 seed5 = totalCBCSupplyOfBulls;\r\n        uint256 seed6 = block.difficulty;\r\n        uint256 seed7 = block.timestamp;\r\n\r\n        bytes32 randomHash = keccak256(abi.encodePacked(seed1, seed2, seed3, seed4, seed5, seed6, seed7));\r\n        uint randomNumber = uint(randomHash);\r\n\r\n        if (randomNumber == 0){\r\n            randomNumber = 1;\r\n        }\r\n\r\n        uint winningNumber = randomNumber % 10000;\r\n\r\n        if (1 <= winningNumber && winningNumber <= probabilityOfBears){\r\n            winner = 1;\r\n        }\r\n\r\n        if (probabilityOfBears < winningNumber && winningNumber <= 10000){\r\n            winner = 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Payable function for take prize\r\n    */\r\n    function () external payable {\r\n        if (msg.value == 0 &&  !getState() && winner > 0){\r\n            require(depositBears[msg.sender] > 0 || depositBulls[msg.sender] > 0);\r\n\r\n            uint payout = 0;\r\n            uint payoutCBC = 0;\r\n\r\n            if (winner == 1 && depositBears[msg.sender] > 0) {\r\n                payout = calculateETHPrize(msg.sender);\r\n            }\r\n            if (winner == 2 && depositBulls[msg.sender] > 0) {\r\n                payout = calculateETHPrize(msg.sender);\r\n            }\r\n\r\n            if (payout > 0) {\r\n                depositBears[msg.sender] = 0;\r\n                depositBulls[msg.sender] = 0;\r\n                msg.sender.transfer(payout);\r\n            }\r\n\r\n            if ((winner == 1 && depositBears[msg.sender] == 0) || (winner == 2 && depositBulls[msg.sender] == 0)) {\r\n                payoutCBC = calculateCBCPrize(msg.sender);\r\n                if (CBCTokenContract.balanceOf(address(BullsContract)) > 0)\r\n                    CBCTokenContract.transferFrom(\r\n                        address(BullsContract),\r\n                        address(this),\r\n                        CBCTokenContract.balanceOf(address(BullsContract))\r\n                    );\r\n                if (CBCTokenContract.balanceOf(address(BearsContract)) > 0)\r\n                    CBCTokenContract.transferFrom(\r\n                        address(BearsContract),\r\n                        address(this),\r\n                        CBCTokenContract.balanceOf(address(BearsContract))\r\n                    );\r\n                CBCTokenContract.transfer(msg.sender, payoutCBC);\r\n            }\r\n\r\n            if (msg.sender == lastHero) {\r\n                lastHeroHistory = lastHero;\r\n                lastHero = address(0x0);\r\n                msg.sender.transfer(jackPot);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateETHPrize(address participant) public view returns(uint) {\r\n\r\n        uint payout = 0;\r\n        uint256 totalSupply = (totalSupplyOfBears.add(totalSupplyOfBulls));\r\n\r\n        if (depositBears[participant] > 0) {\r\n            payout = totalSupply.mul(depositBears[participant]).div(totalSupplyOfBears);\r\n        }\r\n\r\n        if (depositBulls[participant] > 0) {\r\n            payout = totalSupply.mul(depositBulls[participant]).div(totalSupplyOfBulls);\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    function calculateCBCPrize(address participant) public view returns(uint) {\r\n\r\n        uint payout = 0;\r\n        uint totalSupply = (totalCBCSupplyOfBears.add(totalCBCSupplyOfBulls)).mul(80).div(100);\r\n\r\n        if (depositBears[participant] > 0) {\r\n            payout = totalSupply.mul(depositBears[participant]).div(totalSupplyOfBears);\r\n        }\r\n\r\n        if (depositBulls[participant] > 0) {\r\n            payout = totalSupply.mul(depositBulls[participant]).div(totalSupplyOfBulls);\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n\r\n}\r\npragma solidity ^0.5.1;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev Allows to authorize access to certain function calls\r\n *\r\n * ABI\r\n * [{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]\r\n */\r\ncontract Authorizable {\r\n\r\n    address[] authorizers;\r\n    mapping(address => uint) authorizerIndex;\r\n\r\n    /**\r\n     * @dev Throws if called by any account tat is not authorized.\r\n     */\r\n    modifier onlyAuthorized {\r\n        require(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contructor that authorizes the msg.sender.\r\n     */\r\n    constructor() public {\r\n        authorizers.length = 2;\r\n        authorizers[1] = msg.sender;\r\n        authorizerIndex[msg.sender] = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get a specific authorizer\r\n     * @param authorizerIndex index of the authorizer to be retrieved.\r\n     * @return The address of the authorizer.\r\n     */\r\n    function getAuthorizer(uint authorizerIndex) external view returns(address) {\r\n        return address(authorizers[authorizerIndex + 1]);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if an address is authorized\r\n     * @param _addr the address to check if it is authorized.\r\n     * @return boolean flag if address is authorized.\r\n     */\r\n    function isAuthorized(address _addr) public view returns(bool) {\r\n        return authorizerIndex[_addr] > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add a new authorizer\r\n     * @param _addr the address to add as a new authorizer.\r\n     */\r\n    function addAuthorized(address _addr) external onlyAuthorized {\r\n        authorizerIndex[_addr] = authorizers.length;\r\n        authorizers.length++;\r\n        authorizers[authorizers.length - 1] = _addr;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ExchangeRate\r\n * @dev Allows updating and retrieveing of Conversion Rates for PAY tokens\r\n *\r\n * ABI\r\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateRates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]\r\n */\r\ncontract ExchangeRate is Ownable {\r\n\r\n    event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\r\n\r\n    mapping(bytes32 => uint) public rates;\r\n\r\n    /**\r\n     * @dev Allows the current owner to update a single rate.\r\n     * @param _symbol The symbol to be updated.\r\n     * @param _rate the rate for the symbol.\r\n     */\r\n    function updateRate(string memory _symbol, uint _rate) public onlyOwner {\r\n        rates[keccak256(abi.encodePacked(_symbol))] = _rate;\r\n        emit RateUpdated(now, keccak256(bytes(_symbol)), _rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to update multiple rates.\r\n     * @param data an array that alternates keccak256 hashes of the symbol and the corresponding rate .\r\n     */\r\n    function updateRates(uint[] memory data) public onlyOwner {\r\n        require (data.length % 2 <= 0);\r\n        uint i = 0;\r\n        while (i < data.length / 2) {\r\n            bytes32 symbol = bytes32(data[i * 2]);\r\n            uint rate = data[i * 2 + 1];\r\n            rates[symbol] = rate;\r\n            emit RateUpdated(now, symbol, rate);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the anyone to read the current rate.\r\n     * @param _symbol the symbol to be retrieved.\r\n     */\r\n    function getRate(string memory _symbol) public view returns(uint) {\r\n        return rates[keccak256(abi.encodePacked(_symbol))];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) view public returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require (size + 4 <= msg.data.length);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) view public returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) public {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint value);\r\n    event MintFinished();\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    bool public mintingFinished = false;\r\n    uint public totalSupply = 0;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(address _who, uint256 _value) onlyOwner public {\r\n        _burn(_who, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title CBCToken\r\n * @dev The main CBC token contract\r\n *\r\n * ABI\r\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\r\n */\r\ncontract CBCToken is MintableToken {\r\n\r\n    string public name = \"Crypto Boss Coin\";\r\n    string public symbol = \"CBC\";\r\n    uint public decimals = 18;\r\n\r\n    bool public tradingStarted = false;\r\n    /**\r\n     * @dev modifier that throws if trading has not started yet\r\n     */\r\n    modifier hasStartedTrading() {\r\n        require(tradingStarted);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function startTrading() onlyOwner public {\r\n        tradingStarted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the PAY tokens once trading has started\r\n     * @param _to the recipient address of the tokens.\r\n     * @param _value number of tokens to be transfered.\r\n     */\r\n    function transfer(address _to, uint _value) hasStartedTrading public {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows anyone to transfer the CBC tokens once trading has started\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading public{\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MainSale\r\n * @dev The main CBC token sale contract\r\n *\r\n * ABI\r\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":!1,\"inputs\":[{\"name\":\"victim\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":!1,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]\r\n */\r\ncontract MainSale is Ownable, Authorizable {\r\n    using SafeMath for uint;\r\n    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n    event AuthorizedCreate(address recipient, uint pay_amount);\r\n    event AuthorizedBurn(address receiver, uint value);\r\n    event AuthorizedStartTrading();\r\n    event MainSaleClosed();\r\n    CBCToken public token = new CBCToken();\r\n\r\n    address payable public multisigVault;\r\n\r\n    uint hardcap = 100000000000000 ether;\r\n    ExchangeRate public exchangeRate;\r\n\r\n    uint public altDeposits = 0;\r\n    uint public start = 1525996800;\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the sale IS ON\r\n     */\r\n    modifier saleIsOn() {\r\n        require(now > start && now < start + 28 days);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the hardcap has not been reached\r\n     */\r\n    modifier isUnderHardCap() {\r\n        require(multisigVault.balance + altDeposits <= hardcap);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to create tokens by depositing ether.\r\n     * @param recipient the recipient to receive tokens.\r\n     */\r\n    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n        uint rate = exchangeRate.getRate(\"ETH\");\r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        token.mint(recipient, tokens);\r\n        require(multisigVault.send(msg.value));\r\n        emit TokenSold(recipient, msg.value, tokens, rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\r\n     * @param totalAltDeposits total amount ETH equivalent\r\n     */\r\n    function setAltDeposit(uint totalAltDeposits) public onlyOwner {\r\n        altDeposits = totalAltDeposits;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\r\n     * @param recipient the recipient to receive tokens.\r\n     * @param tokens number of tokens to be created.\r\n     */\r\n    function authorizedCreateTokens(address recipient, uint tokens) public onlyAuthorized {\r\n        token.mint(recipient, tokens);\r\n        emit AuthorizedCreate(recipient, tokens);\r\n    }\r\n\r\n    function authorizedStartTrading() public onlyAuthorized {\r\n        token.startTrading();\r\n        emit AuthorizedStartTrading();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows authorized acces to burn tokens.\r\n     * @param receiver the receiver to receive tokens.\r\n     * @param value number of tokens to be created.\r\n     */\r\n    function authorizedBurnTokens(address receiver, uint value) public onlyAuthorized {\r\n        token.burn(receiver, value);\r\n        emit AuthorizedBurn(receiver, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the hardcap.\r\n     * @param _hardcap the new hardcap\r\n     */\r\n    function setHardCap(uint _hardcap) public onlyOwner {\r\n        hardcap = _hardcap;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the starting time.\r\n     * @param _start the new _start\r\n     */\r\n    function setStart(uint _start) public onlyOwner {\r\n        start = _start;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the multisig contract.\r\n     * @param _multisigVault the multisig contract address\r\n     */\r\n    function setMultisigVault(address payable _multisigVault) public onlyOwner {\r\n        if (_multisigVault != address(0)) {\r\n            multisigVault = _multisigVault;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the exchangerate contract.\r\n     * @param _exchangeRate the exchangerate address\r\n     */\r\n    function setExchangeRate(address _exchangeRate) public onlyOwner {\r\n        exchangeRate = ExchangeRate(_exchangeRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to finish the minting. This will create the\r\n     * restricted tokens and then close the minting.\r\n     * Then the ownership of the PAY token contract is transfered\r\n     * to this owner.\r\n     */\r\n    function finishMinting() public onlyOwner {\r\n        uint issuedTokenSupply = token.totalSupply();\r\n        uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\r\n        token.mint(multisigVault, restrictedTokens);\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        emit MainSaleClosed();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\r\n     * @param _token the contract address of the ERC20 contract\r\n     */\r\n    function retrieveTokens(address _token) public onlyOwner {\r\n        ERC20 token = ERC20(_token);\r\n        token.transfer(multisigVault, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function which receives ether and created the appropriate number of tokens for the\r\n     * msg.sender.\r\n     */\r\n    function() external payable {\r\n        createTokens(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"JPContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressThree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CBCTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_jackPotAddress\",\"type\":\"address\"},{\"name\":\"_CBCTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Bears","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ab2a8db39d53573f4ca903e6bbd5151088120d13000000000000000000000000790bfacae71576107c068f494c8a6302aea640cb","Library":"","SwarmSource":"bzzr://ab89e85dfb9bc345c96a3d17abf28f93d8dcd5860c896bd7c9711c64228fdd60"}]}