{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n /**\r\n  * @dev Error messages:\r\n\t\t1: Sender is not the owner\r\n\t\t2. Account is freezed\r\n\t\t3. Emergency freeze is applied\r\n\t\t4. Zero address not allowed\r\n\t\t5. Sender does not have sufficient balance\r\n\t\t6. Approval limit exceeds\r\n  */\r\n\r\n\r\n// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\ncontract DELFINIUMToken is ERC20Interface {\r\n\tusing SafeMath for uint;\r\n\r\n\t// State variables\r\n\tstring public symbol = 'DELFINIUM';\r\n\tstring public name = 'DLF';\r\n\tuint public decimals = 18;\r\n\taddress public owner;\r\n\tuint public totalSupply = 210000000 * (10 ** 18);\r\n\tbool public emergencyFreeze;\r\n\t\r\n\t// mappings\r\n\tmapping (address => uint) balances;\r\n\tmapping (address => mapping (address => uint) ) allowed;\r\n\tmapping (address => bool) frozen;\r\n  \r\n\r\n\t// constructor\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tbalances[owner] = totalSupply;\r\n\t\temit Transfer(address(0x0), msg.sender, totalSupply);\r\n\t}\r\n\r\n\t// events\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent Freezed(address targetAddress, bool frozen);\r\n\tevent EmerygencyFreezed(bool emergencyFreezeStatus);\t\r\n  \r\n\r\n\r\n\t// Modifiers\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, '1');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier unfreezed(address _account) { \r\n\t\trequire(!frozen[_account], '2');\r\n\t\t_;  \r\n\t}\r\n\t\r\n\tmodifier noEmergencyFreeze() { \r\n\t\trequire(!emergencyFreeze, '3');\r\n\t\t_; \r\n\t}\r\n  \r\n\r\n\r\n\t// functions\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer Token\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transfer(address _to, uint _value)\r\n\t\tunfreezed(_to) \r\n\t\tunfreezed(msg.sender) \r\n\t\tnoEmergencyFreeze() \r\n\t\tpublic returns (bool success) \r\n\t{\r\n\t\trequire(_to != address(0x0), '4');\r\n\t\trequire(balances[msg.sender] >= _value, '5');\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Approve others to spend on your behalf\r\n\t// ------------------------------------------------------------------------\r\n\t/* \r\n\t\tWhile changing approval, the allowed must be changed to 0 than then to updated value\r\n\t\tThe smart contract doesn't enforces this due to backward competibility but requires frontend to do the validations\r\n\t*/\r\n\tfunction approve(address _spender, uint _value)\r\n\t\tunfreezed(_spender) \r\n\t\tunfreezed(msg.sender) \r\n\t\tnoEmergencyFreeze() \r\n\t\tpublic returns (bool success) \r\n\t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval(address _spender, uint256 _addedValue)\r\n\t\tunfreezed(_spender)\r\n\t\tunfreezed(msg.sender)\r\n\t\tnoEmergencyFreeze()\r\n\t\tpublic returns (bool)\r\n\t{\r\n\t\tallowed[msg.sender][_spender] = (\r\n\t\tallowed[msg.sender][_spender].add(_addedValue));\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (address _spender, uint256 _subtractedValue )\r\n\t\tunfreezed(_spender)\r\n\t\tunfreezed(msg.sender)\r\n\t\tnoEmergencyFreeze()\r\n\t\tpublic returns (bool)\r\n\t{\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n  \t// ------------------------------------------------------------------------\r\n  \t// Approve and call : If approve returns true, it calls receiveApproval method of contract\r\n\t\t// ------------------------------------------------------------------------\r\n  \tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t\tunfreezed(_spender) \r\n\t\tunfreezed(msg.sender) \r\n\t\tnoEmergencyFreeze() \r\n\t\tpublic returns (bool success) \r\n\t{\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transferred approved amount from other's account\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address _from, address _to, uint _value)\r\n\t\tunfreezed(_to) \r\n\t\tunfreezed(_from) \r\n\t\tunfreezed(msg.sender) \r\n\t\tnoEmergencyFreeze() \r\n\t\tpublic returns (bool success) \r\n\t{\r\n\t\trequire(_value <= allowed[_from][msg.sender], '6');\r\n\t\trequire (balances[_from]>= _value, '5');\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t//               ONLYOWNER METHODS                             \r\n\t// ------------------------------------------------------------------------\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer Ownership\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferOwnership(address _newOwner)\r\n\t\tonlyOwner\r\n\t\tpublic \r\n\t{\r\n\t\trequire(_newOwner != address(0), '4');\r\n\t\towner = _newOwner;\r\n\t\temit OwnershipTransferred(owner, _newOwner);\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Freeze account - onlyOwner\r\n\t// ------------------------------------------------------------------------\r\n\tfunction freezeAccount (address _target, bool _freeze) public onlyOwner returns(bool res) {\r\n\t\trequire(_target != address(0x0), '4');\r\n\t\tfrozen[_target] = _freeze;\r\n\t\temit Freezed(_target, _freeze);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Emerygency freeze - onlyOwner\r\n\t// ------------------------------------------------------------------------\r\n\tfunction emergencyFreezeAllAccounts (bool _freeze) public onlyOwner returns(bool res) {\r\n\t\temergencyFreeze = _freeze;\r\n\t\temit EmerygencyFreezed(_freeze);\r\n\t\treturn true;\r\n\t}\r\n  \r\n\r\n\t// ------------------------------------------------------------------------\r\n\t//               CONSTANT METHODS\r\n\t// ------------------------------------------------------------------------\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Check Allowance : Constant\r\n\t// ------------------------------------------------------------------------\r\n\tfunction allowance(address _tokenOwner, address _spender) public view returns (uint remaining) {\r\n\t\treturn allowed[_tokenOwner][_spender];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Check Balance : Constant\r\n\t// ------------------------------------------------------------------------\r\n\tfunction balanceOf(address _tokenOwner) public view returns (uint balance) {\r\n\t\treturn balances[_tokenOwner];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Total supply : Constant\r\n\t// ------------------------------------------------------------------------\r\n\tfunction totalSupply() public view returns (uint) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Get Freeze Status : Constant\r\n\t// ------------------------------------------------------------------------\r\n\tfunction isFreezed(address _targetAddress) public view returns (bool) {\r\n\t\treturn frozen[_targetAddress]; \r\n\t}\r\n\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Prevents contract from accepting ETH\r\n\t// ------------------------------------------------------------------------\r\n\tfunction () public payable {\r\n\t\trevert();\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Owner can transfer out any accidentally sent ERC20 tokens\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferAnyERC20Token(address _tokenAddress, uint _value) public onlyOwner returns (bool success) {\r\n\t\treturn ERC20Interface(_tokenAddress).transfer(owner, _value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"emergencyFreezeAllAccounts\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"emergencyFreezeStatus\",\"type\":\"bool\"}],\"name\":\"EmerygencyFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DELFINIUMToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0135a0e9b8d68ef7612e28ed1822b19ae9422c5422c4afae5e20d70086c95e80"}]}