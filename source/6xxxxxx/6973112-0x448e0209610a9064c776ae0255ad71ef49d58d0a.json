{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title -luckyblock\r\n * play a luckyblock : )\r\n * Contact us for further cooperation support@lordless.io\r\n *\r\n * ██╗      ██╗   ██╗  ██████╗ ██╗  ██╗ ██╗   ██╗ ██████╗  ██╗       ██████╗   ██████╗ ██╗  ██╗\r\n * ██║      ██║   ██║ ██╔════╝ ██║ ██╔╝ ╚██╗ ██╔╝ ██╔══██╗ ██║      ██╔═══██╗ ██╔════╝ ██║ ██╔╝\r\n * ██║      ██║   ██║ ██║      █████╔╝   ╚████╔╝  ██████╔╝ ██║      ██║   ██║ ██║      █████╔╝\r\n * ██║      ██║   ██║ ██║      ██╔═██╗    ╚██╔╝   ██╔══██╗ ██║      ██║   ██║ ██║      ██╔═██╗\r\n * ███████╗ ╚██████╔╝ ╚██████╗ ██║  ██╗    ██║    ██████╔╝ ███████╗ ╚██████╔╝ ╚██████╗ ██║  ██╗\r\n * ╚══════╝  ╚═════╝   ╚═════╝ ╚═╝  ╚═╝    ╚═╝    ╚═════╝  ╚══════╝  ╚═════╝   ╚═════╝ ╚═╝  ╚═╝\r\n *\r\n * ---\r\n * POWERED BY\r\n * ╦   ╔═╗ ╦═╗ ╔╦╗ ╦   ╔═╗ ╔═╗ ╔═╗      ╔╦╗ ╔═╗ ╔═╗ ╔╦╗\r\n * ║   ║ ║ ╠╦╝  ║║ ║   ║╣  ╚═╗ ╚═╗       ║  ║╣  ╠═╣ ║║║\r\n * ╩═╝ ╚═╝ ╩╚═ ═╩╝ ╩═╝ ╚═╝ ╚═╝ ╚═╝       ╩  ╚═╝ ╩ ╩ ╩ ╩\r\n * game at https://game.lordless.io\r\n * code at https://github.com/lordlessio\r\n */\r\n\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Superuser.sol\r\n\r\n/**\r\n * @title Superuser\r\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\r\n * of a contract to a new address, even if he is not the owner.\r\n * A superuser can transfer his role to a new address.\r\n */\r\ncontract Superuser is Ownable, RBAC {\r\n  string public constant ROLE_SUPERUSER = \"superuser\";\r\n\r\n  constructor () public {\r\n    addRole(msg.sender, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not a superuser.\r\n   */\r\n  modifier onlySuperuser() {\r\n    checkRole(msg.sender, ROLE_SUPERUSER);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSuperuser() {\r\n    require(msg.sender == owner || isSuperuser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address has superuser role\r\n   */\r\n  function isSuperuser(address _addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_addr, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\r\n   * @param _newSuperuser The address to transfer ownership to.\r\n   */\r\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\r\n    require(_newSuperuser != address(0));\r\n    removeRole(msg.sender, ROLE_SUPERUSER);\r\n    addRole(_newSuperuser, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. batchplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i=1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/luckyblock/ILuckyblock.sol\r\n\r\n/**\r\n * @title -luckyblock Interface\r\n */\r\n\r\ninterface ILuckyblock{\r\n\r\n  function getLuckyblockSpend(\r\n    bytes32 luckyblockId\r\n  ) external view returns (\r\n    address[],\r\n    uint256[],\r\n    uint256\r\n  ); \r\n\r\n  function getLuckyblockEarn(\r\n    bytes32 luckyblockId\r\n    ) external view returns (\r\n    address[],\r\n    uint256[],\r\n    int[],\r\n    uint256,\r\n    int\r\n  );\r\n\r\n  function getLuckyblockBase(\r\n    bytes32 luckyblockId\r\n    ) external view returns (\r\n      bool\r\n  );\r\n\r\n  function addLuckyblock(uint256 seed) external;\r\n\r\n  function start(\r\n    bytes32 luckyblockId\r\n  ) external;\r\n\r\n  function stop(\r\n    bytes32 luckyblockId\r\n  ) external;\r\n\r\n  function updateLuckyblockSpend(\r\n    bytes32 luckyblockId,\r\n    address[] spendTokenAddresses, \r\n    uint256[] spendTokenCount,\r\n    uint256 spendEtherCount\r\n  ) external;\r\n\r\n  function updateLuckyblockEarn (\r\n    bytes32 luckyblockId,\r\n    address[] earnTokenAddresses,\r\n    uint256[] earnTokenCount,\r\n    int[] earnTokenProbability, // (0 - 100)\r\n    uint256 earnEtherCount,\r\n    int earnEtherProbability\r\n  ) external;\r\n\r\n  function getLuckyblockIds()external view returns(bytes32[]);\r\n  function play(bytes32 luckyblockId) external payable;\r\n  function withdrawToken(address contractAddress, address to, uint256 balance) external;\r\n  function withdrawEth(address to, uint256 balance) external;\r\n\r\n  \r\n  \r\n\r\n  /* Events */\r\n\r\n  event Play (\r\n    bytes32 indexed luckyblockId,\r\n    address user,\r\n    uint8 random\r\n  );\r\n\r\n  event WithdrawToken (\r\n    address indexed contractAddress,\r\n    address to,\r\n    uint256 count\r\n  );\r\n\r\n  event WithdrawEth (\r\n    address to,\r\n    uint256 count\r\n  );\r\n\r\n  event Pay (\r\n    address from,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/luckyblock/Luckyblock.sol\r\n\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n  function transfer(address to, uint tokens) public returns (bool);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n  function balanceOf(address tokenOwner) public view returns (uint256);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint);\r\n}\r\ncontract Luckyblock is Superuser, Pausable, ILuckyblock {\r\n\r\n  using SafeMath for *;\r\n\r\n  struct User {\r\n    address user;\r\n    string name;\r\n    uint256 verifytime;\r\n    uint256 verifyFee;\r\n  }\r\n\r\n  struct LuckyblockBase {\r\n    bool ended;\r\n  }\r\n\r\n  struct LuckyblockSpend {\r\n    address[] spendTokenAddresses;\r\n    uint256[] spendTokenCount;\r\n    uint256 spendEtherCount;\r\n  }\r\n\r\n  struct LuckyblockEarn {\r\n    address[] earnTokenAddresses;\r\n    uint256[] earnTokenCount;\r\n    int[] earnTokenProbability; // (0 - 100)\r\n    uint256 earnEtherCount;\r\n    int earnEtherProbability;\r\n  }\r\n\r\n  bytes32[] public luckyblockIds; //\r\n\r\n  mapping (address => bytes32[]) contractAddressToLuckyblockId;\r\n\r\n  mapping (bytes32 => LuckyblockEarn) luckyblockIdToLuckyblockEarn;\r\n  mapping (bytes32 => LuckyblockSpend) luckyblockIdToLuckyblockSpend;\r\n  mapping (bytes32 => LuckyblockBase) luckyblockIdToLuckyblockBase;\r\n\r\n\r\n  mapping (bytes32 => mapping (address => bool)) luckyblockIdToUserAddress;\r\n  mapping (address => uint256) contractAddressToLuckyblockCount;\r\n\r\n  function () public payable {\r\n    emit Pay(msg.sender, msg.value);\r\n  }\r\n\r\n  function getLuckyblockIds()external view returns(bytes32[]){\r\n    return luckyblockIds;\r\n  }\r\n\r\n  function getLuckyblockSpend(\r\n    bytes32 luckyblockId\r\n    ) external view returns (\r\n      address[],\r\n      uint256[],\r\n      uint256\r\n    ) {\r\n    LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];\r\n    return (\r\n      _luckyblockSpend.spendTokenAddresses,\r\n      _luckyblockSpend.spendTokenCount,\r\n      _luckyblockSpend.spendEtherCount\r\n      );\r\n  }\r\n\r\n  function getLuckyblockEarn(\r\n    bytes32 luckyblockId\r\n    ) external view returns (\r\n      address[],\r\n      uint256[],\r\n      int[],\r\n      uint256,\r\n      int\r\n    ) {\r\n    LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];\r\n    return (\r\n      _luckyblockEarn.earnTokenAddresses,\r\n      _luckyblockEarn.earnTokenCount,\r\n      _luckyblockEarn.earnTokenProbability,\r\n      _luckyblockEarn.earnEtherCount,\r\n      _luckyblockEarn.earnEtherProbability\r\n      );\r\n  }\r\n\r\n  function getLuckyblockBase(\r\n    bytes32 luckyblockId\r\n    ) external view returns (\r\n      bool\r\n    ) {\r\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\r\n    return (\r\n      _luckyblockBase.ended\r\n      );\r\n  }\r\n  \r\n  function addLuckyblock(uint256 seed) external onlyOwnerOrSuperuser {\r\n    bytes32 luckyblockId = keccak256(\r\n      abi.encodePacked(block.timestamp, seed)\r\n    );\r\n    LuckyblockBase memory _luckyblockBase = LuckyblockBase(\r\n      false\r\n    );\r\n    luckyblockIds.push(luckyblockId);\r\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\r\n  }\r\n\r\n  function start(bytes32 luckyblockId) external{\r\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\r\n    _luckyblockBase.ended = false;\r\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\r\n  }\r\n\r\n  function stop(bytes32 luckyblockId) external{\r\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\r\n    _luckyblockBase.ended = true;\r\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\r\n  }\r\n\r\n  function updateLuckyblockSpend (\r\n    bytes32 luckyblockId,\r\n    address[] spendTokenAddresses, \r\n    uint256[] spendTokenCount,\r\n    uint256 spendEtherCount\r\n    ) external onlyOwnerOrSuperuser {\r\n    LuckyblockSpend memory _luckyblockSpend = LuckyblockSpend(\r\n      spendTokenAddresses,\r\n      spendTokenCount,\r\n      spendEtherCount\r\n    );\r\n    luckyblockIdToLuckyblockSpend[luckyblockId] = _luckyblockSpend;\r\n  }\r\n\r\n  function updateLuckyblockEarn (\r\n    bytes32 luckyblockId,\r\n    address[] earnTokenAddresses,\r\n    uint256[] earnTokenCount,\r\n    int[] earnTokenProbability, // (0 - 100)\r\n    uint256 earnEtherCount,\r\n    int earnEtherProbability\r\n    ) external onlyOwnerOrSuperuser {\r\n    LuckyblockEarn memory _luckyblockEarn = LuckyblockEarn(\r\n      earnTokenAddresses,\r\n      earnTokenCount,\r\n      earnTokenProbability, // (0 - 100)\r\n      earnEtherCount,\r\n      earnEtherProbability\r\n    );\r\n    luckyblockIdToLuckyblockEarn[luckyblockId] = _luckyblockEarn;\r\n  }\r\n\r\n\r\n  function play(bytes32 luckyblockId) external payable whenNotPaused {\r\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\r\n    LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];\r\n    LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];\r\n    \r\n    require(!_luckyblockBase.ended, \"luckyblock is ended\");\r\n\r\n    // check sender's ether balance \r\n    require(msg.value >= _luckyblockSpend.spendEtherCount, \"sender value not enough\");\r\n\r\n    // check spend\r\n    if (_luckyblockSpend.spendTokenAddresses[0] != address(0x0)) {\r\n      for (uint8 i = 0; i < _luckyblockSpend.spendTokenAddresses.length; i++) {\r\n\r\n        // check sender's erc20 balance \r\n        require(\r\n          ERC20Interface(\r\n            _luckyblockSpend.spendTokenAddresses[i]\r\n          ).balanceOf(address(msg.sender)) >= _luckyblockSpend.spendTokenCount[i]\r\n        );\r\n\r\n        require(\r\n          ERC20Interface(\r\n            _luckyblockSpend.spendTokenAddresses[i]\r\n          ).allowance(address(msg.sender), address(this)) >= _luckyblockSpend.spendTokenCount[i]\r\n        );\r\n\r\n        // transfer erc20 token\r\n        ERC20Interface(_luckyblockSpend.spendTokenAddresses[i])\r\n          .transferFrom(msg.sender, address(this), _luckyblockSpend.spendTokenCount[i]);\r\n        }\r\n    }\r\n    \r\n    // check earn erc20\r\n    if (_luckyblockEarn.earnTokenAddresses[0] !=\r\n      address(0x0)) {\r\n      for (uint8 j= 0; j < _luckyblockEarn.earnTokenAddresses.length; j++) {\r\n        // check sender's erc20 balance \r\n        uint256 earnTokenCount = _luckyblockEarn.earnTokenCount[j];\r\n        require(\r\n          ERC20Interface(_luckyblockEarn.earnTokenAddresses[j])\r\n          .balanceOf(address(this)) >= earnTokenCount\r\n        );\r\n      }\r\n    }\r\n    \r\n    // check earn ether\r\n    require(address(this).balance >= _luckyblockEarn.earnEtherCount, \"contract value not enough\");\r\n\r\n    // do a random\r\n    uint8 _random = random();\r\n\r\n    // earn erc20\r\n    for (uint8 k = 0; k < _luckyblockEarn.earnTokenAddresses.length; k++){\r\n      // if win erc20\r\n      if (_luckyblockEarn.earnTokenAddresses[0] \r\n        != address(0x0)){\r\n        if (_random + _luckyblockEarn.earnTokenProbability[k] >= 100) {\r\n          ERC20Interface(_luckyblockEarn.earnTokenAddresses[k])\r\n            .transfer(msg.sender, _luckyblockEarn.earnTokenCount[k]);\r\n        }\r\n      }\r\n    }\r\n    uint256 value = msg.value;\r\n    uint256 payExcess = value.sub(_luckyblockSpend.spendEtherCount);\r\n    \r\n    // if win ether\r\n    if (_random + _luckyblockEarn.earnEtherProbability >= 100) {\r\n      uint256 balance = _luckyblockEarn.earnEtherCount.add(payExcess);\r\n      if (balance > 0){\r\n        msg.sender.transfer(balance);\r\n      }\r\n    } else if (payExcess > 0) {\r\n      msg.sender.transfer(payExcess);\r\n    }\r\n    \r\n    emit Play(luckyblockId, msg.sender, _random);\r\n  }\r\n\r\n  function withdrawToken(address contractAddress, address to, uint256 balance)\r\n    external onlyOwnerOrSuperuser {\r\n    ERC20Interface erc20 = ERC20Interface(contractAddress);\r\n    if (balance == uint256(0x0)){\r\n      erc20.transfer(to, erc20.balanceOf(address(this)));\r\n      emit WithdrawToken(contractAddress, to, erc20.balanceOf(address(this)));\r\n    } else {\r\n      erc20.transfer(to, balance);\r\n      emit WithdrawToken(contractAddress, to, balance);\r\n    }\r\n  }\r\n\r\n  function withdrawEth(address to, uint256 balance) external onlySuperuser {\r\n    if (balance == uint256(0x0)) {\r\n      to.transfer(address(this).balance);\r\n      emit WithdrawEth(to, address(this).balance);\r\n    } else {\r\n      to.transfer(balance);\r\n      emit WithdrawEth(to, balance);\r\n    }\r\n  }\r\n\r\n  function random() private view returns (uint8) {\r\n    return uint8(uint256(keccak256(block.timestamp, block.difficulty))%100); // random 0-99\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLuckyblockIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"getLuckyblockSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyblockIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"},{\"name\":\"earnTokenAddresses\",\"type\":\"address[]\"},{\"name\":\"earnTokenCount\",\"type\":\"uint256[]\"},{\"name\":\"earnTokenProbability\",\"type\":\"int256[]\"},{\"name\":\"earnEtherCount\",\"type\":\"uint256\"},{\"name\":\"earnEtherProbability\",\"type\":\"int256\"}],\"name\":\"updateLuckyblockEarn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuperuser\",\"type\":\"address\"}],\"name\":\"transferSuperuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"},{\"name\":\"spendTokenAddresses\",\"type\":\"address[]\"},{\"name\":\"spendTokenCount\",\"type\":\"uint256[]\"},{\"name\":\"spendEtherCount\",\"type\":\"uint256\"}],\"name\":\"updateLuckyblockSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"getLuckyblockEarn\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSuperuser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"addLuckyblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"luckyblockId\",\"type\":\"bytes32\"}],\"name\":\"getLuckyblockBase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_SUPERUSER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"luckyblockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"uint8\"}],\"name\":\"Play\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Luckyblock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f4740bec48ec1a0809a8c9cbd414987e450f1b490a4cd00df6c11902d7ae0e2"}]}