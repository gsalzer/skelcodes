{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n    Sale(address ethwallet)   // this will send the received ETH funds to this address\r\n  @author Yumerium Ltd\r\n*/\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract YumeriumManager {\r\n    function getYumerium(uint256 value, address sender) external returns (uint256);\r\n}\r\n\r\ncontract Sale {\r\n    uint public saleEnd1 = 1535846400 + 1 days; //9/3/2018 @ 12:00am (UTC)\r\n    uint public saleEnd2 = saleEnd1 + 1 days; //9/4/2018 @ 12:00am (UTC)\r\n    uint public saleEnd3 = saleEnd2 + 1 days; //9/5/2018 @ 12:00am (UTC)\r\n    uint public saleEnd4 = 1539129600; //10/10/2018 @ 12:00am (UTC)\r\n    uint256 public minEthValue = 10 ** 15; // 0.001 eth\r\n\r\n    uint256 public totalPariticpants = 0;\r\n    uint256 public adjustedValue = 0;\r\n    mapping(address => Renowned) public renownedPlayers; // map for the player information\r\n    mapping(bytes8 => address) public referral; // map for the player information\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 public maxSale;\r\n    uint256 public totalSaled;\r\n    \r\n    YumeriumManager public manager;\r\n    address public owner;\r\n\r\n    event Contribution(address from, uint256 amount);\r\n\r\n    constructor(address _manager_address) public {\r\n        maxSale = 316906850 * 10 ** 8; \r\n        manager = YumeriumManager(_manager_address);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function () external payable {\r\n        buy(\"\");\r\n    }\r\n\r\n    // CONTRIBUTE FUNCTION\r\n    // converts ETH to TOKEN and sends new TOKEN to the sender\r\n    function contribute(bytes8 referralCode) external payable {\r\n        buy(referralCode);\r\n    }\r\n    \r\n    function becomeRenown() public payable {\r\n        generateRenown();\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function generateRenown() private {\r\n        require(!renownedPlayers[msg.sender].isRenowned, \"You already registered as renowned!\");\r\n        bytes8 referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\r\n        // check hash collision and regenerate hash value again\r\n        while (renownedPlayers[referral[referralCode]].isRenowned)\r\n        {\r\n            adjustedValue = adjustedValue.add(1);\r\n            referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\r\n        }\r\n        renownedPlayers[msg.sender].addr = msg.sender;\r\n        renownedPlayers[msg.sender].referralCode = referralCode;\r\n        renownedPlayers[msg.sender].isRenowned = true;\r\n        referral[renownedPlayers[msg.sender].referralCode] = msg.sender;\r\n        totalPariticpants = totalPariticpants.add(1);\r\n    }\r\n    \r\n    function buy(bytes8 referralCode) internal {\r\n        require(msg.value>=minEthValue);\r\n        require(now < saleEnd4); // main sale postponed\r\n\r\n        // distribution for referral\r\n        uint256 remainEth = msg.value;\r\n        if (referral[referralCode] != msg.sender && renownedPlayers[referral[referralCode]].isRenowned)\r\n        {\r\n            uint256 referEth = msg.value.mul(10).div(100);\r\n            referral[referralCode].transfer(referEth);\r\n            remainEth = remainEth.sub(referEth);\r\n        }\r\n\r\n        if (!renownedPlayers[msg.sender].isRenowned)\r\n        {\r\n            generateRenown();\r\n        }\r\n        \r\n        uint256 amount = manager.getYumerium(msg.value, msg.sender);\r\n        uint256 total = totalSaled.add(amount);\r\n        owner.transfer(remainEth);\r\n        \r\n        require(total<=maxSale);\r\n        \r\n        totalSaled = total;\r\n        \r\n        emit Contribution(msg.sender, amount);\r\n    }\r\n\r\n    // change yumo address\r\n    function changeManagerAddress(address _manager_address) external {\r\n        require(msg.sender==owner, \"You are not an owner!\");\r\n        manager = YumeriumManager(_manager_address);\r\n    }\r\n    // change yumo address\r\n    function changeTeamWallet(address _team_address) external {\r\n        require(msg.sender==owner, \"You are not an owner!\");\r\n        owner = YumeriumManager(_team_address);\r\n    }\r\n\r\n    struct Renowned {\r\n        bool isRenowned;\r\n        address addr;\r\n        bytes8 referralCode;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"referral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adjustedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referralCode\",\"type\":\"bytes8\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeRenown\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEthValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPariticpants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"renownedPlayers\",\"outputs\":[{\"name\":\"isRenowned\",\"type\":\"bool\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"referralCode\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team_address\",\"type\":\"address\"}],\"name\":\"changeTeamWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager_address\",\"type\":\"address\"}],\"name\":\"changeManagerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f63fb3d438912c62d710f6d3edc9fa784cf8dbc4","Library":"","SwarmSource":"bzzr://2265c22193ff5455a3dad2787981932091e0b5069d375bd367428485334dccc1"}]}