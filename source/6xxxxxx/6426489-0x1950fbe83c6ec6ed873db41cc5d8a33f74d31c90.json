{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n// 名称检验\r\nlibrary NameFilter {\r\n\r\nfunction filter(string _input)\r\n    internal\r\n    pure\r\n    returns(string)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        require (_length <= 256 && _length > 0, \"string must be between 1 and 256 characters\");\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        return _input;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SimpleAuction {\r\n    using NameFilter for string;\r\n    using SafeMath for *;\r\n    \r\n    \r\n    // 受益人\r\n    address private boss;\r\n\r\n    // fees\r\n    uint public fees;\r\n\r\n    address private top;\r\n\r\n    address private loser;\r\n\r\n    uint private topbid;\r\n\r\n    uint private loserbid;\r\n\r\n\r\n    //可以取回的之前的出价\r\n    mapping(address => uint) pendingReturns;\r\n\r\n    mapping(address => string) giverNames;\r\n\r\n    mapping(address => string) giverMessages;\r\n\r\n\r\n\r\n\r\n\r\n    constructor(\r\n        address _beneficiary\r\n    ) public {\r\n        boss = _beneficiary;\r\n    }\r\n\r\n\r\n    /// How much would you like to pay?\r\n    function bid() public payable {\r\n        // 如果出价不够0.0001ether\r\n        require(\r\n            msg.value > 0.0001 ether,\r\n            \"?????\"\r\n        );\r\n        // 如果出价不够高，返还你的钱\r\n        require(\r\n            msg.value > topbid,\r\n            \"loser fuck off.\"\r\n        );\r\n        // 参数不是必要的。因为所有的信息已经包含在了交易中。\r\n        // 对于能接收以太币的函数，关键字 payable 是必须的。\r\n        pendingReturns[msg.sender] += (msg.value.div(10).mul(9));\r\n        fees+= msg.value.div(10);\r\n        \r\n        if(top != 0){\r\n            loser = top;\r\n            loserbid = topbid;\r\n        }\r\n        top = msg.sender;\r\n        topbid = msg.value;\r\n\r\n        if(bytes(giverNames[msg.sender]).length== 0) {\r\n            giverNames[msg.sender] = \"#Anonymous\";\r\n            giverMessages[msg.sender] = \"#Nothing\";\r\n        }\r\n    }\r\n\r\n    function setInfo(string _name,string _message) public {\r\n        \r\n        giverNames[msg.sender] = _name.filter();\r\n        giverMessages[msg.sender] = _message.filter();\r\n    }\r\n\r\n    function getMyInfo() public view returns (string,string){\r\n        return getInfo(msg.sender);\r\n    }\r\n    \r\n    function getFess() public view returns (uint){\r\n        return fees;\r\n    }\r\n\r\n\r\n\r\n    function getWLInfo() public view returns (string,string,uint,string,string,uint){\r\nreturn (giverNames[top],giverMessages[top],topbid,giverNames[loser],giverMessages[loser],loserbid);\r\n    }\r\n\r\n\r\n\r\n    function getInfo(address _add) public view returns (string,string){\r\n        return (giverNames[_add],giverMessages[_add]);\r\n    }\r\n\r\n\r\n    /// 取回\r\n    function withdraw() public returns (bool) {\r\n        require(pendingReturns[msg.sender]>0,\"Nothing left for you\");\r\n        uint amount = pendingReturns[msg.sender];\r\n        pendingReturns[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        if(msg.sender==top){\r\n            loser = top;\r\n            loserbid =topbid;\r\n            top = 0;\r\n            topbid = 0;\r\n        }    \r\n        return true;\r\n    }\r\n\r\n    /// shouqian\r\n    function woyaoqianqian(uint fee) public {\r\n                require(\r\n            fee < fees,\r\n            \"loser fuck off.\"\r\n        );\r\n        fees = fees.sub(fee);\r\n        // 3. 交互\r\n        boss.transfer(fee);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"woyaoqianqian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWLInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SimpleAuction","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000851af22f2c5f18eda43b70b895254ed8c307e320","Library":"","SwarmSource":"bzzr://4c2d17b9f4a41032309bf888566a8fe94f4e163dcc200905abdba66e160d34df"}]}