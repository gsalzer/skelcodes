{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract XOXOCoin is ERC20 {\r\n    \r\n    using SafeMath for uint256; \r\n    address owner1 = msg.sender; \r\n    address owner2; \r\n\r\n    mapping (address => uint256) balances; \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => uint256) times;//Ͷ�Ŵ���T\r\n    mapping (address => mapping (uint256 => uint256)) dorpnum;//��ӦT��ŵ�Ͷ����Ŀ\r\n    mapping (address => mapping (uint256 => uint256)) dorptime;//��ӦT��ŵ�Ͷ��ʱ���\r\n    mapping (address => mapping (uint256 => uint256)) freeday;//��ӦT��ŵĶ���ʱ��\r\n    \r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => bool) public airlist;\r\n\r\n    string public constant name = \"XOXOCoin\";\r\n    string public constant symbol = \"XOX\";\r\n    uint public constant decimals = 8;\r\n    uint256 _Rate = 10 ** decimals; \r\n    uint256 public totalSupply = 200000000 * _Rate;\r\n\r\n    uint256 public totalDistributed = 0;\r\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\r\n    uint256 public value;\r\n    uint256 public _per = 1;\r\n    bool public distributionClosed = true;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrClosed(bool Closed);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner1 || msg.sender == owner2);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n     function XOXOCoin (address _owner) public {\r\n        owner1 = msg.sender;\r\n        owner2 = _owner;\r\n        value = 200 * _Rate;\r\n    }\r\n     function nowInSeconds() returns (uint256){\r\n        return now;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0) && newOwner != owner1 && newOwner != owner2) {\r\n            if(msg.sender == owner1){\r\n             owner1 = newOwner;   \r\n            }\r\n            if(msg.sender == owner2){\r\n             owner2 = newOwner;   \r\n            }\r\n        }\r\n    }\r\n\r\n    function closeDistribution(bool Closed) onlyOwner public returns (bool) {\r\n        distributionClosed = Closed;\r\n        DistrClosed(Closed);\r\n        return true;\r\n    }\r\n\r\n   function Set_per(uint256 per) onlyOwner public returns (bool) {\r\n   require(per <= 100 && per >= 1);\r\n\r\n        _per  = per;\r\n        return true;\r\n    }\r\n\r\n    function distr(address _to, uint256 _amount, uint256 _freeday) private returns (bool) {\r\n         if (_amount > totalRemaining) {\r\n            _amount = totalRemaining;\r\n        }\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        if (_freeday>0) {times[_to] += 1;\r\n        dorptime[_to][times[_to]] = now;\r\n        freeday[_to][times[_to]] = _freeday * 1 days;\r\n        dorpnum[_to][times[_to]] = _amount;}\r\n\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionClosed = true;\r\n        }        \r\n        Distr(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n        \r\n\r\n    }\r\n \r\n\r\n    function distribute(address[] addresses, uint256[] amounts, uint256 _freeday) onlyOwner public {\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] * _Rate <= totalRemaining);\r\n            distr(addresses[i], amounts[i] * _Rate, _freeday);\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n            getTokens();\r\n     }\r\n\r\n    function getTokens() payable public {\r\n        if(!distributionClosed){\r\n        if (value > totalRemaining) {\r\n            value = totalRemaining;\r\n        }\r\n        address investor = msg.sender;\r\n        uint256 toGive = value;\r\n        require(value <= totalRemaining);\r\n        \r\n        if(!airlist[investor]){\r\n        totalDistributed = totalDistributed.add(toGive);\r\n        totalRemaining = totalRemaining.sub(toGive);\r\n        balances[investor] = balances[investor].add(toGive);\r\n        times[investor] += 1;\r\n        dorptime[investor][times[investor]] = now;\r\n        freeday[investor][times[investor]] = 180 * 1 days;\r\n        dorpnum[investor][times[investor]] = toGive;\r\n        airlist[investor] = true;\r\n        if (totalDistributed >= totalSupply) {\r\n            distributionClosed = true;\r\n        }        \r\n        Distr(investor, toGive);\r\n        Transfer(address(0), investor, toGive);\r\n        }\r\n        }\r\n    }\r\n    //\r\n    function freeze(address[] addresses,bool locked) onlyOwner public {\r\n        \r\n        require(addresses.length <= 255);\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            freezeAccount(addresses[i], locked);\r\n        }\r\n    }\r\n    \r\n    function freezeAccount(address target, bool B) private {\r\n        frozenAccount[target] = B;\r\n        FrozenFunds(target, B);\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n      if(!distributionClosed && !airlist[_owner]){\r\n       return balances[_owner] + value;\r\n       }\r\n\t    return balances[_owner];\r\n    }\r\n//��ѯ��ַ��������\r\n    function lockOf(address _owner) constant public returns (uint256) {\r\n    uint locknum = 0;\r\n    for (uint8 i = 1; i < times[_owner] + 1; i++){\r\n      if(now < dorptime[_owner][i] + freeday[_owner][i] + 1* 1 days){\r\n            locknum += dorpnum[_owner][i];\r\n        }\r\n       else{\r\n            if(now < dorptime[_owner][i] + freeday[_owner][i] + 100/_per* 1 days){\r\n               locknum += ((now - dorptime[_owner][i] - freeday[_owner][i] )/(1 * 1 days)*dorpnum[_owner][i]*_per/100);\r\n              }\r\n              else{\r\n                 locknum += 0;\r\n              }\r\n        }\r\n    }\r\n\t    return locknum;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= (balances[msg.sender] - lockOf(msg.sender)));\r\n        require(!frozenAccount[msg.sender]);                     \r\n        require(!frozenAccount[_to]);                      \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= (allowed[_from][msg.sender] - lockOf(msg.sender)));\r\n\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        address owner = msg.sender;\r\n        owner.transfer(etherBalance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_per\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nowInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"per\",\"type\":\"uint256\"}],\"name\":\"Set_per\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Closed\",\"type\":\"bool\"}],\"name\":\"closeDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"_freeday\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Closed\",\"type\":\"bool\"}],\"name\":\"DistrClosed\",\"type\":\"event\"}]","ContractName":"XOXOCoin","CompilerVersion":"v0.4.25-nightly.2018.5.17+commit.4aa2f036","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e4eeb045ab5d529d5856aced7950a63f84d5f311","Library":"","SwarmSource":"bzzr://a982d75c942b303e71e08480e3eb7f7a815e0608d5b7fedd26a652b6426b32a2"}]}