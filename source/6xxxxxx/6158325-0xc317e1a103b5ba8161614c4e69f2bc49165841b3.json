{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() public {owner = msg.sender; }\r\n  modifier onlyOwner() {require(msg.sender == owner); _; }\r\n}\r\n\r\n\r\ncontract REALIDVerification is Ownable {\r\n    event AddVerifiedInfo(address useraddress,address orgaddress,uint8 certificateNo,string orgsign,string infoHash,string resultHash);\r\n    event UpdateVerifiedSign(address orgaddress,address useraddress,string infoHash,uint8 certificateNo,string orgsign);\r\n    event AddOrgInfo(address orgaddress,string certificate);\r\n    event UpdateValidOrgInfo(address orgaddress,bool isvalid);\r\n    event UpdateWebsiteOrg(address orgaddress,string website);\r\n\r\n    struct verifiedInfo{\r\n        address validOrg;\r\n        uint8 certificateNo;\r\n        string orgSign;\r\n        string resultHash;\r\n        uint256 createTime;\r\n    }\r\n\r\n    struct orgInfo{\r\n        string orgName;\r\n        string[] certificateAds;\r\n        string website;\r\n        bool isvalid;\r\n        uint256 createTime;\r\n        string country;\r\n        uint8 level;\r\n    }\r\n\r\n    mapping (address => mapping (string => verifiedInfo)) internal verifiedDatas;\r\n    mapping (address => orgInfo) internal orgData;\r\n\r\n    function addOrg(address orgaddress,string orgName,string certificate,string website,string country, uint8 level) public onlyOwner {\r\n        require(orgData[orgaddress].createTime == 0);\r\n        if(bytes(certificate).length != 0){\r\n            orgData[orgaddress].certificateAds.push(certificate);\r\n        }\r\n        orgData[orgaddress].orgName = orgName;\r\n        orgData[orgaddress].website = website;\r\n        orgData[orgaddress].isvalid = true;\r\n        orgData[orgaddress].createTime = now;\r\n        orgData[orgaddress].country = country;\r\n        orgData[orgaddress].level = level;\r\n        emit AddOrgInfo(orgaddress, certificate);\r\n    }\r\n\r\n    function updateValidOrg(address orgaddress,bool isvalid) public onlyOwner {\r\n        require(orgData[orgaddress].createTime != 0);\r\n        orgData[orgaddress].isvalid = isvalid;\r\n        emit UpdateValidOrgInfo(orgaddress, isvalid);\r\n    }\r\n\r\n    function updateWebsite(address orgaddress,string website) public onlyOwner {\r\n        require(orgData[orgaddress].createTime != 0);\r\n        orgData[orgaddress].website = website;\r\n        emit UpdateWebsiteOrg(orgaddress,website);\r\n    }\r\n    \r\n    modifier onlyValidOrg{ require(orgData[msg.sender].isvalid);_; }\r\n    function addOrgCertificate(string certificate) public onlyValidOrg returns(uint){\r\n        uint certificateNo = orgData[msg.sender].certificateAds.length;\r\n        orgData[msg.sender].certificateAds.push(certificate);\r\n        return certificateNo;\r\n    }\r\n\r\n\r\n\r\n    function addVerifiedInfo(address useraddress,string infoHash,uint8 certificateNo,string orgSign,string resultHash) public onlyValidOrg {\r\n        require(verifiedDatas[useraddress][infoHash].validOrg == address(0));\r\n        verifiedDatas[useraddress][infoHash].validOrg = msg.sender;\r\n        verifiedDatas[useraddress][infoHash].certificateNo = certificateNo;\r\n        verifiedDatas[useraddress][infoHash].orgSign = orgSign;\r\n        verifiedDatas[useraddress][infoHash].resultHash = resultHash;\r\n        verifiedDatas[useraddress][infoHash].createTime = now;\r\n        emit AddVerifiedInfo(useraddress,msg.sender,certificateNo,orgSign,infoHash,resultHash);\r\n    }\r\n\r\n    function updateVerifiedSign(address useraddress,string infoHash,uint8 certificateNo,string orgSign) public onlyValidOrg {\r\n        require(verifiedDatas[useraddress][infoHash].validOrg == msg.sender);\r\n        verifiedDatas[useraddress][infoHash].certificateNo = certificateNo;\r\n        verifiedDatas[useraddress][infoHash].orgSign = orgSign;\r\n        emit UpdateVerifiedSign(msg.sender,useraddress,infoHash,certificateNo,orgSign);\r\n    }\r\n\r\n    function getVerifiedInfo(address useraddress,string infoHash) view public returns(address,uint8, string, string,uint256){\r\n        return (verifiedDatas[useraddress][infoHash].validOrg, verifiedDatas[useraddress][infoHash].certificateNo, \r\n        verifiedDatas[useraddress][infoHash].orgSign, verifiedDatas[useraddress][infoHash].resultHash,\r\n        verifiedDatas[useraddress][infoHash].createTime);\r\n    }\r\n  \r\n    function getOrgInfo(address org) view public returns(string,string,string,uint256,string,uint8){\r\n        if(orgData[org].certificateAds.length == 0){\r\n            return (orgData[org].orgName,orgData[org].website,\"\",orgData[org].createTime,orgData[org].country,orgData[org].level);\r\n        }else{\r\n            return (orgData[org].orgName,orgData[org].website,orgData[org].certificateAds[0],orgData[org].createTime,orgData[org].country,orgData[org].level);\r\n        }\r\n    }\r\n    \r\n    function getCertificateInfoByNo(address org,uint8 certificateNo) view public returns(string){\r\n        return (orgData[org].certificateAds[certificateNo]);\r\n    }\r\n\r\n    function isvalidOrg(address orgaddress) view public onlyOwner returns(bool){\r\n        return orgData[orgaddress].isvalid;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"orgaddress\",\"type\":\"address\"},{\"name\":\"website\",\"type\":\"string\"}],\"name\":\"updateWebsite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgaddress\",\"type\":\"address\"},{\"name\":\"orgName\",\"type\":\"string\"},{\"name\":\"certificate\",\"type\":\"string\"},{\"name\":\"website\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"addOrg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useraddress\",\"type\":\"address\"},{\"name\":\"infoHash\",\"type\":\"string\"},{\"name\":\"certificateNo\",\"type\":\"uint8\"},{\"name\":\"orgSign\",\"type\":\"string\"}],\"name\":\"updateVerifiedSign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certificate\",\"type\":\"string\"}],\"name\":\"addOrgCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"useraddress\",\"type\":\"address\"},{\"name\":\"infoHash\",\"type\":\"string\"}],\"name\":\"getVerifiedInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"org\",\"type\":\"address\"},{\"name\":\"certificateNo\",\"type\":\"uint8\"}],\"name\":\"getCertificateInfoByNo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgaddress\",\"type\":\"address\"}],\"name\":\"isvalidOrg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"org\",\"type\":\"address\"}],\"name\":\"getOrgInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useraddress\",\"type\":\"address\"},{\"name\":\"infoHash\",\"type\":\"string\"},{\"name\":\"certificateNo\",\"type\":\"uint8\"},{\"name\":\"orgSign\",\"type\":\"string\"},{\"name\":\"resultHash\",\"type\":\"string\"}],\"name\":\"addVerifiedInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgaddress\",\"type\":\"address\"},{\"name\":\"isvalid\",\"type\":\"bool\"}],\"name\":\"updateValidOrg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orgaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"certificateNo\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"orgsign\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"infoHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"resultHash\",\"type\":\"string\"}],\"name\":\"AddVerifiedInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orgaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"infoHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"certificateNo\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"orgsign\",\"type\":\"string\"}],\"name\":\"UpdateVerifiedSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orgaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"string\"}],\"name\":\"AddOrgInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orgaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isvalid\",\"type\":\"bool\"}],\"name\":\"UpdateValidOrgInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orgaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"website\",\"type\":\"string\"}],\"name\":\"UpdateWebsiteOrg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"REALIDVerification","CompilerVersion":"v0.4.25-nightly.2018.8.1+commit.21888e24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a51d6fa62ad5b990dfe1d9a359a33ff1cbc86c06cde65fbe71b0f0cdae265122"}]}