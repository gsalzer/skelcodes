{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    //emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n    /**\r\n    * @dev prevents contracts from interacting with others\r\n    */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n    \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract pokerEvents{\r\n    event Bettings(\r\n        uint indexed guid,\r\n        uint gameType,\r\n        address indexed playerAddr,\r\n        uint[] bet,\r\n        bool indexed result,\r\n        uint winNo,\r\n        uint amount,\r\n        uint winAmount,\r\n        uint jackpot\r\n        );\r\n        \r\n    event JackpotPayment(\r\n        uint indexed juid,\r\n        address indexed playerAddr,\r\n        uint amount,\r\n        uint winAmount\r\n        );\r\n    \r\n    event FreeLottery(\r\n        uint indexed luid,\r\n        address indexed playerAddr,\r\n        uint indexed winAmount\r\n        );\r\n    \r\n}\r\n\r\ncontract Poker is Ownable,pokerEvents{\r\n    using inArrayExt for address[];\r\n    using intArrayExt for uint[];\r\n    \r\n    address private opAddress;\r\n    address private wallet1;\r\n    address private wallet2;\r\n    \r\n    bool public gamePaused=false;\r\n    uint public guid=1;\r\n    uint public luid=1;\r\n    mapping(string=>uint) odds;\r\n\r\n    /* setting*/\r\n    uint minPrize=0.01 ether;\r\n    uint lotteryPercent = 3 ether;\r\n    uint public minBetVal=0.01 ether;\r\n    uint public maxBetVal=1 ether;\r\n    \r\n    /* free lottery */\r\n    struct FreeLotto{\r\n        bool active;\r\n        uint prob;\r\n        uint prize;\r\n        uint freezeTimer;\r\n        uint count;\r\n        mapping(address => uint) lastTime;\r\n    }\r\n    mapping(uint=>FreeLotto) lotto;\r\n    mapping(address=>uint) playerCount;\r\n    bool freeLottoActive=true;\r\n    \r\n    /* jackpot */\r\n    uint public jpBalance=0;\r\n    uint jpMinBetAmount=0.05 ether;\r\n    uint jpMinPrize=0.01 ether;\r\n    uint jpChance=1000;\r\n    uint jpPercent=0.3 ether;\r\n    \r\n        /*misc */\r\n    uint private rndSeed;\r\n    uint private minute=60;\r\n    uint private hour=60*60;\r\n    \r\n    /*\r\n    ===========================================\r\n    CONSTRUCTOR\r\n    ===========================================\r\n    */\r\n    constructor(uint _rndSeed) public{\r\n        opAddress=msg.sender;\r\n        wallet1=msg.sender;\r\n        wallet2=msg.sender;\r\n        \r\n        odds['bs']=1.97 ether;\r\n        odds['suit']=3.82 ether;\r\n        odds['num']=11.98 ether;\r\n        odds['nsuit']=49.98 ether;\r\n    \r\n        /* free lottery initial*/\r\n        lotto[1]=FreeLotto(true,1000,0.1 ether,hour / 100 ,0);\r\n        lotto[2]=FreeLotto(true,100000,1 ether,3*hour/100 ,0);\r\n\r\n        \r\n        /* initial random seed*/\r\n        rndSeed=uint(keccak256(abi.encodePacked(blockhash(block.number-1), msg.sender,now,_rndSeed)));\r\n    }\r\n\r\n     function play(uint _gType,uint[] _bet) payable isHuman() public returns(uint){\r\n        require(!gamePaused,'Game Pause');\r\n        require(msg.value >=  minBetVal*_bet.length && msg.value <=  maxBetVal*_bet.length );\r\n\r\n        bool _ret=false;\r\n        uint _betAmount= msg.value /_bet.length;\r\n        uint _prize=0;\r\n        uint _winNo= uint(keccak256(abi.encodePacked(rndSeed,msg.sender,block.coinbase,block.timestamp, block.difficulty,block.gaslimit))) % 52 + 1;\r\n        \r\n        if(_gType==1){\r\n            if(_betAmount * odds['bs']  / 1 ether >= address(this).balance/2){\r\n                revert(\"over max bet amount\");\r\n            }\r\n            \r\n            if((_winNo > 31 && _bet.contain(2)) || (_winNo < 28 && _bet.contain(1))){\r\n                _ret=true;\r\n                _prize=(_betAmount * odds['bs']) / 1 ether;\r\n            }else if(_winNo>=28 && _winNo <=31 && _bet.contain(0)){\r\n                _ret=true;\r\n                _prize=(_betAmount * 12 ether) / 1 ether; \r\n            }\r\n        }\r\n        \r\n        /*\r\n        ret%4=0 spades;\r\n        ret%4=1 hearts\r\n        ret%4=2 clubs;\r\n        ret%4=3 diamonds;\r\n        */\r\n        if(_gType==2 && _bet.contain(_winNo%4+1)){\r\n            if(_betAmount * odds['suit'] / 1 ether >= address(this).balance/2){\r\n                revert(\"over max bet amount\");\r\n            }\r\n            \r\n            _ret=true;\r\n            _prize=(_betAmount * odds['suit']) / 1 ether; \r\n        }\r\n        \r\n        if(_gType==3 && _bet.contain((_winNo-1)/4+1)){\r\n            if(_betAmount * odds['num'] / 1 ether >= address(this).balance/2){\r\n                revert(\"over max bet amount\");\r\n            }\r\n            \r\n            _ret=true;\r\n            _prize=(_betAmount * odds['num']) / 1 ether; \r\n        }\r\n        \r\n        if(_gType==4 && _bet.contain(_winNo)){\r\n            if(_betAmount * odds['nsuit'] / 1 ether >= address(this).balance/2){\r\n                revert(\"over max bet amount\");\r\n            }\r\n            \r\n            _ret=true;\r\n            _prize=(_betAmount * odds['nsuit']) / 1 ether; \r\n            \r\n        }\r\n\r\n        if(_ret){\r\n            msg.sender.transfer(_prize);\r\n        }else{\r\n            jpBalance += (msg.value * jpPercent) / 100 ether;\r\n        }\r\n        \r\n        rndSeed = uint(uint(keccak256(abi.encodePacked(msg.sender,block.timestamp, block.difficulty,block.gaslimit,_winNo))));\r\n        \r\n\r\n        /* JackPot*/\r\n        uint tmpJackpot=0;\r\n        if(_betAmount >= jpMinBetAmount){\r\n            uint _jpNo= uint(keccak256(abi.encodePacked(rndSeed,msg.sender,block.coinbase,block.timestamp, block.difficulty,block.gaslimit))) % jpChance;\r\n            if(_jpNo==77 && jpBalance>jpMinPrize){\r\n                msg.sender.transfer(jpBalance);\r\n                emit JackpotPayment(guid,msg.sender,_betAmount,jpBalance);\r\n                tmpJackpot=jpBalance;\r\n                jpBalance=0;\r\n            }else{\r\n                tmpJackpot=0;\r\n            }\r\n            \r\n            rndSeed = uint(uint(keccak256(abi.encodePacked(msg.sender,block.timestamp, block.difficulty,block.gaslimit,_jpNo))));\r\n        }\r\n        \r\n        emit Bettings(guid,_gType,msg.sender,_bet,_ret,_winNo,msg.value,_prize,tmpJackpot);\r\n        \r\n        guid+=1;\r\n        return _winNo;\r\n    }\r\n    \r\n\r\n    function freeLottery(uint _gid) public{\r\n        require(!gamePaused,'Game Pause');\r\n        require(freeLottoActive && lotto[_gid].active,'Free Lotto is closed');\r\n        require(now - lotto[_gid].lastTime[msg.sender] >= lotto[_gid].freezeTimer,'in the freeze time');\r\n        \r\n        uint chancex=1;\r\n        uint winNo = 0;\r\n        if(playerCount[msg.sender]>=3){\r\n            chancex=2;\r\n        }\r\n        if(playerCount[msg.sender]>=6){\r\n            chancex=3;\r\n        }\r\n        \r\n        winNo=uint(keccak256(abi.encodePacked(msg.sender,block.number,block.timestamp, block.difficulty,block.gaslimit))) % (playerCount[msg.sender]>=3?lotto[_gid].prob/chancex:lotto[_gid].prob)+1;\r\n\r\n        bool result;\r\n        if(winNo==7){\r\n            result=true;\r\n            msg.sender.transfer(lotto[_gid].prize);\r\n        }else{\r\n            result=false;\r\n            if(playerCount[msg.sender]==0 || lotto[_gid].lastTime[msg.sender] <= now -lotto[_gid].freezeTimer - 15*minute){\r\n                playerCount[msg.sender]+=1;\r\n            }else{\r\n                playerCount[msg.sender]=0;\r\n            }\r\n        }\r\n        \r\n        emit FreeLottery(luid,msg.sender,result?lotto[_gid].prize:0);\r\n        \r\n        luid=luid+1;\r\n        lotto[_gid].lastTime[msg.sender]=now;\r\n    }\r\n    \r\n    function freeLottoInfo() public view returns(uint,uint,uint){\r\n        uint chance=1;\r\n        if(playerCount[msg.sender]>=3){\r\n            chance=2;\r\n        }\r\n        if(playerCount[msg.sender]>=6){\r\n            chance=3;\r\n        }\r\n        return (lotto[1].lastTime[msg.sender],lotto[2].lastTime[msg.sender],chance);\r\n    }\r\n    \r\n    function updateRndSeed() public {\r\n        require(msg.sender==owner || msg.sender==opAddress,\"DENIED\");\r\n        \r\n        rndSeed = uint(uint(keccak256(abi.encodePacked(msg.sender,block.number,block.timestamp,block.coinbase, block.difficulty,block.gaslimit))));\r\n    }\r\n    \r\n    function updateOdds(string _game,uint _val) public{\r\n        require(msg.sender==owner || msg.sender==opAddress);\r\n        \r\n        odds[_game]=_val;\r\n    }\r\n    \r\n    function updateStatus(uint _p,bool _status) public{\r\n        require(msg.sender==owner || msg.sender==opAddress);\r\n        \r\n        if(_p==1){gamePaused=_status;}\r\n        if(_p==2){freeLottoActive=_status;}\r\n        if(_p==3){lotto[1].active =_status;}\r\n        if(_p==4){lotto[2].active =_status;}\r\n        \r\n    }\r\n    \r\n    function getOdds() public view returns(uint[]) {\r\n        uint[] memory ret=new uint[](4);\r\n        ret[0]=odds['bs'];\r\n        ret[1]=odds['suit'];\r\n        ret[2]=odds['num'];\r\n        ret[3]=odds['nsuit'];\r\n        \r\n        return ret;\r\n    }\r\n    \r\n    function updateLottoParams(uint _gid,uint _key,uint _val) public{\r\n        require(msg.sender==owner || msg.sender==opAddress);\r\n        /* \r\n        _ke y=> 1:active,2:prob,3:prize,4:freeTimer\r\n        */\r\n        \r\n        if(_key==1){lotto[_gid].active=(_val==1);}\r\n        if(_key==2){lotto[_gid].prob=_val;}\r\n        if(_key==3){lotto[_gid].prize=_val;}\r\n        if(_key==4){lotto[_gid].freezeTimer=_val;}\r\n        \r\n    }\r\n    \r\n    function getLottoData(uint8 _gid) public view returns(bool,uint,uint,uint,uint){\r\n        return (lotto[_gid].active,lotto[_gid].prob,lotto[_gid].prize,lotto[_gid].freezeTimer,lotto[_gid].count);\r\n        \r\n    }\r\n    \r\n    function setAddr(uint _acc,address _addr) public onlyOwner{\r\n        if(_acc==1){wallet1=_addr;}\r\n        if(_acc==2){wallet2=_addr;}\r\n        if(_acc==3){opAddress=_addr;}\r\n    }\r\n    \r\n    function getAddr(uint _acc) public view onlyOwner returns(address){\r\n        if(_acc==1){return wallet1;}\r\n        if(_acc==2){return wallet2;}\r\n        if(_acc==3){return opAddress;}\r\n    }\r\n    \r\n\r\n    function withdraw(address _to,uint amount) public onlyOwner returns(bool){\r\n        require(address(this).balance - amount > 0);\r\n        _to.transfer(amount);\r\n    }\r\n    \r\n    function distribute(uint _p) public onlyOwner{\r\n        uint prft1=_p* 85 / 100;\r\n        uint prft2=_p* 10 / 100;\r\n        uint prft3=_p* 5 / 100;\r\n\r\n        owner.transfer(prft1);\r\n        wallet1.transfer(prft2);\r\n        wallet2.transfer(prft3);\r\n\r\n    }\r\n    \r\n    \r\n    function() payable isHuman() public {\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\nlibrary inArrayExt{\r\n    function contain(address[] _arr,address _val) internal pure returns(bool){\r\n        for(uint _i=0;_i< _arr.length;_i++){\r\n            if(_arr[_i]==_val){\r\n                return true;\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nlibrary intArrayExt{\r\n    function contain(uint[] _arr,uint _val) internal pure returns(bool){\r\n        for(uint _i=0;_i< _arr.length;_i++){\r\n            if(_arr[_i]==_val){\r\n                return true;\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"guid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gid\",\"type\":\"uint8\"}],\"name\":\"getLottoData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRndSeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeLottoInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gid\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"updateLottoParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gType\",\"type\":\"uint256\"},{\"name\":\"_bet\",\"type\":\"uint256[]\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOdds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jpBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetVal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"string\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"updateOdds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBetVal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_acc\",\"type\":\"uint256\"}],\"name\":\"getAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"freeLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acc\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rndSeed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameType\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256[]\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"winNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"}],\"name\":\"Bettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"juid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"JackpotPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"luid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"FreeLottery\",\"type\":\"event\"}]","ContractName":"Poker","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000001accc0316285dfe67df656ab338c","Library":"","SwarmSource":"bzzr://7d6508fd660956d1d60159e5ff77d619e9df67e444c6de6ddcb8a711cf9d4bc2"}]}