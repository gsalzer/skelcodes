{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract GMBCToken {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract GamblicaEarlyAccess {\r\n\r\n    enum State { CREATED, DEPOSIT, CLAIM }\r\n\r\n    uint constant PRIZE_FUND_GMBC = 100000000 * (10 ** 18); // 100 000 000 GMBC\r\n\r\n    event DepositRegistered(address _player, uint _amount);    \r\n\r\n    GMBCToken public gmbcToken;    \r\n    address public gamblica;\r\n\r\n    State public state;    \r\n    uint public gmbcTotal;\r\n    mapping (address => uint) public deposit;\r\n    \r\n    modifier onlyGamblica() {\r\n        require(msg.sender == gamblica, \"Method can be called only by gamblica\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _gamblica, address _gmbcTokenAddress) public {\r\n      state = State.CREATED;\r\n\r\n      gamblica = _gamblica;\r\n      gmbcToken = GMBCToken(_gmbcTokenAddress);            \r\n    }\r\n\r\n    function () external payable {\r\n      require(msg.value == 0, \"This contract does not accept ether\");\r\n\r\n      claim();\r\n    }\r\n\r\n    function start() public onlyGamblica {\r\n      require(gmbcToken.balanceOf(address(this)) >= PRIZE_FUND_GMBC, \"Contract can only be activated with a prize fund\");\r\n      require(state == State.CREATED, \"Invalid contract state\");\r\n\r\n      gmbcTotal = PRIZE_FUND_GMBC;\r\n      state = State.DEPOSIT;\r\n    }\r\n\r\n    function registerDeposit(address player, uint amount) public onlyGamblica {\r\n      require(state == State.DEPOSIT, \"Invalid contract state\");\r\n      require(gmbcTotal + amount <= gmbcToken.balanceOf(address(this)), \"Cant register that deposit\");\r\n\r\n      gmbcTotal += amount;      \r\n      deposit[player] += amount;\r\n\r\n      emit DepositRegistered(player, amount);\r\n    }\r\n\r\n\r\n    function addWinnigs(address[] memory winners, uint[] memory amounts) public onlyGamblica {\r\n      require(winners.length == amounts.length, \"Invalid arguments\");\r\n      require(state == State.DEPOSIT, \"Invalid contract state\");\r\n      \r\n      uint length = winners.length;\r\n      for (uint i = 0; i < length; i++) {\r\n        deposit[winners[i]] += amounts[i];\r\n      }\r\n    }\r\n    \r\n    function end() public onlyGamblica {      \r\n      require(state == State.DEPOSIT, \"Invalid contract state\");\r\n\r\n      state = State.CLAIM;\r\n    }\r\n\r\n    function claim() public {\r\n      require(state == State.CLAIM, \"Contract should be deactivated first\");\r\n      \r\n      uint amount = deposit[msg.sender];\r\n      deposit[msg.sender] = 0;\r\n      gmbcToken.transfer(msg.sender, amount);      \r\n    }\r\n\r\n    function die() public onlyGamblica {\r\n      uint amount = gmbcToken.balanceOf(address(this));\r\n      gmbcToken.transfer(msg.sender, amount);\r\n      selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"die\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winners\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addWinnigs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamblica\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gmbcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gmbcTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gamblica\",\"type\":\"address\"},{\"name\":\"_gmbcTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositRegistered\",\"type\":\"event\"}]","ContractName":"GamblicaEarlyAccess","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f3f8e28c272eda58dd44dcd30296ee91e830a75d000000000000000000000000fe1d71498da3261844ec14325bdbc93c0f7579f0","Library":"","SwarmSource":"bzzr://c9c3f67ec52dca7fc82a93aa1fb474de8b44fe0de08157881972be40eb7b51f4"}]}