{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title Smart contract for forwarding ETH to a pre-defined recipient in the passive mode i.e. someone has to trigger the transfer.\r\n/// It also allows recipient to call any smart contracts. For example: Calling Trustcoin smart contract to transfer TRST.\r\n/// @author WeTrustPlatform\r\ncontract PassiveForwarder {\r\n  /// @dev recipient must be a normal account or a smart contract with the standard payable fallback method.\r\n  /// Otherwise, fund will be stuck!\r\n  address public recipient;\r\n\r\n  event Received(address indexed sender, uint256 value);\r\n\r\n  constructor(address _recipient) public {\r\n    recipient = _recipient;\r\n  }\r\n\r\n  function () public payable {\r\n    require(msg.value > 0);\r\n    emit Received(msg.sender, msg.value);\r\n  }\r\n\r\n  function sweep() public {\r\n    recipient.transfer(address(this).balance);\r\n  }\r\n\r\n  /// @dev Courtesy of https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n  /// This method allows the pre-defined recipient to call other smart contracts.\r\n  function externalCall(address destination, uint256 value, bytes data) public returns (bool) {\r\n    require(msg.sender == recipient, \"Sender must be the recipient.\");\r\n    uint256 dataLength = data.length;\r\n    bool result;\r\n    assembly {\r\n      let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n      let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n      result := call(\r\n        sub(gas, 34710),     // 34710 is the value that solidity is currently emitting\r\n                             // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                             // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n        destination,\r\n        value,\r\n        d,\r\n        dataLength,          // Size of the input (in bytes) - this is what fixes the padding problem\r\n        x,\r\n        0                    // Output is ignored, therefore the output size is zero\r\n      )\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n\r\n/// @dev This contract is used for creating the Forwarder.\r\n/// It also keeps track of all the Forwarders and their recipients\r\ncontract PassiveForwarderFactory {\r\n\r\n  address public owner;\r\n\r\n  /// @dev This will generate a public getter with two parameters\r\n  /// recipient address and contract index\r\n  mapping(address => address[]) public recipients;\r\n\r\n  event Created(address indexed recipient, address indexed newContract);\r\n\r\n  constructor(address _owner) public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function create(address recipient) public returns (address){\r\n    require(msg.sender == owner, \"Sender must be the owner.\");\r\n\r\n    PassiveForwarder pf = new PassiveForwarder(recipient);\r\n    recipients[recipient].push(pf);\r\n    emit Created(recipient, pf);\r\n    return pf;\r\n  }\r\n\r\n  /// @dev This method helps iterate through the recipients mapping\r\n  function getNumberOfContracts(address recipient) public view returns (uint256) {\r\n    return recipients[recipient].length;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getNumberOfContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipients\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"}]","ContractName":"PassiveForwarderFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d5efc2da1b4913121058972828e0f5b8a76377c0","Library":"","SwarmSource":"bzzr://a4b639de2ab9515340174ee91057614cb3273ba4e45a225fb60f9f7c07346b20"}]}