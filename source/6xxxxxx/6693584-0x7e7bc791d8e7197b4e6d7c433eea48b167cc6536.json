{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract BulletinBoard {\r\n    event PostMade(\r\n        address indexed poster,\r\n        string note,\r\n        bytes32 hash,\r\n        uint256 listIndex,\r\n        uint256 blocknum\r\n    );\r\n    \r\n    struct Post {\r\n        address poster;\r\n        string note;\r\n        bytes32 hash;\r\n        uint256 listIndex;\r\n        uint256 blocknum;\r\n    }\r\n\r\n    mapping(bytes32 => Post) public posts;\r\n    bytes32[] public postList;\r\n    \r\n    address ZERO_ADDRESS = address(0);\r\n\r\n    constructor() public {\r\n        string memory testPost = \"pizza is yummy 123\";\r\n        bytes32 testHash = keccak256(abi.encodePacked(testPost));\r\n        string memory testNote = \"secret note, shh\";\r\n        require(makePost(testHash, testNote) == 0, \"Error making post!\");\r\n    }\r\n\r\n    function makePost(\r\n        bytes32 hash,\r\n        string note\r\n    ) public returns (uint256 listIndex) {\r\n        require(\r\n            posts[hash].poster == ZERO_ADDRESS,\r\n            \"A post with this hash was already made!\"\r\n        );\r\n        posts[hash] = Post({\r\n            poster: msg.sender,\r\n            note: note,\r\n            hash: hash,\r\n            listIndex: postList.length,\r\n            blocknum: block.number\r\n        });\r\n        postList.push(hash);\r\n        listIndex = postList.length - 1;\r\n        emit PostMade(msg.sender, note, hash, listIndex, block.number);\r\n        return listIndex;\r\n    }\r\n\r\n    function getNumPosts() public view returns (uint256) {\r\n        return postList.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumPosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"makePost\",\"outputs\":[{\"name\":\"listIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"posts\",\"outputs\":[{\"name\":\"poster\",\"type\":\"address\"},{\"name\":\"note\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"listIndex\",\"type\":\"uint256\"},{\"name\":\"blocknum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"poster\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"listIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknum\",\"type\":\"uint256\"}],\"name\":\"PostMade\",\"type\":\"event\"}]","ContractName":"BulletinBoard","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e75a1233f2a6a0d71472a53578f14492c9202efc58f1c4a622ac4af8a982786"}]}