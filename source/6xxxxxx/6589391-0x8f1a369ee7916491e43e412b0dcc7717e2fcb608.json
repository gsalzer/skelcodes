{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n    mapping(address=>uint) internal decimals;\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\r\n        else decimals[token] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[token];\r\n        // technically, there might be token with decimals 0\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if(tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/ConversionRatesInterface.sol\r\n\r\ninterface ConversionRatesInterface {\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public;\r\n\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\r\n}\r\n\r\n// File: contracts/SanityRatesInterface.sol\r\n\r\ninterface SanityRatesInterface {\r\n    function getSanityRate(ERC20 src, ERC20 dest) public view returns(uint);\r\n}\r\n\r\n// File: contracts/KyberReserveInterface.sol\r\n\r\n/// @title Kyber Reserve contract\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool);\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\r\n}\r\n\r\n// File: contracts/KyberReserve.sol\r\n\r\n/// @title Kyber Reserve contract\r\ncontract KyberReserve is KyberReserveInterface, Withdrawable, Utils {\r\n\r\n    address public kyberNetwork;\r\n    bool public tradeEnabled;\r\n    ConversionRatesInterface public conversionRatesContract;\r\n    SanityRatesInterface public sanityRatesContract;\r\n    mapping(bytes32=>bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\r\n    mapping(address=>address) public tokenWallet;\r\n\r\n    function KyberReserve(address _kyberNetwork, ConversionRatesInterface _ratesContract, address _admin) public {\r\n        require(_admin != address(0));\r\n        require(_ratesContract != address(0));\r\n        require(_kyberNetwork != address(0));\r\n        kyberNetwork = _kyberNetwork;\r\n        conversionRatesContract = _ratesContract;\r\n        admin = _admin;\r\n        tradeEnabled = true;\r\n    }\r\n\r\n    event DepositToken(ERC20 token, uint amount);\r\n\r\n    function() public payable {\r\n        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\r\n    }\r\n\r\n    event TradeExecute(\r\n        address indexed origin,\r\n        address src,\r\n        uint srcAmount,\r\n        address destToken,\r\n        uint destAmount,\r\n        address destAddress\r\n    );\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        require(tradeEnabled);\r\n        require(msg.sender == kyberNetwork);\r\n\r\n        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\r\n\r\n        return true;\r\n    }\r\n\r\n    event TradeEnabled(bool enable);\r\n\r\n    function enableTrade() public onlyAdmin returns(bool) {\r\n        tradeEnabled = true;\r\n        TradeEnabled(true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function disableTrade() public onlyAlerter returns(bool) {\r\n        tradeEnabled = false;\r\n        TradeEnabled(false);\r\n\r\n        return true;\r\n    }\r\n\r\n    event WithdrawAddressApproved(ERC20 token, address addr, bool approve);\r\n\r\n    function approveWithdrawAddress(ERC20 token, address addr, bool approve) public onlyAdmin {\r\n        approvedWithdrawAddresses[keccak256(token, addr)] = approve;\r\n        WithdrawAddressApproved(token, addr, approve);\r\n\r\n        setDecimals(token);\r\n        if ((tokenWallet[token] == address(0x0)) && (token != ETH_TOKEN_ADDRESS)) {\r\n            tokenWallet[token] = this; // by default\r\n            require(token.approve(this, 2 ** 255));\r\n        }\r\n    }\r\n\r\n    event NewTokenWallet(ERC20 token, address wallet);\r\n\r\n    function setTokenWallet(ERC20 token, address wallet) public onlyAdmin {\r\n        require(wallet != address(0x0));\r\n        tokenWallet[token] = wallet;\r\n        NewTokenWallet(token, wallet);\r\n    }\r\n\r\n    event WithdrawFunds(ERC20 token, uint amount, address destination);\r\n\r\n    function withdraw(ERC20 token, uint amount, address destination) public onlyOperator returns(bool) {\r\n        require(approvedWithdrawAddresses[keccak256(token, destination)]);\r\n\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            destination.transfer(amount);\r\n        } else {\r\n            require(token.transferFrom(tokenWallet[token], destination, amount));\r\n        }\r\n\r\n        WithdrawFunds(token, amount, destination);\r\n\r\n        return true;\r\n    }\r\n\r\n    event SetContractAddresses(address network, address rate, address sanity);\r\n\r\n    function setContracts(\r\n        address _kyberNetwork,\r\n        ConversionRatesInterface _conversionRates,\r\n        SanityRatesInterface _sanityRates\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_kyberNetwork != address(0));\r\n        require(_conversionRates != address(0));\r\n\r\n        kyberNetwork = _kyberNetwork;\r\n        conversionRatesContract = _conversionRates;\r\n        sanityRatesContract = _sanityRates;\r\n\r\n        SetContractAddresses(kyberNetwork, conversionRatesContract, sanityRatesContract);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    /// status functions ///////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    function getBalance(ERC20 token) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return this.balance;\r\n        else {\r\n            address wallet = tokenWallet[token];\r\n            uint balanceOfWallet = token.balanceOf(wallet);\r\n            uint allowanceOfWallet = token.allowance(wallet, this);\r\n\r\n            return (balanceOfWallet < allowanceOfWallet) ? balanceOfWallet : allowanceOfWallet;\r\n        }\r\n    }\r\n\r\n    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\r\n        uint dstDecimals = getDecimals(dest);\r\n        uint srcDecimals = getDecimals(src);\r\n\r\n        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getSrcQty(ERC20 src, ERC20 dest, uint dstQty, uint rate) public view returns(uint) {\r\n        uint dstDecimals = getDecimals(dest);\r\n        uint srcDecimals = getDecimals(src);\r\n\r\n        return calcSrcQty(dstQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\r\n        ERC20 token;\r\n        bool  isBuy;\r\n\r\n        if (!tradeEnabled) return 0;\r\n\r\n        if (ETH_TOKEN_ADDRESS == src) {\r\n            isBuy = true;\r\n            token = dest;\r\n        } else if (ETH_TOKEN_ADDRESS == dest) {\r\n            isBuy = false;\r\n            token = src;\r\n        } else {\r\n            return 0; // pair is not listed\r\n        }\r\n\r\n        uint rate = conversionRatesContract.getRate(token, blockNumber, isBuy, srcQty);\r\n        uint destQty = getDestQty(src, dest, srcQty, rate);\r\n\r\n        if (getBalance(dest) < destQty) return 0;\r\n\r\n        if (sanityRatesContract != address(0)) {\r\n            uint sanityRate = sanityRatesContract.getSanityRate(src, dest);\r\n            if (rate > sanityRate) return 0;\r\n        }\r\n\r\n        return rate;\r\n    }\r\n\r\n    /// @dev do a trade\r\n    /// @param srcToken Src token\r\n    /// @param srcAmount Amount of src token\r\n    /// @param destToken Destination token\r\n    /// @param destAddress Destination address to send tokens to\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true iff trade is successful\r\n    function doTrade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        // can skip validation if done at kyber network level\r\n        if (validate) {\r\n            require(conversionRate > 0);\r\n            if (srcToken == ETH_TOKEN_ADDRESS)\r\n                require(msg.value == srcAmount);\r\n            else\r\n                require(msg.value == 0);\r\n        }\r\n\r\n        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\r\n        // sanity check\r\n        require(destAmount > 0);\r\n\r\n        // add to imbalance\r\n        ERC20 token;\r\n        int tradeAmount;\r\n        if (srcToken == ETH_TOKEN_ADDRESS) {\r\n            tradeAmount = int(destAmount);\r\n            token = destToken;\r\n        } else {\r\n            tradeAmount = -1 * int(srcAmount);\r\n            token = srcToken;\r\n        }\r\n\r\n        conversionRatesContract.recordImbalance(\r\n            token,\r\n            tradeAmount,\r\n            0,\r\n            block.number\r\n        );\r\n\r\n        // collect src tokens\r\n        if (srcToken != ETH_TOKEN_ADDRESS) {\r\n            require(srcToken.transferFrom(msg.sender, tokenWallet[srcToken], srcAmount));\r\n        }\r\n\r\n        // send dest tokens\r\n        if (destToken == ETH_TOKEN_ADDRESS) {\r\n            destAddress.transfer(destAmount);\r\n        } else {\r\n            require(destToken.transferFrom(tokenWallet[destToken], destAddress, destAmount));\r\n        }\r\n\r\n        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/KyberNetworkInterface.sol\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkInterface {\r\n    function maxGasPrice() public view returns(uint);\r\n    function getUserCapInWei(address user) public view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\r\n    function enabled() public view returns(bool);\r\n    function info(bytes32 id) public view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(address trader, ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\r\n        uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\r\n}\r\n\r\n// File: contracts/Utils2.sol\r\n\r\ncontract Utils2 is Utils {\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(ERC20 token, address user) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return user.balance;\r\n        else\r\n            return token.balanceOf(user);\r\n    }\r\n\r\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\r\n\r\n        if (decimals[token] == 0) {\r\n            setDecimals(token);\r\n        }\r\n\r\n        return decimals[token];\r\n    }\r\n\r\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n        internal pure returns(uint)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(destAmount <= MAX_QTY);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/WhiteListInterface.sol\r\n\r\ncontract WhiteListInterface {\r\n    function getUserCapInWei(address user) external view returns (uint userCapWei);\r\n}\r\n\r\n// File: contracts/ExpectedRateInterface.sol\r\n\r\ninterface ExpectedRateInterface {\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n// File: contracts/FeeBurnerInterface.sol\r\n\r\ninterface FeeBurnerInterface {\r\n    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\r\n}\r\n\r\n// File: contracts/KyberNetwork.sol\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// @title Kyber Network main contract\r\ncontract KyberNetwork is Withdrawable, Utils2, KyberNetworkInterface {\r\n\r\n    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\r\n    KyberReserveInterface[] public reserves;\r\n    mapping(address=>bool) public isReserve;\r\n    WhiteListInterface public whiteListContract;\r\n    ExpectedRateInterface public expectedRateContract;\r\n    FeeBurnerInterface    public feeBurnerContract;\r\n    address               public kyberNetworkProxyContract;\r\n    uint                  public maxGasPriceValue = 50 * 1000 * 1000 * 1000; // 50 gwei\r\n    bool                  public isEnabled = false; // network is enabled\r\n    mapping(bytes32=>uint) public infoFields; // this is only a UI field for external app.\r\n    mapping(address=>address[]) public reservesPerTokenSrc; //reserves supporting token to eth\r\n    mapping(address=>address[]) public reservesPerTokenDest;//reserves support eth to token\r\n\r\n    function KyberNetwork(address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    event EtherReceival(address indexed sender, uint amount);\r\n\r\n    /* solhint-disable no-complex-fallback */\r\n    // To avoid users trying to swap tokens using default payable function. We added this short code\r\n    //  to verify Ethers will be received only from reserves if transferred without a specific function call.\r\n    function() public payable {\r\n        require(isReserve[msg.sender]);\r\n        EtherReceival(msg.sender, msg.value);\r\n    }\r\n    /* solhint-enable no-complex-fallback */\r\n\r\n    struct TradeInput {\r\n        address trader;\r\n        ERC20 src;\r\n        uint srcAmount;\r\n        ERC20 dest;\r\n        address destAddress;\r\n        uint maxDestAmount;\r\n        uint minConversionRate;\r\n        address walletId;\r\n        bytes hint;\r\n    }\r\n\r\n    function tradeWithHint(\r\n        address trader,\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes hint\r\n    )\r\n        public\r\n        payable\r\n        returns(uint)\r\n    {\r\n        require(hint.length == 0);\r\n        require(msg.sender == kyberNetworkProxyContract);\r\n\r\n        TradeInput memory tradeInput;\r\n\r\n        tradeInput.trader = trader;\r\n        tradeInput.src = src;\r\n        tradeInput.srcAmount = srcAmount;\r\n        tradeInput.dest = dest;\r\n        tradeInput.destAddress = destAddress;\r\n        tradeInput.maxDestAmount = maxDestAmount;\r\n        tradeInput.minConversionRate = minConversionRate;\r\n        tradeInput.walletId = walletId;\r\n        tradeInput.hint = hint;\r\n\r\n        return trade(tradeInput);\r\n    }\r\n\r\n    event AddReserveToNetwork(KyberReserveInterface reserve, bool add);\r\n\r\n    /// @notice can be called only by admin\r\n    /// @dev add or deletes a reserve to/from the network.\r\n    /// @param reserve The reserve address.\r\n    /// @param add If true, the add reserve. Otherwise delete reserve.\r\n    function addReserve(KyberReserveInterface reserve, bool add) public onlyAdmin {\r\n\r\n        if (add) {\r\n            require(!isReserve[reserve]);\r\n            reserves.push(reserve);\r\n            isReserve[reserve] = true;\r\n            AddReserveToNetwork(reserve, true);\r\n        } else {\r\n            isReserve[reserve] = false;\r\n            // will have trouble if more than 50k reserves...\r\n            for (uint i = 0; i < reserves.length; i++) {\r\n                if (reserves[i] == reserve) {\r\n                    reserves[i] = reserves[reserves.length - 1];\r\n                    reserves.length--;\r\n                    AddReserveToNetwork(reserve, false);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    event ListReservePairs(address reserve, ERC20 src, ERC20 dest, bool add);\r\n\r\n    /// @notice can be called only by admin\r\n    /// @dev allow or prevent a specific reserve to trade a pair of tokens\r\n    /// @param reserve The reserve address.\r\n    /// @param token token address\r\n    /// @param ethToToken will it support ether to token trade\r\n    /// @param tokenToEth will it support token to ether trade\r\n    /// @param add If true then list this pair, otherwise unlist it.\r\n    function listPairForReserve(address reserve, ERC20 token, bool ethToToken, bool tokenToEth, bool add)\r\n        public onlyAdmin\r\n    {\r\n        require(isReserve[reserve]);\r\n\r\n        if (ethToToken) {\r\n            listPairs(reserve, token, false, add);\r\n\r\n            ListReservePairs(reserve, ETH_TOKEN_ADDRESS, token, add);\r\n        }\r\n\r\n        if (tokenToEth) {\r\n            listPairs(reserve, token, true, add);\r\n            if (add) {\r\n                token.approve(reserve, 2**255); // approve infinity\r\n            } else {\r\n                token.approve(reserve, 0);\r\n            }\r\n\r\n            ListReservePairs(reserve, token, ETH_TOKEN_ADDRESS, add);\r\n        }\r\n\r\n        setDecimals(token);\r\n    }\r\n\r\n    function setWhiteList(WhiteListInterface whiteList) public onlyAdmin {\r\n        require(whiteList != address(0));\r\n        whiteListContract = whiteList;\r\n    }\r\n\r\n    function setExpectedRate(ExpectedRateInterface expectedRate) public onlyAdmin {\r\n        require(expectedRate != address(0));\r\n        expectedRateContract = expectedRate;\r\n    }\r\n\r\n    function setFeeBurner(FeeBurnerInterface feeBurner) public onlyAdmin {\r\n        require(feeBurner != address(0));\r\n        feeBurnerContract = feeBurner;\r\n    }\r\n\r\n    function setParams(\r\n        uint                  _maxGasPrice,\r\n        uint                  _negligibleRateDiff\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_negligibleRateDiff <= 100 * 100); // at most 100%\r\n\r\n        maxGasPriceValue = _maxGasPrice;\r\n        negligibleRateDiff = _negligibleRateDiff;\r\n    }\r\n\r\n    function setEnable(bool _enable) public onlyAdmin {\r\n        if (_enable) {\r\n            require(whiteListContract != address(0));\r\n            require(feeBurnerContract != address(0));\r\n            require(expectedRateContract != address(0));\r\n            require(kyberNetworkProxyContract != address(0));\r\n        }\r\n        isEnabled = _enable;\r\n    }\r\n\r\n    function setInfo(bytes32 field, uint value) public onlyOperator {\r\n        infoFields[field] = value;\r\n    }\r\n\r\n    event KyberProxySet(address proxy, address sender);\r\n\r\n    function setKyberProxy(address networkProxy) public onlyAdmin {\r\n        require(networkProxy != address(0));\r\n        kyberNetworkProxyContract = networkProxy;\r\n        KyberProxySet(kyberNetworkProxyContract, msg.sender);\r\n    }\r\n\r\n    /// @dev returns number of reserves\r\n    /// @return number of reserves\r\n    function getNumReserves() public view returns(uint) {\r\n        return reserves.length;\r\n    }\r\n\r\n    /// @notice should be called off chain with as much gas as needed\r\n    /// @dev get an array of all reserves\r\n    /// @return An array of all reserves\r\n    function getReserves() public view returns(KyberReserveInterface[]) {\r\n        return reserves;\r\n    }\r\n\r\n    function maxGasPrice() public view returns(uint) {\r\n        return maxGasPriceValue;\r\n    }\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\r\n        public view\r\n        returns(uint expectedRate, uint slippageRate)\r\n    {\r\n        require(expectedRateContract != address(0));\r\n        return expectedRateContract.getExpectedRate(src, dest, srcQty);\r\n    }\r\n\r\n    function getUserCapInWei(address user) public view returns(uint) {\r\n        return whiteListContract.getUserCapInWei(user);\r\n    }\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\r\n        //future feature\r\n        user;\r\n        token;\r\n        require(false);\r\n    }\r\n\r\n    struct BestRateResult {\r\n        uint rate;\r\n        address reserve1;\r\n        address reserve2;\r\n        uint weiAmount;\r\n        uint rateSrcToEth;\r\n        uint rateEthToDest;\r\n        uint destAmount;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\r\n    /// @param src Src token\r\n    /// @param dest Destination token\r\n    /// @return obsolete - used to return best reserve index. not relevant anymore for this API.\r\n    function findBestRate(ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint obsolete, uint rate) {\r\n        BestRateResult memory result = findBestRateTokenToToken(src, dest, srcAmount);\r\n        return(0, result.rate);\r\n    }\r\n\r\n    function enabled() public view returns(bool) {\r\n        return isEnabled;\r\n    }\r\n\r\n    function info(bytes32 field) public view returns(uint) {\r\n        return infoFields[field];\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    // Not sure how solhing defines complexity. Anyway, from our point of view, below code follows the required\r\n    //  algorithm to choose a reserve, it has been tested, reviewed and found to be clear enough.\r\n    //@dev this function always src or dest are ether. can't do token to token\r\n    function searchBestRate(ERC20 src, ERC20 dest, uint srcAmount) public view returns(address, uint) {\r\n        uint bestRate = 0;\r\n        uint bestReserve = 0;\r\n        uint numRelevantReserves = 0;\r\n\r\n        //return 1 for ether to ether\r\n        if (src == dest) return (reserves[bestReserve], PRECISION);\r\n\r\n        address[] memory reserveArr;\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            reserveArr = reservesPerTokenDest[dest];\r\n        } else {\r\n            reserveArr = reservesPerTokenSrc[src];\r\n        }\r\n\r\n        if (reserveArr.length == 0) return (reserves[bestReserve], bestRate);\r\n\r\n        uint[] memory rates = new uint[](reserveArr.length);\r\n        uint[] memory reserveCandidates = new uint[](reserveArr.length);\r\n\r\n        for (uint i = 0; i < reserveArr.length; i++) {\r\n            //list all reserves that have this token.\r\n            rates[i] = (KyberReserveInterface(reserveArr[i])).getConversionRate(src, dest, srcAmount, block.number);\r\n\r\n            if (rates[i] > bestRate) {\r\n                //best rate is highest rate\r\n                bestRate = rates[i];\r\n            }\r\n        }\r\n\r\n        if (bestRate > 0) {\r\n            uint random = 0;\r\n            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\r\n\r\n            for (i = 0; i < reserveArr.length; i++) {\r\n                if (rates[i] >= smallestRelevantRate) {\r\n                    reserveCandidates[numRelevantReserves++] = i;\r\n                }\r\n            }\r\n\r\n            if (numRelevantReserves > 1) {\r\n                //when encountering small rate diff from bestRate. draw from relevant reserves\r\n                random = uint(block.blockhash(block.number-1)) % numRelevantReserves;\r\n            }\r\n\r\n            bestReserve = reserveCandidates[random];\r\n            bestRate = rates[bestReserve];\r\n        }\r\n\r\n        return (reserveArr[bestReserve], bestRate);\r\n    }\r\n    /* solhint-enable code-complexity */\r\n\r\n    function findBestRateTokenToToken(ERC20 src, ERC20 dest, uint srcAmount) internal view\r\n        returns(BestRateResult result)\r\n    {\r\n        (result.reserve1, result.rateSrcToEth) = searchBestRate(src, ETH_TOKEN_ADDRESS, srcAmount);\r\n        result.weiAmount = calcDestAmount(src, ETH_TOKEN_ADDRESS, srcAmount, result.rateSrcToEth);\r\n\r\n        (result.reserve2, result.rateEthToDest) = searchBestRate(ETH_TOKEN_ADDRESS, dest, result.weiAmount);\r\n        result.destAmount = calcDestAmount(ETH_TOKEN_ADDRESS, dest, result.weiAmount, result.rateEthToDest);\r\n\r\n        result.rate = calcRateFromQty(srcAmount, result.destAmount, getDecimals(src), getDecimals(dest));\r\n    }\r\n\r\n    function listPairs(address reserve, ERC20 token, bool isTokenToEth, bool add) internal {\r\n        uint i;\r\n        address[] storage reserveArr = reservesPerTokenDest[token];\r\n\r\n        if (isTokenToEth) {\r\n            reserveArr = reservesPerTokenSrc[token];\r\n        }\r\n\r\n        for (i = 0; i < reserveArr.length; i++) {\r\n            if (reserve == reserveArr[i]) {\r\n                if (add) {\r\n                    break; //already added\r\n                } else {\r\n                    //remove\r\n                    reserveArr[i] = reserveArr[reserveArr.length - 1];\r\n                    reserveArr.length--;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (add && i == reserveArr.length) {\r\n            //if reserve wasn't found add it\r\n            reserveArr.push(reserve);\r\n        }\r\n    }\r\n\r\n    event KyberTrade(address srcAddress, ERC20 srcToken, uint srcAmount, address destAddress, ERC20 destToken,\r\n        uint destAmount);\r\n    /* solhint-disable function-max-lines */\r\n    // Most of the lins here are functions calls spread over multiple lines. We find this function readable enough\r\n    //  and keep its size as is.\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev trade api for kyber network.\r\n    /// @param tradeInput structure of trade inputs\r\n    function trade(TradeInput tradeInput) internal returns(uint) {\r\n        require(isEnabled);\r\n        require(tx.gasprice <= maxGasPriceValue);\r\n        require(validateTradeInput(tradeInput.src, tradeInput.srcAmount, tradeInput.dest, tradeInput.destAddress));\r\n\r\n        BestRateResult memory rateResult =\r\n        findBestRateTokenToToken(tradeInput.src, tradeInput.dest, tradeInput.srcAmount);\r\n\r\n        require(rateResult.rate > 0);\r\n        require(rateResult.rate < MAX_RATE);\r\n        require(rateResult.rate >= tradeInput.minConversionRate);\r\n\r\n        uint actualDestAmount;\r\n        uint weiAmount;\r\n        uint actualSrcAmount;\r\n\r\n        (actualSrcAmount, weiAmount, actualDestAmount) = calcActualAmounts(tradeInput.src,\r\n            tradeInput.dest,\r\n            tradeInput.srcAmount,\r\n            tradeInput.maxDestAmount,\r\n            rateResult);\r\n\r\n        if (actualSrcAmount < tradeInput.srcAmount) {\r\n            //if there is \"change\" send back to trader\r\n            if (tradeInput.src == ETH_TOKEN_ADDRESS) {\r\n                tradeInput.trader.transfer(tradeInput.srcAmount - actualSrcAmount);\r\n            } else {\r\n                tradeInput.src.transfer(tradeInput.trader, (tradeInput.srcAmount - actualSrcAmount));\r\n            }\r\n        }\r\n\r\n        // verify trade size is smaller than user cap\r\n        require(weiAmount <= getUserCapInWei(tradeInput.trader));\r\n\r\n        //do the trade\r\n        //src to ETH\r\n        require(doReserveTrade(\r\n                tradeInput.src,\r\n                actualSrcAmount,\r\n                ETH_TOKEN_ADDRESS,\r\n                this,\r\n                weiAmount,\r\n                KyberReserveInterface(rateResult.reserve1),\r\n                rateResult.rateSrcToEth,\r\n                true));\r\n\r\n        //Eth to dest\r\n        require(doReserveTrade(\r\n                ETH_TOKEN_ADDRESS,\r\n                weiAmount,\r\n                tradeInput.dest,\r\n                tradeInput.destAddress,\r\n                actualDestAmount,\r\n                KyberReserveInterface(rateResult.reserve2),\r\n                rateResult.rateEthToDest,\r\n                true));\r\n\r\n        //when src is ether, reserve1 is doing a \"fake\" trade. (ether to ether) - don't burn.\r\n        //when dest is ether, reserve2 is doing a \"fake\" trade. (ether to ether) - don't burn.\r\n        if (tradeInput.src != ETH_TOKEN_ADDRESS)\r\n            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve1, tradeInput.walletId));\r\n        if (tradeInput.dest != ETH_TOKEN_ADDRESS)\r\n            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve2, tradeInput.walletId));\r\n\r\n        KyberTrade(tradeInput.trader, tradeInput.src, actualSrcAmount, tradeInput.destAddress, tradeInput.dest,\r\n            actualDestAmount);\r\n\r\n        return actualDestAmount;\r\n    }\r\n    /* solhint-enable function-max-lines */\r\n\r\n    function calcActualAmounts (ERC20 src, ERC20 dest, uint srcAmount, uint maxDestAmount, BestRateResult rateResult)\r\n        internal view returns(uint actualSrcAmount, uint weiAmount, uint actualDestAmount)\r\n    {\r\n        if (rateResult.destAmount > maxDestAmount) {\r\n            actualDestAmount = maxDestAmount;\r\n            weiAmount = calcSrcAmount(ETH_TOKEN_ADDRESS, dest, actualDestAmount, rateResult.rateEthToDest);\r\n            actualSrcAmount = calcSrcAmount(src, ETH_TOKEN_ADDRESS, weiAmount, rateResult.rateSrcToEth);\r\n            require(actualSrcAmount <= srcAmount);\r\n        } else {\r\n            actualDestAmount = rateResult.destAmount;\r\n            actualSrcAmount = srcAmount;\r\n            weiAmount = rateResult.weiAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev do one trade with a reserve\r\n    /// @param src Src token\r\n    /// @param amount amount of src tokens\r\n    /// @param dest   Destination token\r\n    /// @param destAddress Address to send tokens to\r\n    /// @param reserve Reserve to use\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true if trade is successful\r\n    function doReserveTrade(\r\n        ERC20 src,\r\n        uint amount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint expectedDestAmount,\r\n        KyberReserveInterface reserve,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        uint callValue = 0;\r\n\r\n        if (src == dest) {\r\n            //this is for a \"fake\" trade when both src and dest are ethers.\r\n            if (destAddress != (address(this)))\r\n                destAddress.transfer(amount);\r\n            return true;\r\n        }\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            callValue = amount;\r\n        }\r\n\r\n        // reserve sends tokens/eth to network. network sends it to destination\r\n        require(reserve.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\r\n\r\n        if (destAddress != address(this)) {\r\n            //for token to token dest address is network. and Ether / token already here...\r\n            if (dest == ETH_TOKEN_ADDRESS) {\r\n                destAddress.transfer(expectedDestAmount);\r\n            } else {\r\n                require(dest.transfer(destAddress, expectedDestAmount));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev checks that user sent ether/tokens to contract before trade\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @return true if tradeInput is valid\r\n    function validateTradeInput(ERC20 src, uint srcAmount, ERC20 dest, address destAddress)\r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(srcAmount != 0);\r\n        require(destAddress != address(0));\r\n        require(src != dest);\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == srcAmount);\r\n        } else {\r\n            require(msg.value == 0);\r\n            //funds should have been moved to this contract already.\r\n            require(src.balanceOf(this) >= srcAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/VolumeImbalanceRecorder.sol\r\n\r\ncontract VolumeImbalanceRecorder is Withdrawable {\r\n\r\n    uint constant internal SLIDING_WINDOW_SIZE = 5;\r\n    uint constant internal POW_2_64 = 2 ** 64;\r\n\r\n    struct TokenControlInfo {\r\n        uint minimalRecordResolution; // can be roughly 1 cent\r\n        uint maxPerBlockImbalance; // in twei resolution\r\n        uint maxTotalImbalance; // max total imbalance (between rate updates)\r\n                            // before halting trade\r\n    }\r\n\r\n    mapping(address => TokenControlInfo) internal tokenControlInfo;\r\n\r\n    struct TokenImbalanceData {\r\n        int  lastBlockBuyUnitsImbalance;\r\n        uint lastBlock;\r\n\r\n        int  totalBuyUnitsImbalance;\r\n        uint lastRateUpdateBlock;\r\n    }\r\n\r\n    mapping(address => mapping(uint=>uint)) public tokenImbalanceData;\r\n\r\n    function VolumeImbalanceRecorder(address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    function setTokenControlInfo(\r\n        ERC20 token,\r\n        uint minimalRecordResolution,\r\n        uint maxPerBlockImbalance,\r\n        uint maxTotalImbalance\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        tokenControlInfo[token] =\r\n            TokenControlInfo(\r\n                minimalRecordResolution,\r\n                maxPerBlockImbalance,\r\n                maxTotalImbalance\r\n            );\r\n    }\r\n\r\n    function getTokenControlInfo(ERC20 token) public view returns(uint, uint, uint) {\r\n        return (tokenControlInfo[token].minimalRecordResolution,\r\n                tokenControlInfo[token].maxPerBlockImbalance,\r\n                tokenControlInfo[token].maxTotalImbalance);\r\n    }\r\n\r\n    function addImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        internal\r\n    {\r\n        uint currentBlockIndex = currentBlock % SLIDING_WINDOW_SIZE;\r\n        int recordedBuyAmount = int(buyAmount / int(tokenControlInfo[token].minimalRecordResolution));\r\n\r\n        int prevImbalance = 0;\r\n\r\n        TokenImbalanceData memory currentBlockData =\r\n            decodeTokenImbalanceData(tokenImbalanceData[token][currentBlockIndex]);\r\n\r\n        // first scenario - this is not the first tx in the current block\r\n        if (currentBlockData.lastBlock == currentBlock) {\r\n            if (uint(currentBlockData.lastRateUpdateBlock) == rateUpdateBlock) {\r\n                // just increase imbalance\r\n                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\r\n                currentBlockData.totalBuyUnitsImbalance += recordedBuyAmount;\r\n            } else {\r\n                // imbalance was changed in the middle of the block\r\n                prevImbalance = getImbalanceInRange(token, rateUpdateBlock, currentBlock);\r\n                currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\r\n                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\r\n                currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\r\n            }\r\n        } else {\r\n            // first tx in the current block\r\n            int currentBlockImbalance;\r\n            (prevImbalance, currentBlockImbalance) = getImbalanceSinceRateUpdate(token, rateUpdateBlock, currentBlock);\r\n\r\n            currentBlockData.lastBlockBuyUnitsImbalance = recordedBuyAmount;\r\n            currentBlockData.lastBlock = uint(currentBlock);\r\n            currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\r\n            currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\r\n        }\r\n\r\n        tokenImbalanceData[token][currentBlockIndex] = encodeTokenImbalanceData(currentBlockData);\r\n    }\r\n\r\n    function setGarbageToVolumeRecorder(ERC20 token) internal {\r\n        for (uint i = 0; i < SLIDING_WINDOW_SIZE; i++) {\r\n            tokenImbalanceData[token][i] = 0x1;\r\n        }\r\n    }\r\n\r\n    function getImbalanceInRange(ERC20 token, uint startBlock, uint endBlock) internal view returns(int buyImbalance) {\r\n        // check the imbalance in the sliding window\r\n        require(startBlock <= endBlock);\r\n\r\n        buyImbalance = 0;\r\n\r\n        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\r\n            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\r\n\r\n            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\r\n                buyImbalance += int(perBlockData.lastBlockBuyUnitsImbalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getImbalanceSinceRateUpdate(ERC20 token, uint rateUpdateBlock, uint currentBlock)\r\n        internal view\r\n        returns(int buyImbalance, int currentBlockImbalance)\r\n    {\r\n        buyImbalance = 0;\r\n        currentBlockImbalance = 0;\r\n        uint latestBlock = 0;\r\n        int imbalanceInRange = 0;\r\n        uint startBlock = rateUpdateBlock;\r\n        uint endBlock = currentBlock;\r\n\r\n        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\r\n            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\r\n\r\n            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\r\n                imbalanceInRange += perBlockData.lastBlockBuyUnitsImbalance;\r\n            }\r\n\r\n            if (perBlockData.lastRateUpdateBlock != rateUpdateBlock) continue;\r\n            if (perBlockData.lastBlock < latestBlock) continue;\r\n\r\n            latestBlock = perBlockData.lastBlock;\r\n            buyImbalance = perBlockData.totalBuyUnitsImbalance;\r\n            if (uint(perBlockData.lastBlock) == currentBlock) {\r\n                currentBlockImbalance = perBlockData.lastBlockBuyUnitsImbalance;\r\n            }\r\n        }\r\n\r\n        if (buyImbalance == 0) {\r\n            buyImbalance = imbalanceInRange;\r\n        }\r\n    }\r\n\r\n    function getImbalance(ERC20 token, uint rateUpdateBlock, uint currentBlock)\r\n        internal view\r\n        returns(int totalImbalance, int currentBlockImbalance)\r\n    {\r\n\r\n        int resolution = int(tokenControlInfo[token].minimalRecordResolution);\r\n\r\n        (totalImbalance, currentBlockImbalance) =\r\n            getImbalanceSinceRateUpdate(\r\n                token,\r\n                rateUpdateBlock,\r\n                currentBlock);\r\n\r\n        totalImbalance *= resolution;\r\n        currentBlockImbalance *= resolution;\r\n    }\r\n\r\n    function getMaxPerBlockImbalance(ERC20 token) internal view returns(uint) {\r\n        return tokenControlInfo[token].maxPerBlockImbalance;\r\n    }\r\n\r\n    function getMaxTotalImbalance(ERC20 token) internal view returns(uint) {\r\n        return tokenControlInfo[token].maxTotalImbalance;\r\n    }\r\n\r\n    function encodeTokenImbalanceData(TokenImbalanceData data) internal pure returns(uint) {\r\n        // check for overflows\r\n        require(data.lastBlockBuyUnitsImbalance < int(POW_2_64 / 2));\r\n        require(data.lastBlockBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\r\n        require(data.lastBlock < POW_2_64);\r\n        require(data.totalBuyUnitsImbalance < int(POW_2_64 / 2));\r\n        require(data.totalBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\r\n        require(data.lastRateUpdateBlock < POW_2_64);\r\n\r\n        // do encoding\r\n        uint result = uint(data.lastBlockBuyUnitsImbalance) & (POW_2_64 - 1);\r\n        result |= data.lastBlock * POW_2_64;\r\n        result |= (uint(data.totalBuyUnitsImbalance) & (POW_2_64 - 1)) * POW_2_64 * POW_2_64;\r\n        result |= data.lastRateUpdateBlock * POW_2_64 * POW_2_64 * POW_2_64;\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodeTokenImbalanceData(uint input) internal pure returns(TokenImbalanceData) {\r\n        TokenImbalanceData memory data;\r\n\r\n        data.lastBlockBuyUnitsImbalance = int(int64(input & (POW_2_64 - 1)));\r\n        data.lastBlock = uint(uint64((input / POW_2_64) & (POW_2_64 - 1)));\r\n        data.totalBuyUnitsImbalance = int(int64((input / (POW_2_64 * POW_2_64)) & (POW_2_64 - 1)));\r\n        data.lastRateUpdateBlock = uint(uint64((input / (POW_2_64 * POW_2_64 * POW_2_64))));\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n// File: contracts/ConversionRates.sol\r\n\r\ncontract ConversionRates is ConversionRatesInterface, VolumeImbalanceRecorder, Utils {\r\n\r\n    // bps - basic rate steps. one step is 1 / 10000 of the rate.\r\n    struct StepFunction {\r\n        int[] x; // quantity for each step. Quantity of each step includes previous steps.\r\n        int[] y; // rate change per quantity step  in bps.\r\n    }\r\n\r\n    struct TokenData {\r\n        bool listed;  // was added to reserve\r\n        bool enabled; // whether trade is enabled\r\n\r\n        // position in the compact data\r\n        uint compactDataArrayIndex;\r\n        uint compactDataFieldIndex;\r\n\r\n        // rate data. base and changes according to quantity and reserve balance.\r\n        // generally speaking. Sell rate is 1 / buy rate i.e. the buy in the other direction.\r\n        uint baseBuyRate;  // in PRECISION units. see KyberConstants\r\n        uint baseSellRate; // PRECISION units. without (sell / buy) spread it is 1 / baseBuyRate\r\n        StepFunction buyRateQtyStepFunction; // in bps. higher quantity - bigger the rate.\r\n        StepFunction sellRateQtyStepFunction;// in bps. higher the qua\r\n        StepFunction buyRateImbalanceStepFunction; // in BPS. higher reserve imbalance - bigger the rate.\r\n        StepFunction sellRateImbalanceStepFunction;\r\n    }\r\n\r\n    /*\r\n    this is the data for tokenRatesCompactData\r\n    but solidity compiler optimizer is sub-optimal, and cannot write this structure in a single storage write\r\n    so we represent it as bytes32 and do the byte tricks ourselves.\r\n    struct TokenRatesCompactData {\r\n        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\r\n        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\r\n\r\n        uint32 blockNumber;\r\n    } */\r\n    uint public validRateDurationInBlocks = 10; // rates are valid for this amount of blocks\r\n    ERC20[] internal listedTokens;\r\n    mapping(address=>TokenData) internal tokenData;\r\n    bytes32[] internal tokenRatesCompactData;\r\n    uint public numTokensInCurrentCompactData = 0;\r\n    address public reserveContract;\r\n    uint constant internal NUM_TOKENS_IN_COMPACT_DATA = 14;\r\n    uint constant internal BYTES_14_OFFSET = (2 ** (8 * NUM_TOKENS_IN_COMPACT_DATA));\r\n    uint constant internal MAX_STEPS_IN_FUNCTION = 10;\r\n    int  constant internal MAX_BPS_ADJUSTMENT = 10 ** 11; // 1B %\r\n    int  constant internal MIN_BPS_ADJUSTMENT = -100 * 100; // cannot go down by more than 100%\r\n\r\n    function ConversionRates(address _admin) public VolumeImbalanceRecorder(_admin)\r\n        { } // solhint-disable-line no-empty-blocks\r\n\r\n    function addToken(ERC20 token) public onlyAdmin {\r\n\r\n        require(!tokenData[token].listed);\r\n        tokenData[token].listed = true;\r\n        listedTokens.push(token);\r\n\r\n        if (numTokensInCurrentCompactData == 0) {\r\n            tokenRatesCompactData.length++; // add new structure\r\n        }\r\n\r\n        tokenData[token].compactDataArrayIndex = tokenRatesCompactData.length - 1;\r\n        tokenData[token].compactDataFieldIndex = numTokensInCurrentCompactData;\r\n\r\n        numTokensInCurrentCompactData = (numTokensInCurrentCompactData + 1) % NUM_TOKENS_IN_COMPACT_DATA;\r\n\r\n        setGarbageToVolumeRecorder(token);\r\n\r\n        setDecimals(token);\r\n    }\r\n\r\n    function setCompactData(bytes14[] buy, bytes14[] sell, uint blockNumber, uint[] indices) public onlyOperator {\r\n\r\n        require(buy.length == sell.length);\r\n        require(indices.length == buy.length);\r\n        require(blockNumber <= 0xFFFFFFFF);\r\n\r\n        uint bytes14Offset = BYTES_14_OFFSET;\r\n\r\n        for (uint i = 0; i < indices.length; i++) {\r\n            require(indices[i] < tokenRatesCompactData.length);\r\n            uint data = uint(buy[i]) | uint(sell[i]) * bytes14Offset | (blockNumber * (bytes14Offset * bytes14Offset));\r\n            tokenRatesCompactData[indices[i]] = bytes32(data);\r\n        }\r\n    }\r\n\r\n    function setBaseRate(\r\n        ERC20[] tokens,\r\n        uint[] baseBuy,\r\n        uint[] baseSell,\r\n        bytes14[] buy,\r\n        bytes14[] sell,\r\n        uint blockNumber,\r\n        uint[] indices\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(tokens.length == baseBuy.length);\r\n        require(tokens.length == baseSell.length);\r\n        require(sell.length == buy.length);\r\n        require(sell.length == indices.length);\r\n\r\n        for (uint ind = 0; ind < tokens.length; ind++) {\r\n            require(tokenData[tokens[ind]].listed);\r\n            tokenData[tokens[ind]].baseBuyRate = baseBuy[ind];\r\n            tokenData[tokens[ind]].baseSellRate = baseSell[ind];\r\n        }\r\n\r\n        setCompactData(buy, sell, blockNumber, indices);\r\n    }\r\n\r\n    function setQtyStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(xBuy.length == yBuy.length);\r\n        require(xSell.length == ySell.length);\r\n        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(tokenData[token].listed);\r\n\r\n        tokenData[token].buyRateQtyStepFunction = StepFunction(xBuy, yBuy);\r\n        tokenData[token].sellRateQtyStepFunction = StepFunction(xSell, ySell);\r\n    }\r\n\r\n    function setImbalanceStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(xBuy.length == yBuy.length);\r\n        require(xSell.length == ySell.length);\r\n        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(tokenData[token].listed);\r\n\r\n        tokenData[token].buyRateImbalanceStepFunction = StepFunction(xBuy, yBuy);\r\n        tokenData[token].sellRateImbalanceStepFunction = StepFunction(xSell, ySell);\r\n    }\r\n\r\n    function setValidRateDurationInBlocks(uint duration) public onlyAdmin {\r\n        validRateDurationInBlocks = duration;\r\n    }\r\n\r\n    function enableTokenTrade(ERC20 token) public onlyAdmin {\r\n        require(tokenData[token].listed);\r\n        require(tokenControlInfo[token].minimalRecordResolution != 0);\r\n        tokenData[token].enabled = true;\r\n    }\r\n\r\n    function disableTokenTrade(ERC20 token) public onlyAlerter {\r\n        require(tokenData[token].listed);\r\n        tokenData[token].enabled = false;\r\n    }\r\n\r\n    function setReserveAddress(address reserve) public onlyAdmin {\r\n        reserveContract = reserve;\r\n    }\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == reserveContract);\r\n\r\n        if (rateUpdateBlock == 0) rateUpdateBlock = getRateUpdateBlock(token);\r\n\r\n        return addImbalance(token, buyAmount, rateUpdateBlock, currentBlock);\r\n    }\r\n\r\n    /* solhint-disable function-max-lines */\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint) {\r\n        // check if trade is enabled\r\n        if (!tokenData[token].enabled) return 0;\r\n        if (tokenControlInfo[token].minimalRecordResolution == 0) return 0; // token control info not set\r\n\r\n        // get rate update block\r\n        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\r\n\r\n        uint updateRateBlock = getLast4Bytes(compactData);\r\n        if (currentBlockNumber >= updateRateBlock + validRateDurationInBlocks) return 0; // rate is expired\r\n        // check imbalance\r\n        int totalImbalance;\r\n        int blockImbalance;\r\n        (totalImbalance, blockImbalance) = getImbalance(token, updateRateBlock, currentBlockNumber);\r\n\r\n        // calculate actual rate\r\n        int imbalanceQty;\r\n        int extraBps;\r\n        int8 rateUpdate;\r\n        uint rate;\r\n\r\n        if (buy) {\r\n            // start with base rate\r\n            rate = tokenData[token].baseBuyRate;\r\n\r\n            // add rate update\r\n            rateUpdate = getRateByteFromCompactData(compactData, token, true);\r\n            extraBps = int(rateUpdate) * 10;\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // compute token qty\r\n            qty = getTokenQty(token, rate, qty);\r\n            imbalanceQty = int(qty);\r\n            totalImbalance += imbalanceQty;\r\n\r\n            // add qty overhead\r\n            extraBps = executeStepFunction(tokenData[token].buyRateQtyStepFunction, int(qty));\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // add imbalance overhead\r\n            extraBps = executeStepFunction(tokenData[token].buyRateImbalanceStepFunction, totalImbalance);\r\n            rate = addBps(rate, extraBps);\r\n        } else {\r\n            // start with base rate\r\n            rate = tokenData[token].baseSellRate;\r\n\r\n            // add rate update\r\n            rateUpdate = getRateByteFromCompactData(compactData, token, false);\r\n            extraBps = int(rateUpdate) * 10;\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // compute token qty\r\n            imbalanceQty = -1 * int(qty);\r\n            totalImbalance += imbalanceQty;\r\n\r\n            // add qty overhead\r\n            extraBps = executeStepFunction(tokenData[token].sellRateQtyStepFunction, int(qty));\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // add imbalance overhead\r\n            extraBps = executeStepFunction(tokenData[token].sellRateImbalanceStepFunction, totalImbalance);\r\n            rate = addBps(rate, extraBps);\r\n        }\r\n\r\n        if (abs(totalImbalance) >= getMaxTotalImbalance(token)) return 0;\r\n        if (abs(blockImbalance + imbalanceQty) >= getMaxPerBlockImbalance(token)) return 0;\r\n\r\n        return rate;\r\n    }\r\n    /* solhint-enable function-max-lines */\r\n\r\n    function getBasicRate(ERC20 token, bool buy) public view returns(uint) {\r\n        if (buy)\r\n            return tokenData[token].baseBuyRate;\r\n        else\r\n            return tokenData[token].baseSellRate;\r\n    }\r\n\r\n    function getCompactData(ERC20 token) public view returns(uint, uint, byte, byte) {\r\n        require(tokenData[token].listed);\r\n\r\n        uint arrayIndex = tokenData[token].compactDataArrayIndex;\r\n        uint fieldOffset = tokenData[token].compactDataFieldIndex;\r\n\r\n        return (\r\n            arrayIndex,\r\n            fieldOffset,\r\n            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, true)),\r\n            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, false))\r\n        );\r\n    }\r\n\r\n    function getTokenBasicData(ERC20 token) public view returns(bool, bool) {\r\n        return (tokenData[token].listed, tokenData[token].enabled);\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    function getStepFunctionData(ERC20 token, uint command, uint param) public view returns(int) {\r\n        if (command == 0) return int(tokenData[token].buyRateQtyStepFunction.x.length);\r\n        if (command == 1) return tokenData[token].buyRateQtyStepFunction.x[param];\r\n        if (command == 2) return int(tokenData[token].buyRateQtyStepFunction.y.length);\r\n        if (command == 3) return tokenData[token].buyRateQtyStepFunction.y[param];\r\n\r\n        if (command == 4) return int(tokenData[token].sellRateQtyStepFunction.x.length);\r\n        if (command == 5) return tokenData[token].sellRateQtyStepFunction.x[param];\r\n        if (command == 6) return int(tokenData[token].sellRateQtyStepFunction.y.length);\r\n        if (command == 7) return tokenData[token].sellRateQtyStepFunction.y[param];\r\n\r\n        if (command == 8) return int(tokenData[token].buyRateImbalanceStepFunction.x.length);\r\n        if (command == 9) return tokenData[token].buyRateImbalanceStepFunction.x[param];\r\n        if (command == 10) return int(tokenData[token].buyRateImbalanceStepFunction.y.length);\r\n        if (command == 11) return tokenData[token].buyRateImbalanceStepFunction.y[param];\r\n\r\n        if (command == 12) return int(tokenData[token].sellRateImbalanceStepFunction.x.length);\r\n        if (command == 13) return tokenData[token].sellRateImbalanceStepFunction.x[param];\r\n        if (command == 14) return int(tokenData[token].sellRateImbalanceStepFunction.y.length);\r\n        if (command == 15) return tokenData[token].sellRateImbalanceStepFunction.y[param];\r\n\r\n        revert();\r\n    }\r\n    /* solhint-enable code-complexity */\r\n\r\n    function getRateUpdateBlock(ERC20 token) public view returns(uint) {\r\n        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\r\n        return getLast4Bytes(compactData);\r\n    }\r\n\r\n    function getListedTokens() public view returns(ERC20[]) {\r\n        return listedTokens;\r\n    }\r\n\r\n    function getTokenQty(ERC20 token, uint ethQty, uint rate) internal view returns(uint) {\r\n        uint dstDecimals = getDecimals(token);\r\n        uint srcDecimals = ETH_DECIMALS;\r\n\r\n        return calcDstQty(ethQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getLast4Bytes(bytes32 b) internal pure returns(uint) {\r\n        // cannot trust compiler with not turning bit operations into EXP opcode\r\n        return uint(b) / (BYTES_14_OFFSET * BYTES_14_OFFSET);\r\n    }\r\n\r\n    function getRateByteFromCompactData(bytes32 data, ERC20 token, bool buy) internal view returns(int8) {\r\n        uint fieldOffset = tokenData[token].compactDataFieldIndex;\r\n        uint byteOffset;\r\n        if (buy)\r\n            byteOffset = 32 - NUM_TOKENS_IN_COMPACT_DATA + fieldOffset;\r\n        else\r\n            byteOffset = 4 + fieldOffset;\r\n\r\n        return int8(data[byteOffset]);\r\n    }\r\n\r\n    function executeStepFunction(StepFunction f, int x) internal pure returns(int) {\r\n        uint len = f.y.length;\r\n        for (uint ind = 0; ind < len; ind++) {\r\n            if (x <= f.x[ind]) return f.y[ind];\r\n        }\r\n\r\n        return f.y[len-1];\r\n    }\r\n\r\n    function addBps(uint rate, int bps) internal pure returns(uint) {\r\n        require(rate <= MAX_RATE);\r\n        require(bps >= MIN_BPS_ADJUSTMENT);\r\n        require(bps <= MAX_BPS_ADJUSTMENT);\r\n\r\n        uint maxBps = 100 * 100;\r\n        return (rate * uint(int(maxBps) + bps)) / maxBps;\r\n    }\r\n\r\n    function abs(int x) internal pure returns(uint) {\r\n        if (x < 0)\r\n            return uint(-1 * x);\r\n        else\r\n            return uint(x);\r\n    }\r\n}\r\n\r\n// File: contracts/mockContracts/Wrapper.sol\r\n\r\ncontract Wrapper is Utils {\r\n\r\n    function getBalances(address reserve, ERC20[] tokens) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            uint balance = 0;\r\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\r\n                balance = reserve.balance;\r\n            } else {\r\n                balance = tokens[i].balanceOf(reserve);\r\n            }\r\n\r\n            result[i] = balance;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getTokenAllowances(address owner, address spender, ERC20[] tokens) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            result[i] = tokens[i].allowance(owner, spender);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getByteFromBytes14(bytes14 x, uint byteInd) public pure returns(byte) {\r\n        require(byteInd <= 13);\r\n        return x[byteInd];\r\n    }\r\n\r\n    function getInt8FromByte(bytes14 x, uint byteInd) public pure returns(int8) {\r\n        require(byteInd <= 13);\r\n        return int8(x[byteInd]);\r\n    }\r\n\r\n//    struct TokenRatesCompactData {\r\n//        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\r\n//        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\r\n//\r\n//        uint32 blockNumber;\r\n//    }\r\n//\r\n//    function getDataFromCompact(TokenRatesCompactData compact, uint byteInd) public pure\r\n//        returns(int8 buyByte, int8 sellByte, uint blockNumber)\r\n//    {\r\n//        blockNumber = uint(compact.blockNumber);\r\n////        return (compact.buy[byteInd], compact.sell[byteInd], uint(compact.blockNumber));\r\n//    }\r\n\r\n    function getCompactData(ConversionRates ratesContract, ERC20 token) internal view returns(int8,int8,uint) {\r\n        uint bulkIndex; uint index; byte buy; byte sell; uint updateBlock;\r\n        (bulkIndex, index, buy, sell) = ratesContract.getCompactData(token);\r\n        updateBlock = ratesContract.getRateUpdateBlock(token);\r\n\r\n        return (int8(buy), int8(sell), updateBlock);\r\n    }\r\n\r\n    function getTokenRates(ConversionRates ratesContract, ERC20[] tokenList)\r\n        public view\r\n        returns(uint[], uint[], int8[], int8[], uint[])\r\n    {\r\n        uint[] memory buyBases = new uint[](tokenList.length);\r\n        uint[] memory sellBases = new uint[](tokenList.length);\r\n        int8[] memory compactBuy = new int8[](tokenList.length);\r\n        int8[] memory compactSell = new int8[](tokenList.length);\r\n        uint[] memory updateBlock = new uint[](tokenList.length);\r\n\r\n        for (uint i = 0;  i < tokenList.length; i++) {\r\n            buyBases[i] = ratesContract.getBasicRate(tokenList[i], true);\r\n            sellBases[i] = ratesContract.getBasicRate(tokenList[i], false);\r\n\r\n            (compactBuy[i], compactSell[i], updateBlock[i]) = getCompactData(ratesContract, tokenList[i]);\r\n        }\r\n\r\n        return (buyBases, sellBases, compactBuy, compactSell, updateBlock);\r\n    }\r\n\r\n    function getTokenIndicies(ConversionRates ratesContract, ERC20[] tokenList) public view returns(uint[], uint[]) {\r\n        uint[] memory bulkIndices = new uint[](tokenList.length);\r\n        uint[] memory tokenIndexInBulk = new uint[](tokenList.length);\r\n\r\n        for (uint i = 0; i < tokenList.length; i++) {\r\n            uint bulkIndex; uint index; byte buy; byte sell;\r\n            (bulkIndex, index, buy, sell) = ratesContract.getCompactData(tokenList[i]);\r\n\r\n            bulkIndices[i] = bulkIndex;\r\n            tokenIndexInBulk[i] = index;\r\n        }\r\n\r\n        return (bulkIndices,tokenIndexInBulk);\r\n    }\r\n\r\n\r\n    function getExpectedRates( KyberNetwork network, ERC20[] srcs, ERC20[] dests, uint[] qty )\r\n        public view returns(uint[], uint[])\r\n    {\r\n        require( srcs.length == dests.length );\r\n        require( srcs.length == qty.length );\r\n\r\n        uint[] memory rates = new uint[](srcs.length);\r\n        uint[] memory slippage = new uint[](srcs.length);\r\n        for ( uint i = 0; i < srcs.length; i++ ) {\r\n            (rates[i],slippage[i]) = network.getExpectedRate(srcs[i],dests[i],qty[i]);\r\n        }\r\n\r\n        return (rates, slippage);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes14\"},{\"name\":\"byteInd\",\"type\":\"uint256\"}],\"name\":\"getInt8FromByte\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ratesContract\",\"type\":\"address\"},{\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getTokenIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenAllowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes14\"},{\"name\":\"byteInd\",\"type\":\"uint256\"}],\"name\":\"getByteFromBytes14\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"network\",\"type\":\"address\"},{\"name\":\"srcs\",\"type\":\"address[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"qty\",\"type\":\"uint256[]\"}],\"name\":\"getExpectedRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ratesContract\",\"type\":\"address\"},{\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getTokenRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"int8[]\"},{\"name\":\"\",\"type\":\"int8[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Wrapper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22cfc0c75ebb835b306a26ffed1a04602ad44078c44fc07dd65702e3dafd62fc"}]}