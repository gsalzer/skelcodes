{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\ncontract MobaBase {\r\n    address public owner = 0x0;\r\n    bool public isLock = false;\r\n    constructor ()  public  {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event transferToOwnerEvent(uint256 price);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    modifier msgSendFilter() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        require(msg.sender == tx.origin, \"msg.sender must equipt tx.origin\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function transferToOwner()    \r\n    onlyOwner \r\n    msgSendFilter \r\n    public {\r\n        uint256 totalBalace = address(this).balance;\r\n        owner.transfer(totalBalace);\r\n        emit transferToOwnerEvent(totalBalace);\r\n    }\r\n    \r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n        isLock = b;\r\n    }\r\n    \r\n   \r\n}\r\n\r\ncontract IConfigData {\r\n   function getPrice() public view returns (uint256);\r\n   function getWinRate(uint8 winCount) public pure returns (uint);\r\n   function getOverRate(uint8 winCount) public pure returns (uint);\r\n   function getPumpRate() public view returns(uint8);\r\n   function getRandom(bytes32 param) public returns (bytes32);\r\n   function GetAddressByName(bytes32 name) public view returns (address);\r\n   function getInviteRate() public view returns (uint);\r\n   function loseHandler(address addr,uint8 wincount) public ;\r\n}\r\n\r\ncontract BRBasketballControl is MobaBase {\r\n    \r\n    Winner public mWinner;\r\n    bytes32 mRandomValue;\r\n\r\n    uint gameIndex;\r\n    IConfigData public mConfig;\r\n    IConfigData public mNewConfig;\r\n   \r\n    constructor(address config) public {\r\n        mConfig = IConfigData(config);\r\n        startNewGame();\r\n    }\r\n    event pkEvent(address winAddr,address pkAddr,bytes32 pkInviteName,uint winRate,uint overRate,uint curWinRate,uint curOverRate,bool pkIsWin,uint256 price);\r\n    event gameOverEvent(uint gameIndex,address winAddr,uint256 price,uint256 totalBalace);\r\n    struct Winner {\r\n        uint8 num;\r\n        uint8 winCount;\r\n        address addr;\r\n    }\r\n    \r\n    function updateConfig(address newAddr)\r\n    onlyOwner \r\n    public{\r\n        mNewConfig = IConfigData(newAddr);\r\n  \r\n    }\r\n    \r\n    function PK(uint8 num,bytes32 name) \r\n    notLock\r\n    msgSendFilter\r\n    public payable {\r\n        \r\n        require(msg.value == mConfig.getPrice(),\"msg.value is error\");\r\n        require(msg.sender != mWinner.addr,\"msg.sender != winner\");\r\n        uint winRate  = mConfig.getWinRate(mWinner.winCount);\r\n\r\n        uint curWinRate ; uint curOverRate;\r\n        (curWinRate,curOverRate) = getRandom(100);\r\n        \r\n  \r\n                \r\n        inviteHandler(name);\r\n        address oldWinAddr = mWinner.addr;\r\n        if(mWinner.addr == address(0) ) {\r\n            mWinner = Winner(num,0,msg.sender);\r\n        }\r\n        else if( winRate < curWinRate ) {\r\n            mWinner = Winner(num,1,msg.sender);\r\n        }\r\n        else{\r\n            mWinner.winCount = mWinner.winCount + 1;\r\n        }\r\n        uint overRate = mConfig.getOverRate(mWinner.winCount);\r\n        emit pkEvent(mWinner.addr,msg.sender,name, winRate, overRate, curWinRate, curOverRate,msg.sender == mWinner.addr, mConfig.getPrice());\r\n        if(oldWinAddr != address(0) && curOverRate < overRate  ) {\r\n        \r\n          require(mWinner.addr != address(0),\"Winner.addr is null\");\r\n          \r\n          uint pumpRate = mConfig.getPumpRate();\r\n          uint totalBalace = address(this).balance;\r\n          uint giveToOwn   = totalBalace * pumpRate / 100;\r\n          uint giveToActor = totalBalace - giveToOwn;\r\n          owner.transfer(giveToOwn);\r\n          mWinner.addr.transfer(giveToActor);\r\n            \r\n         emit gameOverEvent(gameIndex, mWinner.addr,mConfig.getPrice(),giveToActor);\r\n          startNewGame();\r\n        }\r\n    }\r\n    \r\n    function startNewGame() private {\r\n        \r\n        gameIndex++;\r\n        mWinner = Winner(0,1,address(0));\r\n        if(mNewConfig != address(0) && mNewConfig != mConfig){\r\n            mConfig = mNewConfig;\r\n        }\r\n    }\r\n    \r\n    function inviteHandler(bytes32 inviteName) private {\r\n        \r\n        if(mConfig == address(0)) {\r\n          return ;\r\n        }\r\n        address inviteAddr = mConfig.GetAddressByName(inviteName);\r\n        if(inviteAddr != address(0)) {\r\n           uint giveToEth   = msg.value * mConfig.getInviteRate() / 100;\r\n           inviteAddr.transfer(giveToEth);\r\n        }\r\n    }\r\n    function getRandom(uint maxNum) private returns(uint,uint) {\r\n     \r\n        bytes32 curRandom = keccak256(abi.encodePacked(msg.sender,mRandomValue));\r\n        curRandom = mConfig.getRandom(curRandom);\r\n        curRandom = keccak256(abi.encodePacked(msg.sender,mRandomValue));\r\n        uint value1 = (uint(curRandom) % maxNum);\r\n        \r\n        curRandom  = keccak256(abi.encodePacked(msg.sender,curRandom,value1));\r\n        uint value2 = (uint(curRandom) % maxNum);\r\n        mRandomValue = curRandom;\r\n        return (value1,value2);\r\n    }\r\n    \r\n    function getGameInfo() public view returns (uint index,uint price,uint256 balace, \r\n                                          uint winNum,uint winCount,address WinAddr,uint winRate,uint winOverRate,\r\n                                          uint pkOverRate\r\n                                          ){\r\n        uint curbalace    = address(this).balance;\r\n        uint winnernum   = mWinner.num;\r\n        uint winnercount = mWinner.winCount;\r\n        address winneraddr  = mWinner.addr;\r\n        uint curWinRate  = mConfig.getWinRate(mWinner.winCount);\r\n        uint curOverRate = mConfig.getOverRate(mWinner.winCount);\r\n        uint curPkOverRate= mConfig.getOverRate(1);\r\n        return (gameIndex, mConfig.getPrice(), curbalace,\r\n                winnernum,winnercount,winneraddr,curWinRate,curOverRate,\r\n                curPkOverRate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mWinner\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint8\"},{\"name\":\"winCount\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"balace\",\"type\":\"uint256\"},{\"name\":\"winNum\",\"type\":\"uint256\"},{\"name\":\"winCount\",\"type\":\"uint256\"},{\"name\":\"WinAddr\",\"type\":\"address\"},{\"name\":\"winRate\",\"type\":\"uint256\"},{\"name\":\"winOverRate\",\"type\":\"uint256\"},{\"name\":\"pkOverRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint8\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"PK\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mNewConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"updateLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pkAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pkInviteName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"winRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"overRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curWinRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curOverRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pkIsWin\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"pkEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalBalace\",\"type\":\"uint256\"}],\"name\":\"gameOverEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferToOwnerEvent\",\"type\":\"event\"}]","ContractName":"BRBasketballControl","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e2f0518c1ff8c0878a97160f8b96035e3f91c7b4","Library":"","SwarmSource":"bzzr://0bb6f5e0afa8a7dd32070c7e780f5b324bc853d5c8c64af7571a0d4483388ce1"}]}