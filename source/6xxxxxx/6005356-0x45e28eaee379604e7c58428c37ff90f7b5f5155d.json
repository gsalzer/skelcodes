{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Certificate Library\r\n *  ░V░e░r░i░f░i░e░d░ ░O░n░ ░C░h░a░i░n░\r\n * Visit https://verifiedonchain.com/\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\nlibrary CertificateLibrary {\r\n    struct Document {\r\n        bytes ipfsHash;\r\n        bytes32 transcriptHash;\r\n        bytes32 contentHash;\r\n    }\r\n    \r\n    /**\r\n     * @notice Add Certification to a student\r\n     * @param _contentHash - Hash of the document\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @param _transcriptHash - Transcript Hash of the document\r\n     **/\r\n    function addCertification(Document storage self, bytes32 _contentHash, bytes _ipfsHash, bytes32 _transcriptHash) public {\r\n        self.ipfsHash = _ipfsHash;\r\n        self.contentHash= _contentHash;\r\n        self.transcriptHash = _transcriptHash;\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Certification to a student\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @param _contentHash - Content Hash of the document\r\n     * @param _transcriptHash - Transcript Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validate(Document storage self, bytes _ipfsHash, bytes32 _contentHash, bytes32 _transcriptHash) public view returns(bool) {\r\n        bytes storage ipfsHash = self.ipfsHash;\r\n        bytes32 contentHash = self.contentHash;\r\n        bytes32 transcriptHash = self.transcriptHash;\r\n        return contentHash == _contentHash && keccak256(ipfsHash) == keccak256(_ipfsHash) && transcriptHash == _transcriptHash;\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate IPFS Hash alone of a student\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateIpfsDoc(Document storage self, bytes _ipfsHash) public view returns(bool) {\r\n        bytes storage ipfsHash = self.ipfsHash;\r\n        return keccak256(ipfsHash) == keccak256(_ipfsHash);\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Content Hash alone of a student\r\n     * @param _contentHash - Content Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateContentHash(Document storage self, bytes32 _contentHash) public view returns(bool) {\r\n        bytes32 contentHash = self.contentHash;\r\n        return contentHash == _contentHash;\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Content Hash alone of a student\r\n     * @param _transcriptHash - Transcript Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateTranscriptHash(Document storage self, bytes32 _transcriptHash) public view returns(bool) {\r\n        bytes32 transcriptHash = self.transcriptHash;\r\n        return transcriptHash == _transcriptHash;\r\n    }\r\n}\r\n\r\ncontract Certificate is Ownable {\r\n    \r\n    using CertificateLibrary for CertificateLibrary.Document;\r\n    \r\n    struct Certification {\r\n        mapping (uint => CertificateLibrary.Document) documents;\r\n        uint16 indx;\r\n    }\r\n    \r\n    mapping (address => Certification) studentCertifications;\r\n    \r\n    event CertificationAdded(address userAddress, uint docIndx);\r\n    \r\n    /**\r\n     * @notice Add Certification to a student\r\n     * @param _student - Address of student\r\n     * @param _contentHash - Hash of the document\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @param _transcriptHash - Transcript Hash of the document\r\n     **/\r\n    function addCertification(address _student, bytes32 _contentHash, bytes _ipfsHash, bytes32 _transcriptHash) public onlyOwner {\r\n        uint currIndx = studentCertifications[_student].indx;\r\n        (studentCertifications[_student].documents[currIndx]).addCertification(_contentHash, _ipfsHash, _transcriptHash);\r\n        studentCertifications[_student].indx++;\r\n        emit CertificationAdded(_student, currIndx);\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Certification to a student\r\n     * @param _student - Address of student\r\n     * @param _docIndx - Index of the document to be validated\r\n     * @param _contentHash - Content Hash of the document\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @param _transcriptHash - Transcript Hash of the GradeSheet\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validate(address _student, uint _docIndx, bytes32 _contentHash, bytes _ipfsHash, bytes32 _transcriptHash) public view returns(bool) {\r\n        Certification storage certification  = studentCertifications[_student];\r\n        return (certification.documents[_docIndx]).validate(_ipfsHash, _contentHash, _transcriptHash);\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate IPFS Hash alone of a student\r\n     * @param _student - Address of student\r\n     * @param _docIndx - Index of the document to be validated\r\n     * @param _ipfsHash - IPFS Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateIpfsDoc(address _student, uint _docIndx, bytes _ipfsHash) public view returns(bool) {\r\n        Certification storage certification  = studentCertifications[_student];\r\n        return (certification.documents[_docIndx]).validateIpfsDoc(_ipfsHash);\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Content Hash alone of a student\r\n     * @param _student - Address of student\r\n     * @param _docIndx - Index of the document to be validated\r\n     * @param _contentHash - Content Hash of the document\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateContentHash(address _student, uint _docIndx, bytes32 _contentHash) public view returns(bool) {\r\n        Certification storage certification  = studentCertifications[_student];\r\n        return (certification.documents[_docIndx]).validateContentHash(_contentHash);\r\n    }\r\n    \r\n    /**\r\n     * @notice Validate Transcript Hash alone of a student\r\n     * @param _student - Address of student\r\n     * @param _transcriptHash - Transcript Hash of the GradeSheet\r\n     * @return Returns true if validation is successful\r\n     **/\r\n    function validateTranscriptHash(address _student, uint _docIndx, bytes32 _transcriptHash) public view returns(bool) {\r\n        Certification storage certification  = studentCertifications[_student];\r\n        return (certification.documents[_docIndx]).validateTranscriptHash(_transcriptHash);\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Certification Document Count\r\n     * @param _student - Address of student\r\n     * @return Returns the total number of certifications for a student\r\n     **/\r\n    function getCertifiedDocCount(address _student) public view returns(uint256) {\r\n        return studentCertifications[_student].indx;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Certification Document from DocType\r\n     * @param _student - Address of student\r\n     * @param _docIndx - Index of the document to be validated\r\n     * @return Returns IPFSHash, ContentHash, TranscriptHash of the document\r\n     **/\r\n    function getCertificationDocument(address _student, uint _docIndx) public view onlyOwner returns (bytes, bytes32, bytes32) {\r\n        return ((studentCertifications[_student].documents[_docIndx]).ipfsHash, (studentCertifications[_student].documents[_docIndx]).contentHash, (studentCertifications[_student].documents[_docIndx]).transcriptHash);\r\n    }\r\n    \r\n    /**\r\n     * @param _studentAddrOld - Address of student old\r\n     * @param _studentAddrNew - Address of student new\r\n     * May fail due to gas exceptions\r\n     * ADVICE:\r\n     * Check gas and then send\r\n     **/\r\n    function transferAll(address _studentAddrOld, address _studentAddrNew) public onlyOwner {\r\n        studentCertifications[_studentAddrNew] = studentCertifications[_studentAddrOld];\r\n        delete studentCertifications[_studentAddrOld];\r\n    }\r\n    \r\n    /**\r\n     * @param _studentAddrOld - Address of student old\r\n     * @param _studentAddrNew - Address of student new\r\n     **/\r\n    function transferDoc(uint docIndx, address _studentAddrOld, address _studentAddrNew) public onlyOwner {\r\n        studentCertifications[_studentAddrNew].documents[docIndx] = studentCertifications[_studentAddrOld].documents[docIndx];\r\n        delete studentCertifications[_studentAddrOld].documents[docIndx];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"}],\"name\":\"getCertifiedDocCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_docIndx\",\"type\":\"uint256\"}],\"name\":\"getCertificationDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_studentAddrOld\",\"type\":\"address\"},{\"name\":\"_studentAddrNew\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_docIndx\",\"type\":\"uint256\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"}],\"name\":\"validateContentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_docIndx\",\"type\":\"uint256\"},{\"name\":\"_transcriptHash\",\"type\":\"bytes32\"}],\"name\":\"validateTranscriptHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_docIndx\",\"type\":\"uint256\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"},{\"name\":\"_ipfsHash\",\"type\":\"bytes\"},{\"name\":\"_transcriptHash\",\"type\":\"bytes32\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_docIndx\",\"type\":\"uint256\"},{\"name\":\"_ipfsHash\",\"type\":\"bytes\"}],\"name\":\"validateIpfsDoc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_student\",\"type\":\"address\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"},{\"name\":\"_ipfsHash\",\"type\":\"bytes\"},{\"name\":\"_transcriptHash\",\"type\":\"bytes32\"}],\"name\":\"addCertification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"docIndx\",\"type\":\"uint256\"},{\"name\":\"_studentAddrOld\",\"type\":\"address\"},{\"name\":\"_studentAddrNew\",\"type\":\"address\"}],\"name\":\"transferDoc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"docIndx\",\"type\":\"uint256\"}],\"name\":\"CertificationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Certificate","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"CertificateLibrary:86e8451b5a05435484A84aD4235808a3dF9b048d","SwarmSource":"bzzr://283334b017ca42c14fb674c8e2f187ce715db3e06eb31eeea6e062d2b4caa1dc"}]}