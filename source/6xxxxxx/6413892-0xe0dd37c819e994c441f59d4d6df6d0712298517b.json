{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Control {\r\n\taddress public owner;\r\n    bool public paused = false;//暂停交易\r\n    uint256 constant internal _totalSupply  = (10 ** 9) * (10 ** 18);   // 1 billion YOU, decimals set to 18\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n\tfunction Control() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenNotPaused() {\r\n\t    require(!paused);\r\n        _;\r\n\t}\r\n\r\n    modifier whenPaused {\r\n\t    require(paused);\r\n\t    _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n\r\n\tfunction setOwner(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20, Control {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"Younus.org Token\";\r\n    string constant public symbol = \"YOU\";\r\n\r\n\tmapping(address => uint256) balances;\r\n\tmapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n   function totalSupply() public constant returns (uint256){\r\n        return _totalSupply;\r\n   }\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n}\r\n\r\ncontract YOUToken is BasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\tOption[] options;\r\n\tmapping (uint256 => address) internal optionIndexToOwner;\r\n    mapping (address => uint256[]) ownershipOptions;\r\n\r\n    event LogCreateOption(address indexed _buyer, uint256 _value, uint32 _firstDate, uint32 _optionDays);//分配期权事件\r\n\r\n\tstruct Option{\r\n\t    uint256 _optionValue;         //期权总额\r\n\t    uint32 _unfreezeDate;         //开始解冻日期\r\n\t    uint32  _optionDays;          //期权天数\r\n        uint256 _eachDayValue;        //每天可解冻金额\r\n\t    uint256 _unlockedValue;       //已解冻的金额\r\n\t}\r\n\r\n\tfunction YOUToken() public {\r\n        balances[msg.sender] = _totalSupply;\r\n        Transfer(address(0), msg.sender, _totalSupply);\r\n\t}\r\n\r\n\t//所有期权统计\r\n    function viewOptions() public view returns (uint optionCount, uint lockedValue, uint lockedRate){\r\n        optionCount = options.length;// 已有期权笔数\r\n        // 被冻结中的tokens\r\n        for(uint32 optionId = 0; optionId < options.length; optionId ++){\r\n            lockedValue = lockedValue.add(options[optionId]._optionValue.sub(options[optionId]._unlockedValue));\r\n        }\r\n        lockedValue = lockedValue.add(balances[owner]);  // 统计由销售合约代持部分\r\n        lockedRate = (lockedValue * 100) / _totalSupply; // 冻结比例(%)\r\n    }\r\n\r\n\t//某个token详情\r\n    function viewOption(uint32 optionId) external view returns (address holder,\r\n            uint256 optionValue,\r\n            uint256 lockedValue,\r\n            uint256 unlockedValue,\r\n            uint256 eachUnfreezeValue,\r\n            uint32 unfreezeDate,\r\n            uint32 optionDays,\r\n            uint256 releasableValue){\r\n        holder = optionIndexToOwner[optionId];                                                        //期权拥有者\r\n        optionValue = options[optionId]._optionValue;                                                 //期权总额\r\n\t    lockedValue = options[optionId]._optionValue.sub(options[optionId]._unlockedValue);           //已解冻的金额\r\n\t    unlockedValue = options[optionId]._unlockedValue;                                             //已解冻的金额\r\n        eachUnfreezeValue = options[optionId]._eachDayValue;                                          //每天可解冻金额\r\n\t    unfreezeDate = options[optionId]._unfreezeDate;                                               //开始解冻日期\r\n\t    optionDays = options[optionId]._optionDays;                                                   //冻结天数\r\n\t    releasableValue = freeValue(optionId);                                                        //可释放额度\r\n    }\r\n\r\n    //指定账户的期权总额(token)\r\n\tfunction optionOfAddress(address who) public view returns (uint256 optionCount, uint256[] optionIds, uint256 optionValue, uint256 lockedValue, uint256 unlockedValue, uint256 releasableValue){\r\n        optionIds = ownershipOptions[who];\r\n        optionCount = optionIds.length;\r\n        for(uint32 optionId = 0; optionId < options.length; optionId++){\r\n            if(optionIndexToOwner[optionId] == who){\r\n                if(options[optionId]._optionValue > options[optionId]._unlockedValue){\r\n                    optionValue = optionValue.add(options[optionId]._optionValue);// 期权总额\r\n                    unlockedValue = unlockedValue.add(options[optionId]._unlockedValue);// 已行权总额\r\n\r\n                    //可解冻期权\r\n                    uint256 _freeValue = freeValue(optionId);\r\n                    if(_freeValue > 0){\r\n                        releasableValue = releasableValue.add(_freeValue);// 可解冻总额\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        lockedValue = optionValue.sub(unlockedValue);// 冻结中的期权\r\n\t}\r\n\r\n\tfunction freeValue(uint32 optionId) internal view returns (uint256){\r\n\t    if(options[optionId]._optionValue == options[optionId]._unlockedValue)\r\n\t        return 0;\r\n\t    uint32 _today = uint32(block.timestamp);\r\n    \tif(options[optionId]._unfreezeDate >=  _today){\r\n    \t    return 0;\r\n    \t}\r\n\t    uint32 _days = uint32((_today - options[optionId]._unfreezeDate) / 86400);//可解冻天数:86400 = 24 * 60 * 60;\r\n\r\n\t    if(options[optionId]._optionDays <= _days){\r\n\t        return options[optionId]._optionValue.sub(options[optionId]._unlockedValue);\r\n\t    }else{\r\n\t        return options[optionId]._eachDayValue.mul(_days).sub(options[optionId]._unlockedValue);\r\n\t    }\r\n\t}\r\n\r\n    //分配期权\r\n\tfunction createOption(address holder, uint256 optionValue, uint32 unfreezeDate, uint32 optionDays) public onlyOwner whenNotPaused returns (uint) {\r\n\t    //请求参数校验\r\n\t\taddress seller = msg.sender;\r\n\t\trequire(optionValue <= balances[seller]);\r\n\t\trequire(holder != 0x0);\r\n        require(optionDays > 0);\r\n\r\n        //扣除tokens\r\n\t\tbalances[seller] = balances[seller].sub(optionValue);\r\n        uint256 eachDayValue = optionValue.div(optionDays);\r\n\r\n        //设置期权\r\n        Option memory _option = Option({\r\n                              _optionValue : optionValue,\r\n                              _optionDays : optionDays,\r\n                              _eachDayValue : eachDayValue,\r\n                              _unlockedValue : 0,\r\n                              _unfreezeDate : unfreezeDate\r\n                              });\r\n\r\n        uint256 optionId = options.push(_option) - 1;\r\n        require(optionId == uint256(uint32(optionId)));\r\n        optionIndexToOwner[optionId] = holder;\r\n        uint256[] storage optionIds = ownershipOptions[holder];\r\n        optionIds.push(optionId);\r\n        LogCreateOption(holder, optionValue, unfreezeDate, optionDays);//分配期权事件\r\n\t\treturn optionId;\r\n\t}\r\n\r\n    function unfreezeOption(uint32 optionId) public whenNotPaused returns (bool) {\r\n        require(options[optionId]._optionValue > options[optionId]._unlockedValue);//有待解冻tokens\r\n        uint32 _today = uint32(block.timestamp);\r\n        require(_today > options[optionId]._unfreezeDate);//可以解冻\r\n\r\n        uint256 _freeValue = freeValue(optionId);//预估可解冻金额\r\n        require(_freeValue > 0);\r\n\r\n        //解冻\r\n        address _buyer = optionIndexToOwner[optionId];\r\n        balances[_buyer] = balances[_buyer].add(_freeValue);\r\n        Transfer(owner, _buyer, _freeValue);\r\n        options[optionId]._unlockedValue = options[optionId]._unlockedValue.add(_freeValue);\r\n        return true;\r\n    }\r\n\r\n    function claim() public whenNotPaused returns (bool) {\r\n        return claimOfAddress(msg.sender);\r\n    }\r\n\r\n    function claimOfAddress(address holder) public whenNotPaused returns (bool) {\r\n        uint256[] memory optionIds = ownershipOptions[holder];\r\n        for(uint256 i = 0; i < optionIds.length; i++){\r\n            unfreezeOption(uint32(i));\r\n        }\r\n    }\r\n}\r\n\r\n// Contract to sell and distribute YOU tokens\r\ncontract YOUSale is Control{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// chart of stage transition\r\n    ///\r\n    /// deploy   initialize      startTime                            endTime                 finalize\r\n    ///                              | <-earlyStageLasts-> |             | <- closedStageLasts -> |\r\n    ///  O-----------O---------------O---------------------O-------------O------------------------O------------>\r\n    ///     Created     Initialized     Early(cornerstone)     Normal(VC)           Closed            Finalized\r\n    enum Stage {\r\n        NotCreated,\r\n        Created,\r\n        Initialized,\r\n        Early,\r\n        Normal,\r\n        Closed,\r\n        Finalized\r\n    }\r\n\r\n    uint256 constant earlyInvestorSupply        = _totalSupply * 92 / 1000;  // 9.2% for 早期投资者\r\n    uint256 constant marketSupply               = _totalSupply * 5 / 100;    // 5% for 交易所\r\n    uint256 constant reservedForTeam            = _totalSupply * 20 / 100;   // 20% for team团队\r\n    uint256 constant reservedForOperations      = _totalSupply * 40 / 100;   // 40 for operations运营\r\n\r\n    uint256 constant cornerstoneSupply          = _totalSupply * 9 / 100;    // 9% for 基石轮\r\n    uint256 constant vcSupply                   = _totalSupply * 168 / 1000; // 16.8% for 风险投资轮\r\n\r\n    // 74.2%\r\n    uint256 public constant nonPublicSupply     = earlyInvestorSupply + marketSupply + reservedForTeam + reservedForOperations;\r\n    // 25.8%\r\n    uint256 public constant publicSupply        = _totalSupply - nonPublicSupply;\r\n\r\n    struct SoldOut {\r\n        uint16 placeholder;                                          // placeholder to make struct pre-alloced\r\n        uint256 cornerstoneValue;\r\n        uint256 vcValue;\r\n    }\r\n\r\n    SoldOut soldOut;\r\n    uint256 constant youPerEth = 10000;                              // per exchange rate\r\n    uint256 constant cornerstoneStage = youPerEth  * 150 / 100;      // early stage has 50% bonus\r\n    uint256 constant vcStage = youPerEth  * 120 / 100;               // normal stage has 20% bonus\r\n\r\n    YOUToken you;                                  // YOU token contract follows ERC20 standard\r\n    address ethVault;                              // the account to keep received ether\r\n    address youVault;                              // the account to keep non-public offered YOU tokens\r\n    uint public  startTime;                        // time to start sale\r\n    uint public  endTime;                          // tiem to close sale\r\n    uint public constant earlyStageLasts = 7 days; // early bird stage lasts in seconds\r\n\r\n    bool initialized;\r\n    bool finalized;\r\n\r\n    function YOUSale() public {\r\n        soldOut.placeholder = 1;\r\n    }\r\n\r\n    /// @notice calculte exchange rate according to current stage\r\n    /// @return exchange rate. zero if not in sale.\r\n    function exchangeRate() public constant returns (uint256){\r\n        if (stage() == Stage.Early) {\r\n            return cornerstoneStage;\r\n        }\r\n        if (stage() == Stage.Normal) {\r\n            return vcStage;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //当前销售期，未售出余额\r\n    function unsoldOfStage() public constant returns (uint256){\r\n        if (stage() == Stage.Early) {\r\n            return cornerstoneSupply.sub(soldOut.cornerstoneValue);\r\n        }\r\n        if (stage() == Stage.Normal) {\r\n            return vcSupply.sub(soldOut.vcValue);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @notice estimate stage\r\n    /// @return current stage\r\n    function stage() public constant returns (Stage) {\r\n        if (finalized) {\r\n            return Stage.Finalized;\r\n        }\r\n\r\n        if (!initialized) {\r\n            // deployed but not initialized\r\n            return Stage.Created;\r\n        }\r\n\r\n        if (block.timestamp < startTime) {\r\n            // not started yet\r\n            return Stage.Initialized;\r\n        }\r\n\r\n        if (uint256(soldOut.cornerstoneValue).add(soldOut.vcValue) >= publicSupply) {\r\n            // all sold out\r\n            return Stage.Closed;\r\n        }\r\n\r\n        if (block.timestamp < endTime) {\r\n            // in sale\r\n            if (block.timestamp < startTime.add(earlyStageLasts)) {\r\n                // early bird stage\r\n                return Stage.Early;\r\n            }\r\n            // normal stage\r\n            return Stage.Normal;\r\n        }\r\n\r\n        // closed\r\n        return Stage.Closed;\r\n    }\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n    /// @notice entry to buy tokens\r\n    function buy() public payable {\r\n        require(msg.value >= 20 ether);\r\n\r\n        uint256 rate = exchangeRate();\r\n        require(rate > 0);\r\n\r\n        uint256 requested = msg.value.mul(rate);\r\n\r\n        Stage n_stage = stage();\r\n        require(n_stage == Stage.Early || n_stage == Stage.Normal);\r\n\r\n        uint256 remained;\r\n        if (n_stage == Stage.Early) {\r\n            remained = cornerstoneSupply.sub(soldOut.cornerstoneValue);\r\n        } else {\r\n            remained = vcSupply.sub(soldOut.vcValue);\r\n        }\r\n        if (requested > remained) {\r\n            //exceed remained\r\n            requested = remained;\r\n        }\r\n\r\n        uint256 ethCost = requested.div(rate);\r\n\r\n        // Token有,则购买\r\n        if (requested > 0) {\r\n            you.createOption(msg.sender, requested, uint32(endTime), 365);\r\n            // transfer ETH to vault\r\n            ethVault.transfer(ethCost);\r\n\r\n            // 记录已出售总额\r\n            if (n_stage == Stage.Early) {\r\n                soldOut.cornerstoneValue = requested.add(soldOut.cornerstoneValue);\r\n            } else{\r\n                soldOut.vcValue = requested.add(soldOut.vcValue);\r\n            }\r\n            LogSold(msg.sender, requested, ethCost);\r\n        }\r\n\r\n        uint256 toReturn = msg.value.sub(ethCost);\r\n        if(toReturn > 0) {\r\n            // return over payed ETH\r\n            msg.sender.transfer(toReturn);\r\n        }\r\n    }\r\n\r\n    /// @notice initialize to prepare for sale\r\n    /// @param _younus The address YOU token contract following ERC20 standard\r\n    /// @param _ethVault The place to store received ETH\r\n    /// @param _days The days from now to the sales deadline\r\n    function initialize(\r\n        YOUToken _younus,\r\n        address _ethVault,\r\n        uint _days) public onlyOwner {\r\n\r\n        // ownership of token contract should already be this\r\n        require(_younus.owner() == address(this));\r\n\r\n        require(stage() == Stage.Created);\r\n        require(_days <= 365 );\r\n        require(address(_ethVault) != 0);\r\n\r\n        startTime = block.timestamp + 3 days;\r\n        endTime = startTime + _days * 86400;     // 86400 = 24 * 60 * 60\r\n\r\n        you = _younus;\r\n        ethVault = _ethVault;\r\n        initialized = true;\r\n\r\n        LogInitialized();\r\n    }\r\n\r\n    /// @notice finalize\r\n    function finalize() public onlyOwner {\r\n        // only after closed stage\r\n        require(stage() == Stage.Closed);\r\n\r\n        uint256 unsold = publicSupply.sub(soldOut.cornerstoneValue).sub(soldOut.vcValue);\r\n        if (unsold > 0) {\r\n            you.createOption(0x000000000000000000000000000000000000002b, unsold, 4070880001, 365);//未售出的token,转给未知地址冻结(4070880001 = 2099/1/1 00:00:01)\r\n        }\r\n        finalized = true;\r\n        LogFinalized();\r\n    }\r\n\r\n    //分配期权\r\n    function assignOption(address holder, uint256 amount, uint32 _unfreezeDate, uint32 optionDays) public onlyOwner returns (uint) {\r\n        require(initialized);\r\n        require(optionDays > 0);\r\n\r\n        if(_unfreezeDate < uint32(endTime))\r\n            _unfreezeDate = uint32(endTime);\r\n\r\n        you.createOption(holder, amount, _unfreezeDate, optionDays);\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        you.pause();\r\n        return super.pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        you.unpause();\r\n        return super.unpause();\r\n    }\r\n\r\n    event LogInitialized();\r\n    event LogFinalized();\r\n    event LogSold(address indexed buyer, uint256 youAmount, uint256 ethCost);\r\n}\r\n//TODO\r\n//控制公开销售时，基石和VC的销售额度 ok\r\n//未售出，则直接销毁（销毁的Token从YOUSale出）ok\r\n//添加操作事件 ok\r\n//理清销售合约和代币合约关系(Sale合约持有Token合约) ok\r\n//需要解决一个账户只能购买一次问题(引入期权概念) ok\r\n//如何分配未未公开发行的token(直接转账)，锁定期问题(由YOUSale分配) ok\r\n//添加查看接口 ok\r\n//客户可以方便的自己解冻token(token合约调用clim方法) ok\r\n//可以暂停交易 ok","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_younus\",\"type\":\"address\"},{\"name\":\"_ethVault\",\"type\":\"address\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsoldOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_unfreezeDate\",\"type\":\"uint32\"},{\"name\":\"optionDays\",\"type\":\"uint32\"}],\"name\":\"assignOption\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyStageLasts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonPublicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"youAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"}],\"name\":\"LogSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"YOUSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f23c7aa5f4ef576942a970ba1c7288681d9f319195b23768425651298b993f16"}]}