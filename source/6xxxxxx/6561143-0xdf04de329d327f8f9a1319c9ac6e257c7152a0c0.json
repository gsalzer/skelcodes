{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\ncontract tokenRecipient\r\n  {\r\n  function receiveApproval(address from, uint256 value, address token, bytes extraData) public; \r\n  }\r\ncontract BYTECODE // ECP Smart Contract Start\r\n  {\r\n     /* Variables For Contract */\r\n    string  public name;                                                        // Variable To Store Name\r\n    string  public symbol;                                                      // Variable To Store Symbol\r\n    uint8   public decimals;                                                    // Variable To Store Decimals\r\n    uint256 public totalSupply;                                                 // Variable To Store Total Supply Of Tokens\r\n    uint256 public remaining;                                                   // Variable To Store Smart Remaining Tokens\r\n    address public owner;                                                       // Variable To Store Smart Contract Owner\r\n    uint    public icoStatus;                                                   // Variable To Store Smart Contract Status ( Enable / Disabled )\r\n    address public benAddress;                                                  // Variable To Store Ben Address\r\n    address public bkaddress;                                                   // Variable To Store Backup Ben Address\r\n    uint    public allowTransferToken;                                          // Variable To Store If Transfer Is Enable Or Disabled\r\n\r\n     /* Array For Contract*/\r\n    mapping (address => uint256) public balanceOf;                              // Arrary To Store Ether Addresses\r\n    mapping (address => mapping (address => uint256)) public allowance;         // Arrary To Store Ether Addresses For Allowance\r\n    mapping (address => bool) public frozenAccount;                             // Arrary To Store Ether Addresses For Frozen Account\r\n\r\n    /* Events For Contract  */\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex);\r\n\r\n\r\n     /* Initialize Smart Contract */\r\n    function ECP_Token() public\r\n    {\r\n      totalSupply = 15000000000000000000000000000;                              // Total Supply 15 Billion Tokens\r\n      owner =  msg.sender;                                                      // Smart Contract Owner\r\n      balanceOf[owner] = totalSupply;                                           // Credit Tokens To Owner\r\n      name = \"BYTECODE\";                                                       // Set Name Of Token\r\n      symbol = \"BYT\";                                                           // Set Symbol Of Token\r\n      decimals = 18;                                                            // Set Decimals\r\n      remaining = totalSupply;                                                  // Set How Many Tokens Left\r\n      icoStatus = 1;                                                            // Set ICO Status As Active At Beginning\r\n      benAddress = 0x1c2257419D38Fea4B2E0bE80Fe2F568525Bb2EBE;\r\n      bkaddress  = 0x92e1E566556461f7394a9840C174022D0928dBaE;\r\n      allowTransferToken = 1;                                                   // Default Set Allow Transfer To Active\r\n    }\r\n\r\n   modifier onlyOwner()                                                         // Create Modifier\r\n    {\r\n        require((msg.sender == owner) || (msg.sender ==  bkaddress));\r\n        _;\r\n    }\r\n\r\n\r\n    function () public payable                                                  // Default Function\r\n    {\r\n    }\r\n\r\n    function sendToMultipleAccount (address[] dests, uint256[] values) public onlyOwner returns (uint256) // Function To Send Token To Multiple Account At A Time\r\n    {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n\r\n                if(remaining > 0)\r\n                {\r\n                     _transfer(owner, dests[i], values[i]);  // Transfer Token Via Internal Transfer Function\r\n                     TokenTransferEvent(owner, dests[i], values[i],'MultipleAccount'); // Raise Event After Transfer\r\n                }\r\n                else\r\n                {\r\n                    revert();\r\n                }\r\n\r\n            i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n\r\n\r\n    function sendTokenToSingleAccount(address receiversAddress ,uint256 amountToTransfer) public onlyOwner  // Function To Send Token To Single Account At A Time\r\n    {\r\n        if (remaining > 0)\r\n        {\r\n                     _transfer(owner, receiversAddress, amountToTransfer);  // Transfer Token Via Internal Transfer Function\r\n                     TokenTransferEvent(owner, receiversAddress, amountToTransfer,'SingleAccount'); // Raise Event After Transfer\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n\r\n    function setTransferStatus (uint st) public  onlyOwner                      // Set Transfer Status\r\n    {\r\n        allowTransferToken = st;\r\n    }\r\n\r\n    function changeIcoStatus (uint8 st)  public onlyOwner                       // Change ICO Status\r\n    {\r\n        icoStatus = st;\r\n    }\r\n\r\n\r\n    function withdraw(uint amountWith) public onlyOwner                         // Withdraw Funds From Contract\r\n        {\r\n            if((msg.sender == owner) || (msg.sender ==  bkaddress))\r\n            {\r\n                benAddress.transfer(amountWith);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n\r\n    function withdraw_all() public onlyOwner                                    // Withdraw All Funds From Contract\r\n        {\r\n            if((msg.sender == owner) || (msg.sender ==  bkaddress) )\r\n            {\r\n                var amountWith = this.balance - 10000000000000000;\r\n                benAddress.transfer(amountWith);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n\r\n    function mintToken(uint256 tokensToMint) public onlyOwner                   // Mint Tokens\r\n        {\r\n            if(tokensToMint > 0)\r\n            {\r\n                var totalTokenToMint = tokensToMint * (10 ** 18);               // Calculate Tokens To Mint\r\n                balanceOf[owner] += totalTokenToMint;                           // Credit To Owners Account\r\n                totalSupply += totalTokenToMint;                                // Update Total Supply\r\n                remaining += totalTokenToMint;                                  // Update Remaining\r\n                Transfer(0, owner, totalTokenToMint);                           // Raise The Event\r\n            }\r\n        }\r\n\r\n\r\n\t function adm_trasfer(address _from,address _to, uint256 _value)  public onlyOwner // Admin Transfer Tokens\r\n\t\t  {\r\n\t\t\t  _transfer(_from, _to, _value);\r\n\t\t  }\r\n\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner        // Freeze Account\r\n        {\r\n            frozenAccount[target] = freeze;\r\n            FrozenFunds(target, freeze);\r\n        }\r\n\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) // ERC20 Function Implementation To Show Account Balance\r\n        {\r\n            return balanceOf[_owner];\r\n        }\r\n\r\n    function totalSupply() private constant returns (uint256 tsupply)           // ERC20 Function Implementation To Show Total Supply\r\n        {\r\n            tsupply = totalSupply;\r\n        }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner               // Function Implementation To Transfer Ownership\r\n        {\r\n            balanceOf[owner] = 0;\r\n            balanceOf[newOwner] = remaining;\r\n            owner = newOwner;\r\n        }\r\n\r\n  function _transfer(address _from, address _to, uint _value) internal          // Internal Function To Transfer Tokens\r\n      {\r\n          if(allowTransferToken == 1 || _from == owner )\r\n          {\r\n              require(!frozenAccount[_from]);                                   // Prevent Transfer From Frozenfunds\r\n              require (_to != 0x0);                                             // Prevent Transfer To 0x0 Address.\r\n              require (balanceOf[_from] > _value);                              // Check If The Sender Has Enough Tokens To Transfer\r\n              require (balanceOf[_to] + _value > balanceOf[_to]);               // Check For Overflows\r\n              balanceOf[_from] -= _value;                                       // Subtract From The Sender\r\n              balanceOf[_to] += _value;                                         // Add To The Recipient\r\n              Transfer(_from, _to, _value);                                     // Raise Event After Transfer\r\n          }\r\n          else\r\n          {\r\n               revert();\r\n          }\r\n      }\r\n\r\n  function transfer(address _to, uint256 _value)  public                        // ERC20 Function Implementation To Transfer Tokens\r\n      {\r\n          _transfer(msg.sender, _to, _value);\r\n      }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Transfer From\r\n      {\r\n          require (_value < allowance[_from][msg.sender]);                      // Check Has Permission To Transfer\r\n          allowance[_from][msg.sender] -= _value;                               // Minus From Available\r\n          _transfer(_from, _to, _value);                                        // Credit To Receiver\r\n          return true;\r\n      }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Approve\r\n      {\r\n          allowance[msg.sender][_spender] = _value;\r\n          return true;\r\n      }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) // ERC20 Function Implementation Of Approve & Call\r\n      {\r\n          tokenRecipient spender = tokenRecipient(_spender);\r\n          if (approve(_spender, _value)) {\r\n              spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n              return true;\r\n          }\r\n      }\r\n\r\n  function burn(uint256 _value) public returns (bool success)                   // ERC20 Function Implementation Of Burn\r\n      {\r\n          require (balanceOf[msg.sender] > _value);                             // Check If The Sender Has Enough Balance\r\n          balanceOf[msg.sender] -= _value;                                      // Subtract From The Sender\r\n          totalSupply -= _value;                                                // Updates TotalSupply\r\n          remaining -= _value;                                                  // Update Remaining Tokens\r\n          Burn(msg.sender, _value);                                             // Raise Event\r\n          return true;\r\n      }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Burn From\r\n      {\r\n          require(balanceOf[_from] >= _value);                                  // Check If The Target Has Enough Balance\r\n          require(_value <= allowance[_from][msg.sender]);                      // Check Allowance\r\n          balanceOf[_from] -= _value;                                           // Subtract From The Targeted Balance\r\n          allowance[_from][msg.sender] -= _value;                               // Subtract From The Sender's Allowance\r\n          totalSupply -= _value;                                                // Update TotalSupply\r\n          remaining -= _value;                                                  // Update Remaining\r\n          Burn(_from, _value);\r\n          return true;\r\n      }\r\n} //  ECP Smart Contract End","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"st\",\"type\":\"uint8\"}],\"name\":\"changeIcoStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ECP_Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountWith\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendToMultipleAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bkaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"adm_trasfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiversAddress\",\"type\":\"address\"},{\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"sendTokenToSingleAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToMint\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"setTransferStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typex\",\"type\":\"string\"}],\"name\":\"TokenTransferEvent\",\"type\":\"event\"}]","ContractName":"BYTECODE","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://16fea5289733d199bdf795c0d679e383bc1c94e4510633ac1698bbbcc9fdc86b"}]}