{"status":"1","message":"OK","result":[{"SourceCode":"/* Author: Victor Mezrin  victor@mezrin.com */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title OwnableInterface\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableInterface {\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the current owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == getOwner());\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is OwnableInterface {\r\n\r\n  /* Storage */\r\n\r\n  address owner = address(0x0);\r\n  address proposedOwner = address(0x0);\r\n\r\n\r\n  /* Events */\r\n\r\n  event OwnerAssignedEvent(address indexed newowner);\r\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the initial `owner` to the passed account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner requests transfer ownership to the new owner.\r\n   * @param _proposedOwner The address to transfer ownership to.\r\n   */\r\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\r\n    require (proposedOwner == address(0x0));\r\n    require (_proposedOwner != address(0x0));\r\n    require (_proposedOwner != address(this));\r\n\r\n    proposedOwner = _proposedOwner;\r\n\r\n    emit OwnershipOfferCreatedEvent(owner, _proposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the new owner to accept an ownership offer to contract control.\r\n   */\r\n  //noinspection UnprotectedFunction\r\n  function acceptOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == proposedOwner);\r\n\r\n    address _oldOwner = owner;\r\n    owner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n    emit OwnershipOfferAcceptedEvent(_oldOwner, owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner cancels transfer ownership to the new owner.\r\n   */\r\n  function cancelOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == owner || msg.sender == proposedOwner);\r\n\r\n    address _oldProposedOwner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"proposedOwner\" contract variable\r\n   */\r\n  function getProposedOwner() public constant returns (address) {\r\n    return proposedOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ManageableInterface\r\n * @dev Contract that allows to grant permissions to any address\r\n * @dev In real life we are no able to perform all actions with just one Ethereum address\r\n * @dev because risks are too high.\r\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\r\n * @dev stay able to revoke permissions at any time.\r\n */\r\ncontract ManageableInterface {\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\r\n\r\n  /**\r\n   * @dev Modifier to use in derived contracts\r\n   */\r\n  modifier onlyAllowedManager(string _permissionName) {\r\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Manageable is OwnableInterface,\r\n                       ManageableInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\r\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\r\n\r\n\r\n  /* Events */\r\n\r\n  event ManagerEnabledEvent(address indexed manager);\r\n  event ManagerDisabledEvent(address indexed manager);\r\n  event ManagerPermissionGrantedEvent(address indexed manager, bytes32 permission);\r\n  event ManagerPermissionRevokedEvent(address indexed manager, bytes32 permission);\r\n\r\n\r\n  /* Configure contract */\r\n\r\n  /**\r\n   * @dev Function to add new manager\r\n   * @param _manager address New manager\r\n   */\r\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == false);\r\n\r\n    managerEnabled[_manager] = true;\r\n\r\n    emit ManagerEnabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to remove existing manager\r\n   * @param _manager address Existing manager\r\n   */\r\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == true);\r\n\r\n    managerEnabled[_manager] = false;\r\n\r\n    emit ManagerDisabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to grant new permission to the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Granted permission name\r\n   */\r\n  function grantManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == false);\r\n\r\n    managerPermissions[_manager][_permissionName] = true;\r\n\r\n    emit ManagerPermissionGrantedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke permission of the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Revoked permission name\r\n   */\r\n  function revokeManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == true);\r\n\r\n    managerPermissions[_manager][_permissionName] = false;\r\n\r\n    emit ManagerPermissionRevokedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev Function to check manager status\r\n   * @param _manager address Manager`s address\r\n   * @return True if manager is enabled\r\n   */\r\n  function isManagerEnabled(\r\n    address _manager\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    returns (bool)\r\n  {\r\n    return managerEnabled[_manager];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check permissions of a manager\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager has been granted needed permission\r\n   */\r\n  function isPermissionGranted(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return managerPermissions[_manager][_permissionName];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Modifier to check manager address\r\n   */\r\n  modifier onlyValidManagerAddress(address _manager) {\r\n    require(_manager != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidPermissionName(string _permissionName) {\r\n    require(bytes(_permissionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PausableInterface\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract PausableInterface {\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public;\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public;\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenContractNotPaused() {\r\n    require(getPaused() == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenContractPaused {\r\n    require(getPaused() == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract Pausable is ManageableInterface,\r\n                     PausableInterface {\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n\r\n  bool paused = true;\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\r\n    paused = true;\r\n    emit PauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\r\n    paused = false;\r\n    emit UnpauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool) {\r\n    return paused;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutorInterface interface\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutorInterface {\r\n\r\n  /* Events */\r\n\r\n  event CallExecutedEvent(address indexed target,\r\n                          uint256 suppliedGas,\r\n                          uint256 ethValue,\r\n                          bytes32 transactionBytecodeHash);\r\n  event DelegatecallExecutedEvent(address indexed target,\r\n                                  uint256 suppliedGas,\r\n                                  bytes32 transactionBytecodeHash);\r\n\r\n\r\n  /* Functions */\r\n\r\n  function executeCall(address _target, uint256 _suppliedGas, uint256 _ethValue, bytes _transactionBytecode) external;\r\n  function executeDelegatecall(address _target, uint256 _suppliedGas, bytes _transactionBytecode) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutor\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutor is ManageableInterface,\r\n                             BytecodeExecutorInterface {\r\n\r\n  /* Storage */\r\n\r\n  bool underExecution = false;\r\n\r\n\r\n  /* BytecodeExecutorInterface */\r\n\r\n  function executeCall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    uint256 _ethValue,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_call')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.call.gas(_suppliedGas).value(_ethValue)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    emit CallExecutedEvent(_target, _suppliedGas, _ethValue, keccak256(_transactionBytecode));\r\n  }\r\n\r\n  function executeDelegatecall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_delegatecall')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.delegatecall.gas(_suppliedGas)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    emit DelegatecallExecutedEvent(_target, _suppliedGas, keccak256(_transactionBytecode));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetIDInterface\r\n * @dev Interface of a contract that assigned to an asset (JNT, JUSD etc.)\r\n * @dev Contracts for the same asset (like JNT, JUSD etc.) will have the same AssetID.\r\n * @dev This will help to avoid misconfiguration of contracts\r\n */\r\ncontract AssetIDInterface {\r\n  function getAssetID() public constant returns (string);\r\n  function getAssetIDHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetID\r\n * @dev Base contract implementing AssetIDInterface\r\n */\r\ncontract AssetID is AssetIDInterface {\r\n\r\n  /* Storage */\r\n\r\n  string assetID;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  constructor (string _assetID) public {\r\n    require(bytes(_assetID).length > 0);\r\n\r\n    assetID = _assetID;\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  function getAssetID() public constant returns (string) {\r\n    return assetID;\r\n  }\r\n\r\n  function getAssetIDHash() public constant returns (bytes32) {\r\n    return keccak256(assetID);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrLicenseRegistryInterface\r\n * @dev Interface of the contract that stores licenses\r\n */\r\ncontract CrydrLicenseRegistryInterface {\r\n\r\n  /**\r\n   * @dev Function to check licenses of investor\r\n   * @param _userAddress address User`s address\r\n   * @param _licenseName string  License name\r\n   * @return True if investor is admitted and has required license\r\n   */\r\n  function isUserAllowed(address _userAddress, string _licenseName) public constant returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrLicenseRegistryManagementInterface\r\n * @dev Interface of the contract that stores licenses\r\n */\r\ncontract CrydrLicenseRegistryManagementInterface {\r\n\r\n  /* Events */\r\n\r\n  event UserAdmittedEvent(address indexed useraddress);\r\n  event UserDeniedEvent(address indexed useraddress);\r\n  event UserLicenseGrantedEvent(address indexed useraddress, bytes32 licensename);\r\n  event UserLicenseRenewedEvent(address indexed useraddress, bytes32 licensename);\r\n  event UserLicenseRevokedEvent(address indexed useraddress, bytes32 licensename);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  /**\r\n   * @dev Function to admit user\r\n   * @param _userAddress address User`s address\r\n   */\r\n  function admitUser(address _userAddress) external;\r\n\r\n  /**\r\n   * @dev Function to deny user\r\n   * @param _userAddress address User`s address\r\n   */\r\n  function denyUser(address _userAddress) external;\r\n\r\n  /**\r\n   * @dev Function to check admittance of an user\r\n   * @param _userAddress address User`s address\r\n   * @return True if investor is in the registry and admitted\r\n   */\r\n  function isUserAdmitted(address _userAddress) public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev Function to grant license to an user\r\n   * @param _userAddress         address User`s address\r\n   * @param _licenseName         string  name of the license\r\n   */\r\n  function grantUserLicense(address _userAddress, string _licenseName) external;\r\n\r\n  /**\r\n   * @dev Function to revoke license from the user\r\n   * @param _userAddress address User`s address\r\n   * @param _licenseName string  name of the license\r\n   */\r\n  function revokeUserLicense(address _userAddress, string _licenseName) external;\r\n\r\n  /**\r\n   * @dev Function to check license of an investor\r\n   * @param _userAddress address User`s address\r\n   * @param _licenseName string  License name\r\n   * @return True if investor has been granted needed license\r\n   */\r\n  function isUserGranted(address _userAddress, string _licenseName) public constant returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrLicenseRegistry\r\n * @dev Contract that stores licenses\r\n */\r\ncontract CrydrLicenseRegistry is ManageableInterface,\r\n                                 CrydrLicenseRegistryInterface,\r\n                                 CrydrLicenseRegistryManagementInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) userAdmittance;\r\n  mapping (address => mapping (string => bool)) userLicenses;\r\n\r\n\r\n  /* CrydrLicenseRegistryInterface */\r\n\r\n  function isUserAllowed(\r\n    address _userAddress, string _licenseName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidAddress(_userAddress)\r\n    onlyValidLicenseName(_licenseName)\r\n    returns (bool)\r\n  {\r\n    return userAdmittance[_userAddress] &&\r\n           userLicenses[_userAddress][_licenseName];\r\n  }\r\n\r\n\r\n  /* CrydrLicenseRegistryManagementInterface */\r\n\r\n  function admitUser(\r\n    address _userAddress\r\n  )\r\n    external\r\n    onlyValidAddress(_userAddress)\r\n    onlyAllowedManager('admit_user')\r\n  {\r\n    require(userAdmittance[_userAddress] == false);\r\n\r\n    userAdmittance[_userAddress] = true;\r\n\r\n    emit UserAdmittedEvent(_userAddress);\r\n  }\r\n\r\n  function denyUser(\r\n    address _userAddress\r\n  )\r\n    external\r\n    onlyValidAddress(_userAddress)\r\n    onlyAllowedManager('deny_user')\r\n  {\r\n    require(userAdmittance[_userAddress] == true);\r\n\r\n    userAdmittance[_userAddress] = false;\r\n\r\n    emit UserDeniedEvent(_userAddress);\r\n  }\r\n\r\n  function isUserAdmitted(\r\n    address _userAddress\r\n  )\r\n    public\r\n    constant\r\n    onlyValidAddress(_userAddress)\r\n    returns (bool)\r\n  {\r\n    return userAdmittance[_userAddress];\r\n  }\r\n\r\n\r\n  function grantUserLicense(\r\n    address _userAddress, string _licenseName\r\n  )\r\n    external\r\n    onlyValidAddress(_userAddress)\r\n    onlyValidLicenseName(_licenseName)\r\n    onlyAllowedManager('grant_license')\r\n  {\r\n    require(userLicenses[_userAddress][_licenseName] == false);\r\n\r\n    userLicenses[_userAddress][_licenseName] = true;\r\n\r\n    emit UserLicenseGrantedEvent(_userAddress, keccak256(_licenseName));\r\n  }\r\n\r\n  function revokeUserLicense(\r\n    address _userAddress, string _licenseName\r\n  )\r\n    external\r\n    onlyValidAddress(_userAddress)\r\n    onlyValidLicenseName(_licenseName)\r\n    onlyAllowedManager('revoke_license')\r\n  {\r\n    require(userLicenses[_userAddress][_licenseName] == true);\r\n\r\n    userLicenses[_userAddress][_licenseName] = false;\r\n\r\n    emit UserLicenseRevokedEvent(_userAddress, keccak256(_licenseName));\r\n  }\r\n\r\n  function isUserGranted(\r\n    address _userAddress, string _licenseName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidAddress(_userAddress)\r\n    onlyValidLicenseName(_licenseName)\r\n    returns (bool)\r\n  {\r\n    return userLicenses[_userAddress][_licenseName];\r\n  }\r\n\r\n  function isUserLicenseValid(\r\n    address _userAddress, string _licenseName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidAddress(_userAddress)\r\n    onlyValidLicenseName(_licenseName)\r\n    returns (bool)\r\n  {\r\n    return userLicenses[_userAddress][_licenseName];\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  modifier onlyValidAddress(address _userAddress) {\r\n    require(_userAddress != address(0x0));\r\n    _;\r\n  }\r\n\r\n  modifier onlyValidLicenseName(string _licenseName) {\r\n    require(bytes(_licenseName).length > 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title JCashLicenseRegistry\r\n * @dev Contract that stores licenses\r\n */\r\ncontract JCashLicenseRegistry is AssetID,\r\n                                 Ownable,\r\n                                 Manageable,\r\n                                 Pausable,\r\n                                 BytecodeExecutor,\r\n                                 CrydrLicenseRegistry {\r\n\r\n  /* Constructor */\r\n\r\n  constructor (string _assetID) AssetID(_assetID) public { }\r\n}\r\n\r\n\r\n\r\ncontract JUSDLicenseRegistry is JCashLicenseRegistry {\r\n  constructor () public JCashLicenseRegistry('JUSD') {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"grantUserLicense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isManagerAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"isUserGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isPermissionGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"isUserLicenseValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"denyUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserAdmitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"enableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"revokeManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"grantManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"createOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManagerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIDHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"revokeUserLicense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"isUserAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"admitUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeDelegatecall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"disableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"useraddress\",\"type\":\"address\"}],\"name\":\"UserAdmittedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"useraddress\",\"type\":\"address\"}],\"name\":\"UserDeniedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"licensename\",\"type\":\"bytes32\"}],\"name\":\"UserLicenseGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"licensename\",\"type\":\"bytes32\"}],\"name\":\"UserLicenseRenewedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"licensename\",\"type\":\"bytes32\"}],\"name\":\"UserLicenseRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"CallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"DelegatecallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerEnabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"OwnerAssignedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferAcceptedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCancelledEvent\",\"type\":\"event\"}]","ContractName":"JUSDLicenseRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd6f5e410bae55728d7e6e0d20f0cf21fd3c09aeb4e1d833464f1b89a4cedb71"}]}