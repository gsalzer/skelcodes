{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n   QuickQueue contract: returns 103% of each investment!\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.01 to 1 ETH\r\n     - min 250000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 103%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 103% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 103% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make multiple deposits\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 103% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                           new investor       |\r\n                 investor4     |     =======>         investor5        |\r\n                 investor3     |                               investor4        |\r\n    (part. paid) investor2    <|                      investor3        |\r\n    (fully paid) investor1   <-|                    investor2   <----|  (pay until 103%)\r\n    \r\n    \r\n  QuickQueue - Надежный умножитель, который возвращает 103% от вашего депозита!\r\n\r\n  Маленький лимит на депозит избавляет от проблем с крупными вкладами и дает возможность заработать каждому!\r\n\r\n  Автоматические выплаты!\r\n  Полные отчеты о потраченных на рекламу средствах в группе!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.01 до 1 ETH\r\n     - gas limit минимум 250000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 103% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 103% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 103% от вашего депозита, вы удаляетесь из очереди\r\n  4. Вы можете делать несколько депозитов сразу\r\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 103% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                              новый инвестор      |\r\n                 инвестор4     |     =======>                инвестор5        |\r\n                 инвестор3     |                                      инвестор4        |\r\n (част. выплата) инвестор2    <|                       инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 103%)\r\n\r\n*/\r\n\r\ncontract QuickQueue {\r\n   \r\n    address constant private SUPPORT = 0x1f78Ae3ab029456a3ac5b6f4F90EaB5B675c47D5;  // Address for promo expences\r\n    uint constant public SUPPORT_PERCENT = 5; //Percent for promo expences 5% (3% for advertizing, 2% for techsupport)\r\n    uint constant public QUICKQUEUE = 103; // Percent for your deposit to be QuickQueue\r\n    uint constant public MAX_LIMIT = 1 ether; // Max deposit = 1 Eth\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; // The depositor address\r\n        uint128 deposit;   // The deposit amount\r\n        uint128 expect;    // How much we should pay out (initially it is 103% of deposit)\r\n    }\r\n\r\n    //The queue\r\n    Deposit[] private queue;\r\n\r\n    uint public currentReceiverIndex = 0;\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\");\r\n            require(msg.value <= MAX_LIMIT, \"Deposit is too big\");\r\n\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value * QUICKQUEUE / 100)));\r\n\r\n            uint ads = msg.value * SUPPORT_PERCENT / 100;\r\n            SUPPORT.transfer(ads);\r\n\r\n            pay();\r\n        }\r\n    }\r\n\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue \r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        uint128 money = uint128(address(this).balance);\r\n\r\n        for(uint i = 0; i < queue.length; i++) {\r\n\r\n            uint idx = currentReceiverIndex + i;\r\n\r\n            Deposit storage dep = queue[idx];\r\n\r\n            if(money >= dep.expect) {  \r\n                dep.depositor.transfer(dep.expect);\r\n                money -= dep.expect;\r\n\r\n                delete queue[idx];\r\n            } else {\r\n                dep.depositor.transfer(money);\r\n                dep.expect -= money;       \r\n                break;                     \r\n            }\r\n\r\n            if (gasleft() <= 50000)     \r\n                break;                     \r\n        }\r\n\r\n        currentReceiverIndex += i; \r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPORT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUICKQUEUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"QuickQueue","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a4dd18674bccb4eb18a57beae9187a318e57f650ac28a67cfd77706a3075c3e"}]}