{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ninterface tokenRecipient {\r\n\r\n    function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n\r\n\r\n   event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n\r\n   constructor() owned() public {\r\n\r\n        owner = msg.sender;\r\n\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n   function transferOwnership(address _newOwner) onlyOwner public returns (bool success) {\r\n\r\n        newOwner = _newOwner;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function acceptOwnership() public returns (bool success) {\r\n\r\n        require(msg.sender == newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        newOwner = address(0);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract TokenERC20 is owned {\r\n\r\n    string public name = 'Memecoin';\r\n\r\n    string public symbol = 'MEME';\r\n\r\n    uint8 public decimals = 8;\r\n\r\n    uint public totalSupply = 15000000000000000;\r\n\r\n\r\n   mapping (address => uint) public balanceOf;\r\n\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n\r\n\r\n\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n\r\n\r\n\r\n   constructor() TokenERC20() public {\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n   function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require(_to != 0x0);\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        require(!frozenAccount[msg.sender]);\r\n\r\n        require(!frozenAccount[_from]);\r\n\r\n        require(!frozenAccount[_to]);\r\n\r\n        \r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        balanceOf[_from] -= _value;\r\n\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function _multipleTransfer(address _from, address[] addresses, uint[] amounts) internal {\r\n\r\n        for (uint i=0; i<addresses.length; i++) {\r\n\r\n            address _to = addresses[i];\r\n\r\n            uint _value = amounts[i];\r\n\r\n            _transfer(_from, _to, _value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function multipleTransfer(address[] addresses, uint[] amounts) public returns (bool success) {\r\n\r\n        _multipleTransfer(msg.sender, addresses, amounts);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n\r\n            require(allowance[_from][msg.sender] >= _value);\r\n\r\n            allowance[_from][msg.sender] -= _value;\r\n       \r\n            _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        \r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public returns (bool success) {\r\n\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multipleTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9143a4dcf80843ad4d9c729f22ca508dbbe8e6ed2c1fac34b01c0d4ffad8516b"}]}