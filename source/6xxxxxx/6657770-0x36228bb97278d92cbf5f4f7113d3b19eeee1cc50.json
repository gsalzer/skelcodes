{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary Attribute {\r\n  enum AttributeType {\r\n    ROLE_MANAGER,                   // 0\r\n    ROLE_OPERATOR,                  // 1\r\n    IS_BLACKLISTED,                 // 2\r\n    HAS_PASSED_KYC_AML,             // 3\r\n    NO_FEES,                        // 4\r\n    /* Additional user-defined later */\r\n    USER_DEFINED\r\n  }\r\n\r\n  function toUint256(AttributeType _type) internal pure returns (uint256) {\r\n    return uint256(_type);\r\n  }\r\n}\r\n\r\n\r\nlibrary BitManipulation {\r\n  uint256 constant internal ONE = uint256(1);\r\n\r\n  function setBit(uint256 _num, uint256 _pos) internal pure returns (uint256) {\r\n    return _num | (ONE << _pos);\r\n  }\r\n\r\n  function clearBit(uint256 _num, uint256 _pos) internal pure returns (uint256) {\r\n    return _num & ~(ONE << _pos);\r\n  }\r\n\r\n  function toggleBit(uint256 _num, uint256 _pos) internal pure returns (uint256) {\r\n    return _num ^ (ONE << _pos);\r\n  }\r\n\r\n  function checkBit(uint256 _num, uint256 _pos) internal pure returns (bool) {\r\n    return (_num >> _pos & ONE == ONE);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Interface for logic governing write access to a Registry.\r\ncontract RegistryAccessManager {\r\n  // Called when _admin attempts to write _value for _who's _attribute.\r\n  // Returns true if the write is allowed to proceed.\r\n  function confirmWrite(\r\n    address _who,\r\n    Attribute.AttributeType _attribute,\r\n    address _admin\r\n  )\r\n    public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Claimable Ex\r\n * @dev Extension for the Claimable contract, where the ownership transfer can be canceled.\r\n */\r\ncontract ClaimableEx is Claimable {\r\n  /*\r\n   * @dev Cancels the ownership transfer.\r\n   */\r\n  function cancelOwnershipTransfer() onlyOwner public {\r\n    pendingOwner = owner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Registry is ClaimableEx {\r\n  using BitManipulation for uint256;\r\n\r\n  struct AttributeData {\r\n    uint256 value;\r\n  }\r\n\r\n  // Stores arbitrary attributes for users. An example use case is an ERC20\r\n  // token that requires its users to go through a KYC/AML check - in this case\r\n  // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n  // that account can use the token. This mapping stores that value (1, in the\r\n  // example) as well as which validator last set the value and at what time,\r\n  // so that e.g. the check can be renewed at appropriate intervals.\r\n  mapping(address => AttributeData) private attributes;\r\n\r\n  // The logic governing who is allowed to set what attributes is abstracted as\r\n  // this accessManager, so that it may be replaced by the owner as needed.\r\n  RegistryAccessManager public accessManager;\r\n\r\n  event SetAttribute(\r\n    address indexed who,\r\n    Attribute.AttributeType attribute,\r\n    bool enable,\r\n    string notes,\r\n    address indexed adminAddr\r\n  );\r\n\r\n  event SetManager(\r\n    address indexed oldManager,\r\n    address indexed newManager\r\n  );\r\n\r\n  constructor() public {\r\n    accessManager = new DefaultRegistryAccessManager();\r\n  }\r\n\r\n  // Writes are allowed only if the accessManager approves\r\n  function setAttribute(\r\n    address _who,\r\n    Attribute.AttributeType _attribute,\r\n    string _notes\r\n  )\r\n    public\r\n  {\r\n    bool _canWrite = accessManager.confirmWrite(\r\n      _who,\r\n      _attribute,\r\n      msg.sender\r\n    );\r\n    require(_canWrite);\r\n\r\n    // Get value of previous attribute before setting new attribute\r\n    uint256 _tempVal = attributes[_who].value;\r\n\r\n    attributes[_who] = AttributeData(\r\n      _tempVal.setBit(Attribute.toUint256(_attribute))\r\n    );\r\n\r\n    emit SetAttribute(_who, _attribute, true, _notes, msg.sender);\r\n  }\r\n\r\n  function clearAttribute(\r\n    address _who,\r\n    Attribute.AttributeType _attribute,\r\n    string _notes\r\n  )\r\n    public\r\n  {\r\n    bool _canWrite = accessManager.confirmWrite(\r\n      _who,\r\n      _attribute,\r\n      msg.sender\r\n    );\r\n    require(_canWrite);\r\n\r\n    // Get value of previous attribute before setting new attribute\r\n    uint256 _tempVal = attributes[_who].value;\r\n\r\n    attributes[_who] = AttributeData(\r\n      _tempVal.clearBit(Attribute.toUint256(_attribute))\r\n    );\r\n\r\n    emit SetAttribute(_who, _attribute, false, _notes, msg.sender);\r\n  }\r\n\r\n  // Returns true if the uint256 value stored for this attribute is non-zero\r\n  function hasAttribute(\r\n    address _who,\r\n    Attribute.AttributeType _attribute\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return attributes[_who].value.checkBit(Attribute.toUint256(_attribute));\r\n  }\r\n\r\n  // Returns the exact value of the attribute, as well as its metadata\r\n  function getAttributes(\r\n    address _who\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    AttributeData memory _data = attributes[_who];\r\n    return _data.value;\r\n  }\r\n\r\n  function setManager(RegistryAccessManager _accessManager) public onlyOwner {\r\n    emit SetManager(accessManager, _accessManager);\r\n    accessManager = _accessManager;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract DefaultRegistryAccessManager is RegistryAccessManager {\r\n  function confirmWrite(\r\n    address /*_who*/,\r\n    Attribute.AttributeType _attribute,\r\n    address _operator\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    Registry _client = Registry(msg.sender);\r\n    if (_operator == _client.owner()) {\r\n      return true;\r\n    } else if (_client.hasAttribute(_operator, Attribute.AttributeType.ROLE_MANAGER)) {\r\n      return (_attribute == Attribute.AttributeType.ROLE_OPERATOR);\r\n    } else if (_client.hasAttribute(_operator, Attribute.AttributeType.ROLE_OPERATOR)) {\r\n      return (_attribute != Attribute.AttributeType.ROLE_OPERATOR &&\r\n              _attribute != Attribute.AttributeType.ROLE_MANAGER);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"uint8\"}],\"name\":\"hasAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"uint8\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"clearAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"uint8\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"setAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accessManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attribute\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"enable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"adminAddr\",\"type\":\"address\"}],\"name\":\"SetAttribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24c70ff3876e179e9606141a209bc8cda3eb99c07880d5532e04777565046174"}]}