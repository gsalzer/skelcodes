{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// Safe Math\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// Ownable\r\n\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// TRAVEL Token\r\n\r\ncontract TRAVELToken is ERC20Interface, Ownable {\r\n  using SafeMath for uint256;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 private _totalSupply;\r\n    uint256 private _rate;\r\n    uint private _minPayment;\r\n    uint private airdropAmount;\r\n    uint256 private _soldTokens;\r\n    uint256[4] public _startDates;\r\n    uint256[4] public _endDates;\r\n    uint256[4] public _bonuses;\r\n   \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n       symbol = \"TRAVEL\";\r\n       name = \"TRAVEL Token\";\r\n       decimals = 18;\r\n       _minPayment = 0.01 ether; //Minimal amount allowed to buy tokens\r\n       _soldTokens = 0; //Total number of sold tokens (excluding bonus tokens)\r\n\r\n\r\n      //Beginning and ending dates for ICO stages    \r\n        _startDates = [1539550800, 1543615200, 1546293600, 1548972000]; \r\n        _endDates = [1543528800, 1546207200, 1548885600, 1550181600];\r\n        _bonuses = [50, 30, 20, 10];\r\n\r\n       _totalSupply = 47000000 * (10 ** uint256(decimals)); \r\n       airdropAmount = 2000000 * (10 ** uint256(decimals));\r\n\r\n       _balances[_owner] = airdropAmount;\r\n       _balances[address(this)] = (_totalSupply-airdropAmount);\r\n\r\n       _rate=225000000000; //exchange rate. Will be update daily according to ETH/USD rate at coinmarketcap.com\r\n       _allowed[address(this)][_owner]=_totalSupply;\r\n       emit Transfer(address(0), _owner, airdropAmount);\r\n    }\r\n\r\n    \r\n    // Method for batch distribution of airdrop tokens.\r\n    function sendBatchCS(address[] _recipients, uint[] _values) external onlyOwner returns (bool) {\r\n        require(_recipients.length == _values.length);\r\n        uint senderBalance = _balances[msg.sender];\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            uint value = _values[i];\r\n            address to = _recipients[i];\r\n            require(senderBalance >= value);\r\n            senderBalance = senderBalance - value;\r\n            _balances[to] += value;\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        _balances[msg.sender] = senderBalance;\r\n        return true;\r\n    }\r\n    \r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n  \r\n\r\n  function sendTokens(address from, address to, uint256 value) internal returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n\r\n// Function to burn undistributed amount of tokens after ICO is finished\r\n    function burn() external onlyOwner {\r\n      require(now >_endDates[3]);\r\n      _burn(address(this),_balances[address(this)]);\r\n    }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n\r\n    emit Transfer(account, 0x0000000000000000000000000000000000000000, amount);\r\n  }\r\n\r\n\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    require(amount <=_balances[account]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      amount);\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function getRate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  function _setRate(uint newrate) external onlyOwner {\r\n    require (newrate > 0);\r\n    _rate = newrate;\r\n  }\r\n\r\n  function soldTokens() public view returns (uint256) {\r\n    return _soldTokens;\r\n  }\r\n\r\n  // Method to check current ICO stage\r\n\r\n  function currentStage() public view returns (uint256) {\r\n    require(now >=_startDates[0] && now <= _endDates[3]);\r\n    if (now >= _startDates[0] && now <= _endDates[0]) return 0;\r\n    if (now >= _startDates[1] && now <= _endDates[1]) return 1;\r\n    if (now >= _startDates[2] && now <= _endDates[2]) return 2;\r\n    if (now >= _startDates[3] && now <= _endDates[3]) return 3;\r\n  }\r\n\r\n// Show current bonus tokens percentage\r\n\r\n function currentBonus() public view returns (uint256) {\r\n    require(now >=_startDates[0] && now <= _endDates[3]);\r\n    return _bonuses[currentStage()];\r\n  }\r\n\r\n  function _setLastDate(uint _date) external onlyOwner returns (bool){\r\n    require (_date > now);\r\n    require (_date > _startDates[3]);\r\n    require (_date < 2147483647);\r\n    _endDates[3] = _date;\r\n    return true;\r\n  }\r\n\r\n  // Returns date of ICO finish\r\n  function _getLastDate() public view returns (uint256) {\r\n    return uint256(_endDates[3]);\r\n  }\r\n\r\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens, uint256 bonus) {\r\n    tokens = uint256(weiAmount * _rate / (10**9));\r\n    bonus = uint256(tokens * _bonuses[currentStage()]/100);\r\n    return (tokens, bonus);\r\n  }\r\n\r\n  function _forwardFunds(uint256 amount) external onlyOwner {\r\n    require (address(this).balance > 0);\r\n    require (amount <= address(this).balance);\r\n    require (amount > 0);\r\n    _owner.transfer(amount);\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 bonus;\r\n    uint256 weiAmount = msg.value;\r\n\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    (tokens, bonus) = _getTokenAmount(weiAmount);\r\n   \r\n    uint256 total = tokens.add(bonus);\r\n\r\n    _soldTokens = _soldTokens.add(tokens);\r\n    \r\n    _processPurchase(beneficiary, total);\r\n\r\n    emit TokensPurchased(msg.sender, beneficiary,  weiAmount, total);\r\n\r\n  }\r\n\r\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n    require (now >= _startDates[0]);\r\n    require (now <= _endDates[3]);\r\n    require(beneficiary != address(0));\r\n    require(weiAmount >= _minPayment);\r\n    require (_balances[address(this)] > 0);\r\n  }\r\n\r\n\r\n  function _preICOSale(address beneficiary, uint256 tokenAmount) internal {\r\n    require(_soldTokens < 1000000 * (10 ** uint256(decimals)));\r\n    require(_soldTokens.add(tokenAmount) <= 1000000 * (10 ** uint256(decimals)));\r\n    sendTokens(address(this), beneficiary, tokenAmount);\r\n  }\r\n\r\n  function _ICOSale(address beneficiary, uint256 tokenAmount) internal {\r\n    require(_soldTokens < 30000000 * (10 ** uint256(decimals)));\r\n    require(_soldTokens.add(tokenAmount) <= 30000000 * (10 ** uint256(decimals)));\r\n    sendTokens(address(this), beneficiary, tokenAmount);\r\n  }\r\n\r\n\r\n  function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n    require(_balances[address(this)]>=tokenAmount);\r\n    if (currentStage() == 0) {\r\n      _preICOSale(beneficiary, tokenAmount);\r\n    } else {\r\n      _ICOSale(beneficiary, tokenAmount);\r\n\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getLastDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_startDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"_setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchCS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_endDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"_setLastDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TRAVELToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://263c6182ce8f816554b3a6138a83b38b7f9f485fc0c808e83923bacefec52188"}]}