{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *  BoostPro contract\r\n *\r\n *\tPERCENTS: \t \r\n * \t\t0.125% - 0.208% per hour (3.0% - 5.0% per day)\r\n *\r\n *  \tContract balance          \t\tPercent per day\r\n *       \t < 1000                   \t~3.0%\t\t(0.125% per hour)\t\t\r\n *    \t1000 - 1500                 \t~3.5%\t\t(0.146% per hour)\r\n *    \t1500 - 2000                 \t~4.0%\t\t(0.167% per hour)\r\n *    \t2000 - 2500                 \t~4.5%\t\t(0.188% per hour)\r\n *      \t>= 2500                   \t~5.0%\t\t(0.208% per hour)\r\n *\r\n * \tBONUS PERCENT:\r\n *\t\t\r\n *\t\tInvestor number\t\t\t\t\tPercent per day\r\n *\t\t\t 1-10\t\t\t\t\t\t~5.0%\t\t(0.208% per hour)\r\n *\t\t    11-20\t\t\t\t\t\t~4.5%\t\t(0.188% per hour)\r\n *\t\t    21-30\t\t\t\t\t\t~4.0%\t\t(0.167% per hour)\r\n *\t\t    31-60\t\t\t\t\t\t~3.5%\t\t(0.146% per hour)\r\n *\t\t   61-100\t\t\t\t\t\t~3.0%\t\t(0.125% per hour)\r\n *\t\t  101-150\t\t\t\t\t\t~2.5%\t\t(0.104% per hour)\r\n *\t\t  151-300\t\t\t\t\t\t~2.0%\t\t(0.083% per hour)\r\n *\t\t  301-500\t\t\t\t\t\t~1.5%\t\t(0.063% per hour)\r\n *\t\t    >=501\t\t\t\t\t\t~1.0%\t\t(0.042% per hour)\r\n *\r\n *\r\n *\tPR & SERVICE: 10%\r\n *\r\n *  MAXIMUM RETURN IS BOUNDED BY X2.\r\n *\r\n *\tREFERRERS:\r\n *\t\t3% of your deposit - bonus for referrer\r\n *\t\t2% cashback if referrer is specified\r\n *\r\n *  INSTRUCTIONS:\r\n *\r\n *  TO INVEST: send ETH to contract address\r\n *  TO WITHDRAW INTEREST: send 0 ETH to contract address\r\n *  TO REINVEST AND WITHDRAW INTEREST: send ETH to contract address\r\n *\r\n */\r\n \r\n contract BoostPro {\r\n    \r\n\t// For safe math operations\r\n    using SafeMath for uint;\r\n\t\r\n\t// Investor structure\r\n\tstruct Investor\r\n    {\r\n        uint deposit;\t\t\t\t\t\t// Total user investment\r\n\t\tuint datetime;\t\t\t\t\t\t// Datetime last payment\r\n\t\tuint paid;\t\t\t\t\t\t\t// Interest paid to Investor\r\n\t\tuint bonus;\t\t\t\t\t\t\t// Bonus rate\r\n        address referrer;\t\t\t\t\t// Referrer address\r\n    }\r\n\r\n    // Array of investors\r\n    mapping(address => Investor) public investors;\r\n\r\n    // Fund to transfer percent for PR & service\r\n\taddress private constant ADDRESS_PR = 0x16C223B0Fd0c1090E5273eEBFb672FbF97C3D790;\r\n\t\r\n\t// Percent for a PR & service foundation\r\n    uint private constant PERCENT_PR_FUND = 10000;\r\n\t\r\n\t// Peferral cashback percent\r\n\tuint private constant REFERRAL_CASHBACK = 2000;\r\n\t// Peferrer bonus percent\r\n\tuint private constant REFERRER_BONUS = 3000;\r\n    \r\n\t// Time through which you can take dividends\r\n    uint private constant DIVIDENDS_TIME = 1 hours;\r\n    // All percent should be divided by this\r\n    uint private constant PERCENT_DIVIDER = 100000;\r\n\t\r\n\t// Users ranges for bonus rate\r\n\tuint private constant RANGE_1 = 10;\r\n\tuint private constant RANGE_2 = 20;\r\n\tuint private constant RANGE_3 = 30;\r\n\tuint private constant RANGE_4 = 60;\r\n\tuint private constant RANGE_5 = 100;\r\n\tuint private constant RANGE_6 = 150;\r\n\tuint private constant RANGE_7 = 300;\r\n\tuint private constant RANGE_8 = 500;\r\n\t\r\n\tuint private constant BONUS_1 = 208;\r\n\tuint private constant BONUS_2 = 188;\r\n\tuint private constant BONUS_3 = 167;\r\n\tuint private constant BONUS_4 = 146;\r\n\tuint private constant BONUS_5 = 125;\r\n\tuint private constant BONUS_6 = 104;\r\n\tuint private constant BONUS_7 = 83;\r\n\tuint private constant BONUS_8 = 63;\r\n\t\r\n    uint public investors_count = 0;\r\n\tuint public transaction_count = 0;\r\n\tuint public last_payment_date = 0;\r\n\tuint public paid_by_fund = 0;\r\n\r\n    modifier isIssetUser() {\r\n        require(investors[msg.sender].deposit > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= investors[msg.sender].datetime.add(DIVIDENDS_TIME), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n\t// Entry point\r\n\tfunction() external payable {\r\n\r\n\t\tprocessDeposit();\r\n\r\n    }\r\n\t\r\n\t\r\n\t// Start process\r\n\tfunction processDeposit() private {\r\n        \r\n\t\tif (msg.value > 0) {\r\n\t\t\t\r\n\t\t\tif (investors[msg.sender].deposit == 0) {\r\n                \r\n\t\t\t\t// Increase investors count\r\n\t\t\t\tinvestors_count += 1;\r\n\t\t\t\tinvestors[msg.sender].bonus = getBonusPercentRate();\r\n\t\t\t\t\r\n\t\t\t\t// For Referrers bonus & Referrals cashback\r\n\t\t\t\taddress referrer = bytesToAddress(msg.data);\r\n\t\t\t\tif (investors[referrer].deposit > 0 && referrer != msg.sender && investors[msg.sender].referrer == 0x0) {\r\n\t\t\t\t\t_payoutReferr(msg.sender, referrer);\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n            }\r\n\t\t\t\r\n\t\t\tif (investors[msg.sender].deposit > 0 && now >= investors[msg.sender].datetime.add(DIVIDENDS_TIME)) {\r\n                processPayout();\r\n            }\r\n\r\n\t\t\tinvestors[msg.sender].deposit += msg.value;\r\n            investors[msg.sender].datetime = now;\r\n\t\t\ttransaction_count += 1;\r\n\t\t} else {\r\n            processPayout();\r\n        }\r\n\t\t\r\n    }\r\n\t\r\n\t// For Referrers bonus & Referrals cashback\r\n\tfunction _payoutReferr(address referral, address referrer) private {\r\n\t\tinvestors[referral].referrer = referrer;\r\n\t\tuint r_cashback = msg.value.mul(REFERRAL_CASHBACK).div(PERCENT_DIVIDER);\r\n\t\tuint r_bonus = msg.value.mul(REFERRER_BONUS).div(PERCENT_DIVIDER);\r\n\t\treferral.transfer(r_cashback);\r\n\t\treferrer.transfer(r_bonus);\r\n\t}\r\n\t\r\n    // Return of interest on the deposit\r\n    function processPayout() isIssetUser timePayment internal {\r\n        if (investors[msg.sender].deposit.mul(2) <= investors[msg.sender].paid) {\r\n            _delete(msg.sender);\r\n\t\t} else {\r\n            uint payout = getTotalInterestAmount(msg.sender);\r\n            _payout(msg.sender, payout);\r\n        }\r\n    }\r\n\t\r\n\t// Calculation total amount to transfer\r\n    function getTotalInterestAmount(address addr) public view returns(uint) {\r\n\t\t\r\n\t\tuint balance_percent = getBalancePercentRate();\r\n\t\tuint amount_per_period = investors[addr].deposit.mul(balance_percent + investors[addr].bonus).div(PERCENT_DIVIDER);\r\n\t\tuint period_count = now.sub(investors[addr].datetime).div(DIVIDENDS_TIME);\r\n\t\tuint total_amount = amount_per_period.mul(period_count);\r\n\t\t\r\n\t\t// Subtract the extra bonus amount\r\n\t\ttotal_amount = subtractAmount(addr, amount_per_period, period_count, total_amount);\r\n\t\t\r\n\t\treturn total_amount;\r\n    }\r\n\t\r\n\t// Subtract the extra bonus amount\r\n\tfunction subtractAmount(address addr, uint amount_per_period, uint period_count, uint total_amount) public view returns(uint) {\r\n\t\t\r\n\t\tif (investors[addr].paid.add(total_amount) > investors[addr].deposit && investors[addr].bonus > 0) {\r\n\t\t\t\r\n\t\t\tuint delta_amount = investors[addr].deposit - investors[addr].paid;\r\n\t\t\tuint delta_period = delta_amount.div(amount_per_period);\r\n\t\t\t\r\n\t\t\tuint subtract_period = period_count - delta_period;\r\n\t\t\tuint subtract_amount_per_period = investors[addr].deposit.mul(investors[addr].bonus).div(PERCENT_DIVIDER);\r\n\t\t\tuint subtract_amount = subtract_amount_per_period.mul(subtract_period);\r\n\t\t\t\r\n\t\t\ttotal_amount -= subtract_amount;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn total_amount;\r\n\t}\r\n\t\r\n\t// Calculation transfer amounts for every address\r\n    function _payout(address addr, uint amount) private {\r\n\t\t\r\n\t\t// If the amount of payments exceeded the deposit\r\n\t\tif (investors[addr].paid.add(amount) > investors[addr].deposit && investors[addr].bonus > 0) {\r\n\t\t\tinvestors[addr].bonus = 0;\r\n\t\t}\r\n\r\n        // To Investor (w/o tax)\r\n        uint investor_amount = amount.mul(PERCENT_DIVIDER - PERCENT_PR_FUND).div(PERCENT_DIVIDER);\r\n\t\t\r\n\t\tif(investors[addr].paid.add(investor_amount) > investors[addr].deposit.mul(2)) {\r\n\t\t\tinvestor_amount = investors[addr].deposit.mul(2) - investors[addr].paid;\r\n\t\t\tamount = investor_amount.mul(PERCENT_DIVIDER).div(PERCENT_DIVIDER - PERCENT_PR_FUND);\r\n\t\t}\r\n\t\t\r\n\t\tinvestors[addr].paid += investor_amount;\r\n        investors[addr].datetime = now;\r\n\t\t\r\n\t\t// To Advertising\r\n        uint pr_amount = amount.sub(investor_amount);\r\n        \r\n        paid_by_fund += amount;\r\n\t\tlast_payment_date = now;\r\n\t\t\r\n\t\t// Send money\r\n        ADDRESS_PR.transfer(pr_amount);\r\n        addr.transfer(investor_amount);\r\n\t\t\r\n    }\r\n\t\r\n    // Calculation of the current interest rate on the deposit\r\n    function getBalancePercentRate() public view returns(uint) {\r\n        \r\n\t\t// Current contract balance\r\n        uint balance = getBalance();\r\n\r\n        //calculate percent rate\r\n        if (balance < 1000 ether) {\r\n            return 125;\r\n        }\r\n        if (balance < 1500 ether) {\r\n            return 146;\r\n        }\r\n\t\tif (balance < 2000 ether) {\r\n            return 167;\r\n        }\r\n\t\tif (balance < 2500 ether) {\r\n            return 188;\r\n        }\r\n\r\n        return 208;\r\n    }\r\n\t\r\n\t// Calculation of the current interest rate on the deposit\r\n    function getBonusPercentRate() public view returns(uint) {\r\n        \r\n\t\tif (investors_count <= RANGE_1) {\r\n\t\t\treturn BONUS_1;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_2) {\r\n\t\t\treturn BONUS_2;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_3) {\r\n\t\t\treturn BONUS_3;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_4) {\r\n\t\t\treturn BONUS_4;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_5) {\r\n\t\t\treturn BONUS_5;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_6) {\r\n\t\t\treturn BONUS_6;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_7) {\r\n\t\t\treturn BONUS_7;\r\n\t\t}\r\n\t\tif (investors_count <= RANGE_8) {\r\n\t\t\treturn BONUS_8;\r\n\t\t}\r\n\t\t\r\n\t\treturn 42;\r\n    }\r\n\t\r\n\t// Return current contract balance\r\n    function getBalance() public view returns(uint) {\r\n        uint balance = address(this).balance;\r\n\t\treturn balance;\r\n\t}\r\n\t\r\n    // Reset Investor data\r\n    function _delete(address addr) private {\r\n        investors[addr].deposit = 0;\r\n\t\tinvestors[addr].datetime = 0;\r\n\t\tinvestors[addr].paid = 0;\r\n\t\tinvestors[addr].bonus = 0;\r\n    }\r\n\t\r\n\tfunction bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\t\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_payment_date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount_per_period\",\"type\":\"uint256\"},{\"name\":\"period_count\",\"type\":\"uint256\"},{\"name\":\"total_amount\",\"type\":\"uint256\"}],\"name\":\"subtractAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paid_by_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investors_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalInterestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transaction_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalancePercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BoostPro","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b350bc59362b917e639fa02945c9bbfc325ca216f300dcb4ef1e7d3ff16ace8"}]}