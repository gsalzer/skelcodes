{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MMaker is owned {\r\n    \r\n    mapping (uint8 => address) players;\r\n    \r\n    \r\n    \r\n    function MMaker() public {\r\n        state = LotteryState.Accepting;\r\n    }\r\n    \r\n    uint8 number;\r\n    \r\n    enum LotteryState { Accepting, Finished }\r\n    \r\n    LotteryState state; \r\n    uint8 public maxnumber  = 55;\r\n    uint public minAmount = 20000000000000000;\r\n    \r\n    \r\n    function enroll() public payable {\r\n        require(state == LotteryState.Accepting);\r\n        require(msg.value >= minAmount);\r\n        number += 1;\r\n        require(number<=maxnumber);\r\n        players[number] = (msg.sender);\r\n        if (number == maxnumber){\r\n            state = LotteryState.Finished;\r\n        }\r\n    }\r\n    \r\n    function setMaxNumber(uint8 newNumber) public onlyOwner {\r\n        maxnumber = newNumber;\r\n    }\r\n    \r\n    function setMinAmount(uint newAmount) public onlyOwner {\r\n        minAmount = newAmount;\r\n    }\r\n\r\n    function lastPlayer() public view returns (uint8 _number, address _Player){\r\n        _Player = players[number];\r\n        _number = number;\r\n    }\r\n    \r\n    function determineWinner() public onlyOwner {\r\n        \r\n        \r\n        uint8 winningNumber = randomtest();\r\n        \r\n        distributeFunds(winningNumber);\r\n    }\r\n    function startOver() public onlyOwner{\r\n      \r\n      for (uint8 i=1; i<number; i++){\r\n        delete (players[i]);\r\n        }\r\n        number = 0;\r\n        state = LotteryState.Accepting;\r\n        \r\n    }\r\n    \r\n    function distributeFunds(uint8 winningNumber) private {\r\n        owner.transfer(this.balance/10);\r\n        players[winningNumber].transfer(this.balance);\r\n    \r\n    }\r\n    \r\n    \r\n    function randomtest() internal returns(uint8){\r\n        uint8 inter =  uint8(uint256(keccak256(block.timestamp))%number);\r\n        //return inter;\r\n        return uint8(uint256(keccak256(players[inter]))%number);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxnumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumber\",\"type\":\"uint8\"}],\"name\":\"setMaxNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"determineWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayer\",\"outputs\":[{\"name\":\"_number\",\"type\":\"uint8\"},{\"name\":\"_Player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enroll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MMaker","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://09ec791a009719077f7bece23f7d2e6645057574296a02507e9ac55221d3a281"}]}