{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Token {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract NescrowExchangeService {\r\n\r\n    address owner = msg.sender;\r\n\r\n    uint256 public feeRateMin = 200;//100/200 = max 0.5%\r\n    uint256 public takerFeeRate = 0;\r\n    uint256 public makerFeeRate = 0;\r\n    address public feeAddress;\r\n\r\n    mapping (address => bool) public admins;\r\n    mapping (bytes32 => bool) public traded;\r\n    mapping (bytes32 => uint256) public orderFills;\r\n    mapping (bytes32 => bool) public withdrawn;\r\n    mapping (bytes32 => bool) public transfers;\r\n    mapping (address => mapping (address => uint256)) public balances;\r\n    mapping (address => uint256) public tradesLocked;\r\n    mapping (address => uint256) public disableFees;\r\n    mapping (address => uint256) public tokenDecimals;\r\n    mapping (address => bool) public tokenRegistered;\r\n\r\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n    event TradesLock(address user);\r\n    event TradesUnlock(address user);\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public view returns (address out) {\r\n        return owner;\r\n    }\r\n\r\n    function setAdmin(address admin, bool isAdmin) public onlyOwner {\r\n        admins[admin] = isAdmin;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        uint amount = safeDiv(msg.value, 10**10);//wei to 8 decimals\r\n        require(msg.value > 0);\r\n        increaseBalance(msg.sender, address(0), amount);\r\n        emit Deposit(address(0), msg.sender, amount, balances[address(0)][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) public {\r\n        require(amount > 0);\r\n        require(Token(token).transferFrom(msg.sender, this, toTokenAmount(token, amount)));\r\n        increaseBalance(msg.sender, token, amount);\r\n        emit Deposit(token, msg.sender, amount, balances[token][msg.sender]);\r\n    }\r\n\r\n    function sendTips() public payable {\r\n        uint amount = safeDiv(msg.value, 10**10);//wei to 8 decimals\r\n        require(msg.value > 0);\r\n        increaseBalance(feeAddress, address(0), amount);\r\n    }\r\n\r\n    function sendTipsToken(address token, uint256 amount) public {\r\n        require(amount > 0);\r\n        require(Token(token).transferFrom(msg.sender, this, toTokenAmount(token, amount)));\r\n        increaseBalance(feeAddress, token, amount);\r\n    }\r\n\r\n    function transferTips(address token, uint256 amount, address fromUser, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        public onlyAdmin {\r\n\r\n        require(amount > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(this, token, amount, fromUser, nonce));\r\n        require(!transfers[hash]);\r\n        transfers[hash] = true;\r\n\r\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s);\r\n        require(fromUser == signer);\r\n\r\n        require(reduceBalance(fromUser, token, amount));\r\n        increaseBalance(feeAddress, token, amount);\r\n    }\r\n\r\n    function transfer(address token, uint256 amount, address fromUser, address toUser, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        public onlyAdmin {\r\n\r\n        require(amount > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(this, token, amount, fromUser, toUser, nonce));\r\n        require(!transfers[hash]);\r\n        transfers[hash] = true;\r\n\r\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s);\r\n        require(fromUser == signer);\r\n\r\n        require(reduceBalance(fromUser, token, amount));\r\n        increaseBalance(toUser, token, amount);\r\n    }\r\n\r\n    function withdrawAdmin(address token, uint256 amount, address user, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        public onlyAdmin {\r\n\r\n        require(amount > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(this, token, amount, user, nonce));\r\n        require(!withdrawn[hash]);\r\n        withdrawn[hash] = true;\r\n\r\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s);\r\n        require(user == signer);\r\n\r\n        require(reduceBalance(user, token, amount));\r\n        if (token == address(0)) {\r\n            require(user.send(toTokenAmount(address(0), amount)));\r\n        } else {\r\n            require(Token(token).transfer(user, toTokenAmount(token, amount)));\r\n        }\r\n        emit Withdraw(token, user, amount, balances[token][user]);\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) public {\r\n\r\n        require(amount > 0);\r\n        require(tradesLocked[msg.sender] > block.number);\r\n        require(reduceBalance(msg.sender, token, amount));\r\n\r\n        if (token == address(0)) {\r\n            require(msg.sender.send(toTokenAmount(address(0), amount)));\r\n        } else {\r\n            require(Token(token).transfer(msg.sender, toTokenAmount(token, amount)));\r\n        }\r\n        emit Withdraw(token, msg.sender, amount, balances[token][msg.sender]);\r\n    }\r\n\r\n    function reduceBalance(address user, address token, uint256 amount) private returns(bool) {\r\n        if (balances[token][user] < amount) return false;\r\n        balances[token][user] = safeSub(balances[token][user], amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseBalance(address user, address token, uint256 amount) private returns(bool) {\r\n        balances[token][user] = safeAdd(balances[token][user], amount);\r\n        return true;\r\n    }\r\n\r\n    function toTokenAmount(address token, uint256 amount) private view returns (uint256) {\r\n\r\n        require(tokenRegistered[token]);\r\n        uint256 decimals = token == address(0)\r\n            ? 18\r\n            : tokenDecimals[token];\r\n\r\n        if (decimals == 8) {\r\n            return amount;\r\n        }\r\n\r\n        if (decimals > 8) {\r\n            return safeMul(amount, 10**(decimals - 8));\r\n        } else {\r\n            return safeDiv(amount, 10**(8 - decimals));\r\n        }\r\n    }\r\n\r\n    function setTakerFeeRate(uint256 feeRate) public onlyAdmin {\r\n        require(feeRate == 0 || feeRate >= feeRateMin);\r\n        takerFeeRate = feeRate;\r\n    }\r\n\r\n    function setMakerFeeRate(uint256 feeRate) public onlyAdmin {\r\n        require(feeRate == 0 || feeRate >= feeRateMin);\r\n        makerFeeRate = feeRate;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public onlyAdmin {\r\n        require(_feeAddress != address(0));\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setDisableFees(address user, uint256 timestamp) public onlyAdmin {\r\n        require(timestamp > block.timestamp);\r\n        disableFees[user] = timestamp;\r\n    }\r\n\r\n    function invalidateOrder(address user, uint256 timestamp) public onlyAdmin {\r\n        require(timestamp > block.timestamp);\r\n        disableFees[user] = timestamp;\r\n    }\r\n\r\n    function setTokenDecimals(address token, uint256 decimals) public onlyAdmin {\r\n        require(!tokenRegistered[token]);\r\n        tokenRegistered[token] = true;\r\n        tokenDecimals[token] = decimals;\r\n    }\r\n\r\n    function tradesLock(address user) public {\r\n        require(user == msg.sender);\r\n        tradesLocked[user] = block.number + 20000;\r\n        emit TradesLock(user);\r\n    }\r\n\r\n    function tradesUnlock(address user) public {\r\n        require(user == msg.sender);\r\n        tradesLocked[user] = 0;\r\n        emit TradesUnlock(user);\r\n    }\r\n\r\n    function isUserMakerFeeEnabled(address user) private view returns(bool) {\r\n        return makerFeeRate > 0 && disableFees[user] < block.timestamp;\r\n    }\r\n\r\n    function isUserTakerFeeEnabled(address user) private view returns(bool) {\r\n        return takerFeeRate > 0 && disableFees[user] < block.timestamp;\r\n    }\r\n\r\n    function trade(\r\n        uint256[6] amounts,\r\n        address[4] addresses,\r\n        uint8[2] v,\r\n        bytes32[4] rs\r\n    ) public onlyAdmin {\r\n        /**\r\n            amounts: offerAmount, wantAmount, offerAmountToFill, blockExpires, nonce, nonceTrade\r\n            addresses: maker, taker, offerToken, wantToken\r\n        */\r\n        require(tradesLocked[addresses[0]] < block.number);\r\n        require(block.timestamp <= amounts[3]);\r\n        bytes32 orderHash = keccak256(abi.encodePacked(this, addresses[2], addresses[3], addresses[0], amounts[0], amounts[1], amounts[3], amounts[4]));\r\n\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v[0], rs[0], rs[1]) == addresses[0]);\r\n\r\n        bytes32 tradeHash = keccak256(abi.encodePacked(orderHash, amounts[2], addresses[1], amounts[5]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", tradeHash)), v[1], rs[2], rs[3]) == addresses[1]);\r\n\r\n        require(!traded[tradeHash]);\r\n        traded[tradeHash] = true;\r\n\r\n        require(safeSub(amounts[0], orderFills[orderHash]) >= amounts[2]);\r\n\r\n        uint256 wantAmountToTake = safeDiv(safeMul(amounts[2], amounts[1]), amounts[0]);\r\n        require(wantAmountToTake > 0);\r\n\r\n        require(reduceBalance(addresses[0], addresses[2], amounts[2]));\r\n        require(reduceBalance(addresses[1], addresses[3], safeDiv(safeMul(amounts[2], amounts[1]), amounts[0])));\r\n\r\n        if (isUserMakerFeeEnabled(addresses[0])) {\r\n            increaseBalance(addresses[0], addresses[3], safeSub(wantAmountToTake, safeDiv(wantAmountToTake, makerFeeRate)));\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(wantAmountToTake, makerFeeRate));\r\n        } else {\r\n            increaseBalance(addresses[0], addresses[3], wantAmountToTake);\r\n        }\r\n\r\n        if (isUserTakerFeeEnabled(addresses[1])) {\r\n            increaseBalance(addresses[1], addresses[2], safeSub(amounts[2], safeDiv(amounts[2], takerFeeRate)));\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[2], takerFeeRate));\r\n        } else {\r\n            increaseBalance(addresses[1], addresses[2], amounts[2]);\r\n        }\r\n\r\n        orderFills[orderHash] = safeAdd(orderFills[orderHash], amounts[2]);\r\n    }\r\n\r\n    function tradeWithTips(\r\n        uint256[9] amounts,\r\n        address[4] addresses,\r\n        uint8[2] v,\r\n        bytes32[4] rs\r\n    ) public onlyAdmin {\r\n        /**\r\n            amounts: offerAmount, wantAmount, offerAmountToFill, blockExpires, nonce, nonceTrade, makerTips, takerTips, p2p\r\n            addresses: maker, taker, offerToken, wantToken\r\n        */\r\n        require(tradesLocked[addresses[0]] < block.number);\r\n        require(block.timestamp <= amounts[3]);\r\n\r\n        bytes32 orderHash;\r\n        if (amounts[8] == 0) {\r\n            orderHash = amounts[6] > 0\r\n                ? keccak256(abi.encodePacked(this, addresses[2], addresses[3], addresses[0], amounts[0], amounts[1], amounts[3], amounts[4], amounts[6]))\r\n                : keccak256(abi.encodePacked(this, addresses[2], addresses[3], addresses[0], amounts[0], amounts[1], amounts[3], amounts[4]));\r\n        } else {\r\n            orderHash = amounts[6] > 0\r\n                ? keccak256(abi.encodePacked(this, addresses[2], addresses[3], addresses[0], addresses[1], amounts[0], amounts[1], amounts[3], amounts[4], amounts[6]))\r\n                : keccak256(abi.encodePacked(this, addresses[2], addresses[3], addresses[0], addresses[1], amounts[0], amounts[1], amounts[3], amounts[4]));\r\n        }\r\n\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v[0], rs[0], rs[1]) == addresses[0]);\r\n\r\n        bytes32 tradeHash = amounts[7] > 0\r\n            ? keccak256(abi.encodePacked(orderHash, amounts[2], addresses[1], amounts[5], amounts[7]))\r\n            : keccak256(abi.encodePacked(orderHash, amounts[2], addresses[1], amounts[5]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", tradeHash)), v[1], rs[2], rs[3]) == addresses[1]);\r\n\r\n        require(!traded[tradeHash]);\r\n        traded[tradeHash] = true;\r\n\r\n        require(safeSub(amounts[0], orderFills[orderHash]) >= amounts[2]);\r\n\r\n        uint256 wantAmountToTake = safeDiv(safeMul(amounts[2], amounts[1]), amounts[0]);\r\n        require(wantAmountToTake > 0);\r\n\r\n        require(reduceBalance(addresses[0], addresses[2], amounts[2]));\r\n        require(reduceBalance(addresses[1], addresses[3], safeDiv(safeMul(amounts[2], amounts[1]), amounts[0])));\r\n\r\n        if (amounts[6] > 0 && !isUserMakerFeeEnabled(addresses[0])) {\r\n            increaseBalance(addresses[0], addresses[3], safeSub(wantAmountToTake, safeDiv(wantAmountToTake, amounts[6])));\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(wantAmountToTake, amounts[6]));\r\n        } else if (amounts[6] == 0 && isUserMakerFeeEnabled(addresses[0])) {\r\n            increaseBalance(addresses[0], addresses[3], safeSub(wantAmountToTake, safeDiv(wantAmountToTake, makerFeeRate)));\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(wantAmountToTake, makerFeeRate));\r\n        } else if (amounts[6] > 0 && isUserMakerFeeEnabled(addresses[0])) {\r\n            increaseBalance(addresses[0], addresses[3], safeSub(wantAmountToTake, safeAdd(safeDiv(wantAmountToTake, amounts[6]), safeDiv(wantAmountToTake, makerFeeRate))));\r\n            increaseBalance(feeAddress, addresses[3], safeAdd(safeDiv(wantAmountToTake, amounts[6]), safeDiv(wantAmountToTake, makerFeeRate)));\r\n        } else {\r\n            increaseBalance(addresses[0], addresses[3], wantAmountToTake);\r\n        }\r\n\r\n        if (amounts[7] > 0 && !isUserTakerFeeEnabled(addresses[1])) {\r\n            increaseBalance(addresses[1], addresses[2], safeSub(amounts[2], safeDiv(amounts[2], amounts[7])));\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[2], amounts[7]));\r\n        } else if (amounts[7] == 0 && isUserTakerFeeEnabled(addresses[1])) {\r\n            increaseBalance(addresses[1], addresses[2], safeSub(amounts[2], safeDiv(amounts[2], takerFeeRate)));\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[2], takerFeeRate));\r\n        } else if (amounts[7] > 0 && isUserTakerFeeEnabled(addresses[1])) {\r\n            increaseBalance(addresses[1], addresses[2], safeSub(amounts[2], safeAdd(safeDiv(amounts[2], amounts[7]), safeDiv(amounts[2], takerFeeRate))));\r\n            increaseBalance(feeAddress, addresses[2], safeAdd(safeDiv(amounts[2], amounts[7]), safeDiv(amounts[2], takerFeeRate)));\r\n        } else {\r\n            increaseBalance(addresses[1], addresses[2], amounts[2]);\r\n        }\r\n\r\n        orderFills[orderHash] = safeAdd(orderFills[orderHash], amounts[2]);\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setTakerFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setMakerFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"disableFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[6]\"},{\"name\":\"addresses\",\"type\":\"address[4]\"},{\"name\":\"v\",\"type\":\"uint8[2]\"},{\"name\":\"rs\",\"type\":\"bytes32[4]\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tradesUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setDisableFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"out\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRateMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[9]\"},{\"name\":\"addresses\",\"type\":\"address[4]\"},{\"name\":\"v\",\"type\":\"uint8[2]\"},{\"name\":\"rs\",\"type\":\"bytes32[4]\"}],\"name\":\"tradeWithTips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"invalidateOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTipsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"traded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTips\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tradesLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"toUser\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferTips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TradesLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TradesUnlock\",\"type\":\"event\"}]","ContractName":"NescrowExchangeService","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02170548f00a5228a6bd919a777df9a92babef4bb6b5acce4508d8411fec98ab"}]}