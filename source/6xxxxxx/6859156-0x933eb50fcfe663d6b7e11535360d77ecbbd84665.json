{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ICollectable {\r\n\r\n    function mint(uint32 delegateID, address to) public returns (uint);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract SimpleNonceMinter is Ownable {\r\n\r\n    ICollectable collectable;\r\n    uint32 delegateID;\r\n    mapping(uint => bool) public nonces;\r\n    mapping(address => bool) public signers;\r\n\r\n    constructor(ICollectable _collectable, uint32 _delegateID) public {\r\n        collectable = _collectable;\r\n        delegateID = _delegateID;\r\n    }\r\n\r\n    function setCanSign(address _signer, bool _can) public onlyOwner {\r\n        signers[_signer] = _can;\r\n    }\r\n\r\n    function mint(bytes memory sig, address to, uint nonce, bool add27) public returns (uint) {\r\n        require(!nonces[nonce], \"can only claim once\");\r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(address(this), nonce)));\r\n        require(signers[getSigner(message, sig, add27)], \"must be signed by approved signer\");\r\n        nonces[nonce] = true;\r\n        return collectable.mint(delegateID, to);\r\n    }\r\n\r\n    function getSigner(bytes32 message, bytes memory sig, bool add27) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        if (add27) {\r\n            v += 27;\r\n        }\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65, \"incorrect signature length\");\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_can\",\"type\":\"bool\"}],\"name\":\"setCanSign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"add27\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_collectable\",\"type\":\"address\"},{\"name\":\"_delegateID\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SimpleNonceMinter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a5e5be69c923c701ae6ac8f1f5936af3ae610c680000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f5c530d83438bb34a2389c83c080211a1a011a904f06a198f68053f331ed3ade"}]}