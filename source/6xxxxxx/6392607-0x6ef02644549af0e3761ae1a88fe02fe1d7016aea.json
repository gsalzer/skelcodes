{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* Wall Street Market presents......\r\n\r\n.______    __       __    __   _______      ______  __    __   __  .______        _______      ___      .___  ___.  _______ \r\n|   _  \\  |  |     |  |  |  | |   ____|    /      ||  |  |  | |  | |   _  \\      /  _____|    /   \\     |   \\/   | |   ____|\r\n|  |_)  | |  |     |  |  |  | |  |__      |  ,----'|  |__|  | |  | |  |_)  |    |  |  __     /  ^  \\    |  \\  /  | |  |__   \r\n|   _  <  |  |     |  |  |  | |   __|     |  |     |   __   | |  | |   ___/     |  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|  \r\n|  |_)  | |  `----.|  `--'  | |  |____    |  `----.|  |  |  | |  | |  |         |  |__| |  /  _____  \\  |  |  |  | |  |____ \r\n|______/  |_______| \\______/  |_______|    \\______||__|  |__| |__| | _|          \\______| /__/     \\__\\ |__|  |__| |_______|\r\n                                                                                                                            \r\n(BCHIP)\r\n\r\nwebsite:    https://wallstreetmarket.tk\r\n\r\ndiscord:    https://discord.gg/8AFP9gS\r\n\r\n25% Dividends Fees/Payouts\r\n\r\n5% of Buy In Fee Will Go into Buying Tokens from the contract for \"THE 82\" group until \r\n400,000 tokens have been distributed.  25% Fee will apply for these transactions.\r\n\r\nAfter this the 5% fee will be reserved for use in additional card and lending games using BCHIP tokens.\r\n\r\nReferral Program pays out 33% of Buy-in/Sell Fees to user of masternode link\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract AcceptsExchange {\r\n    BlueChipGame public tokenContract;\r\n\r\n    function AcceptsExchange(address _tokenContract) public {\r\n        tokenContract = BlueChipGame(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\r\n}\r\n\r\n\r\ncontract BlueChipGame {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n      require (msg.sender == tx.origin);\r\n      _;\r\n    }\r\n\r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyActive(){\r\n        \r\n        require(boolContractActive);\r\n        _;\r\n    }\r\n\r\n \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"BlueChipExchange\";\r\n    string public symbol = \"BCHIP\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n\r\n   \r\n    uint256 public totalEthFundRecieved; // total ETH Bond recieved from this contract\r\n    uint256 public totalEthFundCollected; // total ETH Bond collected in this contract\r\n\r\n    // proof of stake (defaults at 25 tokens)\r\n    uint256 public stakingRequirement = 25e18;\r\n\r\n    // ambassador program\r\n    mapping(address => bool) internal ambassadors_;\r\n    uint256 constant internal ambassadorMaxPurchase_ = 2.5 ether;\r\n    uint256 constant internal ambassadorQuota_ = 2.5 ether;\r\n\r\n    uint constant internal total82Tokens = 390148;\r\n\r\n\r\n\r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    mapping(uint => address) internal theGroupofEightyTwo;\r\n    mapping(uint => uint) internal theGroupofEightyTwoAmount;\r\n\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n\r\n    uint8 public dividendFee_ = 20; // 20% dividend fee on each buy and sell\r\n    uint8 public fundFee_ = 0; // 5% bond fund fee on each buy and sell\r\n    uint8 public altFundFee_ = 5; // Fund fee rate on each buy and sell for future game\r\n\r\n    bool boolPay82 = false;\r\n    bool bool82Mode = true;\r\n    bool boolContractActive = true;\r\n\r\n    uint bondFund = 0;\r\n\r\n\r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n\r\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    bool public onlyAmbassadors = true;\r\n\r\n    // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\r\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\r\n\r\n    mapping(address => address) public stickyRef;\r\n\r\n     address public bondFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;   //Bond Fund\r\n     address public altFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;    //Alternate Fund for Future Game\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --\r\n    */\r\n    function BlueChipGame()\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrators[msg.sender] = true;\r\n\r\n    //*  Populate the 82 Mappings \r\n        theGroupofEightyTwo[1] = 0x41fe3738b503cbafd01c1fd8dd66b7fe6ec11b01;\r\n        theGroupofEightyTwo[2] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\r\n        theGroupofEightyTwo[3] = 0xc29a6dd21801e58566df9f003b7011e30724543e;\r\n        theGroupofEightyTwo[4] = 0xc63ea85cc823c440319013d4b30e19b66466642d;\r\n        theGroupofEightyTwo[5] = 0xc6f827796a2e1937fd7f97c4e0a4906c476794f6;\r\n        theGroupofEightyTwo[6] = 0xe74b1ea522b9d558c8e8719c3b1c4a9050b531ca;\r\n        theGroupofEightyTwo[7] = 0x6b90d498062140c607d03fd642377eeaa325703e;\r\n        theGroupofEightyTwo[8] = 0x5f1088110edcba27fc206cdcc326b413b5867361;\r\n        theGroupofEightyTwo[9] = 0xc92fd0e554b12eb10f584819eec2394a9a6f3d1d;\r\n        theGroupofEightyTwo[10] = 0xb62a0ac2338c227748e3ce16d137c6282c9870cf;\r\n        theGroupofEightyTwo[11] = 0x3f6c42409da6faf117095131168949ab81d5947d;\r\n        theGroupofEightyTwo[12] = 0xd54c47b3165508fb5418dbdec59a0d2448eeb3d7;\r\n        theGroupofEightyTwo[13] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\r\n        theGroupofEightyTwo[14] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\r\n        theGroupofEightyTwo[15] = 0x5f5996f9e1960655d6fc00b945fef90672370d9f;\r\n        theGroupofEightyTwo[16] = 0x3825c8ba07166f34ce9a2cd1e08a68b105c82cb9;\r\n        theGroupofEightyTwo[17] = 0x7f3e05b4f258e1c15a0ef49894cffa1d89ceb9d3;\r\n        theGroupofEightyTwo[18] = 0x3191acf877495e5f4e619ec722f6f38839182660;\r\n        theGroupofEightyTwo[19] = 0x14f981ec7b0f59df6e1c56502e272298f221d763;\r\n        theGroupofEightyTwo[20] = 0xae817ec70d8b621bb58a047e63c31445f79e20dc;\r\n        theGroupofEightyTwo[21] = 0xc43af3becac9c810384b69cf061f2d7ec73105c4;\r\n        theGroupofEightyTwo[22] = 0x0743469569ed5cc44a51216a1bf5ad7e7f90f40e;\r\n        theGroupofEightyTwo[23] = 0xff6a4d0ed374ba955048664d6ef5448c6cd1d56a;\r\n        theGroupofEightyTwo[24] = 0x62358a483311b3de29ae987b990e19de6259fa9c;\r\n        theGroupofEightyTwo[25] = 0xa0fea1bcfa32713afdb73b9908f6cb055022e95f;\r\n        theGroupofEightyTwo[26] = 0xb2af816608e1a4d0fb12b81028f32bac76256eba;\r\n        theGroupofEightyTwo[27] = 0x977193d601b364f38ab1a832dbaef69ca7833992;\r\n        theGroupofEightyTwo[28] = 0xed3547f0ed028361685b39cd139aa841df6629ab;\r\n        theGroupofEightyTwo[29] = 0xe40ff298079493cba637d92089e3d1db403974cb;\r\n        theGroupofEightyTwo[30] = 0xae3dc7fa07f9dd030fa56c027e90998ed9fe9d61;\r\n        theGroupofEightyTwo[31] = 0x2dd35e7a6f5fcc28d146c04be641f969f6d1e403;\r\n        theGroupofEightyTwo[32] = 0x2afe21ec5114339922d38546a3be7a0b871d3a0d;\r\n        theGroupofEightyTwo[33] = 0x6696fee394bb224d0154ea6b58737dca827e1960;\r\n        theGroupofEightyTwo[34] = 0xccdf159b1340a35c3567b669c836a88070051314;\r\n        theGroupofEightyTwo[35] = 0x1c3416a34c86f9ddcd05c7828bf5693308d19e0b;\r\n        theGroupofEightyTwo[36] = 0x846dedb19b105edafac2c9410fa2b5e73b596a14;\r\n        theGroupofEightyTwo[37] = 0x3e9294f9b01bc0bcb91413112c75c3225c65d0b3;\r\n        theGroupofEightyTwo[38] = 0x3a5ce61c74343dde474bad4210cccf1dac7b1934;\r\n        theGroupofEightyTwo[39] = 0x38e123f89a7576b2942010ad1f468cc0ea8f9f4b;\r\n        theGroupofEightyTwo[40] = 0xdcd8bad894035b5c554ad450ca84ae6be0b73122;\r\n        theGroupofEightyTwo[41] = 0xcfab320d4379a84fe3736eccf56b09916e35097b;\r\n        theGroupofEightyTwo[42] = 0x12f53c1d7caea0b41010a0e53d89c801ed579b5a;\r\n        theGroupofEightyTwo[43] = 0x5145a296e1bb9d4cf468d6d97d7b6d15700f39ef;\r\n        theGroupofEightyTwo[44] = 0xac707a1b4396a309f4ad01e3da4be607bbf14089;\r\n        theGroupofEightyTwo[45] = 0x38602d1446fe063444b04c3ca5ecde0cba104240;\r\n        theGroupofEightyTwo[46] = 0xc951d3463ebba4e9ec8ddfe1f42bc5895c46ec8f;\r\n        theGroupofEightyTwo[47] = 0x69e566a65d00ad5987359db9b3ced7e1cfe9ac69;\r\n        theGroupofEightyTwo[48] = 0x533b14f6d04ed3c63a68d5e80b7b1f6204fb4213;\r\n        theGroupofEightyTwo[49] = 0x5fa0b03bee5b4e6643a1762df718c0a4a7c1842f;\r\n        theGroupofEightyTwo[50] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\r\n        theGroupofEightyTwo[51] = 0xc371117e0adfafe2a3b7b6ba71b7c0352ca7789d;\r\n        theGroupofEightyTwo[52] = 0xcade49e583bc226f19894458f8e2051289f1ac85;\r\n        theGroupofEightyTwo[53] = 0xe3fc95aba6655619db88b523ab487d5273db484f;\r\n        theGroupofEightyTwo[54] = 0x22e4d1433377a2a18452e74fd4ba9eea01824f7d;\r\n        theGroupofEightyTwo[55] = 0x32ae5eff81881a9a70fcacada5bb1925cabca508;\r\n        theGroupofEightyTwo[56] = 0xb864d177c291368b52a63a95eeff36e3731303c1;\r\n        theGroupofEightyTwo[57] = 0x46091f77b224576e224796de5c50e8120ad7d764;\r\n        theGroupofEightyTwo[58] = 0xc6407dd687a179aa11781b8a1e416bd0515923c2;\r\n        theGroupofEightyTwo[59] = 0x2502ce06dcb61ddf5136171768dfc08d41db0a75;\r\n        theGroupofEightyTwo[60] = 0x6b80ca9c66cdcecc39893993df117082cc32bb16;\r\n        theGroupofEightyTwo[61] = 0xa511ddba25ffd74f19a400fa581a15b5044855ce;\r\n        theGroupofEightyTwo[62] = 0xce81d90ae52d34588a95db59b89948c8fec487ce;\r\n        theGroupofEightyTwo[63] = 0x6d60dbf559bbf0969002f19979cad909c2644dad;\r\n        theGroupofEightyTwo[64] = 0x45101255a2bcad3175e6fda4020a9b77e6353a9a;\r\n        theGroupofEightyTwo[65] = 0xe9078d7539e5eac3b47801a6ecea8a9ec8f59375;\r\n        theGroupofEightyTwo[66] = 0x41a21b264f9ebf6cf571d4543a5b3ab1c6bed98c;\r\n        theGroupofEightyTwo[67] = 0x471e8d970c30e61403186b6f245364ae790d14c3;\r\n        theGroupofEightyTwo[68] = 0x6eb7f74ff7f57f7ba45ca71712bccef0588d8f0d;\r\n        theGroupofEightyTwo[69] = 0xe6d6bc079d76dc70fcec5de84721c7b0074d164b;\r\n        theGroupofEightyTwo[70] = 0x3ec5972c2177a08fd5e5f606f19ab262d28ceffe;\r\n        theGroupofEightyTwo[71] = 0x108b87a18877104e07bd870af70dfc2487447262;\r\n        theGroupofEightyTwo[72] = 0x3129354440e4639d2b809ca03d4ccc6277ac8167;\r\n        theGroupofEightyTwo[73] = 0x21572b6a855ee8b1392ed1003ecf3474fa83de3e;\r\n        theGroupofEightyTwo[74] = 0x75ab98f33a7a60c4953cb907747b498e0ee8edf7;\r\n        theGroupofEightyTwo[75] = 0x0fe6967f9a5bb235fc74a63e3f3fc5853c55c083;\r\n        theGroupofEightyTwo[76] = 0x49545640b9f3266d13cce842b298d450c0f8d776;\r\n        theGroupofEightyTwo[77] = 0x9327128ead2495f60d41d3933825ffd8080d4d42;\r\n        theGroupofEightyTwo[78] = 0x82b4e53a7d6bf6c72cc57f8d70dae90a34f0870f;\r\n        theGroupofEightyTwo[79] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\r\n        theGroupofEightyTwo[80] = 0x3749d556c167dd73d536a6faaf0bb4ace8f7dab9;\r\n        theGroupofEightyTwo[81] = 0x3039f6857071692b540d9e1e759a0add93af3fed;\r\n        theGroupofEightyTwo[82] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\r\n        theGroupofEightyTwo[83] = 0x13015632fa722C12E862fF38c8cF2354cbF26c47;   //This one is for testing\r\n\r\n\r\n        theGroupofEightyTwoAmount[1] = 100000;\r\n        theGroupofEightyTwoAmount[2] = 30000;\r\n        theGroupofEightyTwoAmount[3] = 24400;\r\n        theGroupofEightyTwoAmount[4] = 21111;\r\n        theGroupofEightyTwoAmount[5] = 14200;\r\n        theGroupofEightyTwoAmount[6] = 13788;\r\n        theGroupofEightyTwoAmount[7] = 12003;\r\n        theGroupofEightyTwoAmount[8] = 11000;\r\n        theGroupofEightyTwoAmount[9] = 11000;\r\n        theGroupofEightyTwoAmount[10] = 8800;\r\n        theGroupofEightyTwoAmount[11] = 7000;\r\n        theGroupofEightyTwoAmount[12] = 7000;\r\n        theGroupofEightyTwoAmount[13] = 6000;\r\n        theGroupofEightyTwoAmount[14] = 5400;\r\n        theGroupofEightyTwoAmount[15] = 5301;\r\n        theGroupofEightyTwoAmount[16] = 5110;\r\n        theGroupofEightyTwoAmount[17] = 5018;\r\n        theGroupofEightyTwoAmount[18] = 5000;\r\n        theGroupofEightyTwoAmount[19] = 5000;\r\n        theGroupofEightyTwoAmount[20] = 5000;\r\n        theGroupofEightyTwoAmount[21] = 5000;\r\n        theGroupofEightyTwoAmount[22] = 4400;\r\n        theGroupofEightyTwoAmount[23] = 4146;\r\n        theGroupofEightyTwoAmount[24] = 4086;\r\n        theGroupofEightyTwoAmount[25] = 4000;\r\n        theGroupofEightyTwoAmount[26] = 4000;\r\n        theGroupofEightyTwoAmount[27] = 3500;\r\n        theGroupofEightyTwoAmount[28] = 3216;\r\n        theGroupofEightyTwoAmount[29] = 3200;\r\n        theGroupofEightyTwoAmount[30] = 3183;\r\n        theGroupofEightyTwoAmount[31] = 3100;\r\n        theGroupofEightyTwoAmount[32] = 3001;\r\n        theGroupofEightyTwoAmount[33] = 2205;\r\n        theGroupofEightyTwoAmount[34] = 2036;\r\n        theGroupofEightyTwoAmount[35] = 2000;\r\n        theGroupofEightyTwoAmount[36] = 2000;\r\n        theGroupofEightyTwoAmount[37] = 1632;\r\n        theGroupofEightyTwoAmount[38] = 1600;\r\n        theGroupofEightyTwoAmount[39] = 1500;\r\n        theGroupofEightyTwoAmount[40] = 1500;\r\n        theGroupofEightyTwoAmount[41] = 1478;\r\n        theGroupofEightyTwoAmount[42] = 1300;\r\n        theGroupofEightyTwoAmount[43] = 1200;\r\n        theGroupofEightyTwoAmount[44] = 1127;\r\n        theGroupofEightyTwoAmount[45] = 1050;\r\n        theGroupofEightyTwoAmount[46] = 1028;\r\n        theGroupofEightyTwoAmount[47] = 1011;\r\n        theGroupofEightyTwoAmount[48] = 1000;\r\n        theGroupofEightyTwoAmount[49] = 1000;\r\n        theGroupofEightyTwoAmount[50] = 1000;\r\n        theGroupofEightyTwoAmount[51] = 1000;\r\n        theGroupofEightyTwoAmount[52] = 1000;\r\n        theGroupofEightyTwoAmount[53] = 1000;\r\n        theGroupofEightyTwoAmount[54] = 983;\r\n        theGroupofEightyTwoAmount[55] = 980;\r\n        theGroupofEightyTwoAmount[56] = 960;\r\n        theGroupofEightyTwoAmount[57] = 900;\r\n        theGroupofEightyTwoAmount[58] = 900;\r\n        theGroupofEightyTwoAmount[59] = 839;\r\n        theGroupofEightyTwoAmount[60] = 800;\r\n        theGroupofEightyTwoAmount[61] = 800;\r\n        theGroupofEightyTwoAmount[62] = 800;\r\n        theGroupofEightyTwoAmount[63] = 798;\r\n        theGroupofEightyTwoAmount[64] = 750;\r\n        theGroupofEightyTwoAmount[65] = 590;\r\n        theGroupofEightyTwoAmount[66] = 500;\r\n        theGroupofEightyTwoAmount[67] = 500;\r\n        theGroupofEightyTwoAmount[68] = 500;\r\n        theGroupofEightyTwoAmount[69] = 500;\r\n        theGroupofEightyTwoAmount[70] = 415;\r\n        theGroupofEightyTwoAmount[71] = 388;\r\n        theGroupofEightyTwoAmount[72] = 380;\r\n        theGroupofEightyTwoAmount[73] = 300;\r\n        theGroupofEightyTwoAmount[74] = 300;\r\n        theGroupofEightyTwoAmount[75] = 170;\r\n        theGroupofEightyTwoAmount[76] = 164;\r\n        theGroupofEightyTwoAmount[77] = 142;\r\n        theGroupofEightyTwoAmount[78] = 70;\r\n        theGroupofEightyTwoAmount[79] = 69;\r\n        theGroupofEightyTwoAmount[80] = 16;\r\n        theGroupofEightyTwoAmount[81] = 5;\r\n        theGroupofEightyTwoAmount[82] = 1;\r\n        theGroupofEightyTwoAmount[83] = 1;  //This one is for testing\r\n\r\n    }\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        onlyActive()\r\n        returns(uint256)\r\n    {\r\n        \r\n        require(tx.gasprice <= 0.05 szabo);\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n\r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n        payable\r\n        public\r\n        onlyActive()\r\n    {\r\n        require(tx.gasprice <= 0.05 szabo);\r\n\r\n        if (boolPay82) {  //Add to the Eth Fund if boolPay82 set to true\r\n            \r\n           totalEthFundCollected = SafeMath.add(totalEthFundCollected, msg.value);\r\n\r\n        } else{\r\n            purchaseTokens(msg.value, 0x0);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    function buyTokensfor82()\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        //Periodically Use the Bond Fund to buy tokens and distribute to the Group of 82\r\n        if(bool82Mode) \r\n        {\r\n            uint counter = 83;\r\n            uint _ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\r\n\r\n            totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, _ethToPay);\r\n\r\n            while (counter > 0) { \r\n\r\n                uint _distAmountLocal = SafeMath.div(SafeMath.mul(_ethToPay, theGroupofEightyTwoAmount[counter]),total82Tokens);\r\n\r\n                purchaseTokensfor82(_distAmountLocal, 0x0, counter);\r\n               \r\n                counter = counter - 1;\r\n            } \r\n           \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sends Bondf Fund ether to the bond contract\r\n     * \r\n     */\r\n    function payFund() payable public \r\n    onlyAdministrator()\r\n    {\r\n        \r\n        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\r\n        require(ethToPay > 1);\r\n\r\n        uint256 _altEthToPay = SafeMath.div(SafeMath.mul(ethToPay,altFundFee_),100);\r\n      \r\n        uint256 _bondEthToPay = SafeMath.div(SafeMath.mul(ethToPay,fundFee_),100);\r\n \r\n\r\n        totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\r\n\r\n        if(_bondEthToPay > 0){\r\n            if(!bondFundAddress.call.value(_bondEthToPay).gas(400000)()) {\r\n                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _bondEthToPay);\r\n            }\r\n        }\r\n\r\n        if(_altEthToPay > 0){\r\n            if(!altFundAddress.call.value(_altEthToPay).gas(400000)()) {\r\n                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _altEthToPay);\r\n            }\r\n        }\r\n      \r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n\r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n\r\n        // fire event\r\n        onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n\r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\r\n        \r\n        uint256 _refPayout = _dividends / 3;\r\n        _dividends = SafeMath.sub(_dividends, _refPayout);\r\n        (_dividends,) = handleRef(stickyRef[msg.sender], _refPayout, _dividends, 0);\r\n\r\n        // Take out dividends and then _fundPayout\r\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n\r\n        // Add ethereum to send to fund\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        // fire event\r\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * REMEMBER THIS IS 0% TRANSFER FEE\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n\r\n        // fire event\r\n        Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Transfer token to a specified address and forward the data to recipient\r\n    * ERC-677 standard\r\n    * https://github.com/ethereum/EIPs/issues/677\r\n    * @param _to    Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\r\n      require(_to != address(0));\r\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\r\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\r\n\r\n      if (isContract(_to)) {\r\n        AcceptsExchange receiver = AcceptsExchange(_to);\r\n        require(receiver.tokenFallback(msg.sender, _value, _data));\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n\r\n /**\r\n    * Transfer token to a specified address and forward the data to recipient\r\n    * ERC-677 standard\r\n    * https://github.com/ethereum/EIPs/issues/677\r\n    * @param _to    Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data  Transaction metadata.\r\n    * We add ability to track the initial sender so we pass that to determine the bond holder\r\n    */\r\n    function transferAndCallExpanded(address _to, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool) {\r\n      require(_to != address(0));\r\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\r\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\r\n\r\n      if (isContract(_to)) {\r\n        AcceptsExchange receiver = AcceptsExchange(_to);\r\n        require(receiver.tokenFallbackExpanded(msg.sender, _value, _data, msg.sender, _referrer));\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Additional check that the game address we are sending tokens to is a contract\r\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n     */\r\n     function isContract(address _addr) private constant returns (bool is_contract) {\r\n       // retrieve the size of the code on target address, this needs assembly\r\n       uint length;\r\n       assembly { length := extcodesize(_addr) }\r\n       return length > 0;\r\n     }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    //function disableInitialStage()\r\n    //    onlyAdministrator()\r\n    //    public\r\n    //{\r\n    //    onlyAmbassadors = false;\r\n    //}\r\n\r\n    \r\n  \r\n    function setBondFundAddress(address _newBondFundAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        bondFundAddress = _newBondFundAddress;\r\n    }\r\n\r\n    \r\n    function setAltFundAddress(address _newAltFundAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        altFundAddress = _newAltFundAddress;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set fees/rates\r\n     */\r\n    function setFeeRates(uint8 _newDivRate, uint8 _newFundFee, uint8 _newAltRate)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        require(_newDivRate <= 25);\r\n        require(_newAltRate + _newFundFee <= 5);\r\n\r\n        dividendFee_ = _newDivRate;\r\n        fundFee_ = _newFundFee;\r\n        altFundFee_ = _newAltRate;\r\n    }\r\n\r\n\r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setAdministrator(address _identifier, bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Add or remove game contract, which can accept Wall Street Market tokens\r\n     */\r\n    function setCanAcceptTokens(address _address, bool _value)\r\n      onlyAdministrator()\r\n      public\r\n    {\r\n        canAcceptTokens_[_address] = _value;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n\r\n      /**\r\n     * Set if we will pay the 82 group with funds in\r\n     */\r\n    function setBool82(bool _bool)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        boolPay82 = _bool;\r\n    }\r\n\r\n\r\n      /**\r\n     *Set if we will use 5% fund to purchase new tokens for 82 group\r\n     */\r\n    function set82Mode(bool _bool)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        bool82Mode = _bool;\r\n    }\r\n\r\n     /**\r\n     *Set flag for contract to accept ether\r\n     */\r\n    function setContractActive(bool _bool)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        boolContractActive = _bool;\r\n    }\r\n\r\n    \r\n\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n \r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\r\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\r\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\r\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_ + altFundFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to show ether waiting to be send to fund in contract\r\n     */\r\n    function etherToSendFund()\r\n        public\r\n        view\r\n        returns(uint256) {\r\n        return SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\r\n    }\r\n\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\r\n    // Make sure we will send back excess if user sends more then 5 ether before 10 ETH in contract\r\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\r\n      notContract()// no contracts allowed\r\n      internal\r\n      returns(uint256) {\r\n\r\n      uint256 purchaseEthereum = _incomingEthereum;\r\n      uint256 excess;\r\n      if(purchaseEthereum > 2.5 ether) { // check if the transaction is over 2.5 ether\r\n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 10 ether) { // if so check the contract is less then 100 ether\r\n              purchaseEthereum = 2.5 ether;\r\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\r\n          }\r\n      }\r\n\r\n      purchaseTokens(purchaseEthereum, _referredBy);\r\n\r\n      if (excess > 0) {\r\n        msg.sender.transfer(excess);\r\n      }\r\n    }\r\n\r\n    function handleRef(address _ref, uint _referralBonus, uint _currentDividends, uint _currentFee) internal returns (uint, uint){\r\n        uint _dividends = _currentDividends;\r\n        uint _fee = _currentFee;\r\n        address _referredBy = stickyRef[msg.sender];\r\n        if (_referredBy == address(0x0)){\r\n            _referredBy = _ref;\r\n        }\r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != msg.sender &&\r\n\r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            if (stickyRef[msg.sender] == address(0x0)){\r\n                stickyRef[msg.sender] = _referredBy;\r\n            }\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus/2);\r\n            address currentRef = stickyRef[_referredBy];\r\n            if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\r\n                referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*3);\r\n                currentRef = stickyRef[currentRef];\r\n                if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\r\n                    referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*2);\r\n                }\r\n                else{\r\n                    _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2 - (_referralBonus/10)*3);\r\n                    _fee = _dividends * magnitude;\r\n                }\r\n            }\r\n            else{\r\n                _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2);\r\n                _fee = _dividends * magnitude;\r\n            }\r\n            \r\n            \r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        return (_dividends, _fee);\r\n    }\r\n\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n       \r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _fee;\r\n        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n\r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n\r\n\r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[msg.sender] += _updatedPayouts;\r\n\r\n        // fire event\r\n        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n\r\n    //*Seperate function to handle internal purchases for the 82 Group\r\n    function purchaseTokensfor82(uint256 _incomingEthereum, address _referredBy, uint _playerIndex)\r\n       \r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _fee;\r\n        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n\r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n\r\n\r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]] = SafeMath.add(tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[theGroupofEightyTwo[_playerIndex]] += _updatedPayouts;\r\n\r\n        // fire event\r\n        onTokenPurchase(theGroupofEightyTwo[_playerIndex], _incomingEthereum, _amountOfTokens, _referredBy);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAltFundAddress\",\"type\":\"address\"}],\"name\":\"setAltFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stickyRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToSendFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"set82Mode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"transferAndCallExpanded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDivRate\",\"type\":\"uint8\"},{\"name\":\"_newFundFee\",\"type\":\"uint8\"},{\"name\":\"_newAltRate\",\"type\":\"uint8\"}],\"name\":\"setFeeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensfor82\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundRecieved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBondFundAddress\",\"type\":\"address\"}],\"name\":\"setBondFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altFundFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBool82\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BlueChipGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2708edde0564696738c788562577212e625360df7bdd20b011792dfa99c9488f"}]}