{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017â€“2018, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract UnlimitedAllowanceToken is StandardToken {\r\n\r\n    uint internal constant MAX_UINT = 2**256 - 1;\r\n    \r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance, and to add revert reasons.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint allowance = allowed[_from][msg.sender];\r\n        require(_value <= balances[_from], \"insufficient balance\");\r\n        require(_value <= allowance, \"insufficient allowance\");\r\n        require(_to != address(0), \"token burn not allowed\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (allowance < MAX_UINT) {\r\n            allowed[_from][msg.sender] = allowance.sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer token for a specified address, modified to add revert reasons.\r\n    /// @param _to The address to transfer to.\r\n    /// @param _value The amount to be transferred.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value)\r\n        public \r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[msg.sender], \"insufficient balance\");\r\n        require(_to != address(0), \"token burn not allowed\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BZRxToken is UnlimitedAllowanceToken, DetailedERC20, Ownable {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event LockingFinished();\r\n\r\n    bool public mintingFinished = false;\r\n    bool public lockingFinished = false;\r\n\r\n    mapping (address => bool) public minters;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier isLocked() {\r\n        require(!lockingFinished);\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n        DetailedERC20(\r\n            \"bZx Protocol Token\",\r\n            \"BZRX\", \r\n            18\r\n        )\r\n    {\r\n        minters[msg.sender] = true;\r\n    }\r\n\r\n    /// @dev ERC20 transferFrom function\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (lockingFinished || minters[msg.sender]) {\r\n            return super.transferFrom(\r\n                _from,\r\n                _to,\r\n                _value\r\n            );\r\n        }\r\n\r\n        revert(\"this token is locked for transfers\");\r\n    }\r\n\r\n    /// @dev ERC20 transfer function\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool)\r\n    {\r\n        if (lockingFinished || minters[msg.sender]) {\r\n            return super.transfer(\r\n                _to,\r\n                _value\r\n            );\r\n        }\r\n\r\n        revert(\"this token is locked for transfers\");\r\n    }\r\n\r\n    /// @dev Allows minter to initiate a transfer on behalf of another spender\r\n    /// @param _spender Minter with permission to spend.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function minterTransferFrom(\r\n        address _spender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        hasMintPermission\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        require(canTransfer(\r\n            _spender,\r\n            _from,\r\n            _value),\r\n            \"canTransfer is false\");\r\n\r\n        require(_to != address(0), \"token burn not allowed\");\r\n\r\n        uint allowance = allowed[_from][_spender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (allowance < MAX_UINT) {\r\n            allowed[_from][_spender] = allowance.sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount)\r\n        public\r\n        hasMintPermission\r\n        canMint\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"token burn not allowed\");\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() \r\n        public \r\n        onlyOwner \r\n        canMint \r\n    {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop locking token.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishLocking() \r\n        public \r\n        onlyOwner \r\n        isLocked \r\n    {\r\n        lockingFinished = true;\r\n        emit LockingFinished();\r\n    }\r\n\r\n    /**\r\n    * @dev Function to add minter address.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function addMinter(\r\n        address _minter) \r\n        public \r\n        onlyOwner \r\n        canMint \r\n    {\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to remove minter address.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function removeMinter(\r\n        address _minter) \r\n        public \r\n        onlyOwner \r\n        canMint \r\n    {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check balance and allowance for a spender.\r\n    * @return True transfer will succeed based on balance and allowance.\r\n    */\r\n    function canTransfer(\r\n        address _spender,\r\n        address _from,\r\n        uint256 _value)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (\r\n            balances[_from] >= _value && \r\n            (_spender == _from || allowed[_from][_spender] >= _value)\r\n        );\r\n    }\r\n}\r\n\r\ninterface WETHInterface {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ncontract BZRxTokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant tokenPrice = 73 * 10**12; // 0.000073 ETH\r\n\r\n    struct TokenPurchases {\r\n        uint totalETH;\r\n        uint totalTokens;\r\n        uint totalTokenBonus;\r\n    }\r\n\r\n    event BonusChanged(uint oldBonus, uint newBonus);\r\n    event TokenPurchase(address indexed buyer, uint ethAmount, uint tokensReceived);\r\n    \r\n    event SaleOpened(uint bonusMultiplier);\r\n    event SaleClosed(uint bonusMultiplier);\r\n    \r\n    bool public saleClosed = true;\r\n\r\n    address public bZRxTokenContractAddress;    // BZRX Token\r\n    address public bZxVaultAddress;             // bZx Vault\r\n    address public wethContractAddress;         // WETH Token\r\n\r\n    // The current token bonus offered to purchasers (example: 110 == 10% bonus)\r\n    uint public bonusMultiplier;\r\n\r\n    uint public ethRaised;\r\n\r\n    address[] public purchasers;\r\n    mapping (address => TokenPurchases) public purchases;\r\n\r\n    bool public whitelistEnforced = false;\r\n    mapping (address => uint) public whitelist;\r\n\r\n    modifier saleOpen() {\r\n        require(!saleClosed, \"sale is closed\");\r\n        _;\r\n    }\r\n\r\n    modifier whitelisted(address user, uint value) {\r\n        require(canPurchaseAmount(user, value), \"not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _bZRxTokenContractAddress,\r\n        address _bZxVaultAddress,\r\n        address _wethContractAddress,\r\n        uint _bonusMultiplier,\r\n        uint _previousAmountRaised)\r\n        public\r\n    {\r\n        require(_bonusMultiplier > 100);\r\n        \r\n        bZRxTokenContractAddress = _bZRxTokenContractAddress;\r\n        bZxVaultAddress = _bZxVaultAddress;\r\n        wethContractAddress = _wethContractAddress;\r\n        bonusMultiplier = _bonusMultiplier;\r\n        ethRaised = _previousAmountRaised;\r\n    }\r\n\r\n    function()  \r\n        public\r\n        payable \r\n    {\r\n        if (msg.sender != wethContractAddress && msg.sender != owner)\r\n            buyToken();\r\n    }\r\n\r\n    function buyToken()\r\n        public\r\n        payable \r\n        saleOpen\r\n        whitelisted(msg.sender, msg.value)\r\n        returns (bool)\r\n    {\r\n        require(msg.value > 0, \"no ether sent\");\r\n        \r\n        ethRaised += msg.value;\r\n\r\n        uint tokenAmount = msg.value                        // amount of ETH sent\r\n                            .mul(10**18).div(tokenPrice);   // fixed ETH price per token (0.000073 ETH)\r\n\r\n        uint tokenAmountAndBonus = tokenAmount\r\n                                        .mul(bonusMultiplier).div(100);\r\n\r\n        TokenPurchases storage purchase = purchases[msg.sender];\r\n        \r\n        if (purchase.totalETH == 0) {\r\n            purchasers.push(msg.sender);\r\n        }\r\n        \r\n        purchase.totalETH += msg.value;\r\n        purchase.totalTokens += tokenAmountAndBonus;\r\n        purchase.totalTokenBonus += tokenAmountAndBonus.sub(tokenAmount);\r\n\r\n        emit TokenPurchase(msg.sender, msg.value, tokenAmountAndBonus);\r\n\r\n        return BZRxToken(bZRxTokenContractAddress).mint(\r\n            msg.sender,\r\n            tokenAmountAndBonus\r\n        );\r\n    }\r\n\r\n    // conforms to ERC20 transferFrom function for BZRX token support\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        saleOpen\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == bZxVaultAddress, \"only the bZx vault can call this function\");\r\n        \r\n        if (BZRxToken(bZRxTokenContractAddress).canTransfer(msg.sender, _from, _value)) {\r\n            return BZRxToken(bZRxTokenContractAddress).minterTransferFrom(\r\n                msg.sender,\r\n                _from,\r\n                _to,\r\n                _value\r\n            );\r\n        } else {\r\n            uint wethValue = _value                             // amount of BZRX\r\n                                .mul(tokenPrice).div(10**18);   // fixed ETH price per token (0.000073 ETH)\r\n\r\n            require(canPurchaseAmount(_from, wethValue), \"not whitelisted\");\r\n\r\n            require(StandardToken(wethContractAddress).transferFrom(\r\n                _from,\r\n                this,\r\n                wethValue\r\n            ), \"weth transfer failed\");\r\n\r\n            ethRaised += wethValue;\r\n\r\n            TokenPurchases storage purchase = purchases[_from];\r\n\r\n            if (purchase.totalETH == 0) {\r\n                purchasers.push(_from);\r\n            }\r\n\r\n            purchase.totalETH += wethValue;\r\n            purchase.totalTokens += _value;\r\n\r\n            return BZRxToken(bZRxTokenContractAddress).mint(\r\n                _to,\r\n                _value\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to close the token sale for this contract.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function closeSale(\r\n        bool _closed) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        saleClosed = _closed;\r\n\r\n        if (_closed)\r\n            emit SaleClosed(bonusMultiplier);\r\n        else\r\n            emit SaleOpened(bonusMultiplier);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeBZRxTokenContract(\r\n        address _bZRxTokenContractAddress) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        bZRxTokenContractAddress = _bZRxTokenContractAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeBZxVault(\r\n        address _bZxVaultAddress) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        bZxVaultAddress = _bZxVaultAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeWethContract(\r\n        address _wethContractAddress) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        wethContractAddress = _wethContractAddress;\r\n        return true;\r\n    }\r\n\r\n    function changeBonusMultiplier(\r\n        uint _newBonusMultiplier) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        require(bonusMultiplier != _newBonusMultiplier && _newBonusMultiplier > 100);\r\n        emit BonusChanged(bonusMultiplier, _newBonusMultiplier);\r\n        bonusMultiplier = _newBonusMultiplier;\r\n        return true;\r\n    }\r\n\r\n    function unwrapEth() \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        uint balance = StandardToken(wethContractAddress).balanceOf.gas(4999)(this);\r\n        if (balance == 0)\r\n            return false;\r\n\r\n        WETHInterface(wethContractAddress).withdraw(balance);\r\n        return true;\r\n    }\r\n\r\n    function transferEther(\r\n        address _to,\r\n        uint _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint amount = _value;\r\n        if (amount > address(this).balance) {\r\n            amount = address(this).balance;\r\n        }\r\n\r\n        return (_to.send(amount));\r\n    }\r\n\r\n    function transferToken(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint balance = StandardToken(_tokenAddress).balanceOf.gas(4999)(this);\r\n        if (_value > balance) {\r\n            return StandardToken(_tokenAddress).transfer(\r\n                _to,\r\n                balance\r\n            );\r\n        } else {\r\n            return StandardToken(_tokenAddress).transfer(\r\n                _to,\r\n                _value\r\n            );\r\n        }\r\n    }\r\n\r\n    function enforceWhitelist(\r\n        bool _isEnforced) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        whitelistEnforced = _isEnforced;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setWhitelist(\r\n        address[] _users,\r\n        uint[] _values) \r\n        public \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        require(_users.length == _values.length, \"users and values count mismatch\");\r\n        \r\n        for (uint i=0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = _values[i];\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function canPurchaseAmount(\r\n        address _user,\r\n        uint _value)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (!whitelistEnforced || (whitelist[_user] > 0 && purchases[_user].totalETH.add(_value) <= whitelist[_user])) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bZxVaultAddress\",\"type\":\"address\"}],\"name\":\"changeBZxVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wethContractAddress\",\"type\":\"address\"}],\"name\":\"changeWethContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZRxTokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeBonusMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closed\",\"type\":\"bool\"}],\"name\":\"closeSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isEnforced\",\"type\":\"bool\"}],\"name\":\"enforceWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"totalETH\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"name\":\"totalTokenBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistEnforced\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZxVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bZRxTokenContractAddress\",\"type\":\"address\"}],\"name\":\"changeBZRxTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unwrapEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bZRxTokenContractAddress\",\"type\":\"address\"},{\"name\":\"_bZxVaultAddress\",\"type\":\"address\"},{\"name\":\"_wethContractAddress\",\"type\":\"address\"},{\"name\":\"_bonusMultiplier\",\"type\":\"uint256\"},{\"name\":\"_previousAmountRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"BonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"SaleOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"SaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BZRxTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c74cff0376fb4031cd7492cd6db2d66c3f2c6b90000000000000000000000007f9ef329fdc33b35985885f360de2f01d476bd70000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000010e418bd283f50000","Library":"","SwarmSource":"bzzr://b052e9d439bcbc9bd40355f63215f785f9c0533ce8c6d4ccad202ac1e4ee968b"}]}