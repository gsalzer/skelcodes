{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    ERC20[] public tokens;\r\n\r\n    function tokensCount() public view returns(uint256);\r\n\r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n\r\n    function disableBundling() public;\r\n    function enableBundling() public;\r\n}\r\n\r\n// File: contracts/interface/IMultiToken.sol\r\n\r\ncontract IMultiToken is IBasicMultiToken {\r\n    event Update();\r\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\r\n\r\n    mapping(address => uint256) public weights;\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\r\n\r\n    function disableChanges() public;\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function isContract(address addr) internal view returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(addr), 0)\r\n        }\r\n    }\r\n\r\n    function handleReturnBool() internal pure returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            if eq(returndatasize(), 32) { // not a std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            if gt(returndatasize(), 32) { // std erc20\r\n                returndatacopy(0, 64, 32)\r\n                result := mload(0)\r\n            }\r\n            if lt(returndatasize(), 32) { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(address _token, address _to, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmTransferFrom(address _token, address _from, address _to, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _from, _to, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmApprove(address _token, address _spender, uint256 _value) internal returns(bool) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"approve(address,uint256)\")), _spender, _value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    //\r\n\r\n    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\r\n        if (_value > 0) {\r\n            uint256 balance = _token.balanceOf(this);\r\n            asmTransfer(_token, _to, _value);\r\n            require(_token.balanceOf(this) == balance.sub(_value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\r\n        if (_value > 0) {\r\n            uint256 toBalance = _token.balanceOf(_to);\r\n            asmTransferFrom(_token, _from, _to, _value);\r\n            require(_token.balanceOf(_to) == toBalance.add(_value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    //\r\n\r\n    function asmName(address _token) internal view returns(bytes32) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"name()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n\r\n    function asmSymbol(address _token) internal view returns(bytes32) {\r\n        require(isContract(_token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_token.call(bytes4(keccak256(\"symbol()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/registry/MultiChanger.sol\r\n\r\ncontract IEtherToken is ERC20 {\r\n    function deposit() public payable;\r\n    function withdraw(uint256 _amount) public;\r\n}\r\n\r\n\r\ncontract IBancorNetwork {\r\n    function convert(\r\n        address[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn\r\n    ) \r\n        public\r\n        payable\r\n        returns(uint256);\r\n\r\n    function claimAndConvert(\r\n        address[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn\r\n    ) \r\n        public\r\n        payable\r\n        returns(uint256);\r\n}\r\n\r\n\r\ncontract IKyberNetworkProxy {\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n}\r\n\r\n\r\ncontract MultiChanger is CanReclaimToken {\r\n    using SafeMath for uint256;\r\n    using CheckedERC20 for ERC20;\r\n\r\n    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns (bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                add(d, dataOffset),\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n    }\r\n\r\n    function change(bytes _callDatas, uint[] _starts) public payable { // _starts should include 0 and _callDatas.length\r\n        for (uint i = 0; i < _starts.length - 1; i++) {\r\n            require(externalCall(this, 0, _callDatas, _starts[i], _starts[i + 1] - _starts[i]));\r\n        }\r\n    }\r\n\r\n    function sendEthValue(address _target, bytes _data, uint256 _value) external {\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_target.call.value(_value)(_data));\r\n    }\r\n\r\n    function sendEthProportion(address _target, bytes _data, uint256 _mul, uint256 _div) external {\r\n        uint256 value = address(this).balance.mul(_mul).div(_div);\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_target.call.value(value)(_data));\r\n    }\r\n\r\n    function approveTokenAmount(address _target, bytes _data, ERC20 _fromToken, uint256 _amount) external {\r\n        if (_fromToken.allowance(this, _target) != 0) {\r\n            _fromToken.asmApprove(_target, 0);\r\n        }\r\n        _fromToken.asmApprove(_target, _amount);\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_target.call(_data));\r\n    }\r\n\r\n    function approveTokenProportion(address _target, bytes _data, ERC20 _fromToken, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);\r\n        if (_fromToken.allowance(this, _target) != 0) {\r\n            _fromToken.asmApprove(_target, 0);\r\n        }\r\n        _fromToken.asmApprove(_target, amount);\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_target.call(_data));\r\n    }\r\n\r\n    function transferTokenAmount(address _target, bytes _data, ERC20 _fromToken, uint256 _amount) external {\r\n        _fromToken.asmTransfer(_target, _amount);\r\n        if (_target != address(0)) {\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            require(_target.call(_data));\r\n        }\r\n    }\r\n\r\n    function transferTokenProportion(address _target, bytes _data, ERC20 _fromToken, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);\r\n        _fromToken.asmTransfer(_target, amount);\r\n        if (_target != address(0)) {\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            require(_target.call(_data));\r\n        }\r\n    }\r\n\r\n    // Multitoken\r\n\r\n    function multitokenChangeAmount(IMultiToken _mtkn, ERC20 _fromToken, ERC20 _toToken, uint256 _minReturn, uint256 _amount) external {\r\n        if (_fromToken.allowance(this, _mtkn) == 0) {\r\n            _fromToken.asmApprove(_mtkn, uint256(-1));\r\n        }\r\n        _mtkn.change(_fromToken, _toToken, _amount, _minReturn);\r\n    }\r\n\r\n    function multitokenChangeProportion(IMultiToken _mtkn, ERC20 _fromToken, ERC20 _toToken, uint256 _minReturn, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);\r\n        this.multitokenChangeAmount(_mtkn, _fromToken, _toToken, _minReturn, amount);\r\n    }\r\n\r\n    // Ether token\r\n\r\n    function withdrawEtherTokenAmount(IEtherToken _etherToken, uint256 _amount) external {\r\n        _etherToken.withdraw(_amount);\r\n    }\r\n\r\n    function withdrawEtherTokenProportion(IEtherToken _etherToken, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = _etherToken.balanceOf(this).mul(_mul).div(_div);\r\n        _etherToken.withdraw(amount);\r\n    }\r\n\r\n    // Bancor Network\r\n\r\n    function bancorSendEthValue(IBancorNetwork _bancor, address[] _path, uint256 _value) external {\r\n        _bancor.convert.value(_value)(_path, _value, 1);\r\n    }\r\n\r\n    function bancorSendEthProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {\r\n        uint256 value = address(this).balance.mul(_mul).div(_div);\r\n        _bancor.convert.value(value)(_path, value, 1);\r\n    }\r\n\r\n    function bancorApproveTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {\r\n        if (ERC20(_path[0]).allowance(this, _bancor) == 0) {\r\n            ERC20(_path[0]).asmApprove(_bancor, uint256(-1));\r\n        }\r\n        _bancor.claimAndConvert(_path, _amount, 1);\r\n    }\r\n\r\n    function bancorApproveTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = ERC20(_path[0]).balanceOf(this).mul(_mul).div(_div);\r\n        if (ERC20(_path[0]).allowance(this, _bancor) == 0) {\r\n            ERC20(_path[0]).asmApprove(_bancor, uint256(-1));\r\n        }\r\n        _bancor.claimAndConvert(_path, amount, 1);\r\n    }\r\n\r\n    function bancorTransferTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {\r\n        ERC20(_path[0]).asmTransfer(_bancor, _amount);\r\n        _bancor.convert(_path, _amount, 1);\r\n    }\r\n\r\n    function bancorTransferTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = ERC20(_path[0]).balanceOf(this).mul(_mul).div(_div);\r\n        ERC20(_path[0]).asmTransfer(_bancor, amount);\r\n        _bancor.convert(_path, amount, 1);\r\n    }\r\n\r\n    function bancorAlreadyTransferedTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {\r\n        _bancor.convert(_path, _amount, 1);\r\n    }\r\n\r\n    function bancorAlreadyTransferedTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = ERC20(_path[0]).balanceOf(_bancor).mul(_mul).div(_div);\r\n        _bancor.convert(_path, amount, 1);\r\n    }\r\n\r\n    // Kyber Network\r\n\r\n    function kyberSendEthProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {\r\n        uint256 value = address(this).balance.mul(_mul).div(_div);\r\n        _kyber.trade.value(value)(\r\n            _fromToken,\r\n            value,\r\n            _toToken,\r\n            this,\r\n            1 << 255,\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    function kyberApproveTokenAmount(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _amount) external {\r\n        if (_fromToken.allowance(this, _kyber) == 0) {\r\n            _fromToken.asmApprove(_kyber, uint256(-1));\r\n        }\r\n        _kyber.trade(\r\n            _fromToken,\r\n            _amount,\r\n            _toToken,\r\n            this,\r\n            1 << 255,\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    function kyberApproveTokenProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {\r\n        uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);\r\n        this.kyberApproveTokenAmount(_kyber, _fromToken, _toToken, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/registry/MultiSeller.sol\r\n\r\ncontract MultiSeller is MultiChanger {\r\n    using CheckedERC20 for ERC20;\r\n    using CheckedERC20 for IMultiToken;\r\n\r\n    function() public payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(tx.origin != msg.sender);\r\n    }\r\n\r\n    function sellForOrigin(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        bytes _callDatas,\r\n        uint[] _starts // including 0 and LENGTH values\r\n    )\r\n        public\r\n    {\r\n        sell(\r\n            _mtkn,\r\n            _amount,\r\n            _callDatas,\r\n            _starts,\r\n            tx.origin   // solium-disable-line security/no-tx-origin\r\n        );\r\n    }\r\n\r\n    function sell(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        bytes _callDatas,\r\n        uint[] _starts, // including 0 and LENGTH values\r\n        address _for\r\n    )\r\n        public\r\n    {\r\n        _mtkn.asmTransferFrom(msg.sender, this, _amount);\r\n        _mtkn.unbundle(this, _amount);\r\n        change(_callDatas, _starts);\r\n        _for.transfer(address(this).balance);\r\n    }\r\n\r\n    // DEPRECATED:\r\n\r\n    function sellOnApproveForOrigin(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        ERC20 _throughToken,\r\n        address[] _exchanges,\r\n        bytes _datas,\r\n        uint[] _datasIndexes // including 0 and LENGTH values\r\n    )\r\n        public\r\n    {\r\n        sellOnApprove(\r\n            _mtkn,\r\n            _amount,\r\n            _throughToken,\r\n            _exchanges,\r\n            _datas,\r\n            _datasIndexes,\r\n            tx.origin       // solium-disable-line security/no-tx-origin\r\n        );\r\n    }\r\n\r\n    function sellOnApprove(\r\n        IMultiToken _mtkn,\r\n        uint256 _amount,\r\n        ERC20 _throughToken,\r\n        address[] _exchanges,\r\n        bytes _datas,\r\n        uint[] _datasIndexes, // including 0 and LENGTH values\r\n        address _for\r\n    )\r\n        public\r\n    {\r\n        if (_throughToken == address(0)) {\r\n            require(_mtkn.tokensCount() == _exchanges.length, \"sell: _mtkn should have the same tokens count as _exchanges\");\r\n        } else {\r\n            require(_mtkn.tokensCount() + 1 == _exchanges.length, \"sell: _mtkn should have tokens count + 1 equal _exchanges length\");\r\n        }\r\n        require(_datasIndexes.length == _exchanges.length + 1, \"sell: _datasIndexes should start with 0 and end with LENGTH\");\r\n\r\n        _mtkn.transferFrom(msg.sender, this, _amount);\r\n        _mtkn.unbundle(this, _amount);\r\n\r\n        for (uint i = 0; i < _exchanges.length; i++) {\r\n            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);\r\n            for (uint j = _datasIndexes[i]; j < _datasIndexes[i + 1]; j++) {\r\n                data[j - _datasIndexes[i]] = _datas[j];\r\n            }\r\n            if (data.length == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (i == _exchanges.length - 1 && _throughToken != address(0)) {\r\n                if (_throughToken.allowance(this, _exchanges[i]) == 0) {\r\n                    _throughToken.asmApprove(_exchanges[i], uint256(-1));\r\n                }\r\n            } else {\r\n                ERC20 token = _mtkn.tokens(i);\r\n                if (_exchanges[i] == 0) {\r\n                    token.asmTransfer(_for, token.balanceOf(this));\r\n                    continue;\r\n                }\r\n                if (token.allowance(this, _exchanges[i]) == 0) {\r\n                    token.asmApprove(_exchanges[i], uint256(-1));\r\n                }\r\n            }\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            require(_exchanges[i].call(data), \"sell: exchange arbitrary call failed\");\r\n        }\r\n\r\n        _for.transfer(address(this).balance);\r\n        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {\r\n            _throughToken.asmTransfer(_for, _throughToken.balanceOf(this));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"multitokenChangeProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bancorAlreadyTransferedTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"bancorSendEthProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_callDatas\",\"type\":\"bytes\"},{\"name\":\"_starts\",\"type\":\"uint256[]\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"bancorApproveTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bancorTransferTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multitokenChangeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherToken\",\"type\":\"address\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"bancorTransferTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_callDatas\",\"type\":\"bytes\"},{\"name\":\"_starts\",\"type\":\"uint256[]\"}],\"name\":\"sellForOrigin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"sendEthProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bancorSendEthValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"kyberSendEthProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_throughToken\",\"type\":\"address\"},{\"name\":\"_exchanges\",\"type\":\"address[]\"},{\"name\":\"_datas\",\"type\":\"bytes\"},{\"name\":\"_datasIndexes\",\"type\":\"uint256[]\"}],\"name\":\"sellOnApproveForOrigin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"bancorAlreadyTransferedTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"kyberApproveTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"approveTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendEthValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_mul\",\"type\":\"uint256\"},{\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"transferTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_callDatas\",\"type\":\"bytes\"},{\"name\":\"_starts\",\"type\":\"uint256[]\"}],\"name\":\"change\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"kyberApproveTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bancor\",\"type\":\"address\"},{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bancorApproveTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mtkn\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_throughToken\",\"type\":\"address\"},{\"name\":\"_exchanges\",\"type\":\"address[]\"},{\"name\":\"_datas\",\"type\":\"bytes\"},{\"name\":\"_datasIndexes\",\"type\":\"uint256[]\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"sellOnApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiSeller","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://44924ae674ba66e34358bb840452e9c104645e8546ad144e40cd9423af80ace0"}]}