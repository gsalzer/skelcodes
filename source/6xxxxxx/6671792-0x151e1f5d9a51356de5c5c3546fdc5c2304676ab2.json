{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface PlayerBookInterface {\r\n    function getPlayerID(address _addr) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getNameFee() external view returns (uint256);\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256 c) \r\n    {\r\n        // require(b > 0);\r\n        if(b <= 0) return 0;\r\n        else return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string  _input)\r\n    internal\r\n    pure\r\n    returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                // OR lowercase a-z\r\n                (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                // or 0-9\r\n                (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// \"./PlayerBookInterface.sol\";\r\n// \"./SafeMath.sol\";\r\n// \"./NameFilter.sol\";\r\n// 'openzeppelin-solidity/contracts/ownership/Ownable.sol';\r\n\r\n//==============================================================================\r\n//     _    _  _ _|_ _  .\r\n//    (/_\\/(/_| | | _\\  .\r\n//==============================================================================\r\ncontract F3Devents {\r\n    /*\r\n    event debug (\r\n        uint16 code,\r\n        uint256 value,\r\n        bytes32 msg\r\n    );\r\n    */\r\n\r\n    // fired whenever a player registers a name\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // (fomo3d long only) fired whenever a player tries a buy after round timer\r\n    // hit zero, and causes end round to be ran.\r\n    // emit F3Devents.onBuyAndDistribute\r\n    //             (\r\n    //                 msg.sender,\r\n    //                 plyr_[_pID].name,\r\n    //                 plyr_[_pID].cosd,\r\n    //                 plyr_[_pID].cosc,\r\n    //                 plyr_[pIDCom_].cosd,\r\n    //                 plyr_[pIDCom_].cosc,\r\n    //                 plyr_[_affID].affVltCosd,\r\n    //                 plyr_[_affID].affVltCosc,\r\n    //                 keyNum_\r\n    //             );\r\n    event onBuyAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 pCosd,\r\n        uint256 pCosc,\r\n        uint256 comCosd,\r\n        uint256 comCosc,\r\n        uint256 affVltCosd,\r\n        uint256 affVltCosc,\r\n        uint256 keyNums\r\n    );\r\n\r\n    // emit F3Devents.onRecHldVltCosd\r\n    //                     (\r\n    //                         msg.sender,\r\n    //                         plyr_[j].name,\r\n    //                         plyr_[j].hldVltCosd\r\n    //                     );\r\n    event onRecHldVltCosd\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName, \r\n        uint256 hldVltCosd\r\n    );\r\n\r\n    // emit F3Devents.onSellAndDistribute\r\n    //             (\r\n    //                 msg.sender,\r\n    //                 plyr_[_pID].name,\r\n    //                 plyr_[_pID].cosd,\r\n    //                 plyr_[_pID].cosc,\r\n    //                 keyNum_\r\n    //             );\r\n    event onSellAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 pCosd,\r\n        uint256 pCosc,\r\n        uint256 keyNums\r\n    );\r\n\r\n   \r\n    event onWithdrawHoldVault\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_hldVltCosd\r\n    );\r\n    \r\n    event onWithdrawAffVault\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_cosc,\r\n        uint256 plyr_affVltCosd,\r\n        uint256 plyr_affVltCosc\r\n    );\r\n    \r\n    event onWithdrawWonCosFromGame\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_cosc,\r\n        uint256 plyr_affVltCosd\r\n    );\r\n}\r\n\r\ncontract modularLong is F3Devents {}\r\n\r\ncontract FoMo3DLong is modularLong, Ownable {\r\n    using SafeMath for *;\r\n    using NameFilter for *;\r\n    using F3DKeysCalcLong for *;\r\n\r\n    //    otherFoMo3D private otherF3D_;\r\n    PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x82cFeBf0F80B9617b8D13368eFC9B76C48F096d4);\r\n\r\n     //==============================================================================\r\n    //     _ _  _  |`. _     _ _ |_ | _  _  .\r\n    //    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\r\n    //=================_|===========================================================\r\n    string constant public name = \"FoMo3D World\";\r\n    string constant public symbol = \"F3DW\";\r\n    //    uint256 private rndExtra_ = extSettings.getLongExtra();     // length of the very first ICO\r\n    // uint256 constant public rndGap_ = 0; // 120 seconds;         // length of ICO phase.\r\n    // uint256 constant public rndInit_ = 350 minutes;                // round timer starts at this\r\n    // uint256 constant public rndShow_ = 10 minutes;                // \r\n    // uint256 constant private rndInc_ = 30 seconds;              // every full key purchased adds this much to the timer\r\n    // uint256 constant private rndMax_ = 24 hours;                // max length a round timer can be\r\n\r\n    // uint256 constant public rndFirst_ = 1 hours;                // a round fist step timer can be\r\n\r\n    // uint256 constant public threshould_ = 10;//超过XXX个cos\r\n\r\n    uint256 public rID_;    // round id number / total rounds that have happened\r\n    uint256 public plyNum_ = 2;\r\n    // uint256 public keyNum_ = 0;\r\n    uint256 public cosdNum_ = 0;\r\n    uint256 public coscNum_ = 0;\r\n    uint256 public totalVolume_ = 0;\r\n    uint256 public totalVltCosd_ = 0;\r\n    uint256 public result_ = 0;\r\n    uint256 public price_ = 10**16;\r\n    uint256 public priceCntThreshould_ = 100000; \r\n\r\n    uint256 constant public pIDCom_ = 1;\r\n    //****************\r\n    // PLAYER DATA\r\n    //****************\r\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\r\n    mapping (uint256 => F3Ddatasets.Player) public plyr_;   // (pID => data) player data\r\n    // mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\r\n    //****************\r\n    // ROUND DATA\r\n    //****************\r\n    // mapping (uint256 => F3Ddatasets.Round) public round_;   // (rID => data) round data\r\n    // mapping (uint256 => mapping(uint256 => F3Ddatasets.Prop)) public rndProp_;      // (rID => propID => data) eth in per team, by round id and team id\r\n    // mapping (uint256 => mapping(uint256 => F3Ddatasets.Team)) public rndTmEth_;      // (rID => tID => data) eth in per team, by round id and team id\r\n    // mapping (uint256 => F3Ddatasets.Leader) public rndLd_;      // (rID => data) eth in per team, by round id and team id\r\n    \r\n    //****************\r\n    // TEAM FEE DATA\r\n    //****************\r\n\r\n    // mapping (uint256 => F3Ddatasets.Team) public teams_;          // (teamID => team)\r\n    // mapping (uint256 => F3Ddatasets.Prop) public props_;          // (teamID => team)\r\n    // mapping (uint256 => F3Ddatasets.Fee) public fees_;          // (teamID => team)\r\n    \r\n    //F3Ddatasets.EventReturns  _eventData_;\r\n    \r\n    // fees_[0] = F3Ddatasets.Fee(5,2,3);    //cosdBuyFee\r\n    // fees_[1] = F3Ddatasets.Fee(0,0,20);  //cosdSellFee\r\n    // fees_[2] = F3Ddatasets.Fee(4,1,0);    //coscBuyFee\r\n    // fees_[3] = F3Ddatasets.Fee(0,0,0);   //coscSellFee\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        //teams\r\n        // teams_[0] = F3Ddatasets.Team(0,70,0);\r\n        // teams_[1] = F3Ddatasets.Team(1,30,0);\r\n        //props\r\n        // props_[0] = F3Ddatasets.Prop(0,5,20,20);\r\n        // props_[1] = F3Ddatasets.Prop(1,2,0,20);\r\n        // props_[2] = F3Ddatasets.Prop(2,2,10,0);\r\n        // props_[3] = F3Ddatasets.Prop(3,1,0,10);\r\n        // props_[4] = F3Ddatasets.Prop(4,1,10,0);\r\n        //fees\r\n        // fees_[0] = F3Ddatasets.Fee(5,2,3);    //cosdBuyFee\r\n        // fees_[1] = F3Ddatasets.Fee(0,0,20);  //cosdSellFee\r\n        // fees_[2] = F3Ddatasets.Fee(4,1,0);    //coscBuyFee\r\n        // fees_[3] = F3Ddatasets.Fee(0,0,0);   //coscSellFee\r\n    }\r\n\r\n    // **\r\n    //  * @dev used to make sure no one can interact with contract until it has\r\n    //  * been activated.\r\n    //  *\r\n    // modifier isActivated() {\r\n    //     require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n    //     _;\r\n    // }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with fomo3d\r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx\r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        //require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n    \r\n    // ---------\r\n    // Dont accept ETH;\r\n    // ---------\r\n    function () public payable { \r\n        revert();\r\n    }\r\n\r\n    function buyXaddr(address _pAddr, address _affCode, uint256 _eth, string _keyType)//sent\r\n    // isActivated()\r\n    // isHuman()\r\n    onlyOwner()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    // returns(uint256)\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        // F3Ddatasets.EventReturns memory _eventData_;\r\n        // _eventData_ = determinePID(_eventData_);\r\n        determinePID(_pAddr);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_pAddr];\r\n\r\n        // manage affiliate residuals\r\n        uint256 _affID;\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == address(0) || _affCode == _pAddr)\r\n        {\r\n            // use last stored affiliate code\r\n            _affID = plyr_[_pID].laff;\r\n\r\n            // if affiliate code was given\r\n        } else {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // verify a valid team was selected\r\n        // _team = verifyTeam(_team);\r\n\r\n        // buy core\r\n        buyCore(_pID, _affID, _eth, _keyType);\r\n    }\r\n\r\n    function registerNameXaddr(string   memory  _nameString, address _affCode, bool _all)//sent,user\r\n    // isHuman()\r\n    // onlyOwner()\r\n    public\r\n    payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        if(_isNewPlayer) plyNum_++;\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // fire event\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function ttlSply()\r\n    public\r\n    view\r\n    returns(uint256, uint256, uint256, uint256)\r\n    {\r\n        return (cosdNum_, coscNum_, totalVolume_, totalVltCosd_);\r\n    }\r\n   \r\n    function getBuyPrice()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return price_;\r\n    }\r\n  \r\n    function getPlayerInfoByAddress(address _addr)\r\n    public\r\n    view\r\n    returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        // uint256 _rID = rID_;\r\n        // address _addr = _addr_;\r\n\r\n        // if (_addr == address(0))\r\n        // {\r\n        //     _addr == msg.sender;\r\n        // }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n            _pID,\r\n            plyr_[_pID].name,\r\n            plyr_[_pID].laff,    \r\n            plyr_[_pID].eth,\r\n            plyr_[_pID].cosd,       \r\n            plyr_[_pID].cosc,\r\n            plyr_[_pID].hldVltCosd,\r\n            plyr_[_pID].affCosd,\r\n            plyr_[_pID].affCosc,\r\n            plyr_[_pID].totalHldVltCosd,\r\n            plyr_[_pID].totalAffCos,\r\n            plyr_[_pID].totalWinCos\r\n        );\r\n    }\r\n\r\n   \r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _eth, string _keyType)\r\n    private\r\n    // returns(uint256)\r\n    {\r\n        uint256 _keys;\r\n        // if eth left is greater than min eth allowed (sorry no pocket lint)\r\n        if (_eth >= 0)\r\n        {\r\n            require(_eth >= getBuyPrice());\r\n            // mint the new keys\r\n            _keys = keysRec(_eth);\r\n            // pay 2% out to community rewards\r\n            uint256 _aff;\r\n            uint256 _com;\r\n            uint256 _holders;\r\n            uint256 _self;\r\n\r\n            // if (isCosd(_keyType) == true) {\r\n            //     _aff        = _keys.mul(fees_[0].aff)/100;\r\n            //     _com        = _keys.mul(fees_[0].com)/100;\r\n            //     _holders    = _keys.mul(fees_[0].holders)/100;\r\n            //     _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n            // }else{\r\n            //     _aff        = _keys.mul(fees_[2].aff)/100;\r\n            //     _com        = _keys.mul(fees_[2].com)/100;\r\n            //     _holders    = _keys.mul(fees_[2].holders)/100;\r\n            //     _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n            // }\r\n\r\n            // // if they bought at least 1 whole key\r\n            // if (_keys >= 1)\r\n            // {\r\n            //     // set new leaders\r\n            //     if (round_[_rID].plyr != _pID)\r\n            //         round_[_rID].plyr = _pID;\r\n            //     if (round_[_rID].team != _team)\r\n            //         round_[_rID].team = _team;\r\n            // }\r\n            // update player\r\n            if(isCosd(_keyType) == true){\r\n                \r\n                _aff        = _keys * 5/100;\r\n                _com        = _keys * 2/100;\r\n                _holders    = _keys * 3/100;\r\n                _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n\r\n                uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                //Player\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.add(_self);\r\n                plyr_[pIDCom_].cosd = plyr_[pIDCom_].cosd.add(_com);\r\n                plyr_[_affID].affCosd = plyr_[_affID].affCosd.add(_aff);\r\n                \r\n                // plyr_[_affID].totalAffCos = plyr_[_affID].totalAffCos.add(_aff);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if(plyr_[j].cosd>0) {\r\n                        // plyrRnds_[j][_rID].cosd = plyrRnds_[j][_rID].cosd.add(_holders.div(_otherHodles));\r\n                        plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        \r\n                        // plyr_[j].totalHldVltCosd = plyr_[j].totalHldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        // totalVltCosd_ = totalVltCosd_.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        emit F3Devents.onRecHldVltCosd\r\n                        (\r\n                            plyr_[j].addr,\r\n                            plyr_[j].name,\r\n                            plyr_[j].hldVltCosd\r\n                        );\r\n                    }\r\n                }\r\n                //team\r\n                // rndTmEth_[_rID][_team].cosd = _self.add(rndTmEth_[_rID][_team].cosd);\r\n                cosdNum_ = cosdNum_.add(_keys);\r\n                totalVolume_ = totalVolume_.add(_keys);\r\n            }\r\n            else{//cosc\r\n                _aff        = _keys *4/100;\r\n                _com        = _keys *1/100;\r\n                // _holders    = _keys.mul(fees_[2].holders)/100;\r\n                _self       = _keys.sub(_aff).sub(_com);\r\n                //Player\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc.add(_self);\r\n                plyr_[pIDCom_].cosc = plyr_[pIDCom_].cosc.add(_com);\r\n                plyr_[_affID].affCosc = plyr_[_affID].affCosc.add(_aff);\r\n                \r\n                // plyr_[_affID].totalAffCos = plyr_[_affID].totalAffCos.add(_aff);\r\n                // rndTmEth_[_rID][_team].cosc = _self.add(rndTmEth_[_rID][_team].cosc);\r\n                coscNum_ = coscNum_.add(_keys);\r\n                totalVolume_ = totalVolume_.add(_keys);\r\n            }\r\n\r\n            // keyNum_ = keyNum_.add(_keys);//update\r\n        }\r\n\r\n        // return _keys;\r\n    }  \r\n\r\n   \r\n    function sellKeys(uint256 _pID, uint256 _keys, string _keyType)//send\r\n    // isActivated()\r\n    // isHuman()\r\n    onlyOwner()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256)\r\n    {\r\n        // uint256 _pID = _pID_;\r\n        // uint256 _keys = _keys_;\r\n        require(_keys>0);\r\n        uint256 _eth;\r\n\r\n        // uint256 _aff;\r\n        // uint256 _com;\r\n        uint256 _holders;\r\n        uint256 _self;\r\n        // if (isCosd(_keyType) == true) {\r\n        //         // _aff        = _keys.mul(fees_[1].aff)/100;\r\n        //         // _com        = _keys.mul(fees_[1].com)/100;\r\n        //         _holders    = _keys.mul(fees_[1].holders)/100;\r\n        //         // _self       = _keys.sub(_aff).sub(_com);\r\n        //         _self       = _self.sub(_holders);\r\n        // }else{\r\n        //         // _aff        = _keys.mul(fees_[3].aff)/100;\r\n        //         // _com        = _keys.mul(fees_[3].com)/100;\r\n        //         _holders    = _keys.mul(fees_[3].holders)/100;\r\n        //         // _self       = _keys.sub(_aff).sub(_com);\r\n        //         _self       = _self.sub(_holders);\r\n        // }\r\n        //split\r\n       if(isCosd(_keyType) == true){\r\n                require(plyr_[_pID].cosd >= _keys,\"Do not have cosd!\");\r\n                \r\n                // _aff        = _keys.mul(fees_[1].aff)/100;\r\n                // _com        = _keys.mul(fees_[1].com)/100;\r\n                _holders    = _keys * 20/100;\r\n                // _self       = _keys.sub(_aff).sub(_com);\r\n                _self       = _keys.sub(_holders);\r\n\r\n                uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_keys);\r\n\r\n                _eth = ethRec(_self);\r\n                plyr_[_pID].eth = plyr_[_pID].eth.add(_eth);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if( plyr_[j].cosd>0) {                    \r\n                        plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        \r\n                        // plyr_[j].totalHldVltCosd = plyr_[j].totalHldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        // totalVltCosd_ = totalVltCosd_.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        emit F3Devents.onRecHldVltCosd\r\n                        (\r\n                            plyr_[j].addr,\r\n                            plyr_[j].name,\r\n                            plyr_[j].hldVltCosd\r\n                        );\r\n                    }\r\n                }\r\n                cosdNum_ = cosdNum_.sub(_self);\r\n                totalVolume_ = totalVolume_.add(_keys);\r\n       }\r\n       else{\r\n            require(plyr_[_pID].cosc >= _keys,\"Do not have cosc!\");           \r\n\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_keys);\r\n\r\n            _eth = ethRec(_keys);\r\n            plyr_[_pID].eth = plyr_[_pID].eth.add(_eth);\r\n            \r\n            coscNum_ = coscNum_.sub(_keys);\r\n            totalVolume_ = totalVolume_.add(_keys);\r\n       }\r\n\r\n    //   keyNum_ = keyNum_.sub(_keys);//update\r\n       // _eth = _keys.ethRec(getBuyPrice());\r\n\r\n       return _eth;\r\n    }\r\n\r\n    function addCosToGame(uint256 _pID, uint256 _keys, string _keyType)//sent\r\n    onlyOwner()\r\n    public\r\n    // returns(bool)\r\n    {\r\n            // uint256 _rID = rID_;\r\n            // uint256 _now = now;\r\n\r\n            uint256 _aff;\r\n            uint256 _com;\r\n            uint256 _holders;\r\n            // uint256 _self;\r\n            uint256 _affID = plyr_[_pID].laff;\r\n\r\n            // update player\r\n            if(isCosd(_keyType) == true){         //扣除9%\r\n\r\n                require(plyr_[_pID].cosd >= _keys);\r\n\r\n                _aff        = _keys *1/100;\r\n                _com        = _keys *3/100;\r\n                _holders    = _keys *5/100;\r\n                // _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n                //Player\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_keys);\r\n\r\n                uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                //Player\r\n                // plyr_[_pID].cosd = plyr_[_pID].cosd.add(_self);\r\n                plyr_[pIDCom_].cosd = plyr_[pIDCom_].cosd.add(_com);\r\n                plyr_[_affID].affCosd = plyr_[_affID].affCosd.add(_aff);\r\n            \r\n                // plyr_[_affID].totalAffCos = plyr_[_affID].totalAffCos.add(_aff);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if(plyr_[j].cosd>0) {\r\n                        // plyrRnds_[j][_rID].cosd = plyrRnds_[j][_rID].cosd.add(_holders.div(_otherHodles));\r\n                        plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        \r\n                        // plyr_[j].totalHldVltCosd = plyr_[j].totalHldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        // totalVltCosd_ = totalVltCosd_.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        emit F3Devents.onRecHldVltCosd\r\n                        (\r\n                            plyr_[j].addr,\r\n                            plyr_[j].name,\r\n                            plyr_[j].hldVltCosd\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            else{//cosc\r\n                require(plyr_[_pID].cosc >= _keys);\r\n                //Player\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_keys);\r\n            }\r\n        \r\n            // return true;\r\n    }\r\n\r\n    function winCosFromGame(uint256 _pID, uint256 _keys, string _keyType)//sent\r\n    onlyOwner()\r\n    public\r\n    // returns(bool)\r\n    {\r\n            // uint256 _rID = rID_;\r\n            // uint256 _now = now;\r\n\r\n            // update player\r\n            if(isCosd(_keyType) == true){\r\n                // require(plyr_[_pID].cosd >= _keys);\r\n                //Player\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.add(_keys);\r\n            }\r\n            else{//cosc\r\n                // require(plyr_[_pID].cosc >= _keys);\r\n                //Player\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc.add(_keys);\r\n            }\r\n            \r\n            plyr_[_pID].totalWinCos = plyr_[_pID].totalWinCos.add(_keys);\r\n        \r\n            // return true;\r\n    }    \r\n   \r\n    function iWantXKeys(uint256 _keys)\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return eth(_keys);\r\n    }\r\n    \r\n    function howManyKeysCanBuy(uint256 _eth)\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return keys(_eth);\r\n    }\r\n    //==============================================================================\r\n    //    _|_ _  _ | _  .\r\n    //     | (_)(_)|_\\  .\r\n    // //==============================================================================\r\n    // \r\n    //  @dev receives name/player info from names contract\r\n    //  \r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\r\n    external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if (pIDxAddr_[_addr] != _pID)\r\n            pIDxAddr_[_addr] = _pID;\r\n        if (pIDxName_[_name] != _pID)\r\n            pIDxName_[_name] = _pID;\r\n        if (plyr_[_pID].addr != _addr)\r\n            plyr_[_pID].addr = _addr;\r\n        if (plyr_[_pID].name != _name)\r\n            plyr_[_pID].name = _name;\r\n        if (plyr_[_pID].laff != _laff)\r\n            plyr_[_pID].laff = _laff;\r\n        if (plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    //  **\r\n    //  * @dev receives entire player name list\r\n    //  *\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\r\n    external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if(plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    // **\r\n    //  * @dev gets existing or registers new pID.  use this when a player may be new\r\n    //  * @return pID\r\n    //  *\r\n    function determinePID(address _pAddr)\r\n    private\r\n    {\r\n        uint256 _pID = pIDxAddr_[_pAddr];\r\n        // if player is new to this version of fomo3d\r\n        if (_pID == 0)\r\n        {\r\n            // grab their player ID, name and last aff ID, from player names contract\r\n            _pID = PlayerBook.getPlayerID(_pAddr);\r\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\r\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\r\n\r\n            // set up player account\r\n            pIDxAddr_[_pAddr] = _pID;\r\n            plyr_[_pID].addr = _pAddr;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID)\r\n                plyr_[_pID].laff = _laff;\r\n\r\n            // set the new player bool to true\r\n            // _eventData_.compressedData = _eventData_.compressedData + 1;\r\n            // plyNum_++;\r\n        }\r\n        // return (_eventData_);\r\n    }\r\n    \r\n    function withdrawETH(uint256 _pID)//send\r\n    // isHuman()\r\n    onlyOwner()\r\n    public\r\n    returns(bool)\r\n    {\r\n        if (plyr_[_pID].eth>0) {\r\n            plyr_[_pID].eth = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawHoldVault(uint256 _pID)//send\r\n    // isHuman()\r\n    onlyOwner()\r\n    public\r\n    returns(bool)\r\n    {\r\n        if (plyr_[_pID].hldVltCosd>0) {\r\n            plyr_[_pID].cosd = plyr_[_pID].cosd.add(plyr_[_pID].hldVltCosd);\r\n            \r\n            plyr_[_pID].totalHldVltCosd = plyr_[_pID].totalHldVltCosd.add(plyr_[_pID].hldVltCosd);\r\n            totalVltCosd_ = totalVltCosd_.add(plyr_[_pID].hldVltCosd);\r\n                        \r\n            plyr_[_pID].hldVltCosd = 0;\r\n        }\r\n\r\n        emit F3Devents.onWithdrawHoldVault\r\n                    (\r\n                        _pID,\r\n                        plyr_[_pID].addr,\r\n                        plyr_[_pID].name,\r\n                        plyr_[_pID].cosd,\r\n                        plyr_[_pID].hldVltCosd\r\n                    );\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawAffVault(uint256 _pID, string _keyType)//send\r\n    // isHuman()\r\n    onlyOwner()\r\n    public\r\n    returns(bool)\r\n    {\r\n\r\n        if(isCosd(_keyType) == true){\r\n\r\n            if (plyr_[_pID].affCosd>0) {\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.add(plyr_[_pID].affCosd);\r\n                plyr_[_pID].totalAffCos = plyr_[_pID].totalAffCos.add(plyr_[_pID].affCosd);\r\n                plyr_[_pID].affCosd = 0;\r\n            }\r\n        }\r\n        else{\r\n            if (plyr_[_pID].affCosc>0) {\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc.add(plyr_[_pID].affCosc);\r\n                plyr_[_pID].totalAffCos = plyr_[_pID].totalAffCos.add(plyr_[_pID].affCosc);\r\n                plyr_[_pID].affCosc = 0;\r\n            }\r\n        }\r\n\r\n        emit F3Devents.onWithdrawAffVault\r\n        (\r\n                        _pID,\r\n                        plyr_[_pID].addr,\r\n                        plyr_[_pID].name,\r\n                        plyr_[_pID].cosd,\r\n                        plyr_[_pID].cosc,\r\n                        plyr_[_pID].affCosd,\r\n                        plyr_[_pID].affCosc\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferToAnotherAddr(address _from, address _to, uint256 _keys, string _keyType) //sent\r\n    // isHuman()\r\n    onlyOwner()\r\n    public\r\n    // returns(bool)\r\n    {\r\n        // uint256 _rID = rID_;\r\n        // uint256 _holders;\r\n        // uint256 _self;\r\n        // uint256 i;\r\n\r\n        // determinePID();\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_from];\r\n        uint256 _tID = pIDxAddr_[_to];\r\n\r\n        require(_tID > 0);\r\n    \r\n        if (isCosd(_keyType) == true) {\r\n\r\n                require(plyr_[_pID].cosd >= _keys);\r\n\r\n                // uint256 _hldCosd;\r\n                // for ( i = 1; i <= plyNum_; i++) {\r\n                //     if(plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                // }\r\n\r\n                // _holders = _keys * 20/100;\r\n                // // _aff =     plyrRnds_[_pID][_rID].wonCosd * 1/100;\r\n                // _self = _keys.sub(_holders);\r\n\r\n                plyr_[_tID].cosd = plyr_[_tID].cosd.add(_keys);\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_keys);\r\n\r\n                // for ( i = 1; i <= plyNum_; i++) {\r\n                //     if(plyr_[i].cosd>0) plyr_[i].hldVltCosd = plyr_[i].hldVltCosd.add(_holders.mul(plyr_[i].cosd).div(_hldCosd));\r\n                // }\r\n        }\r\n\r\n        else{\r\n            require(plyr_[_pID].cosc >= _keys);\r\n\r\n            plyr_[_tID].cosc = plyr_[_tID].cosc.add(_keys);\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_keys);\r\n        }\r\n\r\n        // emit F3Devents.onWithdrawWonCosFromGame\r\n        //             (\r\n        //                 _pID,\r\n        //                 msg.sender,\r\n        //                 plyr_[i].name,\r\n        //                 plyr_[_pID].cosd,\r\n        //                 plyr_[_pID].cosc,\r\n        //                 plyr_[_pID].affVltCosd\r\n        //             );\r\n\r\n        // return true;\r\n    }\r\n    \r\n    function isCosd(string _keyType)\r\n    public\r\n    pure\r\n    returns(bool)\r\n    {\r\n        if( bytes(_keyType).length == 8 )\r\n        {\r\n            return true;\r\n        }\r\n        else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // function setResult(string _keyType) //send\r\n    // public\r\n    // // pure\r\n    // returns(string)\r\n    // {\r\n    //     result_ = bytes(_keyType).length;\r\n        \r\n    //     return (_keyType);\r\n    // }\r\n    \r\n    // function getResult(string _keyType)\r\n    // public\r\n    // pure\r\n    // returns(uint256)\r\n    // {\r\n    //     // return bytes(_keyType).length;\r\n    //     if( bytes(_keyType).length == 8 )\r\n    //     {\r\n    //         return 100;\r\n    //     }\r\n    //     else \r\n    //     {\r\n    //         return 50;\r\n    //     }\r\n    // }\r\n    \r\n    function keysRec(uint256 _eth)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // require(_price >= 10**16);\r\n        \r\n        uint256 _rstAmount = 0;\r\n        uint256 _price = price_;\r\n        // uint256 _keyNum = cosdNum_.add(coscNum_);\r\n        // require(_eth >= msg.value);\r\n\r\n        while(_eth >= _price){\r\n            _eth = _eth - _price;\r\n            _price = _price + 5 *10**11;\r\n            \r\n            if(_price >= 2 *10**17){ \r\n                _price = 2 *10**17;\r\n                // priceCntThreshould_ = _keyNum.add(_rstAmount);\r\n            }\r\n            \r\n            _rstAmount++;\r\n        }\r\n        \r\n        price_ = _price;\r\n\r\n        return _rstAmount;\r\n    }\r\n\r\n    function ethRec(uint256 _keys)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // require(_price >= 10**16);\r\n        \r\n        uint256 _eth = 0;\r\n        uint256 _price = price_;\r\n        uint256 _keyNum = cosdNum_.add(coscNum_);\r\n        // require(_eth >= msg.value);\r\n\r\n        for(uint256 i=0;i < _keys;i++){\r\n            if(_price < 10**16) _price = 10**16;\r\n            \r\n            _eth = _eth + _price;\r\n            _price = _price - 5 *10**11;\r\n            \r\n            if(_price < 10**16) _price = 10**16;\r\n            if(_keyNum - i >= priceCntThreshould_) _price = 2 *10**17; \r\n        }\r\n        \r\n        price_ = _price;\r\n\r\n        return _eth;\r\n    }\r\n\r\n    function keys(uint256 _eth)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n         // require(_price >= 10**16);\r\n        \r\n        uint256 _rstAmount = 0;\r\n        uint256 _price = price_;\r\n        // uint256 _keyNum = cosdNum_.add(coscNum_);\r\n        // require(_eth >= _price);\r\n\r\n        while(_eth >= _price){\r\n            _eth = _eth - _price;\r\n            _price = _price + 5 *10**11;\r\n            \r\n            if(_price >= 2 *10**17){ \r\n                _price = 2 *10**17;\r\n                // priceCntThreshould_ = _keyNum.add(_rstAmount);\r\n            }\r\n            \r\n            _rstAmount++;\r\n        }\r\n        \r\n        // price_ = _price;\r\n\r\n        return _rstAmount;\r\n    }\r\n\r\n    function eth(uint256 _keys)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n        // require(_price >= 10**16);\r\n        \r\n        uint256 _eth = 0;\r\n        uint256 _price = price_;\r\n        uint256 _keyNum = cosdNum_.add(coscNum_);\r\n        // require(_eth >= msg.value);\r\n\r\n        for(uint256 i=0;i < _keys;i++){\r\n            if(_price < 10**16) _price = 10**16;\r\n            \r\n            _eth = _eth + _price;\r\n            _price = _price - 5 *10**11;\r\n            \r\n            if(_price < 10**16) _price = 10**16;\r\n            if(_keyNum - i >= priceCntThreshould_) _price = 2 *10**17; \r\n        }\r\n        \r\n        // price_ = _price;\r\n\r\n        return _eth;\r\n    }\r\n    \r\n    //==============================================================================\r\n    //    (~ _  _    _._|_    .\r\n    //    _)(/_(_|_|| | | \\/  .\r\n    //====================/=========================================================\r\n    // ** upon contract deploy, it will be deactivated.  this is a one time\r\n    //  * use function that will activate the contract.  we do this so devs\r\n    //  * have time to set things up on the web end                            **\r\n    // bool public activated_ = false;\r\n    // function activate()\r\n    // public \r\n    // onlyOwner {\r\n    //     // make sure that its been linked.\r\n    //     //        require(address(otherF3D_) != address(0), \"must link to other FoMo3D first\");\r\n\r\n    //     // can only be ran once\r\n    //     require(activated_ == false, \"fomo3d already activated\");\r\n\r\n    //     // activate the contract\r\n    //     activated_ = true;\r\n\r\n    //     // lets start first round\r\n    //     // rID_ = 1;\r\n    //     // round_[1].strt = now;\r\n    //     // round_[1].end  = now.add(rndInit_);\r\n    // }\r\n}\r\n\r\nlibrary F3Ddatasets {\r\n    //compressedData key\r\n    // [76-33][32][31][30][29][28-18][17][16-6][5-3][2][1][0]\r\n    // 0 - new player (bool)\r\n    // 1 - joined round (bool)\r\n    // 2 - new  leader (bool)\r\n    // 3-5 - air drop tracker (uint 0-999)\r\n    // 6-16 - round end time\r\n    // 17 - winnerTeam\r\n    // 18 - 28 timestamp\r\n    // 29 - team\r\n    // 30 - 0 = reinvest (round), 1 = buy (round), 2 = buy (ico), 3 = reinvest (ico)\r\n    // 31 - airdrop happened bool\r\n    // 32 - airdrop tier\r\n    // 33 - airdrop amount won\r\n    //compressedIDs key\r\n    // [77-52][51-26][25-0]\r\n    // 0-25 - pID\r\n    // 26-51 - winPID\r\n    // 52-77 - rID\r\n    // struct EventReturns {\r\n    //     uint256 compressedData;\r\n    //     uint256 compressedIDs;\r\n    //     address winnerAddr;         // winner address\r\n    //     bytes32 winnerName;         // winner name\r\n    //     uint256 amountWonCosd;          // amount won\r\n    //     uint256 amountWonCosc;          // amount won\r\n    // }\r\n    struct Player {\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 laff;   // last affiliate id used\r\n        uint256 eth;\r\n        uint256 cosd;    // winnings vault\r\n        uint256 cosc;    // winnings vault\r\n        // uint256 lrnd;   // last round played\r\n        // uint256 rounds; //超过xxxcosd的轮数累计\r\n        // uint256 redtProp; //买道具赠送的累计亏损减少率\r\n        // uint256 redt1;\r\n        // uint256 redt3;\r\n        uint256 hldVltCosd;\r\n        uint256 affCosd;\r\n        uint256 affCosc;\r\n        uint256 totalHldVltCosd;\r\n        uint256 totalAffCos;\r\n        uint256 totalWinCos;\r\n    }\r\n    // struct PlayerRounds {\r\n    //     uint256 cosd;   // keys\r\n    //     uint256 cosc;   // keys\r\n    //     bool hadProp;\r\n    //     uint256 propID;\r\n    //     uint256 redtPRProp; //lossReductionRate，玩家当前回合道具总亏损减少率\r\n    //     uint256 incrPRProp; //Income increase rate收入增加率\r\n    //     uint256 team;\r\n    //     // bool first;\r\n    //     uint256 firstCosd;//第一阶段投入的COS资金，可减少20% 亏损率\r\n    //     uint256 firstCosc;//第一阶段投入的COS资金，可减少20% 亏损率\r\n    //     uint256 redtPRFirst;\r\n    //     uint256 wonCosd;\r\n    //     uint256 wonCosc;\r\n    //     uint256 wonCosdRcd;\r\n    //     uint256 wonCoscRcd;\r\n    // }\r\n    // struct Round {\r\n    //     uint256 plyr;   // pID of player in lead\r\n    //     uint256 team;   // tID of team in lead\r\n    //     uint256 end;    // time ends/ended\r\n    //     bool ended;     // has round end function been ran\r\n    //     uint256 strt;   // time round started\r\n    //     uint256 cosd;   // keys\r\n    //     uint256 cosc;   // keys\r\n    //     uint256 winTeam;\r\n    // }     \r\n    // struct Team {\r\n    //     uint256 teamID;        \r\n    //     uint256 winRate;    // 胜率\r\n    //     uint256 eth;\r\n    //     uint256 cosd;\r\n    //     uint256 cosc;\r\n    // }\r\n    // struct Prop {           //道具\r\n    //     uint256 propID;         \r\n    //     uint256 price;\r\n    //     uint256 oID;\r\n    // }\r\n    // struct Leader {           //道具       \r\n    //     uint256 price;\r\n    //     uint256 oID;\r\n    // }\r\n    // struct Fee {\r\n    //     uint256 aff;          // % of buy in thats paid to referrer  of current round推荐人分配比例\r\n    //     uint256 com;    // % of buy in thats paid for comnunity\r\n    //     uint256 holders; //key holders\r\n    // }\r\n}\r\n\r\nlibrary F3DKeysCalcLong {\r\n    using SafeMath for *;\r\n\r\n    function random() internal pure returns (uint256) {\r\n       uint ranNum = uint(keccak256(msg.data)) % 100;\r\n       return ranNum;\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVolume_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCntThreshould_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"transferToAnotherAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pAddr\",\"type\":\"address\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coscNum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cosdNum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_laff\",\"type\":\"uint256\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"winCosFromGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ttlSply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"isCosd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"howManyKeysCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"withdrawHoldVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"receivePlayerNameList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pIDCom_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"addCosToGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVltCosd_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"sellKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"cosd\",\"type\":\"uint256\"},{\"name\":\"cosc\",\"type\":\"uint256\"},{\"name\":\"hldVltCosd\",\"type\":\"uint256\"},{\"name\":\"affCosd\",\"type\":\"uint256\"},{\"name\":\"affCosc\",\"type\":\"uint256\"},{\"name\":\"totalHldVltCosd\",\"type\":\"uint256\"},{\"name\":\"totalAffCos\",\"type\":\"uint256\"},{\"name\":\"totalWinCos\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plyNum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"string\"}],\"name\":\"withdrawAffVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"pCosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pCosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comCosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comCosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affVltCosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affVltCosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keyNums\",\"type\":\"uint256\"}],\"name\":\"onBuyAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hldVltCosd\",\"type\":\"uint256\"}],\"name\":\"onRecHldVltCosd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"pCosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pCosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keyNums\",\"type\":\"uint256\"}],\"name\":\"onSellAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"plyr_cosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_hldVltCosd\",\"type\":\"uint256\"}],\"name\":\"onWithdrawHoldVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"plyr_cosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_cosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_affVltCosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_affVltCosc\",\"type\":\"uint256\"}],\"name\":\"onWithdrawAffVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"plyr_cosd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_cosc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"plyr_affVltCosd\",\"type\":\"uint256\"}],\"name\":\"onWithdrawWonCosFromGame\",\"type\":\"event\"}]","ContractName":"FoMo3DLong","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://260efd7677e90bddb143f969033b7f702b90f89919eed49c886c59b46b226386"}]}