{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n\r\n\r\ninterface ERC20Interface {\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n\r\nfunction balanceOf(address who) external view returns (uint256);\r\n\r\n\r\n\r\n\r\nfunction allowance(address owner, address spender)\r\nexternal view returns (uint256);\r\n\r\n\r\n\r\n\r\nfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\r\n\r\n\r\nfunction approve(address spender, uint256 value)\r\nexternal returns (bool);\r\n\r\n\r\n\r\n\r\nfunction transferFrom(address from, address to, uint256 value)\r\nexternal returns (bool);\r\n\r\n\r\n\r\n\r\nevent Transfer(\r\naddress indexed from,\r\naddress indexed to,\r\nuint256 value\r\n);\r\n\r\n\r\n\r\n\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\n\r\n\r\ncontract OpsCoin is ERC20Interface {\r\n\r\n\r\n\r\n\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\n\r\n\r\n\r\n\r\nusing SafeMath for uint256;\r\n\r\n\r\n\r\n\r\nstring public symbol;\r\nstring public name;\r\naddress public owner;\r\nuint256 public totalSupply;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmapping (address => uint256) private balances;\r\nmapping (address => mapping (address => uint256)) private allowed;\r\nmapping (address => mapping (address => uint)) private timeLock;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconstructor() {\r\nsymbol = \"OPS\";\r\nname = \"EY OpsCoin\";\r\ntotalSupply = 1000000;\r\nowner = msg.sender;\r\nbalances[owner] = totalSupply;\r\nemit Transfer(address(0), owner, totalSupply);\r\n}\r\n\r\n\r\n\r\n\r\n//only owner  modifier\r\nmodifier onlyOwner () {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\nself destruct added by westlad\r\n*/\r\nfunction close() public onlyOwner {\r\nselfdestruct(owner);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _address The address to query the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address _address) public view returns (uint256) {\r\nreturn balances[_address];\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\nfunction allowance(address _owner, address _spender) public view returns (uint256)\r\n{\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Total number of tokens in existence\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Internal function that mints an amount of the token and assigns it to\r\n* an account. This encapsulates the modification of balances such that the\r\n* proper events are emitted.\r\n* @param _account The account that will receive the created tokens.\r\n* @param _amount The amount that will be created.\r\n*/\r\nfunction mint(address _account, uint256 _amount) public {\r\nrequire(_account != 0);\r\nrequire(_amount > 0);\r\ntotalSupply = totalSupply.add(_amount);\r\nbalances[_account] = balances[_account].add(_amount);\r\nemit Transfer(address(0), _account, _amount);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Internal function that burns an amount of the token of a given\r\n* account.\r\n* @param _account The account whose tokens will be burnt.\r\n* @param _amount The amount that will be burnt.\r\n*/\r\nfunction burn(address _account, uint256 _amount) public {\r\nrequire(_account != 0);\r\nrequire(_amount <= balances[_account]);\r\n\r\n\r\n\r\n\r\ntotalSupply = totalSupply.sub(_amount);\r\nbalances[_account] = balances[_account].sub(_amount);\r\nemit Transfer(_account, address(0), _amount);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Internal function that burns an amount of the token of a given\r\n* account, deducting from the sender's allowance for said account. Uses the\r\n* internal burn function.\r\n* @param _account The account whose tokens will be burnt.\r\n* @param _amount The amount that will be burnt.\r\n*/\r\nfunction burnFrom(address _account, uint256 _amount) public {\r\nrequire(_amount <= allowed[_account][msg.sender]);\r\n\r\n\r\n\r\n\r\nallowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\r\nemit Approval(_account, msg.sender, allowed[_account][msg.sender]);\r\nburn(_account, _amount);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_value <= balances[msg.sender]);\r\nrequire(_to != address(0));\r\n\r\n\r\n\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nrequire(_spender != address(0));\r\n\r\n\r\n\r\n\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens after a specfied amount of time on behalf of msg.sender.\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n* @param _timeLockTill The time until when this amount cannot be withdrawn\r\n*/\r\nfunction approveAt(address _spender, uint256 _value, uint _timeLockTill) public returns (bool) {\r\nrequire(_spender != address(0));\r\n\r\n\r\n\r\n\r\nallowed[msg.sender][_spender] = _value;\r\ntimeLock[msg.sender][_spender] = _timeLockTill;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool)\r\n{\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\nrequire(_to != address(0));\r\n\r\n\r\n\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFromAt(address _from, address _to, uint256 _value) public returns (bool)\r\n{\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\nrequire(_to != address(0));\r\nrequire(block.timestamp > timeLock[_from][msg.sender]);\r\n\r\n\r\n\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n* approve should be called when allowed_[_spender] == 0. To increment\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _addedValue The amount of tokens to increase the allowance by.\r\n*/\r\nfunction increaseAllowance(address _spender, uint256 _addedValue) public returns (bool)\r\n{\r\nrequire(_spender != address(0));\r\n\r\n\r\n\r\n\r\nallowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n* approve should be called when allowed_[_spender] == 0. To decrement\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n*/\r\nfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool)\r\n{\r\nrequire(_spender != address(0));\r\n\r\n\r\n\r\n\r\nallowed[msg.sender][_spender] = (allowed[msg.sender][_spender].sub(_subtractedValue));\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Multiplies two numbers, reverts on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n// benefit is lost if 'b' is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\n\r\n\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b);\r\n\r\n\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b > 0); // Solidity only automatically asserts when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b <= a);\r\nuint256 c = a - b;\r\n\r\n\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Adds two numbers, reverts on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a);\r\n\r\n\r\n\r\n\r\nreturn c;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n* reverts when dividing by zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b != 0);\r\nreturn a % b;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_timeLockTill\",\"type\":\"uint256\"}],\"name\":\"approveAt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OpsCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://840ad55c3f626260e7b77bb1cce1f22ee242c094f733772eb92c6b4d3d81a367"}]}