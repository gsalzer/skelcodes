{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Guess23 is owned {\r\n    \r\n    \r\n    uint8 public maxnumber  = 100;\r\n   // mapping (uint8 => address) players;\r\n    mapping(address=>uint8[]) mynumbers;\r\n    mapping(address => bool) isActuallyAnAddressOnMyList;\r\n    mapping(uint8 => address[]) whosDaWinner;\r\n    uint8[] allnumbers;\r\n    address[]  allplayers;\r\n    uint8 winningNumber;\r\n    uint256 _lastPlayer;\r\n    uint public maxplayers = 25;\r\n    uint public roundnum  = 1;\r\n    uint256 public myWinShare  = 5;\r\n    uint256 public myLoseShare  = 0;\r\n    address[] winnerlist;\r\n\r\n\r\n    function Lottery() internal {\r\n        state = LotteryState.Accepting;\r\n    }\r\n    \r\n    uint8 number;\r\n    \r\n    enum LotteryState { Accepting, Finished }\r\n    \r\n    LotteryState state; \r\n    \r\n    uint public minAmount = 10000000000000000;\r\n    \r\n    function isAddress(address check) public view returns(bool isIndeed) {\r\n   return isActuallyAnAddressOnMyList[check];\r\n}\r\n  function getBalance() public view returns(uint256 balance) {\r\n      return this.balance;\r\n  }\r\n   \r\n   function play(uint8 mynumber) payable {\r\n       require(msg.value == minAmount);\r\n       require(mynumber >=0);\r\n       require(mynumber <= maxnumber);\r\n       require(state == LotteryState.Accepting);\r\n      whosDaWinner[mynumber].push(msg.sender);\r\n      mynumbers[msg.sender].push(mynumber);\r\n       allnumbers.push(mynumber);\r\n       if (!isAddress(msg.sender)){\r\n           \r\n           allplayers.push(msg.sender);\r\n           isActuallyAnAddressOnMyList[msg.sender] = true;\r\n       }\r\n       if (allnumbers.length == maxplayers){\r\n           state = LotteryState.Finished;\r\n       }\r\n       \r\n   } \r\n   function seeMyNumbers()public view returns(uint8[], uint256) {\r\n       return(mynumbers[msg.sender],mynumbers[msg.sender].length);\r\n   }\r\n   function seeAllNumbers() public view returns(uint8[]){\r\n       return  allnumbers;\r\n       //return numberlist;\r\n   }\r\n   function seeAllPlayers() public view returns(address[]){\r\n       return allplayers;\r\n   }\r\n\r\n    function setMaxNumber(uint8 newNumber) public onlyOwner {\r\n        maxnumber = newNumber;\r\n    }\r\n    \r\n    function setMaxPlayers(uint8 newNumber) public onlyOwner {\r\n        maxplayers = newNumber;\r\n    }\r\n    \r\n    function setMinAmount(uint newNumber) public onlyOwner {\r\n        minAmount = newNumber;\r\n    }\r\n\r\n      function sum(uint8[] data) private returns (uint) {\r\n        uint S;\r\n        for(uint i;i < data.length;i++){\r\n            S += data[i];\r\n        }\r\n        return S;\r\n    }\r\n    \r\n    function setMyCut(uint256 win, uint256 lose) public onlyOwner {\r\n        myWinShare = win;\r\n        myLoseShare = lose;\r\n    }\r\n    \r\n    function determineNumber() private returns(uint8) {\r\n        \r\n        \r\n        winningNumber = uint8(sum(allnumbers)/allnumbers.length/3*2);\r\n       \r\n    }\r\n    \r\n    function determineWinner() public onlyOwner returns(uint8, address[]){\r\n        require (state == LotteryState.Finished);\r\n        determineNumber();\r\n       winnerlist = whosDaWinner[winningNumber];\r\n       if (winnerlist.length > 0){\r\n           owner.transfer(this.balance/100*myWinShare);\r\n           uint256 numwinners = winnerlist.length;\r\n           for (uint8 i =0; i<numwinners; i++){\r\n               \r\n               winnerlist[i].transfer(this.balance/numwinners);\r\n           }\r\n       } else {\r\n           owner.transfer(this.balance/100*myLoseShare);\r\n       }\r\n         return (winningNumber, winnerlist);\r\n        \r\n        \r\n    }\r\n    \r\n    function getNumAdd(uint8 num) public view returns(address[]) {\r\n        return whosDaWinner[num];\r\n        \r\n    }\r\n    \r\n    function getResults() public view returns(uint8, address[]){\r\n        return (winningNumber, winnerlist);\r\n    }\r\n    function startOver() public onlyOwner{\r\n      //  uint8 i = number;\r\n      for (uint8 i=0; i<allnumbers.length; i++){\r\n        delete (whosDaWinner[allnumbers[i]]);\r\n        //delete playerlist;\r\n        }\r\n    for (uint8 j=0;j<allplayers.length; j++){\r\n        delete mynumbers[allplayers[j]];\r\n        delete isActuallyAnAddressOnMyList[allplayers[j]];\r\n    }\r\n        delete allplayers;\r\n        delete allnumbers;\r\n        delete winnerlist;\r\n        \r\n        state = LotteryState.Accepting;\r\n        roundnum ++;\r\n        \r\n        \r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxnumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumber\",\"type\":\"uint8\"}],\"name\":\"setMaxNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"determineWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWinShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mynumber\",\"type\":\"uint8\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"check\",\"type\":\"address\"}],\"name\":\"isAddress\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeMyNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumber\",\"type\":\"uint8\"}],\"name\":\"setMaxPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundnum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeAllPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seeAllNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myLoseShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"lose\",\"type\":\"uint256\"}],\"name\":\"setMyCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"getNumAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Guess23","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5712a5206fa16475354e670f57020aa0fb4c18bc8a12e8b6a0cb24ce15196e74"}]}