{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract IController is Pausable {\r\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\r\n\r\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\r\n    function updateController(bytes32 _id, address _controller) external;\r\n    function getContract(bytes32 _id) public view returns (address);\r\n}\r\n\r\ncontract IManager {\r\n    event SetController(address controller);\r\n    event ParameterUpdate(string param);\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\ncontract Manager is IManager {\r\n    // Controller that contract is registered with\r\n    IController public controller;\r\n\r\n    // Check if sender is controller\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    // Check if sender is controller owner\r\n    modifier onlyControllerOwner() {\r\n        require(msg.sender == controller.owner());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is not paused\r\n    modifier whenSystemNotPaused() {\r\n        require(!controller.paused());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is paused\r\n    modifier whenSystemPaused() {\r\n        require(controller.paused());\r\n        _;\r\n    }\r\n\r\n    function Manager(address _controller) public {\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    /*\r\n     * @dev Set controller. Only callable by current controller\r\n     * @param _controller Controller contract address\r\n     */\r\n    function setController(address _controller) external onlyController {\r\n        controller = IController(_controller);\r\n\r\n        SetController(_controller);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface for a Verifier. Can be backed by any implementaiton including oracles or Truebit\r\n */\r\ncontract IVerifier {\r\n    function verify(\r\n        uint256 _jobId,\r\n        uint256 _claimId,\r\n        uint256 _segmentNumber,\r\n        string _transcodingOptions,\r\n        string _dataStorageHash,\r\n        bytes32[2] _dataHashes\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function getPrice() public view returns (uint256);\r\n}\r\n\r\n/*\r\n * @title Interface for contract that receives verification results\r\n */\r\ncontract IVerifiable {\r\n    // External functions\r\n    function receiveVerification(uint256 _jobId, uint256 _claimId, uint256 _segmentNumber, bool _result) external;\r\n}\r\n\r\n/**\r\n * @title LivepeerVerifier\r\n * @dev Manages transcoding verification requests that are processed by a trusted solver\r\n */\r\ncontract LivepeerVerifier is Manager, IVerifier {\r\n    // IPFS hash of verification computation archive\r\n    string public verificationCodeHash;\r\n    // Solver that can submit results for requests\r\n    address public solver;\r\n\r\n    struct Request {\r\n        uint256 jobId;\r\n        uint256 claimId;\r\n        uint256 segmentNumber;\r\n        bytes32 commitHash;\r\n    }\r\n\r\n    mapping (uint256 => Request) public requests;\r\n    uint256 public requestCount;\r\n\r\n    event VerifyRequest(uint256 indexed requestId, uint256 indexed jobId, uint256 indexed claimId, uint256 segmentNumber, string transcodingOptions, string dataStorageHash, bytes32 dataHash, bytes32 transcodedDataHash);\r\n    event Callback(uint256 indexed requestId, uint256 indexed jobId, uint256 indexed claimId, uint256 segmentNumber, bool result);\r\n    event SolverUpdate(address solver);\r\n\r\n    // Check if sender is JobsManager\r\n    modifier onlyJobsManager() {\r\n        require(msg.sender == controller.getContract(keccak256(\"JobsManager\")));\r\n        _;\r\n    }\r\n\r\n    // Check if sender is a solver\r\n    modifier onlySolver() {\r\n        require(msg.sender == solver);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev LivepeerVerifier constructor\r\n     * @param _controller Controller address\r\n     * @param _solver Solver address to register\r\n     * @param _verificationCodeHash Content addressed hash specifying location of transcoding verification code\r\n     */\r\n    function LivepeerVerifier(address _controller, address _solver, string _verificationCodeHash) public Manager(_controller) {\r\n        // Solver must not be null address\r\n        require(_solver != address(0));\r\n        // Set solver\r\n        solver = _solver;\r\n        // Set verification code hash\r\n        verificationCodeHash = _verificationCodeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Set content addressed hash specifying location of transcoding verification code. Only callable by Controller owner\r\n     * @param _verificationCodeHash Content addressed hash specifying location of transcoding verification code\r\n     */\r\n    function setVerificationCodeHash(string _verificationCodeHash) external onlyControllerOwner {\r\n        verificationCodeHash = _verificationCodeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Set registered solver address that is allowed to submit the result of transcoding verification computation\r\n     * via `__callback()`. Only callable by Controller owner\r\n     * @param _solver Solver address to register\r\n     */\r\n    function setSolver(address _solver) external onlyControllerOwner {\r\n        // Must not be null address\r\n        require(_solver != address(0));\r\n\r\n        solver = _solver;\r\n\r\n        SolverUpdate(_solver);\r\n    }\r\n\r\n    /**\r\n     * @dev Fire VerifyRequest event which solvers should listen for to retrieve verification parameters\r\n     */\r\n    function verify(\r\n        uint256 _jobId,\r\n        uint256 _claimId,\r\n        uint256 _segmentNumber,\r\n        string _transcodingOptions,\r\n        string _dataStorageHash,\r\n        bytes32[2] _dataHashes\r\n    )\r\n        external\r\n        payable\r\n        onlyJobsManager\r\n        whenSystemNotPaused\r\n    {\r\n        // Store request parameters\r\n        requests[requestCount].jobId = _jobId;\r\n        requests[requestCount].claimId = _claimId;\r\n        requests[requestCount].segmentNumber = _segmentNumber;\r\n        requests[requestCount].commitHash = keccak256(_dataHashes[0], _dataHashes[1]);\r\n\r\n        VerifyRequest(\r\n            requestCount,\r\n            _jobId,\r\n            _claimId,\r\n            _segmentNumber,\r\n            _transcodingOptions,\r\n            _dataStorageHash,\r\n            _dataHashes[0],\r\n            _dataHashes[1]\r\n        );\r\n\r\n        // Update request count\r\n        requestCount++;\r\n    }\r\n\r\n    /**\r\n     * @dev Callback function invoked by a solver to submit the result of a verification computation\r\n     * @param _requestId Request identifier\r\n     * @param _result Result of verification computation - keccak256 hash of transcoded segment data\r\n     */\r\n    // solium-disable-next-line mixedcase\r\n    function __callback(uint256 _requestId, bytes32 _result) external onlySolver whenSystemNotPaused {\r\n        Request memory q = requests[_requestId];\r\n\r\n        // Check if transcoded data hash returned by solver matches originally submitted transcoded data hash\r\n        if (q.commitHash == _result) {\r\n            IVerifiable(controller.getContract(keccak256(\"JobsManager\"))).receiveVerification(q.jobId, q.claimId, q.segmentNumber, true);\r\n            Callback(_requestId, q.jobId, q.claimId, q.segmentNumber, true);\r\n        } else {\r\n            IVerifiable(controller.getContract(keccak256(\"JobsManager\"))).receiveVerification(q.jobId, q.claimId, q.segmentNumber, false);\r\n            Callback(_requestId, q.jobId, q.claimId, q.segmentNumber, false);\r\n        }\r\n\r\n        // Remove request\r\n        delete requests[_requestId];\r\n    }\r\n\r\n    /**\r\n     * @dev Return price of verification which is zero for this implementation\r\n     */\r\n    function getPrice() public view returns (uint256) {\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_solver\",\"type\":\"address\"}],\"name\":\"setSolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verificationCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_verificationCodeHash\",\"type\":\"string\"}],\"name\":\"setVerificationCodeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"solver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"name\":\"jobId\",\"type\":\"uint256\"},{\"name\":\"claimId\",\"type\":\"uint256\"},{\"name\":\"segmentNumber\",\"type\":\"uint256\"},{\"name\":\"commitHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"uint256\"},{\"name\":\"_claimId\",\"type\":\"uint256\"},{\"name\":\"_segmentNumber\",\"type\":\"uint256\"},{\"name\":\"_transcodingOptions\",\"type\":\"string\"},{\"name\":\"_dataStorageHash\",\"type\":\"string\"},{\"name\":\"_dataHashes\",\"type\":\"bytes32[2]\"}],\"name\":\"verify\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"bytes32\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_solver\",\"type\":\"address\"},{\"name\":\"_verificationCodeHash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"segmentNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transcodingOptions\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataStorageHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"transcodedDataHash\",\"type\":\"bytes32\"}],\"name\":\"VerifyRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"segmentNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Callback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"SolverUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"}]","ContractName":"LivepeerVerifier","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3000000000000000000000000c613674f1876eeb89821bcaa9cfc5b9299bacbf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002e516d554d6b31774636596d464c4679796468535667654e43534b6b344a38473338447a547a637836466459537a56000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e760cd587186cc9fb39eb724c640d00472d97399f416338209f39d3369e709e4"}]}