{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n    }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract AbstractERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public constant returns (uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns (bool _success);\r\n    function allowance(address owner, address spender) public constant returns (uint256 _value);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\r\n    function approve(address spender, uint256 value) public returns (bool _success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract LiquidToken is Ownable, AbstractERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    address public teamWallet;\r\n    address public advisorsWallet;\r\n    address public founderWallet;\r\n    address public bountyWallet;\r\n    \r\n    mapping (address => uint256) public balances;\r\n    /// The transfer allowances\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    mapping(address => bool) public isTeamOrAdvisorsOrFounder;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    constructor() public {\r\n    \r\n        name = \"Liquid\";\r\n        symbol = \"LIQUID\";\r\n        decimals = 18;\r\n        totalSupply = 58e6 * 10**18;    // 58 million tokens\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(0x0, owner, totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Check balance of given account address\r\n    * @param owner The address account whose balance you want to know\r\n    * @return balance of the account\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256){\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address (written due to backward compatibility)\r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * return bool true=> transfer is succesful\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\r\n        require(to != address(0x0));\r\n        require(value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address from which token is transferred \r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * @return bool true=> transfer is succesful\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(to != address(0x0));\r\n        require(value <= balances[from]);\r\n        require(value <= allowed[from][msg.sender]);\r\n        balances[from] = balances[from].sub(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value); \r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve function will delegate spender to spent tokens on msg.sender behalf\r\n    * @param spender ddress which is delegated\r\n    * @param value tokens amount which are delegated\r\n    * @return bool true=> approve is succesful\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev it will check amount of token delegated to spender by owner\r\n    * @param owner the address which allows someone to spend fund on his behalf\r\n    * @param spender address which is delegated\r\n    * @return return uint256 amount of tokens left with delegator\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev increment the spender delegated tokens\r\n    * @param spender address which is delegated\r\n    * @param valueToAdd tokens amount to increment\r\n    * @return bool true=> operation is succesful\r\n    */\r\n    function increaseApproval(address spender, uint valueToAdd) public returns (bool) {\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(valueToAdd);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev deccrement the spender delegated tokens\r\n    * @param spender address which is delegated\r\n    * @param valueToSubstract tokens amount to decrement\r\n    * @return bool true=> operation is succesful\r\n    */\r\n    function decreaseApproval(address spender, uint valueToSubstract) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][spender];\r\n        if (valueToSubstract > oldValue) {\r\n          allowed[msg.sender][spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][spender] = oldValue.sub(valueToSubstract);\r\n        }\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    *\r\n    */\r\n    function burn(address _who, uint256 _value) public onlyOwner {\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n    \r\n        /**\r\n    * @dev set team wallet, funds of team will be allocated to a account controlled by admin/founder\r\n    * @param _teamWallet address of bounty wallet.\r\n    *\r\n    */\r\n    function setTeamWallet (address _teamWallet) public onlyOwner returns (bool) {\r\n        require(_teamWallet   !=  address(0x0));\r\n        if(teamWallet ==  address(0x0)){  \r\n            teamWallet    =   _teamWallet;\r\n            balances[teamWallet]  =   4e6 * 10**18;\r\n            balances[owner] = balances[owner].sub(balances[teamWallet]);\r\n        }else{\r\n            address oldTeamWallet =   teamWallet;\r\n            teamWallet    =   _teamWallet;\r\n            balances[teamWallet]  =   balances[oldTeamWallet];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev set AdvisorsWallet, funds of team will be allocated to a account controlled by admin/founder\r\n    * @param _advisorsWallet address of Advisors wallet.\r\n    *\r\n    */\r\n    function setAdvisorsWallet (address _advisorsWallet) public onlyOwner returns (bool) {\r\n        require(_advisorsWallet   !=  address(0x0));\r\n        if(advisorsWallet ==  address(0x0)){  \r\n            advisorsWallet    =   _advisorsWallet;\r\n            balances[advisorsWallet]  =   2e6 * 10**18;\r\n            balances[owner] = balances[owner].sub(balances[teamWallet]);\r\n        }else{\r\n            address oldAdvisorsWallet =   advisorsWallet;\r\n            advisorsWallet    =   _advisorsWallet;\r\n            balances[advisorsWallet]  =   balances[oldAdvisorsWallet];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev set Founders wallet, funds of team will be allocated to a account controlled by admin/founder\r\n    * @param _founderWallet address of Founder wallet.\r\n    *\r\n    */\r\n    function setFoundersWallet (address _founderWallet) public onlyOwner returns (bool) {\r\n        require(_founderWallet   !=  address(0x0));\r\n        if(founderWallet ==  address(0x0)){  \r\n            founderWallet    =   _founderWallet;\r\n            balances[founderWallet]  =  8e6 * 10**18;\r\n            balances[owner] = balances[owner].sub(balances[founderWallet]);\r\n        }else{\r\n            address oldFounderWallet =   founderWallet;\r\n            founderWallet    =   _founderWallet;\r\n            balances[founderWallet]  =   balances[oldFounderWallet];\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev set bounty wallet\r\n    * @param _bountyWallet address of bounty wallet.\r\n    *\r\n    */\r\n    function setBountyWallet (address _bountyWallet) public onlyOwner returns (bool) {\r\n        require(_bountyWallet   !=  address(0x0));\r\n        if(bountyWallet ==  address(0x0)){  \r\n            bountyWallet    =   _bountyWallet;\r\n            balances[bountyWallet]  =   4e6 * 10**18;\r\n            balances[owner] = balances[owner].sub(balances[bountyWallet]);\r\n        }else{\r\n            address oldBountyWallet =   bountyWallet;\r\n            bountyWallet    =   _bountyWallet;\r\n            balances[bountyWallet]  =   balances[oldBountyWallet];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to Airdrop tokens from bounty wallet to contributors as long as there are enough balance.\r\n    * @param dests destination address of bounty beneficiary.\r\n    * @param values tokesn for beneficiary.\r\n    * @return number of address airdropped and True if the operation was successful.\r\n    */\r\n    function airdrop(address[] dests, uint256[] values) public onlyOwner returns (uint256, bool) {\r\n        require(dests.length == values.length);\r\n        uint8 i = 0;\r\n        while (i < dests.length && balances[bountyWallet] >= values[i]) {\r\n            balances[bountyWallet]  =   balances[bountyWallet].sub(values[i]);\r\n            balances[dests[i]]  =   balances[dests[i]].add(values[i]);\r\n            i += 1;\r\n        }\r\n        return (i, true);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to transferTokensToTeams tokens from Advisor wallet to contributors as long as there are enough balance.\r\n    * @param teamMember destination address of team beneficiary.\r\n    * @param values tokens for beneficiary.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function transferTokensToTeams(address teamMember, uint256 values) public onlyOwner returns (bool) {\r\n        require(teamMember != address(0));\r\n        require (values != 0);\r\n        balances[teamWallet]  =   balances[teamWallet].sub(values);\r\n        balances[teamMember]  =   balances[teamMember].add(values);\r\n        isTeamOrAdvisorsOrFounder[teamMember] = true;\r\n        return true;\r\n    }\r\n     \r\n    /**\r\n    * @dev Function to transferTokensToFounders tokens from Advisor wallet to contributors as long as there are enough balance.\r\n    * @param founder destination address of team beneficiary.\r\n    * @param values tokens for beneficiary.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function transferTokensToFounders(address founder, uint256 values) public onlyOwner returns (bool) {\r\n        require(founder != address(0));\r\n        require (values != 0);\r\n        balances[founderWallet]  =   balances[founderWallet].sub(values);\r\n        balances[founder]  =   balances[founder].add(values);\r\n        isTeamOrAdvisorsOrFounder[founder] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to transferTokensToAdvisors tokens from Advisor wallet to contributors as long as there are enough balance.\r\n    * @param advisor destination address of team beneficiary.\r\n    * @param values tokens for beneficiary.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function transferTokensToAdvisors(address advisor, uint256 values) public onlyOwner returns (bool) {\r\n        require(advisor != address(0));\r\n        require (values != 0);\r\n        balances[advisorsWallet]  =   balances[advisorsWallet].sub(values);\r\n        balances[advisor]  =   balances[advisor].add(values);\r\n        isTeamOrAdvisorsOrFounder[advisor] = true;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Crowdsale is LiquidToken {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address public ETHCollector;\r\n    uint256 public tokenCost = 140; //140 cents\r\n    uint256 public ETH_USD; //in cents\r\n    uint256 public saleStartDate;\r\n    uint256 public saleEndDate;\r\n    uint256 public softCap;\r\n    uint256 public hardCap; \r\n    uint256 public minContribution = 28000; //280$ =280,00 cent\r\n    uint256 public tokensSold;\r\n    uint256 public weiCollected;\r\n    //Number of investors who have received refund\r\n    uint256 public countInvestorsRefunded;\r\n    uint256 public countTotalInvestors;\r\n    // Whether the Crowdsale is paused.\r\n    bool public paused;\r\n    bool public start;\r\n    bool public stop;\r\n    //Set status of refund\r\n    bool public refundStatus;\r\n    \r\n    //Structure to store token sent and wei received by the buyer of tokens\r\n    struct Investor {\r\n        uint256 investorID;\r\n        uint256 weiReceived;\r\n        uint256 tokenSent;\r\n    }\r\n    \r\n    //investors indexed by their ETH address\r\n    mapping(address => Investor) public investors;\r\n    mapping(address => bool) public isinvestor;\r\n    mapping(address => bool) public whitelist;\r\n    //investors indexed by their IDs\r\n    mapping(uint256 => address) public investorList;\r\n\r\n    //event to log token supplied\r\n    event TokenSupplied(address beneficiary, uint256 tokens, uint256 value);   \r\n    event RefundedToInvestor(address indexed beneficiary, uint256 weiAmount);\r\n    event NewSaleEndDate(uint256 endTime);\r\n    event StateChanged(bool changed);\r\n\r\n    modifier respectTimeFrame() {\r\n        require (start);\r\n        require(!paused);\r\n        require(now >= saleStartDate);\r\n        require(now <= saleEndDate);\r\n       _;\r\n    }\r\n\r\n    constructor(address _ETHCollector) public {\r\n        ETHCollector = _ETHCollector;    \r\n        hardCap = 40e6 * 10**18;\r\n        softCap = 2e6 * 10**18;\r\n        //Initially no investor has been refunded\r\n        countInvestorsRefunded = 0;\r\n        //Refund eligible or not\r\n        refundStatus = false;\r\n    }\r\n    \r\n    //transfer ownership with token balance\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        super.transfer(_newOwner, balances[owner]);\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n     //function to start sale\r\n    function startSale(uint256 _saleStartDate, uint256 _saleEndDate, uint256 _newETH_USD) public onlyOwner{\r\n       require (_saleStartDate < _saleEndDate);\r\n       require (now <= _saleStartDate);\r\n       assert(!start);\r\n       saleStartDate = _saleStartDate;\r\n       saleEndDate = _saleEndDate;  \r\n       start = true; \r\n       ETH_USD = _newETH_USD;\r\n    }\r\n\r\n    //function to finalize sale\r\n    function finalizeSale() public onlyOwner{\r\n        assert(start);\r\n        //end sale only when tokens is not sold and sale time is over OR,\r\n        //end time is not over and all tokens are sold\r\n        assert(!(tokensSold < hardCap && now < saleEndDate) || (hardCap.sub(tokensSold) <= 1e18));  \r\n        if(!softCapReached()){\r\n            refundStatus = true;\r\n        }\r\n        start = false;\r\n        stop = true;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to stopInEmergency , triggers stopped state\r\n    */\r\n    function stopInEmergency() onlyOwner public {\r\n        require(!paused);\r\n        paused = true;\r\n        emit StateChanged(true);\r\n    }\r\n\r\n    /**\r\n    * @dev after stopping crowdsale, the contract owner can release the crowdsale\r\n    * \r\n    */\r\n    function release() onlyOwner public {\r\n        require(paused);\r\n        paused = false;\r\n        emit StateChanged(true);\r\n    }\r\n\r\n    //function to set ETH_USD rate in cent. Eg: 1 ETH = 300 USD so we need to pass 300,00 cents\r\n    function setETH_USDRate(uint256 _newETH_USD) public onlyOwner {\r\n        require(_newETH_USD > 0);\r\n        ETH_USD = _newETH_USD;\r\n    }\r\n\r\n    //function to change token cost\r\n    function changeTokenCost(uint256 _tokenCost) public onlyOwner {\r\n        require(_tokenCost > 0);\r\n        tokenCost = _tokenCost;\r\n    }\r\n\r\n    //funcion to change minContribution\r\n    //_minContribution parameter should be in cent \r\n    function changeMinContribution(uint256 _minContribution) public onlyOwner {\r\n        require(_minContribution > 0);\r\n        minContribution = _minContribution;\r\n    }\r\n\r\n    //function to increase time\r\n    function extendTime(uint256 _newEndSaleDate) onlyOwner public {\r\n        //current time should always be less than endTime+extendedTime\r\n        require(saleEndDate < _newEndSaleDate);\r\n        require(_newEndSaleDate != 0);\r\n        saleEndDate = _newEndSaleDate;\r\n        emit NewSaleEndDate(saleEndDate);\r\n    }\r\n    \r\n    \r\n    // function to add single whitelist\r\n    function addWhitelistAddress(address addr) public onlyOwner{\r\n        require (!whitelist[addr]); \r\n        require(addr != address(0x0));\r\n        // owner approves buyers by address when they pass the whitelisting procedure\r\n        whitelist[addr] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @return true if at least one address was added to the whitelist,\r\n    * false if all addresses were already in the whitelist\r\n    */\r\n    function addWhitelistAddresses(address[] _addrs) public onlyOwner{\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n            addWhitelistAddress(_addrs[i]);        \r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool){\r\n        if(isinvestor[msg.sender]){\r\n            //sale has ended\r\n            require(stop);\r\n            super.transfer(to, value);\r\n        }\r\n        \r\n        else if(isTeamOrAdvisorsOrFounder[msg.sender]){\r\n            //180 days = 6 months\r\n            require(now > saleEndDate.add(180 days));\r\n            super.transfer(to, value);\r\n        }\r\n        else {\r\n            super.transfer(to, value);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool){\r\n        if(isinvestor[from]){\r\n            //sale has ended\r\n            require(stop);\r\n            super.transferFrom(from, to, value);\r\n        } \r\n         else if(isTeamOrAdvisorsOrFounder[from]){\r\n            //180 days = 6 months\r\n            require(now > saleEndDate.add(180 days));\r\n            super.transferFrom(from,to, value);\r\n        } \r\n        else {\r\n           super.transferFrom(from, to, value);\r\n        }\r\n    }\r\n    \r\n    //function to buy tokens\r\n    function buyTokens (address beneficiary) public payable respectTimeFrame {\r\n        // only approved buyers can call this function\r\n        require(whitelist[beneficiary]);\r\n        // No contributions below the minimum\r\n        require(msg.value >= getMinContributionInWei());\r\n\r\n        uint256 tokenToTransfer = getTokens(msg.value);\r\n\r\n        // Check if the CrowdSale hard cap will be exceeded\r\n        require(tokensSold.add(tokenToTransfer) <= hardCap);\r\n        tokensSold = tokensSold.add(tokenToTransfer);\r\n\r\n        //initializing structure for the address of the beneficiary\r\n        Investor storage investorStruct = investors[beneficiary];\r\n\r\n        //Update investor's balance\r\n        investorStruct.tokenSent = investorStruct.tokenSent.add(tokenToTransfer);\r\n        investorStruct.weiReceived = investorStruct.weiReceived.add(msg.value);\r\n\r\n        //If it is a new investor, then create a new id\r\n        if(investorStruct.investorID == 0){\r\n            countTotalInvestors++;\r\n            investorStruct.investorID = countTotalInvestors;\r\n            investorList[countTotalInvestors] = beneficiary;\r\n        }\r\n\r\n        isinvestor[beneficiary] = true;\r\n        ETHCollector.transfer(msg.value);\r\n        \r\n        weiCollected = weiCollected.add(msg.value);\r\n        \r\n        balances[owner] = balances[owner].sub(tokenToTransfer);\r\n        balances[beneficiary] = balances[beneficiary].add(tokenToTransfer);\r\n\r\n        emit TokenSupplied(beneficiary, tokenToTransfer, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev payable function to accept ether.\r\n    *\r\n    */\r\n    function () external payable  {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n    * Refund the investors in case target of crowdsale not achieved\r\n    */\r\n    function refund() public onlyOwner {\r\n        assert(refundStatus);\r\n        uint256 batchSize = countInvestorsRefunded.add(50) < countTotalInvestors ? countInvestorsRefunded.add(50): countTotalInvestors;\r\n        for(uint256 i = countInvestorsRefunded.add(1); i <= batchSize; i++){\r\n            address investorAddress = investorList[i];\r\n            Investor storage investorStruct = investors[investorAddress];\r\n            //return everything\r\n            investorAddress.transfer(investorStruct.weiReceived);\r\n            //burn investor tokens and total supply isTeamOrAdvisorsOrFounder\r\n            burn(investorAddress, investorStruct.tokenSent);\r\n            //set everything to zero after transfer successful\r\n            investorStruct.weiReceived = 0;\r\n            investorStruct.tokenSent = 0;\r\n        }\r\n        //Update the number of investors that have recieved refund\r\n        countInvestorsRefunded = batchSize;\r\n    }\r\n\r\n    /*\r\n    * Failsafe drain\r\n    */\r\n    function drain() public onlyOwner {\r\n        ETHCollector.transfer(address(this).balance);\r\n    }\r\n\r\n    /*\r\n    * Function to add Ether in the contract \r\n    */\r\n    function fundContractForRefund()public payable{\r\n    }\r\n\r\n    /**\r\n    *\r\n    *getter functions\r\n    *\r\n    *\r\n    */\r\n    //function to return the number of tokens sent to investor\r\n    \r\n    function getTokens(uint256 weiReceived) internal view returns(uint256){\r\n        uint256 tokens;\r\n        //Token Sale Stage 1 = Dates Start 10/15/18 End 10/31/18 35% discount\r\n        if(now >= saleStartDate && now <= saleStartDate.add(10 days)){\r\n            tokens = getTokensForWeiReceived(weiReceived);\r\n            tokens = tokens.mul(100 + 60) / 100;\r\n        //Token Sale Stage 2 = Dates Start 11/1/18 End 11/15/18 20% discount    \r\n        }else if (now > saleStartDate.add(10 days) && now <= saleStartDate.add(25 days)){\r\n            tokens = getTokensForWeiReceived(weiReceived);\r\n            tokens = tokens.mul(100 + 50) / 100;\r\n        //Token Sale Stage 3 = Dates Start 11/16/18 End 11/30/18 No discount    \r\n        }else if (now > saleStartDate.add(25 days)  && now <= saleEndDate){\r\n            tokens = getTokensForWeiReceived(weiReceived);\r\n            tokens = tokens.mul(100 + 30) / 100;\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    //function to get tokens number for eth send\r\n    function getTokensForWeiReceived(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(ETH_USD).div(tokenCost);\r\n    }\r\n\r\n    //function to check softcap reached or not\r\n    function softCapReached() view public returns(bool) {\r\n        return tokensSold >= softCap;\r\n    }\r\n\r\n    //getSaleStage will return current sale stage\r\n    function getSaleStage() view public returns(uint8){\r\n        if(now >= saleStartDate && now <= saleStartDate.add(10 days)){\r\n            return 1;\r\n        }else if(now > saleStartDate.add(10 days) && now <= saleStartDate.add(25 days)){\r\n            return 2;\r\n        }else if (now > saleStartDate.add(25 days)  && now <= saleEndDate){\r\n            return 3;\r\n        }\r\n    }\r\n    \r\n    //get minimum contribution in wei\r\n     function getMinContributionInWei() public view returns(uint256){\r\n        return (minContribution.mul(1e18)).div(ETH_USD);\r\n    }\r\n    \r\n    //is address whitelisted\r\n    function isAddressWhitelisted(address addr) public view returns(bool){\r\n        return whitelist[addr];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeamOrAdvisorsOrFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleStartDate\",\"type\":\"uint256\"},{\"name\":\"_saleEndDate\",\"type\":\"uint256\"},{\"name\":\"_newETH_USD\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founderWallet\",\"type\":\"address\"}],\"name\":\"setFoundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopInEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advisor\",\"type\":\"address\"},{\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"transferTokensToAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestorsRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founder\",\"type\":\"address\"},{\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"transferTokensToFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countTotalInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContractForRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"valueToSubstract\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"investorID\",\"type\":\"uint256\"},{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"tokenSent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isinvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenCost\",\"type\":\"uint256\"}],\"name\":\"changeTokenCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyWallet\",\"type\":\"address\"}],\"name\":\"setBountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newETH_USD\",\"type\":\"uint256\"}],\"name\":\"setETH_USDRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinContributionInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndSaleDate\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minContribution\",\"type\":\"uint256\"}],\"name\":\"changeMinContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamMember\",\"type\":\"address\"},{\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"transferTokensToTeams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"valueToAdd\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisorsWallet\",\"type\":\"address\"}],\"name\":\"setAdvisorsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ETHCollector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"RefundedToInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"NewSaleEndDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"changed\",\"type\":\"bool\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004fb93629d539f4fedcc3db1b6ae22e74f70bdd36","Library":"","SwarmSource":"bzzr://b0a1b0076a87c9c426152588752d9940ca9b2aa1bcc81c745204c9e112eb0bc3"}]}