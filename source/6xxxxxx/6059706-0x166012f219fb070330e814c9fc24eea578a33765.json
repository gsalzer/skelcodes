{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n\r\n    event Pause(uint256 _timestammp);\r\n    event Unpause(uint256 _timestamp);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @notice called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal {\r\n        require(!paused);\r\n        paused = true;\r\n        emit Pause(now);\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal {\r\n        require(paused);\r\n        paused = false;\r\n        emit Unpause(now);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for the ST20 token standard\r\n */\r\ncontract IST20 is StandardToken, DetailedERC20 {\r\n\r\n    // off-chain hash\r\n    string public tokenDetails;\r\n\r\n    //transfer, transferFrom must respect use respect the result of verifyTransfer\r\n    function verifyTransfer(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice mints new tokens and assigns them to the target _investor.\r\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\r\n     */\r\n    function mint(address _investor, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice Burn function used to burn the securityToken\r\n     * @param _value No. of token that get burned\r\n     */\r\n    function burn(uint256 _value) public;\r\n\r\n    event Minted(address indexed to, uint256 amount);\r\n    event Burnt(address indexed _burner, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ncontract ISecurityToken is IST20, Ownable {\r\n\r\n    uint8 public constant PERMISSIONMANAGER_KEY = 1;\r\n    uint8 public constant TRANSFERMANAGER_KEY = 2;\r\n    uint8 public constant STO_KEY = 3;\r\n    uint8 public constant CHECKPOINT_KEY = 4;\r\n    uint256 public granularity;\r\n\r\n    // Value of current checkpoint\r\n    uint256 public currentCheckpointId;\r\n\r\n    // Total number of non-zero token holders\r\n    uint256 public investorCount;\r\n\r\n    // List of token holders\r\n    address[] public investors;\r\n\r\n    // Permissions this to a Permission module, which has a key of 1\r\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\r\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool);\r\n\r\n    /**\r\n     * @notice returns module list for a module type\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _moduleIndex is the index of the module within the chosen type\r\n     */\r\n    function getModule(uint8 _moduleType, uint _moduleIndex) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice returns module list for a module name - will return first match\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _name is the name of the module within the chosen type\r\n     */\r\n    function getModuleByName(uint8 _moduleType, bytes32 _name) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice Queries totalSupply as of a defined checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Queries balances as of a defined checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() public returns(uint256);\r\n\r\n    /**\r\n     * @notice gets length of investors array\r\n     * NB - this length may differ from investorCount if list has not been pruned of zero balance investors\r\n     * @return length\r\n     */\r\n    function getInvestorsLength() public view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module factory contract should implement\r\n */\r\ncontract IModuleFactory is Ownable {\r\n\r\n    ERC20 public polyToken;\r\n    uint256 public setupCost;\r\n    uint256 public usageCost;\r\n    uint256 public monthlySubscriptionCost;\r\n\r\n    event LogChangeFactorySetupFee(uint256 _oldSetupcost, uint256 _newSetupCost, address _moduleFactory);\r\n    event LogChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\r\n    event LogChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\r\n    event LogGenerateModuleFromFactory(address _module, bytes32 indexed _moduleName, address indexed _moduleFactory, address _creator, uint256 _timestamp);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\r\n      polyToken = ERC20(_polyAddress);\r\n      setupCost = _setupCost;\r\n      usageCost = _usageCost;\r\n      monthlySubscriptionCost = _subscriptionCost;\r\n    }\r\n\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes _data) external returns(address);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getType() public view returns(uint8);\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() public view returns(bytes32);\r\n\r\n    /**\r\n     * @notice Get the description of the Module\r\n     */\r\n    function getDescription() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the title of the Module\r\n     */\r\n    function getTitle() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the Instructions that helped to used the module\r\n     */\r\n    function getInstructions() public view returns (string);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() public view returns (bytes32[]);\r\n\r\n    //Pull function sig from _data\r\n    function getSig(bytes _data) internal pure returns (bytes4 sig) {\r\n        uint len = _data.length < 4 ? _data.length : 4;\r\n        for (uint i = 0; i < len; i++) {\r\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the setup cost\r\n     * @param _newSetupCost new setup cost\r\n     */\r\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\r\n        emit LogChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\r\n        setupCost = _newSetupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the usage cost\r\n     * @param _newUsageCost new usage cost\r\n     */\r\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\r\n        emit LogChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\r\n        usageCost = _newUsageCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the subscription cost\r\n     * @param _newSubscriptionCost new subscription cost\r\n     */\r\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\r\n        emit LogChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\r\n        monthlySubscriptionCost = _newSubscriptionCost;\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module contract should implement\r\n */\r\ncontract IModule {\r\n\r\n    address public factory;\r\n\r\n    address public securityToken;\r\n\r\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\r\n\r\n    ERC20 public polyToken;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public {\r\n        securityToken = _securityToken;\r\n        factory = msg.sender;\r\n        polyToken = ERC20(_polyAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns (bytes4);\r\n\r\n    //Allows owner, factory or permissioned delegate\r\n    modifier withPerm(bytes32 _perm) {\r\n        bool isOwner = msg.sender == ISecurityToken(securityToken).owner();\r\n        bool isFactory = msg.sender == factory;\r\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == ISecurityToken(securityToken).owner(), \"Sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, \"Sender is not factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOwner {\r\n        require(msg.sender == IModuleFactory(factory).owner(), \"Sender is not factory owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with Module\r\n     */\r\n    function getPermissions() public view returns(bytes32[]);\r\n\r\n    /**\r\n     * @notice used to withdraw the fee by the factory owner\r\n     */\r\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\r\n        require(polyToken.transferFrom(address(this), IModuleFactory(factory).owner(), _amount), \"Unable to take fee\");\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface to be implemented by all STO modules\r\n */\r\ncontract ISTO is IModule, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum FundraiseType { ETH, POLY }\r\n    FundraiseType public fundraiseType;\r\n\r\n    // Start time of the STO\r\n    uint256 public startTime;\r\n    // End time of the STO\r\n    uint256 public endTime;\r\n\r\n    /**\r\n     * @notice use to verify the investment, whether the investor provide the allowance to the STO or not.\r\n     * @param _beneficiary Ethereum address of the beneficiary, who wants to buy the st-20\r\n     * @param _fundsAmount Amount invested by the beneficiary\r\n     */\r\n    function verifyInvestment(address _beneficiary, uint256 _fundsAmount) public view returns(bool) {\r\n        return polyToken.allowance(_beneficiary, address(this)) >= _fundsAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Return ETH raised by the STO\r\n     */\r\n    function getRaisedEther() public view returns (uint256);\r\n\r\n    /**\r\n     * @notice Return POLY raised by the STO\r\n     */\r\n    function getRaisedPOLY() public view returns (uint256);\r\n\r\n    /**\r\n     * @notice Return the total no. of investors\r\n     */\r\n    function getNumberInvestors() public view returns (uint256);\r\n\r\n    /**\r\n     * @notice pause (overridden function)\r\n     */\r\n    function pause() public onlyOwner {\r\n        require(now < endTime);\r\n        super._pause();\r\n    }\r\n\r\n    /**\r\n     * @notice unpause (overridden function)\r\n     */\r\n    function unpause(uint256 _newEndDate) public onlyOwner {\r\n        require(_newEndDate >= endTime);\r\n        super._unpause();\r\n        endTime = _newEndDate;\r\n    }\r\n\r\n    /**\r\n    * @notice Reclaim ERC20Basic compatible tokens\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external onlyOwner {\r\n        require(_tokenContract != address(0));\r\n        ERC20Basic token = ERC20Basic(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(msg.sender, balance));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title STO module for standard capped crowdsale\r\n */\r\ncontract CappedSTO is ISTO, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // Address where funds are collected and tokens are issued to\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei / base unit of POLY\r\n    uint256 public rate;\r\n\r\n    // Amount of funds raised\r\n    uint256 public fundsRaised;\r\n\r\n    uint256 public investorCount;\r\n\r\n    // Amount of tokens sold\r\n    uint256 public tokensSold;\r\n\r\n    //How many tokens this STO will be allowed to sell to investors\r\n    uint256 public cap;\r\n\r\n    mapping (address => uint256) public investors;\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    constructor (address _securityToken, address _polyAddress) public\r\n    IModule(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    //////////////////////////////////\r\n    /**\r\n    * @notice fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Function used to intialize the contract variables\r\n     * @param _startTime Unix timestamp at which offering get started\r\n     * @param _endTime Unix timestamp at which offering get ended\r\n     * @param _cap Maximum No. of tokens for sale\r\n     * @param _rate Token units a buyer gets per wei / base unit of POLY\r\n     * @param _fundRaiseType Type of currency used to collect the funds\r\n     * @param _fundsReceiver Ethereum account address to hold the funds\r\n     */\r\n    function configure(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _cap,\r\n        uint256 _rate,\r\n        uint8 _fundRaiseType,\r\n        address _fundsReceiver\r\n    )\r\n    public\r\n    onlyFactory\r\n    {\r\n        require(_rate > 0, \"Rate of token should be greater than 0\");\r\n        require(_fundsReceiver != address(0), \"Zero address is not permitted\");\r\n        require(_startTime >= now && _endTime > _startTime, \"Date parameters are not valid\");\r\n        require(_cap > 0, \"Cap should be greater than 0\");\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        cap = _cap;\r\n        rate = _rate;\r\n        wallet = _fundsReceiver;\r\n        _check(_fundRaiseType);\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns (bytes4) {\r\n        return bytes4(keccak256(\"configure(uint256,uint256,uint256,uint256,uint8,address)\"));\r\n    }\r\n\r\n    /**\r\n      * @notice low level token purchase ***DO NOT OVERRIDE***\r\n      * @param _beneficiary Address performing the token purchase\r\n      */\r\n    function buyTokens(address _beneficiary) public payable nonReentrant {\r\n        require(!paused);\r\n        require(fundraiseType == FundraiseType.ETH, \"ETH should be the mode of investment\");\r\n\r\n        uint256 weiAmount = msg.value;\r\n        _processTx(_beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n      * @notice low level token purchase\r\n      * @param _investedPOLY Amount of POLY invested\r\n      */\r\n    function buyTokensWithPoly(uint256 _investedPOLY) public nonReentrant{\r\n        require(!paused);\r\n        require(fundraiseType == FundraiseType.POLY, \"POLY should be the mode of investment\");\r\n        require(verifyInvestment(msg.sender, _investedPOLY), \"Not valid Investment\");\r\n        _processTx(msg.sender, _investedPOLY);\r\n        _forwardPoly(msg.sender, wallet, _investedPOLY);\r\n        _postValidatePurchase(msg.sender, _investedPOLY);\r\n    }\r\n\r\n    /**\r\n    * @notice Checks whether the cap has been reached.\r\n    * @return bool Whether the cap was reached\r\n    */\r\n    function capReached() public view returns (bool) {\r\n        return tokensSold >= cap;\r\n    }\r\n\r\n    /**\r\n     * @notice Return ETH raised by the STO\r\n     */\r\n    function getRaisedEther() public view returns (uint256) {\r\n        if (fundraiseType == FundraiseType.ETH)\r\n            return fundsRaised;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Return POLY raised by the STO\r\n     */\r\n    function getRaisedPOLY() public view returns (uint256) {\r\n        if (fundraiseType == FundraiseType.POLY)\r\n            return fundsRaised;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of investors\r\n     */\r\n    function getNumberInvestors() public view returns (uint256) {\r\n        return investorCount;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with STO\r\n     */\r\n    function getPermissions() public view returns(bytes32[]) {\r\n        bytes32[] memory allPermissions = new bytes32[](0);\r\n        return allPermissions;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the STO details\r\n     */\r\n    function getSTODetails() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (\r\n            startTime,\r\n            endTime,\r\n            cap,\r\n            rate,\r\n            fundsRaised,\r\n            investorCount,\r\n            tokensSold,\r\n            (fundraiseType == FundraiseType.POLY)\r\n        );\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n    /**\r\n      * Processing the purchase as well as verify the required validations\r\n      * @param _beneficiary Address performing the token purchase\r\n      * @param _investedAmount Value in wei involved in the purchase\r\n    */\r\n    function _processTx(address _beneficiary, uint256 _investedAmount) internal {\r\n\r\n        _preValidatePurchase(_beneficiary, _investedAmount);\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(_investedAmount);\r\n\r\n        // update state\r\n        fundsRaised = fundsRaised.add(_investedAmount);\r\n        tokensSold = tokensSold.add(tokens);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, _beneficiary, _investedAmount, tokens);\r\n\r\n        _updatePurchasingState(_beneficiary, _investedAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Validation of an incoming purchase.\r\n      Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _investedAmount Value in wei involved in the purchase\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _investedAmount) internal view {\r\n        require(_beneficiary != address(0), \"Beneficiary address should not be 0x\");\r\n        require(_investedAmount != 0, \"Amount invested should not be equal to 0\");\r\n        require(tokensSold.add(_getTokenAmount(_investedAmount)) <= cap, \"Investment more than cap is not allowed\");\r\n        require(now >= startTime && now <= endTime, \"Offering is closed/Not yet started\");\r\n    }\r\n\r\n    /**\r\n    * @notice Validation of an executed purchase.\r\n      Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n    */\r\n    function _postValidatePurchase(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\r\n      // optional override\r\n    }\r\n\r\n    /**\r\n    * @notice Source of tokens.\r\n      Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _tokenAmount Number of tokens to be emitted\r\n    */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        require(IST20(securityToken).mint(_beneficiary, _tokenAmount), \"Error in minting the tokens\");\r\n    }\r\n\r\n    /**\r\n    * @notice Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _tokenAmount Number of tokens to be purchased\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        if (investors[_beneficiary] == 0) {\r\n            investorCount = investorCount + 1;\r\n        }\r\n        investors[_beneficiary] = investors[_beneficiary].add(_tokenAmount);\r\n\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Override for extensions that require an internal state to check for validity\r\n      (current user contributions, etc.)\r\n    */\r\n    function _updatePurchasingState(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\r\n      // optional override\r\n    }\r\n\r\n    /**\r\n    * @notice Override to extend the way in which ether is converted to tokens.\r\n    * @param _investedAmount Value in wei to be converted into tokens\r\n    * @return Number of tokens that can be purchased with the specified _investedAmount\r\n    */\r\n    function _getTokenAmount(uint256 _investedAmount) internal view returns (uint256) {\r\n        return _investedAmount.mul(rate);\r\n    }\r\n\r\n    /**\r\n    * @notice Determines how ETH is stored/forwarded on purchases.\r\n    */\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function used to check the type of fund raise currency\r\n     * @param _fundraiseType Type of currency used to collect the funds\r\n     */\r\n    function _check(uint8 _fundraiseType) internal {\r\n        require(_fundraiseType == 0 || _fundraiseType == 1, \"Not a valid fundraise type\");\r\n        if (_fundraiseType == 0) {\r\n            fundraiseType = FundraiseType.ETH;\r\n        }\r\n        if (_fundraiseType == 1) {\r\n            require(address(polyToken) != address(0), \"Address of the polyToken should not be 0x\");\r\n            fundraiseType = FundraiseType.POLY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function used to forward the POLY raised to beneficiary address\r\n     * @param _beneficiary Address of the funds reciever\r\n     * @param _to Address who wants to ST-20 tokens\r\n     * @param _fundsAmount Amount invested by _to\r\n     */\r\n    function _forwardPoly(address _beneficiary, address _to, uint256 _fundsAmount) internal {\r\n        polyToken.transferFrom(_beneficiary, _to, _fundsAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSTODetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaisedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"},{\"name\":\"_fundsReceiver\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaisedPOLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_fundsAmount\",\"type\":\"uint256\"}],\"name\":\"verifyInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investedPOLY\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithPoly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundraiseType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndDate\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_securityToken\",\"type\":\"address\"},{\"name\":\"_polyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestammp\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"CappedSTO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000118a0df120cfb097aad3a70914562f803a5be45c0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec","Library":"","SwarmSource":"bzzr://f4077275bbe3af1b73ea14080e64aa049dd6b641fa9acca9f4b90b03a14a6a66"}]}