{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract BREBuy {\r\n    \r\n    struct ContractParam {\r\n        uint32  totalSize ; \r\n        uint256 singlePrice;\r\n        uint8  pumpRate;\r\n        bool hasChange;\r\n    }\r\n    \r\n    address owner = 0x0;\r\n    uint32  gameIndex = 0;\r\n    uint256 totalPrice= 0;\r\n    bool isLock = false;\r\n    ContractParam public setConfig;\r\n    ContractParam public curConfig;\r\n    \r\n    address[] public addressArray = new address[](0);\r\n                    \r\n    event openLockEvent();\r\n    event addPlayerEvent(uint32 gameIndex,address player);\r\n    event gameOverEvent(uint32 gameIndex,uint32 totalSize,uint256 singlePrice,uint8 pumpRate,address winAddr,uint overTime);\r\n    event stopGameEvent(uint totalBalace,uint totalSize,uint price);\r\n          \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor ( uint32 _totalSize,\r\n                  uint256 _singlePrice\r\n    )  public  {\r\n        owner = msg.sender;\r\n        setConfig = ContractParam(_totalSize,_singlePrice * 1 finney ,5,false);\r\n        curConfig = ContractParam(_totalSize,_singlePrice * 1 finney ,5,false);\r\n        startNewGame();\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n     modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    function isNotContract(address addr) private view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size <= 0;\r\n    }\r\n\r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n       \r\n        isLock = b;\r\n       \r\n        if(isLock) {\r\n            stopGame();\r\n        }else{\r\n            startNewGame();\r\n            emit openLockEvent();\r\n        }\r\n    }\r\n    \r\n    function stopGame() onlyOwner private {\r\n      \r\n      if(addressArray.length <= 0) {\r\n          return;\r\n      }  \r\n      uint totalBalace = address(this).balance;\r\n      uint price = totalBalace / addressArray.length;\r\n      for(uint i = 0; i < addressArray.length; i++) {\r\n          address curPlayer =  addressArray[i];\r\n          curPlayer.transfer(price);\r\n      }\r\n      emit stopGameEvent(totalBalace,addressArray.length,price);\r\n      addressArray.length=0;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function changeConfig( uint32 _totalSize,uint256 _singlePrice,uint8 _pumpRate) onlyOwner public payable {\r\n    \r\n        curConfig.hasChange = true;\r\n        if(setConfig.totalSize != _totalSize) {\r\n            setConfig.totalSize = _totalSize;\r\n        }\r\n        if(setConfig.pumpRate  != _pumpRate){\r\n            setConfig.pumpRate  = _pumpRate;\r\n        }\r\n        if(setConfig.singlePrice != _singlePrice * 1 finney){\r\n            setConfig.singlePrice = _singlePrice * 1 finney;\r\n        }\r\n    }\r\n    \r\n    function startNewGame() private {\r\n        \r\n        gameIndex++;\r\n        if(curConfig.hasChange) {\r\n            if(curConfig.totalSize   != setConfig.totalSize) {\r\n                curConfig.totalSize   = setConfig.totalSize;\r\n            }\r\n            if(curConfig.singlePrice != setConfig.singlePrice){\r\n               curConfig.singlePrice = setConfig.singlePrice; \r\n            }\r\n            if( curConfig.pumpRate    != setConfig.pumpRate) {\r\n                curConfig.pumpRate    = setConfig.pumpRate;\r\n            }\r\n            curConfig.hasChange = false;\r\n        }\r\n        addressArray.length=0;\r\n    }\r\n    \r\n    function getGameInfo() public view returns  (uint256,uint32,uint256,uint8,address[],uint256,bool)  {\r\n        return (gameIndex,\r\n                curConfig.totalSize,\r\n                curConfig.singlePrice,\r\n                curConfig.pumpRate,\r\n                addressArray,\r\n                totalPrice,\r\n                isLock);\r\n    }\r\n    \r\n    function gameResult() private {\r\n            \r\n      uint index  = getRamdon();\r\n      address lastAddress = addressArray[index];\r\n      uint totalBalace = address(this).balance;\r\n      uint giveToOwn   = totalBalace * curConfig.pumpRate / 100;\r\n      uint giveToActor = totalBalace - giveToOwn;\r\n      owner.transfer(giveToOwn);\r\n      lastAddress.transfer(giveToActor);\r\n      emit gameOverEvent(\r\n                    gameIndex,\r\n                    curConfig.totalSize,\r\n                    curConfig.singlePrice,\r\n                    curConfig.pumpRate,\r\n                    lastAddress,\r\n                    now);\r\n    }\r\n    \r\n    function getRamdon() private view returns (uint) {\r\n      bytes32 ramdon = keccak256(abi.encodePacked(ramdon,now,blockhash(block.number-1)));\r\n      for(uint i = 0; i < addressArray.length; i++) {\r\n            ramdon = keccak256(abi.encodePacked(ramdon,now, addressArray[i]));\r\n      }\r\n      uint index  = uint(ramdon) % addressArray.length;\r\n      return index;\r\n    }\r\n    \r\n    function() notLock payable public{\r\n        require(isNotContract(msg.sender),\"Contract not call addPlayer\");\r\n        require(msg.value == curConfig.singlePrice,\"msg.value error\");\r\n        totalPrice = totalPrice + msg.value;\r\n        addressArray.push(msg.sender);\r\n       \r\n        emit addPlayerEvent(gameIndex,msg.sender);\r\n        if(addressArray.length >= curConfig.totalSize) {\r\n            gameResult();\r\n            startNewGame();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"curConfig\",\"outputs\":[{\"name\":\"totalSize\",\"type\":\"uint32\"},{\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"name\":\"hasChange\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalSize\",\"type\":\"uint32\"},{\"name\":\"_singlePrice\",\"type\":\"uint256\"},{\"name\":\"_pumpRate\",\"type\":\"uint8\"}],\"name\":\"changeConfig\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[{\"name\":\"totalSize\",\"type\":\"uint32\"},{\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"name\":\"hasChange\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"updateLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSize\",\"type\":\"uint32\"},{\"name\":\"_singlePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"openLockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addPlayerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"totalSize\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"winAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"overTime\",\"type\":\"uint256\"}],\"name\":\"gameOverEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalBalace\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"stopGameEvent\",\"type\":\"event\"}]","ContractName":"BREBuy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000032","Library":"","SwarmSource":"bzzr://004e67717eac7693b53a8b5cf9272ffaf5a7368fb019932fe55a08dd689d836b"}]}