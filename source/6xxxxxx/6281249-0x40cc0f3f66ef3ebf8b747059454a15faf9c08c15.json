{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Presale {\r\n    using SafeMath for uint256;\r\n    address owner;\r\n    mapping (address => uint) public userV1ItemNumber;  // p1\r\n    mapping (address => uint) public userV2ItemNumber;  // p2\r\n    mapping (address => uint) public userV3ItemNumber;  // p3\r\n    uint v1Price = 1 ether;\r\n    uint v2Price = 500 finney;\r\n    uint v3Price = 100 finney;\r\n    uint v1Number = 10;\r\n    uint v2Number = 50;\r\n    uint v3Number = 100;\r\n    uint currentV1Number = 0;\r\n    uint currentV2Number = 0;\r\n    uint currentV3Number = 0;\r\n    /* Modifiers */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    /* Owner */\r\n    function setOwner (address _owner) onlyOwner() public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function Presale() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function buyItem1() public payable{\r\n        require(msg.value >= v1Price);\r\n        require(currentV1Number < v1Number);\r\n        uint excess = msg.value.sub(v1Price);\r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n        currentV1Number += 1;\r\n        userV1ItemNumber[msg.sender] += 1;\r\n    }\r\n    \r\n    function buyItem2() public payable{\r\n        require(msg.value >= v2Price);\r\n        require(currentV2Number < v2Number);\r\n        uint excess = msg.value.sub(v2Price);\r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n        currentV2Number += 1;\r\n        userV2ItemNumber[msg.sender] += 1;\r\n    }\r\n    \r\n    function buyItem3() public payable{\r\n        require(msg.value >= v3Price);\r\n        require(currentV3Number < v3Number);\r\n        uint excess = msg.value.sub(v3Price);\r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n        currentV3Number += 1;\r\n        userV3ItemNumber[msg.sender] += 1;\r\n    }\r\n    \r\n    function getGameStats() public view returns(uint, uint, uint) {\r\n        return (currentV1Number, currentV2Number, currentV3Number);    \r\n    }\r\n    \r\n    function withdrawAll () onlyOwner() public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyItem2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userV3ItemNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyItem1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userV2ItemNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userV1ItemNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyItem3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Presale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c53972b21f035da01f407392435834856df72c7cb0d6c7583c647c730cb5426"}]}