{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title IRegistry\r\n * @dev This contract represents the interface of a registry contract\r\n */\r\ninterface IRegistry {\r\n    /**\r\n    * @dev This event will be emitted every time a new proxy is created\r\n    * @param proxy representing the address of the proxy created\r\n    */\r\n    event ProxyCreated(address proxy);\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a new implementation is registered\r\n    * @param version representing the version name of the registered implementation\r\n    * @param implementation representing the address of the registered implementation\r\n    */\r\n    event VersionAdded(string version, address implementation);\r\n\r\n    /**\r\n    * @dev Registers a new version with its implementation address\r\n    * @param version representing the version name of the new implementation to be registered\r\n    * @param implementation representing the address of the new implementation to be registered\r\n    */\r\n    function addVersion(string version, address implementation) external;\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation for a given version\r\n    * @param version to query the implementation of\r\n    * @return address of the implementation registered for the given version\r\n    */\r\n    function getVersion(string version) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function implementation() public view returns (address);\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    function () payable public {\r\n        address _impl = implementation();\r\n        require(_impl != address(0));\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract UpgradeabilityStorage {\r\n    // Versions registry\r\n    IRegistry internal registry;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Upgradeable\r\n * @dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\r\n * This means, required state variables for owned upgradeability purpose and simple initialization validation.\r\n */\r\ncontract Upgradeable is UpgradeabilityStorage {\r\n    /**\r\n    * @dev Validates the caller is the versions registry.\r\n    * THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r\n    * @param sender representing the address deploying the initial behavior of the contract\r\n    */\r\n    function initialize(address sender) public payable {\r\n        require(msg.sender == address(registry));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy, UpgradeabilityStorage, Ownable {\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor(string _version) public {\r\n        registry = IRegistry(msg.sender);\r\n        upgradeTo(_version);\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrades the implementation to the requested version\r\n    * @param _version representing the version name of the new implementation to be set\r\n    */\r\n    function upgradeTo(string _version) public onlyOwner {\r\n        _implementation = registry.getVersion(_version);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Registry\r\n * @dev This contract works as a registry of versions, it holds the implementations for the registered versions.\r\n */\r\ncontract Registry is IRegistry, Ownable {\r\n    // Mapping of versions to implementations of different functions\r\n    mapping (string => address) internal versions;\r\n\r\n    /**\r\n    * @dev Registers a new version with its implementation address\r\n    * @param version representing the version name of the new implementation to be registered\r\n    * @param implementation representing the address of the new implementation to be registered\r\n    */\r\n    function addVersion(string version, address implementation) external onlyOwner {\r\n        require(versions[version] == 0x0);\r\n        versions[version] = implementation;\r\n        emit VersionAdded(version, implementation);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation for a given version\r\n    * @param version to query the implementation of\r\n    * @return address of the implementation registered for the given version\r\n    */\r\n    function getVersion(string version) external view returns (address) {\r\n        return versions[version];\r\n    }\r\n\r\n    /**\r\n    * @dev Creates an upgradeable proxy\r\n    * @param version representing the first version to be set for the proxy\r\n    * @return address of the new proxy created\r\n    */\r\n    function createProxy(string version) public payable onlyOwner returns (UpgradeabilityProxy) {\r\n        UpgradeabilityProxy proxy = new UpgradeabilityProxy(version);\r\n        Upgradeable(proxy).initialize.value(msg.value)(msg.sender);\r\n        emit ProxyCreated(proxy);\r\n        return proxy;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"addVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"createProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VersionAdded\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f9f11768524b8764a62393be9eae11c63a043ad5b009d17f23729dcd892cd98"}]}