{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title EnsRegistry\r\n * @dev Extract of the interface for ENS Registry\r\n */\r\ncontract EnsRegistry {\r\n\tfunction setOwner(bytes32 node, address owner) public;\r\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n\tfunction setResolver(bytes32 node, address resolver) public;\r\n\tfunction owner(bytes32 node) public view returns (address);\r\n\tfunction resolver(bytes32 node) public view returns (address);\r\n}\r\n\r\n/**\r\n * @title EnsResolver\r\n * @dev Extract of the interface for ENS Resolver\r\n */\r\ncontract EnsResolver {\r\n\tfunction setAddr(bytes32 node, address addr) public;\r\n\tfunction addr(bytes32 node) public view returns (address);\r\n}\r\n\r\n/**\r\n * @title Portal Network SubdomainRegistrar\r\n * @dev Allows to claim and configure a subdomain for Ethereum ENS in one call.\r\n */\r\ncontract SubdomainRegistrar {\r\n\taddress public owner;\r\n\tbool public locked;\r\n    bytes32 emptyNamehash = 0x00;\r\n\r\n\tmapping (string => EnsRegistry) registries;\r\n\tmapping (string => EnsResolver) resolvers;\r\n\r\n\tevent SubdomainCreated(address indexed creator, address indexed owner, string subdomain, string domain, string topdomain);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent RegistryUpdated(address indexed previousRegistry, address indexed newRegistry);\r\n\tevent ResolverUpdated(address indexed previousResolver, address indexed newResolver);\r\n\tevent DomainTransfersLocked();\r\n\tevent DomainTransfersUnlocked();\r\n\r\n\tconstructor(string tld, EnsRegistry _registry, EnsResolver _resolver) public {\r\n\t\towner = msg.sender;\r\n\t\tregistries[tld] = _registry;\r\n\t\tresolvers[tld] = _resolver;\r\n\t\tlocked = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t *\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier supportedTLD(string tld) {\r\n\t\trequire(registries[tld] != address(0) && resolvers[tld] != address(0));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to create a subdomain (e.g. \"hello.portalnetwork.eth\"),\r\n\t * set its resolver and set its target address\r\n\t * @param _subdomain - sub domain name only e.g. \"hello\"\r\n\t * @param _domain - domain name e.g. \"portalnetwork\"\r\n\t * @param _topdomain - parent domain name e.g. \"eth\", \"etc\"\r\n\t * @param _owner - address that will become owner of this new subdomain\r\n\t * @param _target - address that this new domain will resolve to\r\n\t */\r\n\tfunction newSubdomain(string _subdomain, string _domain, string _topdomain, address _owner, address _target) public supportedTLD(_topdomain) {\r\n\t\t//create namehash for the topdomain\r\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\r\n\t\t//create namehash for the domain\r\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\t//make sure this contract owns the domain\r\n\t\trequire(registries[_topdomain].owner(domainNamehash) == address(this), \"this contract should own the domain\");\r\n\t\t//create labelhash for the sub domain\r\n\t\tbytes32 subdomainLabelhash = keccak256(abi.encodePacked(_subdomain));\r\n\t\t//create namehash for the sub domain\r\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, subdomainLabelhash));\r\n\t\t//make sure it is free or owned by the sender\r\n\t\trequire(registries[_topdomain].owner(subdomainNamehash) == address(0) ||\r\n\t\t\tregistries[_topdomain].owner(subdomainNamehash) == msg.sender, \"sub domain already owned\");\r\n\t\t//create new subdomain, temporarily this smartcontract is the owner\r\n\t\tregistries[_topdomain].setSubnodeOwner(domainNamehash, subdomainLabelhash, address(this));\r\n\t\t//set public resolver for this domain\r\n\t\tregistries[_topdomain].setResolver(subdomainNamehash, resolvers[_topdomain]);\r\n\t\t//set the destination address\r\n\t\tresolvers[_topdomain].setAddr(subdomainNamehash, _target);\r\n\t\t//change the ownership back to requested owner\r\n\t\tregistries[_topdomain].setOwner(subdomainNamehash, _owner);\r\n\r\n\t\temit SubdomainCreated(msg.sender, _owner, _subdomain, _domain, _topdomain);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the owner of a domain (e.g. \"portalnetwork.eth\"),\r\n\t * @param _domain - domain name e.g. \"portalnetwork\"\r\n\t * @param _topdomain - parent domain name e.g. \"eth\" or \"etc\"\r\n\t */\r\n\tfunction domainOwner(string _domain, string _topdomain) public view returns (address) {\r\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\r\n\t\tbytes32 namehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\treturn registries[_topdomain].owner(namehash);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the owner of a subdomain (e.g. \"hello.portalnetwork.eth\"),\r\n\t * @param _subdomain - sub domain name only e.g. \"hello\"\r\n\t * @param _domain - parent domain name e.g. \"portalnetwork\"\r\n\t * @param _topdomain - parent domain name e.g. \"eth\", \"etc\"\r\n\t */\r\n\tfunction subdomainOwner(string _subdomain, string _domain, string _topdomain) public view returns (address) {\r\n\t\tbytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\r\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, keccak256(abi.encodePacked(_subdomain))));\r\n\t\treturn registries[_topdomain].owner(subdomainNamehash);\r\n\t}\r\n\r\n    /**\r\n    * @dev Return the target address where the subdomain is pointing to (e.g. \"0x12345...\"),\r\n    * @param _subdomain - sub domain name only e.g. \"hello\"\r\n    * @param _domain - parent domain name e.g. \"portalnetwork\"\r\n    * @param _topdomain - parent domain name e.g. \"eth\", \"etc\"\r\n    */\r\n    function subdomainTarget(string _subdomain, string _domain, string _topdomain) public view returns (address) {\r\n        bytes32 topdomainNamehash = keccak256(abi.encodePacked(emptyNamehash, keccak256(abi.encodePacked(_topdomain))));\r\n        bytes32 domainNamehash = keccak256(abi.encodePacked(topdomainNamehash, keccak256(abi.encodePacked(_domain))));\r\n        bytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, keccak256(abi.encodePacked(_subdomain))));\r\n        address currentResolver = registries[_topdomain].resolver(subdomainNamehash);\r\n        return EnsResolver(currentResolver).addr(subdomainNamehash);\r\n    }\r\n\r\n\t/**\r\n\t * @dev The contract owner can take away the ownership of any domain owned by this contract.\r\n\t * @param _node - namehash of the domain\r\n\t * @param _owner - new owner for the domain\r\n\t */\r\n\tfunction transferDomainOwnership(string tld, bytes32 _node, address _owner) public supportedTLD(tld) onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tregistries[tld].setOwner(_node, _owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The contract owner can lock and prevent any future domain ownership transfers.\r\n\t */\r\n\tfunction lockDomainOwnershipTransfers() public onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tlocked = true;\r\n\t\temit DomainTransfersLocked();\r\n\t}\r\n\r\n\tfunction unlockDomainOwnershipTransfer() public onlyOwner {\r\n\t\trequire(locked);\r\n\t\tlocked = false;\r\n\t\temit DomainTransfersUnlocked();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS registry.\r\n\t * @param _registry The address of new ENS registry to use.\r\n\t */\r\n\tfunction updateRegistry(string tld, EnsRegistry _registry) public onlyOwner {\r\n\t\trequire(registries[tld] != _registry, \"new registry should be different from old\");\r\n\t\temit RegistryUpdated(registries[tld], _registry);\r\n\t\tregistries[tld] = _registry;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS resolver.\r\n\t * @param _resolver The address of new ENS resolver to use.\r\n\t */\r\n\tfunction updateResolver(string tld, EnsResolver _resolver) public onlyOwner {\r\n\t\trequire(resolvers[tld] != _resolver, \"new resolver should be different from old\");\r\n\t\temit ResolverUpdated(resolvers[tld], _resolver);\r\n\t\tresolvers[tld] = _resolver;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n\t * @param _owner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferContractOwnership(address _owner) public onlyOwner {\r\n\t\trequire(_owner != address(0), \"cannot transfer to address(0)\");\r\n\t\temit OwnershipTransferred(owner, _owner);\r\n\t\towner = _owner;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_subdomain\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"subdomainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"domainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subdomain\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_topdomain\",\"type\":\"string\"}],\"name\":\"subdomainTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockDomainOwnershipTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"},{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subdomain\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_topdomain\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockDomainOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"topdomain\",\"type\":\"string\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousResolver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DomainTransfersLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DomainTransfersUnlocked\",\"type\":\"event\"}]","ContractName":"SubdomainRegistrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b0000000000000000000000000b3ebeccc00e9ceae2bf3235d558eda7398be91e00000000000000000000000000000000000000000000000000000000000000036574680000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d23ffb501d1f1b49ed74e4ecf94aae4fd86bc8600e1c33451c19af70754e953d"}]}