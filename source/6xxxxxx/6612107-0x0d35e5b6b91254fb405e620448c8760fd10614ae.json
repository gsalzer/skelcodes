{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * Web - https://ethmoon.cc/\r\n * RU  Telegram_chat: https://t.me/ethmoonccv2\r\n *\r\n *\r\n * Multiplier ETHMOON_V3: returns 115%-120% of each investment!\r\n * Fully transparent smartcontract with automatic payments proven professionals.\r\n * 1. Send any sum to smart contract address\r\n *    - sum from 0.21 to 10 ETH\r\n *    - min 250000 gas limit\r\n *    - you are added to a queue\r\n * 2. Wait a little bit\r\n * 3. ...\r\n * 4. PROFIT! You have got 115%-120%\r\n *\r\n * How is that?\r\n * 1. The first investor in the queue (you will become the\r\n *    first in some time) receives next investments until\r\n *    it become 115%-120% of his initial investment.\r\n * 2. You will receive payments in several parts or all at once\r\n * 3. Once you receive 115%-120% of your initial investment you are\r\n *    removed from the queue.\r\n * 4. You can make more than one deposits at once\r\n * 5. The balance of this contract should normally be 0 because\r\n *    all the money are immediately go to payouts\r\n *\r\n *\r\n * So the last pays to the first (or to several first ones if the deposit big enough) \r\n * and the investors paid 115%-120% are removed from the queue\r\n *\r\n *               new investor --|               brand new investor --|\r\n *                investor5     |                 new investor       |\r\n *                investor4     |     =======>      investor5        |\r\n *                investor3     |                   investor4        |\r\n *   (part. paid) investor2    <|                   investor3        |\r\n *   (fully paid) investor1   <-|                   investor2   <----|  (pay until 115%-120%)\r\n *\r\n *\r\n *\r\n * Контракт ETHMOON_V3: возвращает 115%-120% от вашего депозита!\r\n * Полностью прозрачный смартконтракт с автоматическими выплатами, проверенный профессионалами.\r\n * 1. Пошлите любую ненулевую сумму на адрес контракта\r\n *    - сумма от 0.21 до 10 ETH\r\n *    - gas limit минимум 250000\r\n *    - вы встанете в очередь\r\n * 2. Немного подождите\r\n * 3. ...\r\n * 4. PROFIT! Вам пришло 115%-120% от вашего депозита.\r\n * \r\n * Как это возможно?\r\n * 1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n *    новых инвесторов до тех пор, пока не получит 115%-120% от своего депозита\r\n * 2. Выплаты могут приходить несколькими частями или все сразу\r\n * 3. Как только вы получаете 115%-120% от вашего депозита, вы удаляетесь из очереди\r\n * 4. Вы можете делать несколько депозитов сразу\r\n * 5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n *    сразу же направляются на выплаты\r\n *\r\n * Таким образом, последние платят первым, и инвесторы, достигшие выплат 115%-120% от \r\n * депозита, удаляются из очереди, уступая место остальным\r\n *\r\n *             новый инвестор --|            совсем новый инвестор --|\r\n *                инвестор5     |                новый инвестор      |\r\n *                инвестор4     |     =======>      инвестор5        |\r\n *                инвестор3     |                   инвестор4        |\r\n * (част. выпл.)  инвестор2    <|                   инвестор3        |\r\n * (полная выпл.) инвестор1   <-|                   инвестор2   <----|  (доплата до 115%-120%)\r\n *\r\n*/\r\n\r\n\r\ncontract EthmoonV3 {\r\n    // address for promo expences\r\n    address constant private PROMO = 0xa4Db4f62314Db6539B60F0e1CBE2377b918953Bd;\r\n    address constant private SMARTCONTRACT = 0x03f69791513022D8b67fACF221B98243346DF7Cb;\r\n    address constant private STARTER = 0x5dfE1AfD8B7Ae0c8067dB962166a4e2D318AA241;\r\n    // percent for promo/tech expences\r\n    uint constant public PROMO_PERCENT = 5;\r\n    uint constant public SMARTCONTRACT_PERCENT = 5;\r\n    // how many percent for your deposit to be multiplied\r\n    uint constant public START_MULTIPLIER = 115;\r\n    // deposit limits\r\n    uint constant public MIN_DEPOSIT = 0.21 ether;\r\n    uint constant public MAX_DEPOSIT = 10 ether;\r\n    bool public started = false;\r\n    // count participation\r\n    mapping(address => uint) public participation;\r\n\r\n    // the deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; // the depositor address\r\n        uint128 deposit;   // the deposit amount\r\n        uint128 expect;    // how much we should pay out (initially it is 115%-120% of deposit)\r\n    }\r\n\r\n    Deposit[] private queue;  // the queue\r\n    uint public currentReceiverIndex = 0; // the index of the first depositor in the queue. The receiver of investments!\r\n\r\n    // this function receives all the deposits\r\n    // stores them and make immediate payouts\r\n    function () public payable {\r\n        require(gasleft() >= 220000, \"We require more gas!\"); // we need gas to process queue\r\n        require((msg.sender == STARTER) || (started));\r\n        \r\n        if (msg.sender != STARTER) {\r\n            require((msg.value >= MIN_DEPOSIT) && (msg.value <= MAX_DEPOSIT)); // do not allow too big investments to stabilize payouts\r\n            uint multiplier = percentRate(msg.sender);\r\n            // add the investor into the queue. Mark that he expects to receive 115%-120% of deposit back\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value * multiplier/100)));\r\n            participation[msg.sender] = participation[msg.sender] + 1;\r\n            // send some promo to enable this contract to leave long-long time\r\n            uint promo = msg.value * PROMO_PERCENT/100;\r\n            PROMO.transfer(promo);\r\n            uint smartcontract = msg.value * SMARTCONTRACT_PERCENT/100;\r\n            SMARTCONTRACT.transfer(smartcontract);\r\n    \r\n            // pay to first investors in line\r\n            pay();\r\n        } else {\r\n            started = true;\r\n        }\r\n    }\r\n\r\n    // used to pay to current investors\r\n    // each new transaction processes 1 - 4+ investors in the head of queue \r\n    // depending on balance and gas left\r\n    function pay() private {\r\n        // try to send all the money on contract to the first investors in line\r\n        uint128 money = uint128(address(this).balance);\r\n\r\n        // we will do cycle on the queue\r\n        for (uint i=0; i<queue.length; i++) {\r\n            uint idx = currentReceiverIndex + i;  // get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[idx]; // get the info of the first investor\r\n\r\n            if (money >= dep.expect) {  // if we have enough money on the contract to fully pay to investor\r\n                dep.depositor.transfer(dep.expect); // send money to him\r\n                money -= dep.expect;            // update money left\r\n\r\n                // this investor is fully paid, so remove him\r\n                delete queue[idx];\r\n            } else {\r\n                // here we don't have enough money so partially pay to investor\r\n                dep.depositor.transfer(money); // send to him everything we have\r\n                dep.expect -= money;       // update the expected amount\r\n                break;                     // exit cycle\r\n            }\r\n\r\n            if (gasleft() <= 50000)         // check the gas left. If it is low, exit the cycle\r\n                break;                     // the next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex += i; // update the index of the current first investor\r\n    }\r\n\r\n    // get the deposit info by its index\r\n    // you can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    // get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for (uint i=currentReceiverIndex; i<queue.length; ++i) {\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    // get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if (c > 0) {\r\n            uint j = 0;\r\n            for (uint i=currentReceiverIndex; i<queue.length; ++i) {\r\n                Deposit storage dep = queue[i];\r\n                if (dep.depositor == depositor) {\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n    \r\n    // get persent rate\r\n    function percentRate(address depositor) public view returns(uint) {\r\n        uint persent = START_MULTIPLIER;\r\n        if (participation[depositor] > 0) {\r\n            persent = persent + participation[depositor] * 5;\r\n        }\r\n        if (persent > 120) {\r\n            persent = 120;\r\n        } \r\n        return persent;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SMARTCONTRACT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthmoonV3","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8cd0cd17fece312e5e2c87ab561db7b2f28dd0c140d2641ef6f1d283558f8d28"}]}