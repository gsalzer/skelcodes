{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\r\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Utility contract to allow owner to retreive any ERC20 sent to the contract\r\n */\r\ncontract ReclaimTokens is Ownable {\r\n\r\n    /**\r\n    * @notice Reclaim all ERC20Basic compatible tokens\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external onlyOwner {\r\n        require(_tokenContract != address(0), \"Invalid address\");\r\n        IERC20 token = IERC20(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(owner, balance), \"Transfer failed\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface for managing polymath feature switches\r\n */\r\ninterface IFeatureRegistry {\r\n\r\n    /**\r\n     * @notice Get the status of a feature\r\n     * @param _nameKey is the key for the feature status mapping\r\n     * @return bool\r\n     */\r\n    function getFeatureStatus(string _nameKey) external view returns(bool);\r\n\r\n}\r\n\r\n/**\r\n * @title Registry for managing polymath feature switches\r\n */\r\ncontract FeatureRegistry is IFeatureRegistry, ReclaimTokens {\r\n\r\n    mapping (bytes32 => bool) public featureStatus;\r\n\r\n    event ChangeFeatureStatus(string _nameKey, bool _newStatus);\r\n\r\n    /**\r\n     * @notice Get the status of a feature\r\n     * @param _nameKey is the key for the feature status mapping\r\n     * @return bool\r\n     */\r\n    function getFeatureStatus(string _nameKey) external view returns(bool) {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        return featureStatus[key];\r\n    }\r\n\r\n    /**\r\n     * @notice change a feature status\r\n     * @dev feature status is set to false by default\r\n     * @param _nameKey is the key for the feature status mapping\r\n     * @param _newStatus is the new feature status\r\n     */\r\n    function setFeatureStatus(string _nameKey, bool _newStatus) public onlyOwner {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        require(featureStatus[key] != _newStatus, \"Status unchanged\");\r\n        emit ChangeFeatureStatus(_nameKey, _newStatus);\r\n        featureStatus[key] = _newStatus;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_nameKey\",\"type\":\"string\"}],\"name\":\"getFeatureStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"featureStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameKey\",\"type\":\"string\"},{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setFeatureStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_nameKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"ChangeFeatureStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FeatureRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d28a9dcdd1a4953f75209ea8c6e4aaf17ac8728104c15b82e85849ab0f17030b"}]}