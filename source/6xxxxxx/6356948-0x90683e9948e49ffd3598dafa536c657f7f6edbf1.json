{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\tif (newOwner != address(0)) {\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n/// @title A facet of CobeFriendCore that manages special access privileges.\r\n/// @author CybEye (http://www.cybeye.com/us/index.jsp)\r\n/// @dev See the CobeFriendCore contract documentation to understand how the various contract facets are arranged.\r\ncontract CobeFriendACL {\r\n    // This facet controls access control for CobeFriends. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the CobeFriendCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from CobeFriendCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release gen0 CobeFriends to auction, and mint promo CobeFriends.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n/// @title Base contract for CobeFriend. Holds all common structs, events and base variables.\r\n/// @author Axiom Zen (https://www.axiomzen.co)\r\n/// @dev See the CobeFriendCore contract documentation to understand how the various contract facets are arranged.\r\ncontract CobeFriendBase is CobeFriendACL {\r\n\t/*** EVENTS ***/\r\n\r\n\t/// @dev The Birth event is fired whenever a new CobeFriend comes into existence. This obviously\r\n\t///  includes any time a CobeFriend is created through the giveBirth method, but it is also called\r\n\t///  when a new gen0 CobeFriend is created.\r\n\tevent Birth(address owner, uint256 CobeFriendId, uint256 matronId, uint256 sireId, uint256 genes, uint256 generation);\r\n\r\n\t/// @dev Transfer event as defined in current draft of ERC721. Emitted every time a CobeFriend\r\n\t///  ownership is assigned, including births.\r\n\tevent Transfer(address from, address to, uint256 tokenId);\r\n\r\n\t/*** DATA TYPES ***/\r\n\r\n\t/// @dev The main CobeFriend struct. Every CobeFriend in CobeFriend is represented by a copy\r\n\t///  of this structure, so great care was taken to ensure that it fits neatly into\r\n\t///  exactly two 256-bit words. Note that the order of the members in this structure\r\n\t///  is important because of the byte-packing rules used by Ethereum.\r\n\t///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n\tstruct CobeFriend {\r\n\t\t// The CobeFriend's genetic code is packed into these 256-bits, the format is\r\n\t\t// sooper-sekret! A CobeFriend's genes never change.\r\n\t\tuint256 genes;\r\n\r\n\t\t// The timestamp from the block when this CobeFriend came into existence.\r\n\t\tuint64 birthTime;\r\n\r\n\t\t// The minimum timestamp after which this CobeFriend can engage in breeding\r\n\t\t// activities again. This same timestamp is used for the pregnancy\r\n\t\t// timer (for matrons) as well as the siring cooldown.\r\n\t\tuint64 cooldownEndBlock;\r\n\r\n\t\t// The ID of the parents of this CobeFriend, set to 0 for gen0 CobeFriends.\r\n\t\t// Note that using 32-bit unsigned integers limits us to a \"mere\"\r\n\t\t// 4 billion CobeFriends. This number might seem small until you realize\r\n\t\t// that Ethereum currently has a limit of about 500 million\r\n\t\t// transactions per year! So, this definitely won't be a problem\r\n\t\t// for several years (even as Ethereum learns to scale).\r\n\t\tuint32 matronId;\r\n\t\tuint32 sireId;\r\n\r\n\t\t// Set to the ID of the sire CobeFriend for matrons that are pregnant,\r\n\t\t// zero otherwise. A non-zero value here is how we know a CobeFriend\r\n\t\t// is pregnant. Used to retrieve the genetic material for the new\r\n\t\t// CobeFriend when the birth transpires.\r\n\t\tuint32 siringWithId;\r\n\r\n\t\t// Set to the index in the cooldown array (see below) that represents\r\n\t\t// the current cooldown duration for this CobeFriend. This starts at zero\r\n\t\t// for gen0 CobeFriends, and is initialized to floor(generation/2) for others.\r\n\t\t// Incremented by one for each successful breeding action, regardless\r\n\t\t// of whether this CobeFriend is acting as matron or sire.\r\n\t\tuint16 cooldownIndex;\r\n\r\n\t\t// The \"generation number\" of this CobeFriend. CobeFriends minted by the CZ contract\r\n\t\t// for sale are called \"gen0\" and have a generation number of 0. The\r\n\t\t// generation number of all other CobeFriends is the larger of the two generation\r\n\t\t// numbers of their parents, plus one.\r\n\t\t// (i.e. max(matron.generation, sire.generation) + 1)\r\n\t\tuint16 generation;\r\n\t}\r\n\r\n\t/*** CONSTANTS ***/\r\n\r\n\t/// @dev A lookup table inCobeFriending the cooldown duration after any successful\r\n\t///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\r\n\t///  for sires. Designed such that the cooldown roughly doubles each time a CobeFriend\r\n\t///  is bred, encouraging owners not to just keep breeding the same CobeFriend over\r\n\t///  and over again. Caps out at one week (a CobeFriend can breed an unbounded number\r\n\t///  of times, and the maximum cooldown is always seven days).\r\n\tuint32[14] public cooldowns = [\r\n\t\tuint32(1 minutes),\r\n\t\tuint32(2 minutes),\r\n\t\tuint32(5 minutes),\r\n\t\tuint32(10 minutes),\r\n\t\tuint32(30 minutes),\r\n\t\tuint32(1 hours),\r\n\t\tuint32(2 hours),\r\n\t\tuint32(4 hours),\r\n\t\tuint32(8 hours),\r\n\t\tuint32(16 hours),\r\n\t\tuint32(1 days),\r\n\t\tuint32(2 days),\r\n\t\tuint32(4 days),\r\n\t\tuint32(7 days)\r\n\t];\r\n\r\n\t// An approximation of currently how many seconds are in between blocks.\r\n\tuint256 public secondsPerBlock = 15;\r\n\r\n\t/*** STORAGE ***/\r\n\r\n\t/// @dev An array containing the CobeFriend struct for all CobeFriends in existence. The ID\r\n\t///  of each CobeFriend is actually an index into this array. Note that ID 0 is a negaCobeFriend,\r\n\t///  the unCobeFriend, the mythical beast that is the parent of all gen0 CobeFriends. A bizarre\r\n\t///  creature that is both matron and sire... to itself! Has an invalid genetic code.\r\n\t///  In other words, CobeFriend ID 0 is invalid... ;-)\r\n\tCobeFriend[] CobeFriends;\r\n\r\n\t/// @dev A mapping from CobeFriend IDs to the address that owns them. All CobeFriends have\r\n\t///  some valid owner address, even gen0 CobeFriends are created with a non-zero owner.\r\n\tmapping (uint256 => address) public CobeFriendIndexToOwner;\r\n\r\n\t// @dev A mapping from owner address to count of tokens that address owns.\r\n\t//  Used internally inside balanceOf() to resolve ownership count.\r\n\tmapping (address => uint256) ownershipTokenCount;\r\n\r\n\t/// @dev A mapping from CobeFriendIDs to an address that has been approved to call\r\n\t///  transferFrom(). Each CobeFriend can only have one approved address for transfer\r\n\t///  at any time. A zero value means no approval is outstanding.\r\n\tmapping (uint256 => address) public CobeFriendIndexToApproved;\r\n\r\n\t/// @dev A mapping from CobeFriendIDs to an address that has been approved to use\r\n\t///  this CobeFriend for siring via breedWith(). Each CobeFriend can only have one approved\r\n\t///  address for siring at any time. A zero value means no approval is outstanding.\r\n\tmapping (uint256 => address) public sireAllowedToAddress;\r\n\r\n\t/// @dev The address of the ClockAuction contract that handles sales of CobeFriends. This\r\n\t///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n\t///  initiated every 15 minutes.\r\n\tSaleClockAuction public saleAuction;\r\n\r\n\t/// @dev Assigns ownership of a specific CobeFriend to an address.\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\t// Since the number of CobeFriends is capped to 2^32 we can't overflow this\r\n\t\townershipTokenCount[_to]++;\r\n\t\t// transfer ownership\r\n\t\tCobeFriendIndexToOwner[_tokenId] = _to;\r\n\t\t// When creating new CobeFriends _from is 0x0, but we can't account that address.\r\n\t\tif (_from != address(0)) {\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\t// once the CobeFriend is transferred also clear sire allowances\r\n\t\t\tdelete sireAllowedToAddress[_tokenId];\r\n\t\t\t// clear any previously approved ownership exchange\r\n\t\t\tdelete CobeFriendIndexToApproved[_tokenId];\r\n\t\t}\r\n\t\t// Emit the transfer event.\r\n\t\tTransfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\t/// @dev An internal method that creates a new CobeFriend and stores it. This\r\n\t///  method doesn't do any checking and should only be called when the\r\n\t///  input data is known to be valid. Will generate both a Birth event\r\n\t///  and a Transfer event.\r\n\t/// @param _matronId The CobeFriend ID of the matron of this CobeFriend (zero for gen0)\r\n\t/// @param _sireId The CobeFriend ID of the sire of this CobeFriend (zero for gen0)\r\n\t/// @param _generation The generation number of this CobeFriend, must be computed by caller.\r\n\t/// @param _genes The CobeFriend's genetic code.\r\n\t/// @param _owner The inital owner of this CobeFriend, must be non-zero (except for the unCobeFriend, ID 0)\r\n\tfunction _createCobeFriend(\r\n\t\tuint256 _matronId,\r\n\t\tuint256 _sireId,\r\n\t\tuint256 _generation,\r\n\t\tuint256 _genes,\r\n\t\taddress _owner\r\n\t)\r\n\t\tinternal\r\n\t\treturns (uint)\r\n\t{\r\n\t\t// These requires are not strictly necessary, our calling code should make\r\n\t\t// sure that these conditions are never broken. However! _createCobeFriend() is already\r\n\t\t// an expensive call (for storage), and it doesn't hurt to be especially careful\r\n\t\t// to ensure our data structures are always valid.\r\n\t\trequire(_matronId == uint256(uint32(_matronId)));\r\n\t\trequire(_sireId == uint256(uint32(_sireId)));\r\n\t\trequire(_generation == uint256(uint16(_generation)));\r\n\r\n\t\t// New CobeFriend starts with the same cooldown as parent gen/2\r\n\t\tuint16 cooldownIndex = uint16(_generation / 2);\r\n\t\tif (cooldownIndex > 13) {\r\n\t\t\tcooldownIndex = 13;\r\n\t\t}\r\n\r\n\t\tCobeFriend memory _CobeFriend = CobeFriend({\r\n\t\t\tgenes: _genes,\r\n\t\t\tbirthTime: uint64(now),\r\n\t\t\tcooldownEndBlock: 0,\r\n\t\t\tmatronId: uint32(_matronId),\r\n\t\t\tsireId: uint32(_sireId),\r\n\t\t\tsiringWithId: 0,\r\n\t\t\tcooldownIndex: cooldownIndex,\r\n\t\t\tgeneration: uint16(_generation)\r\n\t\t});\r\n\t\tuint256 newCobeFriendId = CobeFriends.push(_CobeFriend) - 1;\r\n\r\n\t\t// It's probably never going to happen, 4 billion CobeFriends is A LOT, but\r\n\t\t// let's just be 100% sure we never let this happen.\r\n\t\trequire(newCobeFriendId == uint256(uint32(newCobeFriendId)));\r\n\r\n\t\t// emit the birth event\r\n\t\tBirth(\r\n\t\t\t_owner,\r\n\t\t\tnewCobeFriendId,\r\n\t\t\tuint256(_CobeFriend.matronId),\r\n\t\t\tuint256(_CobeFriend.sireId),\r\n\t\t\t_CobeFriend.genes,\r\n            uint256(_CobeFriend.generation)\r\n\t\t);\r\n\r\n\t\t// This will assign ownership, and also emit the Transfer event as\r\n\t\t// per ERC721 draft\r\n\t\t_transfer(0, _owner, newCobeFriendId);\r\n\r\n\t\treturn newCobeFriendId;\r\n\t}\r\n\r\n\t/// @dev An internal method that creates a new CobeFriend and stores it. This\r\n\t///  method doesn't do any checking and should only be called when the\r\n\t///  input data is known to be valid. Will generate both a Birth event\r\n\t///  and a Transfer event.\r\n\t/// @param _matronId The CobeFriend ID of the matron of this CobeFriend (zero for gen0)\r\n\t/// @param _sireId The CobeFriend ID of the sire of this CobeFriend (zero for gen0)\r\n\t/// @param _generation The generation number of this CobeFriend, must be computed by caller.\r\n\t/// @param _genes The CobeFriend's genetic code.\r\n\t/// @param _owner The inital owner of this CobeFriend, must be non-zero (except for the unCobeFriend, ID 0)\r\n    /// @param _time The birth time of CobeFriend\r\n    /// @param _cooldownIndex The cooldownIndex of CobeFriend\r\n\tfunction _createCobeFriendWithTime(\r\n\t\tuint256 _matronId,\r\n\t\tuint256 _sireId,\r\n\t\tuint256 _generation,\r\n\t\tuint256 _genes,\r\n\t\taddress _owner,\r\n        uint256 _time,\r\n        uint256 _cooldownIndex\r\n\t)\r\n\tinternal\r\n\treturns (uint)\r\n\t{\r\n\t\t// These requires are not strictly necessary, our calling code should make\r\n\t\t// sure that these conditions are never broken. However! _createCobeFriend() is already\r\n\t\t// an expensive call (for storage), and it doesn't hurt to be especially careful\r\n\t\t// to ensure our data structures are always valid.\r\n\t\trequire(_matronId == uint256(uint32(_matronId)));\r\n\t\trequire(_sireId == uint256(uint32(_sireId)));\r\n\t\trequire(_generation == uint256(uint16(_generation)));\r\n        require(_time == uint256(uint64(_time)));\r\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\r\n\r\n        // Copy down CobeFriend cooldownIndex\r\n        uint16 cooldownIndex = uint16(_cooldownIndex);\r\n\t\tif (cooldownIndex > 13) {\r\n\t\t\tcooldownIndex = 13;\r\n\t\t}\r\n\r\n\t\tCobeFriend memory _CobeFriend = CobeFriend({\r\n\t\t\tgenes: _genes,\r\n\t\t\tbirthTime: uint64(_time),\r\n\t\t\tcooldownEndBlock: 0,\r\n\t\t\tmatronId: uint32(_matronId),\r\n\t\t\tsireId: uint32(_sireId),\r\n\t\t\tsiringWithId: 0,\r\n\t\t\tcooldownIndex: cooldownIndex,\r\n\t\t\tgeneration: uint16(_generation)\r\n\t\t\t});\r\n\t\tuint256 newCobeFriendId = CobeFriends.push(_CobeFriend) - 1;\r\n\r\n\t\t// It's probably never going to happen, 4 billion CobeFriends is A LOT, but\r\n\t\t// let's just be 100% sure we never let this happen.\r\n\t\trequire(newCobeFriendId == uint256(uint32(newCobeFriendId)));\r\n\r\n\t\t// emit the birth event\r\n\t\tBirth(\r\n\t\t\t_owner,\r\n\t\t\tnewCobeFriendId,\r\n\t\t\tuint256(_CobeFriend.matronId),\r\n\t\t\tuint256(_CobeFriend.sireId),\r\n\t\t\t_CobeFriend.genes,\r\n            uint256(_CobeFriend.generation)\r\n\t\t);\r\n\r\n\t\t// This will assign ownership, and also emit the Transfer event as\r\n\t\t// per ERC721 draft\r\n\t\t_transfer(0, _owner, newCobeFriendId);\r\n\r\n\t\treturn newCobeFriendId;\r\n\t}\r\n\r\n\t// Any C-level can fix how many seconds per blocks are currently observed.\r\n\tfunction setSecondsPerBlock(uint256 secs) external onlyCLevel {\r\n\t\trequire(secs < cooldowns[0]);\r\n\t\tsecondsPerBlock = secs;\r\n\t}\r\n}\r\n\r\n\r\n/// @title The external contract that is responsible for generating metadata for the CobeFriends,\r\n///  it has one function that will return the data as bytes.\r\ncontract ERC721Metadata {\r\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\r\n    function getMetadata(uint256 _tokenId, string) public pure returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello World! :D\";\r\n            count = 15;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the CobeFriends core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the CobeFriendCore contract documentation to understand how the various contract facets are arranged.\r\ncontract CobeFriendOwnership is CobeFriendBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"CobeFriends\";\r\n    string public constant symbol = \"CBF\";\r\n\r\n    // The contract that will return CobeFriend metadata\r\n    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Set the address of the sibling contract that tracks metadata.\r\n    ///  CEO only.\r\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular CobeFriend.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId CobeFriend id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return CobeFriendIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular CobeFriend.\r\n    /// @param _claimant the address we are confirming CobeFriend is approved for.\r\n    /// @param _tokenId CobeFriend id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return CobeFriendIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting CobeFriends on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        CobeFriendIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of CobeFriends owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a CobeFriend to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  CobeFriends specifically) or your CobeFriend may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the CobeFriend to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any CobeFriends (except very briefly\r\n        // after a gen0 cbf is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of CobeFriends\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(saleAuction));\r\n\r\n        // You can only send your own cbf.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific CobeFriend via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the CobeFriend that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a CobeFriend owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the CobeFriend to be transfered.\r\n    /// @param _to The address that should take ownership of the CobeFriend. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the CobeFriend to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any CobeFriends (except very briefly\r\n        // after a gen0 cbf is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of CobeFriends currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return CobeFriends.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given CobeFriend.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = CobeFriendIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all CobeFriend IDs assigned to an address.\r\n    /// @param _owner The owner whose CobeFriends we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire CobeFriend array looking for cbfs belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalcbfs = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all cbfs have IDs starting at 1 and increasing\r\n            // sequentially up to the totalcbf count.\r\n            uint256 cbfId;\r\n\r\n            for (cbfId = 1; cbfId <= totalcbfs; cbfId++) {\r\n                if (CobeFriendIndexToOwner[cbfId] == _owner) {\r\n                    result[resultIndex] = cbfId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\r\n        // Copy word-length chunks while possible\r\n        for(; _len >= 32; _len -= 32) {\r\n            assembly {\r\n                mstore(_dest, mload(_src))\r\n            }\r\n            _dest += 32;\r\n            _src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint256 mask = 256 ** (32 - _len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(_src), not(mask))\r\n            let destpart := and(mload(_dest), mask)\r\n            mstore(_dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\r\n        var outputString = new string(_stringLength);\r\n        uint256 outputPtr;\r\n        uint256 bytesPtr;\r\n\r\n        assembly {\r\n            outputPtr := add(outputString, 32)\r\n            bytesPtr := _rawBytes\r\n        }\r\n\r\n        _memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n        return outputString;\r\n    }\r\n\r\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n    /// @param _tokenId The ID number of the CobeFriend whose metadata should be returned.\r\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\r\n        require(erc721Metadata != address(0));\r\n        bytes32[4] memory buffer;\r\n        uint256 count;\r\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n        return _toString(buffer, count);\r\n    }\r\n}\r\n\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\r\n\t/**\r\n\t * @dev modifier to allow actions only when the contract IS paused\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev modifier to allow actions only when the contract IS NOT paused\r\n\t */\r\n\tmodifier whenPaused {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev called by the owner to pause, triggers stopped state\r\n\t */\r\n\tfunction pause() public onlyOwner whenNotPaused returns (bool) {\r\n\t\tpaused = true;\r\n\t\tPause();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev called by the owner to unpause, returns to normal state\r\n\t */\r\n\tfunction unpause() public onlyOwner whenPaused returns (bool) {\r\n\t\tpaused = false;\r\n\t\tUnpause();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        nftAddress.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction modified for sale of CobeFriends\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    // Tracks last 5 sale price of gen0 CobeFriend sales\r\n    uint256 public gen0SaleCount;\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    // Delegate constructor\r\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        // _bid verifies token ID size\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // If not a gen0 auction, exit\r\n        if (seller == address(nonFungibleContract)) {\r\n            // Track gen0 sale prices\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    function averageGen0SalePrice() external view returns (uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastGen0SalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Handles creating auctions for sale and siring of CobeFriends.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract CobeFriendAuction is CobeFriendOwnership {\r\n\r\n    // @notice The auction contract variables are defined in CobeFriendBase to allow\r\n    //  us to refer to them in CobeFriendOwnership to prevent accidental transfers.\r\n    // `saleAuction` refers to the auction for gen0 and p2p sale of CobeFriends.\r\n    // `siringAuction` refers to the auction for siring rights of CobeFriends.\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyCEO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Put a CobeFriend up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _CobeFriendId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If CobeFriend is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _CobeFriendId));\r\n        _approve(_CobeFriendId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the CobeFriend.\r\n        saleAuction.createAuction(\r\n            _CobeFriendId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the CobeFriendCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n\r\n/// @title all functions related to creating CobeFriends\r\ncontract CobeFriendMinting is CobeFriendAuction {\r\n\r\n    // Limits the number of cbfs the contract owner can ever create.\r\n    uint256 public constant DEFAULT_CREATION_LIMIT = 50000;\r\n\r\n    // Counts the number of cbfs the contract owner has created.\r\n    uint256 public defaultCreatedCount;\r\n\r\n\r\n    /// @dev we can create CobeFriends with different generations. Only callable by COO\r\n    /// @param _genes The encoded genes of the CobeFriend to be created, any value is accepted\r\n    /// @param _owner The future owner of the created CobeFriend. Default to contract COO\r\n    /// @param _time The birth time of CobeFriend\r\n    /// @param _cooldownIndex The cooldownIndex of CobeFriend\r\n    function createDefaultGen0CobeFriend(uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex) external onlyCOO {\r\n\r\n        require(_time == uint256(uint64(_time)));\r\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\r\n\r\n        require(_time > 0);\r\n        require(_cooldownIndex >= 0 && _cooldownIndex <= 13);\r\n\r\n        address CobeFriendOwner = _owner;\r\n        if (CobeFriendOwner == address(0)) {\r\n            CobeFriendOwner = cooAddress;\r\n        }\r\n        require(defaultCreatedCount < DEFAULT_CREATION_LIMIT);\r\n\r\n        defaultCreatedCount++;\r\n        _createCobeFriendWithTime(0, 0, 0, _genes, CobeFriendOwner, _time, _cooldownIndex);\r\n    }\r\n\r\n    /// @dev we can create CobeFriends with different generations. Only callable by COO\r\n    /// @param _matronId The CobeFriend ID of the matron of this CobeFriend\r\n    /// @param _sireId The CobeFriend ID of the sire of this CobeFriend\r\n    /// @param _genes The encoded genes of the CobeFriend to be created, any value is accepted\r\n    /// @param _owner The future owner of the created CobeFriend. Default to contract COO\r\n    /// @param _time The birth time of CobeFriend\r\n    /// @param _cooldownIndex The cooldownIndex of CobeFriend\r\n    function createDefaultCobeFriend(uint256 _matronId, uint256 _sireId, uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex) external onlyCOO {\r\n\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_time == uint256(uint64(_time)));\r\n        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));\r\n\r\n        require(_time > 0);\r\n        require(_cooldownIndex >= 0 && _cooldownIndex <= 13);\r\n\r\n        address CobeFriendOwner = _owner;\r\n        if (CobeFriendOwner == address(0)) {\r\n            CobeFriendOwner = cooAddress;\r\n        }\r\n\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n\r\n        // Grab a reference to the matron in storage.\r\n        CobeFriend storage matron = CobeFriends[_matronId];\r\n\r\n        // Grab a reference to the sire in storage.\r\n        CobeFriend storage sire = CobeFriends[_sireId];\r\n\r\n        // Determine the higher generation number of the two parents\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        _createCobeFriendWithTime(_matronId, _sireId, parentGen + 1, _genes, CobeFriendOwner, _time, _cooldownIndex);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title CobeFriends: Collectible, breedable, and oh-so-adorable CobeFriends on the Ethereum blockchain.\r\n/// @dev The main CobeFriends contract, keeps track of cbfs so they don't wander around and get lost.\r\ncontract CobeFriendCore is CobeFriendMinting {\r\n/* contract CobeFriendCore { */\r\n    // This is the main CobeFriends contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\r\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\r\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // CobeFriend ownership. The genetic combination algorithm is kept seperate so we can open-source all of\r\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\r\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - CobeFriendBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - CobeFriendAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - CobeFriendOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - CobeFriendBreeding: This file contains the methods necessary to breed CobeFriends together, including\r\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\r\n    //\r\n    //      - CobeFriendAuctions: Here we have the public methods for auctioning or bidding on CobeFriends or siring\r\n    //             services. The actual auction functionality is handled in two sibling contracts (one\r\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\r\n    //             through this facet of the core contract.\r\n    //\r\n    //      - CobeFriendMinting: This final facet contains the functionality we use for creating new gen0 CobeFriends.\r\n    //             We can make up to 5000 \"promo\" CobeFriends that can be given away (especially important when\r\n    //             the community is new), and all others can only be created and then immediately put up\r\n    //             for auction via an algorithmically determined starting price. Regardless of how they\r\n    //             are created, there is a hard limit of 2400*12*12 gen0 CobeFriends. After that, it's all up to the\r\n    //             community to breed, breed, breed!\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main CobeFriends smart contract instance.\r\n    function CobeFriendCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n\r\n        // start with the mythical CobeFriend 0 - so we don't have generation-0 parent issues\r\n        _createCobeFriend(0, 0, 0, uint256(-1), address(0));\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific CobeFriend.\r\n    /// @param _id The ID of the CobeFriend of interest.\r\n    function getCobeFriend(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    ) {\r\n        CobeFriend storage cbf = CobeFriends[_id];\r\n\r\n        // if this variable is 0 then it's not gestating\r\n        isGestating = (cbf.siringWithId != 0);\r\n        isReady = (cbf.cooldownEndBlock <= block.number);\r\n        cooldownIndex = uint256(cbf.cooldownIndex);\r\n        nextActionAt = uint256(cbf.cooldownEndBlock);\r\n        siringWithId = uint256(cbf.siringWithId);\r\n        birthTime = uint256(cbf.birthTime);\r\n        matronId = uint256(cbf.matronId);\r\n        sireId = uint256(cbf.sireId);\r\n        generation = uint256(cbf.generation);\r\n        genes = cbf.genes;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the CFO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        uint256 balance = this.balance;\r\n        cfoAddress.transfer(balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint256\"}],\"name\":\"createDefaultCobeFriend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CobeFriendId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CobeFriendIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_cooldownIndex\",\"type\":\"uint256\"}],\"name\":\"createDefaultGen0CobeFriend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCobeFriend\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CobeFriendIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"CobeFriendId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"CobeFriendCore","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e052305a0c7bac36558ba5bc54fa7d8d69b64cb50da120dffbc12a44f4bce072"}]}