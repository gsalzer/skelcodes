{"status":"1","message":"OK","result":[{"SourceCode":"// Implementation of the U42 Token Specification -- see \"U42 Token Specification.md\"\r\n//\r\n// Standard ERC-20 methods and the SafeMath library are adapated from OpenZeppelin's standard contract types\r\n// as at https://github.com/OpenZeppelin/openzeppelin-solidity/commit/5daaf60d11ee2075260d0f3adfb22b1c536db983\r\n// note that uint256 is used explicitly in place of uint\r\n\r\npragma solidity ^0.4.24;\r\n\r\n//safemath extensions added to uint256\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract U42 {\r\n\t//use OZ SafeMath to avoid uint256 overflows\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public constant name = \"U42\";\r\n\tstring public constant symbol = \"U42\";\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public constant initialSupply = 525000000 * (10 ** uint256(decimals));\r\n\tuint256 internal totalSupply_ = initialSupply;\r\n\taddress public contractOwner;\r\n\r\n\t//token balances\r\n\tmapping(address => uint256) balances;\r\n\r\n\t//for each balance address, map allowed addresses to amount allowed\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t//each service is represented by a Service struct \r\n\tstruct Service {\r\n\t\taddress applicationAddress;\r\n\t\tuint32 serviceId;\r\n\t\tbool isSimple;\r\n\t\tstring serviceDescription;\r\n\t\tuint256 tokensPerCredit;\r\n\t\tuint256 maxCreditsPerProvision;\r\n\t\taddress updateAddress;\r\n\t\taddress receiptAddress;\r\n\t\tbool isRemoved;\r\n\t\tuint256 provisionHead;\r\n\t}\r\n\r\n\tstruct Provision {\r\n\t\tuint256 tokensPerCredit;\r\n\t\tuint256 creditsRemaining;\r\n\t\tuint256 applicationReference;\r\n\t\taddress userAddress;\r\n\t\tuint256 creditsProvisioned;\r\n\t}\r\n\r\n\t//mapping of application addresses to service structs\r\n\tmapping (address => mapping (uint32 => Service)) services;\r\n\r\n\t//mapping of application addresses to service structs to provisions\r\n\tmapping (address => mapping (uint32 => mapping (uint256 => Provision))) provisions;\r\n\r\n\t//mapping of application addresses to lists of services\r\n\tmapping (address => uint32[]) servicesLists;\r\n\r\n\t//mapping of application addresses to lists of removed services\r\n\tmapping (address => uint32[]) servicesRemovedLists;\r\n\r\n\t//methods emit the following events\r\n\tevent Transfer (\r\n\t\taddress indexed from, \r\n\t\taddress indexed to, \r\n\t\tuint256 value );\r\n\r\n\tevent TokensBurned (\r\n\t\taddress indexed burner, \r\n\t\tuint256 value );\r\n\r\n\tevent Approval (\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value );\r\n\r\n\tevent NewService (\r\n\t\taddress indexed applicationAddress,\r\n\t\tuint32 serviceId );\r\n\r\n\tevent ServiceChanged (\r\n\t\taddress indexed applicationAddress,\r\n\t\tuint32 serviceId );\r\n\r\n\tevent ServiceRemoved (\r\n\t\taddress indexed applicationAddress,\r\n\t\tuint32 serviceId );\r\n\r\n\tevent CompleteSimpleProvision (\r\n\t\taddress indexed applicationAddress,\r\n\t\tuint32 indexed serviceId,\r\n\t\taddress indexed userAddress,\r\n\t\tuint256 multiple,\r\n\t\tuint256 applicationReference );\r\n\r\n\tevent ReferenceConfirmed (\r\n\t\taddress indexed applicationAddress,\r\n\t\tuint256 indexed applicationReference, \r\n\t\taddress indexed confirmedBy, \r\n\t\tuint256 confirmerTokensMinimum );\r\n\r\n\tevent StartProvision (\r\n\t    address indexed applicationAddress, \r\n\t    uint32 indexed serviceId, \r\n\t    address indexed userAddress,\r\n\t    uint256 provisionId,\r\n\t    uint256 serviceCredits,\r\n\t    uint256 tokensPerCredit, \r\n\t    uint256 applicationReference );\r\n\r\n\tevent UpdateProvision (\r\n\t    address indexed applicationAddress,\r\n\t    uint32 indexed serviceId,\r\n\t    uint256 indexed provisionId,\r\n\t    uint256 creditsRemaining );\r\n\r\n\tevent CompleteProvision (\r\n\t    address indexed applicationAddress,\r\n\t    uint32 indexed serviceId,\r\n\t    uint256 indexed provisionId,\r\n\t    uint256 creditsOutstanding );\r\n\r\n\tevent SignalProvisionRefund (\r\n\t    address indexed applicationAddress,\r\n\t    uint32 indexed serviceId,\r\n\t    uint256 indexed provisionId,\r\n\t    uint256 tokenValue );\r\n\r\n\tevent TransferBecauseOf (\r\n\t\taddress indexed applicationAddress,\r\n\t    uint32 indexed serviceId,\r\n\t    uint256 indexed provisionId,\r\n\t    address from,\r\n\t    address to,\r\n\t    uint256 value );\r\n\r\n\tevent TransferBecauseOfAggregate (\r\n\t\taddress indexed applicationAddress,\r\n\t    uint32 indexed serviceId,\r\n\t    uint256[] provisionIds,\r\n\t    uint256[] tokenAmounts,\r\n\t    address from,\r\n\t    address to,\r\n\t    uint256 value );\r\n\r\n\r\n\tconstructor() public {\r\n\t\t//contract creator holds all tokens at creation\r\n\t\tbalances[msg.sender] = totalSupply_;\r\n\r\n\t\t//record contract owner for later reference (e.g. in ownerBurn)\r\n\t\tcontractOwner=msg.sender;\r\n\r\n\t\t//indicate all tokens were sent to contract address\r\n\t\temit Transfer(address(0), msg.sender, totalSupply_);\r\n\t}\r\n\r\n\tfunction listSimpleService ( \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tstring _serviceDescription,\r\n\t\t\tuint256 _tokensRequired,\r\n\t\t\taddress _updateAddress,\r\n\t\t\taddress _receiptAddress\t) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//check service id is not 0\r\n\t\trequire(_serviceId != 0);\r\n\r\n\t\t//check service doesn't already exist for this application id\r\n\t\trequire(services[msg.sender][_serviceId].applicationAddress == 0);\r\n\r\n\t\t//check cost of the service is >0 \r\n\t\trequire(_tokensRequired != 0);\r\n\r\n\t\t//check receiptAddress is not address(0)\r\n\t\trequire(_receiptAddress != address(0));\r\n\r\n\t\t//update address should be address(0) or a non-sender address\r\n\t\trequire(_updateAddress != msg.sender);\r\n\r\n\t\t//add service to services mapping\r\n\t\tservices[msg.sender][_serviceId] = Service(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_serviceId,\r\n\t\t\t\ttrue,\r\n\t\t\t\t_serviceDescription,\r\n\t\t\t\t_tokensRequired,\r\n\t\t\t\t1,\r\n\t\t\t\t_updateAddress,\r\n\t\t\t\t_receiptAddress,\r\n\t\t\t\tfalse,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t//add service to servicesLists for application\r\n\t\tservicesLists[msg.sender].push(_serviceId);\r\n\r\n\t\t//emit NewService\r\n\t\temit NewService(msg.sender, _serviceId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction listService ( \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tstring _serviceDescription,\r\n\t\t\tuint256 _tokensPerCredit,\r\n\t\t\tuint256 _maxCreditsPerProvision,\r\n\t\t\taddress _updateAddress,\r\n\t\t\taddress _receiptAddress\t) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//check service id is not 0\r\n\t\trequire(_serviceId != 0);\r\n\r\n\t\t//check service doesn't already exist for this application id\r\n\t\trequire(services[msg.sender][_serviceId].applicationAddress == 0);\r\n\r\n\t\t//check cost of the service is >0 \r\n\t\trequire(_tokensPerCredit != 0);\r\n\r\n\t\t//check receiptAddress is not address(0)\r\n\t\trequire(_receiptAddress != address(0));\r\n\r\n\t\t//update address should be address(0) or a non-sender address\r\n\t\trequire(_updateAddress != msg.sender);\r\n\r\n\t\t//add service to services mapping\r\n\t\tservices[msg.sender][_serviceId] = Service(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_serviceId,\r\n\t\t\t\tfalse,\r\n\t\t\t\t_serviceDescription,\r\n\t\t\t\t_tokensPerCredit,\r\n\t\t\t\t_maxCreditsPerProvision,\r\n\t\t\t\t_updateAddress,\r\n\t\t\t\t_receiptAddress,\r\n\t\t\t\tfalse,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t//add service to servicesLists for application\r\n\t\tservicesLists[msg.sender].push(_serviceId);\r\n\r\n\t\t//emit NewService\r\n\t\temit NewService(msg.sender, _serviceId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getServicesForApplication ( \r\n\t\t\taddress _applicationAddress ) \r\n\t\tpublic view returns (\r\n\t\t\tuint32[] serviceIds ) {\r\n\r\n\t\treturn servicesLists[_applicationAddress];\r\n\t}\r\n\r\n\tfunction getRemovedServicesForApplication (\r\n\t\t\taddress _applicationAddress ) \r\n\t\tpublic view returns (\r\n\t\t\tuint32[] serviceIds ) {\r\n\r\n\t\treturn servicesRemovedLists[_applicationAddress];\r\n\t}\r\n\r\n\tfunction isServiceRemoved (\r\n\t\t\taddress _applicationAddress,\r\n\t\t\tuint32 _serviceId )\r\n\t\tpublic view returns (\r\n\t\t\tbool ) {\r\n\r\n\t\t//returns true if service has been removed\r\n\t\treturn services[_applicationAddress][_serviceId].isRemoved;\r\n\t}\r\n\r\n\tfunction getServiceInformation ( \r\n\t\t\taddress _applicationAddress, \r\n\t\t\tuint32 _serviceId )\r\n\t\tpublic view returns (\r\n\t\t\tbool exists,\r\n\t\t\tbool isSimple,\r\n\t\t\tstring serviceDescription,\r\n\t\t\tuint256 tokensPerCredit,\r\n\t\t\tuint256 maxCreditsPerProvision,\r\n\t\t\taddress receiptAddress,\r\n\t\t\tbool isRemoved,\r\n\t\t\tuint256 provisionHead ) {\r\n\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//services with unset application address indicates an empty/unset struct in the mapping\r\n\t\tif(s.applicationAddress == 0) {\r\n\t\t\t//first return parameter indicates whether the service exists\r\n\t\t\texists=false;\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\t\t\texists=true;\r\n\t\t\tisSimple=s.isSimple;\r\n\t\t\t//note that the returned service description can't be read in solidity funtion call\r\n\t\t\tserviceDescription=s.serviceDescription;\r\n\t\t\ttokensPerCredit=s.tokensPerCredit;\r\n\t\t\tmaxCreditsPerProvision=s.maxCreditsPerProvision;\r\n\t\t\treceiptAddress=s.receiptAddress;\r\n\t\t\tisRemoved=s.isRemoved;\r\n\t\t\tprovisionHead=s.provisionHead;\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getServiceUpdateAddress (\r\n\t\t\taddress _applicationAddress, \r\n\t\t\tuint32 _serviceId ) \r\n\t\tpublic view returns (\r\n\t\t\taddress updateAddress ) {\r\n\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\treturn s.updateAddress;\r\n\t}\r\n\r\n\tfunction updateServiceDescription (\r\n\t\t\taddress _targetApplicationAddress, \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tstring _serviceDescription ) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_targetApplicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _targetApplicationAddress || \r\n\t\t\t( s.updateAddress != address(0) && msg.sender == s.updateAddress ));\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\tservices[_targetApplicationAddress][_serviceId].serviceDescription=_serviceDescription;\r\n\t\t\r\n\t\temit ServiceChanged(_targetApplicationAddress, _serviceId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateServiceTokensPerCredit (\r\n\t\t\taddress _targetApplicationAddress, \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tuint256 _tokensPerCredit ) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_targetApplicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _targetApplicationAddress || \r\n\t\t\t( s.updateAddress != address(0) && msg.sender == s.updateAddress ));\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//check changed cost of the service is >0 \r\n\t\trequire(_tokensPerCredit != 0);\r\n\r\n\t\tservices[_targetApplicationAddress][_serviceId].tokensPerCredit=_tokensPerCredit;\r\n\t\t\r\n\t\temit ServiceChanged(_targetApplicationAddress, _serviceId);\r\n\r\n\t\treturn true;\t\t\r\n\t}\r\n\r\n\tfunction updateServiceMaxCreditsPerProvision (\r\n\t\t\taddress _targetApplicationAddress,\r\n\t\t\tuint32 _serviceId,\r\n\t\t\tuint256 _maxCreditsPerProvision )\r\n\t\tpublic returns (\r\n\t\t\tbool sucess ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_targetApplicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _targetApplicationAddress || \r\n\t\t\t( s.updateAddress != address(0) && msg.sender == s.updateAddress ));\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//note that credits per provision can be == 0 (no limit)\r\n\r\n\t\t//change max credits per provision for this service\r\n\t\tservices[_targetApplicationAddress][_serviceId].maxCreditsPerProvision=_maxCreditsPerProvision;\r\n\r\n\t\temit ServiceChanged(_targetApplicationAddress, _serviceId);\r\n\t\r\n\t\treturn true;\t\t\r\n\t}\r\n\r\n\tfunction changeServiceReceiptAddress(\r\n\t\t\tuint32 _serviceId, \r\n\t\t\taddress _receiptAddress ) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//receipt address can only be changed by application address\r\n\r\n\t\t//check that service exists\r\n\t\trequire(services[msg.sender][_serviceId].applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(services[msg.sender][_serviceId].isRemoved == false);\r\n\r\n\t\t//check changed receiptAddress is not address(0)\r\n\t\trequire(_receiptAddress != address(0));\r\n\r\n\t\tservices[msg.sender][_serviceId].receiptAddress=_receiptAddress;\r\n\t\t\r\n\t\temit ServiceChanged(msg.sender, _serviceId);\r\n\r\n\t\treturn true;\t\t\r\n\t}\r\n\r\n\tfunction changeServiceUpdateAddress (\r\n\t\t\tuint32 _serviceId,\r\n\t\t\taddress _updateAddress )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//update address can only be changed by application address\r\n\r\n\t\t//check that service exists\r\n\t\trequire(services[msg.sender][_serviceId].applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(services[msg.sender][_serviceId].isRemoved == false);\r\n\r\n\t\t//note: update address can be address(0)\r\n\t\t//change the update address\r\n\t\tservices[msg.sender][_serviceId].updateAddress=_updateAddress;\r\n\r\n\t\temit ServiceChanged(msg.sender, _serviceId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeService (\r\n\t\t\taddress _targetApplicationAddress, \r\n\t\t\tuint32 _serviceId ) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//check that service exists\r\n\t\trequire(services[_targetApplicationAddress][_serviceId].applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _targetApplicationAddress || \r\n\t\t\t( services[_targetApplicationAddress][_serviceId].updateAddress != address(0) \r\n\t\t\t   && msg.sender == services[_targetApplicationAddress][_serviceId].updateAddress \r\n\t\t\t  ));\r\n\r\n\t\t//check that service is not already removed\r\n\t\trequire(services[_targetApplicationAddress][_serviceId].isRemoved == false);\r\n\r\n\t\t//add to removed array\r\n\t\tservicesRemovedLists[_targetApplicationAddress].push(_serviceId);\r\n\r\n\t\t//change value of isRemoved to true\r\n\t\tservices[_targetApplicationAddress][_serviceId].isRemoved = true;\r\n\r\n\t\temit ServiceRemoved(_targetApplicationAddress, _serviceId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferToSimpleService (\r\n\t\t\taddress _applicationAddress, \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tuint256 _tokenValue, \r\n\t\t\tuint256 _applicationReference, \r\n\t\t\tuint256 _multiple ) \r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//requested multiple must be >= 1\r\n\t\trequire(_multiple > 0);\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//service must exist\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(services[_applicationAddress][_serviceId].isRemoved == false);\r\n\r\n\t\t//check that service is a simple service\r\n\t\trequire(s.isSimple == true);\r\n\r\n\t\t//expected value is the token cost of the service multiplied by the requested multiple\r\n\t\tuint256 expectedValue=s.tokensPerCredit.mul(_multiple);\r\n\r\n\t\t//supplied token value must equal expected value\r\n\t\trequire(expectedValue == _tokenValue);\r\n\r\n\t\t//transfer the tokens -- this verifies the sender owns the tokens\r\n\t\ttransfer(s.receiptAddress, _tokenValue);\r\n\r\n\t\t//this starts and ends a simple provision at a single point in time \r\n\t\temit CompleteSimpleProvision(_applicationAddress, _serviceId, msg.sender, _multiple, _applicationReference);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction transferToService (\r\n\t\t\taddress _applicationAddress, \r\n\t\t\tuint32 _serviceId, \r\n\t\t\tuint256 _tokenValue, \r\n\t\t\tuint256 _credits,\r\n\t\t\tuint256 _applicationReference ) \r\n\t\tpublic returns (\r\n\t\t\tuint256 provisionId ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//service must exist\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(services[_applicationAddress][_serviceId].isRemoved == false);\r\n\r\n\t\t//check that service is not a simple service\r\n\t\trequire(s.isSimple == false);\r\n\r\n\t\t//verify: value == credits * tokens per credit\r\n\t\trequire(_tokenValue == (_credits.mul(s.tokensPerCredit)));\r\n\r\n\t\t//verify: max credits == 0 OR (value/tokens per credit) <= max credits per provision\r\n\t\trequire( s.maxCreditsPerProvision == 0 ||\r\n\t\t\t_credits <= s.maxCreditsPerProvision);\r\n\r\n\t\t//increment provision head and use as provision id\r\n\t\ts.provisionHead++;\r\n\t\tuint256 pid = s.provisionHead;\r\n\r\n\t\t//create provision in mapping\r\n\t\tprovisions[_applicationAddress][_serviceId][pid] = Provision (\r\n\t\t\t\ts.tokensPerCredit,\r\n\t\t\t\t_credits,\r\n\t\t\t\t_applicationReference,\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_credits\t\t\r\n\t\t\t);\r\n\r\n\t\t//transfer the tokens\r\n\t\ttransfer(s.receiptAddress, _tokenValue);\r\n\r\n\t\t//emits a start provision \r\n\t\temit StartProvision(_applicationAddress, _serviceId, msg.sender, pid, _credits, s.tokensPerCredit, _applicationReference);\r\n\r\n\t\t//return provision id\r\n\t\treturn pid;\r\n\t}\r\n\r\n\tfunction getProvisionCreditsRemaining (\r\n\t\t\taddress _applicationAddress,\r\n\t\t\tuint32 _serviceId,\r\n\t\t    uint256 _provisionId )\r\n\t\tpublic view returns (\r\n\t\t\tuint256 credits) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//service must exist\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(services[_applicationAddress][_serviceId].isRemoved == false);\t\t\r\n\r\n\t\t//get & check that the provision exists (address at userAddress)\r\n\t\tProvision storage p=provisions[_applicationAddress][_serviceId][_provisionId];\r\n\t\trequire(p.userAddress != 0);\r\n\r\n\t\t//return the credits remaining for this provision\r\n\t\treturn p.creditsRemaining;\r\n\t}\r\n\r\n\tfunction updateProvision (\r\n\t\t    address _applicationAddress,\r\n\t\t    uint32 _serviceId,\r\n\t\t    uint256 _provisionId,\r\n\t\t    uint256 _creditsRemaining )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//credits remaining must be >0, complete provision should be used to set to 0\r\n\t\trequire(_creditsRemaining > 0);\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _applicationAddress || \r\n\t\t\t( s.updateAddress != address(0) && msg.sender == s.updateAddress ));\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//get & check that the provision exists (address at userAddress)\r\n\t\tProvision storage p=provisions[_applicationAddress][_serviceId][_provisionId];\r\n\t\trequire(p.userAddress != 0);\r\n\r\n\t\t//update the credits remaining\r\n\t\tp.creditsRemaining=_creditsRemaining;\r\n\t\r\n\t\t//fires UpdateProvision\r\n\t\temit UpdateProvision(_applicationAddress, _serviceId, _provisionId, _creditsRemaining);\r\n\r\n\t\treturn true;\t\t\r\n\t}\r\n\r\n\tfunction completeProvision (\r\n\t\t    address _applicationAddress,\r\n\t\t    uint32 _serviceId,\r\n\t\t    uint256 _provisionId,\r\n\t\t    uint256 _creditsOutstanding )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//update must be by the application address or, if specified, update address\r\n\t\trequire(msg.sender == _applicationAddress || \r\n\t\t\t( s.updateAddress != address(0) && msg.sender == s.updateAddress ));\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//get & check that the provision exists (address at userAddress)\r\n\t\tProvision storage p=provisions[_applicationAddress][_serviceId][_provisionId];\r\n\t\trequire(p.userAddress != 0);\r\n\r\n\t\tif(_creditsOutstanding > 0) {\r\n\t\t\t//can only signal refund total of credits originally provisioned\r\n\t\t\trequire(_creditsOutstanding <= p.creditsProvisioned);\r\n\r\n\t\t\temit SignalProvisionRefund(_applicationAddress, _serviceId, _provisionId, _creditsOutstanding.mul(p.tokensPerCredit));\r\n\t\t}\r\n\r\n\t\t//credits remaining on service is set to 0\r\n\t\tp.creditsRemaining=0;\r\n\r\n\t\t//fires CompleteProvision\r\n\t\temit CompleteProvision(_applicationAddress, _serviceId, _provisionId, _creditsOutstanding);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction confirmReference (\r\n\t\t\taddress _applicationAddress,\r\n\t\t\tuint256 _applicationReference,\r\n\t\t\tuint256 _senderTokensMinimum )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//sender must have some tokens - if 0 is passed to _senderTokensMinimum\r\n\t\t//then it is assumed that the method is checking that the sender has any amount\r\n\t\t//of tokens (>0)\r\n\t\trequire(balances[msg.sender] > 0);\r\n\r\n\t\t//sender must have min tokens if specified\r\n\t\trequire(_senderTokensMinimum == 0 \r\n\t\t\t|| balances[msg.sender] >= _senderTokensMinimum);\r\n\r\n\t\temit ReferenceConfirmed(_applicationAddress, _applicationReference, msg.sender, _senderTokensMinimum);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction transferBecauseOf (\r\n\t\t    address _to,\r\n\t\t    uint256 _value,\r\n\t\t    address _applicationAddress,\r\n\t\t    uint32 _serviceId,\r\n\t\t    uint256 _provisionId )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//provision ID can be optional, but if it's supplied it must exist\r\n\t\tif(_provisionId != 0) {\r\n\t\t\t//get & check that the provision exists (address at userAddress)\r\n\t\t\tProvision storage p=provisions[_applicationAddress][_serviceId][_provisionId];\r\n\t\t\trequire(p.userAddress != 0);\r\n\t\t}\r\n\r\n\t\t//do the transfer\r\n\t\ttransfer(_to, _value);\r\n\r\n\t\temit TransferBecauseOf(_applicationAddress, _serviceId, _provisionId, msg.sender, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction transferBecauseOfAggregate (\r\n\t\t    address _to,\r\n\t\t    uint256 _value,\r\n\t\t    address _applicationAddress,\r\n\t\t    uint32 _serviceId,\r\n\t\t    uint256[] _provisionIds,\r\n\t\t    uint256[] _tokenAmounts )\r\n\t\tpublic returns (\r\n\t\t\tbool success ) {\r\n\r\n\t\t//get the referenced service\r\n\t\tService storage s=services[_applicationAddress][_serviceId];\r\n\r\n\t\t//check that service exists\r\n\t\trequire(s.applicationAddress != 0);\r\n\r\n\t\t//check that service is not removed\r\n\t\trequire(s.isRemoved == false);\r\n\r\n\t\t//do the transfer\r\n\t\ttransfer(_to, _value);\r\n\r\n\t\temit TransferBecauseOfAggregate(_applicationAddress, _serviceId, _provisionIds, _tokenAmounts, msg.sender, _to, _value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction ownerBurn ( \r\n\t\t\tuint256 _value )\r\n\t\tpublic returns (\r\n\t\t\tbool success) {\r\n\r\n\t\t//only the contract owner can burn tokens\r\n\t\trequire(msg.sender == contractOwner);\r\n\r\n\t\t//can only burn tokens held by the owner\r\n\t\trequire(_value <= balances[contractOwner]);\r\n\r\n\t\t//total supply of tokens is decremented when burned\r\n\t\ttotalSupply_ = totalSupply_.sub(_value);\r\n\r\n\t\t//balance of the contract owner is reduced (the contract owner's tokens are burned)\r\n\t\tbalances[contractOwner] = balances[contractOwner].sub(_value);\r\n\r\n\t\t//burning tokens emits a transfer to 0, as well as TokensBurned\r\n\t\temit Transfer(contractOwner, address(0), _value);\r\n\t\temit TokensBurned(contractOwner, _value);\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\t\r\n\t\r\n\tfunction totalSupply ( ) public view returns (\r\n\t\tuint256 ) {\r\n\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\tfunction balanceOf (\r\n\t\t\taddress _owner ) \r\n\t\tpublic view returns (\r\n\t\t\tuint256 ) {\r\n\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer (\r\n\t\t\taddress _to, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n   \t//changing approval with this method has the same underlying issue as https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   \t//in that transaction order can be modified in a block to spend, change approval, spend again\r\n   \t//the method is kept for ERC-20 compatibility, but a set to zero, set again or use of the below increase/decrease should be used instead\r\n\tfunction approve (\r\n\t\t\taddress _spender, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval (\r\n\t\t\taddress _spender, \r\n\t\t\tuint256 _addedValue ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (\r\n\t\t\taddress _spender,\r\n\t\t\tuint256 _subtractedValue ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance (\r\n\t\t\taddress _owner, \r\n\t\t\taddress _spender ) \r\n\t\tpublic view returns (\r\n\t\t\tuint256 remaining ) {\r\n\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction transferFrom (\r\n\t\t\taddress _from, \r\n\t\t\taddress _to, \r\n\t\t\tuint256 _value ) \r\n\t\tpublic returns (\r\n\t\t\tbool ) {\r\n\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"}],\"name\":\"getServiceUpdateAddress\",\"outputs\":[{\"name\":\"updateAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetApplicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_maxCreditsPerProvision\",\"type\":\"uint256\"}],\"name\":\"updateServiceMaxCreditsPerProvision\",\"outputs\":[{\"name\":\"sucess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_provisionId\",\"type\":\"uint256\"}],\"name\":\"transferBecauseOf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_serviceDescription\",\"type\":\"string\"},{\"name\":\"_tokensPerCredit\",\"type\":\"uint256\"},{\"name\":\"_maxCreditsPerProvision\",\"type\":\"uint256\"},{\"name\":\"_updateAddress\",\"type\":\"address\"},{\"name\":\"_receiptAddress\",\"type\":\"address\"}],\"name\":\"listService\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_applicationReference\",\"type\":\"uint256\"},{\"name\":\"_multiple\",\"type\":\"uint256\"}],\"name\":\"transferToSimpleService\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetApplicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_serviceDescription\",\"type\":\"string\"}],\"name\":\"updateServiceDescription\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_receiptAddress\",\"type\":\"address\"}],\"name\":\"changeServiceReceiptAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"}],\"name\":\"getRemovedServicesForApplication\",\"outputs\":[{\"name\":\"serviceIds\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_updateAddress\",\"type\":\"address\"}],\"name\":\"changeServiceUpdateAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"}],\"name\":\"getServiceInformation\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"isSimple\",\"type\":\"bool\"},{\"name\":\"serviceDescription\",\"type\":\"string\"},{\"name\":\"tokensPerCredit\",\"type\":\"uint256\"},{\"name\":\"maxCreditsPerProvision\",\"type\":\"uint256\"},{\"name\":\"receiptAddress\",\"type\":\"address\"},{\"name\":\"isRemoved\",\"type\":\"bool\"},{\"name\":\"provisionHead\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_credits\",\"type\":\"uint256\"},{\"name\":\"_applicationReference\",\"type\":\"uint256\"}],\"name\":\"transferToService\",\"outputs\":[{\"name\":\"provisionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_provisionId\",\"type\":\"uint256\"}],\"name\":\"getProvisionCreditsRemaining\",\"outputs\":[{\"name\":\"credits\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"}],\"name\":\"isServiceRemoved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_serviceDescription\",\"type\":\"string\"},{\"name\":\"_tokensRequired\",\"type\":\"uint256\"},{\"name\":\"_updateAddress\",\"type\":\"address\"},{\"name\":\"_receiptAddress\",\"type\":\"address\"}],\"name\":\"listSimpleService\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"}],\"name\":\"getServicesForApplication\",\"outputs\":[{\"name\":\"serviceIds\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_applicationReference\",\"type\":\"uint256\"},{\"name\":\"_senderTokensMinimum\",\"type\":\"uint256\"}],\"name\":\"confirmReference\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_provisionId\",\"type\":\"uint256\"},{\"name\":\"_creditsOutstanding\",\"type\":\"uint256\"}],\"name\":\"completeProvision\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetApplicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"}],\"name\":\"removeService\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetApplicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_tokensPerCredit\",\"type\":\"uint256\"}],\"name\":\"updateServiceTokensPerCredit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_provisionIds\",\"type\":\"uint256[]\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBecauseOfAggregate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_applicationAddress\",\"type\":\"address\"},{\"name\":\"_serviceId\",\"type\":\"uint32\"},{\"name\":\"_provisionId\",\"type\":\"uint256\"},{\"name\":\"_creditsRemaining\",\"type\":\"uint256\"}],\"name\":\"updateProvision\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"serviceId\",\"type\":\"uint32\"}],\"name\":\"NewService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"serviceId\",\"type\":\"uint32\"}],\"name\":\"ServiceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"serviceId\",\"type\":\"uint32\"}],\"name\":\"ServiceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"multiple\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"applicationReference\",\"type\":\"uint256\"}],\"name\":\"CompleteSimpleProvision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"applicationReference\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"confirmedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"confirmerTokensMinimum\",\"type\":\"uint256\"}],\"name\":\"ReferenceConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"provisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"serviceCredits\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensPerCredit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"applicationReference\",\"type\":\"uint256\"}],\"name\":\"StartProvision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"provisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditsRemaining\",\"type\":\"uint256\"}],\"name\":\"UpdateProvision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"provisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditsOutstanding\",\"type\":\"uint256\"}],\"name\":\"CompleteProvision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"provisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenValue\",\"type\":\"uint256\"}],\"name\":\"SignalProvisionRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"provisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferBecauseOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"applicationAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"serviceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"provisionIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferBecauseOfAggregate\",\"type\":\"event\"}]","ContractName":"U42","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a67e5a957d67c18ce9182af772ca895c801f203e59a496a9672b77434878e18"}]}