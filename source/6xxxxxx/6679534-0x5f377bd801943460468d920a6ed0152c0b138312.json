{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ContractiumNatmin is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant public CTU_RATE = 19500; // 1 ETH/19500 CTU\r\n    uint256 constant public NAT_RATE = 10400; // 1 ETH/10400 NAT\r\n    \r\n    mapping (string => ERC20) tokenAddresses;\r\n    mapping (string => address) approverAddresses;\r\n    uint256 receivedETH;\r\n    \r\n    event Deposit(address indexed _from, uint256 _ctuAmount, uint256 _natAmount);\r\n    \r\n    constructor(\r\n        address _ctu,\r\n        address _nat,\r\n        address _approverCTUAddress,\r\n        address _approverNATAddress\r\n    ) public {\r\n        setToken(_ctu, \"CTU\");\r\n        setToken(_nat, \"NAT\");\r\n        setApproverCTUAddress(_approverCTUAddress);\r\n        setApproverNATAddress(_approverNATAddress);\r\n    }\r\n    \r\n    function () public payable {\r\n        address sender = msg.sender;\r\n        uint256 depositAmount = msg.value;\r\n        uint256 halfOfDepositAmount = depositAmount.div(2);\r\n        uint256 ctuAmount = depositAmount.mul(CTU_RATE);\r\n        uint256 natAmount = depositAmount.mul(NAT_RATE);\r\n        ERC20 ctuToken = tokenAddresses[\"CTU\"];\r\n        ERC20 natToken = tokenAddresses[\"NAT\"];\r\n        \r\n        require(ctuToken.transferFrom(approverAddresses[\"CTU\"], sender, ctuAmount));\r\n        require(natToken.transferFrom(approverAddresses[\"NAT\"], sender, natAmount));\r\n        \r\n        receivedETH = receivedETH + depositAmount;\r\n        \r\n        approverAddresses[\"CTU\"].transfer(halfOfDepositAmount);\r\n        approverAddresses[\"NAT\"].transfer(depositAmount.sub(halfOfDepositAmount));\r\n        \r\n        emit Deposit(sender, ctuAmount, natAmount);\r\n    }\r\n    \r\n    function setApproverCTUAddress(address _address) public onlyOwner {\r\n        setApprover(_address, \"CTU\");\r\n    }\r\n    \r\n    function setApproverNATAddress(address _address) public onlyOwner {\r\n        setApprover(_address, \"NAT\");\r\n    }\r\n    \r\n    \r\n    function getAvailableCTU() public view returns (uint256) {\r\n        return getAvailableToken(\"CTU\");\r\n    }\r\n    \r\n    function getAvailableNAT() public view returns (uint256) {\r\n        return getAvailableToken(\"NAT\");\r\n    }\r\n    \r\n    function getTokenAddress(string _tokenSymbol) public view returns (address) {\r\n        return tokenAddresses[_tokenSymbol];\r\n    }\r\n    \r\n    function getApproverAddress(string _tokenSymbol) public view returns (address) {\r\n        return approverAddresses[_tokenSymbol];\r\n    }\r\n    \r\n    function getAvailableToken(string _tokenSymbol) internal view returns (uint256) {\r\n        ERC20 token = tokenAddresses[_tokenSymbol];\r\n        uint256 allowance = token.allowance(approverAddresses[_tokenSymbol], this);\r\n        uint256 approverBalance = token.balanceOf(approverAddresses[_tokenSymbol]);\r\n        \r\n        return allowance > approverBalance ? approverBalance : allowance;\r\n    }\r\n    \r\n    function setToken(address _address, string _symbol) internal onlyOwner {\r\n        require(_address != 0x0);\r\n        tokenAddresses[_symbol] = ERC20(_address);\r\n    }\r\n    \r\n    function setApprover(address _address, string _tokenSymbol) internal onlyOwner {\r\n        require(_address != 0x0);\r\n        approverAddresses[_tokenSymbol] = _address;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setApproverCTUAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableNAT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTU_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getApproverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableCTU\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setApproverNATAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ctu\",\"type\":\"address\"},{\"name\":\"_nat\",\"type\":\"address\"},{\"name\":\"_approverCTUAddress\",\"type\":\"address\"},{\"name\":\"_approverNATAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ctuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_natAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ContractiumNatmin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000943aca8ed65fbf188a7d369cfc2bee0ae435ee1b00000000000000000000000090d46a9636b973f18186541d1b04ed3621a49cb00000000000000000000000006fbe807aa7d2033d161d1714e43b9b10ebc07ae000000000000000000000000049e0a606ff2d6b988c43791f8de58f5526ca67a5","Library":"","SwarmSource":"bzzr://eef9914c5a1dd9ec989850e6c621a48a9194a0731b38076a5ee8a515832e8bb7"}]}