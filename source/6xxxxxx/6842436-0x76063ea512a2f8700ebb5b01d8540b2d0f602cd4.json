{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n/* \r\n  this version of tradiing contracts uses mappings insead of array to keep track of\r\n  weapons on sale\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract WeaponTokenize {\r\n  event GameProprietaryDataUpdated(uint weaponId, string gameData);\r\n  event PublicDataUpdated(uint weaponId, string publicData);\r\n  event OwnerProprietaryDataUpdated(uint weaponId, string ownerProprietaryData);\r\n  event WeaponAdded(uint weaponId, string gameData, string publicData, string ownerData);\r\n  function updateOwnerOfWeapon (uint, address) public  returns(bool res);\r\n  function getOwnerOf (uint _weaponId) public view returns(address _owner) ;\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function balanceOf(address _sender) public returns (uint _bal);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n      function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n\r\ncontract TradeWeapon {\r\n  using SafeMath for uint;\r\n  // state variables\r\n  address public owner;\r\n  WeaponTokenize public weaponTokenize;\r\n  ERC20Interface public RCCToken;\r\n  uint public rate = 100; // 1 ETH = 100 RCC\r\n  uint public commssion_n = 50; // 1% commssion of each trade from both buyers and sellers\r\n  uint public commssion_d = 100;\r\n  bool public saleDisabled = false;\r\n  bool public ethSaleDisabled = false;\r\n\r\n  // statics\r\n  uint public totalOrdersPlaced = 0;\r\n  uint public totalOrdersCancelled = 0;\r\n  uint public totalOrdersMatched = 0;\r\n\r\n  struct item{\r\n    uint sellPrice;\r\n    uint commssion;\r\n    address seller;\r\n  }\r\n\r\n  // this mapping contains weaponId to details of sale\r\n  mapping (uint => item) public weaponDetail;\r\n  // total weapon on Sale\r\n  uint totalWeaponOnSale;\r\n  // index => weaponId\r\n  mapping(uint => uint) public indexToWeaponId;\r\n  // weaponId => index\r\n  mapping(uint => uint) public weaponIdToIndex;\r\n  // mapping of weaponId to saleStatus\r\n  mapping (uint => bool) public isOnSale;\r\n  // address to operator\r\n  mapping (address => mapping(address => bool)) private operators;\r\n  \r\n  // events\r\n  event OrderPlaced(address _seller, address _placedBy, uint _weaponId, uint _sp);\r\n  event OderUpdated(address _seller, address _placedBy, uint _weaponId, uint _sp);\r\n  event OrderCacelled(address _placedBy, uint _weaponId);\r\n  event OrderMatched(address _buyer, address _seller, uint _sellPrice, address _placedBy, uint _commssion, string _payType);\r\n  \r\n  constructor (address _tokenizeAddress, address _rccAddress) public{\r\n    owner = msg.sender;\r\n    weaponTokenize =  WeaponTokenize(_tokenizeAddress);\r\n    RCCToken = ERC20Interface(_rccAddress);\r\n  }\r\n\r\n  modifier onlyOwnerOrOperator(uint _weaponId) {\r\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\r\n    require (\r\n      (msg.sender == weaponOwner ||\r\n      checkOperator(weaponOwner, msg.sender)\r\n      ), '2');\r\n    _;\r\n  }\r\n\r\n  modifier onlyIfOnSale(uint _weaponId) {\r\n    require(isOnSale[_weaponId], '3');\r\n    _;\r\n  }\r\n\r\n  modifier ifSaleLive(){\r\n    require(!saleDisabled, '6');\r\n    _;\r\n  }\r\n\r\n  modifier ifEthSaleLive() {\r\n    require(!ethSaleDisabled, '7');\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require (msg.sender == owner, '1');\r\n    _;\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n                    // Only Owner //\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function updateRate(uint _newRate) onlyOwner public {\r\n    rate = _newRate;\r\n  }\r\n\r\n  function updateCommission(uint _commssion_n, uint _commssion_d) onlyOwner public {\r\n    commssion_n = _commssion_n;\r\n    commssion_d = _commssion_d;\r\n  }\r\n\r\n  function disableSale() public onlyOwner {\r\n    saleDisabled = true;\r\n  }\r\n\r\n  function enableSale() public onlyOwner {\r\n    saleDisabled = false;\r\n  }\r\n\r\n  function disableEthSale() public onlyOwner {\r\n    ethSaleDisabled = false;\r\n  }\r\n\r\n  function enableEthSale() public onlyOwner {\r\n    ethSaleDisabled = true;\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n                    // Public Functions //\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function addOperator(address newOperator) public{\r\n    operators[msg.sender][newOperator] =  true;\r\n  }\r\n\r\n  function removeOperator(address _operator) public {\r\n    operators[msg.sender][_operator] =  false;\r\n  }\r\n\r\n\r\n\r\n  function sellWeapon(uint _weaponId, uint _sellPrice) ifSaleLive onlyOwnerOrOperator(_weaponId) public {\r\n    // weapon should not be already on sale\r\n    require( ! isOnSale[_weaponId], '4');\r\n    // get owner of weapon from Tokenization contract\r\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\r\n    // calculate commssion\r\n    uint _commssion = calculateCommission(_sellPrice);\r\n    \r\n    item memory testItem = item(_sellPrice, _commssion, weaponOwner);\r\n    // put weapon on sale\r\n    putWeaponOnSale(_weaponId, testItem);\r\n    // emit sell event\r\n    emit OrderPlaced(weaponOwner, msg.sender, _weaponId, _sellPrice);\r\n  }\r\n\r\n  function updateSale(uint _weaponId, uint _sellPrice) ifSaleLive onlyIfOnSale(_weaponId) onlyOwnerOrOperator(_weaponId) public {\r\n    // calculate commssion\r\n    uint _commssion = calculateCommission(_sellPrice);\r\n    // get owner of weapon\r\n    address weaponOwner = weaponTokenize.getOwnerOf(_weaponId);\r\n    item memory testItem = item(_sellPrice ,_commssion, weaponOwner);\r\n    weaponDetail[_weaponId] = testItem;\r\n    emit OderUpdated(weaponOwner, msg.sender, _weaponId, _sellPrice);\r\n  }\r\n\r\n\r\n  function cancelSale(uint _weaponId) ifSaleLive onlyIfOnSale(_weaponId) onlyOwnerOrOperator(_weaponId) public {\r\n    (address weaponOwner,,) = getWeaponDetails(_weaponId);\r\n    removeWeaponFromSale(_weaponId);\r\n    totalOrdersCancelled = totalOrdersCancelled.add(1);\r\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, weaponOwner);\r\n    emit OrderCacelled(msg.sender, _weaponId);\r\n  }\r\n\r\n  function buyWeaponWithRCC(uint _weaponId, address _buyer) ifSaleLive onlyIfOnSale(_weaponId) public{\r\n    if (_buyer != address(0)){\r\n      buywithRCC(_weaponId, _buyer);\r\n    }else{\r\n      buywithRCC(_weaponId, msg.sender);\r\n    }\r\n  }\r\n\r\n  function buyWeaponWithEth(uint _weaponId, address _buyer) ifSaleLive ifEthSaleLive onlyIfOnSale(_weaponId) public payable {\r\n    if (_buyer != address(0)){\r\n      buywithEth(_weaponId, _buyer, msg.value);\r\n    }else{\r\n      buywithEth(_weaponId, msg.sender, msg.value);\r\n    }\r\n  }\r\n\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n                    // Internal Fns //\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function buywithRCC(uint _weaponId, address _buyer) internal {\r\n    // get details of weapon on sale\r\n    (address seller, uint spOfWeapon, uint commssion) = getWeaponDetails(_weaponId);\r\n    // get allowance to trading contract from buyer\r\n    uint allowance = RCCToken.allowance(_buyer, address(this));\r\n    // calculate selling price (= sp + commission)\r\n    uint sellersPrice = spOfWeapon.sub(commssion);\r\n    require(allowance >= spOfWeapon, '5');\r\n    // delete weapon for sale\r\n    removeWeaponFromSale(_weaponId);\r\n    // transfer coins\r\n    if(spOfWeapon > 0){\r\n      RCCToken.transferFrom(_buyer, seller, sellersPrice);\r\n    }\r\n    if(commssion > 0){\r\n      RCCToken.transferFrom(_buyer, owner, commssion);\r\n    }\r\n    // add to total orders matched\r\n\t  totalOrdersMatched = totalOrdersMatched.add(1);\r\n    // update ownership to buyer\r\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, _buyer);\r\n    emit OrderMatched(_buyer, seller, spOfWeapon, msg.sender, commssion, 'RCC');\r\n  }\r\n\r\n  function buywithEth(uint _weaponId, address _buyer, uint weiPaid) internal {\r\n    // basic validations\r\n    require ( rate > 0, '8');\r\n\r\n    // get weapon details\r\n    (address seller, uint spOfWeapon, uint commssion) = getWeaponDetails(_weaponId);\r\n\r\n    // calculate prices in wei\r\n    uint spInWei = spOfWeapon.div(rate);\r\n    require(spInWei > 0, '9');\r\n    require(weiPaid == spInWei, '10');\r\n    uint sellerPrice = spOfWeapon.sub(commssion);\r\n\r\n    // send RCC to seller\r\n    require (RCCToken.balanceOf(address(this)) >= sellerPrice, '11');\r\n    RCCToken.transfer(seller, sellerPrice);\r\n\r\n    // send ETH to admin\r\n    //address(owner).transfer(weiPaid);\r\n\r\n    // remove weapon from sale\r\n    removeWeaponFromSale(_weaponId);\r\n\r\n    // add to total orders matched\r\n\t  totalOrdersMatched = totalOrdersMatched.add(1);\r\n\r\n    // transfer weapon to buyer\r\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, _buyer);\r\n    emit OrderMatched(_buyer, seller, spOfWeapon,  msg.sender, commssion, 'ETH');\r\n  } \r\n\r\n  function putWeaponOnSale(uint _weaponId, item memory _testItem) internal {\r\n    // chnage ownership of weapon to this contract\r\n    weaponTokenize.updateOwnerOfWeapon(_weaponId, address(this));\r\n    // allocate last index to this weapon id\r\n    indexToWeaponId[totalWeaponOnSale.add(1)] = _weaponId;\r\n    //\r\n    weaponIdToIndex[_weaponId] = totalWeaponOnSale.add(1);\r\n    // increase totalWeapons\r\n    totalWeaponOnSale = totalWeaponOnSale.add(1);\r\n    // map weaponId to weaponDetail\r\n    weaponDetail[_weaponId] = _testItem;\r\n    // set on sale flag to true\r\n    isOnSale[_weaponId] = true;\r\n    // add to total orders placed\r\n    totalOrdersPlaced = totalOrdersPlaced.add(1);\r\n  }\r\n\r\n  function removeWeaponFromSale(uint _weaponId) internal {\r\n    // set on sale property to false\r\n    isOnSale[_weaponId] = false;\r\n    // reset values of struct\r\n    weaponDetail[_weaponId] = item(0, 0,address(0));\r\n    uint indexOfDeletedWeapon = weaponIdToIndex[_weaponId];\r\n    if(indexOfDeletedWeapon != totalWeaponOnSale){\r\n      uint weaponAtLastIndex = indexToWeaponId[totalWeaponOnSale];\r\n      // map last elment to current one\r\n      weaponIdToIndex[weaponAtLastIndex] = indexOfDeletedWeapon;\r\n      indexToWeaponId[indexOfDeletedWeapon] = weaponAtLastIndex;\r\n      // last element to 0\r\n      weaponIdToIndex[_weaponId] = 0;\r\n      indexToWeaponId[totalWeaponOnSale] = 0;\r\n    } else{\r\n      weaponIdToIndex[_weaponId] = 0;\r\n      indexToWeaponId[indexOfDeletedWeapon] = 0;\r\n    }\r\n    totalWeaponOnSale = totalWeaponOnSale.sub(1);\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n                    // Constant functions //\r\n  ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function getWeaponDetails (uint _weaponId) public view returns (address, uint, uint) {\r\n    item memory currentItem = weaponDetail[_weaponId];\r\n    return (currentItem.seller, currentItem.sellPrice, currentItem.commssion);\r\n  }\r\n\r\n  function calculateCommission (uint _amount) public view returns (uint) {\r\n    return _amount.mul(commssion_n).div(commssion_d).div(100);\r\n  }\r\n\r\n  function getTotalWeaponOnSale() public view returns (uint) {\r\n    return totalWeaponOnSale;\r\n  }\r\n\r\n  function getWeaponAt(uint index) public view returns(address, uint, uint, uint) {\r\n    uint weaponId =  indexToWeaponId[index];\r\n    item memory currentItem = weaponDetail[weaponId];\r\n    return (currentItem.seller, currentItem.sellPrice, currentItem.commssion, weaponId);\r\n  }\r\n\r\n  function checkOperator(address _user, address _operator) public view returns (bool){\r\n    return operators[_user][_operator];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"disableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponDetail\",\"outputs\":[{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"commssion\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOrdersPlaced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableEthSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"}],\"name\":\"getWeaponDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weaponTokenize\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableEthSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"checkOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commssion_n\",\"type\":\"uint256\"},{\"name\":\"_commssion_d\",\"type\":\"uint256\"}],\"name\":\"updateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commssion_n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOrdersCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"updateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOrdersMatched\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWeaponAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyWeaponWithEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToWeaponId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"sellWeapon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyWeaponWithRCC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commssion_d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethSaleDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWeaponOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RCCToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponIdToIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenizeAddress\",\"type\":\"address\"},{\"name\":\"_rccAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_placedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sp\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_placedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sp\",\"type\":\"uint256\"}],\"name\":\"OderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_placedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weaponId\",\"type\":\"uint256\"}],\"name\":\"OrderCacelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_placedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_commssion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payType\",\"type\":\"string\"}],\"name\":\"OrderMatched\",\"type\":\"event\"}]","ContractName":"TradeWeapon","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a74c8b0d5993e358f109750cf1ead1cb49cc6dd0000000000000000000000009b6443b0fb9c241a7fdac375595cea13e6b7807a","Library":"","SwarmSource":"bzzr://f55d9eb16614186a2552d38bd21ad02ae25d9bfc154f2234270c2ad7a7087f3d"}]}