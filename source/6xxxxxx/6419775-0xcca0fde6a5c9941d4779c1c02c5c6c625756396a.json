{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'imChat' token contract\r\n//\r\n// Symbol      : IMC\r\n// Name        : IMC\r\n// Total supply: 1000,000,000.000000000000000000\r\n// Decimals    : 8\r\n//\r\n// imChat Technology Service Limited\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract IMCToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    address externalContractAddress;\r\n\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() public {\r\n        symbol = \"IMC\";\r\n        name = \"IMC\";\r\n        decimals = 8;\r\n        _totalSupply = 1000000000 * (10 ** uint(decimals));\r\n        balances[owner] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * 查询代币总发行量\r\n     * @return unit 余额\r\n     */\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    /**\r\n     * 查询代币余额\r\n     * @param _owner address 查询代币的地址\r\n     * @return balance 余额\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * 私有方法从一个帐户发送给另一个帐户代币\r\n     * @param _from address 发送代币的地址\r\n     * @param _to address 接受代币的地址\r\n     * @param _value uint 接受代币的数量\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal{\r\n        // 确保目标地址不为0x0，因为0x0地址代表销毁\r\n        require(_to != 0x0);\r\n        // 检查发送者是否拥有足够余额\r\n        require(balances[_from] >= _value);\r\n        // 检查是否溢出\r\n        require(balances[_to] + _value > balances[_to]);\r\n\r\n        // 保存数据用于后面的判断\r\n        uint previousBalance = balances[_from].add(balances[_to]);\r\n\r\n        // 从发送者减掉发送额\r\n        balances[_from] = balances[_from].sub(_value);\r\n        // 给接收者加上相同的量\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        // 通知任何监听该交易的客户端\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // 判断发送、接收方的数据是否和转换前一致\r\n        assert(balances[_from].add(balances[_to]) == previousBalance);\r\n    }\r\n\r\n    /**\r\n     * 从主帐户合约调用者发送给别人代币\r\n     * @param _to address 接受代币的地址\r\n     * @param _value uint 接受代币的数量\r\n     * @return success 交易成功\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        // _transfer(msg.sender, _to, _value);\r\n\r\n        if (msg.sender == owner) {\r\n            // ERC20合约owner调用\r\n            _transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        } else {\r\n            // 外部合约调用，需满足合约调用者和代币合约所设置的外部调用合约地址一致性\r\n            require(msg.sender == externalContractAddress);\r\n\r\n            _transfer(owner, _to, _value);\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 账号之间代币交易转移，调用过程，会检查设置的允许最大交易额\r\n     * @param _from address 发送者地址\r\n     * @param _to address 接受者地址\r\n     * @param _value uint 要转移的代币数量\r\n     * @return success 交易成功\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        \r\n        if (_from == msg.sender) {\r\n            // 自己转账时不需要approve，可以直接进行转账\r\n            _transfer(_from, _to, _value);\r\n\r\n        } else {\r\n            // 授权给第三方时，需检查发送者是否拥有足够余额\r\n            require(allowed[_from][msg.sender] >= _value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n            _transfer(_from, _to, _value);\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * 允许帐户授权其他帐户代表他们提取代币\r\n    * @param _spender 授权帐户地址\r\n    * @param _value 代币数量\r\n    * @return success 允许成功\r\n    */\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * 查询被授权帐户的允许提取的代币数\r\n    * @param _owner 授权者帐户地址\r\n    * @param _spender 被授权者帐户地址\r\n    * @return remaining 代币数量\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * 设置允许一个地址（合约）以我（创建交易者）的名义可最多花费的代币数。\r\n     * @param _spender 被授权的地址（合约）\r\n     * @param _value 最大可花费代币数\r\n     * @param _extraData 发送给合约的附加数据\r\n     * @return success 设置成功\r\n     */\r\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            // 通知合约\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置允许外部合约地址调用当前合约\r\n     * @param _contractAddress 合约地址\r\n     * @return success 设置成功\r\n     */\r\n    function approveContractCall(address _contractAddress) public onlyOwner returns (bool){\r\n        externalContractAddress = _contractAddress;\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 不接收 Ether\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 发行记录合约\r\n// ----------------------------------------------------------------------------\r\ncontract IMCIssuingRecord is Owned{\r\n    using SafeMath for uint;\r\n\r\n    // 发行记录添加日志\r\n    event IssuingRecordAdd(uint _date, bytes32 _hash, uint _depth, uint _userCount, uint _token, string _fileFormat, uint _stripLen);\r\n\r\n    // 定义IMCToken实例\r\n    IMCToken public imcToken;\r\n\r\n    // 平台账户地址\r\n    address platformAddr;\r\n\r\n    // Token发行统计记录\r\n    struct RecordInfo {\r\n        uint date;  // 记录日期（解锁ID）\r\n        bytes32 hash;  // 文件hash\r\n        uint depth; // 深度\r\n        uint userCount; // 用户数\r\n        uint token; // 发行token数量\r\n        string fileFormat; // 上链存证的文件格式\r\n        uint stripLen; // 上链存证的文件分区\r\n    }\r\n    \r\n    // 分配记录\r\n    mapping(uint => RecordInfo) public issuingRecord;\r\n    \r\n    // 用户数\r\n    uint public userCount;\r\n    \r\n    // 发行总币数\r\n    uint public totalIssuingBalance;\r\n    \r\n    /**\r\n     * 构造函数\r\n     * @param _tokenAddr address ERC20合约地址\r\n     * @param _platformAddr address 平台帐户地址\r\n     */\r\n    constructor(address _tokenAddr, address _platformAddr) public{\r\n        // 初始化IMCToken实例\r\n        imcToken = IMCToken(_tokenAddr);\r\n\r\n        // 初始化平台账户地址\r\n        platformAddr = _platformAddr;\r\n    }\r\n    \r\n    /**\r\n     * 修改platformAddr，只有owner能够修改\r\n     * @param _addr address 地址\r\n     */\r\n    function modifyPlatformAddr(address _addr) public onlyOwner {\r\n        platformAddr = _addr;\r\n    }\r\n\r\n    /**\r\n     * 转账到中间帐户\r\n     * @param _tokens uint 币数量\r\n     * @return success 交易成功\r\n     */\r\n    function sendTokenToPlatform(uint _tokens) internal returns (bool) {\r\n\r\n        imcToken.transfer(platformAddr, _tokens);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 发行记录添加\r\n     * @param _date uint 记录日期（解锁ID）\r\n     * @param _hash bytes32 文件hash\r\n     * @param _depth uint 深度\r\n     * @param _userCount uint 用户数\r\n     * @param _token uint 发行token数量\r\n     * @param _fileFormat string 上链存证的文件格式\r\n     * @param _stripLen uint 上链存证的文件分区\r\n     * @return success 添加成功\r\n     */\r\n    function issuingRecordAdd(uint _date, bytes32 _hash, uint _depth, uint _userCount, uint _token, string _fileFormat, uint _stripLen) public onlyOwner returns (bool) {\r\n        // 防止重复记录\r\n        require(!(issuingRecord[_date].date > 0));\r\n\r\n        // 累计用户数\r\n        userCount = userCount.add(_userCount);\r\n\r\n        // 累计发行币数\r\n        totalIssuingBalance = totalIssuingBalance.add(_token);\r\n        \r\n        // 记录发行信息\r\n        issuingRecord[_date] = RecordInfo(_date, _hash, _depth, _userCount, _token, _fileFormat, _stripLen);\r\n\r\n        // 转账到中间帐户\r\n        sendTokenToPlatform(_token);\r\n\r\n        emit IssuingRecordAdd(_date, _hash, _depth, _userCount, _token, _fileFormat, _stripLen);\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_depth\",\"type\":\"uint256\"},{\"name\":\"_userCount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_fileFormat\",\"type\":\"string\"},{\"name\":\"_stripLen\",\"type\":\"uint256\"}],\"name\":\"issuingRecordAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuingRecord\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"depth\",\"type\":\"uint256\"},{\"name\":\"userCount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"fileFormat\",\"type\":\"string\"},{\"name\":\"stripLen\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"modifyPlatformAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssuingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_platformAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_depth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_userCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fileFormat\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_stripLen\",\"type\":\"uint256\"}],\"name\":\"IssuingRecordAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IMCIssuingRecord","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000745e8a7bfaa12498c426a554b233ba5b843704d6000000000000000000000000cdacb05e9617c889fac367ccbedc36c6403cf418","Library":"","SwarmSource":"bzzr://9166e14e71dab4d146ce52e31a8dcd1932655e42f5412d8941930bf26ae26f7c"}]}