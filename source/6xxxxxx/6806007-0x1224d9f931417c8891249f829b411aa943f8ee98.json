{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Build your own empire on Blockchain\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoEngineerInterface {\r\n    uint256 public prizePool = 0;\r\n\r\n    function subVirus(address /*_addr*/, uint256 /*_value*/) public {}\r\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public {} \r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\r\n}\r\ncontract CryptoMiningWarInterface {\r\n    uint256 public deadline; \r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public {}\r\n}\r\ncontract CrystalDeposit {\r\n\tusing SafeMath for uint256;\r\n\r\n    bool init = false;\r\n\taddress public administrator;\r\n\t// mini game\r\n    uint256 public HALF_TIME = 48 hours;\r\n    uint256 public round = 0;\r\n    CryptoEngineerInterface public Engineer;\r\n    CryptoMiningWarInterface public MiningWar;\r\n    // mining war info\r\n    uint256 public miningWarDeadline;\r\n    uint256 constant private CRTSTAL_MINING_PERIOD = 86400;\r\n    /** \r\n    * @dev mini game information\r\n    */\r\n    mapping(uint256 => Game) public games;\r\n    /** \r\n    * @dev player information\r\n    */\r\n    mapping(address => Player) public players;\r\n   \r\n    struct Game {\r\n        uint256 round;\r\n        uint256 crystals;\r\n        uint256 prizePool;\r\n        uint256 endTime;\r\n        bool ended; \r\n    }\r\n    struct Player {\r\n        uint256 currentRound;\r\n        uint256 lastRound;\r\n        uint256 reward;\r\n        uint256 share; // your crystals share in current round \r\n    }\r\n    event EndRound(uint256 round, uint256 crystals, uint256 prizePool, uint256 endTime);\r\n    event Deposit(address player, uint256 questId, uint256 questLv, uint256 deposit, uint256 bonus, uint256 percent);\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    modifier disableContract()\r\n    {\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface contract\r\n        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\r\n        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 _miningWarDeadline ) public\r\n    {\r\n        miningWarDeadline = getMiningWarDealine();\r\n    }\r\n    function setMiningWarInterface(address _addr) public isAdministrator\r\n    {\r\n        MiningWar = CryptoMiningWarInterface(_addr);\r\n    }\r\n    function setEngineerInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\r\n        \r\n        require(engineerInterface.isContractMiniGame() == true);\r\n\r\n        Engineer = engineerInterface;\r\n    }\r\n    /**\r\n    * @dev start the mini game\r\n    */\r\n     function startGame() public \r\n    {\r\n        require(msg.sender == administrator);\r\n        require(init == false);\r\n        init = true;\r\n        miningWarDeadline = getMiningWarDealine();\r\n\r\n        games[round].ended = true;\r\n    \r\n        startRound();\r\n    }\r\n    function startRound() private\r\n    {\r\n        require(games[round].ended == true);\r\n\r\n        uint256 crystalsLastRound = games[round].crystals;\r\n        uint256 prizePoolLastRound= games[round].prizePool; \r\n\r\n        round = round + 1;\r\n\r\n        uint256 endTime = now + HALF_TIME;\r\n        // claim 5% of current prizePool as rewards.\r\n        uint256 engineerPrizePool = getEngineerPrizePool();\r\n        uint256 prizePool = SafeMath.div(SafeMath.mul(engineerPrizePool, 5),100);\r\n\r\n        Engineer.claimPrizePool(address(this), prizePool);\r\n        if (crystalsLastRound <= 0) prizePool = SafeMath.add(prizePool, prizePoolLastRound);\r\n        games[round] = Game(round, 0, prizePool, endTime, false);\r\n    }\r\n    function endRound() private\r\n    {\r\n        require(games[round].ended == false);\r\n        require(games[round].endTime <= now);\r\n\r\n        Game storage g = games[round];\r\n        g.ended = true;\r\n        \r\n        startRound();\r\n\r\n        emit EndRound(g.round, g.crystals, g.prizePool, g.endTime);\r\n    }\r\n    /**\r\n    * @dev player send crystals to the pot\r\n    */\r\n    function share(uint256 _value) public disableContract\r\n    {\r\n        require(miningWarDeadline > now);\r\n        require(games[round].ended == false);\r\n        require(_value >= 10000);\r\n\r\n        MiningWar.subCrystal(msg.sender, _value); \r\n\r\n        if (games[round].endTime <= now) endRound();\r\n        \r\n        updateReward(msg.sender);\r\n        \r\n        Game storage g = games[round];\r\n        uint256 _share = SafeMath.mul(_value, CRTSTAL_MINING_PERIOD);\r\n        g.crystals = SafeMath.add(g.crystals, _share);\r\n        Player storage p = players[msg.sender];\r\n        if (p.currentRound == round) {\r\n            p.share = SafeMath.add(p.share, _share);\r\n        } else {\r\n            p.share = _share;\r\n            p.currentRound = round;\r\n        }\r\n\r\n        emit Deposit(msg.sender, 1, 1, _value, 0, 0); \r\n    }\r\n    function withdrawReward() public disableContract\r\n    {\r\n        if (games[round].endTime <= now) endRound();\r\n        \r\n        updateReward(msg.sender);\r\n        Player storage p = players[msg.sender];\r\n        uint256 balance  = p.reward; \r\n        if (address(this).balance >= balance) {\r\n             msg.sender.transfer(balance);\r\n            // update player\r\n            p.reward = 0;     \r\n        }\r\n    }\r\n    function updateReward(address _addr) private\r\n    {\r\n        Player storage p = players[_addr];\r\n        \r\n        if ( \r\n            games[p.currentRound].ended == true &&\r\n            p.lastRound < p.currentRound\r\n            ) {\r\n            p.reward = SafeMath.add(p.reward, calculateReward(msg.sender, p.currentRound));\r\n            p.lastRound = p.currentRound;\r\n        }\r\n    }\r\n    function getData(address _addr) \r\n    public\r\n    view\r\n    returns(\r\n        // current game\r\n        uint256 _prizePool,\r\n        uint256 _crystals,\r\n        uint256 _endTime,\r\n        // player info\r\n        uint256 _reward,\r\n        uint256 _share\r\n    ) {\r\n         (_prizePool, _crystals, _endTime) = getCurrentGame();\r\n         (_reward, _share)                 = getPlayerData(_addr);         \r\n    }\r\n      /**\r\n    * @dev calculate reward\r\n    */\r\n    function calculateReward(address _addr, uint256 _round) public view returns(uint256)\r\n    {\r\n        Player memory p = players[_addr];\r\n        Game memory g = games[_round];\r\n        if (g.endTime > now) return 0;\r\n        if (g.crystals == 0) return 0; \r\n        return SafeMath.div(SafeMath.mul(g.prizePool, p.share), g.crystals);\r\n    }\r\n    function getCurrentGame() private view returns(uint256 _prizePool, uint256 _crystals, uint256 _endTime)\r\n    {\r\n        Game memory g = games[round];\r\n        _prizePool = g.prizePool;\r\n        _crystals  = g.crystals;\r\n        _endTime   = g.endTime;\r\n    }\r\n    function getPlayerData(address _addr) private view returns(uint256 _reward, uint256 _share)\r\n    {\r\n        Player memory p = players[_addr];\r\n        _reward           = p.reward;\r\n        if (p.currentRound == round) _share = players[_addr].share; \r\n        if (p.currentRound != p.lastRound) _reward += calculateReward(_addr, p.currentRound);\r\n    }\r\n    function getEngineerPrizePool() private view returns(uint256)\r\n    {\r\n        return Engineer.prizePool();\r\n    }\r\n    function getMiningWarDealine () private view returns(uint256)\r\n    {\r\n        return MiningWar.deadline();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"crystals\",\"type\":\"uint256\"},{\"name\":\"prizePool\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_prizePool\",\"type\":\"uint256\"},{\"name\":\"_crystals\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALF_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"share\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"currentRound\",\"type\":\"uint256\"},{\"name\":\"lastRound\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crystals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prizePool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"questLv\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"CrystalDeposit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fd918f9e5c3bc73adadd06633f5899e98cff365c3f5448698af6b0e06d9aa75"}]}