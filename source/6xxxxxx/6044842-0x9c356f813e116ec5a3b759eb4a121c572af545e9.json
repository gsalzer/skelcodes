{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract CryptoTomatoes {\r\n \r\n\t\tuint256 public TIME_TO_MAKE_TOMATOES = 21600; //6 hours\r\n\r\n\t\taddress public ownerAddress;\r\n\t\t\r\n\t\tbool public getFree = false;\r\n\t\tuint public needToGetFree = 0.001 ether;\r\n\t\tuint256 public STARTING_SEEDS = 500; \r\n\t\t\r\n\t\tmapping (address => uint256) public ballanceTomatoes; \r\n\t\tmapping (address => uint256) public claimedSeeds; \r\n\t\tmapping (address => uint256) public lastEvent; \r\n\t\tmapping (address => address) public referrals; \r\n\t\t\r\n\t\tmapping (address => uint256) public totalIn;\r\n\t\tmapping (address => uint256) public totalOut;\r\n\t\t\r\n\t\tuint256 public marketSeeds;\r\n\t\tuint256 PSN = 10000; \r\n\t\tuint256 PSNH = 5000; \r\n\r\n\t\tconstructor() public {\r\n\t\t\townerAddress = msg.sender;\r\n\t\t\tmarketSeeds = 10000000;\r\n\t\t}\r\n\t\t\r\n\t\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == ownerAddress);\r\n\t\t_;\r\n\t\t}\r\n\t\t\r\n\t\tfunction makeTomatoes(address ref) public {\r\n        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        uint256 seedsUsed = getMySeeds();\r\n        uint256 newTomatos = SafeMath.div(seedsUsed, TIME_TO_MAKE_TOMATOES);\r\n        ballanceTomatoes[msg.sender] = SafeMath.add(ballanceTomatoes[msg.sender], newTomatos);\r\n        claimedSeeds[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n        claimedSeeds[referrals[msg.sender]] = SafeMath.add(claimedSeeds[referrals[msg.sender]], SafeMath.div(seedsUsed, 5)); \r\n        marketSeeds = SafeMath.add(marketSeeds, SafeMath.div(seedsUsed, 10));\r\n\t\t}\r\n\r\n\t\tfunction sellSeeds() public {\r\n\r\n        uint256 seedsCount = getMySeeds();\r\n        uint256 seedsValue = calculateSeedSell(seedsCount);\r\n        uint256 fee = devFee(seedsValue);\r\n        ballanceTomatoes[msg.sender] = SafeMath.mul(SafeMath.div(ballanceTomatoes[msg.sender], 3), 2);\r\n        claimedSeeds[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n        marketSeeds = SafeMath.add(marketSeeds, seedsCount);\r\n\t\ttotalOut[msg.sender] = SafeMath.add(totalOut[msg.sender], seedsValue);\r\n        ownerAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(seedsValue, fee));\r\n    }\r\n\t\r\n\t\tuint256 public gamers = 0;\r\n\t\t\r\n\t\tfunction getGamers() public view returns (uint256){\r\n\t\t\treturn gamers;\r\n\t\t}\r\n\r\n\t\tfunction buySeeds() public payable {\r\n\r\n        uint256 seedsBought = calculateSeedBuy(msg.value, SafeMath.sub(this.balance, msg.value));\r\n        seedsBought = SafeMath.sub(seedsBought, devFee(seedsBought));\r\n        claimedSeeds[msg.sender] = SafeMath.add(claimedSeeds[msg.sender], seedsBought);\r\n\t\tif (totalIn[msg.sender] == 0){\r\n\t\t\tgamers+=1;\r\n\t\t}\r\n\t\ttotalIn[msg.sender] = SafeMath.add(totalIn[msg.sender], msg.value);\r\n        ownerAddress.transfer(devFee(msg.value));\r\n    }\r\n\t\r\n\r\n\r\n\t\tfunction calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n\t\tfunction calculateSeedSell(uint256 seeds) public view returns(uint256) {\r\n        return calculateTrade(seeds, marketSeeds, this.balance);\r\n    }\r\n\r\n\t\tfunction calculateSeedBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketSeeds);\r\n    }\r\n\r\n\t\tfunction calculateSeedBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateSeedBuy(eth, this.balance);\r\n    }\r\n\r\n\t\tfunction devFee(uint256 amount) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 4), 100); //4%\r\n    }\r\n\t\r\n\t\tfunction setTIME_TO_MAKE_TOMATOES(uint256 _newTime) public onlyOwner{\r\n\t\tTIME_TO_MAKE_TOMATOES = _newTime;\r\n\t}\r\n\t\r\n\t\tfunction setGetFree(bool newGetFree) public onlyOwner {\r\n\t\tgetFree = newGetFree;\r\n\t}\r\n\t\t\r\n\t\tfunction setNeedToGetFree(uint newNeedToGetFree) public onlyOwner {\r\n\t\tneedToGetFree = newNeedToGetFree;\r\n\t}\r\n\r\n\t\tfunction getFreeSeeds() public payable {\r\n\t\trequire(getFree);\r\n        require(msg.value == needToGetFree);\r\n        ownerAddress.transfer(msg.value);\r\n        require(ballanceTomatoes[msg.sender] == 0);\r\n        lastEvent[msg.sender] = now;\r\n        ballanceTomatoes[msg.sender] = STARTING_SEEDS;\r\n    }\r\n\t\r\n\t\tfunction setStartingSeeds(uint256 NEW_STARTING_SEEDS) public onlyOwner {\r\n\t\tSTARTING_SEEDS = NEW_STARTING_SEEDS;\r\n\t}\r\n\r\n\t\tfunction getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n\t\tfunction getMyTomatoes() public view returns(uint256) {\r\n        return ballanceTomatoes[msg.sender];\r\n    }\r\n\r\n\t\t\r\n\t\tfunction getTotalIn(address myAddress) public view returns(uint256) {\r\n\t\t\treturn totalIn[myAddress];\r\n\t\t}\r\n\t\t\r\n\t\tfunction getTotalOut(address myAddress) public view returns(uint256) {\r\n\t\t\treturn totalOut[myAddress];\r\n\t\t}\r\n\r\n\r\n\t\tfunction getMySeeds() public view returns(uint256) { \r\n        return SafeMath.add(claimedSeeds[msg.sender], getSeedsSinceLastEvent(msg.sender));\r\n    }\r\n\r\n\t\tfunction getSeedsSinceLastEvent(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(TIME_TO_MAKE_TOMATOES, SafeMath.sub(now, lastEvent[adr]));\r\n        return SafeMath.mul(secondsPassed, ballanceTomatoes[adr]);\r\n    }\r\n\r\n\t\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\t\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\t\t  /**\r\n\t\t  * @dev Multiplies two numbers, throws on overflow.\r\n\t\t  */\r\n\t\t  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t\tif (a == 0) {\r\n\t\t\t  return 0;\r\n\t\t\t}\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tassert(c / a == b);\r\n\t\t\treturn c;\r\n\t\t  }\r\n\r\n\t\t  /**\r\n\t\t  * @dev Integer division of two numbers, truncating the quotient.\r\n\t\t  */\r\n\t\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t\tuint256 c = a / b;\r\n\t\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\t\treturn c;\r\n\t\t  }\r\n\r\n\t\t  /**\r\n\t\t  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t\t  */\r\n\t\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t\tassert(b <= a);\r\n\t\t\treturn a - b;\r\n\t\t  }\r\n\r\n\t\t  /**\r\n\t\t  * @dev Adds two numbers, throws on overflow.\r\n\t\t  */\r\n\t\t  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tassert(c >= a);\r\n\t\t\treturn c;\r\n\t\t  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buySeeds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NEW_STARTING_SEEDS\",\"type\":\"uint256\"}],\"name\":\"setStartingSeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_MAKE_TOMATOES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGamers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellSeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seeds\",\"type\":\"uint256\"}],\"name\":\"calculateSeedSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"makeTomatoes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTime\",\"type\":\"uint256\"}],\"name\":\"setTIME_TO_MAKE_TOMATOES\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedSeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMySeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"getTotalIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSeedsSinceLastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNeedToGetFree\",\"type\":\"uint256\"}],\"name\":\"setNeedToGetFree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballanceTomatoes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyTomatoes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SEEDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketSeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"getTotalOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needToGetFree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGetFree\",\"type\":\"bool\"}],\"name\":\"setGetFree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeSeeds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoTomatoes","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d78d9a0506c4002d164edc0fa91a14d9dbe20d716571d34365f21bf07fd066b4"}]}