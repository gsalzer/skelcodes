{"status":"1","message":"OK","result":[{"SourceCode":"//EA 0x7EDA2301cb535e2EA8ea06237f6443b6268e2b2A  ETH Main net\r\n\r\n\r\npragma solidity ^0.4.25; // solhint-disable-line\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public view returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\n//********************************************************************\r\n\r\n\r\ncontract CharToken is ERC721 {\r\n  /*** EVENTS ***/\r\n  /// @dev The Birth event is fired whenever a new char comes into existence.\r\n  event Birth(uint256 tokenId, string wikiID_Name, address owner);\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, string wikiID_Name);\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n  /// @dev Emitted when a bug is found int the contract and the contract is upgraded at a new address.\r\n  /// In the event this happens, the current contract is paused indefinitely\r\n  event ContractUpgrade(address newContract);\r\n  ///bonus issuance    \r\n  event Bonus(address to, uint256 bonus);\r\n\r\n  /*** CONSTANTS ***/\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoChars\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"CHARS\"; // solhint-disable-line\r\n  bool private erc721Enabled = false;\r\n  uint256 private startingPrice = 0.005 ether;\r\n  uint256 private constant PROMO_CREATION_LIMIT = 50000;\r\n  uint256 private firstStepLimit =  0.05 ether;\r\n  uint256 private secondStepLimit = 0.20 ether;\r\n  uint256 private thirdStepLimit = 0.5 ether;\r\n\r\n  /*** STORAGE ***/\r\n  /// @dev A mapping from char IDs to the address that owns them. All chars have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public charIndexToOwner;\r\n // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n  /// @dev A mapping from CharIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Char can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public charIndexToApproved;\r\n  // @dev A mapping from CharIDs to the price of the token.\r\n  mapping (uint256 => uint256) private charIndexToPrice;\r\n  // @dev A mapping from owner address to its total number of transactions\r\n  mapping (address => uint256) private addressToTrxCount;\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address public cfoAddress;\r\n  uint256 public promoCreatedCount;\r\n  //***pack below into a struct for gas optimization    \r\n  //promo per each N trx is effective until date, and its frequency (every nth buy)\r\n  uint256 public bonusUntilDate;   \r\n  uint256 bonusFrequency;\r\n  /*** DATATYPES ***/\r\n  struct Char {\r\n    //name of the char\r\n    //string name;\r\n    //wiki pageid of char\r\n    string wikiID_Name; //save gas\r\n  }\r\n  Char[] private chars; \r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n  /// @dev Access modifier for CFO-only functionality\r\n  modifier onlyCFO() {\r\n    require(msg.sender == cfoAddress);\r\n    _;\r\n  }\r\n  modifier onlyERC721() {\r\n    require(erc721Enabled);\r\n    _;\r\n  }\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress ||\r\n      msg.sender == cfoAddress \r\n    );\r\n    _;\r\n  }\r\n  /*** CONSTRUCTOR ***/\r\n  constructor() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    cfoAddress = msg.sender;\r\n    bonusUntilDate = now; //Bonus after Nth buy is valid until this date\r\n    bonusFrequency = 3; //Bonus distributed after every Nth buy\r\n    \r\n    //create genesis chars\r\n    createContractChar(\"42268616_Captain Ahab\",0);\r\n    createContractChar(\"455401_Frankenstein\",0);\r\n    createContractChar(\"8670724_Dracula\",0);\r\n    createContractChar(\"27159_Sherlock Holmes\",0);\r\n    createContractChar(\"160108_Snow White\",0);\r\n    createContractChar(\"73453_Cinderella\",0);\r\n    createContractChar(\"14966133_Pinocchio\",0);\r\n    createContractChar(\"369427_Lemuel Gulliver\",0);\r\n    createContractChar(\"26171_Robin Hood\",0);\r\n    createContractChar(\"197889_Felix the Cat\",0);\r\n    createContractChar(\"382164_Wizard of Oz\",0);\r\n    createContractChar(\"62446_Alice\",0);\r\n    createContractChar(\"8237_Don Quixote\",0);\r\n    createContractChar(\"16808_King Arthur\",0);\r\n    createContractChar(\"194085_Sleeping Beauty\",0);\r\n    createContractChar(\"299250_Little Red Riding Hood\",0);\r\n    createContractChar(\"166604_Aladdin\",0);\r\n    createContractChar(\"7640956_Peter Pan\",0);\r\n    createContractChar(\"927344_Ali Baba\",0);\r\n    createContractChar(\"153957_Lancelot\",0);\r\n    createContractChar(\"235918_Dr._Jekyll_and_Mr._Hyde\",0);\r\n    createContractChar(\"157787_Captain_Nemo\",0);\r\n    createContractChar(\"933085_Moby_Dick\",0);\r\n    createContractChar(\"54246379_Dorian_Gray\",0);\r\n    createContractChar(\"55483_Robinson_Crusoe\",0);\r\n    createContractChar(\"380143_Black_Beauty\",0);\r\n    createContractChar(\"6364074_Phantom_of_the_Opera\",0); \r\n    createContractChar(\"15055_Ivanhoe\",0);\r\n    createContractChar(\"21491685_Tarzan\",0);\r\n    /* */    \r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public onlyERC721 {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    charIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n\r\n  /// @dev Creates a new Char with the given name\r\n  function createContractChar(string _wikiID_Name, uint256 _price) public onlyCLevel {\r\n    require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n    if (_price <= 0) {\r\n      _price = startingPrice;\r\n    }\r\n    promoCreatedCount++;\r\n    _createChar(_wikiID_Name, address(this), _price);\r\n  }\r\n  /// @notice Returns all the relevant information about a specific char.\r\n  /// @param _tokenId The tokenId of the char of interest.\r\n  function getChar(uint256 _tokenId) public view returns (\r\n    string wikiID_Name,\r\n    uint256 sellingPrice,\r\n    address owner\r\n  ) {\r\n    Char storage char = chars[_tokenId];\r\n    wikiID_Name = char.wikiID_Name;\r\n    sellingPrice = charIndexToPrice[_tokenId];\r\n    owner = charIndexToOwner[_tokenId];\r\n  }\r\n  function changeWikiID_Name(uint256 _tokenId, string _wikiID_Name) public onlyCLevel {\r\n    require(_tokenId < chars.length);\r\n    chars[_tokenId].wikiID_Name = _wikiID_Name;\r\n  }\r\n  function changeBonusUntilDate(uint32 _days) public onlyCLevel {\r\n       bonusUntilDate = now + (_days * 1 days);\r\n  }\r\n  function changeBonusFrequency(uint32 _n) public onlyCLevel {\r\n       bonusFrequency = _n;\r\n  }\r\n  function overrideCharPrice(uint256 _tokenId, uint256 _price) public onlyCLevel {\r\n    require(_price != charIndexToPrice[_tokenId]);\r\n    require(_tokenId < chars.length);\r\n    //C level can override price for only own and contract tokens\r\n    require((_owns(address(this), _tokenId)) || (  _owns(msg.sender, _tokenId)) ); \r\n    charIndexToPrice[_tokenId] = _price;\r\n  }\r\n  function changeCharPrice(uint256 _tokenId, uint256 _price) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_tokenId < chars.length);\r\n    require(_price != charIndexToPrice[_tokenId]);\r\n    //require(_price > charIndexToPrice[_tokenId]);  //EA>should we enforce this?\r\n    uint256 maxPrice = SafeMath.div(SafeMath.mul(charIndexToPrice[_tokenId], 1000),100); //10x \r\n    uint256 minPrice = SafeMath.div(SafeMath.mul(charIndexToPrice[_tokenId], 50),100); //half price\r\n    require(_price >= minPrice); \r\n    require(_price <= maxPrice); \r\n    charIndexToPrice[_tokenId] = _price; \r\n  }\r\n  /* ERC721 */\r\n  function implementsERC721() public view returns (bool _implements) {\r\n    return erc721Enabled;\r\n  }\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = charIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n//  function payout(address _to) public onlyCLevel {\r\n//    _payout(_to);\r\n//  }\r\n  function withdrawFunds(address _to, uint256 amount) public onlyCLevel {\r\n    _withdrawFunds(_to, amount);\r\n  }\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId, uint256 newPrice) public payable {\r\n    address oldOwner = charIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    uint256 sellingPrice = charIndexToPrice[_tokenId];\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n    // Update prices\r\n    if (newPrice >= sellingPrice) charIndexToPrice[_tokenId] = newPrice;\r\n    else {\r\n            if (sellingPrice < firstStepLimit) {\r\n              // first stage\r\n              charIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 100);\r\n            } else if (sellingPrice < secondStepLimit) {\r\n              // second stage\r\n              charIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);\r\n            } else if (sellingPrice < thirdStepLimit) {\r\n              // second stage\r\n              charIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 125), 100);\r\n            } else {\r\n              // third stage\r\n              charIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 100);\r\n            }\r\n    }\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n    emit TokenSold(_tokenId, sellingPrice, charIndexToPrice[_tokenId], oldOwner, newOwner,\r\n      chars[_tokenId].wikiID_Name);\r\n    msg.sender.transfer(purchaseExcess);\r\n    //distribute bonus if earned and promo is ongoing and every nth buy trx\r\n      if( (now < bonusUntilDate && (addressToTrxCount[newOwner] % bonusFrequency) == 0) ) \r\n      {\r\n          //bonus operation here\r\n          uint rand = uint (keccak256(now)) % 50 ; //***earn up to 50% of 6% commissions\r\n          rand = rand * (sellingPrice-payment);  //***replace later. this is for test\r\n          _withdrawFunds(newOwner,rand);\r\n          emit Bonus(newOwner,rand);\r\n      }\r\n  }\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return charIndexToPrice[_tokenId];\r\n  }\r\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n  function enableERC721() public onlyCEO {\r\n    erc721Enabled = true;\r\n  }\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCOO {\r\n    require(_newCOO != address(0));\r\n    cooAddress = _newCOO;\r\n  }\r\n/// @dev Assigns a new address to act as the CFO. Only available to the current CFO.\r\n  /// @param _newCFO The address of the new CFO\r\n  function setCFO(address _newCFO) public onlyCFO {\r\n    require(_newCFO != address(0));\r\n    cfoAddress = _newCFO;\r\n  }\r\n  \r\n  \r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = charIndexToOwner[_tokenId];\r\n     // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n  /// @param _owner The owner whose char tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Chars array looking for chars belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalChars = chars.length;\r\n      uint256 resultIndex = 0;\r\n      uint256 t;\r\n      for (t = 0; t <= totalChars; t++) {\r\n        if (charIndexToOwner[t] == _owner) {\r\n          result[resultIndex] = t;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return chars.length;\r\n  }\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public onlyERC721 {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public onlyERC721 {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return charIndexToApproved[_tokenId] == _to;\r\n  }\r\n  /// For creating Char\r\n  function _createChar(string _wikiID_Name, address _owner, uint256 _price) private {\r\n    Char memory _char = Char({\r\n      wikiID_Name: _wikiID_Name\r\n    });\r\n    uint256 newCharId = chars.push(_char) - 1;\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newCharId == uint256(uint32(newCharId)));\r\n    emit Birth(newCharId, _wikiID_Name, _owner);\r\n    charIndexToPrice[newCharId] = _price;\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newCharId);\r\n  }\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == charIndexToOwner[_tokenId];\r\n  }\r\n  /// For paying out balance on contract\r\n//  function _payout(address _to) private {\r\n//    if (_to == address(0)) {\r\n//      ceoAddress.transfer(address(this).balance);\r\n//    } else {\r\n//      _to.transfer(address(this).balance);\r\n//    }\r\n//  }\r\n function _withdrawFunds(address _to, uint256 amount) private {\r\n    require(address(this).balance >= amount);\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n  /// @dev Assigns ownership of a specific Char to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of chars is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    charIndexToOwner[_tokenId] = _to;\r\n    // When creating new chars _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete charIndexToApproved[_tokenId];\r\n    }\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _tokenId);\r\n  //update trx count  \r\n  addressToTrxCount[_to]++;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getChar\",\"outputs\":[{\"name\":\"wikiID_Name\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeCharPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"overrideCharPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint32\"}],\"name\":\"changeBonusUntilDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wikiID_Name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createContractChar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_wikiID_Name\",\"type\":\"string\"}],\"name\":\"changeWikiID_Name\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint32\"}],\"name\":\"changeBonusFrequency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusUntilDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wikiID_Name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wikiID_Name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CharToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e02ed953e8ace261c250488dff1bcd98b919cac584c81f8bc3e8a7df0aa6835c"}]}