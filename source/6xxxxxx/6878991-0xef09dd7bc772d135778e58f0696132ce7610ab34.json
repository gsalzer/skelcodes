{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Voting{\r\n    address owner;\r\n    event Voting(uint256 videoNum, uint256 totalVoting);\r\n    event ChangeOwner(address owner);\r\n    \r\n    mapping (uint256=>uint256) totalVoting;\r\n    \r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address _owner) onlyOwner returns(bool){\r\n        owner = _owner;\r\n        emit ChangeOwner(_owner);\r\n        return true;\r\n    }\r\n    \r\n    function likeVoting(uint256 videoNum) onlyOwner returns(bool){\r\n        totalVoting[videoNum] = totalVoting[videoNum] + 1;\r\n        emit Voting(videoNum, totalVoting[videoNum]);\r\n        return true;\r\n    }\r\n\r\n    function starVoting(uint256 videoNum, uint8 star) onlyOwner returns(bool) {\r\n        if(star > 0 && star < 6){\r\n            totalVoting[videoNum] = totalVoting[videoNum] + star;\r\n            emit Voting(videoNum, totalVoting[videoNum]);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function voteVoting(uint256[] videoNum, uint256[] count) onlyOwner returns(bool){\r\n        for(uint i=0; i< videoNum.length; i++){\r\n            totalVoting[videoNum[i]] = totalVoting[videoNum[i]] + (3 * count[i]);\r\n            emit Voting(videoNum[i], totalVoting[videoNum[i]]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getVotingData(uint256 videoNum) returns(uint256){\r\n        return totalVoting[videoNum];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"videoNum\",\"type\":\"uint256\"}],\"name\":\"likeVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"videoNum\",\"type\":\"uint256\"}],\"name\":\"getVotingData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"videoNum\",\"type\":\"uint256[]\"},{\"name\":\"count\",\"type\":\"uint256[]\"}],\"name\":\"voteVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"videoNum\",\"type\":\"uint256\"},{\"name\":\"star\",\"type\":\"uint8\"}],\"name\":\"starVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"videoNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalVoting\",\"type\":\"uint256\"}],\"name\":\"Voting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"}]","ContractName":"Voting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://68aea8aee9fc8f475ee8070e8e22fa33b053e6b38c411b149f3cba69cab3a243"}]}