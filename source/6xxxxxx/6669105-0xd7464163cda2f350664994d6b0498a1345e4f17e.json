{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n// © 2018 SafeBlocks LTD.  All rights reserved.\r\n\r\n  _____            __          ____    _                  _\r\n / ____|          / _|        |  _ \\  | |                | |\r\n| (___     __ _  | |_    ___  | |_) | | |   ___     ___  | | __  ___\r\n \\___ \\   / _` | |  _|  / _ \\ |  _ <  | |  / _ \\   / __| | |/ / / __|\r\n ____) | | (_| | | |   |  __/ | |_) | | | | (_) | | (__  |   <  \\__ \\\r\n|_____/   \\__,_| |_|    \\___| |____/  |_|  \\___/   \\___| |_|\\_\\ |___/\r\n\r\n\r\n// @author SafeBlocks\r\n// @date 30/04/2018\r\n*/\r\ncontract SafeBlocksFirewall {\r\n\r\n    event EnquireResult(address sourceAddress, bool approved, address token, uint amount, address destination, uint blockNumber, string msg);\r\n    event PolicyChanged(address contractAddress, address destination, address tokenAdress, uint limit);\r\n    event ConfigurationChanged(address sender, address newConfiguration, string message);\r\n\r\n    address owner;\r\n    address rulesOwner;\r\n    address proxyContract;\r\n    bool verbose;\r\n\r\n    mapping(address /*contractId*/ => LimitsRule) limitsRule;\r\n    mapping(address /*contractId*/ => uint) lastSuccessPerContract;\r\n    mapping(address /*contractId*/ => mapping(address /*destination*/ => uint)) lastSuccessPerContractPerDestination;\r\n    mapping(address /*contractId*/ => bool) blockAll;\r\n    mapping(address /*contractId*/ => bool) enforceBypass;\r\n    mapping(address /*contractId*/ => mapping(address /*destination*/ => mapping(address /*tokenAddress*/ => uint256 /*limit*/))) customerRules;\r\n\r\n    struct LimitsRule {\r\n        uint perAddressLimit;\r\n        uint globalLimit;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        verbose = true;\r\n    }\r\n\r\n    //*************************************** modifiers ****************************************\r\n\r\n    modifier onlyContractOwner {\r\n        require(owner == msg.sender, \"You are not allowed to run this function, required role: Contract-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRulesOwner {\r\n        require(rulesOwner == msg.sender, \"You are not allowed to run this function, required role: Rules-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(proxyContract == msg.sender, \"You are not allowed to run this function, required role: SafeBlocks-Proxy\");\r\n        _;\r\n    }\r\n\r\n    //*************************************** setters ****************************************\r\n\r\n    function setProxyContract(address _proxy)\r\n    onlyContractOwner\r\n    public {\r\n        proxyContract = _proxy;\r\n        emit ConfigurationChanged(msg.sender, _proxy, \"a new proxy contract address has been assigned\");\r\n    }\r\n\r\n    function setRulesOwner(address _rulesOwner)\r\n    public\r\n    onlyContractOwner {\r\n        rulesOwner = _rulesOwner;\r\n        emit ConfigurationChanged(msg.sender, _rulesOwner, \"a new Rules-Owner has been assigned\");\r\n    }\r\n\r\n    function setVerbose(bool _verbose)\r\n    onlyContractOwner\r\n    public {\r\n        verbose = _verbose;\r\n        emit ConfigurationChanged(msg.sender, msg.sender, \"a new Verbose-Mode has been assigned\");\r\n    }\r\n\r\n    //*************************************** firewall functionality ****************************************\r\n\r\n    function setBypassPerContract(address _contractAddress, bool _bypass)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractAddress, address(0), address(0), _bypass ? 1 : 0);\r\n        enforceBypass[_contractAddress] = _bypass;\r\n        //to maintain default true we check if the enforce is set to *false*\r\n    }\r\n\r\n    function setBlockAllPerContract(address _contractId, bool _isBlocked)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractId, address(0), address(0), 0);\r\n        blockAll[_contractId] = _isBlocked;\r\n    }\r\n\r\n    function setPerAddressLimit(address _contractId, uint _limit)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractId, address(0), address(0), _limit);\r\n        limitsRule[_contractId].perAddressLimit = _limit;\r\n    }\r\n\r\n    function setGlobalLimit(address _contractId, uint _limit)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractId, address(0), address(0), _limit);\r\n        limitsRule[_contractId].globalLimit = _limit;\r\n    }\r\n\r\n    function addRule(address _contractId, address _destination, address _token, uint256 _tokenLimit)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractId, _destination, _token, _tokenLimit);\r\n        customerRules[_contractId][_destination][_token] = _tokenLimit;\r\n    }\r\n\r\n    function removeRule(address _contractId, address _destination, address _token)\r\n    onlyRulesOwner\r\n    public {\r\n        if (verbose) emit PolicyChanged(_contractId, _destination, _token, 0);\r\n        delete customerRules[_contractId][_destination][_token];\r\n    }\r\n\r\n    function allowTransaction(address _contractAddress, uint _amount, address _destination, address _token)\r\n    public\r\n    onlyProxy\r\n    returns (bool){\r\n        if (enforceBypass[_contractAddress]) {\r\n            if (verbose) emit EnquireResult(_contractAddress, true, _token, _amount, _destination, block.number, \"1\");\r\n            return true;\r\n        }\r\n        if (blockAll[_contractAddress]) {//if block all activated for this contract, deny all\r\n            if (verbose) emit EnquireResult(_contractAddress, false, _token, _amount, _destination, block.number, \"2\");\r\n            return false;\r\n        }\r\n        uint256 limit = customerRules[_contractAddress][_destination][_token];\r\n        uint256 anyDestinationLimit = customerRules[_contractAddress][0x0][_token];\r\n\r\n        if (limit == 0 && anyDestinationLimit == 0) {//no rules ?? deny all\r\n            if (verbose) emit EnquireResult(_contractAddress, false, _token, _amount, _destination, block.number, \"3\");\r\n            return false;\r\n        }\r\n        if (anyDestinationLimit > 0 && limit == 0) {\r\n            limit = anyDestinationLimit;\r\n        }\r\n        if (_amount <= limit) {\r\n            if (limitsRule[_contractAddress].perAddressLimit == 0 && limitsRule[_contractAddress].globalLimit == 0) {\r\n                if (verbose) emit EnquireResult(_contractAddress, true, _token, _amount, _destination, block.number, \"4\");\r\n                return true;\r\n            }\r\n            // no need to record and check rate limits;\r\n            if (checkTimeFrameLimit(_contractAddress)) {\r\n                if (checkAddressLimit(_contractAddress, _destination)) {\r\n                    lastSuccessPerContract[_contractAddress] = block.number;\r\n                    lastSuccessPerContractPerDestination[_contractAddress][_destination] = block.number;\r\n                    if (verbose) emit EnquireResult(_contractAddress, true, _token, _amount, _destination, block.number, \"5\");\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (verbose) emit EnquireResult(_contractAddress, false, _token, _amount, _destination, block.number, \"6\");\r\n        return false;\r\n    }\r\n\r\n    //*************************************** private ****************************************\r\n\r\n    function checkAddressLimit(address _contractId, address _destination)\r\n    private\r\n    view\r\n    returns (bool){\r\n        if (lastSuccessPerContractPerDestination[_contractId][_destination] > 0) {\r\n            if (block.number - lastSuccessPerContractPerDestination[_contractId][_destination] < limitsRule[_contractId].perAddressLimit) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function checkTimeFrameLimit(address _contractId)\r\n    private\r\n    view\r\n    returns (bool) {\r\n        if (lastSuccessPerContract[_contractId] > 0) {\r\n            if (block.number - lastSuccessPerContract[_contractId] < limitsRule[_contractId].globalLimit) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //*************************************** getters ****************************************\r\n\r\n    function getLimits(address _contractId)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint, uint){\r\n        return (limitsRule[_contractId].perAddressLimit, limitsRule[_contractId].globalLimit);\r\n    }\r\n\r\n    function getLastSuccessPerContract(address _contractId)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint){\r\n        return (lastSuccessPerContract[_contractId]);\r\n    }\r\n\r\n    function getLastSuccessPerContractPerDestination(address _contractId, address _destination)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint){\r\n        return (lastSuccessPerContractPerDestination[_contractId][_destination]);\r\n    }\r\n\r\n    function getBlockAll(address _contractId)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (bool){\r\n        return (blockAll[_contractId]);\r\n    }\r\n\r\n    function getEnforceBypass(address _contractId)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (bool){\r\n        return (enforceBypass[_contractId]);\r\n    }\r\n\r\n    function getCustomerRules(address _contractId, address _destination, address _tokenAddress)\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (uint256){\r\n        return (customerRules[_contractId][_destination][_tokenAddress]);\r\n    }\r\n}\r\n// © 2018 SafeBlocks LTD.  All rights reserved.","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"}],\"name\":\"getBlockAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"getLastSuccessPerContractPerDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"}],\"name\":\"getLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setPerAddressLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenLimit\",\"type\":\"uint256\"}],\"name\":\"addRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_bypass\",\"type\":\"bool\"}],\"name\":\"setBypassPerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_verbose\",\"type\":\"bool\"}],\"name\":\"setVerbose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getCustomerRules\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setGlobalLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"}],\"name\":\"getLastSuccessPerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"}],\"name\":\"getEnforceBypass\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_isBlocked\",\"type\":\"bool\"}],\"name\":\"setBlockAllPerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractId\",\"type\":\"address\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rulesOwner\",\"type\":\"address\"}],\"name\":\"setRulesOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"EnquireResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAdress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"PolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newConfiguration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"}]","ContractName":"SafeBlocksFirewall","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32e1d3bccf49cc31b9fd2d417cd77ded221f5f4e0505a7ba5960702f01a223dd"}]}