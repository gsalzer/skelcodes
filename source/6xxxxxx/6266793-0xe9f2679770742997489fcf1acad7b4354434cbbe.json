{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n/******************************************************************************\\\r\n* Author: Nick Mudge, nick@mokens.io\r\n* Mokens\r\n* Copyright (c) 2018\r\n*\r\n* Functions for querying moken information.\r\n/******************************************************************************/\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Storage contracts\r\n////////////\r\n//Some delegate contracts are listed with storage contracts they inherit.\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//Mokens\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage0 {\r\n    // funcId => delegate contract\r\n    mapping(bytes4 => address) internal delegates;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenUpdates\r\n//MokenOwner\r\n//QueryMokenDelegates\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage1 is Storage0 {\r\n    address internal contractOwner;\r\n    bytes[] internal funcSignatures;\r\n    // signature => index+1\r\n    mapping(bytes => uint256) internal funcSignatureToIndex;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokensSupportsInterfaces\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage2 is Storage1 {\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenRootOwnerOf\r\n//MokenERC721Metadata\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage3 is Storage2 {\r\n    struct Moken {\r\n        string name;\r\n        uint256 data;\r\n        uint256 parentTokenId;\r\n    }\r\n    //tokenId => moken\r\n    mapping(uint256 => Moken) internal mokens;\r\n    uint256 internal mokensLength;\r\n    // child address => child tokenId => tokenId+1\r\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC721Enumerable\r\n//MokenLinkHash\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage4 is Storage3 {\r\n    // root token owner address => (tokenId => approved address)\r\n    mapping(address => mapping(uint256 => address)) internal rootOwnerAndTokenIdToApprovedAddress;\r\n    // token owner => (operator address => bool)\r\n    mapping(address => mapping(address => bool)) internal tokenOwnerToOperators;\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint32[]) internal ownedTokens;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC721TopDown\r\n//MokenERC998ERC721TopDownBatch\r\n//MokenERC721\r\n//MokenERC721Batch\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage5 is Storage4 {\r\n    // tokenId => (child address => array of child tokens)\r\n    mapping(uint256 => mapping(address => uint256[])) internal childTokens;\r\n    // tokenId => (child address => (child token => child index)\r\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal childTokenIndex;\r\n    // tokenId => (child address => contract index)\r\n    mapping(uint256 => mapping(address => uint256)) internal childContractIndex;\r\n    // tokenId => child contract\r\n    mapping(uint256 => address[]) internal childContracts;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC20TopDown\r\n//MokenStateChange\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage6 is Storage5 {\r\n    // tokenId => token contract\r\n    mapping(uint256 => address[]) internal erc20Contracts;\r\n    // tokenId => (token contract => token contract index)\r\n    mapping(uint256 => mapping(address => uint256)) erc20ContractIndex;\r\n    // tokenId => (token contract => balance)\r\n    mapping(uint256 => mapping(address => uint256)) internal erc20Balances;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenERC998ERC721BottomUp\r\n//MokenERC998ERC721BottomUpBatch\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage7 is Storage6 {\r\n    // parent address => (parent tokenId => array of child tokenIds)\r\n    mapping(address => mapping(uint256 => uint32[])) internal parentToChildTokenIds;\r\n    // tokenId => position in childTokens array\r\n    mapping(uint256 => uint256) internal tokenIdToChildTokenIdsIndex;\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////\r\n//MokenMinting\r\n//MokenMintContractManagement\r\n//MokenEras\r\n//QueryMokenData\r\n///////////////////////////////////////////////////////////////////////////////////\r\ncontract Storage8 is Storage7 {\r\n    // index => era\r\n    mapping(uint256 => bytes32) internal eras;\r\n    uint256 internal eraLength;\r\n    // era => index+1\r\n    mapping(bytes32 => uint256) internal eraIndex;\r\n    uint256 internal mintPriceOffset; // = 0 szabo;\r\n    uint256 internal mintStepPrice; // = 500 szabo;\r\n    uint256 internal mintPriceBuffer; // = 5000 szabo;\r\n    address[] internal mintContracts;\r\n    mapping(address => uint256) internal mintContractIndex;\r\n    //moken name => tokenId+1\r\n    mapping(string => uint256) internal tokenByName_;\r\n}\r\n\r\ncontract QueryMokenData is Storage8 {\r\n\r\n    uint256 constant UINT16_MASK = 0x000000000000000000000000000000000000000000000000000000000000ffff;\r\n\r\n    function validateAndLower(string _s) internal pure returns (string mokenName) {\r\n        assembly {\r\n        // get length of _s\r\n            let len := mload(_s)\r\n        // get position of _s\r\n            let p := add(_s, 0x20)\r\n        // _s cannot be 0 characters\r\n            if eq(len, 0) {\r\n                revert(0, 0)\r\n            }\r\n        // _s cannot be more than 100 characters\r\n            if gt(len, 100) {\r\n                revert(0, 0)\r\n            }\r\n        // get first character\r\n            let b := byte(0, mload(add(_s, 0x20)))\r\n        // first character cannot be whitespace/unprintable\r\n            if lt(b, 0x21) {\r\n                revert(0, 0)\r\n            }\r\n        // get last character\r\n            b := byte(0, mload(add(p, sub(len, 1))))\r\n        // last character cannot be whitespace/unprintable\r\n            if lt(b, 0x21) {\r\n                revert(0, 0)\r\n            }\r\n        // loop through _s and lowercase uppercase characters\r\n            for {let end := add(p, len)}\r\n            lt(p, end)\r\n            {p := add(p, 1)}\r\n            {\r\n                b := byte(0, mload(p))\r\n                if lt(b, 0x5b) {\r\n                    if gt(b, 0x40) {\r\n                        mstore8(p, add(b, 32))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return _s;\r\n    }\r\n\r\n    function mokenNameExists(string _mokenName) external view returns (bool) {\r\n        return tokenByName_[validateAndLower(_mokenName)] != 0;\r\n    }\r\n\r\n    function mokenId(string _mokenName) external view returns (uint256 tokenId) {\r\n        tokenId = tokenByName_[validateAndLower(_mokenName)];\r\n        require(tokenId != 0, \"No moken exists with this name.\");\r\n        return tokenId - 1;\r\n    }\r\n\r\n    function mokenData(uint256 _tokenId) external view returns (bytes32 data) {\r\n        data = bytes32(mokens[_tokenId].data);\r\n        require(data != 0, \"The tokenId does not exist.\");\r\n        return data;\r\n    }\r\n\r\n    function eraFromMokenData(bytes32 _data) public view returns (bytes32 era) {\r\n        return eras[uint256(_data) >> 176 & UINT16_MASK];\r\n    }\r\n\r\n    function eraFromMokenData(uint256 _data) public view returns (bytes32 era) {\r\n        return eras[_data >> 176 & UINT16_MASK];\r\n    }\r\n\r\n    function mokenEra(uint256 _tokenId) external view returns (bytes32 era) {\r\n        uint256 data = mokens[_tokenId].data;\r\n        require(data != 0, \"The tokenId does not exist.\");\r\n        return eraFromMokenData(data);\r\n    }\r\n\r\n    function moken(uint256 _tokenId) external view\r\n    returns (string memory mokenName, bytes32 era, bytes32 data, address tokenOwner) {\r\n        data = bytes32(mokens[_tokenId].data);\r\n        require(data != 0, \"The tokenId does not exist.\");\r\n        return (\r\n        mokens[_tokenId].name,\r\n        eraFromMokenData(data),\r\n        data,\r\n        address(data)\r\n        );\r\n    }\r\n\r\n    function mokenBytes32(uint256 _tokenId) external view\r\n    returns (bytes32 mokenNameBytes32, bytes32 era, bytes32 data, address tokenOwner) {\r\n        data = bytes32(mokens[_tokenId].data);\r\n        require(data != 0, \"The tokenId does not exist.\");\r\n        bytes memory mokenNameBytes = bytes(mokens[_tokenId].name);\r\n        require(mokenNameBytes.length != 0, \"The tokenId does not exist.\");\r\n        assembly {\r\n            mokenNameBytes32 := mload(add(mokenNameBytes, 32))\r\n        }\r\n        return (\r\n        mokenNameBytes32,\r\n        eraFromMokenData(data),\r\n        data,\r\n        address(data)\r\n        );\r\n    }\r\n\r\n\r\n    function mokenNoName(uint256 _tokenId) external view\r\n    returns (bytes32 era, bytes32 data, address tokenOwner) {\r\n        data = bytes32(mokens[_tokenId].data);\r\n        require(data != 0, \"The tokenId does not exist.\");\r\n        return (\r\n        eraFromMokenData(data),\r\n        data,\r\n        address(data)\r\n        );\r\n    }\r\n\r\n    function mokenName(uint256 _tokenId) external view returns (string memory mokenName_) {\r\n        mokenName_ = mokens[_tokenId].name;\r\n        require(bytes(mokenName_).length != 0, \"The tokenId does not exist.\");\r\n        return mokenName_;\r\n    }\r\n\r\n    function mokenNameBytes32(uint256 _tokenId) external view returns (bytes32 mokenNameBytes32_) {\r\n        bytes memory mokenNameBytes = bytes(mokens[_tokenId].name);\r\n        require(mokenNameBytes.length != 0, \"The tokenId does not exist.\");\r\n        assembly {\r\n            mokenNameBytes32_ := mload(add(mokenNameBytes, 32))\r\n        }\r\n        return mokenNameBytes32_;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_mokenName\",\"type\":\"string\"}],\"name\":\"mokenNameExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"moken\",\"outputs\":[{\"name\":\"mokenName\",\"type\":\"string\"},{\"name\":\"era\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenNameBytes32\",\"outputs\":[{\"name\":\"mokenNameBytes32_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenName\",\"outputs\":[{\"name\":\"mokenName_\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"eraFromMokenData\",\"outputs\":[{\"name\":\"era\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mokenName\",\"type\":\"string\"}],\"name\":\"mokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenBytes32\",\"outputs\":[{\"name\":\"mokenNameBytes32\",\"type\":\"bytes32\"},{\"name\":\"era\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenData\",\"outputs\":[{\"name\":\"data\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"eraFromMokenData\",\"outputs\":[{\"name\":\"era\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenEra\",\"outputs\":[{\"name\":\"era\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mokenNoName\",\"outputs\":[{\"name\":\"era\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QueryMokenData","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e2c6540234794b9f97d8c6178ede755d0af9cff46c76dff89885503049e39fb"}]}