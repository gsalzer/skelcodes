{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n        // -------------------------------------------------------------------------\r\n        //Sperma token contract\r\n        // -------------------------------------------------------------------------\r\n        \r\n        contract Sperma \r\n        {\r\n        string public constant symbol = 'SPRM';\r\n        string public constant name = 'Sperma';\r\n        uint8 public constant decimals = 18;\r\n        uint256 _totalSupply = 1000000 * 10 **18;\r\n        \r\n        // Owner of this contract\r\n        address public owner = 0x36EaD5904808bbEF2cF2D12B41e6382D54E82b53;\r\n        \r\n        uint256 priceoftoken_1ether = 113;\r\n\r\n\r\n        // Balances for each account\r\n        mapping(address => uint256) balances;\r\n    \r\n        // Owner of account approves the transfer of an amount to another account\r\n        mapping(address => mapping (address => uint256)) allowed;\r\n\r\n        // Triggered when tokens are transferred.\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n        // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n        // Functions with this modifier can only be executed by the owner\r\n        modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n            _;\r\n        }\r\n    \r\n        // Constructor\r\n        function Sperma() {\r\n\r\n            balances[address(this)] =_totalSupply;\r\n            Transfer(0x00,address(this),_totalSupply);\r\n\r\n\r\n        }\r\n        \r\n        function () payable\r\n        {\r\n            \r\n            uint256 token_to_send = msg.value * priceoftoken_1ether;\r\n            require(balances[address(this)] >= token_to_send);\r\n            balances[msg.sender] += token_to_send;\r\n            balances[address(this)] -= token_to_send;\r\n\r\n            Transfer(address(this),msg.sender,token_to_send);\r\n        }\r\n    \r\n        function totalSupply() constant returns (uint256 totalSupply) {\r\n            return _totalSupply;\r\n        }\r\n    \r\n        // What is the balance of a particular account?\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n    \r\n        // Transfer the balance from owner's account to another account\r\n        function transfer(address _to, uint256 _amount) returns (bool success) {\r\n            if (balances[msg.sender] >= _amount \r\n                && _amount > 0\r\n                && balances[_to] + _amount > balances[_to]) {\r\n                balances[msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n                Transfer(msg.sender, _to, _amount);\r\n                return true;\r\n            } else {\r\n                return false;}\r\n        }\r\n    \r\n        // Send _value amount of tokens from address _from to address _to\r\n        function transferFrom(\r\n            address _from,\r\n            address _to,\r\n            uint256 _amount\r\n        ) returns (bool success) {\r\n            if (balances[_from] >= _amount\r\n                && allowed[_from][msg.sender] >= _amount\r\n                && _amount > 0\r\n                && balances[_to] + _amount > balances[_to]) {\r\n                balances[_from] -= _amount;\r\n                allowed[_from][msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n                Transfer(_from, _to, _amount);\r\n                return true;\r\n            } else {\r\n                return false;}\r\n        }\r\n\r\n        function approve(address _spender, uint256 _amount) \r\n            returns (bool success) {\r\n            allowed[msg.sender][_spender] = _amount;\r\n            Approval(msg.sender, _spender, _amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) \r\n            constant returns (uint256 remaining) {\r\n            return allowed[_owner][_spender];\r\n                \r\n            }\r\n            \r\n            function drain() external onlyOwner {\r\n                owner.transfer(this.balance);\r\n             }\r\n             \r\n             \t//In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = balances[newOwner] + (balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    Transfer(owner, newOwner, balances[newOwner]);\r\n\t}\r\n        }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Sperma","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5fbbb2bc2d98246b9d90a4e8cb9b6d6406ede54c425f5fa0a4e0cc16e584a5f"}]}