{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n  {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n  {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\ncontract ERC20 {\r\n\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\ncontract Owned {\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner)\r\n    public\r\n    onlyOwner\r\n  {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership()\r\n    public\r\n  {\r\n    require(msg.sender == newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n  }\r\n\r\n}\r\ncontract StandardToken is ERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply()\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value)\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _addedValue)\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n    allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n  internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract PetCoin is StandardToken, Owned {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Token metadata\r\n  string public constant name = \"Petcoin\";\r\n  string public constant symbol = \"PETC\";\r\n  uint256 public constant decimals = 18;\r\n\r\n  // Token supply breakdown\r\n  uint256 public constant initialSupply = 2340 * (10**6) * 10**decimals; // 2.34 billion\r\n  uint256 public constant stageOneSupply = (10**5) * 10**decimals; // 100,000 tokens for ICO stage 1\r\n  uint256 public constant stageTwoSupply = (10**6) * 10**decimals; // 1,000,000 tokens for ICO stage 2\r\n  uint256 public constant stageThreeSupply = (10**7) * 10**decimals; // 10,000,000 tokens for ICO stage 3\r\n\r\n  // Initial Token holder addresses.\r\n  // one billion token holders\r\n  address public constant appWallet = 0x9F6899364610B96D7718Fe3c03A6BD1Deb8623CE;\r\n  address public constant genWallet = 0x530E6B9A17e9AbB77CF4E125b99Bf5D5CAD69942;\r\n  // one hundred million token holders\r\n  address public constant ceoWallet = 0x388Ed3f7Aa1C4461460197FcCE5cfEf84D562c6A;\r\n  address public constant cooWallet = 0xa2c59e6a91B4E502CF8C95A61F50D3aB1AB30cBA;\r\n  address public constant devWallet = 0x7D2ea29E2d4A95f4725f52B941c518C15eAE3c64;\r\n  // the rest token holder\r\n  address public constant poolWallet = 0x7e75fe6b73993D9Be9cb975364ec70Ee2C22c13A;\r\n\r\n  // mint configuration\r\n  uint256 public constant yearlyMintCap = (10*7) * 10*decimals; //10,000,000 tokens each year\r\n  uint16 public mintStartYear = 2019;\r\n  uint16 public mintEndYear = 2118;\r\n\r\n  mapping (uint16 => bool) minted;\r\n\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    totalSupply_ = initialSupply.add(stageOneSupply).add(stageTwoSupply).add(stageThreeSupply);\r\n    uint256 oneBillion = (10**9) * 10**decimals;\r\n    uint256 oneHundredMillion = 100 * (10**6) * 10**decimals;\r\n    balances[appWallet] = oneBillion;\r\n    emit Transfer(address(0), appWallet, oneBillion);\r\n    balances[genWallet] = oneBillion;\r\n    emit Transfer(address(0), genWallet, oneBillion);\r\n    balances[ceoWallet] = oneHundredMillion;\r\n    emit Transfer(address(0), ceoWallet, oneHundredMillion);\r\n    balances[cooWallet] = oneHundredMillion;\r\n    emit Transfer(address(0), cooWallet, oneHundredMillion);\r\n    balances[devWallet] = oneHundredMillion;\r\n    emit Transfer(address(0), devWallet, oneHundredMillion);\r\n    balances[poolWallet] = initialSupply.sub(balances[appWallet])\r\n    .sub(balances[genWallet])\r\n    .sub(balances[ceoWallet])\r\n    .sub(balances[cooWallet])\r\n    .sub(balances[devWallet]);\r\n    emit Transfer(address(0), poolWallet, balances[poolWallet]);\r\n    balances[msg.sender] = stageOneSupply.add(stageTwoSupply).add(stageThreeSupply);\r\n    emit Transfer(address(0), msg.sender, balances[msg.sender]);\r\n  }\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to\r\n  )\r\n    onlyOwner\r\n    external\r\n    returns (bool)\r\n  {\r\n    uint16 year = _getYear(now);\r\n    require (year >= mintStartYear && year <= mintEndYear && !minted[year]);\r\n    require (_to != address(0));\r\n\r\n    totalSupply_ = totalSupply_.add(yearlyMintCap);\r\n    balances[_to] = balances[_to].add(yearlyMintCap);\r\n    minted[year] = true;\r\n\r\n    emit Mint(_to, yearlyMintCap);\r\n    emit Transfer(address(0), _to, yearlyMintCap);\r\n    return true;\r\n  }\r\n\r\n  function _getYear(uint256 timestamp)\r\n    internal\r\n    pure\r\n    returns (uint16)\r\n  {\r\n    uint16 ORIGIN_YEAR = 1970;\r\n    uint256 YEAR_IN_SECONDS = 31536000;\r\n    uint256 LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint secondsAccountedFor = 0;\r\n    uint16 year;\r\n    uint numLeapYears;\r\n\r\n    // Year\r\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n    numLeapYears = _leapYearsBefore(year) - _leapYearsBefore(ORIGIN_YEAR);\r\n\r\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n    while (secondsAccountedFor > timestamp) {\r\n      if (_isLeapYear(uint16(year - 1))) {\r\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n      }\r\n      else {\r\n        secondsAccountedFor -= YEAR_IN_SECONDS;\r\n      }\r\n      year -= 1;\r\n    }\r\n    return year;\r\n  }\r\n\r\n  function _isLeapYear(uint16 year)\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    if (year % 4 != 0) {\r\n      return false;\r\n    }\r\n    if (year % 100 != 0) {\r\n      return true;\r\n    }\r\n    if (year % 400 != 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _leapYearsBefore(uint year)\r\n    internal\r\n    pure\r\n    returns (uint)\r\n  {\r\n    year -= 1;\r\n    return year / 4 - year / 100 + year / 400;\r\n  }\r\n\r\n}\r\ncontract PetCoinCrowdSale is Owned {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for PetCoin;\r\n\r\n  // Conversion rates\r\n  uint256 public stageOneRate = 4500; // 1 ETH = 4500 PETC\r\n  uint256 public stageTwoRate = 3000; // 1 ETH = 3000 PETC\r\n  uint256 public stageThreeRate = 2557; // 1 ETH = 2557 PETC\r\n\r\n  // The token being sold\r\n  PetCoin public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n\r\n  // Token Sale State Definitions\r\n  enum TokenSaleState { NOT_STARTED, STAGE_ONE, STAGE_TWO, STAGE_THREE, COMPLETED }\r\n\r\n  TokenSaleState public state;\r\n\r\n  struct Stage {\r\n    uint256 rate;\r\n    uint256 remaining;\r\n  }\r\n\r\n  // Enum as mapping key not supported by Solidity yet\r\n  mapping(uint256 => Stage) public stages;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n\r\n  /**\r\n   * Event for refund in case remaining tokens are not sufficient\r\n   * @param purchaser who paid for the tokens\r\n   * @param value weis refunded\r\n   */\r\n  event Refund(\r\n    address indexed purchaser,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * Event for move stage\r\n   * @param oldState old state\r\n   * @param newState new state\r\n   */\r\n  event MoveStage(\r\n    TokenSaleState oldState,\r\n    TokenSaleState newState\r\n  );\r\n\r\n  /**\r\n * Event for rates update\r\n * @param who updated the rates\r\n * @param stageOneRate new stageOneRate\r\n * @param stageTwoRate new stageTwoRate\r\n * @param stageThreeRate new stageThreeRate\r\n */\r\n  event RatesUpdate(\r\n    address indexed who,\r\n    uint256 stageOneRate,\r\n    uint256 stageTwoRate,\r\n    uint256 stageThreeRate\r\n  );\r\n\r\n  /**\r\n   * @param _token Address of the token being sold\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   */\r\n  constructor(PetCoin _token, address _wallet)\r\n    public\r\n  {\r\n    require(_token != address(0));\r\n    require(_wallet != address(0));\r\n\r\n    token = _token;\r\n    wallet = _wallet;\r\n\r\n    state = TokenSaleState.NOT_STARTED;\r\n    stages[uint256(TokenSaleState.STAGE_ONE)] = Stage(stageOneRate, token.stageOneSupply());\r\n    stages[uint256(TokenSaleState.STAGE_TWO)] = Stage(stageTwoRate, token.stageTwoSupply());\r\n    stages[uint256(TokenSaleState.STAGE_THREE)] = Stage(stageThreeRate, token.stageThreeSupply());\r\n  }\r\n\r\n\r\n  // Modifiers\r\n  modifier notStarted() {\r\n    require (state == TokenSaleState.NOT_STARTED);\r\n    _;\r\n  }\r\n\r\n  modifier stageOne() {\r\n    require (state == TokenSaleState.STAGE_ONE);\r\n    _;\r\n  }\r\n\r\n  modifier stageTwo() {\r\n    require (state == TokenSaleState.STAGE_TWO);\r\n    _;\r\n  }\r\n\r\n  modifier stageThree() {\r\n    require (state == TokenSaleState.STAGE_THREE);\r\n    _;\r\n  }\r\n\r\n  modifier completed() {\r\n    require (state == TokenSaleState.COMPLETED);\r\n    _;\r\n  }\r\n\r\n  modifier saleInProgress() {\r\n    require (state == TokenSaleState.STAGE_ONE || state == TokenSaleState.STAGE_TWO || state == TokenSaleState.STAGE_THREE);\r\n    _;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  function kickoff()\r\n    external\r\n    onlyOwner\r\n    notStarted\r\n  {\r\n    _moveStage();\r\n  }\r\n\r\n\r\n  function updateRates(uint256 _stageOneRate, uint256 _stageTwoRate, uint256 _stageThreeRate)\r\n    external\r\n    onlyOwner\r\n  {\r\n    stageOneRate = _stageOneRate;\r\n    stageTwoRate = _stageTwoRate;\r\n    stageThreeRate = _stageThreeRate;\r\n    stages[uint256(TokenSaleState.STAGE_ONE)].rate = stageOneRate;\r\n    stages[uint256(TokenSaleState.STAGE_TWO)].rate = stageTwoRate;\r\n    stages[uint256(TokenSaleState.STAGE_THREE)].rate = stageThreeRate;\r\n    emit RatesUpdate(msg.sender, stageOneRate, stageTwoRate, stageThreeRate);\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function ()\r\n    external\r\n    payable\r\n    saleInProgress\r\n  {\r\n    require(stages[uint256(state)].rate > 0);\r\n    require(stages[uint256(state)].remaining > 0);\r\n    require(msg.value > 0);\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 refund = 0;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(stages[uint256(state)].rate);\r\n\r\n    if (tokens > stages[uint256(state)].remaining) {\r\n      // calculate wei needed to purchase the remaining tokens\r\n      tokens = stages[uint256(state)].remaining;\r\n      weiAmount = tokens.div(stages[uint256(state)].rate);\r\n      refund = msg.value - weiAmount;\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    // update remaining of the stage\r\n    stages[uint256(state)].remaining -= tokens;\r\n    assert(stages[uint256(state)].remaining >= 0);\r\n\r\n    if (stages[uint256(state)].remaining == 0) {\r\n      _moveStage();\r\n    }\r\n\r\n    // transfer tokens to buyer\r\n    token.safeTransfer(msg.sender, tokens);\r\n\r\n    // forward ETH to the wallet\r\n    _forwardFunds(weiAmount);\r\n\r\n    if (refund > 0) { // refund the purchaser if required\r\n      msg.sender.transfer(refund);\r\n      emit Refund(\r\n        msg.sender,\r\n        refund\r\n      );\r\n    }\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  function _moveStage()\r\n    internal\r\n  {\r\n    TokenSaleState oldState = state;\r\n    if (state == TokenSaleState.NOT_STARTED) {\r\n      state = TokenSaleState.STAGE_ONE;\r\n    } else if (state == TokenSaleState.STAGE_ONE) {\r\n      state = TokenSaleState.STAGE_TWO;\r\n    } else if (state == TokenSaleState.STAGE_TWO) {\r\n      state = TokenSaleState.STAGE_THREE;\r\n    } else if (state == TokenSaleState.STAGE_THREE) {\r\n      state = TokenSaleState.COMPLETED;\r\n    }\r\n    emit MoveStage(oldState, state);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds(uint256 weiAmount) internal {\r\n    wallet.transfer(weiAmount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearlyMintCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintEndYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageThreeSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStartYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageTwoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageOneSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PetCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://863860909877318d5a0277a8a906761a8d88fc8b7b6401940d9dd42102573e16"}]}