{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Interface for the standard token.\r\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract EIP20Token {\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n  ** Optional functions\r\n  *\r\n  function name() public view returns (string name);\r\n  function symbol() public view returns (string symbol);\r\n  function decimals() public view returns (uint8 decimals);\r\n  *\r\n  **/\r\n\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal pure returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// Interface for burning tokens\r\ncontract Burnable {\r\n  // @dev Destroys tokens for an account\r\n  // @param account Account whose tokens are destroyed\r\n  // @param value Amount of tokens to destroy\r\n  function burnTokens(address account, uint value) internal;\r\n  event Burned(address account, uint value);\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n/**\r\n * Internal interface for the minting of tokens.\r\n */\r\ncontract Mintable {\r\n\r\n  /**\r\n   * @dev Mints tokens for an account\r\n   * This function should the Minted event.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal;\r\n\r\n  /** Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n}\r\n\r\n/**\r\n * @title Standard token\r\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\r\n */\r\ncontract StandardToken is EIP20Token, Burnable, Mintable {\r\n  using SafeMath for uint;\r\n\r\n  uint private total_supply;\r\n  mapping(address => uint) private balances;\r\n  mapping(address => mapping (address => uint)) private allowed;\r\n\r\n\r\n  function totalSupply() public view returns (uint) {\r\n    return total_supply;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint value) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param account The address whose balance is to be queried.\r\n   * @return An uint representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address account) public view returns (uint balance) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\r\n    uint allowance = allowed[from][msg.sender];\r\n\r\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\r\n    // require(value <= allowance);\r\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    allowed[from][msg.sender] = allowance.sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require (value == 0 || allowed[msg.sender][spender] == 0);\r\n\r\n    allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param account address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address account, address spender) public view returns (uint remaining) {\r\n    return allowed[account][spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][spender];\r\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\r\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\r\n\r\n      uint oldVal = allowed[msg.sender][spender];\r\n\r\n      if (subtractedValue > oldVal) {\r\n          allowed[msg.sender][spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\r\n   */\r\n  function burnTokens(address account, uint value) internal {\r\n    balances[account] = balances[account].sub(value);\r\n    total_supply = total_supply.sub(value);\r\n    emit Transfer(account, 0, value);\r\n    emit Burned(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Provides an internal minting function.\r\n   */\r\n  function mintInternal(address receiver, uint amount) internal {\r\n    total_supply = total_supply.add(amount);\r\n    balances[receiver] = balances[receiver].add(amount);\r\n    emit Minted(receiver, amount);\r\n\r\n    // Beware: Address zero may be used for special transactions in a future fork.\r\n    // This will make the mint transaction appear in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    emit Transfer(0, receiver, amount);\r\n  }\r\n  \r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n  /* The finalizer contract that allows lifting the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Since the owner of this contract is (or should be) the crowdsale,\r\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens into the wild.\r\n   *\r\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\r\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer(address sender) {\r\n    require(released || transferAgents[sender]);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been released */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  /** We restrict transfer by overriding it */\r\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(to, value);\r\n  }\r\n\r\n  /** We restrict transferFrom by overriding it */\r\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * First envisioned by Golem and Lunyr projects.\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Inspired by Lunyr.\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n */\r\n\r\n/**\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n *\r\n * The Upgrade agent is the interface used to implement a token\r\n * migration in the case of an emergency.\r\n * The function upgradeFrom has to implement the part of the creation\r\n * of new tokens on behalf of the user doing the upgrade.\r\n *\r\n * The new token can implement this interface directly, or use.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n  /** This value should be the same as the original token's total supply */\r\n  uint public originalSupply;\r\n\r\n  /** Interface to ensure the contract is correctly configured */\r\n  function isUpgradeAgent() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Upgrade an account\r\n\r\n  When the token contract is in the upgrade status the each user will\r\n  have to call `upgrade(value)` function from UpgradeableToken.\r\n\r\n  The upgrade function adjust the balance of the user and the supply\r\n  of the previous token and then call `upgradeFrom(value)`.\r\n\r\n  The UpgradeAgent is the responsible to create the tokens for the user\r\n  in the new contract.\r\n\r\n  * @param from Account to upgrade.\r\n  * @param value Tokens to upgrade.\r\n\r\n  */\r\n  function upgradeFrom(address from, uint value) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n */\r\ncontract UpgradeableToken is EIP20Token, Burnable {\r\n  using SafeMath for uint;\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint public totalUpgraded = 0;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed from, address to, uint value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  constructor(address master) internal {\r\n    setUpgradeMaster(master);\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    // Ensure it's not called in a bad state\r\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n\r\n    // Validate input value.\r\n    require(value != 0);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    \r\n    // Take tokens out from circulation\r\n    burnTokens(msg.sender, value);\r\n    totalUpgraded = totalUpgraded.add(value);\r\n\r\n    emit Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles the upgrade process\r\n   */\r\n  function setUpgradeAgent(address agent) onlyMaster external {\r\n    // Check whether the token is in a state that we could think of upgrading\r\n    require(canUpgrade());\r\n\r\n    require(agent != 0x0);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply());\r\n\r\n    emit UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public view returns(UpgradeState) {\r\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function changeUpgradeMaster(address new_master) onlyMaster public {\r\n    setUpgradeMaster(new_master);\r\n  }\r\n\r\n  /**\r\n   * Internal upgrade master setter.\r\n   */\r\n  function setUpgradeMaster(address new_master) private {\r\n    require(new_master != 0x0);\r\n    upgradeMaster = new_master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can override to provide the condition in which the upgrade can begin.\r\n   */\r\n  function canUpgrade() public view returns(bool); \r\n\r\n  modifier onlyMaster() {\r\n    require(msg.sender == upgradeMaster);\r\n    _;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Authored by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\r\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\r\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\r\ncontract LostAndFoundToken {\r\n  /**\r\n   * @return Address of the account that handles movements.\r\n   */\r\n  function getLostAndFoundMaster() internal view returns (address);\r\n\r\n  /**\r\n   * @param agent Address that will be able to move tokens with transferFrom\r\n   * @param tokens Amount of tokens approved for transfer\r\n   * @param token_contract Contract of the token\r\n   */\r\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\r\n    require(msg.sender == getLostAndFoundMaster());\r\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\r\n    //  getting them stuck in another address by accident.\r\n    token_contract.approve(agent, tokens);\r\n  }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Originally from https://github.com/TokenMarketNet/ico\r\n * Modified by https://www.coinfabrik.com/\r\n */\r\n\r\n\r\n/**\r\n * A public interface to increase the supply of a token.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is Mintable, Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n\r\n\r\n  constructor(uint initialSupply, address multisig, bool mintable) internal {\r\n    require(multisig != address(0));\r\n    // Cannot create a token without supply and no minting\r\n    require(mintable || initialSupply != 0);\r\n    // Create initially all balance on the team multisig\r\n    if (initialSupply > 0)\r\n      mintInternal(multisig, initialSupply);\r\n    // No more new supply allowed after the token creation\r\n    mintingFinished = !mintable;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address.\r\n   *\r\n   * Only callable by a mint agent (e.g. crowdsale contract).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    mintInternal(receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    emit MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only mint agents are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * A crowdsale token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through the approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\r\n\r\n  string public name = \"Kryptobits\";\r\n\r\n  string public symbol = \"KBE\";\r\n\r\n  uint8 public decimals;\r\n\r\n  address public lost_and_found_master;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param initial_supply How many tokens we start with.\r\n   * @param token_decimals Number of decimal places.\r\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\r\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\r\n   */\r\n  constructor(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\r\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\r\n    require(token_retriever != address(0));\r\n    decimals = token_decimals;\r\n    lost_and_found_master = token_retriever;\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, prohibit new token creation.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\r\n   */\r\n  function canUpgrade() public view returns(bool) {\r\n    //return released && super.canUpgrade();\r\n    return released;\r\n  }\r\n\r\n  function burn(uint value) public {\r\n    burnTokens(msg.sender, value);\r\n  }\r\n\r\n  function getLostAndFoundMaster() internal view returns(address) {\r\n    return lost_and_found_master;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token_contract\",\"type\":\"address\"}],\"name\":\"enableLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lost_and_found_master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"changeUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initial_supply\",\"type\":\"uint256\"},{\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"name\":\"team_multisig\",\"type\":\"address\"},{\"name\":\"token_retriever\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CrowdsaleToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000001dd1e26a78c2101f4000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000520f1214aebf4507a02cf5c5ac7e236e772db95f00000000000000000000000054d9249c776c56520a62faecb87a00e105e8c9dc","Library":"","SwarmSource":"bzzr://1fe63d1f77b99189c224868f85d39f972d088473aba59fce0e1304d63bc08570"}]}