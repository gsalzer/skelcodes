{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \r\n   \r\n   \r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Base {\r\n    using SafeMath for uint256;\r\n    uint public createTime = now;\r\n    address public owner;\r\n    address public ownerAdmin;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n   \r\n    function setOwner(address _newOwner)  public {\r\n        require(msg.sender  == ownerAdmin);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    bool public globalLocked = false;       \r\n\r\n    function lock() internal {             \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }\r\n\r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;\r\n    }\r\n\r\n    mapping (address => uint256) public userEtherOf;\r\n\r\n    function userRefund() public  returns(bool _result) {             \r\n        return _userRefund(msg.sender);\r\n    }\r\n\r\n    function _userRefund(address _to) internal returns(bool _result){  \r\n        require (_to != 0x0);\r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];\r\n        if(amount > 0){\r\n            userEtherOf[msg.sender] = 0;\r\n            _to.transfer(amount);\r\n            _result = true;\r\n        }\r\n        else{\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    uint public currentEventId = 1;                             \r\n\r\n    function getEventId() internal returns(uint _result) {      \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 is Base {                                               \r\n    string public name = 'Don Quixote Token';                              \r\n    string public symbol = 'DON';\r\n    uint8 public decimals = 9;\r\n         \r\n    uint256 public totalSupply = 0;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function _callDividend(address _user) internal returns (bool _result);      \r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_from != _to);\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\r\n\r\n        _callDividend(_from);   \r\n        _callDividend(_to);     \r\n\r\n        uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from].add( balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        require(_value <= allowance[_from][msg.sender]);    \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != 0x0);\r\n        require(_value > 0);\r\n               \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        require(_spender != 0x0);\r\n        require(_value > 0);\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {           \r\n        require(_value > 0);\r\n        require(balanceOf[msg.sender] >= _value);\r\n\r\n        _callDividend(msg.sender);                \r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {       \r\n        require(_from != 0x0);\r\n        require(_value > 0);\r\n        assert(1 >= 2);\r\n        symbol = 'DON';\r\n        return false;\r\n    }\r\n}\r\n\r\ninterface IWithholdToken{          \r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result);\r\n    function setGameTransferFlag(address _gameAddress, bool _gameCanTransfer) external;\r\n}\r\n\r\ncontract WithholdToken is TokenERC20, IWithholdToken{          \r\n\r\n    mapping (address=>mapping(address=>bool)) public gameTransferFlagOf;                    \r\n\r\n    function setGameTransferFlag(address _gameAddress, bool _gameCanTransfer) external {    \r\n        require(_gameAddress != 0x0);\r\n        gameTransferFlagOf[msg.sender][_gameAddress] = _gameCanTransfer;\r\n    }\r\n\r\n    mapping(address => bool) public gameWhiteListOf;                                       \r\n\r\n    event OnWhiteListChange(address indexed _gameAddr, address _operator, bool _result,  uint _eventTime, uint _eventId);\r\n\r\n    function addWhiteList(address _gameAddr) public onlyOwner {\r\n        require (_gameAddr != 0x0);\r\n        gameWhiteListOf[_gameAddr] = true;\r\n        emit OnWhiteListChange(_gameAddr, msg.sender, true, now, getEventId());\r\n    }\r\n\r\n    function delWhiteList(address _gameAddr) public onlyOwner {\r\n        require (_gameAddr != 0x0);\r\n        gameWhiteListOf[_gameAddr] = false;\r\n        emit OnWhiteListChange(_gameAddr, msg.sender, false, now, getEventId());\r\n    }\r\n\r\n    function isWhiteList(address _gameAddr) public view returns(bool _result) {    \r\n        require (_gameAddr != 0x0);\r\n        _result = gameWhiteListOf[_gameAddr];\r\n    }\r\n   \r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result) {\r\n        require(_user != 0x0);\r\n        require(_amount > 0);\r\n        require(msg.sender != tx.origin);\r\n       \r\n        require(gameTransferFlagOf[_user][msg.sender]);        \r\n        require(isWhiteList(msg.sender));\r\n        require(balanceOf[_user] >= _amount);\r\n        \r\n        _transfer(_user, msg.sender, _amount);\r\n        \r\n        return true;\r\n    }\r\n   \r\n}\r\n\r\ninterface IProfitOrg {                                                   \r\n    function userRefund() external returns(bool _result);               \r\n    function shareholder() constant external returns (address);        \r\n                          \r\n}\r\n\r\ninterface IDividendToken{                           \r\n    function profitOrgPay() payable external;       \r\n}\r\n\r\ncontract DividendToken is WithholdToken, IDividendToken{             \r\n\r\n    address public iniOwner;\r\n\r\n    struct DividendPeriod                          \r\n    {\r\n        uint StartTime;\r\n        uint EndTime;\r\n        uint256 TotalEtherAmount;\r\n        uint256 ShareEtherAmount;\r\n    }\r\n\r\n    mapping (uint => DividendPeriod) public dividendPeriodOf;   \r\n    uint256 public currentDividendPeriodNo = 0;                 \r\n\r\n    uint256 public shareAddEtherValue = 0;      \r\n    uint256 public addTotalEtherValue = 0;      \r\n\r\n    uint public lastDividendTime = now;         \r\n\r\n    mapping (address => uint) public balanceTimeOf;     \r\n\r\n    uint256 public minDividendEtherAmount = 1 ether;    \r\n    function setMinDividendEtherAmount(uint256 _newMinDividendEtherAmount) public onlyOwner{\r\n        minDividendEtherAmount = _newMinDividendEtherAmount;\r\n    }\r\n\r\n    function callDividend() public returns (uint256 _etherAmount) {             \r\n        _callDividend(msg.sender);\r\n        _etherAmount = userEtherOf[msg.sender];\r\n        return;\r\n    }\r\n\r\n    event OnCallDividend(address indexed _user, uint256 _tokenAmount, uint _lastCalTime, uint _etherAmount, uint _eventTime, uint _eventId);\r\n\r\n    function _callDividend(address _user) internal returns (bool _result) {    \r\n        uint _amount = 0;\r\n        uint lastTime = balanceTimeOf[_user];\r\n        uint256 tokenNumber = balanceOf[_user];                                 \r\n        if(tokenNumber <= 0)\r\n        {\r\n            balanceTimeOf[_user] = now;\r\n            _result = false;\r\n            return;\r\n        }\r\n        if(currentDividendPeriodNo == 0){ \r\n        \t_result = false;\r\n            return;\r\n        }\r\n        for(uint256 i = currentDividendPeriodNo-1; i >= 0; i--){\r\n            DividendPeriod memory dp = dividendPeriodOf[i];\r\n            if(lastTime < dp.EndTime){\r\n                _amount = _amount.add(dp.ShareEtherAmount.mul(tokenNumber));\r\n            }else if (lastTime >= dp.EndTime){\r\n                break;\r\n            }\r\n        }\r\n        balanceTimeOf[_user] = now;\r\n        if(_amount > 0){\r\n            userEtherOf[_user] = userEtherOf[_user].add(_amount);          \r\n            \r\n        }\r\n\r\n        emit OnCallDividend(_user, tokenNumber, lastTime, _amount, now, getEventId());\r\n        _result = true;\r\n        return;\r\n    }\r\n\r\n    function saveDividendPeriod(uint256 _ShareEtherAmount, uint256 _TotalEtherAmount) internal {    \r\n        DividendPeriod storage dp = dividendPeriodOf[currentDividendPeriodNo];\r\n        dp.ShareEtherAmount = _ShareEtherAmount;\r\n        dp.TotalEtherAmount = _TotalEtherAmount;\r\n        dp.EndTime = now;\r\n        dividendPeriodOf[currentDividendPeriodNo] = dp;\r\n    }\r\n\r\n    function newDividendPeriod(uint _StartTime) internal {\r\n        DividendPeriod memory newdp = DividendPeriod({\r\n                StartTime :  _StartTime,\r\n                EndTime : 0,\r\n                TotalEtherAmount : 0,\r\n                ShareEtherAmount : 0\r\n        });\r\n\r\n        currentDividendPeriodNo++;\r\n        dividendPeriodOf[currentDividendPeriodNo] = newdp;\r\n    }\r\n\r\n    function callDividendAndUserRefund() public {   \r\n        callDividend();\r\n        userRefund();\r\n    }\r\n    \r\n    function getProfit(address _profitOrg) public {     \r\n        lock();\r\n        IProfitOrg pt = IProfitOrg(_profitOrg);\r\n        address sh = pt.shareholder();\r\n        if(sh == address(this))     \r\n        {\r\n            pt.userRefund();       \r\n        }\r\n        unLock();\r\n    }\r\n\r\n    event OnProfitOrgPay(address _profitOrg, uint256 _sendAmount, uint256 _divAmount, uint256 _shareAmount, uint _eventTime, uint _eventId);\r\n\r\n    uint public divIntervalDays = 1 days; \r\n\r\n    function  setDivIntervalDays(uint _days) public onlyOwner {\r\n        require(_days >= 1 && _days <= 30);\r\n        divIntervalDays = _days * (1 days);\r\n    }\r\n\r\n    function profitOrgPay() payable external {        \r\n             \r\n        if (msg.value > 0){\r\n            userEtherOf[this] += msg.value;         \r\n            addTotalEtherValue += msg.value;\r\n            shareAddEtherValue += msg.value /  totalSupply;\r\n\r\n            uint256 canValue = userEtherOf[this];\r\n            if(canValue < minDividendEtherAmount || now - lastDividendTime < divIntervalDays)   \r\n            {\r\n                emit OnProfitOrgPay(msg.sender, msg.value, 0, 0, now, getEventId());\r\n                return;\r\n            }\r\n\r\n            uint256 sa = canValue .div(totalSupply);        \r\n            if(sa <= 0){\r\n                emit OnProfitOrgPay(msg.sender, msg.value, 0, 0, now, getEventId());\r\n                return;                                     \r\n            }\r\n\r\n            uint256 totalEtherAmount = sa.mul(totalSupply);        \r\n            saveDividendPeriod(sa, totalEtherAmount);\r\n            newDividendPeriod(now);\r\n            userEtherOf[this] = userEtherOf[this].sub(totalEtherAmount);\r\n            emit OnProfitOrgPay(msg.sender, msg.value, totalEtherAmount, sa, now, getEventId());\r\n            lastDividendTime = now;\r\n            return;\r\n        }\r\n    }\r\n\r\n    event OnFreeLostToken(address _lostUser, uint256 _tokenNum, uint256 _etherNum, address _to, uint _eventTime, uint _eventId);\r\n\r\n    function freeLostToken(address _user) public onlyOwner {          \r\n        require(_user != 0x0);\r\n        uint addTime = 10 * 365 days;   \r\n            \r\n        require(balanceOf[_user] > 0 && createTime.add(addTime) < now  && balanceTimeOf[_user].add(addTime) < now);     \r\n\t    require(_user != msg.sender && _user != iniOwner);\r\n\r\n        uint256 ba = balanceOf[_user];                \r\n        require(ba > 0);\r\n        _callDividend(_user);                          \r\n        _callDividend(msg.sender);                    \r\n        _callDividend(iniOwner);                        \r\n\r\n        balanceOf[_user] -= ba;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add( ba / 2);\r\n        balanceOf[iniOwner] = balanceOf[iniOwner].add(ba - (ba / 2));\r\n\r\n        uint256 amount = userEtherOf[_user];       \r\n        if (amount > 0){\r\n            userEtherOf[_user] = userEtherOf[_user].sub(amount);\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(amount / 2);\r\n            userEtherOf[iniOwner] = userEtherOf[iniOwner].add(amount - (amount / 2));\r\n        }\r\n\r\n        emit OnFreeLostToken(_user, ba, amount, msg.sender, now, getEventId());\r\n    }\r\n\r\n}\r\n\r\ncontract ReferrerToken is DividendToken{                \r\n\r\n    mapping(address => address) playerReferrerOf;       \r\n\r\n    uint256 public refRewardL1Per100 = 30;             \r\n   \r\n    function setRefRewardPer100(uint256 _value1) public onlyOwner{\r\n        require(_value1 <= 50);\r\n        refRewardL1Per100 = _value1;\r\n    }\r\n\r\n    bool public referrerEnable = true;          \r\n\r\n    function setreferrerEnable(bool _enable) public onlyOwner{\r\n        referrerEnable = _enable;\r\n    }\r\n\r\n    event OnAddPlayer(address _player, address _referrer, uint _eventTime, uint _eventId);\r\n\r\n    function addPlayer(address _player, address _referrer) public returns (bool _result){\r\n        _result = false;\r\n        require(_player != 0x0);\r\n        require(_referrer != 0x0);\r\n        require(referrerEnable);\r\n\r\n        if(balanceOf[_player] != 0){\r\n            return;\r\n        }\r\n\r\n        if(balanceOf[_referrer] == 0){\r\n            return;\r\n        }\r\n\r\n        if(playerReferrerOf[_player] == 0x0){\r\n            playerReferrerOf[_player] = _referrer;\r\n            emit OnAddPlayer(_player, _referrer, now, getEventId());\r\n            _result = true;\r\n        }\r\n    }\r\n\r\n    function addPlayer1(address _player) public returns (bool _result){\r\n        _result = addPlayer(_player, msg.sender);\r\n    }\r\n\r\n    function addPlayer2(address[] _players) public returns (uint _result){\r\n        _result = 0;\r\n        for(uint i = 0; i < _players.length; i++){\r\n            if(addPlayer(_players[i], msg.sender)){\r\n                _result++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addPlayer3(address[] _players, address _referrer) public returns (uint _result){\r\n        _result = 0;\r\n        for(uint i = 0; i < _players.length; i++){\r\n            if(addPlayer(_players[i], _referrer)){\r\n                _result++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getReferrer1(address _player) public view returns (address _result){           \r\n        _result = playerReferrerOf[_player];\r\n    }\r\n\r\n}\r\n\r\ninterface IGameToken{                                                                      \r\n   function mineToken(address _player, uint256 _etherAmount) external returns (uint _toPlayerToken);\r\n}\r\n\r\ncontract GameToken is ReferrerToken, IGameToken{        \r\n\r\n    address public boss;\r\n    address public bossAdmin;\r\n    function setBoss(address _newBoss) public{\r\n        require(msg.sender == bossAdmin);\r\n        boss = _newBoss;\r\n    }\r\n\r\n    function GameToken(address _ownerAdmin, address _boss, address _bossAdmin)  public {\r\n        require(_ownerAdmin != 0x0);\r\n        require(_boss != 0x0);\r\n        require(_bossAdmin != 0x0);\r\n\r\n        owner = msg.sender;\r\n        iniOwner = msg.sender;\r\n        ownerAdmin = _ownerAdmin;\r\n\r\n        boss = _boss;\r\n        bossAdmin = _bossAdmin;\r\n\r\n        totalSupply = 0;                             \r\n        balanceOf[msg.sender] = totalSupply;           \r\n    }\r\n\r\n    event OnAddYearToken(uint256 _lastTotalSupply, uint256 _currentTotalSupply, uint _years, uint _eventTime, uint _eventId);\r\n\r\n    mapping(uint => uint256) yearTotalSupplyOf;\r\n\r\n    function addYearToken() public returns(bool _result) {                      \r\n        _result = false;\r\n        uint y = (now - createTime) / (365 days);\r\n        if (y > 0 && yearTotalSupplyOf[y] == 0){\r\n            _callDividend(iniOwner);    \r\n\r\n            uint256 _lastTotalSupply = totalSupply;\r\n            totalSupply = totalSupply.mul(102).div(100);                                 \r\n            uint256 _add = totalSupply.sub(_lastTotalSupply);\r\n            balanceOf[iniOwner] = balanceOf[iniOwner].add(_add);\r\n            yearTotalSupplyOf[y] = totalSupply;\r\n\r\n            emit OnAddYearToken(_lastTotalSupply, totalSupply, y, now, getEventId());\r\n        }\r\n    }\r\n\r\n    uint256 public baseMineTokenAmount = 1000 * (10 ** uint256(decimals));   \r\n\r\n    uint256 public currentMineTokenAmount   = baseMineTokenAmount;\r\n    uint    public currentMideTokenTime     = now;\r\n\r\n    function getMineTokenAmount() public returns (uint256 _result){            \r\n        _result = 0;\r\n\r\n        if (currentMineTokenAmount == 0){\r\n            _result = currentMineTokenAmount;\r\n            return;\r\n        }\r\n\r\n        if(now <= 1 days + currentMideTokenTime){\r\n            _result = currentMineTokenAmount;\r\n            return;\r\n        }\r\n\r\n        currentMineTokenAmount = currentMineTokenAmount * 996 / 1000;\r\n        if(currentMineTokenAmount <= 10 ** uint256(decimals)){\r\n            currentMineTokenAmount = 0;\r\n        }\r\n        currentMideTokenTime = now;\r\n\r\n        _result = currentMineTokenAmount;\r\n        return;\r\n    }\r\n    \r\n    event OnMineToken(address indexed _game, address indexed _player, uint256 _toUser, uint256 _toOwner, uint256 _toBosss, uint256 _toSupper, uint _eventTime, uint _eventId);\r\n\r\n    function mineToken(address _player, uint256 _etherAmount) external returns (uint _toPlayerToken) {\r\n        _toPlayerToken = _mineToken(_player, _etherAmount);\r\n    }\r\n\r\n    function _mineToken(address _player, uint256 _etherAmount) private returns (uint _toPlayerToken) {\r\n        require(_player != 0x0);\r\n        require(isWhiteList(msg.sender));   \r\n        require(msg.sender != tx.origin);   \r\n        require(_etherAmount > 0);\r\n\r\n        uint256 te = getMineTokenAmount();\r\n        if (te == 0){\r\n            return;\r\n        }\r\n\r\n        uint256 ToUser = te .mul(_etherAmount).div(1 ether);\r\n        if (ToUser > 0){\r\n            _callDividend(_player);\r\n            _callDividend(owner);\r\n            _callDividend(boss);\r\n\r\n            balanceOf[_player] = balanceOf[_player].add(ToUser);\r\n\r\n            uint256 ToSupper = 0;\r\n            if(referrerEnable){\r\n                address supper = getReferrer1(_player);\r\n                if (supper != 0x0){\r\n                    _callDividend(supper);\r\n                    ToSupper = ToUser * refRewardL1Per100 / 100;\r\n                    balanceOf[supper] = balanceOf[supper].add(ToSupper);\r\n                }\r\n            }\r\n\r\n            uint256 ToUS = ToUser.add(ToSupper);\r\n            uint256 ToOwner = ToUS.div(8);\r\n            balanceOf[owner] = balanceOf[owner].add(ToOwner);\r\n            uint256 ToBoss = ToUS.div(8);\r\n            balanceOf[boss] = balanceOf[boss].add(ToBoss);\r\n\r\n            totalSupply = totalSupply.add(ToUS.add(ToOwner.add(ToBoss)));\r\n\r\n            emit OnMineToken(msg.sender,  _player, ToUser, ToOwner, ToBoss, ToSupper, now, getEventId());\r\n        }\r\n        _toPlayerToken = ToUser;\r\n    }\r\n\r\n    function () public payable {                            \r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] += msg.value;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentMideTokenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"addPlayer1\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDividendPeriodNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"freeLostToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"mineToken\",\"outputs\":[{\"name\":\"_toPlayerToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMineTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinDividendEtherAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDividendEtherAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callDividendAndUserRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividendPeriodOf\",\"outputs\":[{\"name\":\"StartTime\",\"type\":\"uint256\"},{\"name\":\"EndTime\",\"type\":\"uint256\"},{\"name\":\"TotalEtherAmount\",\"type\":\"uint256\"},{\"name\":\"ShareEtherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMineTokenAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setDivIntervalDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value1\",\"type\":\"uint256\"}],\"name\":\"setRefRewardPer100\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getReferrer1\",\"outputs\":[{\"name\":\"_result\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"},{\"name\":\"_gameCanTransfer\",\"type\":\"bool\"}],\"name\":\"setGameTransferFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"addPlayer2\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setreferrerEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bossAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameTransferFlagOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseMineTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDividendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divIntervalDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"addPlayer\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareAddEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBoss\",\"type\":\"address\"}],\"name\":\"setBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iniOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitOrg\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boss\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callDividend\",\"outputs\":[{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withhold\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addYearToken\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameWhiteListOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"profitOrgPay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refRewardL1Per100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDividendEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addTotalEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_players\",\"type\":\"address[]\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"addPlayer3\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAdmin\",\"type\":\"address\"},{\"name\":\"_boss\",\"type\":\"address\"},{\"name\":\"_bossAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lastTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_years\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnAddYearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toUser\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toOwner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toBosss\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toSupper\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnMineToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnAddPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lastCalTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnCallDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_profitOrg\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_divAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnProfitOrgPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lostUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnFreeLostToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnWhiteListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"GameToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008765669209f6c36dd61a7a5ee3e09976434e71f3000000000000000000000000ebfae301a2102f78c7b252ca3869116a59020fe4000000000000000000000000ac49dcf3c71bb5f74e513345b81d0f0b3cc9acd1","Library":"","SwarmSource":"bzzr://210570b68c4b0b3d8f0cae6cbda4930e562339140b6640705de5950159b936c3"}]}