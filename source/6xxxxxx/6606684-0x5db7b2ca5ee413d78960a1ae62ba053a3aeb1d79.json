{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeCast {\r\n    /**\r\n     * Cast unsigned a to signed a.\r\n     */\r\n    function castToInt(uint a) internal pure returns(int) {\r\n        assert(a < (1 << 255));\r\n        return int(a);\r\n    }\r\n\r\n    /**\r\n     * Cast signed a to unsigned a.\r\n     */\r\n    function castToUint(int a) internal pure returns(uint) {\r\n        assert(a >= 0);\r\n        return uint(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, throws on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers, truncating the quotient.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // Overflow only happens when the smallest negative int is multiplied by -1.\r\n        int256 INT256_MIN = int256((uint256(1) << 255));\r\n        assert(a != INT256_MIN || b != - 1);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, throws on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        assert((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, throws on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        assert((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface GameInterface {\r\n    function maxBet(uint _num, uint _bankRoll) external view returns(uint);\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _num) external view returns(uint);\r\n\r\n    function userProfit(uint _num, uint _betValue, uint _resultNum) external view returns(int);\r\n\r\n    function maxUserProfit(uint _num, uint _betValue) external view returns(int);\r\n}\r\n\r\ncontract Utilities {\r\n    using SafeCast for int;\r\n    using SafeCast for uint;\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    uint constant public PROBABILITY_DIVISOR = 10000;\r\n    uint constant public HOUSE_EDGE = 150;\r\n    uint constant public HOUSE_EDGE_DIVISOR = 10000;\r\n\r\n    /**\r\n     * @dev Calc max bet we allow\r\n     * We definitely do not allow bets greater than kelly criterion would allow.\r\n     * => The max bet is limited to the max profit of houseEdge * bankroll.\r\n     * => maxBet = houseEdge / (1/p * (1 - houseEdge) - 1) * bankroll, with p is win probability.\r\n     * The max bet can be further restricted on backend.\r\n     * @param _winProbability winProbability.\r\n     * @return max allowed bet.\r\n     */\r\n    function maxBetFromProbability(uint _winProbability, uint _bankRoll) public pure returns(uint) {\r\n        assert(0 < _winProbability && _winProbability < PROBABILITY_DIVISOR);\r\n\r\n        uint tmp1 = PROBABILITY_DIVISOR.mul(HOUSE_EDGE_DIVISOR).div(_winProbability);\r\n        uint tmp2 = PROBABILITY_DIVISOR.mul(HOUSE_EDGE).div(_winProbability);\r\n\r\n        uint enumerator = HOUSE_EDGE.mul(_bankRoll);\r\n        uint denominator = tmp1.sub(tmp2).sub(HOUSE_EDGE_DIVISOR);\r\n        return enumerator.div(denominator);\r\n    }\r\n\r\n    /**\r\n     * Calculate user profit from total won.\r\n     * @param _totalWon user winnings.\r\n     * @param _betValue bet value.\r\n     * @return user profit.\r\n     */\r\n    function calcProfitFromTotalWon(uint _totalWon, uint _betValue) public pure returns(int) {\r\n        uint houseEdgeValue = _totalWon.mul(HOUSE_EDGE).div(HOUSE_EDGE_DIVISOR);\r\n\r\n        return _totalWon.castToInt().sub(houseEdgeValue.castToInt()).sub(_betValue.castToInt());\r\n    }\r\n\r\n    /**\r\n     * @dev Generates a 256 bit random number by combining server and user seed.\r\n     * @param _serverSeed server seed.\r\n     * @param _userSeed user seed.\r\n     * @return random number generated by combining server and user seed.\r\n     */\r\n    function generateRandomNumber(bytes32 _serverSeed, bytes32 _userSeed) public pure returns(uint) {\r\n        bytes32 combinedHash = keccak256(abi.encodePacked(_serverSeed, _userSeed));\r\n        return uint(combinedHash);\r\n    }\r\n}\r\n\r\ncontract ChooseFrom12 is GameInterface, Utilities {\r\n    using SafeCast for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint private constant NUMBERS = 12;\r\n\r\n    modifier onlyValidNum(uint _betNum) {\r\n        require(_betNum > 0 && _betNum < ((1 << NUMBERS) - 1), \"Invalid num\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidResultNum(uint _resultNum) {\r\n         require(_resultNum >= 0 &&  _resultNum < NUMBERS);\r\n        _;\r\n    }\r\n\r\n    function maxBet(uint _betNum, uint _bankRoll) external onlyValidNum(_betNum) view returns(uint) {\r\n        uint probability = getSelectedBits(_betNum).mul(Utilities.PROBABILITY_DIVISOR) / NUMBERS;\r\n        return Utilities.maxBetFromProbability(probability, _bankRoll);\r\n    }\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _betNum) external onlyValidNum(_betNum) view returns(uint) {\r\n        uint randNum = Utilities.generateRandomNumber(_serverSeed, _userSeed);\r\n        return randNum % NUMBERS;\r\n    }\r\n\r\n    function userProfit(uint _betNum, uint _betValue, uint _resultNum)\r\n        external\r\n        onlyValidNum(_betNum)\r\n        onlyValidResultNum(_resultNum)\r\n        view\r\n        returns(int)\r\n    {\r\n        bool won = (_betNum & (1 <<_resultNum)) > 0;\r\n        if (won) {\r\n            uint totalWon = _betValue.mul(NUMBERS).div(getSelectedBits(_betNum));\r\n            return Utilities.calcProfitFromTotalWon(totalWon, _betValue);\r\n        } else {\r\n            return -_betValue.castToInt();\r\n        }\r\n    }\r\n\r\n    function maxUserProfit(uint _betNum, uint _betValue) external onlyValidNum(_betNum) view returns(int) {\r\n        uint totalWon = _betValue.mul(NUMBERS) / getSelectedBits(_betNum);\r\n        return Utilities.calcProfitFromTotalWon(totalWon, _betValue);\r\n    }\r\n\r\n    function getSelectedBits(uint _num) private pure returns(uint) {\r\n        uint selectedBits = 0;\r\n        // Could be calculated more efficient.\r\n        // But as it's only needed if a conflict arises, let's keeps it simple.\r\n        for (uint i = 0; i < NUMBERS; i++) {\r\n            if (_num & (1 << i) > 0) {\r\n                selectedBits += 1;\r\n            }\r\n        }\r\n        return selectedBits;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"name\":\"_userSeed\",\"type\":\"bytes32\"}],\"name\":\"generateRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalWon\",\"type\":\"uint256\"},{\"name\":\"_betValue\",\"type\":\"uint256\"}],\"name\":\"calcProfitFromTotalWon\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betValue\",\"type\":\"uint256\"}],\"name\":\"maxUserProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_bankRoll\",\"type\":\"uint256\"}],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betValue\",\"type\":\"uint256\"},{\"name\":\"_resultNum\",\"type\":\"uint256\"}],\"name\":\"userProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_winProbability\",\"type\":\"uint256\"},{\"name\":\"_bankRoll\",\"type\":\"uint256\"}],\"name\":\"maxBetFromProbability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"name\":\"_userSeed\",\"type\":\"bytes32\"},{\"name\":\"_betNum\",\"type\":\"uint256\"}],\"name\":\"resultNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROBABILITY_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChooseFrom12","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://323e3dae481769b8060753802812a11ce3ce377d1bf1a9f1a26010483a3ce00d"}]}