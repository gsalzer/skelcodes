{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// Game by spielley\r\n// If you want a cut of the 1% dev share on P3D divs\r\n// buy shares at => 0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1\r\n// P3D masternode rewards for the UI builder\r\n// multisigcontractgame v 1.01\r\n// spielley is not liable for any known or unknown bugs contained by contract\r\n\r\n// hack at least half the signatures in the contract to gain acceptOwnership\r\n// hack the P3D divs to the contract\r\n// if you can manage to be the last hacker with majority in the contract\r\n// for at least 5000 blocks, you can hack the P3D divs eth at contract\r\n// Have fun, these games are purely intended for fun.\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\ninterface HourglassInterface  {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\ninterface SPASMInterface  {\r\n    function() payable external;\r\n    function disburse() external  payable;\r\n}\r\ncontract DivMultisigHackable is Owned {\r\n    using SafeMath for uint;\r\nHourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\nSPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\r\nfunction buyp3d(uint256 amt) internal{\r\nP3Dcontract_.buy.value(amt)(this);\r\n}\r\nfunction claimdivs() internal{\r\nP3Dcontract_.withdraw();\r\n}\r\n// amount of divs available\r\n\r\nstruct HackableSignature {\r\n    address owner;\r\n    uint256 hackingcost;\r\n    uint256 encryption;\r\n}\r\nuint256 public ethtosend;//eth contract pot\r\n\r\nuint256 public totalsigs;\r\nmapping(uint256 => HackableSignature) public Multisigs;  \r\nmapping(address => uint256) public lasthack;\r\nmapping(address => uint256) public ETHtoP3Dbymasternode;\r\nmapping(address => string) public Vanity;\r\naddress public last50plushacker;\r\nuint256 public last50plusblocknr;\r\n\r\naddress public contrp3d = 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe;\r\n\r\nconstructor(uint256 amtsigs) public{\r\n    uint256 nexId;\r\n    for(nexId = 0; nexId < amtsigs;nexId++){\r\n    Multisigs[nexId].owner = msg.sender;\r\n    Multisigs[nexId].hackingcost = 1;\r\n    Multisigs[nexId].encryption = 1;\r\n}\r\ntotalsigs = amtsigs;\r\n}\r\nevent onHarvest(\r\n        address customerAddress,\r\n        uint256 amount\r\n    );\r\nfunction harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n    }\r\nfunction getMultisigOwner(uint256 sigId) view public returns(address)\r\n    {\r\n        return Multisigs[sigId].owner;\r\n    }\r\nfunction getMultisigcost(uint256 sigId) view public returns(uint256)\r\n    {\r\n        return Multisigs[sigId].hackingcost;\r\n    }\r\nfunction getMultisigencryotion(uint256 sigId) view public returns(uint256)\r\n    {\r\n        return Multisigs[sigId].encryption;\r\n    }\r\nfunction ethtobuyp3d(address masternode) view public returns(uint256)\r\n    {\r\n        return ETHtoP3Dbymasternode[masternode];\r\n    }\r\nfunction HackableETH() view public returns(uint256)\r\n    {\r\n        return ethtosend;\r\n    }  \r\nfunction FetchVanity(address player) view public returns(string)\r\n    {\r\n        return Vanity[player];\r\n    }\r\nfunction FetchlastHacker() view public returns(address)\r\n    {\r\n        return last50plushacker;\r\n    }  \r\nfunction blockstillcontracthackable() view public returns(uint256)\r\n    {\r\n        uint256 test  = 5000 - last50plusblocknr ;\r\n        return test;\r\n    } \r\nfunction last50plusblokhack() view public returns(uint256)\r\n    {\r\n        return last50plusblocknr;\r\n    }      \r\nfunction amountofp3d() external view returns(uint256){\r\n    return ( P3Dcontract_.balanceOf(address(this)))  ;\r\n}\r\nfunction Hacksig(uint256 nmbr , address masternode) public payable{\r\n    require(lasthack[msg.sender] < block.number);\r\n    require(nmbr < totalsigs);\r\n    require(Multisigs[nmbr].owner != msg.sender);\r\n    require(msg.value >= Multisigs[nmbr].hackingcost + Multisigs[nmbr].encryption);\r\n    Multisigs[nmbr].owner = msg.sender;\r\n    Multisigs[nmbr].hackingcost ++;\r\n    Multisigs[nmbr].encryption = 0;\r\n    lasthack[msg.sender] = block.number;\r\n    ETHtoP3Dbymasternode[masternode] = ETHtoP3Dbymasternode[masternode].add(msg.value);\r\n}\r\nfunction Encrypt(uint256 nmbr, address masternode) public payable{\r\n    require(Multisigs[nmbr].owner == msg.sender);//prevent encryption of hacked sig\r\n    Multisigs[nmbr].encryption += msg.value;\r\n    ETHtoP3Dbymasternode[masternode] = ETHtoP3Dbymasternode[masternode].add(msg.value);\r\n    }\r\n\r\nfunction HackDivs() public payable{\r\n    uint256 divs = harvestabledivs();\r\n    require(msg.value >= 1 finney);\r\n    require(divs > 0);\r\n    uint256 count;\r\n    uint256 nexId;\r\n    for(nexId = 0; nexId < totalsigs;nexId++){\r\n    if(Multisigs[nexId].owner == msg.sender){\r\n        count++;\r\n    }\r\n}\r\nrequire(count > totalsigs.div(2));\r\n    claimdivs();\r\n    //1% to owner\r\n    uint256 base = divs.div(100);\r\n    SPASM_.disburse.value(base)();// to dev fee sharing contract\r\n    ethtosend = ethtosend.add(divs.sub(base));\r\n    emit onHarvest(msg.sender,ethtosend);\r\n    last50plushacker = msg.sender;\r\n    last50plusblocknr = block.number;\r\n}\r\nfunction HackContract() public{\r\n    uint256 count;\r\n    uint256 nexId;\r\n    for(nexId = 0; nexId < totalsigs;nexId++){\r\n    if(Multisigs[nexId].owner == msg.sender){\r\n        count++;\r\n    }\r\n    }\r\n    require(count > totalsigs.div(2));\r\n    require(block.number > last50plusblocknr + 5000);\r\n    require(msg.sender == last50plushacker);\r\n    uint256 amt = ethtosend;\r\n    \r\n    ethtosend = 0;\r\n    for(nexId = 0; nexId < totalsigs;nexId++){\r\n        if(Multisigs[nexId].owner == msg.sender){\r\n        Multisigs[nexId].owner = 0;\r\n    }\r\n    \r\n    }\r\n    msg.sender.transfer(amt);\r\n}\r\nfunction Expand(address masternode) public {\r\n    \r\n    uint256 amt = ETHtoP3Dbymasternode[masternode];\r\n    ETHtoP3Dbymasternode[masternode] = 0;\r\n\r\n    P3Dcontract_.buy.value(amt)(masternode);\r\n    \r\n}\r\nfunction changevanity(string van , address masternode) public payable{\r\n    require(msg.value >= 100  finney);\r\n    Vanity[msg.sender] = van;\r\n    ETHtoP3Dbymasternode[masternode] = ETHtoP3Dbymasternode[masternode].add(msg.value);\r\n}\r\nfunction () external payable{}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"HackDivs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contrp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethtosend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sigId\",\"type\":\"uint256\"}],\"name\":\"getMultisigencryotion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last50plushacker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sigId\",\"type\":\"uint256\"}],\"name\":\"getMultisigOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nmbr\",\"type\":\"uint256\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Encrypt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HackableETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Expand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"van\",\"type\":\"string\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"changevanity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockstillcontracthackable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"ethtobuyp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHtoP3Dbymasternode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Vanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountofp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HackContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nmbr\",\"type\":\"uint256\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Hacksig\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lasthack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last50plusblocknr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FetchlastHacker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sigId\",\"type\":\"uint256\"}],\"name\":\"getMultisigcost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Multisigs\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"hackingcost\",\"type\":\"uint256\"},{\"name\":\"encryption\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsigs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last50plusblokhack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"FetchVanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"amtsigs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DivMultisigHackable","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000019","Library":"","SwarmSource":"bzzr://c20c2670378b64924f2233d8de9fce4461e60624b8c7a2ccd4b2eae7679bdbf2"}]}