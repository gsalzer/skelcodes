{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"Multiplication overflow\");\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0, \"The denominator is 0\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract BulkTransfer\r\n{\r\n    using SafeMath for uint;\r\n    address owner;\r\n    \r\n    event MultiTransfer(\r\n        address indexed _from,\r\n        uint indexed _value,\r\n        address _to,\r\n        uint _amount\r\n    );\r\n\r\n    event MultiERC20Transfer(\r\n        address indexed _from,\r\n        address _to,\r\n        uint _amount,\r\n        ERC20 _token\r\n    );\r\n    \r\n    constructor () public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function multiTransfer(address[] _addresses, uint[] _amounts) public payable returns(bool) {\r\n        uint toReturn = msg.value;\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _safeTransfer(_addresses[i], _amounts[i]);\r\n            toReturn = SafeMath.sub(toReturn, _amounts[i]);\r\n            emit MultiTransfer(msg.sender, msg.value, _addresses[i], _amounts[i]);\r\n        }\r\n        _safeTransfer(msg.sender, toReturn);\r\n        return true;\r\n    }\r\n\r\n    function multiERC20Transfer(ERC20 _token, address[] _addresses, uint[] _amounts) public payable {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _safeERC20Transfer(_token, _addresses[i], _amounts[i]);\r\n            emit MultiERC20Transfer(\r\n                msg.sender,\r\n                _addresses[i],\r\n                _amounts[i],\r\n                _token\r\n            );\r\n        }\r\n    }\r\n\r\n    function _safeTransfer(address _to, uint _amount) internal {\r\n        require(_to != 0, \"Receipt address can't be 0\");\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function _safeERC20Transfer(ERC20 _token, address _to, uint _amount) internal {\r\n        require(_to != 0, \"Receipt address can't be 0\");\r\n        require(_token.transferFrom(msg.sender, _to, _amount), \"Sending a token failed\");\r\n    }\r\n\r\n    function () public payable {\r\n        revert(\"Contract prohibits receiving funds\");\r\n    }\r\n\r\n    function forwardTransaction( address destination, uint amount, uint gasLimit, bytes data) internal {\r\n        require(msg.sender == owner, \"Not an administrator\");\r\n        require(\r\n            destination.call.gas(\r\n                (gasLimit > 0) ? gasLimit : gasleft()\r\n            ).value(amount)(data), \r\n            \"operation failed\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiERC20Transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MultiTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"MultiERC20Transfer\",\"type\":\"event\"}]","ContractName":"BulkTransfer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://77ae5103e7d5803056a463cdb6ddfcec44bb5e833e4a99325c7e15e293c6d66a"}]}