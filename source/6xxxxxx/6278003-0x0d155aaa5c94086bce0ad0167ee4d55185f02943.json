{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n  * @title SafeMath\r\n  * @dev Math operations with safety checks that throw on error\r\n  */\r\nlibrary SafeMath {\r\n/**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract VANMToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //Variables\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    uint256 public presaleSupply;\r\n    address public presaleAddress;\r\n\r\n    uint256 public crowdsaleSupply;\r\n    address public crowdsaleAddress;\r\n\r\n    uint256 public platformSupply;\r\n    address public platformAddress;\r\n\r\n    uint256 public incentivisingSupply;\r\n    address public incentivisingAddress;\r\n\r\n    uint256 public teamSupply;\r\n    address public teamAddress;\r\n\r\n    uint256 public crowdsaleEndsAt;\r\n\r\n    uint256 public teamVestingPeriod;\r\n\r\n    bool public presaleFinalized = false;\r\n\r\n    bool public crowdsaleFinalized = false;\r\n\r\n    //Modifiers\r\n    //Only presale contract\r\n    modifier onlyPresale() {\r\n        require(msg.sender == presaleAddress);\r\n        _;\r\n    }\r\n\r\n    //Only crowdsale contract\r\n    modifier onlyCrowdsale() {\r\n        require(msg.sender == crowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n    //crowdsale has to be over\r\n    modifier notBeforeCrowdsaleEnds(){\r\n        require(block.timestamp >= crowdsaleEndsAt);\r\n        _;\r\n    }\r\n\r\n    // Check if vesting period is over\r\n    modifier checkTeamVestingPeriod() {\r\n        require(block.timestamp >= teamVestingPeriod);\r\n        _;\r\n    }\r\n\r\n    //Events\r\n    event PresaleFinalized(uint tokensRemaining);\r\n\r\n    event CrowdsaleFinalized(uint tokensRemaining);\r\n\r\n    //Constructor\r\n    constructor() public {\r\n\r\n        //Basic information\r\n        symbol = \"VANM\";\r\n        name = \"VANM\";\r\n        decimals = 18;\r\n\r\n        //Total VANM supply\r\n        _totalSupply = 240000000 * 10**uint256(decimals);\r\n\r\n        // 10% of total supply for presale\r\n        presaleSupply = 24000000 * 10**uint256(decimals);\r\n\r\n        // 50% of total supply for crowdsale\r\n        crowdsaleSupply = 120000000 * 10**uint256(decimals);\r\n\r\n        // 10% of total supply for platform\r\n        platformSupply = 24000000 * 10**uint256(decimals);\r\n\r\n        // 20% of total supply for incentivising\r\n        incentivisingSupply = 48000000 * 10**uint256(decimals);\r\n\r\n        // 10% of total supply for team\r\n        teamSupply = 24000000 * 10**uint256(decimals);\r\n\r\n        platformAddress = 0x6962371D5a9A229C735D936df5CE6C690e66b718;\r\n\r\n        teamAddress = 0xB9e54846da59C27eFFf06C3C08D5d108CF81FEae;\r\n\r\n        // 01.05.2019 00:00:00 UTC\r\n        crowdsaleEndsAt = 1556668800;\r\n\r\n        // 2 years vesting period\r\n        teamVestingPeriod = crowdsaleEndsAt.add(2 * 365 * 1 days);\r\n\r\n        balances[platformAddress] = platformSupply;\r\n        emit Transfer(0x0, platformAddress, platformSupply);\r\n\r\n        balances[incentivisingAddress] = incentivisingSupply;\r\n    }\r\n\r\n    //External functions\r\n    //Set Presale Address when it's deployed\r\n    function setPresaleAddress(address _presaleAddress) external onlyOwner {\r\n        require(presaleAddress == 0x0);\r\n        presaleAddress = _presaleAddress;\r\n        balances[_presaleAddress] = balances[_presaleAddress].add(presaleSupply);\r\n    }\r\n\r\n    // Finalize presale. Leftover tokens will overflow to crowdsale.\r\n    function finalizePresale() external onlyPresale {\r\n        require(presaleFinalized == false);\r\n        uint256 amount = balanceOf(presaleAddress);\r\n        if (amount > 0) {\r\n            balances[presaleAddress] = 0;\r\n            balances[crowdsaleAddress] = balances[crowdsaleAddress].add(amount);\r\n        }\r\n        presaleFinalized = true;\r\n        emit PresaleFinalized(amount);\r\n    }\r\n\r\n    //Set Crowdsale Address when it's deployed\r\n    function setCrowdsaleAddress(address _crowdsaleAddress) external onlyOwner {\r\n        require(presaleAddress != 0x0);\r\n        require(crowdsaleAddress == 0x0);\r\n        crowdsaleAddress = _crowdsaleAddress;\r\n        balances[_crowdsaleAddress] = balances[_crowdsaleAddress].add(crowdsaleSupply);\r\n    }\r\n\r\n    // Finalize crowdsale. Leftover tokens will overflow to platform.\r\n    function finalizeCrowdsale() external onlyCrowdsale {\r\n        require(presaleFinalized == true && crowdsaleFinalized == false);\r\n        uint256 amount = balanceOf(crowdsaleAddress);\r\n        if (amount > 0) {\r\n            balances[crowdsaleAddress] = 0;\r\n            balances[platformAddress] = balances[platformAddress].add(amount);\r\n            emit Transfer(0x0, platformAddress, amount);\r\n        }\r\n        crowdsaleFinalized = true;\r\n        emit CrowdsaleFinalized(amount);\r\n    }\r\n\r\n    //Public functions\r\n    //ERC20 functions\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n    notBeforeCrowdsaleEnds\r\n    returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n    notBeforeCrowdsaleEnds\r\n    returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //Token functions\r\n    //Incentivising function to transfer tokens\r\n    function transferFromIncentivising(address _to, uint256 _value) public\r\n    onlyOwner\r\n    returns (bool) {\r\n    require(_value <= balances[incentivisingAddress]);\r\n        balances[incentivisingAddress] = balances[incentivisingAddress].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(0x0, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //Presalefunction to transfer tokens\r\n    function transferFromPresale(address _to, uint256 _value) public\r\n    onlyPresale\r\n    returns (bool) {\r\n    require(_value <= balances[presaleAddress]);\r\n        balances[presaleAddress] = balances[presaleAddress].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(0x0, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //Crowdsalefunction to transfer tokens\r\n    function transferFromCrowdsale(address _to, uint256 _value) public\r\n    onlyCrowdsale\r\n    returns (bool) {\r\n    require(_value <= balances[crowdsaleAddress]);\r\n        balances[crowdsaleAddress] = balances[crowdsaleAddress].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(0x0, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Release team supply after vesting period is finished.\r\n    function releaseTeamTokens() public checkTeamVestingPeriod onlyOwner returns(bool) {\r\n        require(teamSupply > 0);\r\n        balances[teamAddress] = teamSupply;\r\n        emit Transfer(0x0, teamAddress, teamSupply);\r\n        teamSupply = 0;\r\n        return true;\r\n    }\r\n\r\n    //Check remaining incentivising tokens\r\n    function checkIncentivisingBalance() public view returns (uint256) {\r\n        return balances[incentivisingAddress];\r\n    }\r\n\r\n    //Check remaining presale tokens after presale contract is deployed\r\n    function checkPresaleBalance() public view returns (uint256) {\r\n        return balances[presaleAddress];\r\n    }\r\n\r\n    //Check remaining crowdsale tokens after crowdsale contract is deployed\r\n    function checkCrowdsaleBalance() public view returns (uint256) {\r\n        return balances[crowdsaleAddress];\r\n    }\r\n\r\n    //Recover ERC20 Tokens\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    //Don't accept ETH\r\n    function () public payable {\r\nrevert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkPresaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkCrowdsaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkIncentivisingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleAddress\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromIncentivising\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"PresaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VANMToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a0c1a7fddc2a3d718d2dc82c3bc8a8f4efc85a05b8d5acf5b2bebbb902f5a429"}]}