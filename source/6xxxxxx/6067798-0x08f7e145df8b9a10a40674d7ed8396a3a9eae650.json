{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract MajorityGameFactory {\r\n\r\n    address[] public deployedGames;\r\n    address[] public endedGames;\r\n    address[] public tempArray;\r\n\r\n    address public adminAddress;\r\n\r\n    mapping(address => uint) private gameAddressIdMap;\r\n\r\n    uint public gameCount = 0;\r\n    uint public endedGameCount = 0;\r\n\r\n    modifier adminOnly() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        adminAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * create new game\r\n     **/\r\n    function createGame (uint _gameBet, uint _startTime, string _questionText, address _officialAddress) public adminOnly payable {\r\n        gameCount ++;\r\n        address newGameAddress = new MajorityGame(gameCount, _gameBet, _startTime, _questionText, _officialAddress);\r\n        deployedGames.push(newGameAddress);\r\n        gameAddressIdMap[newGameAddress] = deployedGames.length;\r\n\r\n        setJackpot(newGameAddress, msg.value);\r\n    }\r\n\r\n    /**\r\n     * return all available games address\r\n     **/\r\n    function getDeployedGames() public view returns (address[]) {\r\n        return deployedGames;\r\n    }\r\n\r\n    /**\r\n     * return all available games address\r\n     **/\r\n    function getEndedGames() public view returns (address[]) {\r\n        return endedGames;\r\n    }\r\n\r\n    /**\r\n     * set bonus of the game\r\n     **/\r\n    function setJackpot(address targetAddress, uint val) adminOnly public {\r\n        if (val > 0) {\r\n            MajorityGame mGame = MajorityGame(targetAddress);\r\n            mGame.setJackpot.value(val)();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * end the game\r\n     **/\r\n    function endGame(address targetAddress) public {\r\n        uint targetGameIndex = gameAddressIdMap[address(targetAddress)];\r\n        endedGameCount++;\r\n        endedGames.push(targetAddress);\r\n        deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1];\r\n\r\n        gameAddressIdMap[deployedGames[deployedGames.length-1]] = targetGameIndex;\r\n\r\n        delete deployedGames[deployedGames.length-1];\r\n        deployedGames.length--;\r\n\r\n        MajorityGame mGame = MajorityGame(address(targetAddress));\r\n        mGame.endGame();\r\n    }\r\n\r\n    /**\r\n     * force to end the game\r\n     **/\r\n    function forceEndGame(address targetAddress) public adminOnly {\r\n        uint targetGameIndex = gameAddressIdMap[address(targetAddress)];\r\n        endedGameCount++;\r\n        endedGames.push(targetAddress);\r\n        deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1];\r\n\r\n        gameAddressIdMap[deployedGames[deployedGames.length-1]] = targetGameIndex;\r\n\r\n        delete deployedGames[deployedGames.length-1];\r\n        deployedGames.length--;\r\n\r\n        MajorityGame mGame = MajorityGame(address(targetAddress));\r\n        mGame.forceEndGame();\r\n    }\r\n}\r\n\r\n\r\ncontract MajorityGame {\r\n\r\n    // 1 minute\r\n    //uint constant private AVAILABLE_GAME_TIME = 0;\r\n    uint constant private MINIMUM_BET = 50000000000000000;\r\n    uint constant private MAXIMUM_BET = 50000000000000000;\r\n\r\n    uint public gameId;\r\n\r\n    uint private jackpot;\r\n    uint private gameBet;\r\n\r\n    // address of the creator\r\n    address public adminAddress;\r\n    address public officialAddress;\r\n\r\n    // game start time\r\n    uint private startTime;\r\n\r\n    // game data\r\n    string private questionText;\r\n\r\n    // store all player bet value\r\n    mapping(address => bool) private playerList;\r\n    uint public playersCount;\r\n\r\n    // store all player option record\r\n    mapping(address => bool) private option1List;\r\n    mapping(address => bool) private option2List;\r\n\r\n    // address list\r\n    address[] private option1AddressList;\r\n    address[] private option2AddressList;\r\n    address[] private winnerList;\r\n\r\n    uint private winnerSide;\r\n    uint private finalBalance;\r\n    uint private award;\r\n\r\n    // count the player option\r\n    //uint private option1Count;\r\n    //uint private option2Count;\r\n    modifier adminOnly() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    modifier withinGameTime() {\r\n        require(now <= startTime);\r\n        //require(now < startTime + AVAILABLE_GAME_TIME);\r\n        _;\r\n    }\r\n\r\n    modifier afterGameTime() {\r\n        require(now > startTime);\r\n        //require(now > startTime + AVAILABLE_GAME_TIME);\r\n        _;\r\n    }\r\n\r\n    modifier notEnded() {\r\n        require(winnerSide == 0);\r\n        _;\r\n    }\r\n\r\n    modifier isEnded() {\r\n        require(winnerSide > 0);\r\n        _;\r\n    }\r\n\r\n    constructor(uint _gameId, uint _gameBet, uint _startTime, string _questionText, address _officialAddress) public {\r\n        gameId = _gameId;\r\n        adminAddress = msg.sender;\r\n\r\n        gameBet = _gameBet;\r\n        startTime = _startTime;\r\n        questionText = _questionText;\r\n\r\n        playersCount = 0;\r\n        winnerSide = 0;\r\n        award = 0;\r\n\r\n        officialAddress = _officialAddress;\r\n    }\r\n    /*\r\n    function() public payable {\r\n    }\r\n    */\r\n    /**\r\n     * set the bonus of the game\r\n     **/\r\n    function setJackpot() public payable adminOnly returns (bool) {\r\n        if (msg.value > 0) {\r\n            jackpot += msg.value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * return the game data when playing\r\n     * 0 start time\r\n     * 1 end time\r\n     * 2 no of player\r\n     * 3 total bet\r\n     * 4 jackpot\r\n     * 5 is ended game boolean\r\n     * 6 game bet value\r\n     **/\r\n    function getGamePlayingStatus() public view returns (uint, uint, uint, uint, uint, uint, uint) {\r\n        return (\r\n        startTime,\r\n        startTime,\r\n        //startTime + AVAILABLE_GAME_TIME,\r\n        playersCount,\r\n        address(this).balance,\r\n        jackpot,\r\n        winnerSide,\r\n        gameBet\r\n        );\r\n    }\r\n\r\n    /**\r\n     * return the game details:\r\n     * 0 game id\r\n     * 1 start time\r\n     * 2 end time\r\n     * 3 no of player\r\n     * 4 total bet\r\n     * 5 question + option 1 + option 2\r\n     * 6 jackpot\r\n     * 7 is ended game\r\n     * 8 game bet value\r\n     **/\r\n    function getGameData() public view returns (uint, uint, uint, uint, uint, string, uint, uint, uint) {\r\n        return (\r\n        gameId,\r\n        startTime,\r\n        startTime,\r\n        //startTime + AVAILABLE_GAME_TIME,\r\n        playersCount,\r\n        address(this).balance,\r\n        questionText,\r\n        jackpot,\r\n        winnerSide,\r\n        gameBet\r\n        );\r\n    }\r\n\r\n    /**\r\n     * player submit their option\r\n     **/\r\n    function submitChoose(uint _chooseValue) public payable notEnded withinGameTime {\r\n        require(!playerList[msg.sender]);\r\n        require(msg.value == gameBet);\r\n\r\n        playerList[msg.sender] = true;\r\n        playersCount++;\r\n\r\n        if (_chooseValue == 1) {\r\n            option1List[msg.sender] = true;\r\n            option1AddressList.push(msg.sender);\r\n        } else if (_chooseValue == 2) {\r\n            option2List[msg.sender] = true;\r\n            option2AddressList.push(msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * calculate the winner side\r\n     * calculate the award to winner\r\n     **/\r\n    function endGame() public afterGameTime {\r\n        require(winnerSide == 0);\r\n\r\n        // 10% for operation fee\r\n        finalBalance = address(this).balance;\r\n\r\n        uint totalAward = uint(finalBalance * 9 / 10);\r\n\r\n        uint option1Count = option1AddressList.length;\r\n        uint option2Count = option2AddressList.length;\r\n\r\n        if (option1Count > option2Count || (option1Count == option2Count && gameId % 2 == 1)) { // option1 win\r\n            award = option1Count == 0 ? 0 : uint(totalAward / option1Count);\r\n            winnerSide = 1;\r\n            winnerList = option1AddressList;\r\n        } else if (option2Count > option1Count || (option1Count == option2Count && gameId % 2 == 0)) { // option2 win\r\n            award = option2Count == 0 ? 0 : uint(totalAward / option2Count);\r\n            winnerSide = 2;\r\n            winnerList = option2AddressList;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * calculate the winner side\r\n     * calculate the award to winner\r\n     **/\r\n    function forceEndGame() public adminOnly {\r\n        require(winnerSide == 0);\r\n        // 10% for operation fee\r\n        finalBalance = address(this).balance;\r\n\r\n        uint totalAward = uint(finalBalance * 9 / 10);\r\n\r\n        uint option1Count = option1AddressList.length;\r\n        uint option2Count = option2AddressList.length;\r\n\r\n        if (option1Count > option2Count || (option1Count == option2Count && gameId % 2 == 1)) { // option1 win\r\n            award = option1Count == 0 ? 0 : uint(totalAward / option1Count);\r\n            winnerSide = 1;\r\n            winnerList = option1AddressList;\r\n        } else if (option2Count > option1Count || (option1Count == option2Count && gameId % 2 == 0)) { // option2 win\r\n            award = option2Count == 0 ? 0 : uint(totalAward / option2Count);\r\n            winnerSide = 2;\r\n            winnerList = option2AddressList;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send award to winner\r\n     **/\r\n    function sendAward() public isEnded {\r\n        require(winnerList.length > 0);\r\n\r\n        uint count = winnerList.length;\r\n\r\n        if (count > 250) {\r\n            for (uint i = 0; i < 250; i++) {\r\n                this.sendAwardToLastWinner();\r\n            }\r\n        } else {\r\n            for (uint j = 0; j < count; j++) {\r\n                this.sendAwardToLastWinner();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send award to last winner of the list\r\n     **/\r\n    function sendAwardToLastWinner() public isEnded {\r\n        address(winnerList[winnerList.length - 1]).transfer(award);\r\n\r\n        delete winnerList[winnerList.length - 1];\r\n        winnerList.length--;\r\n\r\n        if(winnerList.length == 0){\r\n          address add=address(officialAddress);\r\n          address(add).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the game details after ended\r\n     * 0 winner side\r\n     * 1 nomber of player who choose option 1\r\n     * 2 nomber of player who choose option 2\r\n     * 3 total award\r\n     * 4 award of each winner\r\n     **/\r\n    function getEndGameStatus() public isEnded view returns (uint, uint, uint, uint, uint) {\r\n        return (\r\n            winnerSide,\r\n            option1AddressList.length,\r\n            option2AddressList.length,\r\n            finalBalance,\r\n            award\r\n        );\r\n    }\r\n\r\n    /**\r\n    * get the option os the player choosed\r\n    **/\r\n    function getPlayerOption() public view returns (uint) {\r\n        if (option1List[msg.sender]) {\r\n            return 1;\r\n        } else if (option2List[msg.sender]) {\r\n            return 2;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the players who won the game\r\n     **/\r\n    function getWinnerAddressList() public isEnded view returns (address[]) {\r\n      if (winnerSide == 1) {\r\n        return option1AddressList;\r\n      }else {\r\n        return option2AddressList;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * return the players who won the game\r\n     **/\r\n    function getLoserAddressList() public isEnded view returns (address[]) {\r\n      if (winnerSide == 1) {\r\n        return option2AddressList;\r\n      }else {\r\n        return option1AddressList;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * return winner list\r\n     **/\r\n    function getWinnerList() public isEnded view returns (address[]) {\r\n        return winnerList;\r\n    }\r\n\r\n    /**\r\n     * return winner list size\r\n     **/\r\n    function getWinnerListLength() public isEnded view returns (uint) {\r\n        return winnerList.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tempArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameBet\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_questionText\",\"type\":\"string\"},{\"name\":\"_officialAddress\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endedGameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"forceEndGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndedGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endedGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedGames\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MajorityGameFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://efe8fdee9bec280c9f682f55da91c212a6e204279e1b405c7f9dd90b0a903c46"}]}