{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* This file was generated by MyWish Platform (https://mywish.io/)\r\n* The complete code could be found at https://github.com/MyWishPlatform/\r\n* Copyright (C) 2018 MyWish\r\n*\r\n* This program is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* This program is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender)\r\npublic view returns (uint256);\r\n\r\nfunction transferFrom(address from, address to, uint256 value)\r\npublic returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n// benefit is lost if 'b' is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\nc = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn a / b;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nc = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title Crowdsale\r\n* @dev Crowdsale is a base contract for managing a token crowdsale,\r\n* allowing investors to purchase tokens with ether. This contract implements\r\n* such functionality in its most fundamental form and can be extended to provide additional\r\n* functionality and/or custom behavior.\r\n* The external interface represents the basic interface for purchasing tokens, and conform\r\n* the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n* The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n* the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n* behavior.\r\n*/\r\ncontract Crowdsale {\r\nusing SafeMath for uint256;\r\n\r\n// The token being sold\r\nERC20 public token;\r\n\r\n// Address where funds are collected\r\naddress public wallet;\r\n\r\n// How many token units a buyer gets per wei.\r\n// The rate is the conversion between wei and the smallest and indivisible token unit.\r\n// So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n// 1 wei will give you 1 unit, or 0.001 TOK.\r\nuint256 public rate;\r\n\r\n// Amount of wei raised\r\nuint256 public weiRaised;\r\n\r\n/**\r\n* Event for token purchase logging\r\n* @param purchaser who paid for the tokens\r\n* @param beneficiary who got the tokens\r\n* @param value weis paid for purchase\r\n* @param amount amount of tokens purchased\r\n*/\r\nevent TokenPurchase(\r\naddress indexed purchaser,\r\naddress indexed beneficiary,\r\nuint256 value,\r\nuint256 amount\r\n);\r\n\r\n/**\r\n* @param _rate Number of token units a buyer gets per wei\r\n* @param _wallet Address where collected funds will be forwarded to\r\n* @param _token Address of the token being sold\r\n*/\r\nconstructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\nrequire(_rate > 0);\r\nrequire(_wallet != address(0));\r\nrequire(_token != address(0));\r\n\r\nrate = _rate;\r\nwallet = _wallet;\r\ntoken = _token;\r\n}\r\n\r\n// -----------------------------------------\r\n// Crowdsale external interface\r\n// -----------------------------------------\r\n\r\n/**\r\n* @dev fallback function ***DO NOT OVERRIDE***\r\n*/\r\nfunction () external payable {\r\nbuyTokens(msg.sender);\r\n}\r\n\r\n/**\r\n* @dev low level token purchase ***DO NOT OVERRIDE***\r\n* @param _beneficiary Address performing the token purchase\r\n*/\r\nfunction buyTokens(address _beneficiary) public payable {\r\n\r\nuint256 weiAmount = msg.value;\r\n_preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n// calculate token amount to be created\r\nuint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n// update state\r\nweiRaised = weiRaised.add(weiAmount);\r\n\r\n_processPurchase(_beneficiary, tokens);\r\nemit TokenPurchase(\r\nmsg.sender,\r\n_beneficiary,\r\nweiAmount,\r\ntokens\r\n);\r\n\r\n_updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n_forwardFunds();\r\n_postValidatePurchase(_beneficiary, weiAmount);\r\n}\r\n\r\n// -----------------------------------------\r\n// Internal interface (extensible)\r\n// -----------------------------------------\r\n\r\n/**\r\n* @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n* @param _beneficiary Address performing the token purchase\r\n* @param _weiAmount Value in wei involved in the purchase\r\n*/\r\nfunction _preValidatePurchase(\r\naddress _beneficiary,\r\nuint256 _weiAmount\r\n)\r\ninternal\r\n{\r\nrequire(_beneficiary != address(0));\r\nrequire(_weiAmount != 0);\r\n}\r\n\r\n/**\r\n* @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n* @param _beneficiary Address performing the token purchase\r\n* @param _weiAmount Value in wei involved in the purchase\r\n*/\r\nfunction _postValidatePurchase(\r\naddress _beneficiary,\r\nuint256 _weiAmount\r\n)\r\ninternal\r\n{\r\n// optional override\r\n}\r\n\r\n/**\r\n* @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n* @param _beneficiary Address performing the token purchase\r\n* @param _tokenAmount Number of tokens to be emitted\r\n*/\r\nfunction _deliverTokens(\r\naddress _beneficiary,\r\nuint256 _tokenAmount\r\n)\r\ninternal\r\n{\r\ntoken.transfer(_beneficiary, _tokenAmount);\r\n}\r\n\r\n/**\r\n* @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n* @param _beneficiary Address receiving the tokens\r\n* @param _tokenAmount Number of tokens to be purchased\r\n*/\r\nfunction _processPurchase(\r\naddress _beneficiary,\r\nuint256 _tokenAmount\r\n)\r\ninternal\r\n{\r\n_deliverTokens(_beneficiary, _tokenAmount);\r\n}\r\n\r\n/**\r\n* @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n* @param _beneficiary Address receiving the tokens\r\n* @param _weiAmount Value in wei involved in the purchase\r\n*/\r\nfunction _updatePurchasingState(\r\naddress _beneficiary,\r\nuint256 _weiAmount\r\n)\r\ninternal\r\n{\r\n// optional override\r\n}\r\n\r\n/**\r\n* @dev Override to extend the way in which ether is converted to tokens.\r\n* @param _weiAmount Value in wei to be converted into tokens\r\n* @return Number of tokens that can be purchased with the specified _weiAmount\r\n*/\r\nfunction _getTokenAmount(uint256 _weiAmount)\r\ninternal view returns (uint256)\r\n{\r\nreturn _weiAmount.mul(rate);\r\n}\r\n\r\n/**\r\n* @dev Determines how ETH is stored/forwarded on purchases.\r\n*/\r\nfunction _forwardFunds() internal {\r\nwallet.transfer(msg.value);\r\n}\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\naddress public owner;\r\n\r\n\r\nevent OwnershipRenounced(address indexed previousOwner);\r\nevent OwnershipTransferred(\r\naddress indexed previousOwner,\r\naddress indexed newOwner\r\n);\r\n\r\n\r\n/**\r\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n* account.\r\n*/\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to relinquish control of the contract.\r\n*/\r\nfunction renounceOwnership() public onlyOwner {\r\nemit OwnershipRenounced(owner);\r\nowner = address(0);\r\n}\r\n\r\n/**\r\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n* @param _newOwner The address to transfer ownership to.\r\n*/\r\nfunction transferOwnership(address _newOwner) public onlyOwner {\r\n_transferOwnership(_newOwner);\r\n}\r\n\r\n/**\r\n* @dev Transfers control of the contract to a newOwner.\r\n* @param _newOwner The address to transfer ownership to.\r\n*/\r\nfunction _transferOwnership(address _newOwner) internal {\r\nrequire(_newOwner != address(0));\r\nemit OwnershipTransferred(owner, _newOwner);\r\nowner = _newOwner;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title TimedCrowdsale\r\n* @dev Crowdsale accepting contributions only within a time frame.\r\n*/\r\ncontract TimedCrowdsale is Crowdsale {\r\nusing SafeMath for uint256;\r\n\r\nuint256 public openingTime;\r\nuint256 public closingTime;\r\n\r\n/**\r\n* @dev Reverts if not in crowdsale time range.\r\n*/\r\nmodifier onlyWhileOpen {\r\n// solium-disable-next-line security/no-block-members\r\nrequire(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Constructor, takes crowdsale opening and closing times.\r\n* @param _openingTime Crowdsale opening time\r\n* @param _closingTime Crowdsale closing time\r\n*/\r\nconstructor(uint256 _openingTime, uint256 _closingTime) public {\r\n// solium-disable-next-line security/no-block-members\r\nrequire(_openingTime >= block.timestamp);\r\nrequire(_closingTime >= _openingTime);\r\n\r\nopeningTime = _openingTime;\r\nclosingTime = _closingTime;\r\n}\r\n\r\n/**\r\n* @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n* @return Whether crowdsale period has elapsed\r\n*/\r\nfunction hasClosed() public view returns (bool) {\r\n// solium-disable-next-line security/no-block-members\r\nreturn block.timestamp > closingTime;\r\n}\r\n\r\n/**\r\n* @dev Extend parent behavior requiring to be within contributing period\r\n* @param _beneficiary Token purchaser\r\n* @param _weiAmount Amount of wei contributed\r\n*/\r\nfunction _preValidatePurchase(\r\naddress _beneficiary,\r\nuint256 _weiAmount\r\n)\r\ninternal\r\nonlyWhileOpen\r\n{\r\nsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances.\r\n*/\r\ncontract BasicToken is ERC20Basic {\r\nusing SafeMath for uint256;\r\n\r\nmapping(address => uint256) balances;\r\n\r\nuint256 totalSupply_;\r\n\r\n/**\r\n* @dev total number of tokens in existence\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n}\r\n\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address _owner) public view returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* @dev https://github.com/ethereum/EIPs/issues/20\r\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\nmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n*\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\nfunction allowance(\r\naddress _owner,\r\naddress _spender\r\n)\r\npublic\r\nview\r\nreturns (uint256)\r\n{\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n/**\r\n* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To increment\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _addedValue The amount of tokens to increase the allowance by.\r\n*/\r\nfunction increaseApproval(\r\naddress _spender,\r\nuint _addedValue\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nallowed[msg.sender][_spender] = (\r\nallowed[msg.sender][_spender].add(_addedValue));\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n*\r\n* approve should be called when allowed[_spender] == 0. To decrement\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* @param _spender The address which will spend the funds.\r\n* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n*/\r\nfunction decreaseApproval(\r\naddress _spender,\r\nuint _subtractedValue\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nuint oldValue = allowed[msg.sender][_spender];\r\nif (_subtractedValue > oldValue) {\r\nallowed[msg.sender][_spender] = 0;\r\n} else {\r\nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n}\r\nemit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\nreturn true;\r\n}\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Mintable token\r\n* @dev Simple ERC20 Token example, with mintable token creation\r\n* @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n*/\r\ncontract MintableToken is StandardToken, Ownable {\r\nevent Mint(address indexed to, uint256 amount);\r\nevent MintFinished();\r\n\r\nbool public mintingFinished = false;\r\n\r\n\r\nmodifier canMint() {\r\nrequire(!mintingFinished);\r\n_;\r\n}\r\n\r\nmodifier hasMintPermission() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Function to mint tokens\r\n* @param _to The address that will receive the minted tokens.\r\n* @param _amount The amount of tokens to mint.\r\n* @return A boolean that indicates if the operation was successful.\r\n*/\r\nfunction mint(\r\naddress _to,\r\nuint256 _amount\r\n)\r\nhasMintPermission\r\ncanMint\r\npublic\r\nreturns (bool)\r\n{\r\ntotalSupply_ = totalSupply_.add(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nemit Mint(_to, _amount);\r\nemit Transfer(address(0), _to, _amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to stop minting new tokens.\r\n* @return True if the operation was successful.\r\n*/\r\nfunction finishMinting() onlyOwner canMint public returns (bool) {\r\nmintingFinished = true;\r\nemit MintFinished();\r\nreturn true;\r\n}\r\n}\r\n\r\n\r\ncontract FreezableToken is StandardToken {\r\n// freezing chains\r\nmapping (bytes32 => uint64) internal chains;\r\n// freezing amounts for each chain\r\nmapping (bytes32 => uint) internal freezings;\r\n// total freezing balance per address\r\nmapping (address => uint) internal freezingBalance;\r\n\r\nevent Freezed(address indexed to, uint64 release, uint amount);\r\nevent Released(address indexed owner, uint amount);\r\n\r\n/**\r\n* @dev Gets the balance of the specified address include freezing tokens.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn super.balanceOf(_owner) + freezingBalance[_owner];\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address without freezing tokens.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction actualBalanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn super.balanceOf(_owner);\r\n}\r\n\r\nfunction freezingBalanceOf(address _owner) public view returns (uint256 balance) {\r\nreturn freezingBalance[_owner];\r\n}\r\n\r\n/**\r\n* @dev gets freezing count\r\n* @param _addr Address of freeze tokens owner.\r\n*/\r\nfunction freezingCount(address _addr) public view returns (uint count) {\r\nuint64 release = chains[toKey(_addr, 0)];\r\nwhile (release != 0) {\r\ncount++;\r\nrelease = chains[toKey(_addr, release)];\r\n}\r\n}\r\n\r\n/**\r\n* @dev gets freezing end date and freezing balance for the freezing portion specified by index.\r\n* @param _addr Address of freeze tokens owner.\r\n* @param _index Freezing portion index. It ordered by release date descending.\r\n*/\r\nfunction getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\r\nfor (uint i = 0; i < _index + 1; i++) {\r\n_release = chains[toKey(_addr, _release)];\r\nif (_release == 0) {\r\nreturn;\r\n}\r\n}\r\n_balance = freezings[toKey(_addr, _release)];\r\n}\r\n\r\n/**\r\n* @dev freeze your tokens to the specified address.\r\n* Be careful, gas usage is not deterministic,\r\n* and depends on how many freezes _to address already has.\r\n* @param _to Address to which token will be freeze.\r\n* @param _amount Amount of token to freeze.\r\n* @param _until Release date, must be in future.\r\n*/\r\nfunction freezeTo(address _to, uint _amount, uint64 _until) public {\r\nrequire(_to != address(0));\r\nrequire(_amount <= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\r\nbytes32 currentKey = toKey(_to, _until);\r\nfreezings[currentKey] = freezings[currentKey].add(_amount);\r\nfreezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\nfreeze(_to, _until);\r\nemit Transfer(msg.sender, _to, _amount);\r\nemit Freezed(_to, _until, _amount);\r\n}\r\n\r\n/**\r\n* @dev release first available freezing tokens.\r\n*/\r\nfunction releaseOnce() public {\r\nbytes32 headKey = toKey(msg.sender, 0);\r\nuint64 head = chains[headKey];\r\nrequire(head != 0);\r\nrequire(uint64(block.timestamp) > head);\r\nbytes32 currentKey = toKey(msg.sender, head);\r\n\r\nuint64 next = chains[currentKey];\r\n\r\nuint amount = freezings[currentKey];\r\ndelete freezings[currentKey];\r\n\r\nbalances[msg.sender] = balances[msg.sender].add(amount);\r\nfreezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\r\n\r\nif (next == 0) {\r\ndelete chains[headKey];\r\n} else {\r\nchains[headKey] = next;\r\ndelete chains[currentKey];\r\n}\r\nemit Released(msg.sender, amount);\r\n}\r\n\r\n/**\r\n* @dev release all available for release freezing tokens. Gas usage is not deterministic!\r\n* @return how many tokens was released\r\n*/\r\nfunction releaseAll() public returns (uint tokens) {\r\nuint release;\r\nuint balance;\r\n(release, balance) = getFreezing(msg.sender, 0);\r\nwhile (release != 0 && block.timestamp > release) {\r\nreleaseOnce();\r\ntokens += balance;\r\n(release, balance) = getFreezing(msg.sender, 0);\r\n}\r\n}\r\n\r\nfunction toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\r\n// WISH masc to increase entropy\r\nresult = 0x5749534800000000000000000000000000000000000000000000000000000000;\r\nassembly {\r\nresult := or(result, mul(_addr, 0x10000000000000000))\r\nresult := or(result, _release)\r\n}\r\n}\r\n\r\nfunction freeze(address _to, uint64 _until) internal {\r\nrequire(_until > block.timestamp);\r\nbytes32 key = toKey(_to, _until);\r\nbytes32 parentKey = toKey(_to, uint64(0));\r\nuint64 next = chains[parentKey];\r\n\r\nif (next == 0) {\r\nchains[parentKey] = _until;\r\nreturn;\r\n}\r\n\r\nbytes32 nextKey = toKey(_to, next);\r\nuint parent;\r\n\r\nwhile (next != 0 && _until > next) {\r\nparent = next;\r\nparentKey = nextKey;\r\n\r\nnext = chains[nextKey];\r\nnextKey = toKey(_to, next);\r\n}\r\n\r\nif (_until == next) {\r\nreturn;\r\n}\r\n\r\nif (next != 0) {\r\nchains[key] = next;\r\n}\r\n\r\nchains[parentKey] = _until;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @title Burnable Token\r\n* @dev Token that can be irreversibly burned (destroyed).\r\n*/\r\ncontract BurnableToken is BasicToken {\r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\n/**\r\n* @dev Burns a specific amount of tokens.\r\n* @param _value The amount of token to be burned.\r\n*/\r\nfunction burn(uint256 _value) public {\r\n_burn(msg.sender, _value);\r\n}\r\n\r\nfunction _burn(address _who, uint256 _value) internal {\r\nrequire(_value <= balances[_who]);\r\n// no need to require value <= totalSupply, since that would imply the\r\n// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\nbalances[_who] = balances[_who].sub(_value);\r\ntotalSupply_ = totalSupply_.sub(_value);\r\nemit Burn(_who, _value);\r\nemit Transfer(_who, address(0), _value);\r\n}\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n*/\r\ncontract Pausable is Ownable {\r\nevent Pause();\r\nevent Unpause();\r\n\r\nbool public paused = false;\r\n\r\n\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is not paused.\r\n*/\r\nmodifier whenNotPaused() {\r\nrequire(!paused);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is paused.\r\n*/\r\nmodifier whenPaused() {\r\nrequire(paused);\r\n_;\r\n}\r\n\r\n/**\r\n* @dev called by the owner to pause, triggers stopped state\r\n*/\r\nfunction pause() onlyOwner whenNotPaused public {\r\npaused = true;\r\nemit Pause();\r\n}\r\n\r\n/**\r\n* @dev called by the owner to unpause, returns to normal state\r\n*/\r\nfunction unpause() onlyOwner whenPaused public {\r\npaused = false;\r\nemit Unpause();\r\n}\r\n}\r\n\r\n\r\ncontract FreezableMintableToken is FreezableToken, MintableToken {\r\n/**\r\n* @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\r\n* Be careful, gas usage is not deterministic,\r\n* and depends on how many freezes _to address already has.\r\n* @param _to Address to which token will be freeze.\r\n* @param _amount Amount of token to mint and freeze.\r\n* @param _until Release date, must be in future.\r\n* @return A boolean that indicates if the operation was successful.\r\n*/\r\nfunction mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\r\ntotalSupply_ = totalSupply_.add(_amount);\r\n\r\nbytes32 currentKey = toKey(_to, _until);\r\nfreezings[currentKey] = freezings[currentKey].add(_amount);\r\nfreezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\nfreeze(_to, _until);\r\nemit Mint(_to, _amount);\r\nemit Freezed(_to, _until, _amount);\r\nemit Transfer(msg.sender, _to, _amount);\r\nreturn true;\r\n}\r\n}\r\n\r\n\r\n\r\ncontract Consts {\r\nuint public constant TOKEN_DECIMALS = 18;\r\nuint8 public constant TOKEN_DECIMALS_UINT8 = 18;\r\nuint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\nstring public constant TOKEN_NAME = \"Roswell Minds\";\r\nstring public constant TOKEN_SYMBOL = \"ROS\";\r\nbool public constant PAUSED = true;\r\naddress public constant TARGET_USER = 0xc51d23282B2a9209c6447dcD123214cF7E2D0C7b;\r\n\r\nuint public constant START_TIME = 1543190400;\r\n\r\nbool public constant CONTINUE_MINTING = true;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title FinalizableCrowdsale\r\n* @dev Extension of Crowdsale where an owner can do extra work\r\n* after finishing.\r\n*/\r\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\r\nusing SafeMath for uint256;\r\n\r\nbool public isFinalized = false;\r\n\r\nevent Finalized();\r\n\r\n/**\r\n* @dev Must be called after crowdsale ends, to do some extra finalization\r\n* work. Calls the contract's finalization function.\r\n*/\r\nfunction finalize() onlyOwner public {\r\nrequire(!isFinalized);\r\nrequire(hasClosed());\r\n\r\nfinalization();\r\nemit Finalized();\r\n\r\nisFinalized = true;\r\n}\r\n\r\n/**\r\n* @dev Can be overridden to add finalization logic. The overriding function\r\n* should call super.finalization() to ensure the chain of finalization is\r\n* executed entirely.\r\n*/\r\nfunction finalization() internal {\r\n}\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title CappedCrowdsale\r\n* @dev Crowdsale with a limit for total contributions.\r\n*/\r\ncontract CappedCrowdsale is Crowdsale {\r\nusing SafeMath for uint256;\r\n\r\nuint256 public cap;\r\n\r\n/**\r\n* @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n* @param _cap Max amount of wei to be contributed\r\n*/\r\nconstructor(uint256 _cap) public {\r\nrequire(_cap > 0);\r\ncap = _cap;\r\n}\r\n\r\n/**\r\n* @dev Checks whether the cap has been reached.\r\n* @return Whether the cap was reached\r\n*/\r\nfunction capReached() public view returns (bool) {\r\nreturn weiRaised >= cap;\r\n}\r\n\r\n/**\r\n* @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n* @param _beneficiary Token purchaser\r\n* @param _weiAmount Amount of wei contributed\r\n*/\r\nfunction _preValidatePurchase(\r\naddress _beneficiary,\r\nuint256 _weiAmount\r\n)\r\ninternal\r\n{\r\nsuper._preValidatePurchase(_beneficiary, _weiAmount);\r\nrequire(weiRaised.add(_weiAmount) <= cap);\r\n}\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title MintedCrowdsale\r\n* @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n* Token ownership should be transferred to MintedCrowdsale for minting.\r\n*/\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n/**\r\n* @dev Overrides delivery by minting tokens upon purchase.\r\n* @param _beneficiary Token purchaser\r\n* @param _tokenAmount Number of tokens to be minted\r\n*/\r\nfunction _deliverTokens(\r\naddress _beneficiary,\r\nuint256 _tokenAmount\r\n)\r\ninternal\r\n{\r\nrequire(MintableToken(token).mint(_beneficiary, _tokenAmount));\r\n}\r\n}\r\n\r\n\r\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Pausable\r\n\r\n{\r\n\r\n\r\nfunction name() public pure returns (string _name) {\r\nreturn TOKEN_NAME;\r\n}\r\n\r\nfunction symbol() public pure returns (string _symbol) {\r\nreturn TOKEN_SYMBOL;\r\n}\r\n\r\nfunction decimals() public pure returns (uint8 _decimals) {\r\nreturn TOKEN_DECIMALS_UINT8;\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\r\nrequire(!paused);\r\nreturn super.transferFrom(_from, _to, _value);\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) public returns (bool _success) {\r\nrequire(!paused);\r\nreturn super.transfer(_to, _value);\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MainCrowdsale is Consts, FinalizableCrowdsale, MintedCrowdsale, CappedCrowdsale {\r\nfunction hasStarted() public view returns (bool) {\r\nreturn now >= openingTime;\r\n}\r\n\r\nfunction startTime() public view returns (uint256) {\r\nreturn openingTime;\r\n}\r\n\r\nfunction endTime() public view returns (uint256) {\r\nreturn closingTime;\r\n}\r\n\r\nfunction hasClosed() public view returns (bool) {\r\nreturn super.hasClosed() || capReached();\r\n}\r\n\r\nfunction hasEnded() public view returns (bool) {\r\nreturn hasClosed();\r\n}\r\n\r\nfunction finalization() internal {\r\nsuper.finalization();\r\n\r\nif (PAUSED) {\r\nMainToken(token).unpause();\r\n}\r\n\r\nif (!CONTINUE_MINTING) {\r\nrequire(MintableToken(token).finishMinting());\r\n}\r\n\r\nOwnable(token).transferOwnership(TARGET_USER);\r\n}\r\n\r\n/**\r\n* @dev Override to extend the way in which ether is converted to tokens.\r\n* @param _weiAmount Value in wei to be converted into tokens\r\n* @return Number of tokens that can be purchased with the specified _weiAmount\r\n*/\r\nfunction _getTokenAmount(uint256 _weiAmount)\r\ninternal view returns (uint256)\r\n{\r\nreturn _weiAmount.mul(rate).div(1 ether);\r\n}\r\n}\r\n\r\n\r\n\r\ncontract TemplateCrowdsale is Consts, MainCrowdsale\r\n\r\n\r\n\r\n\r\n{\r\nevent Initialized();\r\nevent TimesChanged(uint startTime, uint endTime, uint oldStartTime, uint oldEndTime);\r\nbool public initialized = false;\r\n\r\nconstructor(MintableToken _token) public\r\nCrowdsale(1000 * TOKEN_DECIMAL_MULTIPLIER, 0xc51d23282B2a9209c6447dcD123214cF7E2D0C7b, _token)\r\nTimedCrowdsale(START_TIME > now ? START_TIME : now, 1545782400)\r\nCappedCrowdsale(50000000000000000000000)\r\n\r\n{\r\n}\r\n\r\nfunction init() public onlyOwner {\r\nrequire(!initialized);\r\ninitialized = true;\r\n\r\nif (PAUSED) {\r\nMainToken(token).pause();\r\n}\r\n\r\n\r\naddress[1] memory addresses = [address(0xc51d23282b2a9209c6447dcd123214cf7e2d0c7b)];\r\nuint[1] memory amounts = [uint(1000000000000000000000000)];\r\nuint64[1] memory freezes = [uint64(0)];\r\n\r\nfor (uint i = 0; i < addresses.length; i++) {\r\nif (freezes[i] == 0) {\r\nMainToken(token).mint(addresses[i], amounts[i]);\r\n} else {\r\nMainToken(token).mintAndFreeze(addresses[i], amounts[i], freezes[i]);\r\n}\r\n}\r\n\r\n\r\ntransferOwnership(TARGET_USER);\r\n\r\nemit Initialized();\r\n}\r\n\r\n\r\n\r\n\r\nfunction setStartTime(uint _startTime) public onlyOwner {\r\n// only if CS was not started\r\nrequire(now < openingTime);\r\n// only move time to future\r\nrequire(_startTime > openingTime);\r\nrequire(_startTime < closingTime);\r\nemit TimesChanged(_startTime, closingTime, openingTime, closingTime);\r\nopeningTime = _startTime;\r\n}\r\n\r\n\r\n\r\nfunction setEndTime(uint _endTime) public onlyOwner {\r\n// only if CS was not ended\r\nrequire(now < closingTime);\r\n// only if new end time in future\r\nrequire(now < _endTime);\r\nrequire(_endTime > openingTime);\r\nemit TimesChanged(openingTime, _endTime, openingTime, closingTime);\r\nclosingTime = _endTime;\r\n}\r\n\r\n\r\n\r\nfunction setTimes(uint _startTime, uint _endTime) public onlyOwner {\r\nrequire(_endTime > _startTime);\r\nuint oldStartTime = openingTime;\r\nuint oldEndTime = closingTime;\r\nbool changed = false;\r\nif (_startTime != oldStartTime) {\r\nrequire(_startTime > now);\r\n// only if CS was not started\r\nrequire(now < oldStartTime);\r\n// only move time to future\r\nrequire(_startTime > oldStartTime);\r\n\r\nopeningTime = _startTime;\r\nchanged = true;\r\n}\r\nif (_endTime != oldEndTime) {\r\n// only if CS was not ended\r\nrequire(now < oldEndTime);\r\n// end time in future\r\nrequire(now < _endTime);\r\n\r\nclosingTime = _endTime;\r\nchanged = true;\r\n}\r\n\r\nif (changed) {\r\nemit TimesChanged(openingTime, _endTime, openingTime, closingTime);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CONTINUE_MINTING\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMAL_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TARGET_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAUSED\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS_UINT8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldEndTime\",\"type\":\"uint256\"}],\"name\":\"TimesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"TemplateCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ab637180f34e59f6131c53120d1f7a2acc0da32","Library":"","SwarmSource":"bzzr://520629c4f66cf75f5d1529a9040e548c60b8739e1d3928c49c0e86182897638d"}]}