{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n// ----------------------------------------------------------------------------\r\n// 'Gas Fund' token contract, having Crowdsale and Investment functionality\r\n//\r\n// Contract Owner : 0x956881bc9Fbef7a2D176bfB371Be9Ab3e66683fD\r\n// Symbol      \t  : GAF\r\n// Name           : Gas Fund\r\n// Total supply   : 50,000,000,000\r\n// Decimals       : 18\r\n//\r\n// Copyright Â© 2018 onwards Gas Fund Inc. (https://gas-fund.com)\r\n// Contract designed by GDO Infotech Pvt Ltd (www.GDO.co.in)\r\n// ----------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n    \tusing SafeMath for uint256;\r\n    \t\r\n         constructor () public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n    \tstring public name;\r\n        string public symbol;\r\n        uint8 public decimals = 18;\r\n        // 18 decimals is the strongly suggested default, avoid changing it\r\n        uint256 public totalSupply;\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor (\r\n            uint256 initialSupply,\r\n            string tokenName,\r\n            string tokenSymbol\r\n        ) public {\r\n            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\r\n            uint256 ownerTokens = 8000000;\r\n            balanceOf[msg.sender] = ownerTokens.mul(1 ether);   // Give the creator 8,000,000 tokens\r\n            balanceOf[this]=totalSupply.sub(ownerTokens.mul(1 ether));// Remaining tokens in the contract address for ICO and Dividends\r\n            name = tokenName;                                   // Set the name for display purposes\r\n            symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n           emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n          emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /********************************************************/\r\n    /*       MAIN GAS FUND TOKEN CONTRACT STARTS HERE       */\r\n    /********************************************************/\r\n    \r\n    contract GasFund is owned, TokenERC20 {\r\n        using SafeMath for uint256;\r\n        \r\n        //**************************************************//\r\n        //------------- Code for the GAF Token -------------//\r\n        //**************************************************//\r\n        \r\n        // Public variables of the token\r\n    \tstring internal tokenName = \"Gas Fund\";\r\n        string internal tokenSymbol = \"GAF\";\r\n        uint256 internal initialSupply = 50000000000; \t// Initial supply of the tokens   \r\n\t\r\n    \t// Records for the fronzen accounts \r\n        mapping (address => bool) public frozenAccount;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients \r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        // Initializes contract with initial supply of tokens sent to the creator as well as contract \r\n        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {\r\n            tokenHolderExist[msg.sender] = true;\r\n            tokenHolders.push(msg.sender);\r\n        }\r\n    \r\n         \r\n        /**\r\n         * Transfer tokens - Internal transfer, only can be called by this contract\r\n         * \r\n         * This checks if the sender or recipient is not fronzen\r\n         * \r\n         * This keeps the track of total token holders and adds new holders as well.\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount of tokens to send\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n            //if receiver does not exist in tokenHolderExist mapping, then add into it as well as add in tokenHolders array\r\n            if(!tokenHolderExist[_to]){\r\n                tokenHolderExist[_to] = true;\r\n                tokenHolders.push(_to);\r\n            }\r\n           emit Transfer(_from, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n         * \r\n         * @param target Address to be frozen\r\n         * @param freeze either to freeze it or not\r\n         */\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n          emit  FrozenFunds(target, freeze);\r\n        }\r\n    \r\n        //**************************************************//\r\n        //------------- Code for the Crowdsale -------------//\r\n        //**************************************************//\r\n    \r\n        //public variables for the Crowdsale\r\n        uint256 public icoStartDate = 1540800000 ;  // October 29, 2018 - 8am GMT\r\n        uint256 public icoEndDate   = 1548057600 ;  // January 21, 2019 - 8am GMT\r\n        uint256 public exchangeRate = 1000;         // 1 ETH = 1000 GAF which equals to 1 GAF = 0.001 ETH\r\n        uint256 public totalTokensForICO = 12000000;// Tokens allocated for crowdsale\r\n        uint256 public tokensSold = 0;              // How many tokens sold in crowdsale\r\n        bool internal withdrawTokensOnlyOnce = true;// Admin can withdraw unsold tokens after ICO only once\r\n        \r\n        /**\r\n         * Fallback function, only accepts ether if ICO is running or Reject\r\n         * \r\n         * It calcualtes token amount from exchangeRate and also adds Bonuses if applicable\r\n         * \r\n         * Ether will be forwarded to owner immidiately.\r\n         */\r\n\t\tfunction () payable public {\r\n    \t\trequire(icoEndDate > now);\r\n    \t\trequire(icoStartDate < now);\r\n    \t\tuint ethervalueWEI=msg.value;\r\n    \t\tuint256 token = ethervalueWEI.mul(exchangeRate);    // token amount = weiamount * price\r\n    \t\tuint256 totalTokens = token.add(purchaseBonus(token)); // token + bonus\r\n    \t\ttokensSold = tokensSold.add(totalTokens);\r\n    \t\t_transfer(this, msg.sender, totalTokens);           // makes the token transfer\r\n    \t\tforwardEherToOwner();                               // send ether to owner\r\n\t\t}\r\n        \r\n        \r\n        /**\r\n         * Automatocally forwards ether from smart contract to owner address.\r\n         */\r\n\t\tfunction forwardEherToOwner() internal {\r\n\t\t\towner.transfer(msg.value); \r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n         * Calculates purchase bonus according to the schedule.\r\n         * \r\n         * @param _tokenAmount calculating tokens from amount of tokens \r\n         * \r\n         * @return bonus amount in wei\r\n         * \r\n         */\r\n\t\tfunction purchaseBonus(uint256 _tokenAmount) public view returns(uint256){\r\n\t\t    uint256 first24Hours = icoStartDate + 86400;    //Level 1: First 24 hours = 50% bonus\r\n\t\t    uint256 week1 = first24Hours + 604800;    //Level 2: next 7 days = 40%\r\n\t\t    uint256 week2 = week1 + 604800;           //Level 3: next 7 days = 30%\r\n\t\t    uint256 week3 = week2 + 604800;           //Level 4: next 7 days = 25%\r\n\t\t    uint256 week4 = week3 + 604800;           //Level 5: next 7 days = 20%\r\n\t\t    uint256 week5 = week4 + 604800;           //Level 6: next 7 days = 15%\r\n\t\t    uint256 week6 = week5 + 604800;           //Level 7: next 7 days = 10%\r\n\t\t    uint256 week7 = week6 + 604800;           //Level 8: next 7 days = 5%\r\n\r\n\t\t    if(now < (first24Hours)){ \r\n                return _tokenAmount.div(2);             //50% bonus\r\n\t\t    }\r\n\t\t    else if(now > first24Hours && now < week1){\r\n\t\t        return _tokenAmount.mul(40).div(100);   //40% bonus\r\n\t\t    }\r\n\t\t    else if(now > week1 && now < week2){\r\n\t\t        return _tokenAmount.mul(30).div(100);   //30% bonus\r\n\t\t    }\r\n\t\t    else if(now > week2 && now < week3){\r\n\t\t        return _tokenAmount.mul(25).div(100);   //25% bonus\r\n\t\t    }\r\n\t\t    else if(now > week3 && now < week4){\r\n\t\t        return _tokenAmount.mul(20).div(100);   //20% bonus\r\n\t\t    }\r\n\t\t    else if(now > week4 && now < week5){\r\n\t\t        return _tokenAmount.mul(15).div(100);   //15% bonus\r\n\t\t    }\r\n\t\t    else if(now > week5 && now < week6){\r\n\t\t        return _tokenAmount.mul(10).div(100);   //10% bonus\r\n\t\t    }\r\n\t\t    else if(now > week6 && now < week7){\r\n\t\t        return _tokenAmount.mul(5).div(100);   //5% bonus\r\n\t\t    }\r\n\t\t    else{\r\n\t\t        return 0;\r\n\t\t    }\r\n\t\t}\r\n        \r\n        \r\n        /**\r\n         * Function to check wheter ICO is running or not. \r\n         * \r\n         * @return bool for whether ICO is running or not\r\n         */\r\n        function isICORunning() public view returns(bool){\r\n            if(icoEndDate > now && icoStartDate < now){\r\n                return true;                \r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        \r\n        /**\r\n         * Function to withdraw unsold tokens to owner after ICO is over \r\n         * \r\n         * This can be called only once. \r\n         */\r\n        function withdrawTokens() onlyOwner public {\r\n            require(icoEndDate < now);\r\n            require(withdrawTokensOnlyOnce);\r\n            uint256 tokens = (totalTokensForICO.mul(1 ether)).sub(tokensSold);\r\n            _transfer(this, msg.sender, tokens);\r\n            withdrawTokensOnlyOnce = false;\r\n        }\r\n        \r\n        \r\n        //*********************************************************//\r\n        //------------- Code for the Divident Payment -------------//\r\n        //*********************************************************//\r\n        \r\n        uint256 public dividendStartDate = 1549008000;  // February 1, 2019 8:00:00 AM - GMT\r\n        uint256 public dividendMonthCounter = 0;\r\n        uint256 public monthlyAllocation = 6594333;\r\n        \r\n        //Following mapping which track record whether token holder exist or not\r\n        mapping(address => bool) public tokenHolderExist;\r\n        \r\n        //Array of addresses of token holders\r\n        address[] public tokenHolders;\r\n        \r\n        //Following is necessary to split the iteration of array execution to token transfer\r\n        uint256 public tokenHolderIndex = 0;\r\n        \r\n        \r\n        event DividendPaid(uint256 totalDividendPaidThisRound, uint256 lastAddressIndex);\r\n\r\n        /**\r\n         * Just to check if dividend payment is available to send out \r\n         * \r\n         * This function will be called from the clients side to check if main dividend payment function should be called or not.\r\n         * \r\n         * @return length or array of token holders. If 0, means not available. If more than zero, then the time has come for dividend payment\r\n         */\r\n        function checkDividendPaymentAvailable() public view returns (uint256){\r\n            require(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000))));\r\n            return tokenHolders.length;\r\n        }\r\n        \r\n        /**\r\n         * Main function to call to distribute the dividend payment\r\n         * \r\n         * It will only work every month once, according to dividend schedule\r\n         * \r\n         * It will send only 150 token transfer at a time, to prevent eating out all the gas if token holders are so many.\r\n         * \r\n         * If there are more than 150 token holders, then this function must be called multiple times\r\n         * \r\n         * And it will resume from where it was left over.\r\n         * \r\n         * Dividend percentage is is calculated and distributed from the monthly token allocation.\r\n         * \r\n         * Monthly allocation multiplies every month by 1.5%\r\n         */\r\n        function runDividendPayment() public { \r\n            if(now > (dividendStartDate.add(dividendMonthCounter.mul(2592000)))){\r\n                uint256 totalDividendPaidThisRound = 0;\r\n                //Total token balance hold by all the token holders, is total supply minus - tokens in the contract\r\n                uint256 totalTokensHold = totalSupply.sub(balanceOf[this]);\r\n                for(uint256 i = 0; i < 150; i++){\r\n                    if(tokenHolderIndex < tokenHolders.length){\r\n                        uint256 userTokens = balanceOf[tokenHolders[tokenHolderIndex]];\r\n                        if(userTokens > 0){\r\n                            uint256 dividendPercentage =  userTokens.div(totalTokensHold);\r\n                            uint256 dividend = monthlyAllocation.mul(1 ether).mul(dividendPercentage);\r\n                            _transfer(this, tokenHolders[tokenHolderIndex], dividend);\r\n                            tokenHolderIndex++;\r\n                            totalDividendPaidThisRound = totalDividendPaidThisRound.add(dividend);\r\n                        }\r\n                    }else{\r\n                        //this code will run only once in 30 days when dividendPaymentAvailable is true and all the dividend has been paid\r\n                        tokenHolderIndex = 0;\r\n                        dividendMonthCounter++;\r\n                        monthlyAllocation = monthlyAllocation.add(monthlyAllocation.mul(15).div(1000)); //1.5% multiplication of monthlyAllocation each month\r\n                        break;\r\n                    }\r\n                }\r\n                //final tokenHolderIndex woluld be 0 instead of last index of the array.\r\n                emit DividendPaid(totalDividendPaidThisRound,  tokenHolderIndex);\r\n            }\r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendMonthCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHolderExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkDividendPaymentAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runDividendPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalDividendPaidThisRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastAddressIndex\",\"type\":\"uint256\"}],\"name\":\"DividendPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"GasFund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://92f489d950e7225d34c58dfec38a5ce0597a98adaa9a66d8db2026e6a9921777"}]}