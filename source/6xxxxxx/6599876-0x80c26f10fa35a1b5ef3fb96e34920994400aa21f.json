{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * LockRule.sol\r\n * Rule to lock all tokens on a schedule and define a whitelist of exceptions.\r\n\r\n * More info about MPS : https://github.com/MtPelerin/MtPelerin-share-MPS\r\n\r\n * The unflattened code is available through this github tag:\r\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-2\r\n\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n\r\n * @notice All matters regarding the intellectual property of this code \r\n * @notice or software are subject to Swiss Law without reference to its \r\n * @notice conflicts of law rules.\r\n\r\n * @notice License for each contract is available in the respective file\r\n * @notice or in the LICENSE.md file.\r\n * @notice https://github.com/MtPelerin/\r\n\r\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\r\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\n\r\n\r\n pragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Authority.sol\r\n\r\n/**\r\n * @title Authority\r\n * @dev The Authority contract has an authority address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Authority means to represent a legal entity that is entitled to specific rights\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n * AU01: Message sender must be an authority\r\n */\r\ncontract Authority is Ownable {\r\n\r\n  address authority;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the authority.\r\n   */\r\n  modifier onlyAuthority {\r\n    require(msg.sender == authority, \"AU01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address associated to the authority\r\n   */\r\n  function authorityAddress() public view returns (address) {\r\n    return authority;\r\n  }\r\n\r\n  /** Define an address as authority, with an arbitrary name included in the event\r\n   * @dev returns the authority of the\r\n   * @param _name the authority name\r\n   * @param _address the authority address.\r\n   */\r\n  function defineAuthority(string _name, address _address) public onlyOwner {\r\n    emit AuthorityDefined(_name, _address);\r\n    authority = _address;\r\n  }\r\n\r\n  event AuthorityDefined(\r\n    string name,\r\n    address _address\r\n  );\r\n}\r\n\r\n// File: contracts/interface/IRule.sol\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/rule/LockRule.sol\r\n\r\n/**\r\n * @title LockRule\r\n * @dev LockRule contract\r\n * This rule allow to lock assets for a period of time\r\n * for event such as investment vesting\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n *\r\n * Error messages\r\n * LOR01: definePass() call have failed\r\n * LOR02: startAt must be before or equal to endAt\r\n */\r\ncontract LockRule is IRule, Authority {\r\n\r\n  enum Direction {\r\n    NONE,\r\n    RECEIVE,\r\n    SEND,\r\n    BOTH\r\n  }\r\n\r\n  struct ScheduledLock {\r\n    Direction restriction;\r\n    uint256 startAt;\r\n    uint256 endAt;\r\n    bool scheduleInverted;\r\n  }\r\n\r\n  mapping(address => Direction) individualPasses;\r\n  ScheduledLock lock = ScheduledLock(\r\n    Direction.NONE,\r\n    0,\r\n    0,\r\n    false\r\n  );\r\n\r\n  /**\r\n   * @dev hasSendDirection\r\n   */\r\n  function hasSendDirection(Direction _direction) public pure returns (bool) {\r\n    return _direction == Direction.SEND || _direction == Direction.BOTH;\r\n  }\r\n\r\n  /**\r\n   * @dev hasReceiveDirection\r\n   */\r\n  function hasReceiveDirection(Direction _direction)\r\n    public pure returns (bool)\r\n  {\r\n    return _direction == Direction.RECEIVE || _direction == Direction.BOTH;\r\n  }\r\n\r\n  /**\r\n   * @dev restriction\r\n   */\r\n  function restriction() public view returns (Direction) {\r\n    return lock.restriction;\r\n  }\r\n\r\n  /**\r\n   * @dev scheduledStartAt\r\n   */\r\n  function scheduledStartAt() public view returns (uint256) {\r\n    return lock.startAt;\r\n  }\r\n\r\n  /**\r\n   * @dev scheduledEndAt\r\n   */\r\n  function scheduledEndAt() public view returns (uint256) {\r\n    return lock.endAt;\r\n  }\r\n\r\n  /**\r\n   * @dev lock inverted\r\n   */\r\n  function isScheduleInverted() public view returns (bool) {\r\n    return lock.scheduleInverted;\r\n  }\r\n\r\n  /**\r\n   * @dev isLocked\r\n   */\r\n  function isLocked() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return (lock.startAt <= now && lock.endAt > now)\r\n      ? !lock.scheduleInverted : lock.scheduleInverted;\r\n  }\r\n\r\n  /**\r\n   * @dev individualPass\r\n   */\r\n  function individualPass(address _address)\r\n    public view returns (Direction)\r\n  {\r\n    return individualPasses[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev can the address send\r\n   */\r\n  function canSend(address _address) public view returns (bool) {\r\n    if (isLocked() && hasSendDirection(lock.restriction)) {\r\n      return hasSendDirection(individualPasses[_address]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev can the address receive\r\n   */\r\n  function canReceive(address _address) public view returns (bool) {\r\n    if (isLocked() && hasReceiveDirection(lock.restriction)) {\r\n      return hasReceiveDirection(individualPasses[_address]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev allow authority to provide a pass to an address\r\n   */\r\n  function definePass(address _address, uint256 _lock)\r\n    public onlyAuthority returns (bool)\r\n  {\r\n    individualPasses[_address] = Direction(_lock);\r\n    emit PassDefinition(_address, Direction(_lock));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev allow authority to provide addresses with lock passes\r\n   */\r\n  function defineManyPasses(address[] _addresses, uint256 _lock)\r\n    public onlyAuthority returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      require(definePass(_addresses[i], _lock), \"LOR01\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev schedule lock\r\n   */\r\n  function scheduleLock(\r\n    Direction _restriction,\r\n    uint256 _startAt, uint256 _endAt, bool _scheduleInverted)\r\n    public onlyAuthority returns (bool)\r\n  {\r\n    require(_startAt <= _endAt, \"LOR02\");\r\n    lock = ScheduledLock(\r\n      _restriction,\r\n      _startAt,\r\n      _endAt,\r\n      _scheduleInverted\r\n    );\r\n    emit LockDefinition(\r\n      lock.restriction, lock.startAt, lock.endAt, lock.scheduleInverted);\r\n  }\r\n\r\n  /**\r\n   * @dev validates an address\r\n   */\r\n  function isAddressValid(address /*_address*/) public view returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev validates a transfer of ownership\r\n   */\r\n  function isTransferValid(address _from, address _to, uint256 /* _amount */)\r\n    public view returns (bool)\r\n  {\r\n    return (canSend(_from) && canReceive(_to));\r\n  }\r\n\r\n  event LockDefinition(\r\n    Direction restriction,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    bool scheduleInverted\r\n  );\r\n  event PassDefinition(address _address, Direction pass);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"scheduledStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isScheduleInverted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scheduledEndAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canSend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"definePass\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"defineManyPasses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"}],\"name\":\"hasSendDirection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTransferValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restriction\",\"type\":\"uint8\"},{\"name\":\"_startAt\",\"type\":\"uint256\"},{\"name\":\"_endAt\",\"type\":\"uint256\"},{\"name\":\"_scheduleInverted\",\"type\":\"bool\"}],\"name\":\"scheduleLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canReceive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"}],\"name\":\"hasReceiveDirection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"individualPass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddressValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"defineAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"restriction\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"startAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheduleInverted\",\"type\":\"bool\"}],\"name\":\"LockDefinition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pass\",\"type\":\"uint8\"}],\"name\":\"PassDefinition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AuthorityDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LockRule","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1f712e9dff61460e0127a4a1f5d3662d216953bc421acfb25d035c986a6c95d"}]}