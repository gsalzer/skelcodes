{"status":"1","message":"OK","result":[{"SourceCode":"contract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n  // mitigate short address attack\r\n  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n  // TODO: doublecheck implication of >= compared to ==\r\n  modifier onlyPayloadSize(uint numWords) {\r\n     assert(msg.data.length >= numWords * 32 + 4);\r\n     _;\r\n  }\r\n}\r\n\r\ncontract Token { // ERC20 standard\r\n    function balanceOf(address _owner) public  view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value)  returns (bool success);\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token, SafeMath {\r\n    uint256 public totalSupply;\r\n    // TODO: update tests to expect throw\r\n    function transfer(address _to, uint256 _value) public  onlyPayloadSize(2) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    // TODO: update tests to expect throw\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function balanceOf(address _owner) view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    mapping (address => uint256) public  balances;\r\n    mapping (address => mapping (address => uint256)) public  allowed;\r\n}\r\n\r\n contract STCVesting is SafeMath {\r\n\r\n      address public beneficiary;\r\n      uint256 public fundingEndTime;\r\n\r\n      bool private initClaim = false; // state tracking variables\r\n\r\n      uint256 public firstRelease; // vesting times\r\n      bool private firstDone = false;\r\n      uint256 public secondRelease;\r\n      bool private secondDone = false;\r\n      uint256 public thirdRelease;\r\n      bool private thirdDone = false;\r\n      uint256 public fourthRelease;\r\n\r\n      Token public ERC20Token; // ERC20 basic token contract to hold\r\n\r\n      enum Stages {\r\n          initClaim,\r\n          firstRelease,\r\n          secondRelease,\r\n          thirdRelease,\r\n          fourthRelease\r\n      }\r\n\t\r\n      Stages public stage = Stages.initClaim;\r\n\r\n      modifier atStage(Stages _stage) {\r\n          if(stage == _stage) _;\r\n      }\r\n\r\n      function STCVesting(address _token, uint256 fundingEndTimeInput) public  {\r\n          require(_token != address(0));\r\n          beneficiary = msg.sender;\r\n          fundingEndTime = fundingEndTimeInput;\r\n          ERC20Token = Token(_token);\r\n      }\r\n\r\n      function changeBeneficiary(address newBeneficiary) external {\r\n          require(newBeneficiary != address(0));\r\n          require(msg.sender == beneficiary);\r\n          beneficiary = newBeneficiary;\r\n      }\r\n\r\n      function updatefundingEndTime(uint256 newfundingEndTime) public  {\r\n          require(msg.sender == beneficiary);\r\n          require(now < fundingEndTime);\r\n          require(now < newfundingEndTime);\r\n          fundingEndTime = newfundingEndTime;\r\n      }\r\n\r\n      function checkBalance() public  view returns (uint256 tokenBalance) {\r\n          return ERC20Token.balanceOf(this);\r\n      }\r\n\r\n      // in total 13% of STC tokens will be sent to this contract\r\n      // EXPENSE ALLOCATION: 4.5%       | TEAM ALLOCATION: 8.5% (vest over 2 years)\r\n      //   1.5% - Marketing             | initalPayment: 2.5%\r\n      //   1.5% - Operations            | firstRelease:  2.5%\r\n      //   0.5% - Advisors              | secondRelease: 1.5%\r\n      //   1.0% - Boutnty               | thirdRelease:  1.5%\r\n      //                                | fourthRelease: 0.5%\r\n      // initial claim is tot expenses + initial team payment\r\n      // initial claim is thus (4.5 + 2.5)/13 = 53.846153846% of STC tokens sent here\r\n      // each other release (for team) of tokens is sent here\r\n\t  \r\n\t  \r\n\t  \r\n\r\n      function claim() external {\r\n          require(msg.sender == beneficiary);\r\n          require(now > fundingEndTime);\r\n          uint256 balance = ERC20Token.balanceOf(this);\r\n          // in reverse order so stages changes don't carry within one claim\r\n          fourth_release(balance);\r\n          third_release(balance);\r\n          second_release(balance);\r\n          first_release(balance);\r\n          init_claim(balance);\r\n      }\r\n\r\n      function nextStage() private {\r\n          stage = Stages(uint256(stage) + 1);\r\n      }\r\n\r\n      function init_claim(uint256 balance) private atStage(Stages.initClaim) {\r\n          firstRelease = now + 26 weeks; // assign 4 claiming times\r\n          secondRelease = firstRelease + 26 weeks;\r\n          thirdRelease = secondRelease + 26 weeks;\r\n          fourthRelease = thirdRelease + 26 weeks;\r\n          uint256 amountToTransfer = safeMul(balance, 53846153846) / 100000000000;\r\n          ERC20Token.transfer(beneficiary, amountToTransfer); // now 46.153846154% tokens left\r\n          nextStage();\r\n      }\r\n      function first_release(uint256 balance) private atStage(Stages.firstRelease) {\r\n          require(now > firstRelease);\r\n          uint256 amountToTransfer = balance / 4;\r\n          ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n          nextStage();\r\n      }\r\n      function second_release(uint256 balance) private atStage(Stages.secondRelease) {\r\n          require(now > secondRelease);\r\n          uint256 amountToTransfer = balance / 3;\r\n          ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n          nextStage();\r\n      }\r\n      function third_release(uint256 balance) private atStage(Stages.thirdRelease) {\r\n          require(now > thirdRelease);\r\n          uint256 amountToTransfer = balance / 2;\r\n          ERC20Token.transfer(beneficiary, amountToTransfer); // send 25 % of team releases\r\n          nextStage();\r\n      }\r\n      function fourth_release(uint256 balance) private atStage(Stages.fourthRelease) {\r\n          require(now > fourthRelease);\r\n          ERC20Token.transfer(beneficiary, balance); // send remaining 25 % of team releases\r\n      }\r\n\r\n      function claimOtherTokens(address _token) external {\r\n          require(msg.sender == beneficiary);\r\n          require(_token != address(0));\r\n          Token token = Token(_token);\r\n          require(token != ERC20Token);\r\n          uint256 balance = token.balanceOf(this);\r\n          token.transfer(beneficiary, balance);\r\n       }\r\n\r\n   }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfundingEndTime\",\"type\":\"uint256\"}],\"name\":\"updatefundingEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"fundingEndTimeInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"STCVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083dc8423170e95ee18b770bbdd6b3becb73c9c30000000000000000000000000000000000000000000000000000000005bc3d880","Library":"","SwarmSource":"bzzr://f6552176edd00724da93bd32a5326fdd9f5b30de5f4ac8028ec24251fcc3b49c"}]}