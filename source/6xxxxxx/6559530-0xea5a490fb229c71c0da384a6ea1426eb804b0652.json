{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2018 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * Zitetags - A Zeronet registrar, for managing Namecoin (.bit) addresses used \r\n *            by Zeronet users/clients to simplify addressing of requested \r\n *            zites (0net websites), by NOT having to enter the full \r\n *            Bitcoin (address) public key.\r\n * \r\n *            For example, D14na's zite has a Bitcoin public key of\r\n *            [ 1D14naQY4s65YR6xrJDBHk9ufj2eLbK49C ], but can be referenced \r\n *            using any of the following zitetag variations:\r\n *                1. d14na\r\n *                2. #d14na\r\n *                3. d14na.bit\r\n * \r\n *            NOTE: The following prefixes may sometimes be applied:\r\n *                      1. zero://\r\n *                      2. http://127.0.0.1:43110/\r\n *                      3. https://0net.io/\r\n *               \r\n *\r\n * Version 18.10.21\r\n *\r\n * Web    : https://d14na.org\r\n * Email  : support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice Zitetags Registrar Contract.\r\n *\r\n * @dev Zitetags are Namecoin (.bit) addresses that are used\r\n *      (similar to Twitter hashtags and traditional domain names) as a\r\n *      convenient alternative to users/clients when entering a \r\n *      zite's Bitcoin public key.\r\n */\r\ncontract Zitetags is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize version number. */\r\n    uint public version;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface public zer0netDb;\r\n\r\n    /* Initialize zitetag update notification/log event. */\r\n    event ZitetagUpdate(\r\n        bytes32 indexed zitetagId, \r\n        string zitetag, \r\n        string info\r\n    );\r\n\r\n    /* Constructor. */\r\n    constructor() public {\r\n        /* Set the version number. */\r\n        version = now;\r\n\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.zitetags'))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the registration info for the given zitetag.\r\n     * \r\n     * @dev Use the calculated hash to query the eternal database \r\n     *      for the `_zitetag` info.\r\n     */\r\n    function getInfo(string _zitetag) external view returns (string) {\r\n        /* Calculate the zitetag's hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('zitetag.', _zitetag));\r\n        \r\n        /* Retrieve the zitetag's info. */\r\n        string memory info = zer0netDb.getString(hash);\r\n\r\n        /* Return info. */\r\n        return (info);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the zitetag's registration info.\r\n     * \r\n     * @dev Calculate the `_zitetag` hash and use it to store the\r\n     *      registration details in the eternal database.\r\n     * \r\n     *      NOTE: JSON will be the object type for registration details.\r\n     */\r\n    function setInfo(\r\n        string _zitetag, \r\n        string _info\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Calculate the zitetag's hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('zitetag.', _zitetag));\r\n        \r\n        /* Set the zitetag's info. */\r\n        zer0netDb.setString(hash, _info);\r\n\r\n        /* Emit event notification. */\r\n        emit ZitetagUpdate(hash, _zitetag, _info);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address tokenAddress, uint tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_zitetag\",\"type\":\"string\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zer0netDb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zitetag\",\"type\":\"string\"},{\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"zitetagId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"zitetag\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"ZitetagUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Zitetags","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://26c7d590f3ecfec540658875132a533b3a48617428f4501d849e43e68534f3da"}]}