{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract RockPaperScissors {\r\n\r\n    //Возможные выборы игрока\r\n    enum Choice { Null, Rock, Paper, Scissors }\r\n\r\n    //Игра, подразумевается только 2 участника\r\n    struct Game {\r\n        address owner;\r\n        address opponent;\r\n        \r\n        Choice ownerChoice;\r\n        Choice opponentChoice;\r\n    }\r\n    \r\n    uint gamecounter = 0;\r\n    mapping(uint => Game) games;\r\n    \r\n    //Событие на создание игры\r\n    event NewGame(uint id);\r\n    \r\n    //Если игроки сделали одинаковый выбор, то срабатывает данное событие,\r\n    //что означает, что игра сброшена\r\n    event Refresh(uint id);\r\n    \r\n    //Создание игры. Человек, который создает игру, сразу указывает своего оппонента \r\n    function newGame(address _opponent) external returns (uint) {\r\n        uint gameid = gamecounter++;\r\n        games[gameid] = Game(msg.sender, _opponent, Choice.Null, Choice.Null);\r\n        \r\n        emit NewGame(gameid);\r\n        return gameid;\r\n    }\r\n    \r\n    //Просмотр игры по уникальному номеру\r\n    function getGame(uint _id) external view returns (address, address, Choice, Choice){\r\n        Game storage game = games[_id];\r\n        return (\r\n            game.owner,\r\n            game.opponent,\r\n            game.ownerChoice,\r\n            game.opponentChoice\r\n        );\r\n    }\r\n    \r\n    //Сделать свой выбор в заданной игре\r\n    //Если в рамках игры участники делают одинаковый выбор, \r\n    //то игра выборы игроков сбрасываются на начальный уровень\r\n    function move(uint _gameid, Choice _choice) external {\r\n        Game storage game = games[_gameid];\r\n        \r\n        require(game.owner == msg.sender || game.opponent == msg.sender);\r\n        \r\n        if(msg.sender == game.owner){\r\n            require(game.ownerChoice == Choice.Null);\r\n            game.ownerChoice = _choice;\r\n        }\r\n        \r\n        if(msg.sender == game.opponent){\r\n            require(game.opponentChoice == Choice.Null);\r\n            game.opponentChoice = _choice;\r\n        }\r\n        \r\n        if(game.opponentChoice == game.ownerChoice){\r\n            game.opponentChoice = Choice.Null;\r\n            game.ownerChoice = Choice.Null;\r\n            emit Refresh(_gameid);\r\n        }\r\n    }\r\n    \r\n    //Просмотр победителя в заданной игре\r\n    function getWinner(uint _gameid) external view returns (address) {\r\n       Game storage game = games[_gameid];\r\n       \r\n       if(game.ownerChoice == Choice.Null || game.opponentChoice == Choice.Null){\r\n           return address(0);\r\n       }\r\n       \r\n       if(game.ownerChoice == Choice.Rock){\r\n           if(game.opponentChoice == Choice.Paper){\r\n               return game.opponent;\r\n           }\r\n           if(game.opponentChoice == Choice.Scissors){\r\n               return game.owner;\r\n           }\r\n       }\r\n       \r\n       if(game.ownerChoice == Choice.Paper){\r\n           if(game.opponentChoice == Choice.Rock){\r\n               return game.owner;\r\n           }\r\n           if(game.opponentChoice == Choice.Scissors){\r\n               return game.opponent;\r\n           }\r\n       }\r\n       \r\n       if(game.ownerChoice == Choice.Scissors){\r\n           if(game.opponentChoice == Choice.Rock){\r\n               return game.opponent;\r\n           }\r\n           if(game.opponentChoice == Choice.Paper){\r\n               return game.owner;\r\n           }\r\n       }\r\n       \r\n       return address(0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameid\",\"type\":\"uint256\"},{\"name\":\"_choice\",\"type\":\"uint8\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opponent\",\"type\":\"address\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Refresh\",\"type\":\"event\"}]","ContractName":"RockPaperScissors","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5a4501f3c3c1e16d35ded34c2f19afb269b42c1cc8a42e2488662244425e253"}]}