{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address _beneficiary,\r\n    uint256 _releaseTime\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(address(this));\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\ncontract TokenTimelockPool is Claimable {\r\n  using SafeERC20 for ERC20Basic;\r\n  using SafeMath for uint256;\r\n\r\n  // ERC20 token being held\r\n  ERC20Basic public token;\r\n\r\n  // Timestamp (in seconds) when tokens can be released\r\n  uint256 public releaseDate;\r\n\r\n  // Maximum amount of tokens to be distributed\r\n  uint256 public totalFunds;\r\n\r\n  // Tokens already distributed\r\n  uint256 public distributedTokens;\r\n\r\n  // List of beneficiaries added to the pool\r\n  address[] public beneficiaries;\r\n\r\n  // Mapping of beneficiary to TokenTimelock contracts addresses\r\n  mapping(address => address[]) public beneficiaryDistributionContracts;\r\n\r\n  event BeneficiaryAdded(\r\n    address indexed beneficiary,\r\n    address timelock,\r\n    uint256 amount\r\n  );\r\n  event Reclaim(uint256 amount);\r\n\r\n  modifier validAddress(address _addr) {\r\n    require(_addr != address(0));\r\n    require(_addr != address(this));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Contract constructor.\r\n   * @param _token instance of an ERC20 token.\r\n   * @param _totalFunds Maximum amount of tokens to be distributed among\r\n   *        beneficiaries.\r\n   * @param _releaseDate Timestamp (in seconds) when tokens can be released.\r\n   */\r\n  constructor(\r\n    ERC20Basic _token,\r\n    uint256 _totalFunds,\r\n    uint256 _releaseDate\r\n  ) public validAddress(_token) {\r\n    require(_totalFunds > 0);\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseDate > block.timestamp);\r\n\r\n    token = _token;\r\n    totalFunds = _totalFunds;\r\n    distributedTokens = 0;\r\n    releaseDate = _releaseDate;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a beneficiary that will be allowed to extract the tokens after\r\n   *         the release date.\r\n   * @notice Example:\r\n             addBeneficiary(`0x123..`, 100)\r\n             Will create a TokenTimelock instance on which if the `release()` method\r\n             is called after the release date (specified in this contract constructor),\r\n             the amount of tokens (100) will be transferred to the\r\n             beneficiary (`0x123..`).\r\n   * @dev The `msg.sender` must be the owner of the contract.\r\n   * @param _beneficiary Beneficiary that will receive the tokens after the\r\n   * release date.\r\n   * @param _amount of tokens to be released.\r\n   * @return address for the new TokenTimelock contract instance.\r\n   */\r\n  function addBeneficiary(\r\n    address _beneficiary,\r\n    uint256 _amount\r\n  ) public onlyOwner validAddress(_beneficiary) returns (address) {\r\n    require(_beneficiary != owner);\r\n    require(_amount > 0);\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp < releaseDate);\r\n\r\n    // Check there are sufficient funds and actual token balance.\r\n    require(SafeMath.sub(totalFunds, distributedTokens) >= _amount);\r\n    require(token.balanceOf(address(this)) >= _amount);\r\n\r\n    if (!beneficiaryExists(_beneficiary)) {\r\n      beneficiaries.push(_beneficiary);\r\n    }\r\n\r\n    // Bookkepping of distributed tokens\r\n    distributedTokens = distributedTokens.add(_amount);\r\n\r\n    address tokenTimelock = new TokenTimelock(\r\n      token,\r\n      _beneficiary,\r\n      releaseDate\r\n    );\r\n\r\n    // Bookkeeping of distributions contracts per beneficiary\r\n    beneficiaryDistributionContracts[_beneficiary].push(tokenTimelock);\r\n\r\n    // Assign the tokens to the beneficiary\r\n    token.safeTransfer(tokenTimelock, _amount);\r\n\r\n    emit BeneficiaryAdded(_beneficiary, tokenTimelock, _amount);\r\n    return tokenTimelock;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers the remaining tokens that were not locked for any\r\n   *         beneficiary to the owner of this contract.\r\n   * @dev The `msg.sender` must be the owner of the contract.\r\n   * @return true if tokens were reclaimed successfully, reverts otherwise.\r\n   */\r\n  function reclaim() public onlyOwner returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp > releaseDate);\r\n    uint256 reclaimableAmount = token.balanceOf(address(this));\r\n\r\n    token.safeTransfer(owner, reclaimableAmount);\r\n    emit Reclaim(reclaimableAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets an array of all the distribution contracts for a given beneficiary.\r\n   * @param _beneficiary address of the beneficiary to whom tokens will be transferred.\r\n   * @return List of TokenTimelock addresses.\r\n   */\r\n  function getDistributionContracts(\r\n    address _beneficiary\r\n  ) public view validAddress(_beneficiary) returns (address[]) {\r\n    return beneficiaryDistributionContracts[_beneficiary];\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a beneficiary was added to the pool at least once.\r\n   * @param _beneficiary address of the beneficiary to whom tokens will be transferred.\r\n   * @return true if beneficiary exists, false otherwise.\r\n   */\r\n  function beneficiaryExists(\r\n    address _beneficiary\r\n  ) internal view returns (bool) {\r\n    return beneficiaryDistributionContracts[_beneficiary].length > 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getDistributionContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryDistributionContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_totalFunds\",\"type\":\"uint256\"},{\"name\":\"_releaseDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timelock\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reclaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenTimelockPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000281d477239f0ac790270bda6800bc912d1a3532a00000000000000000000000000000000000000000000000018fae27693b40000000000000000000000000000000000000000000000000000000000005c067a50","Library":"","SwarmSource":"bzzr://e8acc6270008541ca5ef57187ad0cf2feb2a3ce75137c04925e29ae910628f5f"}]}