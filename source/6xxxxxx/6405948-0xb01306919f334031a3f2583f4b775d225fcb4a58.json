{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BikeCrowdsale.sol\r\n\r\n//import \"./BlockchainBikeToken.sol\";\r\ncontract BikeCrowdsale is Ownable, StandardToken {\r\n    string public constant name = \"Blockchain based Bike Token\"; // name of token\r\n    string public constant symbol = \"BBT\"; // symbol of token\r\n    uint8 public constant decimals = 18;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Investor {\r\n        uint256 weiDonated;\r\n        uint256 tokensGiven;\r\n        uint256 freeTokens;\r\n    }\r\n\r\n    mapping(address => Investor) participants;\r\n\r\n    uint256 public totalSupply= 5*10**9 * 10**18; // total supply \r\n    uint256 public hardCap = 1000000 * 10**18; // 1 million ether = 1 m * 10^18 Wei\r\n    uint256 public minimalGoal = 1000 * 10**18; // 1k ether = 1k * 10^18 Wei\r\n    uint256 public weiToToken = 5000; // 1 ether = 5000 tokens\r\n    uint256 public totalSoldTokens = 0;\r\n    uint256 public openingTime = 1537372800; // date -j -f \"%Y-%m-%d %H:%M:%S\" \"2018-09-20 00:00:00\" \"+%s\"\r\n    uint256 public closingTime = 1568044800; // date -j -f \"%Y-%m-%d %H:%M:%S\" \"2019-09-10 00:00:00\" \"+%s\";\r\n\r\n    uint256 public totalCollected; // unit: Wei\r\n\r\n    bool public ICOstatus = true; // true - active, false - inactive\r\n    bool public hardcapReached = false; // true - the cap is reached, false - the cap is not reached\r\n    bool public minimalgoalReached = false; // true - the goal is reached, false - the goal is not reached\r\n    bool public isRefundable = true; // can refund or not\r\n\r\n    address public forSale; // fund address for sale \r\n    address public ecoSystemFund; // fund address for eco-system\r\n    address public founders; // fund address for founders\r\n    address public team; // fund address for team\r\n    address public advisers; // fund address for advisors\r\n    address public bounty; // fund address for bountry\r\n    address public affiliate; // fund address for affiliate\r\n\r\n    address private crowdsale;\r\n \r\n    //BlockchainBikeToken public token;\r\n\r\n\r\n  constructor(\r\n    //address _token\r\n    ) public {\r\n\r\n    require(hardCap > minimalGoal);\r\n    require(openingTime < closingTime);\r\n    //token = BlockchainBikeToken(_token);\r\n    crowdsale = address(this);\r\n\r\n    forSale = 0xf6ACFDba39D8F786D0D2781A1D20C82E47adF8b7;\r\n    ecoSystemFund = 0x5A77aAE15258a2a4445C701d63dbE74016F7e629;\r\n    founders = 0xA80A449514541aeEcd3e17BECcC74a86e3de6bfA;\r\n    team = 0x309d62B8eaDF717b76296326CA35bB8f2D996B1a;\r\n    advisers = 0xc4319217ca328F7518c463D6D3e78f68acc5B076;\r\n    bounty = 0x3605e4E99efFaB70D0C84aA2beA530683824246f;\r\n    affiliate = 0x1709365100eD9B7c417E0dF0fdc32027af1DAff1;\r\n\r\n    /*forSale = _forSale;\r\n    ecoSystemFund = _ecoSystemFund;\r\n    founders = _founders;\r\n    team = _team;\r\n    advisers = _advisers;\r\n    bounty = _bountry;\r\n    affiliate = _affiliate;*/\r\n\r\n    balances[team] = totalSupply * 28 / 100;\r\n    balances[founders] = totalSupply * 12 / 100;\r\n    balances[bounty] = totalSupply * 1 / 100;\r\n    balances[affiliate] = totalSupply * 1 / 100;\r\n    balances[advisers] = totalSupply * 1 / 100;\r\n    balances[ecoSystemFund] = totalSupply * 5 / 100;\r\n    balances[forSale] = totalSupply * 52 / 100;\r\n\r\n    emit Transfer(0x0, team, balances[team]);\r\n    emit Transfer(0x0, founders, balances[founders]);\r\n    emit Transfer(0x0, bounty, balances[bounty]);\r\n    emit Transfer(0x0, affiliate, balances[affiliate]);\r\n    emit Transfer(0x0, advisers, balances[advisers]);\r\n    emit Transfer(0x0, ecoSystemFund, balances[ecoSystemFund]);\r\n    emit Transfer(0x0, forSale, balances[forSale]);\r\n  }\r\n\r\n\r\n  // returns address of crowdsale token, The token must be ERC20-compliant\r\n  /*function getToken() view public onlyOwner() returns(address) {\r\n    return address(token);\r\n  }*/\r\n\r\n\r\n  function () external payable {\r\n\r\n    require(msg.value >= 0.1 ether); // minimal ether to buy\r\n    require(now >= openingTime);\r\n    require(now <= closingTime);\r\n    require(hardCap > totalCollected);\r\n    require(isICOActive());\r\n    require(!hardcapReached);\r\n\r\n    sellTokens(msg.sender, msg.value); // the msg.value is in wei\r\n  }\r\n\r\n\r\n  function sellTokens(address _recepient, uint256 _value) private\r\n  {\r\n    require(_recepient != 0x0); // 0x0 is meaning to destory(burn)\r\n    require(now >= openingTime && now <= closingTime);\r\n\r\n    // the unit of the msg.value is in wei \r\n\r\n    // if reaching the hard cap, we allow the user to pay partial ethers and get partial tokensSold\r\n    // then, we will refund reset ethers to the buyer's address\r\n    uint256 newTotalCollected = totalCollected + _value; // unit: wei\r\n\r\n    if (hardCap <= newTotalCollected) {\r\n        hardcapReached = true; // reach the hard cap\r\n        ICOstatus = false;  // close the ICO\r\n        isRefundable = false; // can't refund\r\n        minimalgoalReached = true;\r\n    }\r\n\r\n    totalCollected = totalCollected + _value; // unit: wei\r\n\r\n    if (minimalGoal <= newTotalCollected) {\r\n        minimalgoalReached = true; // reach the minimal goal (soft cap)\r\n        isRefundable = false; // can't refund\r\n    }\r\n\r\n    uint256 tokensSold = _value * weiToToken; // token = eth * rate\r\n    uint256 bonusTokens = 0;\r\n    bonusTokens = getBonusTokens(tokensSold);\r\n    if (bonusTokens > 0) {\r\n        tokensSold += bonusTokens;\r\n    }\r\n\r\n        require(balances[forSale] > tokensSold);\r\n        balances[forSale] -= tokensSold;\r\n        balances[_recepient] += tokensSold;\r\n        emit Transfer(forSale, _recepient, tokensSold);\r\n\r\n    participants[_recepient].weiDonated += _value;\r\n    participants[_recepient].tokensGiven += tokensSold;\r\n\r\n    totalSoldTokens += tokensSold;    // total sold tokens\r\n  }\r\n\r\n\r\n  function isICOActive() private returns (bool) {\r\n    if (now >= openingTime  && now <= closingTime && !hardcapReached) {\r\n        ICOstatus = true;\r\n    } else {\r\n        ICOstatus = false;\r\n    }\r\n    return ICOstatus;\r\n  }\r\n\r\n\r\n  function refund() public {\r\n    require(now >= openingTime);\r\n    require(now <= closingTime);\r\n    require(isRefundable);\r\n\r\n    uint256 weiDonated = participants[msg.sender].weiDonated;\r\n    uint256 tokensGiven = participants[msg.sender].tokensGiven;\r\n\r\n    require(weiDonated > 0);\r\n    require(tokensGiven > 0);\r\n\r\n    require(forSale != msg.sender);\r\n    require(balances[msg.sender] >= tokensGiven); \r\n\r\n    balances[forSale] += tokensGiven;\r\n    balances[msg.sender] -= tokensGiven;\r\n    emit Transfer(msg.sender, forSale, tokensGiven);\r\n\r\n    // if refundSaleTokens fail, it will throw\r\n    msg.sender.transfer(weiDonated);    // unit: wei, refund ether to buyer\r\n\r\n    participants[msg.sender].weiDonated = 0;    // set balance of wei to 0\r\n    participants[msg.sender].tokensGiven = 0;   // set balance of token to 0\r\n    participants[msg.sender].freeTokens = 0; // set free token to 0\r\n \r\n    // re-calcuate total tokens & total wei of funding\r\n    totalSoldTokens -= tokensGiven;\r\n    totalCollected -= weiDonated;\r\n  }\r\n\r\n\r\n  function transferICOFundingToWallet(uint256 _value) public onlyOwner() {\r\n        forSale.transfer(_value); // unit wei\r\n  }\r\n\r\n  function getBonusTokens(uint256 _tokensSold) view public returns (uint256) {\r\n\r\n    uint256 bonusTokens = 0;\r\n    uint256 bonusBeginTime = openingTime; // Sep-08\r\n    // date -j -f \"%Y-%m-%d %H:%M:%S\" \"2018-09-10 00:00:00\" \"+%s\"\r\n    if (now >= bonusBeginTime && now <= bonusBeginTime+86400*7) {\r\n        bonusTokens = _tokensSold * 20 / 100;\r\n    } else if (now > bonusBeginTime+86400*7 && now <= bonusBeginTime+86400*14) {\r\n        bonusTokens = _tokensSold * 15 / 100;\r\n    } else if (now > bonusBeginTime+86400*14 && now <= bonusBeginTime+86400*21) {\r\n        bonusTokens = _tokensSold * 10 / 100;\r\n    } else if (now > bonusBeginTime+86400*21 && now <= bonusBeginTime+86400*30) {\r\n        bonusTokens = _tokensSold * 5 / 100;\r\n    }\r\n\r\n    uint256 newTotalSoldTokens = _tokensSold + bonusTokens;\r\n    uint256 hardCapTokens = hardCap * weiToToken;\r\n    if (hardCapTokens < newTotalSoldTokens) {\r\n        bonusTokens = 0;\r\n    }\r\n\r\n    return bonusTokens;\r\n  }\r\n\r\n    function getCrowdsaleStatus() view public onlyOwner() returns (bool,bool,bool,bool) {\r\n        return (ICOstatus,isRefundable,minimalgoalReached,hardcapReached);\r\n    }\r\n\r\n  function getCurrentTime() view public onlyOwner() returns (uint256) {\r\n    return now;\r\n  }\r\n\r\n  function sendFreeTokens(address _to, uint256 _value) public onlyOwner() {\r\n    require(_to != 0x0); // 0x0 is meaning to destory(burn)\r\n    require(participants[_to].freeTokens <= 1000); // maximum total free tokens per user\r\n    require(_value <= 100); // maximum free tokens per time\r\n    require(_value > 0);\r\n    require(forSale != _to);\r\n    require(balances[forSale] > _value);\r\n\r\n    participants[_to].freeTokens += _value;\r\n    participants[_to].tokensGiven += _value;\r\n    totalSoldTokens += _value;    // total sold tokens\r\n\r\n    balances[forSale] -= _value;\r\n    balances[_to] += _value;\r\n\r\n    emit Transfer(forSale, _to, _value);\r\n  }\r\n\r\n  // get free tokens in user's account\r\n  function getFreeTokensAmountOfUser(address _to) view public onlyOwner() returns (uint256) {\r\n    require(_to != 0x0); // 0x0 is meaning to destory(burn)\r\n    uint256 _tokens = 0;\r\n    _tokens = participants[_to].freeTokens;\r\n    return _tokens;\r\n  }\r\n\r\n  function getBalanceOfAccount(address _to) view public onlyOwner() returns (uint256, uint256) {\r\n    return (participants[_to].weiDonated, participants[_to].tokensGiven);\r\n  }\r\n\r\n    function transferFundsTokens(address _from, address _to, uint256 _value) public onlyOwner() {\r\n        require(_from == team || _from == founders || _from == bounty || _from == affiliate || _from == advisers || _from == ecoSystemFund || _from == forSale);\r\n        require(_to == team || _to == founders || _to == bounty || _to == affiliate || _to == advisers || _to == ecoSystemFund || _to == forSale);\r\n        require(_value > 0);\r\n        require(balances[_from] >= _value);\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoSystemFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalgoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferICOFundingToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"getBonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getBalanceOfAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendFreeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getFreeTokensAmountOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFundsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BikeCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2fad24f12062643514c12749d9db604076bdaabf0f5bd5efeb406e38286082cc"}]}