{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20_Interface {\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tuint public decimals;\r\n\tstring public name;\r\n}\r\n\r\ncontract nonNativeToken_Interface is ERC20_Interface {\r\n\tfunction makeDeposit(address deposit_to, uint256 amount) public returns (bool success);\r\n\tfunction makeWithdrawal(address withdraw_from, uint256 amount) public returns (bool success);\r\n}\r\n\r\ncontract EthWrapper_Interface is nonNativeToken_Interface {\r\n\tfunction wrapperChanged() public payable;\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b > 0);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract ERC20_Token is ERC20_Interface{\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\tuint256 public totalSupply;\r\n\tuint256 public decimals;\r\n\tstring public name;\r\n\tstring public symbol;\r\n\r\n\tfunction ERC20_Token(string _name,string _symbol,uint256 _decimals) public{\r\n\t\tname=_name;\r\n\t\tsymbol=_symbol;\r\n\t\tdecimals=_decimals;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\tif (balances[msg.sender] >= _value) {\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\treturn true;\r\n\t\t}else return false;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\tif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n\t\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t\tTransfer(_from, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}else return false;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\ncontract nonNativeToken is ERC20_Token, nonNativeToken_Interface{\r\n\taddress public exchange;\r\n\tmodifier onlyExchange{\r\n\t\trequire(msg.sender==exchange);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction nonNativeToken(string _name, string _symbol, uint256 _decimals) ERC20_Token(_name, _symbol, _decimals) public{\r\n\t\texchange=msg.sender;\r\n\t}\r\n\r\n\tfunction makeDeposit(address deposit_to, uint256 amount) public onlyExchange returns (bool success){\r\n\t\tbalances[deposit_to] = balances[deposit_to].add(amount);\r\n\t\ttotalSupply = totalSupply.add(amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction makeWithdrawal(address withdraw_from, uint256 amount) public onlyExchange returns (bool success){\r\n\t\tif(balances[withdraw_from]>=amount) {\r\n\t\t\tbalances[withdraw_from] = balances[withdraw_from].sub(amount);\r\n\t\t\ttotalSupply = totalSupply.sub(amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\tif(balances[_from] >= _value) {\r\n\t\t\tif(msg.sender == exchange) {\r\n\t\t\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\t\tTransfer(_from, _to, _value);\r\n\t\t\t\treturn true;\r\n\t\t\t}else if(allowed[_from][msg.sender] >= _value) {\r\n\t\t\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\t\t\tTransfer(_from, _to, _value);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\tif(_spender==exchange){\r\n\t\t\treturn balances[_owner];\r\n\t\t}else{\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract EthWrapper is nonNativeToken, EthWrapper_Interface{\r\n\tbool isWrapperChanged;\r\n\r\n\tfunction EthWrapper(string _name, string _symbol, uint256 _decimals) nonNativeToken(_name, _symbol, _decimals) public{\r\n\t\tisWrapperChanged=false;\r\n\t}\r\n\r\n\tmodifier notWrapper(){\r\n\t\trequire(isWrapperChanged);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction wrapperChanged() public payable onlyExchange{\r\n\t\trequire(!isWrapperChanged);\r\n\t\tisWrapperChanged=true;\r\n\t}\r\n\r\n\tfunction withdrawEther(uint _amount) public notWrapper{\r\n\t\trequire(balances[msg.sender]>=_amount);\r\n\t\tbalances[msg.sender]=balances[msg.sender].sub(_amount);\r\n\t\tmsg.sender.transfer(_amount);\r\n\t}\r\n}\r\n\r\ncontract AdminAccess {\r\n\tmapping(address => uint8) public admins;\r\n\tevent AdminAdded(address admin,uint8 access);\r\n\tevent AdminAccessChanged(address admin, uint8 old_access, uint8 new_access);\r\n\tevent AdminRemoved(address admin);\r\n\tmodifier onlyAdmin(uint8 accessLevel){\r\n\t\trequire(admins[msg.sender]>=accessLevel);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction AdminAccess() public{\r\n\t\tadmins[msg.sender]=2;\r\n\t}\r\n\r\n\tfunction addAdmin(address _admin, uint8 _access) public onlyAdmin(2) {\r\n\t\trequire(admins[_admin] == 0);\r\n\t\trequire(_access > 0);\r\n\t\tAdminAdded(_admin,_access);\r\n\t\tadmins[_admin]=_access;\r\n\t}\r\n\r\n\tfunction changeAccess(address _admin, uint8 _access) public onlyAdmin(2) {\r\n\t\trequire(admins[_admin] > 0);\r\n\t\trequire(_access > 0);\r\n\t\tAdminAccessChanged(_admin, admins[_admin], _access);\r\n\t\tadmins[_admin]=_access;\r\n\t}\r\n\r\n\tfunction removeAdmin(address _admin) public onlyAdmin(2) {\r\n\t\trequire(admins[_admin] > 0);\r\n\t\tAdminRemoved(_admin);\r\n\t\tadmins[_admin]=0;\r\n\t}\r\n}\r\n\r\ncontract Managable is AdminAccess {\r\n\tuint public feePercent;\r\n\taddress public feeAddress;\r\n\tmapping (string => address) nTokens;\r\n\r\n\tevent TradingFeeChanged(uint256 _from, uint256 _to);\r\n\tevent FeeAddressChanged(address _from, address _to);\r\n\tevent TokenDeployed(address _addr, string _name, string _symbol);\r\n\tevent nonNativeDeposit(string _token,address _to,uint256 _amount);\r\n\tevent nonNativeWithdrawal(string _token,address _from,uint256 _amount);\r\n\r\n\tfunction Managable() AdminAccess() public {\r\n\t\tfeePercent=10;\r\n\t\tfeeAddress=msg.sender;\r\n\t}\r\n\r\n\tfunction setFeeAddress(address _fee) public onlyAdmin(2) {\r\n\t\tFeeAddressChanged(feeAddress, _fee);\r\n\t\tfeeAddress=_fee;\r\n\t}\r\n\r\n\t//1 fee unit equals 0.01% fee\r\n\tfunction setFee(uint _fee) public onlyAdmin(2) {\r\n\t\trequire(_fee < 100);\r\n\t\tTradingFeeChanged(feePercent, _fee);\r\n\t\tfeePercent=_fee;\r\n\t}\r\n\r\n\tfunction deployNonNativeToken(string _name,string _symbol,uint256 _decimals) public onlyAdmin(2) returns(address tokenAddress){\r\n\t\taddress nToken = new nonNativeToken(_name, _symbol, _decimals);\r\n\t\tnTokens[_symbol]=nToken;\r\n\t\tTokenDeployed(nToken, _name, _symbol);\r\n\t\treturn nToken;\r\n\t}\r\n\r\n\tfunction depositNonNative(string _symbol,address _to,uint256 _amount) public onlyAdmin(2){\r\n\t\trequire(nTokens[_symbol] != address(0));\r\n\t\tnonNativeToken_Interface(nTokens[_symbol]).makeDeposit(_to, _amount);\r\n\t\tnonNativeDeposit(_symbol, _to, _amount);\r\n\t}\r\n\r\n\tfunction withdrawNonNative(string _symbol,address _from,uint256 _amount) public onlyAdmin(2){\r\n\t\trequire(nTokens[_symbol] != address(0));\r\n\t\tnonNativeToken_Interface(nTokens[_symbol]).makeWithdrawal(_from, _amount);\r\n\t\tnonNativeWithdrawal(_symbol, _from, _amount);\r\n\t}\r\n\r\n\tfunction getTokenAddress(string _symbol) public constant returns(address tokenAddress){\r\n\t\treturn nTokens[_symbol];\r\n\t}\r\n}\r\n\r\ncontract EtherStore is Managable{\r\n\tbool public WrapperisEnabled;\r\n\taddress public EtherWrapper;\r\n\r\n\tmodifier WrapperEnabled{\r\n\t\trequire(WrapperisEnabled);\r\n\t\t_;\r\n\t}\r\n\tmodifier PreWrapper{\r\n\t\trequire(!WrapperisEnabled);\r\n\t\t_;\r\n\t\tWrapperSetup(EtherWrapper);\r\n\t\tWrapperisEnabled=true;\r\n\t}\r\n\r\n\tevent WrapperSetup(address _wrapper);\r\n\tevent WrapperChanged(address _from, address _to);\r\n\tevent EtherDeposit(address _to, uint256 _amount);\r\n\tevent EtherWithdrawal(address _from, uint256 _amount);\r\n\r\n\tfunction EtherStore() Managable() public {\r\n\t\tWrapperisEnabled=false;\r\n\t}\r\n\r\n\tfunction setupWrapper(address _wrapper) public onlyAdmin(2) PreWrapper{\r\n\t\tEtherWrapper=_wrapper;\r\n\t}\r\n\r\n\tfunction deployWrapper() public onlyAdmin(2) PreWrapper{\r\n\t\tEtherWrapper = new EthWrapper('EtherWrapper', 'ETH', 18);\r\n\t}\r\n\r\n\tfunction changeWrapper(address _wrapper) public onlyAdmin(2) WrapperEnabled{\r\n\t\tEthWrapper_Interface(EtherWrapper).wrapperChanged.value(this.balance)();\r\n\t\tWrapperChanged(EtherWrapper, _wrapper);\r\n\t\tEtherWrapper = _wrapper;\r\n\t}\r\n\r\n\tfunction deposit() public payable WrapperEnabled{\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).makeDeposit(msg.sender, msg.value));\r\n\t\tEtherDeposit(msg.sender,msg.value);\r\n\t}\r\n\r\n\tfunction depositTo(address _to) public payable WrapperEnabled{\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).makeDeposit(_to, msg.value));\r\n\t\tEtherDeposit(_to,msg.value);\r\n\t}\r\n\r\n\tfunction () public payable {\r\n\t\tdeposit();\r\n\t}\r\n\r\n\tfunction withdraw(uint _amount) public WrapperEnabled{\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).balanceOf(msg.sender) >= _amount);\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).makeWithdrawal(msg.sender, _amount));\r\n\t\tmsg.sender.transfer(_amount);\r\n\t\tEtherWithdrawal(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction withdrawTo(address _to,uint256 _amount) public WrapperEnabled{\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).balanceOf(msg.sender) >= _amount);\r\n\t\trequire(EthWrapper_Interface(EtherWrapper).makeWithdrawal(msg.sender, _amount));\r\n\t\t_to.transfer(_amount);\r\n\t\tEtherWithdrawal(_to, _amount);\r\n\t}\r\n}\r\n\r\ncontract Mergex is EtherStore{\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => mapping(bytes32 => uint256)) public fills;\r\n\tevent Trade(bytes32 hash, address tokenA, address tokenB, uint valueA, uint valueB);\r\n\tevent Filled(bytes32 hash);\r\n\tevent Cancel(bytes32 hash);\r\n\tfunction Mergex() EtherStore() public {\r\n\t}\r\n\r\n\tfunction checkAllowance(address token, address owner, uint256 amount) internal constant returns (bool allowed){\r\n\t\treturn ERC20_Interface(token).allowance(owner,address(this)) >= amount;\r\n\t}\r\n\r\n\tfunction getFillValue(address owner, bytes32 hash) public view returns (uint filled){\r\n\t\treturn fills[owner][hash];\r\n\t}\r\n\r\n\tfunction fillOrder(address owner, address tokenA, address tokenB, uint tradeAmount, uint valueA, uint valueB, uint expiration, uint nonce, uint8 v, bytes32 r, bytes32 s) public{\r\n\t\tbytes32 hash=sha256('mergex',owner,tokenA,tokenB,valueA,valueB,expiration,nonce);\r\n\t\tif(validateOrder(owner,hash,expiration,tradeAmount,valueA,v,r,s)){\r\n\t\t\tif(!tradeTokens(hash, msg.sender, owner, tokenA, tokenB, tradeAmount, valueA, valueB)){\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t\tfills[owner][hash]=fills[owner][hash].add(tradeAmount);\r\n\t\t\tif(fills[owner][hash] == valueA){\r\n\t\t\t\tFilled(hash);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateOrder(address owner, bytes32 hash, uint expiration, uint tradeAmount, uint Value, uint8 v, bytes32 r, bytes32 s) internal constant returns(bool success){\r\n\t\trequire(fills[owner][hash].add(tradeAmount) <= Value);\r\n\t\trequire(block.number<=expiration);\r\n\t\trequire(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",hash),v,r,s)==owner);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction cancelOrder(address tokenA, address tokenB, uint valueA, uint valueB, uint expiration, uint nonce, uint8 v, bytes32 r, bytes32 s) public{\r\n\t\tbytes32 hash=sha256('mergex', msg.sender, tokenA, tokenB, valueA, valueB, expiration, nonce);\r\n\t\trequire(block.number<=expiration);\r\n\t\trequire(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",hash),v,r,s)==msg.sender);\r\n\t\tCancel(hash);\r\n\t\tfills[msg.sender][hash]=valueA;\r\n\t}\r\n\r\n\tfunction tradeTokens(bytes32 hash, address userA,address userB,address tokenA,address tokenB,uint amountA,uint valueA,uint valueB) internal returns(bool success){\r\n\t\tuint amountB=valueB.mul(amountA).div(valueA);\r\n\t\trequire(ERC20_Interface(tokenA).balanceOf(userA)>=amountA);\r\n\t\trequire(ERC20_Interface(tokenB).balanceOf(userB)>=amountB);\r\n\t\tif(!checkAllowance(tokenA, userA, amountA))return false;\r\n\t\tif(!checkAllowance(tokenB, userB, amountB))return false;\r\n\t\tuint feeA=amountA.mul(feePercent).div(10000);\r\n\t\tuint feeB=amountB.mul(feePercent).div(10000);\r\n\t\tuint tradeA=amountA.sub(feeA);\r\n\t\tuint tradeB=amountB.sub(feeB);\r\n\t\tif(!ERC20_Interface(tokenA).transferFrom(userA,userB,tradeA))return false;\r\n\t\tif(!ERC20_Interface(tokenB).transferFrom(userB,userA,tradeB))return false;\r\n\t\tif(!ERC20_Interface(tokenA).transferFrom(userA,feeAddress,feeA))return false;\r\n\t\tif(!ERC20_Interface(tokenB).transferFrom(userB,feeAddress,feeB))return false;\r\n\t\tTrade(hash, tokenA, tokenB, amountA, amountB);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"name\":\"valueA\",\"type\":\"uint256\"},{\"name\":\"valueB\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WrapperisEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"changeWrapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNonNative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_access\",\"type\":\"uint8\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getFillValue\",\"outputs\":[{\"name\":\"filled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositNonNative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"deployNonNativeToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EtherWrapper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_access\",\"type\":\"uint8\"}],\"name\":\"changeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"setupWrapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"valueA\",\"type\":\"uint256\"},{\"name\":\"valueB\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deployWrapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueB\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Filled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"WrapperSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WrapperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"TradingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nonNativeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nonNativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_access\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"new_access\",\"type\":\"uint8\"}],\"name\":\"AdminAccessChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"Mergex","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ee0f6c482ecb862fac1c6a12f1b85c88875b9917acccbd0c78424d7af5f9954"}]}