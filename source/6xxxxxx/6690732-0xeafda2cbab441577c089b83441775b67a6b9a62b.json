{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract CompFactory {\r\n    address[] public contracts;\r\n    \r\n    function getContractCount() public constant returns(uint contractCount){\r\n        return contracts.length;\r\n    }\r\n    \r\n    function newComp(uint8 _numRounds) public payable returns(address newContract) {\r\n        Comp c = (new Comp).value(address(this).balance)(_numRounds, msg.sender);\r\n        contracts.push(c);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Comp {\r\n    address public playerA;\r\n    address public playerB;\r\n    uint8 public numRounds;\r\n    uint8 public round;\r\n    uint256 public punt;\r\n    mapping (uint8=>uint8) public results;\r\n    bool public begun;\r\n    bool public finished;\r\n    \r\n    constructor(uint8 _numRounds, address _playerA) public payable {\r\n        require(msg.value > 0);\r\n        require(_numRounds > 0);\r\n        require((_numRounds % 2) == 1);\r\n        playerA = _playerA;\r\n        numRounds = _numRounds;\r\n        round = 0;\r\n        punt = msg.value;\r\n        begun = false;\r\n        finished = false;\r\n    }\r\n    \r\n    function () public {\r\n        \r\n    }\r\n    \r\n    modifier inLobby {\r\n        require(!begun);\r\n        _;\r\n    }\r\n    \r\n    function readyUp() payable public inLobby {\r\n        require(msg.sender != playerA);\r\n        require(msg.value >= punt);\r\n        playerB = msg.sender;\r\n        playerB.transfer(msg.value-punt);\r\n        begun = true;\r\n    }\r\n    \r\n    modifier isPlayer {\r\n        require(msg.sender == playerA || msg.sender == playerB);\r\n        _;\r\n    }\r\n    \r\n    function claimLoss() public isPlayer {\r\n        require(begun);\r\n        require(!finished);\r\n        uint8 player;\r\n        if (msg.sender == playerA) {\r\n            player = 2;\r\n        } else {\r\n            player = 1;\r\n        }\r\n        results[round] = player;\r\n        round++;\r\n        if (round==numRounds) {\r\n            finished = true;\r\n            payWinner();\r\n        }\r\n    }\r\n    \r\n    function payWinner() private {\r\n        int8 score = 0;\r\n        for (uint8 i=0 ; i < numRounds ; i++){\r\n            if (results[i]==1){\r\n                score++;\r\n            } else {\r\n                score--;\r\n            }\r\n        }\r\n        \r\n        if (score>0) {\r\n            playerA.transfer(address(this).balance);\r\n        } else {\r\n            playerB.transfer(address(this).balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"name\":\"contractCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numRounds\",\"type\":\"uint8\"}],\"name\":\"newComp\",\"outputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CompFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://157eb9e0238367eca8e34f1aa3012292ed99e9e8fe82a3d99a4efb7c3274e6c5"}]}