{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n  address public owner;\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner returns (address account) {\r\n    owner = newOwner;\r\n    return owner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint256);\r\n  function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract CSTKDropToken is ERC20, Owned {\r\n  using SafeMath for uint256;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint256 public decimals;\r\n  uint256 _totalSupply;\r\n\r\n  bool public started;\r\n\r\n  address public token;\r\n\r\n  struct Level {\r\n    uint256 price;\r\n    uint256 available;\r\n  }\r\n\r\n  Level[] levels;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(string => uint256)) orders;\r\n\r\n  event TransferETH(address indexed from, address indexed to, uint256 eth);\r\n  event Sell(address indexed to, uint256 tokens, uint256 eth);\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor(string _symbol, string _name, uint256 _supply, uint256 _decimals, address _token) public {\r\n    symbol = _symbol;\r\n    name = _name;\r\n    decimals = _decimals;\r\n    token = _token;\r\n    _totalSupply = _supply;\r\n    balances[owner] = _totalSupply;\r\n    started = false;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  function destruct() public onlyOwner {\r\n    ERC20 tokenInstance = ERC20(token);\r\n\r\n    uint256 balance = tokenInstance.balanceOf(this);\r\n\r\n    if (balance > 0) {\r\n      tokenInstance.transfer(owner, balance);\r\n    }\r\n\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Changes the address of the supported token\r\n  // ------------------------------------------------------------------------\r\n  function setToken(address newTokenAddress) public onlyOwner returns (bool success) {\r\n    token = newTokenAddress;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Total supply\r\n  // ------------------------------------------------------------------------\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Changes the total supply value\r\n  //\r\n  // a new supply must be no less then the current supply\r\n  // or the owner must have enough amount to cover supply reduction\r\n  // ------------------------------------------------------------------------\r\n  function changeTotalSupply(uint256 newSupply) public onlyOwner returns (bool success) {\r\n    require(newSupply >= 0 && (\r\n      newSupply >= _totalSupply || _totalSupply - newSupply <= balances[owner]\r\n    ));\r\n    uint256 diff = 0;\r\n    if (newSupply >= _totalSupply) {\r\n      diff = newSupply.sub(_totalSupply);\r\n      balances[owner] = balances[owner].add(diff);\r\n      emit Transfer(address(0), owner, diff);\r\n    } else {\r\n      diff = _totalSupply.sub(newSupply);\r\n      balances[owner] = balances[owner].sub(diff);\r\n      emit Transfer(owner, address(0), diff);\r\n    }\r\n    _totalSupply = newSupply;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the token balance for account `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Start accept orders\r\n  // ------------------------------------------------------------------------\r\n  function start() public onlyOwner {\r\n    started = true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Start accept orders\r\n  // ------------------------------------------------------------------------\r\n  function stop() public onlyOwner {\r\n    started = false;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Adds new Level to the levels array\r\n  // ------------------------------------------------------------------------\r\n  function addLevel(uint256 price, uint256 available) public onlyOwner {\r\n    levels.push(Level(price, available));\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Removes a level with specified price from the levels array\r\n  // ------------------------------------------------------------------------\r\n  function removeLevel(uint256 price) public onlyOwner {\r\n    if (levels.length < 1) {\r\n      return;\r\n    }\r\n\r\n    Level[] memory tmp = levels;\r\n\r\n    delete levels;\r\n\r\n    for (uint i = 0; i < tmp.length; i++) {\r\n      if (tmp[i].price != price) {\r\n        levels.push(tmp[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Replaces a particular level index by a new Level values\r\n  // ------------------------------------------------------------------------\r\n  function replaceLevel(uint index, uint256 price, uint256 available) public onlyOwner {\r\n    levels[index] = Level(price, available);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Clears the levels array\r\n  // ------------------------------------------------------------------------\r\n  function clearLevels() public onlyOwner {\r\n    delete levels;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Finds a level with specified price and returns an amount of available tokens on the level\r\n  // ------------------------------------------------------------------------\r\n  function getLevelAmount(uint256 price) public view returns (uint256 available) {\r\n    if (levels.length < 1) {\r\n      return 0;\r\n    }\r\n\r\n    for (uint i = 0; i < levels.length; i++) {\r\n      if (levels[i].price == price) {\r\n        return levels[i].available;\r\n      }\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns a Level by it's array index\r\n  // ------------------------------------------------------------------------\r\n  function getLevelByIndex(uint index) public view returns (uint256 price, uint256 available) {\r\n    price = levels[index].price;\r\n    available = levels[index].available;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns a count of levels\r\n  // ------------------------------------------------------------------------\r\n  function getLevelsCount() public view returns (uint) {\r\n    return levels.length;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns a Level by it's array index\r\n  // ------------------------------------------------------------------------\r\n  function getCurrentLevel() public view returns (uint256 price, uint256 available) {\r\n    if (levels.length < 1) {\r\n      return;\r\n    }\r\n\r\n    for (uint i = 0; i < levels.length; i++) {\r\n      if (levels[i].available > 0) {\r\n        price = levels[i].price;\r\n        available = levels[i].available;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the order's balance of tokens for account `customer`\r\n  // ------------------------------------------------------------------------\r\n  function orderTokensOf(address customer) public view returns (uint256 balance) {\r\n    return orders[customer]['tokens'];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the order's balance of ETH for account `customer`\r\n  // ------------------------------------------------------------------------\r\n  function orderEthOf(address customer) public view returns (uint256 balance) {\r\n    return orders[customer]['eth'];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Delete customer's order\r\n  // ------------------------------------------------------------------------\r\n  function cancelOrder(address customer) public onlyOwner returns (bool success) {\r\n    orders[customer]['eth'] = 0;\r\n    orders[customer]['tokens'] = 0;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Checks the order values by the customer's address and sends required\r\n  // promo tokens based on the received amount of `this` tokens and ETH\r\n  // ------------------------------------------------------------------------\r\n  function _checkOrder(address customer) private returns (uint256 tokens, uint256 eth) {\r\n    require(started);\r\n\r\n    eth = 0;\r\n    tokens = 0;\r\n\r\n    if (getLevelsCount() <= 0 || orders[customer]['tokens'] <= 0 || orders[customer]['eth'] <= 0) {\r\n      return;\r\n    }\r\n\r\n    ERC20 tokenInstance = ERC20(token);\r\n    uint256 balance = tokenInstance.balanceOf(this);\r\n\r\n    uint256 orderEth = orders[customer]['eth'];\r\n    uint256 orderTokens = orders[customer]['tokens'] > balance ? balance : orders[customer]['tokens'];\r\n\r\n    for (uint i = 0; i < levels.length; i++) {\r\n      if (levels[i].available <= 0) {\r\n        continue;\r\n      }\r\n\r\n      uint256 _tokens = (10**decimals) * orderEth / levels[i].price;\r\n\r\n      // check if there enough tokens on the level\r\n      if (_tokens > levels[i].available) {\r\n        _tokens = levels[i].available;\r\n      }\r\n\r\n      // check the order tokens limit\r\n      if (_tokens > orderTokens) {\r\n        _tokens = orderTokens;\r\n      }\r\n\r\n      uint256 _eth = _tokens * levels[i].price / (10**decimals);\r\n      levels[i].available -= _tokens;\r\n\r\n      // accumulate total price and tokens\r\n      eth += _eth;\r\n      tokens += _tokens;\r\n\r\n      // reduce remaining limits\r\n      orderEth -= _eth;\r\n      orderTokens -= _tokens;\r\n\r\n      if (orderEth <= 0 || orderTokens <= 0 || levels[i].available > 0) {\r\n        // order is calculated\r\n        break;\r\n      }\r\n    }\r\n\r\n    // charge required amount of the tokens and ETHs\r\n    orders[customer]['tokens'] = orders[customer]['tokens'].sub(tokens);\r\n    orders[customer]['eth'] = orders[customer]['eth'].sub(eth);\r\n\r\n    tokenInstance.transfer(customer, tokens);\r\n\r\n    emit Sell(customer, tokens, eth);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // public entry point for the `_checkOrder` function\r\n  // ------------------------------------------------------------------------\r\n  function checkOrder(address customer) public onlyOwner returns (uint256 tokens, uint256 eth) {\r\n    return _checkOrder(customer);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer the balance from token owner's account to `to` account\r\n  // - Owner's account must have sufficient balance to transfer\r\n  // - 0 value transfers are allowed\r\n  // - only owner is allowed to send tokens to any address\r\n  // - not owners can transfer the balance only to owner's address\r\n  // ------------------------------------------------------------------------\r\n  function transfer(address to, uint256 tokens) public returns (bool success) {\r\n    require(msg.sender == owner || to == owner || to == address(this));\r\n    address receiver = msg.sender == owner ? to : owner;\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[receiver] = balances[receiver].add(tokens);\r\n\r\n    emit Transfer(msg.sender, receiver, tokens);\r\n\r\n    if (receiver == owner) {\r\n      orders[msg.sender]['tokens'] = orders[msg.sender]['tokens'].add(tokens);\r\n      _checkOrder(msg.sender);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `allowance` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\r\n    tokenOwner;\r\n    spender;\r\n    return uint256(0);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `approve` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    spender;\r\n    tokens;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // `transferFrom` is not allowed\r\n  // ------------------------------------------------------------------------\r\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n    from;\r\n    to;\r\n    tokens;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function () public payable {\r\n    owner.transfer(msg.value);\r\n    emit TransferETH(msg.sender, address(this), msg.value);\r\n\r\n    orders[msg.sender]['eth'] = orders[msg.sender]['eth'].add(msg.value);\r\n    _checkOrder(msg.sender);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n    return ERC20(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out promo token\r\n  // ------------------------------------------------------------------------\r\n  function transferToken(uint256 tokens) public onlyOwner returns (bool success) {\r\n    return transferAnyERC20Token(token, tokens);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can return specified amount from `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function returnFrom(address tokenOwner, uint256 tokens) public onlyOwner returns (bool success) {\r\n    balances[tokenOwner] = balances[tokenOwner].sub(tokens);\r\n    balances[owner] = balances[owner].add(tokens);\r\n    emit Transfer(tokenOwner, owner, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can return all tokens from `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function nullifyFrom(address tokenOwner) public onlyOwner returns (bool success) {\r\n    return returnFrom(tokenOwner, balances[tokenOwner]);\r\n  }\r\n}\r\n\r\ncontract CSTK_CLT is CSTKDropToken('CSTK_CLT', 'CryptoStock CLT Promo Token', 100000 * 10**8, 8, 0x2001f2A0Cf801EcFda622f6C28fb6E10d803D969) {\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"orderTokensOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"nullifyFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLevelsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getLevelAmount\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLevelByIndex\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"checkOrder\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"replaceLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLevel\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"removeLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"addLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"returnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"orderEthOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CSTK_CLT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://854228f2a5938ed446d865a33b8991a842a4f0f4b05d1f8cfb53a2a3697994b3"}]}