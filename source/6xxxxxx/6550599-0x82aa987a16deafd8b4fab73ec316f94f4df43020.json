{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n*\r\n* EthCash_V2 Contract Source\r\n*~~~~~~~~~~~~~~~~~~~~~~~\r\n* Web: ethcash.online\r\n* Web mirrors: ethcash.global | ethcash.club\r\n* Email: online@ethcash.online\r\n* Telergam: ETHCash_Online\r\n*~~~~~~~~~~~~~~~~~~~~~~~\r\n*  - GAIN 3,50% PER 24 HOURS\r\n*  - Life-long payments\r\n*  - Minimal 0.03 ETH\r\n*  - Can payouts yourself every 30 minutes - send 0 eth (> 0.001 ETH must accumulate on balance)\r\n*  - Affiliate 7.00%\r\n*    -- 3.50% Cashback (first payment with ref adress DATA)\r\n*~~~~~~~~~~~~~~~~~~~~~~~\r\n* RECOMMENDED GAS LIMIT: 250000\r\n* RECOMMENDED GAS PRICE: ethgasstation.info\r\n*\r\n*/\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract EthCash_V2 {\r\n    using SafeMath for uint;\r\n\r\n    struct Investor {\r\n        uint id;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint date;\r\n        address referrer;\r\n    }\r\n\r\n    uint private MIN_INVEST = 0.03 ether;\r\n    uint private OWN_COMMISSION_PERCENT = 15;\r\n    uint private COMPENSATION_COMMISSION_PERCENT = 5;\r\n    uint private REF_BONUS_PERCENT = 7;\r\n    uint private CASHBACK_PERCENT = 35;\r\n    uint private PAYOUT_INTERVAL = 10 minutes;\r\n    uint private PAYOUT_SELF_INTERVAL = 30 minutes;\r\n    uint private INTEREST = 35;\r\n\r\n    address constant public ADMIN_COMMISSION_ADDRESS = 0x54E14eaaCffF244c82a1EDc3778F9A0391E7e615;\r\n    address constant public COMPENSATION_COMMISSION_ADDRESS = 0x8e30A300c73CD8107280f5Af04E90C1F815086E1;\r\n    uint public depositAmount;\r\n    uint public payoutDate;\r\n    uint public paymentDate;\r\n\r\n    address[] public addresses;\r\n    mapping(address => Investor) public investors;\r\n\r\n    event Invest(address holder, uint amount);\r\n    event ReferrerBonus(address holder, uint amount);\r\n    event Cashback(address holder, uint amount);\r\n    event PayoutCumulative(uint amount, uint txs);\r\n    event PayoutSelf(address addr, uint amount);\r\n\r\n    constructor() public {\r\n        payoutDate = now;\r\n    }\r\n\r\n    function() payable public {\r\n\r\n        if (0 == msg.value) {\r\n            payoutSelf();\r\n            return;\r\n        }\r\n\r\n        require(msg.value >= MIN_INVEST, \"Too small amount\");\r\n\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if(user.id == 0) {\r\n            user.id = addresses.length + 1;\r\n            addresses.push(msg.sender);\r\n\r\n            address ref = bytesToAddress(msg.data);\r\n            if(investors[ref].deposit > 0 && ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n        }\r\n\r\n        user.deposit = user.deposit.add(msg.value);\r\n        user.deposits = user.deposits.add(1);\r\n        user.date = now;\r\n        emit Invest(msg.sender, msg.value);\r\n\r\n        paymentDate = now;\r\n        depositAmount = depositAmount.add(msg.value);\r\n\r\n        uint own_com = msg.value.div(100).mul(OWN_COMMISSION_PERCENT);\r\n        uint com_com = msg.value.div(100).mul(COMPENSATION_COMMISSION_PERCENT);\r\n        ADMIN_COMMISSION_ADDRESS.transfer(own_com);\r\n        COMPENSATION_COMMISSION_ADDRESS.transfer(com_com);\r\n\r\n        if(user.referrer != address(0)) {\r\n            uint bonus = msg.value.div(100).mul(REF_BONUS_PERCENT);\r\n            user.referrer.transfer(bonus);\r\n            emit ReferrerBonus(user.referrer, bonus);\r\n\r\n            if(user.deposits == 1) {\r\n                uint cashback = msg.value.div(1000).mul(CASHBACK_PERCENT);\r\n                msg.sender.transfer(cashback);\r\n                emit Cashback(msg.sender, cashback);\r\n            }\r\n        }\r\n    }\r\n\r\n    function payout(uint limit) public {\r\n\r\n        require(now >= payoutDate + PAYOUT_INTERVAL, \"Too fast payout request\");\r\n\r\n        uint sum;\r\n        uint txs;\r\n\r\n        for(uint i = addresses.length ; i > 0; i--) {\r\n            address addr = addresses[i - 1];\r\n\r\n            if(investors[addr].date + 20 hours > now) continue;\r\n\r\n            uint amount = getInvestorUnPaidAmount(addr);\r\n            investors[addr].date = now;\r\n\r\n            if(address(this).balance < amount) {\r\n                return;\r\n            }\r\n\r\n            addr.transfer(amount);\r\n\r\n            sum = sum.add(amount);\r\n\r\n            if(++txs >= limit) break;\r\n        }\r\n\r\n        payoutDate = now;\r\n\r\n        emit PayoutCumulative(sum, txs);\r\n    }\r\n\r\n    function payoutSelf() public {\r\n        address addr = msg.sender;\r\n\r\n        require(investors[addr].deposit > 0, \"Deposit not found\");\r\n        require(now >= investors[addr].date + PAYOUT_SELF_INTERVAL, \"Too fast payout request\");\r\n\r\n        uint amount = getInvestorUnPaidAmount(addr);\r\n        require(amount >= 1 finney, \"Too small unpaid amount\");\r\n\r\n        investors[addr].date = now;\r\n\r\n        if(address(this).balance < amount) {\r\n            return;\r\n        }\r\n\r\n        addr.transfer(amount);\r\n\r\n        emit PayoutSelf(addr, amount);\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function getInvestorUnPaidAmount(address addr) public view returns(uint) {\r\n        return investors[addr].deposit.div(1000).mul(INTEREST).div(100).mul(now.sub(investors[addr].date).mul(100)).div(1 days);\r\n    }\r\n\r\n    function getInvestorCount() public view returns(uint) { return addresses.length; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"payoutDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_COMMISSION_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorUnPaidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPENSATION_COMMISSION_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Cashback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txs\",\"type\":\"uint256\"}],\"name\":\"PayoutCumulative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutSelf\",\"type\":\"event\"}]","ContractName":"EthCash_V2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc216952bb2a672619b8221066fd73ffec441710a2b1086071eae04c130e18ff"}]}