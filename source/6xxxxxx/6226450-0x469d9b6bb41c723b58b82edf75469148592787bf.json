{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable {\r\n    address public owner;\r\n    address[] public managers;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        managers.push(msg.sender);\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(isManager(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isManager(address manager) view internal returns (bool ok) {\r\n        for (uint i = 0; i < managers.length; i++) {\r\n            if (managers[i] == manager) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addManager(address manager) onlyOwner public {\r\n        require(manager != 0x0);\r\n        require(!isManager(manager));\r\n        managers.push(manager);\r\n    }\r\n\r\n    function removeManager(address manager) onlyOwner public {\r\n        require(manager != 0x0);\r\n        require(isManager(manager));\r\n        for (uint i = 0; i < managers.length; i++) {\r\n            if (managers[i] == manager) {\r\n                managers[i] = managers[managers.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        managers.length -= 1;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\r\n        require(newOwner != 0x0);\r\n        removeManager(owner);\r\n        addManager(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    constructor() public payable { }\r\n\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract LooisCornerstoneHolder is Ownable, Destructible {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    ERC20 public token;\r\n    bool public tokenInitialized;\r\n    bool public stopInvest;\r\n    uint256 public totalSupply;\r\n    uint256 public restSupply;\r\n    uint256 public releaseTime;\r\n    uint8 public releasedRoundCount;\r\n\r\n    // release percent of each round\r\n    uint8 public firstRoundPercent;\r\n    uint8 public secondRoundPercent;\r\n    uint8 public thirdRoundPercent;\r\n    uint8 public fourthRoundPercent;\r\n\r\n    address[] public investors;\r\n    mapping(address => uint256) public investorAmount;\r\n    mapping(address => uint256) public releasedAmount;\r\n\r\n    event Release(address indexed _investor, uint256 indexed _value);\r\n\r\n    modifier onlyTokenInitialized() {\r\n        require(tokenInitialized);\r\n        _;\r\n    }\r\n\r\n    constructor(uint8 _firstRoundPercent, uint8 _secondRoundPercent, uint8 _thirdRoundPercent, uint8 _fourthRoundPercent) public {\r\n        require(_firstRoundPercent + _secondRoundPercent + _thirdRoundPercent + _fourthRoundPercent == 100);\r\n\r\n        firstRoundPercent = _firstRoundPercent;\r\n        secondRoundPercent = _secondRoundPercent;\r\n        thirdRoundPercent = _thirdRoundPercent;\r\n        fourthRoundPercent = _fourthRoundPercent;\r\n        tokenInitialized = false;\r\n        stopInvest = false;\r\n        releasedRoundCount = 0;\r\n    }\r\n\r\n    function initTokenAndReleaseTime(ERC20 _token, uint256 _releaseTime) onlyOwner public {\r\n        require(!tokenInitialized);\r\n        require(_releaseTime > block.timestamp);\r\n\r\n        releaseTime = _releaseTime;\r\n        token = _token;\r\n        totalSupply = token.balanceOf(this);\r\n        restSupply = totalSupply;\r\n        tokenInitialized = true;\r\n    }\r\n\r\n    function isInvestor(address _investor) view internal returns (bool ok) {\r\n        for (uint i = 0; i < investors.length; i++) {\r\n            if (investors[i] == _investor) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addInvestor(address _investor, uint256 _value) onlyManager onlyTokenInitialized public {\r\n        require(_investor != 0x0);\r\n        require(_value > 0);\r\n        require(!stopInvest);\r\n\r\n        uint256 value = 10**18 * _value;\r\n        if (!isInvestor(_investor)) {\r\n            require(restSupply > value);\r\n\r\n            investors.push(_investor);\r\n        } else {\r\n            require(restSupply + investorAmount[_investor] > value);\r\n\r\n            restSupply = restSupply.add(investorAmount[_investor]);\r\n        }\r\n        restSupply = restSupply.sub(value);\r\n        investorAmount[_investor] = value;\r\n    }\r\n\r\n    function removeInvestor(address _investor) onlyManager onlyTokenInitialized public {\r\n        require(_investor != 0x0);\r\n        require(!stopInvest);\r\n        require(isInvestor(_investor));\r\n\r\n        for (uint i = 0; i < investors.length; i++) {\r\n            if (investors[i] == _investor) {\r\n                investors[i] = investors[investors.length - 1];\r\n                restSupply = restSupply.add(investorAmount[_investor]);\r\n                investorAmount[_investor] = 0;\r\n                break;\r\n            }\r\n        }\r\n        investors.length -= 1;\r\n    }\r\n\r\n    function release() onlyManager onlyTokenInitialized public {\r\n        require(releasedRoundCount <= 3);\r\n        require(block.timestamp >= releaseTime);\r\n\r\n        uint8 releasePercent;\r\n        if (releasedRoundCount == 0) {\r\n            releasePercent = firstRoundPercent;\r\n        } else if (releasedRoundCount == 1) {\r\n            releasePercent = secondRoundPercent;\r\n        } else if (releasedRoundCount == 2) {\r\n            releasePercent = thirdRoundPercent;\r\n        } else {\r\n            releasePercent = fourthRoundPercent;\r\n        }\r\n\r\n        for (uint8 i = 0; i < investors.length; i++) {\r\n            address investor = investors[i];\r\n            uint256 amount = investorAmount[investor];\r\n            if (amount > 0) {\r\n                uint256 releaseAmount = amount.div(100).mul(releasePercent);\r\n                if (releasedAmount[investor].add(releaseAmount) > amount) {\r\n                    releaseAmount = amount.sub(releasedAmount[investor]);\r\n                }\r\n                token.safeTransfer(investor, releaseAmount);\r\n                releasedAmount[investor] = releasedAmount[investor].add(releaseAmount);\r\n                emit Release(investor, releaseAmount);\r\n            }\r\n        }\r\n        // Next release time is 30 days later.\r\n        releaseTime = releaseTime.add(60 * 60 * 24 * 30);\r\n        releasedRoundCount = releasedRoundCount + 1;\r\n        stopInvest = true;\r\n    }\r\n\r\n    // if the balance of this contract is not empty, release all balance to the owner\r\n    function releaseRestBalance() onlyOwner onlyTokenInitialized public {\r\n        require(releasedRoundCount > 3);\r\n        uint256 balance = token.balanceOf(this);\r\n        require(balance > 0);\r\n\r\n        token.safeTransfer(owner, balance);\r\n        emit Release(owner, balance);\r\n    }\r\n\r\n    // if the balance of this contract is not empty, release all balance to a recipient\r\n    function releaseRestBalanceAndSend(address _recipient) onlyOwner onlyTokenInitialized public {\r\n        require(_recipient != 0x0);\r\n        require(releasedRoundCount > 3);\r\n        uint256 balance = token.balanceOf(this);\r\n        require(balance > 0);\r\n\r\n        token.safeTransfer(_recipient, balance);\r\n        emit Release(_recipient, balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"initTokenAndReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRoundPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthRoundPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"releaseRestBalanceAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseRestBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedRoundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_firstRoundPercent\",\"type\":\"uint8\"},{\"name\":\"_secondRoundPercent\",\"type\":\"uint8\"},{\"name\":\"_thirdRoundPercent\",\"type\":\"uint8\"},{\"name\":\"_fourthRoundPercent\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LooisCornerstoneHolder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000014","Library":"","SwarmSource":"bzzr://24404bad67df82917ab8729b2667a2497a51c3ef972febed942e781a89fa3ad8"}]}