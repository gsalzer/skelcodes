{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ninterface BlacklistInterface {\r\n\r\n    event Blacklisted(bytes32 indexed node);\r\n    event Unblacklisted(bytes32 indexed node);\r\n    \r\n    function blacklist(bytes32 node) public;\r\n    function unblacklist(bytes32 node) public;\r\n    function isPermitted(bytes32 node) public view returns (bool);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return owner == addr;\r\n    }\r\n}\r\n\r\ncontract Blacklist is BlacklistInterface, Ownable {\r\n\r\n    mapping (bytes32 => bool) blacklisted;\r\n    \r\n    /**\r\n     * @dev Add a node to the blacklist.\r\n     * @param node The node to add to the blacklist.\r\n     */\r\n    function blacklist(bytes32 node) public onlyOwner {\r\n        blacklisted[node] = true;\r\n        Blacklisted(node);\r\n    }\r\n    \r\n    /** \r\n     * @dev Remove a node from the blacklist.\r\n     * @param node The node to remove from the blacklist.\r\n     */\r\n    function unblacklist(bytes32 node) public onlyOwner {\r\n        blacklisted[node] = false;\r\n        Unblacklisted(node);\r\n    }\r\n    \r\n    /**\r\n     *  @dev Return true if the node is permitted, false otherwise. Every nodes, except the blacklisted ones, are permitted.\r\n     *  @param node The node.\r\n     */\r\n    function isPermitted(bytes32 node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"unblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"}]","ContractName":"Blacklist","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://898f829d0336c0780e8c5fb0b22eb4dca62a25a4232f2089147188944e4ca3e2"}]}