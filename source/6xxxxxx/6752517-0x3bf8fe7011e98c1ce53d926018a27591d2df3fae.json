{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract Olympus {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    mapping (address=>uint) public invest;\r\n    mapping (address=>uint) public percentage;\r\n    mapping (address=>uint) public time_stamp;\r\n    \r\n    address techSupport = 0x0bD47808d4A09aD155b00C39dBb101Fb71e1C0f0;\r\n    uint techSupportPercent = 2;\r\n    \r\n    uint refPercent = 3;\r\n    uint refBack = 3;\r\n    \r\n    uint public payment_delay = 1 hours;\r\n    uint public count_investors = 0;\r\n    \r\n    function bytesToAddress(bytes _data) internal pure returns(address referrer) {\r\n        assembly {\r\n            referrer := mload(add(_data, 20))\r\n        }\r\n        return referrer;\r\n    }\r\n    \r\n    function elapsedTime()public view returns(uint) {\r\n        return now.sub(time_stamp[msg.sender]).div(payment_delay);\r\n    }\r\n    \r\n    function calculateProfitPercent(uint bal) private pure returns (uint) {\r\n        if (bal >= 4e21) { // balance >= 4000 ETH\r\n            return 2500;   // 6% per day\r\n        }\r\n        if (bal >= 2e21) { // balance >= 2000 ETH\r\n            return 2083;   // 5% per day\r\n        }\r\n        if (bal >= 1e21) { // balance >= 1000 ETH\r\n            return 1875;   // 4.5% per day\r\n        }\r\n        if (bal >= 5e20) { // balance >= 500 ETH\r\n            return 1666;   // 4% per day\r\n        }\r\n        if (bal >= 4e20) { // balance >= 400 ETH\r\n            return 1583;   // 3.8% per day\r\n        }\r\n        if (bal >= 3e20) { // balance >= 300 ETH\r\n            return 1500;   // 3.6% per day\r\n        }\r\n        if (bal >= 2e20) { // balance >= 200 ETH\r\n            return 1416;   // 3.4% per day\r\n        }\r\n        if (bal >= 1e20) { // balance >= 100 ETH\r\n            return 1333;   // 3.2% per day\r\n        } else {\r\n            return 1250;   // 3% per day\r\n        }\r\n    }\r\n    \r\n    function deposit() internal {\r\n        if(invest[msg.sender] > 0 && elapsedTime() > 0) {\r\n            pickUpCharges();\r\n        }\r\n        if (msg.data.length > 0 ) {\r\n            address referrer = bytesToAddress(bytes(msg.data));\r\n            address sender = msg.sender;\r\n            if(referrer != sender) {\r\n                sender.transfer(msg.value * refBack / 100);\r\n                referrer.transfer(msg.value * refPercent / 100);\r\n            } else {\r\n                techSupport.transfer(msg.value * refPercent / 100);\r\n            }\r\n        } else {\r\n            techSupport.transfer(msg.value * refPercent / 100);\r\n        }\r\n        if(invest[msg.sender] == 0) {\r\n            count_investors+=1;\r\n        }\r\n        techSupport.transfer(msg.value.mul(techSupportPercent).div(100));\r\n        invest[msg.sender]+= msg.value;\r\n        time_stamp[msg.sender] = now;\r\n    }\r\n    \r\n    function pickUpCharges() internal {\r\n        uint hours_passed = elapsedTime();\r\n        require(hours_passed > 0, 'You can receive payment 1 time per hour');\r\n        uint thisBalance = address(this).balance;\r\n        uint value = (invest[msg.sender].mul(calculateProfitPercent(thisBalance)).div(1000000)).mul(hours_passed);\r\n        percentage[msg.sender] += value;\r\n        time_stamp[msg.sender] = now;\r\n        msg.sender.transfer(value);\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.value > 0) {\r\n                deposit();\r\n        } else if(msg.value == 0) {\r\n            pickUpCharges();\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time_stamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count_investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payment_delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Olympus","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://141b2a41bee5383dc5023cfac9ffdb2cb0152fd5a7f2c6bfdb60509578476209"}]}