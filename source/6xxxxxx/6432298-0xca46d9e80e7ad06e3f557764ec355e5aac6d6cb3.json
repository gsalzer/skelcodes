{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"multiple user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n    \r\n    mapping(address => bool) public authorized;\r\n    event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n    /**\r\n     * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        authorize(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the authorized.\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows \r\n     * @param _address The address to change authorization.\r\n     */\r\n    function authorize(address _address) public onlyOwner {\r\n        require(!authorized[_address]);\r\n        emit AuthorizationSet(_address, true);\r\n        authorized[_address] = true;\r\n    }\r\n    /**\r\n     * @dev Disallows\r\n     * @param _address The address to change authorization.\r\n     */\r\n    function deauthorize(address _address) public onlyOwner {\r\n        require(authorized[_address]);\r\n        emit AuthorizationSet(_address, false);\r\n        authorized[_address] = false;\r\n    }\r\n}\r\n\r\ncontract ZmineStRandom is Authorizable {\r\n    \r\n    uint256 public counter = 0;\r\n    mapping(uint256 => uint256) public randomResultMap;\r\n    mapping(uint256 => uint256[]) public randomInputMap;\r\n    \r\n \r\n    function random(uint256 min, uint256 max, uint256 lotto) public onlyAuthorized  {\r\n        \r\n\trequire(min > 0);\r\n        require(max > min);\r\n         \r\n        counter++;\r\n        uint256 result = ((uint256(keccak256(abi.encodePacked())) \r\n                        + uint256(keccak256(abi.encodePacked(counter))) \r\n                        + uint256(keccak256(abi.encodePacked(block.difficulty)))\r\n                        + uint256(keccak256(abi.encodePacked(block.number - 1)))\r\n                    ) % (max-min+1)) + min;\r\n        \r\n        uint256[] memory array = new uint256[](5);\r\n        array[0] = min;\r\n        array[1] = max;\r\n        array[2] = lotto;\r\n        array[3] = block.difficulty;\r\n        array[4] = block.number;\r\n        randomInputMap[counter] = array;\r\n        randomResultMap[counter] = result;\r\n    }\r\n\r\n    function checkHash(uint256 n) public pure returns (uint256){\r\n        return uint256(keccak256(abi.encodePacked(n)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"checkHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"lotto\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomResultMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomInputMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"AuthorizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZmineStRandom","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c3ce30f196d556f21b201915464af1b360f1f09ee4a98bd8513d5cae13812c96"}]}