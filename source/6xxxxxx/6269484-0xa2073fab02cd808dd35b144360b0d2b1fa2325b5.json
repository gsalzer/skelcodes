{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC725 {\r\n\r\n    uint256 public constant MANAGEMENT_KEY = 1;\r\n    uint256 public constant ACTION_KEY = 2;\r\n    uint256 public constant CLAIM_SIGNER_KEY = 3;\r\n    uint256 public constant ENCRYPTION_KEY = 4;\r\n\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    struct Key {\r\n        uint256[] purpose; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\r\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\r\n        bytes32 key;\r\n    }\r\n\r\n    function getKey(bytes32 _key) public constant returns(uint256[] purpose, uint256 keyType, bytes32 key);\r\n    function getKeyPurpose(bytes32 _key) public constant returns(uint256[] purpose);\r\n    function getKeysByPurpose(uint256 _purpose) public constant returns(bytes32[] keys);\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\r\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\r\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\r\n    function approve(uint256 _id, bool _approve) public returns (bool success);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function balanceOf(address _who) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Identity is ERC725 {\r\n\r\n    uint256 constant LOGIN_KEY = 10;\r\n    uint256 constant FUNDS_MANAGEMENT = 11;\r\n\r\n    uint256 executionNonce;\r\n\r\n    struct Execution {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n        bool approved;\r\n        bool executed;\r\n    }\r\n\r\n    mapping (bytes32 => Key) keys;\r\n    mapping (uint256 => bytes32[]) keysByPurpose;\r\n    mapping (uint256 => Execution) executions;\r\n\r\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\r\n    modifier onlyManagement() {\r\n        require(keyHasPurpose(keccak256(msg.sender), MANAGEMENT_KEY), \"Sender does not have management key\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAction() {\r\n        require(keyHasPurpose(keccak256(msg.sender), ACTION_KEY), \"Sender does not have action key\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundsManagement() {\r\n        require(keyHasPurpose(keccak256(msg.sender), FUNDS_MANAGEMENT), \"Sender does not have funds key\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        bytes32 _key = keccak256(msg.sender);\r\n        keys[_key].key = _key;\r\n        keys[_key].purpose = [MANAGEMENT_KEY];\r\n        keys[_key].keyType = 1;\r\n        keysByPurpose[MANAGEMENT_KEY].push(_key);\r\n        emit KeyAdded(_key, MANAGEMENT_KEY, 1);\r\n    }\r\n\r\n    function getKey(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purpose, uint256 keyType, bytes32 key)\r\n    {\r\n        return (keys[_key].purpose, keys[_key].keyType, keys[_key].key);\r\n    }\r\n\r\n    function getKeyPurpose(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purpose)\r\n    {\r\n        return (keys[_key].purpose);\r\n    }\r\n\r\n    function getKeysByPurpose(uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return keysByPurpose[_purpose];\r\n    }\r\n\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        onlyManagement\r\n        returns (bool success)\r\n    {\r\n        if (keyHasPurpose(_key, _purpose)) {\r\n            return true;\r\n        }\r\n\r\n        keys[_key].key = _key;\r\n        keys[_key].purpose.push(_purpose);\r\n        keys[_key].keyType = _type;\r\n\r\n        keysByPurpose[_purpose].push(_key);\r\n\r\n        emit KeyAdded(_key, _purpose, _type);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(uint256 _id, bool _approve)\r\n        public\r\n        onlyAction\r\n        returns (bool success)\r\n    {\r\n        emit Approved(_id, _approve);\r\n\r\n        if (_approve == true) {\r\n            executions[_id].approved = true;\r\n            success = executions[_id].to.call(executions[_id].data, 0);\r\n            if (success) {\r\n                executions[_id].executed = true;\r\n                emit Executed(\r\n                    _id,\r\n                    executions[_id].to,\r\n                    executions[_id].value,\r\n                    executions[_id].data\r\n                );\r\n            } else {\r\n                emit ExecutionFailed(\r\n                    _id,\r\n                    executions[_id].to,\r\n                    executions[_id].value,\r\n                    executions[_id].data\r\n                );\r\n            }\r\n            return success;\r\n        } else {\r\n            executions[_id].approved = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function execute(address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        require(!executions[executionNonce].executed, \"Already executed\");\r\n        executions[executionNonce].to = _to;\r\n        executions[executionNonce].value = _value;\r\n        executions[executionNonce].data = _data;\r\n\r\n        emit ExecutionRequested(executionNonce, _to, _value, _data);\r\n\r\n        if (keyHasPurpose(keccak256(msg.sender), ACTION_KEY)) {\r\n            approve(executionNonce, true);\r\n        }\r\n\r\n        executionNonce++;\r\n        return executionNonce-1;\r\n    }\r\n\r\n    function removeKey(bytes32 _key, uint256 _purpose)\r\n        public\r\n        onlyManagement\r\n        returns (bool success)\r\n    {\r\n        require(keys[_key].key == _key, \"No such key\");\r\n\r\n        if (!keyHasPurpose(_key, _purpose)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 arrayLength = keys[_key].purpose.length;\r\n        int index = -1;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if (keys[_key].purpose[i] == _purpose) {\r\n                index = int(i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index != -1) {\r\n            keys[_key].purpose[uint(index)] = keys[_key].purpose[arrayLength - 1];\r\n            delete keys[_key].purpose[arrayLength - 1];\r\n            keys[_key].purpose.length--;\r\n        }\r\n\r\n        uint256 purposesLen = keysByPurpose[_purpose].length;\r\n        for (uint j = 0; j < purposesLen; j++) {\r\n            if (keysByPurpose[_purpose][j] == _key) {\r\n                keysByPurpose[_purpose][j] = keysByPurpose[_purpose][purposesLen - 1];\r\n                delete keysByPurpose[_purpose][purposesLen - 1];\r\n                keysByPurpose[_purpose].length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit KeyRemoved(_key, _purpose, keys[_key].keyType);\r\n\r\n        return true;\r\n    }\r\n\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool result)\r\n    {\r\n        if (keys[_key].key == 0) return false;\r\n        uint256 arrayLength = keys[_key].purpose.length;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if (keys[_key].purpose[i] == _purpose) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n   /**\r\n     * Send all ether to msg.sender\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function withdraw() public onlyFundsManagement {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * Transfer ether to _account\r\n     * @param _amount amount to transfer in wei\r\n     * @param _account recepient\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function transferEth(uint _amount, address _account) public onlyFundsManagement {\r\n        require(_amount <= address(this).balance, \"Amount should be less than total balance of the contract\");\r\n        require(_account != address(0), \"must be valid address\");\r\n        _account.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n     * Returns contract eth balance\r\n     */\r\n    function getBalance() public view returns(uint)  {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Returns ERC20 token balance for _token\r\n     * @param _token token address\r\n     */\r\n    function getTokenBalance(address _token) public view returns (uint) {\r\n        return ERC20Basic(_token).balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * Send all tokens for _token to msg.sender\r\n     * @param _token ERC20 contract address\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function withdrawTokens(address _token) public onlyFundsManagement {\r\n        require(_token != address(0));\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint balance = token.balanceOf(this);\r\n        // token returns true on successful transfer\r\n        assert(token.transfer(msg.sender, balance));\r\n    }\r\n\r\n    /**\r\n     * Send tokens for _token to _to\r\n     * @param _token ERC20 contract address\r\n     * @param _to recepient\r\n     * @param _amount amount in \r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function transferTokens(address _token, address _to, uint _amount) public onlyFundsManagement {\r\n        require(_token != address(0));\r\n        require(_to != address(0));\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint balance = token.balanceOf(this);\r\n        require(_amount <= balance);\r\n        assert(token.transfer(_to, _amount));\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n}\r\n\r\ncontract Encoder {\r\n\r\n    function uintToChar(uint8 _uint) internal pure returns(string) {\r\n        byte b = \"\\x30\"; // ASCII code for 0\r\n        if (_uint > 9) {\r\n            b = \"\\x60\";  // ASCII code for the char before a\r\n            _uint -= 9;\r\n        }\r\n        bytes memory bs = new bytes(1);\r\n        bs[0] = b | byte(_uint);\r\n        return string(bs);\r\n    }\r\n\r\n    /**\r\n     *  Encodes the string representation of a uint8 into bytes\r\n     */\r\n    function encodeUInt(uint256 _uint) public pure returns(bytes memory) {\r\n        if (_uint == 0) {\r\n            return abi.encodePacked(uintToChar(0));\r\n        }\r\n\r\n        bytes memory result;\r\n        uint256 x = _uint;\r\n        while (x > 0) {\r\n            result = abi.encodePacked(uintToChar(uint8(x % 10)), result);\r\n            x /= 10;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *  Encodes the string representation of an address into bytes\r\n     */\r\n    function encodeAddress(address _address) public pure returns (bytes memory res) {\r\n        for (uint i = 0; i < 20; i++) {\r\n            // get each byte of the address\r\n            byte b = byte(uint8(uint(_address) / (2**(8*(19 - i)))));\r\n\r\n            // split it into two\r\n            uint8 high = uint8(b >> 4);\r\n            uint8 low = uint8(b) & 15;\r\n\r\n            // and encode them as chars\r\n            res = abi.encodePacked(res, uintToChar(high), uintToChar(low));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  Encodes a string into bytes\r\n     */\r\n    function encodeString(string _str) public pure returns (bytes memory) {\r\n        return abi.encodePacked(_str);\r\n    }\r\n}\r\n\r\ncontract SignatureValidator {\r\n\r\n    function doHash(string _message1, uint32 _message2, string _header1, string _header2)\r\n     pure internal returns (bytes32) {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                    keccak256(abi.encodePacked(_header1, _header2)),\r\n                    keccak256(abi.encodePacked(_message1, _message2)))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns address of signer for a signed message\r\n     * @param _message1 message that was signed\r\n     * @param _nonce nonce that was part of the signed message\r\n     * @param _header1 header for the message (ex: \"string Message\")\r\n     * @param _header2 header for the nonce (ex: \"uint32 nonce\")\r\n     * @param _r r from ECDSA\r\n     * @param _s s from ECDSA\r\n     * @param _v recovery id\r\n     */\r\n    function checkSignature(string _message1, uint32 _nonce, string _header1, string _header2, bytes32 _r, bytes32 _s, uint8 _v)\r\n     public pure returns (address) {\r\n        bytes32 hash = doHash(_message1, _nonce, _header1, _header2);\r\n        return ecrecover(hash, _v, _r, _s);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * ZincAccesor contract used for constructing and managing Identity contracts\r\n * Access control is based on signed messages\r\n * This contract can be used as a trustless entity that creates an Identity contract and is used to manage it.\r\n * It operates as a proxy in order to allow users to interact with it based on signed messages and not spend any gas\r\n * It can be upgraded with the user consent by adding a instance of a new version and removing the old one.\r\n */\r\n\r\ncontract ZincAccessor is SignatureValidator, Encoder {\r\n\r\n    uint256 public nonce = 0;\r\n\r\n    event UserIdentityCreated(address indexed userAddress, address indexed identityContractAddress);\r\n    event AccessorAdded(address indexed identityContractAddress, address indexed keyAddress, uint256 indexed purpose);\r\n    event AccessorRemoved(address indexed identityContractAddress, address indexed keyAddress, uint256 indexed purpose);\r\n\r\n    function checkUserSignature(\r\n        address _userAddress,\r\n        string _message1,\r\n        uint32 _nonce,\r\n        string _header1,\r\n        string _header2,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v) \r\n    pure internal returns (bool) {\r\n        require(\r\n            checkSignature(_message1, _nonce, _header1, _header2, _r, _s, _v) == _userAddress,\r\n            \"User signature must be the same as signed message\");\r\n        return true;\r\n    }\r\n\r\n    modifier checknonce(uint _nonce) {\r\n        require(++nonce == _nonce, \"Wrong nonce\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructs an Identity contract and returns its address\r\n     * Requires a signed message to verify the identity of the initial user address\r\n     * @param _userAddress user address\r\n     * @param _message1 message that was signed\r\n     * @param _nonce nonce that was part of the signed message\r\n     * @param _header1 header for the message (ex: \"string Message\")\r\n     * @param _header2 header for the nonce (ex: \"uint32 nonce\")\r\n     * @param _r r from ECDSA\r\n     * @param _s s from ECDSA\r\n     * @param _v recovery id\r\n     */\r\n    function constructUserIdentity(\r\n        address _userAddress,\r\n        string _message1,\r\n        uint32 _nonce,\r\n        string _header1,\r\n        string _header2,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v)\r\n    public\r\n     returns (address) {\r\n        require(\r\n            checkUserSignature(_userAddress, _message1, _nonce, _header1, _header2, _r, _s, _v),\r\n            \"User Signature does not match\");\r\n\r\n        Identity id = new Identity();\r\n        id.addKey(keccak256(_userAddress), id.MANAGEMENT_KEY(), 1);\r\n\r\n        emit UserIdentityCreated(_userAddress, address(id));\r\n\r\n        return address(id);\r\n    }\r\n\r\n    /**\r\n     * Adds an accessor to an Identity contract\r\n     * Requires a signed message to verify the identity of the initial user address\r\n     * Requires _userAddress to have KEY_MANAGEMENT purpose on the Identity contract\r\n     * Emits AccessorAdded\r\n     * @param _key key to add to Identity\r\n     * @param _purpose purpose for _key\r\n     * @param _idContract address if Identity contract\r\n     * @param _userAddress user address\r\n     * @param _message1 message that was signed of the form \"Add {_key} to {_idContract} with purpose {_purpose}\"\r\n     * @param _nonce nonce that was part of the signed message\r\n     * @param _header1 header for the message (ex: \"string Message\")\r\n     * @param _header2 header for the nonce (ex: \"uint32 nonce\")\r\n     * @param _r r from ECDSA\r\n     * @param _s s from ECDSA\r\n     * @param _v recovery id\r\n     */\r\n    function addAccessor(\r\n        address _key,\r\n        address _idContract,\r\n        uint256 _purpose,\r\n        address _userAddress,\r\n        string _message1,\r\n        uint32 _nonce,\r\n        string _header1,\r\n        string _header2,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v)\r\n    public checknonce(_nonce) returns (bool) {\r\n        require(checkUserSignature(_userAddress, _message1, _nonce, _header1, _header2, _r, _s, _v));\r\n        require(\r\n            keccak256(abi.encodePacked(\"Add 0x\", encodeAddress(_key), \" to 0x\", encodeAddress(_idContract), \" with purpose \", encodeUInt(_purpose))) ==\r\n            keccak256(encodeString(_message1)), \"Message incorrect\");\r\n\r\n        Identity id = Identity(_idContract);\r\n        require(id.keyHasPurpose(keccak256(_userAddress), id.MANAGEMENT_KEY()));\r\n\r\n        id.addKey(keccak256(_key), _purpose, 1);\r\n        emit AccessorAdded(_idContract, _key, _purpose);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove an accessor from Identity contract\r\n     * Requires a signed message to verify the identity of the initial user address\r\n     * Requires _userAddress to have KEY_MANAGEMENT purpose on the Identity contract\r\n     * Emits AccessorRemoved\r\n     * @param _key key to add to Identity\r\n     * @param _idContract address if Identity contract\r\n     * @param _userAddress user address\r\n     * @param _message1 message that was signed of the form \"Remove {_key} from {_idContract}\"\r\n     * @param _nonce nonce that was part of the signed message\r\n     * @param _header1 header for the message (ex: \"string Message\")\r\n     * @param _header2 header for the nonce (ex: \"uint32 nonce\")\r\n     * @param _r r from ECDSA\r\n     * @param _s s from ECDSA\r\n     * @param _v recovery id\r\n     */\r\n    function removeAccessor(\r\n        address _key,\r\n        address _idContract,\r\n        uint256 _purpose,\r\n        address _userAddress,\r\n        string _message1,\r\n        uint32 _nonce,\r\n        string _header1,\r\n        string _header2,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v)\r\n    public checknonce(_nonce) returns (bool) {\r\n        require(checkUserSignature(_userAddress, _message1, _nonce, _header1, _header2, _r, _s, _v));\r\n        require(\r\n            keccak256(abi.encodePacked(\"Remove 0x\", encodeAddress(_key), \" from 0x\", encodeAddress(_idContract), \" with purpose \", encodeUInt(_purpose))) ==\r\n            keccak256(encodeString(_message1)), \"Message incorrect\");\r\n\r\n        Identity id = Identity(_idContract);\r\n        require(id.keyHasPurpose(keccak256(_userAddress), id.MANAGEMENT_KEY()));\r\n\r\n        id.removeKey(keccak256(_key), _purpose);\r\n\r\n        emit AccessorRemoved(_idContract, _key, _purpose);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_idContract\",\"type\":\"address\"},{\"name\":\"_purpose\",\"type\":\"uint256\"},{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_message1\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint32\"},{\"name\":\"_header1\",\"type\":\"string\"},{\"name\":\"_header2\",\"type\":\"string\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"addAccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_idContract\",\"type\":\"address\"},{\"name\":\"_purpose\",\"type\":\"uint256\"},{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_message1\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint32\"},{\"name\":\"_header1\",\"type\":\"string\"},{\"name\":\"_header2\",\"type\":\"string\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"removeAccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message1\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint32\"},{\"name\":\"_header1\",\"type\":\"string\"},{\"name\":\"_header2\",\"type\":\"string\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"checkSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"encodeUInt\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"encodeAddress\",\"outputs\":[{\"name\":\"res\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_message1\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint32\"},{\"name\":\"_header1\",\"type\":\"string\"},{\"name\":\"_header2\",\"type\":\"string\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"constructUserIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"encodeString\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"identityContractAddress\",\"type\":\"address\"}],\"name\":\"UserIdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identityContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"keyAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"AccessorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identityContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"keyAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"AccessorRemoved\",\"type\":\"event\"}]","ContractName":"ZincAccessor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d3b04bc67c7c95af2fb8d93d74ec1c68207c2065fe678e738dafa4b9576daba"}]}