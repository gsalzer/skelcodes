{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Oasis.sol\r\n\r\n/*\r\n * OASIS is an international community of financially independent people,\r\n * united by the principles of trust and mutual assistance.\r\n * \r\n * This community was implemented based on the Ethereum smart contract.\r\n * The technology is completely transparent and has no analogues in the world.\r\n * Ethereum blockchain stores all the information concerning the distribution \r\n * of community finances.\r\n * \r\n * Smart contract stores the funds of community members, managing payments\r\n * according to the algorithm. This function allows the community to develop\r\n * on the principles of trust and mutual assistance.\r\n * \r\n * The community has activated smart contract’s “REFUSE FROM OWNERSHIP” function,\r\n * thus, no one can change this smart contract, including the community creators.\r\n * \r\n * The community distributes funds in accordance with the following scheme:\r\n *   80% for community members;\r\n *   15% for advertising budget;\r\n *   4% for technical support;\r\n *   1% to contribute to SENS Research Foundation.\r\n * \r\n * The profit is 3% for 24 hours (interest is accrued continuously).\r\n * The deposit is included in the payments, 50 days after the deposit is over and eliminated.\r\n * Minimum deposit is 0.01 ETH.\r\n * Each deposit is a new deposit contributed to the community.\r\n * No more than 50 deposits from one ETH wallet are allowed.\r\n * \r\n * Referral system:\r\n *   Line 1 - 3%\r\n *   Line 2 - 2%\r\n *   Line 3 - 1%\r\n * If you indicate your referral, you get 50% refback from Line 1.\r\n * \r\n * How to make a deposit:\r\n *   Send cryptocurrency from ETH wallet (at least 0.01 ETH) to the address\r\n *   of the smart contract - 0x0A5154E43F24a88d4396f67d8e394f2E92eE4f48\r\n * \r\n * Recommended limits are 200000 ETH, check the current ETH rate at\r\n * the following link: https://ethgasstation.info/\r\n * \r\n * How to get paid:\r\n *   Request your profit by sending 0 ETH to the address of the smart contract.\r\n * \r\n * It is not allowed to make transfers from cryptocurrency exchanges.\r\n * Only personal ETH wallet with private keys is allowed.\r\n * \r\n * The source code of this smart contract was created by CryptoManiacs.\r\n */\r\n\r\n\r\ncontract Oasis {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%\r\n    uint256 constant public DAILY_INTEREST = 300;                       // 3%\r\n    uint256 constant public MARKETING_FEE = 1500;                       // 15%\r\n    uint256 constant public TEAM_FEE = 400;                             // 4%\r\n    uint256 constant public CHARITY_FEE = 100;                          // 1%\r\n    uint256 constant public MAX_DEPOSIT_TIME = 50 days;                 // 150%\r\n    uint256 constant public REFERRER_ACTIVATION_PERIOD = 0;\r\n    uint256 constant public MAX_USER_DEPOSITS_COUNT = 50;\r\n    uint256 constant public REFBACK_PERCENT = 150;                      // 1.5%\r\n    uint256[] /*constant*/ public referralPercents = [150, 200, 100];   // 1.5%, 2%, 1%\r\n\r\n    struct Deposit {\r\n        uint256 time;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct User {\r\n        address referrer;\r\n        uint256 firstTime;\r\n        uint256 lastPayment;\r\n        Deposit[] deposits;\r\n    }\r\n\r\n    address public marketing = 0xDB6827de6b9Fc722Dc4EFa7e35f3b78c54932494;\r\n    address public team = 0x31CdA77ab136c8b971511473c3D04BBF7EAe8C0f;\r\n    address public charity = 0x36c92a9Da5256EaA5Ccc355415271b7d2682f32E;\r\n    uint256 public totalDeposits;\r\n    bool public running = true;\r\n    mapping(address => User) public users;\r\n\r\n    event InvestorAdded(address indexed investor);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);\r\n    event UserDividendPayed(address indexed investor, uint256 dividend);\r\n    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 totalPayed, uint256 dividend);\r\n    event ReferrerPayed(address indexed investor, address indexed referrer, uint256 amount, uint256 refAmount, uint256 indexed level);\r\n    event FeePayed(address indexed investor, uint256 amount);\r\n    event TotalDepositsChanged(uint256 totalDeposits);\r\n    event BalanceChanged(uint256 balance);\r\n    \r\n    function() public payable {\r\n        require(running, \"Oasis is not running\");\r\n        User storage user = users[msg.sender];\r\n\r\n        // Dividends\r\n        uint256[] memory dividends = dividendsForUser(msg.sender);\r\n        uint256 dividendsSum = _dividendsSum(dividends);\r\n        if (dividendsSum > 0) {\r\n            if (dividendsSum >= address(this).balance) {\r\n                dividendsSum = address(this).balance;\r\n                running = false;\r\n            }\r\n\r\n            msg.sender.transfer(dividendsSum);\r\n            user.lastPayment = now;\r\n            emit UserDividendPayed(msg.sender, dividendsSum);\r\n            for (uint i = 0; i < dividends.length; i++) {\r\n                emit DepositDividendPayed(\r\n                    msg.sender,\r\n                    i,\r\n                    user.deposits[i].amount,\r\n                    dividendsForAmountAndTime(user.deposits[i].amount, now.sub(user.deposits[i].time)),\r\n                    dividends[i]\r\n                );\r\n            }\r\n\r\n            // Cleanup deposits array a bit\r\n            for (i = 0; i < user.deposits.length; i++) {\r\n                if (now >= user.deposits[i].time.add(MAX_DEPOSIT_TIME)) {\r\n                    user.deposits[i] = user.deposits[user.deposits.length - 1];\r\n                    user.deposits.length -= 1;\r\n                    i -= 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deposit\r\n        if (msg.value > 0) {\r\n            if (user.firstTime == 0) {\r\n                user.firstTime = now;\r\n                user.lastPayment = now;\r\n                emit InvestorAdded(msg.sender);\r\n            }\r\n\r\n            // Create deposit\r\n            user.deposits.push(Deposit({\r\n                time: now,\r\n                amount: msg.value\r\n            }));\r\n            require(user.deposits.length <= MAX_USER_DEPOSITS_COUNT, \"Too many deposits per user\");\r\n            emit DepositAdded(msg.sender, user.deposits.length, msg.value);\r\n\r\n            // Add to total deposits\r\n            totalDeposits = totalDeposits.add(msg.value);\r\n            emit TotalDepositsChanged(totalDeposits);\r\n\r\n            // Add referral if possible\r\n            if (user.referrer == address(0) && msg.data.length == 20) {\r\n                address referrer = _bytesToAddress(msg.data);\r\n                if (referrer != address(0) && referrer != msg.sender && users[referrer].firstTime > 0 && now >= users[referrer].firstTime.add(REFERRER_ACTIVATION_PERIOD))\r\n                {\r\n                    user.referrer = referrer;\r\n                    msg.sender.transfer(msg.value.mul(REFBACK_PERCENT).div(ONE_HUNDRED_PERCENTS));\r\n                    emit ReferrerAdded(msg.sender, referrer);\r\n                }\r\n            }\r\n\r\n            // Referrers fees\r\n            referrer = users[msg.sender].referrer;\r\n            for (i = 0; referrer != address(0) && i < referralPercents.length; i++) {\r\n                uint256 refAmount = msg.value.mul(referralPercents[i]).div(ONE_HUNDRED_PERCENTS);\r\n                referrer.send(refAmount); // solium-disable-line security/no-send\r\n                emit ReferrerPayed(msg.sender, referrer, msg.value, refAmount, i);\r\n                referrer = users[referrer].referrer;\r\n            }\r\n\r\n            // Marketing and team fees\r\n            uint256 marketingFee = msg.value.mul(MARKETING_FEE).div(ONE_HUNDRED_PERCENTS);\r\n            uint256 teamFee = msg.value.mul(TEAM_FEE).div(ONE_HUNDRED_PERCENTS);\r\n            uint256 charityFee = msg.value.mul(CHARITY_FEE).div(ONE_HUNDRED_PERCENTS);\r\n            marketing.send(marketingFee); // solium-disable-line security/no-send\r\n            team.send(teamFee); // solium-disable-line security/no-send\r\n            charity.send(charityFee); // solium-disable-line security/no-send\r\n            emit FeePayed(msg.sender, marketingFee.add(teamFee));\r\n        }\r\n\r\n        // Create referrer for free\r\n        if (user.deposits.length == 0 && msg.value == 0) {\r\n            user.firstTime = now;\r\n        }\r\n        emit BalanceChanged(address(this).balance);\r\n    }\r\n\r\n    function depositsCountForUser(address wallet) public view returns(uint256) {\r\n        return users[wallet].deposits.length;\r\n    }\r\n\r\n    function depositForUser(address wallet, uint256 index) public view returns(uint256 time, uint256 amount) {\r\n        time = users[wallet].deposits[index].time;\r\n        amount = users[wallet].deposits[index].amount;\r\n    }\r\n\r\n    function dividendsSumForUser(address wallet) public view returns(uint256 dividendsSum) {\r\n        return _dividendsSum(dividendsForUser(wallet));\r\n    }\r\n\r\n    function dividendsForUser(address wallet) public view returns(uint256[] dividends) {\r\n        User storage user = users[wallet];\r\n        dividends = new uint256[](user.deposits.length);\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            uint256 howOld = now.sub(user.deposits[i].time);\r\n            uint256 duration = now.sub(user.lastPayment);\r\n            if (howOld > MAX_DEPOSIT_TIME) {\r\n                uint256 overtime = howOld.sub(MAX_DEPOSIT_TIME);\r\n                duration = duration.sub(overtime);\r\n            }\r\n\r\n            dividends[i] = dividendsForAmountAndTime(user.deposits[i].amount, duration);\r\n        }\r\n    }\r\n\r\n    function dividendsForAmountAndTime(uint256 amount, uint256 duration) public pure returns(uint256) {\r\n        return amount\r\n            .mul(DAILY_INTEREST).div(ONE_HUNDRED_PERCENTS)\r\n            .mul(duration).div(1 days);\r\n    }\r\n\r\n    function _bytesToAddress(bytes data) internal pure returns(address addr) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := mload(add(data, 20)) \r\n        }\r\n    }\r\n\r\n    function _dividendsSum(uint256[] dividends) internal pure returns(uint256 dividendsSum) {\r\n        for (uint i = 0; i < dividends.length; i++) {\r\n            dividendsSum = dividendsSum.add(dividends[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DAILY_INTEREST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"depositsCountForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFBACK_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_ACTIVATION_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"firstTime\",\"type\":\"uint256\"},{\"name\":\"lastPayment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHARITY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEPOSIT_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_USER_DEPOSITS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"depositForUser\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"dividendsForAmountAndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"dividendsSumForUser\",\"outputs\":[{\"name\":\"dividendsSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"depositsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"UserDividendPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPayed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"DepositDividendPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"ReferrerPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"TotalDepositsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"}]","ContractName":"Oasis","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a7b817466fad2a70e11c742c6fbe0dc09fc7438b8cbf2b59e1ccf2b827282cdf"}]}