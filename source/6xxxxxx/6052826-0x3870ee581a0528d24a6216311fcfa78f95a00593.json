{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n\r\n    event Pause(uint256 _timestammp);\r\n    event Unpause(uint256 _timestamp);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @notice called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal {\r\n        require(!paused);\r\n        paused = true;\r\n        emit Pause(now);\r\n    }\r\n\r\n    /**\r\n    * @notice called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal {\r\n        require(paused);\r\n        paused = false;\r\n        emit Unpause(now);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for the ST20 token standard\r\n */\r\ncontract IST20 is StandardToken, DetailedERC20 {\r\n\r\n    // off-chain hash\r\n    string public tokenDetails;\r\n\r\n    //transfer, transferFrom must respect use respect the result of verifyTransfer\r\n    function verifyTransfer(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice mints new tokens and assigns them to the target _investor.\r\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\r\n     */\r\n    function mint(address _investor, uint256 _amount) public returns (bool success);\r\n\r\n    /**\r\n     * @notice Burn function used to burn the securityToken\r\n     * @param _value No. of token that get burned\r\n     */\r\n    function burn(uint256 _value) public;\r\n\r\n    event Minted(address indexed to, uint256 amount);\r\n    event Burnt(address indexed _burner, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ncontract ISecurityToken is IST20, Ownable {\r\n\r\n    uint8 public constant PERMISSIONMANAGER_KEY = 1;\r\n    uint8 public constant TRANSFERMANAGER_KEY = 2;\r\n    uint8 public constant STO_KEY = 3;\r\n    uint8 public constant CHECKPOINT_KEY = 4;\r\n    uint256 public granularity;\r\n\r\n    // Value of current checkpoint\r\n    uint256 public currentCheckpointId;\r\n\r\n    // Total number of non-zero token holders\r\n    uint256 public investorCount;\r\n\r\n    // List of token holders\r\n    address[] public investors;\r\n\r\n    // Permissions this to a Permission module, which has a key of 1\r\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\r\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool);\r\n\r\n    /**\r\n     * @notice returns module list for a module type\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _moduleIndex is the index of the module within the chosen type\r\n     */\r\n    function getModule(uint8 _moduleType, uint _moduleIndex) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice returns module list for a module name - will return first match\r\n     * @param _moduleType is which type of module we are trying to remove\r\n     * @param _name is the name of the module within the chosen type\r\n     */\r\n    function getModuleByName(uint8 _moduleType, bytes32 _name) public view returns (bytes32, address);\r\n\r\n    /**\r\n     * @notice Queries totalSupply as of a defined checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Queries balances as of a defined checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() public returns(uint256);\r\n\r\n    /**\r\n     * @notice gets length of investors array\r\n     * NB - this length may differ from investorCount if list has not been pruned of zero balance investors\r\n     * @return length\r\n     */\r\n    function getInvestorsLength() public view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module factory contract should implement\r\n */\r\ncontract IModuleFactory is Ownable {\r\n\r\n    ERC20 public polyToken;\r\n    uint256 public setupCost;\r\n    uint256 public usageCost;\r\n    uint256 public monthlySubscriptionCost;\r\n\r\n    event LogChangeFactorySetupFee(uint256 _oldSetupcost, uint256 _newSetupCost, address _moduleFactory);\r\n    event LogChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\r\n    event LogChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\r\n    event LogGenerateModuleFromFactory(address _module, bytes32 indexed _moduleName, address indexed _moduleFactory, address _creator, uint256 _timestamp);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\r\n      polyToken = ERC20(_polyAddress);\r\n      setupCost = _setupCost;\r\n      usageCost = _usageCost;\r\n      monthlySubscriptionCost = _subscriptionCost;\r\n    }\r\n\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes _data) external returns(address);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getType() public view returns(uint8);\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() public view returns(bytes32);\r\n\r\n    /**\r\n     * @notice Get the description of the Module\r\n     */\r\n    function getDescription() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the title of the Module\r\n     */\r\n    function getTitle() public view returns(string);\r\n\r\n    /**\r\n     * @notice Get the Instructions that helped to used the module\r\n     */\r\n    function getInstructions() public view returns (string);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() public view returns (bytes32[]);\r\n\r\n    //Pull function sig from _data\r\n    function getSig(bytes _data) internal pure returns (bytes4 sig) {\r\n        uint len = _data.length < 4 ? _data.length : 4;\r\n        for (uint i = 0; i < len; i++) {\r\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the setup cost\r\n     * @param _newSetupCost new setup cost\r\n     */\r\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\r\n        emit LogChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\r\n        setupCost = _newSetupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the usage cost\r\n     * @param _newUsageCost new usage cost\r\n     */\r\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\r\n        emit LogChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\r\n        usageCost = _newUsageCost;\r\n    }\r\n\r\n    /**\r\n     * @notice used to change the fee of the subscription cost\r\n     * @param _newSubscriptionCost new subscription cost\r\n     */\r\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\r\n        emit LogChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\r\n        monthlySubscriptionCost = _newSubscriptionCost;\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module contract should implement\r\n */\r\ncontract IModule {\r\n\r\n    address public factory;\r\n\r\n    address public securityToken;\r\n\r\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\r\n\r\n    ERC20 public polyToken;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public {\r\n        securityToken = _securityToken;\r\n        factory = msg.sender;\r\n        polyToken = ERC20(_polyAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns (bytes4);\r\n\r\n    //Allows owner, factory or permissioned delegate\r\n    modifier withPerm(bytes32 _perm) {\r\n        bool isOwner = msg.sender == ISecurityToken(securityToken).owner();\r\n        bool isFactory = msg.sender == factory;\r\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == ISecurityToken(securityToken).owner(), \"Sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, \"Sender is not factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOwner {\r\n        require(msg.sender == IModuleFactory(factory).owner(), \"Sender is not factory owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with Module\r\n     */\r\n    function getPermissions() public view returns(bytes32[]);\r\n\r\n    /**\r\n     * @notice used to withdraw the fee by the factory owner\r\n     */\r\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\r\n        require(polyToken.transferFrom(address(this), IModuleFactory(factory).owner(), _amount), \"Unable to take fee\");\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface to be implemented by all Transfer Manager modules\r\n */\r\ncontract ITransferManager is IModule, Pausable {\r\n\r\n    //If verifyTransfer returns:\r\n    //  FORCE_VALID, the transaction will always be valid, regardless of other TM results\r\n    //  INVALID, then the transfer should not be allowed regardless of other TM results\r\n    //  VALID, then the transfer is valid for this TM\r\n    //  NA, then the result from this TM is ignored\r\n    enum Result {INVALID, NA, VALID, FORCE_VALID}\r\n\r\n    function verifyTransfer(address _from, address _to, uint256 _amount, bool _isTransfer) public returns(Result);\r\n\r\n    function unpause() onlyOwner public {\r\n        super._unpause();\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        super._pause();\r\n    }\r\n}\r\n\r\n/////////////////////\r\n// Module permissions\r\n/////////////////////\r\n//                                        Owner       WHITELIST      FLAGS\r\n// modifyWhitelist                          X             X\r\n// modifyWhitelistMulti                     X             X\r\n\r\n/**\r\n * @title Transfer Manager module for limiting percentage of token supply a single address can hold\r\n */\r\ncontract PercentageTransferManager is ITransferManager {\r\n    using SafeMath for uint256;\r\n\r\n    // Permission key for modifying the whitelist\r\n    bytes32 public constant WHITELIST = \"WHITELIST\";\r\n\r\n    // Maximum percentage that any holder can have, multiplied by 10**16 - e.g. 20% is 20 * 10**16\r\n    uint256 public maxHolderPercentage;\r\n\r\n    // Addresses on this list are always able to send / receive tokens\r\n    mapping (address => bool) public whitelist;\r\n\r\n    event LogModifyHolderPercentage(uint256 _oldHolderPercentage, uint256 _newHolderPercentage);\r\n    event LogModifyWhitelist(\r\n        address _investor,\r\n        uint256 _dateAdded,\r\n        address _addedBy,\r\n        bool    _valid\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress)\r\n    public\r\n    IModule(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    /// @notice Used to verify the transfer transaction according to the rule implemented in the trnasfer managers\r\n    function verifyTransfer(address /* _from */, address _to, uint256 _amount, bool /* _isTransfer */) public returns(Result) {\r\n        if (!paused) {\r\n            // If an address is on the whitelist, it is allowed to hold more than maxHolderPercentage of the tokens.\r\n            if (whitelist[_to]) {\r\n                return Result.NA;\r\n            }\r\n            uint256 newBalance = ISecurityToken(securityToken).balanceOf(_to).add(_amount);\r\n            if (newBalance.mul(10**uint256(ISecurityToken(securityToken).decimals())).div(ISecurityToken(securityToken).totalSupply()) > maxHolderPercentage) {\r\n                return Result.INVALID;\r\n            }\r\n            return Result.NA;\r\n        }\r\n        return Result.NA;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to intialize the variables of the contract\r\n     * @param _maxHolderPercentage Maximum amount of ST20 tokens(in %) can hold by the investor\r\n     */\r\n    function configure(uint256 _maxHolderPercentage) public onlyFactory {\r\n        maxHolderPercentage = _maxHolderPercentage;\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns (bytes4) {\r\n        return bytes4(keccak256(\"configure(uint256)\"));\r\n    }\r\n\r\n    /**\r\n    * @notice sets the maximum percentage that an individual token holder can hold\r\n    * @param _maxHolderPercentage is the new maximum percentage (multiplied by 10**16)\r\n    */\r\n    function changeHolderPercentage(uint256 _maxHolderPercentage) public onlyOwner {\r\n        emit LogModifyHolderPercentage(maxHolderPercentage, _maxHolderPercentage);\r\n        maxHolderPercentage = _maxHolderPercentage;\r\n    }\r\n\r\n    /**\r\n    * @notice adds or removes addresses from the whitelist.\r\n    * @param _investor is the address to whitelist\r\n    * @param _valid whether or not the address it to be added or removed from the whitelist\r\n    */\r\n    function modifyWhitelist(address _investor, bool _valid) public withPerm(WHITELIST) {\r\n        whitelist[_investor] = _valid;\r\n        emit LogModifyWhitelist(_investor, now, msg.sender, _valid);\r\n    }\r\n\r\n    /**\r\n    * @notice adds or removes addresses from the whitelist.\r\n    * @param _investors Array of the addresses to whitelist\r\n    * @param _valids Array of boolean value to decide whether or not the address it to be added or removed from the whitelist\r\n    */\r\n    function modifyWhitelistMulti(address[] _investors, bool[] _valids) public withPerm(WHITELIST) {\r\n        require(_investors.length == _valids.length, \"Input array length mis-match\");\r\n        for (uint i = 0; i < _investors.length; i++) {\r\n            modifyWhitelist(_investors[i], _valids[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with Percentage transfer Manager\r\n     */\r\n    function getPermissions() public view returns(bytes32[]) {\r\n        bytes32[] memory allPermissions = new bytes32[](1);\r\n        allPermissions[0] = WHITELIST;\r\n        return allPermissions;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Factory for deploying PercentageTransferManager module\r\n */\r\ncontract PercentageTransferManagerFactory is IModuleFactory {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\r\n      IModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice used to launch the Module with the help of factory\r\n     * @param _data Data used for the intialization of the module factory variables\r\n     * @return address Contract address of the Module\r\n     */\r\n    function deploy(bytes _data) external returns(address) {\r\n        if(setupCost > 0)\r\n            require(polyToken.transferFrom(msg.sender, owner, setupCost), \"Failed transferFrom because of sufficent Allowance is not provided\");\r\n        PercentageTransferManager percentageTransferManager = new PercentageTransferManager(msg.sender, address(polyToken));\r\n        require(getSig(_data) == percentageTransferManager.getInitFunction(), \"Provided data is not valid\");\r\n        require(address(percentageTransferManager).call(_data), \"Un-successfull call\");\r\n        emit LogGenerateModuleFromFactory(address(percentageTransferManager), getName(), address(this), msg.sender, now);\r\n        return address(percentageTransferManager);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     * @return uint8\r\n     */\r\n    function getType() public view returns(uint8) {\r\n        return 2;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() public view returns(bytes32) {\r\n        return \"PercentageTransferManager\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the description of the Module\r\n     */\r\n    function getDescription() public view returns(string) {\r\n        return \"Restrict the number of investors\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the title of the Module\r\n     */\r\n    function getTitle() public view returns(string) {\r\n        return \"Percentage Transfer Manager\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the Instructions that helped to used the module\r\n     */\r\n    function getInstructions() public view returns(string) {\r\n        return \"Allows an issuer to restrict the total number of non-zero token holders\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() public view returns(bytes32[]) {\r\n         bytes32[] memory availableTags = new bytes32[](2);\r\n        availableTags[0] = \"Percentage\";\r\n        availableTags[1] = \"Transfer Restriction\";\r\n        return availableTags;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlySubscriptionCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSubscriptionCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySubscriptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySetupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"changeFactoryUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyAddress\",\"type\":\"address\"},{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_subscriptionCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupcost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactorySetupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactoryUsageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newMonthlySubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"LogChangeFactorySubscriptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"LogGenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PercentageTransferManagerFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3ee0c219f477b57ade610afdb24a9026aede0863fe466e408b0ebf8b8327cd2b"}]}