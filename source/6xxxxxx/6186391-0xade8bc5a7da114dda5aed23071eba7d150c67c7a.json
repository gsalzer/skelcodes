{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract TIZACOIN {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name      = \"TIZACOIN\";                                   // Token name\r\n    string public symbol    = \"TIZA\";                                       // Token symbol\r\n    uint256 public decimals = 18;                                           // Token decimal points\r\n    uint256 public totalSupply  = 50000000 * (10 ** uint256(decimals));     // Token total supply\r\n\r\n    // Balances for each account\r\n    mapping (address => uint256) public balances;\r\n    \r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // variable to start and stop ico\r\n    bool public stopped = false;\r\n    uint public minEth  = 0.2 ether;\r\n\r\n    // contract owner\r\n    address public owner;\r\n    \r\n    // wallet address ethereum will going\r\n    address public wallet = 0xDb78138276E9401C908268E093A303f440733f1E;\r\n    \r\n    // number token we are going to provide in one ethereum\r\n    uint256 public tokenPerEth = 5000;\r\n\r\n    // struct to set ico stage detail\r\n    struct icoData {\r\n        uint256 icoStage;\r\n        uint256 icoStartDate;\r\n        uint256 icoEndDate;\r\n        uint256 icoFund;\r\n        uint256 icoBonus;\r\n        uint256 icoSold;\r\n    }\r\n    \r\n    // ico struct alias\r\n    icoData public ico;\r\n\r\n    // modifier to check sender is owner ot not\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // modifier to check ico is running ot not\r\n    modifier isRunning {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    // modifier to check ico is stopped ot not\r\n    modifier isStopped {\r\n        assert (stopped);\r\n        _;\r\n    }\r\n\r\n    // modifier to check sender is valid or not\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    // contract constructor\r\n    constructor(address _owner) public {\r\n        require( _owner != address(0) );\r\n        owner = _owner;\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(0x0, owner, totalSupply);\r\n    }\r\n    \r\n    // function to get the balance of a specific address\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        // Return the balance for the specific address\r\n        return balances[_address];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to].add(_value) >= balances[_to]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Send `tokens` amount of tokens from address `from` to address `to`\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(_from != address(0) && _to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to].add(_value) >= balances[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(_spender != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // set new ico stage\r\n    function setStage(uint256 _stage, uint256 _startDate, uint256 _endDate, uint256 _fund, uint256 _bonus) external isOwner returns(bool) {\r\n        \r\n        // current time must be greater then previous ico stage end time\r\n        require(now > ico.icoEndDate);\r\n        // current stage must be greater then previous ico stage \r\n        require(_stage > ico.icoStage);\r\n        // current time must be less then start new ico time\r\n        require(now < _startDate);\r\n        // new ico start time must be less then new ico stage end date\r\n        require(_startDate < _endDate);\r\n        // owner must have fund to start the ico stage\r\n        require(balances[msg.sender] >= _fund);\r\n        \r\n        //  calculate the token\r\n        uint tokens = _fund * (10 ** uint256(decimals));\r\n        \r\n        // set ico data\r\n        ico.icoStage        = _stage;\r\n        ico.icoStartDate    = _startDate;\r\n        ico.icoEndDate      = _endDate;\r\n        ico.icoFund         = tokens;\r\n        ico.icoBonus        = _bonus;\r\n        ico.icoSold         = 0;\r\n        \r\n        // transfer tokens to the contract\r\n        transfer( address(this), tokens );\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // set withdrawal wallet address\r\n    function setWithdrawalWallet(address _newWallet) external isOwner {\r\n        \r\n        // new and old address should not be same\r\n        require( _newWallet != wallet );\r\n        // new balance is valid or not\r\n        require( _newWallet != address(0) );\r\n        \r\n        // set new withdrawal wallet\r\n        wallet = _newWallet;\r\n        \r\n    }\r\n\r\n    // payable to send tokens who is paying to the contract\r\n    function() payable public isRunning validAddress  {\r\n        \r\n        // sender must send atleast 0.02 ETH\r\n        require(msg.value >= minEth);\r\n        // check for ico is active or not\r\n        require(now >= ico.icoStartDate && now <= ico.icoEndDate );\r\n\r\n        // calculate the tokens amount\r\n        uint tokens = msg.value * tokenPerEth;\r\n        // calculate the bounus\r\n        uint bonus  = ( tokens.mul(ico.icoBonus) ).div(100);\r\n        // add the bonus tokens to actual token amount\r\n        uint total  = tokens + bonus;\r\n\r\n        // ico must have the fund to send\r\n        require(ico.icoFund >= total);\r\n        // contract must have the balance to send\r\n        require(balances[address(this)] >= total);\r\n        // sender's new balance must be greate then old balance\r\n        require(balances[msg.sender].add(total) >= balances[msg.sender]);\r\n        \r\n        // update ico fund and sold token count\r\n        ico.icoFund      = ico.icoFund.sub(total);\r\n        ico.icoSold      = ico.icoSold.add(total);\r\n        \r\n        // send the tokens from contract to msg.sender\r\n        _sendTokens(address(this), msg.sender, total);\r\n        \r\n        // transfer ethereum to the withdrawal address\r\n        wallet.transfer( msg.value );\r\n        \r\n    }\r\n    \r\n    // function to get back the token from contract to owner\r\n    function withdrawTokens(address _address, uint256 _value) external isOwner validAddress {\r\n        \r\n        // check for valid address\r\n        require(_address != address(0) && _address != address(this));\r\n        \r\n        // calculate the tokens\r\n        uint256 tokens = _value * 10 ** uint256(decimals);\r\n        \r\n        // check contract have the sufficient balance\r\n        require(balances[address(this)] > tokens);\r\n        \r\n        // check for valid value of value params\r\n        require(balances[_address] < balances[_address].add(tokens));\r\n        \r\n        // send the tokens\r\n        _sendTokens(address(this), _address, tokens);\r\n        \r\n    }\r\n    \r\n    function _sendTokens(address _from, address _to, uint256 _tokens) internal {\r\n        \r\n         // deduct contract balance\r\n        balances[_from] = balances[_from].sub(_tokens);\r\n        // add balanc to the sender\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        // call the transfer event\r\n        emit Transfer(_from, _to, _tokens);\r\n        \r\n    }\r\n\r\n    // event to \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"icoStage\",\"type\":\"uint256\"},{\"name\":\"icoStartDate\",\"type\":\"uint256\"},{\"name\":\"icoEndDate\",\"type\":\"uint256\"},{\"name\":\"icoFund\",\"type\":\"uint256\"},{\"name\":\"icoBonus\",\"type\":\"uint256\"},{\"name\":\"icoSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWithdrawalWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_fund\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TIZACOIN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db78138276e9401c908268e093a303f440733f1e","Library":"","SwarmSource":"bzzr://57a1de01ef12f6fa44f1f47021d9a78ada821b2505bf0ea9dfbfce612954009b"}]}