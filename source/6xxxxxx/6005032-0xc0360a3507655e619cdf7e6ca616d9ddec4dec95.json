{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  event SaleAgentUpdated(address currentSaleAgent);\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  modifier notLocked() {\r\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n    SaleAgentUpdated(saleAgent);\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n  \r\n}\r\n\r\ncontract StagedCrowdsale is Pausable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  //Structure of stage information \r\n  struct Stage {\r\n    uint hardcap;\r\n    uint price;\r\n    uint invested;\r\n    uint closed;\r\n  }\r\n\r\n  //start date of sale\r\n  uint public start;\r\n\r\n  //period in days of sale\r\n  uint public period;\r\n\r\n  //sale's hardcap\r\n  uint public totalHardcap;\r\n \r\n  //total invested so far in the sale in wei\r\n  uint public totalInvested;\r\n\r\n  //sale's softcap\r\n  uint public softcap;\r\n\r\n  //sale's stages\r\n  Stage[] public stages;\r\n\r\n  event MilestoneAdded(uint hardcap, uint price);\r\n\r\n  modifier saleIsOn() {\r\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n\r\n  modifier saleIsFinished() {\r\n    require(totalInvested >= softcap || now > lastSaleDate());\r\n    _;\r\n  }\r\n  \r\n  modifier isUnderHardcap() {\r\n    require(totalInvested <= totalHardcap);\r\n    _;\r\n  }\r\n\r\n  modifier saleIsUnsuccessful() {\r\n    require(totalInvested < softcap || now > lastSaleDate());\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * counts current sale's stages\r\n    */\r\n  function stagesCount() public constant returns(uint) {\r\n    return stages.length;\r\n  }\r\n\r\n  /**\r\n    * sets softcap\r\n    * @param newSoftcap new softcap\r\n    */\r\n  function setSoftcap(uint newSoftcap) public onlyOwner {\r\n    require(newSoftcap > 0);\r\n    softcap = newSoftcap.mul(1 ether);\r\n  }\r\n\r\n  /**\r\n    * sets start date\r\n    * @param newStart new softcap\r\n    */\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  /**\r\n    * sets period of sale\r\n    * @param newPeriod new period of sale\r\n    */\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n\r\n  /**\r\n    * adds stage to sale\r\n    * @param hardcap stage's hardcap in ethers\r\n    * @param price stage's price\r\n    */\r\n  function addStage(uint hardcap, uint price) public onlyOwner {\r\n    require(hardcap > 0 && price > 0);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    stages.push(stage);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n    MilestoneAdded(hardcap, price);\r\n  }\r\n\r\n  /**\r\n    * removes stage from sale\r\n    * @param number index of item to delete\r\n    */\r\n  function removeStage(uint8 number) public onlyOwner {\r\n    require(number >= 0 && number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    delete stages[number];\r\n    for (uint i = number; i < stages.length - 1; i++) {\r\n      stages[i] = stages[i+1];\r\n    }\r\n    stages.length--;\r\n  }\r\n\r\n  /**\r\n    * updates stage\r\n    * @param number index of item to update\r\n    * @param hardcap stage's hardcap in ethers\r\n    * @param price stage's price\r\n    */\r\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\r\n    require(number >= 0 && number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    stage.hardcap = hardcap.mul(1 ether);\r\n    stage.price = price;\r\n    totalHardcap = totalHardcap.add(stage.hardcap);    \r\n  }\r\n\r\n  /**\r\n    * inserts stage\r\n    * @param numberAfter index to insert\r\n    * @param hardcap stage's hardcap in ethers\r\n    * @param price stage's price\r\n    */\r\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\r\n    require(numberAfter < stages.length);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n    stages.length++;\r\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\r\n      stages[i + 1] = stages[i];\r\n    }\r\n    stages[numberAfter + 1] = stage;\r\n  }\r\n\r\n  /**\r\n    * deletes all stages\r\n    */\r\n  function clearStages() public onlyOwner {\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      delete stages[i];\r\n    }\r\n    stages.length -= stages.length;\r\n    totalHardcap = 0;\r\n  }\r\n\r\n  /**\r\n    * calculates last sale date\r\n    */\r\n  function lastSaleDate() public constant returns(uint) {\r\n    return start + period * 1 days;\r\n  }  \r\n\r\n  /**\r\n    * returns index of current stage\r\n    */\r\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\r\n    for(uint i = 0; i < stages.length; i++) {\r\n      if(stages[i].closed == 0) {\r\n        return i;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract CommonSale is StagedCrowdsale {\r\n\r\n  //Our MYTC token\r\n  MYTCToken public token;  \r\n\r\n  //slave wallet percentage\r\n  uint public slaveWalletPercent = 50;\r\n\r\n  //total percent rate\r\n  uint public percentRate = 100;\r\n\r\n  //min investment value in wei\r\n  uint public minInvestment;\r\n  \r\n  //bool to check if wallet is initialized\r\n  bool public slaveWalletInitialized;\r\n\r\n  //bool to check if wallet percentage is initialized\r\n  bool public slaveWalletPercentInitialized;\r\n\r\n  //master wallet address\r\n  address public masterWallet;\r\n\r\n  //slave wallet address\r\n  address public slaveWallet;\r\n  \r\n  //Agent for direct minting\r\n  address public directMintAgent;\r\n\r\n  // How much ETH each address has invested in crowdsale\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  // How much tokens crowdsale has credited for each investor address\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  // Crowdsale contributors\r\n  mapping (uint => address) public contributors;\r\n\r\n  // Crowdsale unique contributors number\r\n  uint public uniqueContributors;  \r\n\r\n  /**\r\n      * event for token purchases logging\r\n      * @param purchaser who paid for the tokens\r\n      * @param value weis paid for purchase\r\n      * @param purchaseDate time of log\r\n      */\r\n  event TokenPurchased(address indexed purchaser, uint256 value, uint256 purchaseDate);\r\n\r\n  /**\r\n      * event for token mint logging\r\n      * @param to tokens destination\r\n      * @param tokens minted\r\n      * @param mintedDate time of log\r\n      */\r\n  event TokenMinted(address to, uint tokens, uint256 mintedDate);\r\n\r\n  /**\r\n      * event for token refund\r\n      * @param investor refunded account address\r\n      * @param amount weis refunded\r\n      * @param returnDate time of log\r\n      */\r\n  event InvestmentReturned(address indexed investor, uint256 amount, uint256 returnDate);\r\n  \r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }  \r\n\r\n  /**\r\n    * sets MYTC token\r\n    * @param newToken new token\r\n    */\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MYTCToken(newToken);\r\n  }\r\n\r\n  /**\r\n    * sets minimum investement threshold\r\n    * @param newMinInvestment new minimum investement threshold\r\n    */\r\n  function setMinInvestment(uint newMinInvestment) public onlyOwner {\r\n    minInvestment = newMinInvestment;\r\n  }  \r\n\r\n  /**\r\n    * sets master wallet address\r\n    * @param newMasterWallet new master wallet address\r\n    */\r\n  function setMasterWallet(address newMasterWallet) public onlyOwner {\r\n    masterWallet = newMasterWallet;\r\n  }\r\n\r\n  /**\r\n    * sets slave wallet address\r\n    * @param newSlaveWallet new slave wallet address\r\n    */\r\n  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\r\n    require(!slaveWalletInitialized);\r\n    slaveWallet = newSlaveWallet;\r\n    slaveWalletInitialized = true;\r\n  }\r\n\r\n  /**\r\n    * sets slave wallet percentage\r\n    * @param newSlaveWalletPercent new wallet percentage\r\n    */\r\n  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\r\n    require(!slaveWalletPercentInitialized);\r\n    slaveWalletPercent = newSlaveWalletPercent;\r\n    slaveWalletPercentInitialized = true;\r\n  }\r\n\r\n  /**\r\n    * sets direct mint agent\r\n    * @param newDirectMintAgent new agent\r\n    */\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }  \r\n\r\n  /**\r\n    * mints directly from network\r\n    * @param to invesyor's adress to transfer the minted tokens to\r\n    * @param investedWei number of wei invested\r\n    */\r\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\r\n    calculateAndMintTokens(to, investedWei);\r\n    TokenPurchased(to, investedWei, now);\r\n  }\r\n\r\n  /**\r\n    * splits investment into master and slave wallets for security reasons\r\n    */\r\n  function createTokens() public whenNotPaused payable {\r\n    require(msg.value >= minInvestment);\r\n    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\r\n    uint slaveValue = msg.value.sub(masterValue);\r\n    masterWallet.transfer(masterValue);\r\n    slaveWallet.transfer(slaveValue);\r\n    calculateAndMintTokens(msg.sender, msg.value);\r\n    TokenPurchased(msg.sender, msg.value, now);\r\n  }\r\n\r\n  /**\r\n    * Calculates and records contributions\r\n    * @param to invesyor's adress to transfer the minted tokens to\r\n    * @param weiInvested number of wei invested\r\n    */\r\n  function calculateAndMintTokens(address to, uint weiInvested) internal {\r\n    //calculate number of tokens\r\n    uint stageIndex = currentStage();\r\n    Stage storage stage = stages[stageIndex];\r\n    uint tokens = weiInvested.mul(stage.price);\r\n    //if we have a new contributor\r\n    if(investedAmountOf[msg.sender] == 0) {\r\n        contributors[uniqueContributors] = msg.sender;\r\n        uniqueContributors += 1;\r\n    }\r\n    //record contribution and tokens assigned\r\n    investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(weiInvested);\r\n    tokenAmountOf[msg.sender] = tokenAmountOf[msg.sender].add(tokens);\r\n    //mint and update invested values\r\n    mintTokens(to, tokens);\r\n    totalInvested = totalInvested.add(weiInvested);\r\n    stage.invested = stage.invested.add(weiInvested);\r\n    //check if cap of staged is reached\r\n    if(stage.invested >= stage.hardcap) {\r\n      stage.closed = now;\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Mint tokens\r\n    * @param to adress destination to transfer the tokens to\r\n    * @param tokens number of tokens to mint and transfer\r\n    */\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n    TokenMinted(to, tokens, now);\r\n  }\r\n\r\n  /**\r\n    * Payable function\r\n    */\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n  \r\n  /**\r\n    * Function to retrieve and transfer back external tokens\r\n    * @param anotherToken external token received\r\n    * @param to address destination to transfer the token to\r\n    */\r\n  function retrieveExternalTokens(address anotherToken, address to) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n  /**\r\n    * Function to refund funds if softcap is not reached and sale period is over \r\n    */\r\n  function refund() public saleIsUnsuccessful {\r\n    uint value = investedAmountOf[msg.sender];\r\n    investedAmountOf[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n    InvestmentReturned(msg.sender, value, now);\r\n  }\r\n\r\n}\r\n\r\ncontract WhiteListToken is CommonSale {\r\n\r\n  mapping(address => bool)  public whiteList;\r\n\r\n  modifier onlyIfWhitelisted() {\r\n    require(whiteList[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function addToWhiteList(address _address) public onlyDirectMintAgentOrOwner {\r\n    whiteList[_address] = true;\r\n  }\r\n\r\n  function addAddressesToWhitelist(address[] _addresses) public onlyDirectMintAgentOrOwner {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      addToWhiteList(_addresses[i]);\r\n    }\r\n  }\r\n\r\n  function deleteFromWhiteList(address _address) public onlyDirectMintAgentOrOwner {\r\n    whiteList[_address] = false;\r\n  }\r\n\r\n  function deleteAddressesFromWhitelist(address[] _addresses) public onlyDirectMintAgentOrOwner {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      deleteFromWhiteList(_addresses[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract MYTCToken is MintableToken {\t\r\n    \r\n  //Token name\r\n  string public constant name = \"MYTC\";\r\n   \r\n  //Token symbol\r\n  string public constant symbol = \"MYTC\";\r\n    \r\n  //Token's number of decimals\r\n  uint32 public constant decimals = 18;\r\n\r\n  //Dictionary with locked accounts\r\n  mapping (address => uint) public locked;\r\n\r\n  /**\r\n    * transfer for unlocked accounts\r\n    */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(locked[msg.sender] < now);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n    * transfer from for unlocked accounts\r\n    */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(locked[_from] < now);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  /**\r\n    * locks an account for given a number of days\r\n    * @param addr account address to be locked\r\n    * @param periodInDays days to be locked\r\n    */\r\n  function lock(address addr, uint periodInDays) public {\r\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\r\n    locked[addr] = now + periodInDays * 1 days;\r\n  }\r\n\r\n}\r\n\r\ncontract PreTge is CommonSale {\r\n\r\n  //TGE \r\n  Tge public tge;\r\n\r\n  /**\r\n      * event for PreTGE finalization logging\r\n      * @param finalizer account who trigger finalization\r\n      * @param saleEnded time of log\r\n      */\r\n  event PreTgeFinalized(address indexed finalizer, uint256 saleEnded);\r\n\r\n  /**\r\n    * sets TGE to pass agent when sale is finished\r\n    * @param newMainsale adress of TGE contract\r\n    */\r\n  function setMainsale(address newMainsale) public onlyOwner {\r\n    tge = Tge(newMainsale);\r\n  }\r\n\r\n  /**\r\n    * sets TGE as new sale agent when sale is finished\r\n    */\r\n  function setTgeAsSaleAgent() public whenNotPaused saleIsFinished onlyOwner {\r\n    token.setSaleAgent(tge);\r\n    PreTgeFinalized(msg.sender, now);\r\n  }\r\n}\r\n\r\n\r\ncontract Tge is WhiteListToken {\r\n\r\n  //Team wallet address\r\n  address public teamTokensWallet;\r\n  \r\n  //Bounty and advisors wallet address\r\n  address public bountyTokensWallet;\r\n\r\n  //Reserved tokens wallet address\r\n  address public reservedTokensWallet;\r\n  \r\n  //Team percentage\r\n  uint public teamTokensPercent;\r\n  \r\n  //Bounty and advisors percentage\r\n  uint public bountyTokensPercent;\r\n\r\n  //Reserved tokens percentage\r\n  uint public reservedTokensPercent;\r\n  \r\n  //Lock period in days for team's wallet\r\n  uint public lockPeriod;  \r\n\r\n  //maximum amount of tokens ever minted\r\n  uint public totalTokenSupply;\r\n\r\n  /**\r\n      * event for TGE finalization logging\r\n      * @param finalizer account who trigger finalization\r\n      * @param saleEnded time of log\r\n      */\r\n  event TgeFinalized(address indexed finalizer, uint256 saleEnded);\r\n\r\n  /**\r\n    * sets lock period in days for team's wallet\r\n    * @param newLockPeriod new lock period in days\r\n    */\r\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\r\n    lockPeriod = newLockPeriod;\r\n  }\r\n\r\n  /**\r\n    * sets percentage for team's wallet\r\n    * @param newTeamTokensPercent new percentage for team's wallet\r\n    */\r\n  function setTeamTokensPercent(uint newTeamTokensPercent) public onlyOwner {\r\n    teamTokensPercent = newTeamTokensPercent;\r\n  }\r\n\r\n  /**\r\n    * sets percentage for bounty's wallet\r\n    * @param newBountyTokensPercent new percentage for bounty's wallet\r\n    */\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  /**\r\n    * sets percentage for reserved wallet\r\n    * @param newReservedTokensPercent new percentage for reserved wallet\r\n    */\r\n  function setReservedTokensPercent(uint newReservedTokensPercent) public onlyOwner {\r\n    reservedTokensPercent = newReservedTokensPercent;\r\n  }\r\n  \r\n  /**\r\n    * sets max number of tokens to ever mint\r\n    * @param newTotalTokenSupply max number of tokens (incl. 18 dec points)\r\n    */\r\n  function setTotalTokenSupply(uint newTotalTokenSupply) public onlyOwner {\r\n    totalTokenSupply = newTotalTokenSupply;\r\n  }\r\n\r\n  /**\r\n    * sets address for team's wallet\r\n    * @param newTeamTokensWallet new address for team's wallet\r\n    */\r\n  function setTeamTokensWallet(address newTeamTokensWallet) public onlyOwner {\r\n    teamTokensWallet = newTeamTokensWallet;\r\n  }\r\n\r\n  /**\r\n    * sets address for bountys's wallet\r\n    * @param newBountyTokensWallet new address for bountys's wallet\r\n    */\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  /**\r\n    * sets address for reserved wallet\r\n    * @param newReservedTokensWallet new address for reserved wallet\r\n    */\r\n  function setReservedTokensWallet(address newReservedTokensWallet) public onlyOwner {\r\n    reservedTokensWallet = newReservedTokensWallet;\r\n  }\r\n\r\n  /**\r\n    * Mints remaining tokens and finishes minting when sale is successful\r\n    * No further tokens will be minted ever\r\n    */\r\n  function endSale() public whenNotPaused saleIsFinished onlyOwner {    \r\n    // uint remainingPercentage = bountyTokensPercent.add(teamTokensPercent).add(reservedTokensPercent);\r\n    // uint tokensGenerated = token.totalSupply();\r\n\r\n    uint foundersTokens = totalTokenSupply.mul(teamTokensPercent).div(percentRate);\r\n    uint reservedTokens = totalTokenSupply.mul(reservedTokensPercent).div(percentRate);\r\n    uint bountyTokens = totalTokenSupply.mul(bountyTokensPercent).div(percentRate); \r\n    mintTokens(reservedTokensWallet, reservedTokens);\r\n    mintTokens(teamTokensWallet, foundersTokens);\r\n    mintTokens(bountyTokensWallet, bountyTokens); \r\n    uint currentSupply = token.totalSupply();\r\n    if (currentSupply < totalTokenSupply) {\r\n      // send remaining tokens to reserved wallet\r\n      mintTokens(reservedTokensWallet, totalTokenSupply.sub(currentSupply));\r\n    }  \r\n    token.lock(teamTokensWallet, lockPeriod);      \r\n    token.finishMinting();\r\n    TgeFinalized(msg.sender, now);\r\n  }\r\n\r\n    /**\r\n    * Payable function\r\n    */\r\n  function() external onlyIfWhitelisted payable {\r\n    require(now >= start && now < lastSaleDate());\r\n    createTokens();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveExternalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slaveWalletPercentInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slaveWalletPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"investedWei\",\"type\":\"uint256\"}],\"name\":\"directMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directMintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMainsale\",\"type\":\"address\"}],\"name\":\"setMainsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirectMintAgent\",\"type\":\"address\"}],\"name\":\"setDirectMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearStages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"closed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMasterWallet\",\"type\":\"address\"}],\"name\":\"setMasterWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tge\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slaveWalletInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestment\",\"type\":\"uint256\"}],\"name\":\"setMinInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSlaveWallet\",\"type\":\"address\"}],\"name\":\"setSlaveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTgeAsSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniqueContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSlaveWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setSlaveWalletPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"insertStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slaveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"finalizer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"saleEnded\",\"type\":\"uint256\"}],\"name\":\"PreTgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaseDate\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mintedDate\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"returnDate\",\"type\":\"uint256\"}],\"name\":\"InvestmentReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hardcap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MilestoneAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreTge","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d550637e7afe933b34087d05b8452112b1b13228e0c971e7505641fd7685386d"}]}