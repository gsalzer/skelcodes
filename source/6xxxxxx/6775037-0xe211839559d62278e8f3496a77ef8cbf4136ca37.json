{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * luck100.win - Fair Ethereum game platform\r\n * \r\n * OutLuck100\r\n * More exciting game than Fomo3D\r\n * \r\n * 1. One out of every three new coupons will be awarded 180% of the proceeds;\r\n * \r\n * 2. Inviting others to buy lottery tickets can permanently earn 10% of the proceeds;\r\n * \r\n * 3. 1% income per day sign-in\r\n */\r\n \r\ncontract Ownable {\r\n  address public owner;\r\n  address public admin;\r\n  uint256 public lockedIn;\r\n  uint256 public OWNER_AMOUNT;\r\n  uint256 public OWNER_PERCENT = 2;\r\n  uint256 public OWNER_MIN = 0.0001 ether;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor(address addr, uint256 percent, uint256 min) public {\r\n    require(addr != address(0), 'invalid addr');\r\n    owner = msg.sender;\r\n    admin = addr;\r\n    OWNER_PERCENT = percent;\r\n    OWNER_MIN = min;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender==owner || msg.sender==admin);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function _cash() public view returns(uint256){\r\n      return address(this).balance;\r\n  }\r\n\r\n  /*function kill() onlyOwner public{\r\n    require(lockedIn == 0, \"invalid lockedIn\");\r\n    selfdestruct(owner);\r\n  }*/\r\n\r\n  function setAdmin(address addr) onlyOwner public{\r\n      require(addr != address(0), 'invalid addr');\r\n      admin = addr;\r\n  }\r\n\r\n  function setOwnerPercent(uint256 percent) onlyOwner public{\r\n      OWNER_PERCENT = percent;\r\n  }\r\n\r\n  function setOwnerMin(uint256 min) onlyOwner public{\r\n      OWNER_MIN = min;\r\n  }\r\n\r\n  function _fee() internal returns(uint256){\r\n      uint256 fe = msg.value*OWNER_PERCENT/100;\r\n      if(fe < OWNER_MIN){\r\n          fe = OWNER_MIN;\r\n      }\r\n      OWNER_AMOUNT += fe;\r\n      return fe;\r\n  }\r\n\r\n  function cashOut() onlyOwner public{\r\n    require(OWNER_AMOUNT > 0, 'invalid OWNER_AMOUNT');\r\n    owner.send(OWNER_AMOUNT);\r\n  }\r\n\r\n  modifier isHuman() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength == 0, \"sorry humans only\");\r\n      _;\r\n  }\r\n\r\n  modifier isContract() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength > 0, \"sorry contract only\");\r\n      _;\r\n  }\r\n}\r\n\r\ncontract OutLuck100 is Ownable{\r\n  event recEvent(address indexed addr, uint256 amount, uint8 tn, uint256 ts);\r\n\r\n  struct CardType{\r\n      uint256 price;\r\n      uint256 signCount;\r\n      uint8 signRate;\r\n      uint8 outRate;\r\n  }\r\n  struct Card{\r\n      address holder;\r\n      uint256 blockNumber;\r\n      uint256 signCount;\r\n      uint256 sn;\r\n      uint8 typeId;\r\n      bool isOut;\r\n  }\r\n  struct User{\r\n      address parentAddr;\r\n      uint256 balance;\r\n      uint256[] cids;\r\n      address[] subs;\r\n  }\r\n\r\n  User _u;\r\n  CardType[4] public cts;\r\n  Card[] public cardList;\r\n  uint256[] cardIds1;\r\n  uint256[] cardIds2;\r\n  uint256[] cardIds3;\r\n  mapping(address=>User) public userList;\r\n  mapping(address=>bool) public userExists;\r\n  mapping(bytes6=>address) public codeList;\r\n  uint256 pool_sign = 0;\r\n  uint256 constant public PAY_LIMIT = 0.1 ether;\r\n  uint256 constant public DAY_STEP = 5900;\r\n  uint8 constant public MOD = 3;\r\n  uint8 constant public inviteRate = 10;\r\n  uint8 constant public signRate = 38;\r\n\r\n  constructor(address addr, uint256 percent, uint256 min) Ownable(addr, percent, min) public{\r\n      cts[0] = CardType({price:0, signCount:0, signRate:0, outRate:0});\r\n      cts[1] = CardType({price:0.5 ether, signCount:100, signRate:1, outRate:120});\r\n      cts[2] = CardType({price:1 ether, signCount:130, signRate:1, outRate:150});\r\n      cts[3] = CardType({price:2 ether, signCount:150, signRate:1, outRate:180});\r\n  }\r\n\r\n  function() public payable{\r\n\r\n  }\r\n\r\n  function buyCode(bytes6 mcode) onlyOwner public payable{\r\n      require(codeList[mcode]==address(0), 'code is Exists');\r\n      codeList[mcode] = msg.sender;\r\n  }\r\n\r\n  function buyCard(bytes6 pcode, bytes6 mcode) public payable{\r\n      require(pcode!=mcode, 'code is invalid');\r\n      uint256 amount = msg.value;\r\n      uint8 typeId = 0;\r\n      for(uint8 i=1;i<cts.length;i++){\r\n          if(amount==cts[i].price){\r\n              typeId = i;\r\n              break;\r\n          }\r\n      }\r\n      require(typeId>0, 'pay amount is valid');\r\n\r\n      _fee();\r\n      pool_sign += amount*signRate/100;\r\n      emit recEvent(msg.sender, amount, 1, now);\r\n\r\n      if(!userExists[msg.sender]){//创建用户\r\n          userExists[msg.sender] = true;\r\n          userList[msg.sender] = _u;\r\n          address parentAddr = codeList[pcode];\r\n          if(parentAddr!=address(0)){\r\n              if(!userExists[parentAddr]){\r\n                  userExists[parentAddr] = true;\r\n                  userList[parentAddr] = _u;\r\n              }\r\n              userList[msg.sender].parentAddr = parentAddr;\r\n              userList[parentAddr].subs.push(msg.sender);\r\n          }\r\n      }\r\n\r\n      User storage me = userList[msg.sender];\r\n      uint256 cid = cardList.length;\r\n      me.cids.push(cid);\r\n      if(me.parentAddr!=address(0)){\r\n          uint256 e = amount*inviteRate/100;\r\n          userList[me.parentAddr].balance += e;\r\n          emit recEvent(me.parentAddr, e, 2, now);\r\n          payment(me.parentAddr);\r\n      }\r\n\r\n      cardList.push(Card({\r\n          holder:msg.sender,\r\n          blockNumber:block.number,\r\n          signCount:0,\r\n          sn:0,\r\n          typeId:typeId,\r\n          isOut:false\r\n      }));\r\n\r\n      if(typeId==1){\r\n          cardIds1.push(cid);\r\n          out(cardIds1);\r\n      }else if(typeId==2){\r\n          cardIds2.push(cid);\r\n          out(cardIds2);\r\n      }else if(typeId==3){\r\n          cardIds3.push(cid);\r\n          out(cardIds3);\r\n      }\r\n\r\n      if(codeList[mcode]==address(0) && typeId>1){\r\n         codeList[mcode] = msg.sender;\r\n         emit recEvent(msg.sender, 0, 6, now);\r\n      }\r\n  }\r\n\r\n  function sign() public payable{\r\n      User storage me = userList[msg.sender];\r\n      CardType memory ct = cts[0];\r\n      uint256[] memory cids = me.cids;\r\n      uint256 e = 0;\r\n      uint256 s = 0;\r\n      uint256 n = 0;\r\n      for(uint256 i=0;i<cids.length;i++){\r\n          Card storage c = cardList[cids[i]];\r\n          ct = cts[c.typeId];\r\n          if(c.signCount>=ct.signCount || c.blockNumber+DAY_STEP>block.number) continue;\r\n          n = (block.number-c.blockNumber)/DAY_STEP;\r\n          if(c.signCount+n>=ct.signCount){\r\n              c.signCount = ct.signCount;\r\n          }else{\r\n              c.signCount += n;\r\n          }\r\n          c.sn++;\r\n          c.blockNumber = block.number;\r\n          e = ct.price*ct.signRate/100;\r\n          s += e;\r\n      }\r\n      if(s==0) return ;\r\n      emit recEvent(msg.sender, s, 4, now);\r\n      if(pool_sign<s) return ;\r\n      me.balance += s;\r\n      pool_sign -= s;\r\n      payment(msg.sender);\r\n  }\r\n\r\n  function out(uint256[] cids) private{\r\n      uint256 len = cids.length;\r\n      if(len<MOD) return ;\r\n      uint256 outIdx = len-1;\r\n      if(outIdx%MOD!=0) return ;\r\n      outIdx = cids[outIdx/MOD-1];\r\n      Card storage outCard = cardList[outIdx];\r\n      if(outCard.isOut) return ;\r\n      outCard.isOut = true;\r\n      CardType memory ct = cts[outCard.typeId];\r\n      uint256 e = ct.price*ct.outRate/100;\r\n      userList[outCard.holder].balance += e;\r\n      emit recEvent(outCard.holder, e, 3, now);\r\n      payment(outCard.holder);\r\n  }\r\n\r\n  function payment(address addr) private{\r\n      User storage me = userList[addr];\r\n      uint256 ba = me.balance;\r\n      if(ba >= PAY_LIMIT){\r\n          me.balance = 0;\r\n          addr.send(ba);\r\n          emit recEvent(addr, ba, 5, now);\r\n      }\r\n  }\r\n  \r\n  function getUserInfo(address addr, bytes6 mcode) public view returns(\r\n    address parentAddr,\r\n    address codeAddr,\r\n    uint256 balance,\r\n    address[] subs,\r\n    uint256[] cids\r\n    ){\r\n      User memory me = userList[addr];\r\n      parentAddr = me.parentAddr;\r\n      codeAddr = codeList[mcode];\r\n      balance = me.balance;\r\n      subs = me.subs;\r\n      cids = me.cids;\r\n    }\r\n\r\n  function getUser(address addr) public view returns(\r\n    uint256 balance,\r\n    address[] subs,\r\n    uint256[] cids,\r\n    uint256[] bns,\r\n    uint256[] scs,\r\n    uint256[] sns,\r\n    uint8[] ts,\r\n    bool[] os\r\n  ){\r\n      User memory me = userList[addr];\r\n      balance = me.balance;\r\n      subs = me.subs;\r\n      cids = me.cids;\r\n      uint256 len = cids.length;\r\n      if(len==0) return ;\r\n      bns = new uint256[](len);\r\n      scs = new uint256[](len);\r\n      sns = new uint256[](len);\r\n      ts = new uint8[](len);\r\n      os = new bool[](len);\r\n      for(uint256 i=0;i<len;i++){\r\n          Card memory c = cardList[cids[i]];\r\n          bns[i] = c.blockNumber;\r\n          scs[i] = c.signCount;\r\n          sns[i] = c.sn;\r\n          ts[i] = c.typeId;\r\n          os[i] = c.isOut;\r\n      }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes6\"}],\"name\":\"codeList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cts\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"signCount\",\"type\":\"uint256\"},{\"name\":\"signRate\",\"type\":\"uint8\"},{\"name\":\"outRate\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"parentAddr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_cash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sign\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setOwnerMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mcode\",\"type\":\"bytes6\"}],\"name\":\"buyCode\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"subs\",\"type\":\"address[]\"},{\"name\":\"cids\",\"type\":\"uint256[]\"},{\"name\":\"bns\",\"type\":\"uint256[]\"},{\"name\":\"scs\",\"type\":\"uint256[]\"},{\"name\":\"sns\",\"type\":\"uint256[]\"},{\"name\":\"ts\",\"type\":\"uint8[]\"},{\"name\":\"os\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setOwnerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pcode\",\"type\":\"bytes6\"},{\"name\":\"mcode\",\"type\":\"bytes6\"}],\"name\":\"buyCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardList\",\"outputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"signCount\",\"type\":\"uint256\"},{\"name\":\"sn\",\"type\":\"uint256\"},{\"name\":\"typeId\",\"type\":\"uint8\"},{\"name\":\"isOut\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"mcode\",\"type\":\"bytes6\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"parentAddr\",\"type\":\"address\"},{\"name\":\"codeAddr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"subs\",\"type\":\"address[]\"},{\"name\":\"cids\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tn\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"recEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OutLuck100","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c54427a77b54304cbae1e76815b7935a817f44a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e5a1f2580996330902955d22633211328043a61a1a7b24dcc6f860deb44e93ed"}]}