{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\interfaces\\ERC20_Interface.sol\r\n\r\n//ERC20 function interface\r\ninterface ERC20_Interface {\r\n  function totalSupply() external constant returns (uint);\r\n  function balanceOf(address _owner) external constant returns (uint);\r\n  function transfer(address _to, uint _amount) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint _amount) external returns (bool);\r\n  function approve(address _spender, uint _amount) external returns (bool);\r\n  function allowance(address _owner, address _spender) external constant returns (uint);\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\n//Slightly modified SafeMath library - includes a min function\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts\\Exchange.sol\r\n\r\n/**\r\n*Exchange creates an exchange for the swaps.\r\n*/\r\ncontract Exchange{ \r\n    using SafeMath for uint256;\r\n\r\n    /*Variables*/\r\n\r\n    \r\n    /*Structs*/\r\n    //This is the base data structure for an order (the maker of the order and the price)\r\n    struct Order {\r\n        address maker;// the placer of the order\r\n        uint price;// The price in wei\r\n        uint amount;\r\n        address asset;\r\n    }\r\n\r\n    struct ListAsset {\r\n        uint price;\r\n        uint amount;\r\n        bool isLong;  \r\n    }\r\n\r\n    //order_nonce;\r\n    uint internal order_nonce;\r\n    address public owner; //The owner of the market contract\r\n    address[] public openDdaListAssets;\r\n    //Index telling where a specific tokenId is in the forSale array\r\n    address[] public openBooks;\r\n    mapping (address => uint) public openDdaListIndex;\r\n    mapping(address => mapping (address => uint)) public totalListed;//user to tokenamounts\r\n    mapping(address => ListAsset) public listOfAssets;\r\n    //Maps an OrderID to the list of orders\r\n    mapping(uint256 => Order) public orders;\r\n    //An mapping of a token address to the orderID's\r\n    mapping(address =>  uint256[]) public forSale;\r\n    //Index telling where a specific tokenId is in the forSale array\r\n    mapping(uint256 => uint256) internal forSaleIndex;\r\n    \r\n    //mapping of address to position in openBooks\r\n    mapping (address => uint) internal openBookIndex;\r\n    //mapping of user to their orders\r\n    mapping(address => uint[]) public userOrders;\r\n    //mapping from orderId to userOrder position\r\n    mapping(uint => uint) internal userOrderIndex;\r\n    //A list of the blacklisted addresses\r\n    mapping(address => bool) internal blacklist;\r\n    \r\n\r\n    /*Events*/\r\n    event ListDDA(address _token, uint256 _amount, uint256 _price,bool _isLong);\r\n    event BuyDDA(address _token,address _sender, uint256 _amount, uint256 _price);\r\n    event UnlistDDA(address _token);\r\n    event OrderPlaced(uint _orderID, address _sender,address _token, uint256 _amount, uint256 _price);\r\n    event Sale(uint _orderID,address _sender,address _token, uint256 _amount, uint256 _price);\r\n    event OrderRemoved(uint _orderID,address _sender,address _token, uint256 _amount, uint256 _price);\r\n\r\n    /*Modifiers*/\r\n    /**\r\n    *@dev Access modifier for Owner functionality\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*Functions*/\r\n    /**\r\n    *@dev the constructor argument to set the owner and initialize the array.\r\n    */\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        openBooks.push(address(0));\r\n        order_nonce = 1;\r\n    }\r\n\r\n    /**\r\n    *@dev list allows a party to place an order on the orderbook\r\n    *@param _tokenadd address of the drct tokens\r\n    *@param _amount number of DRCT tokens\r\n    *@param _price uint256 price of all tokens in wei\r\n    */\r\n    function list(address _tokenadd, uint256 _amount, uint256 _price) external {\r\n        require(blacklist[msg.sender] == false);\r\n        require(_price > 0);\r\n        ERC20_Interface token = ERC20_Interface(_tokenadd);\r\n        require(totalListed[msg.sender][_tokenadd] + _amount <= token.allowance(msg.sender,address(this)));\r\n        if(forSale[_tokenadd].length == 0){\r\n            forSale[_tokenadd].push(0);\r\n            }\r\n        forSaleIndex[order_nonce] = forSale[_tokenadd].length;\r\n        forSale[_tokenadd].push(order_nonce);\r\n        orders[order_nonce] = Order({\r\n            maker: msg.sender,\r\n            asset: _tokenadd,\r\n            price: _price,\r\n            amount:_amount\r\n        });\r\n        emit OrderPlaced(order_nonce,msg.sender,_tokenadd,_amount,_price);\r\n        if(openBookIndex[_tokenadd] == 0 ){    \r\n            openBookIndex[_tokenadd] = openBooks.length;\r\n            openBooks.push(_tokenadd);\r\n        }\r\n        userOrderIndex[order_nonce] = userOrders[msg.sender].length;\r\n        userOrders[msg.sender].push(order_nonce);\r\n        totalListed[msg.sender][_tokenadd] += _amount;\r\n        order_nonce += 1;\r\n    }\r\n\r\n    /**\r\n    *@dev list allows DDA to list an order \r\n    *@param _asset address \r\n    *@param _amount of asset\r\n    *@param _price uint256 price per unit in wei\r\n    *@param _isLong true if it is long\r\n    */\r\n    //Then you would have a mapping from an asset to its price/ quantity when you list it.\r\n    function listDda(address _asset, uint256 _amount, uint256 _price, bool _isLong) public onlyOwner() {\r\n        require(blacklist[msg.sender] == false);\r\n        ListAsset storage listing = listOfAssets[_asset];\r\n        listing.price = _price;\r\n        listing.amount= _amount;\r\n        listing.isLong= _isLong;\r\n        openDdaListIndex[_asset] = openDdaListAssets.length;\r\n        openDdaListAssets.push(_asset);\r\n        emit ListDDA(_asset,_amount,_price,_isLong);\r\n        \r\n    }\r\n\r\n    /**\r\n    *@dev list allows a DDA to remove asset \r\n    *@param _asset address \r\n    */\r\n    function unlistDda(address _asset) public onlyOwner() {\r\n        require(blacklist[msg.sender] == false);\r\n        uint256 indexToDelete;\r\n        uint256 lastAcctIndex;\r\n        address lastAdd;\r\n        ListAsset storage listing = listOfAssets[_asset];\r\n        listing.price = 0;\r\n        listing.amount= 0;\r\n        listing.isLong= false;\r\n        indexToDelete = openDdaListIndex[_asset];\r\n        lastAcctIndex = openDdaListAssets.length.sub(1);\r\n        lastAdd = openDdaListAssets[lastAcctIndex];\r\n        openDdaListAssets[indexToDelete]=lastAdd;\r\n        openDdaListIndex[lastAdd]= indexToDelete;\r\n        openDdaListAssets.length--;\r\n        openDdaListIndex[_asset] = 0;\r\n        emit UnlistDDA(_asset);\r\n    }\r\n\r\n    /**\r\n    *@dev buy allows a party to partially fill an order\r\n    *@param _asset is the address of the assset listed\r\n    *@param _amount is the amount of tokens to buy\r\n    */\r\n    function buyPerUnit(address _asset, uint256 _amount) external payable {\r\n        require(blacklist[msg.sender] == false);\r\n        ListAsset storage listing = listOfAssets[_asset];\r\n        require(_amount <= listing.amount);\r\n        uint totalPrice = _amount.mul(listing.price);\r\n        require(msg.value == totalPrice);\r\n        ERC20_Interface token = ERC20_Interface(_asset);\r\n        if(token.allowance(owner,address(this)) >= _amount){\r\n            assert(token.transferFrom(owner,msg.sender, _amount));\r\n            owner.transfer(totalPrice);\r\n            listing.amount= listing.amount.sub(_amount);\r\n        }\r\n        emit BuyDDA(_asset,msg.sender,_amount,totalPrice);\r\n    }\r\n\r\n    /**\r\n    *@dev unlist allows a party to remove their order from the orderbook\r\n    *@param _orderId is the uint256 ID of order\r\n    */\r\n    function unlist(uint256 _orderId) external{\r\n        require(forSaleIndex[_orderId] > 0);\r\n        Order memory _order = orders[_orderId];\r\n        require(msg.sender== _order.maker || msg.sender == owner);\r\n        unLister(_orderId,_order);\r\n        emit OrderRemoved(_orderId,msg.sender,_order.asset,_order.amount,_order.price);\r\n    }\r\n\r\n    /**\r\n    *@dev buy allows a party to fill an order\r\n    *@param _orderId is the uint256 ID of order\r\n    */\r\n    function buy(uint256 _orderId) external payable {\r\n        Order memory _order = orders[_orderId];\r\n        require(_order.price != 0 && _order.maker != address(0) && _order.asset != address(0) && _order.amount != 0);\r\n        require(msg.value == _order.price);\r\n        require(blacklist[msg.sender] == false);\r\n        address maker = _order.maker;\r\n        ERC20_Interface token = ERC20_Interface(_order.asset);\r\n        if(token.allowance(_order.maker,address(this)) >= _order.amount){\r\n            assert(token.transferFrom(_order.maker,msg.sender, _order.amount));\r\n            maker.transfer(_order.price);\r\n        }\r\n        unLister(_orderId,_order);\r\n        emit Sale(_orderId,msg.sender,_order.asset,_order.amount,_order.price);\r\n    }\r\n\r\n    /**\r\n    *@dev getOrder lists the price,amount, and maker of a specific token for a sale\r\n    *@param _orderId uint256 ID of order\r\n    *@return address of the party selling\r\n    *@return uint of the price of the sale (in wei)\r\n    *@return uint of the order amount of the sale\r\n    *@return address of the token\r\n    */\r\n    function getOrder(uint256 _orderId) external view returns(address,uint,uint,address){\r\n        Order storage _order = orders[_orderId];\r\n        return (_order.maker,_order.price,_order.amount,_order.asset);\r\n    }\r\n\r\n    /**\r\n    *@dev allows the owner to change who the owner is\r\n    *@param _owner is the address of the new owner\r\n    */\r\n    function setOwner(address _owner) public onlyOwner() {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    *@notice This allows the owner to stop a malicious party from spamming the orderbook\r\n    *@dev Allows the owner to blacklist addresses from using this exchange\r\n    *@param _address the address of the party to blacklist\r\n    *@param _motion true or false depending on if blacklisting or not\r\n    */\r\n    function blacklistParty(address _address, bool _motion) public onlyOwner() {\r\n        blacklist[_address] = _motion;\r\n    }\r\n\r\n    /**\r\n    *@dev Allows parties to see if one is blacklisted\r\n    *@param _address the address of the party to blacklist\r\n    *@return bool true for is blacklisted\r\n    */\r\n    function isBlacklist(address _address) public view returns(bool) {\r\n        return blacklist[_address];\r\n    }\r\n\r\n    /**\r\n    *@dev getOrderCount allows parties to query how many orders are on the book\r\n    *@param _token address used to count the number of orders\r\n    *@return _uint of the number of orders in the orderbook\r\n    */\r\n    function getOrderCount(address _token) public constant returns(uint) {\r\n        return forSale[_token].length;\r\n    }\r\n\r\n    /**\r\n    *@dev Gets number of open orderbooks\r\n    *@return _uint of the number of tokens with open orders\r\n    */\r\n    function getBookCount() public constant returns(uint) {\r\n        return openBooks.length;\r\n    }\r\n\r\n    /**\r\n    *@dev getOrders allows parties to get an array of all orderId's open for a given token\r\n    *@param _token address of the drct token\r\n    *@return _uint[] an array of the orders in the orderbook\r\n    */\r\n    function getOrders(address _token) public constant returns(uint[]) {\r\n        return forSale[_token];\r\n    }\r\n\r\n    /**\r\n    *@dev getUserOrders allows parties to get an array of all orderId's open for a given user\r\n    *@param _user address \r\n    *@return _uint[] an array of the orders in the orderbook for the user\r\n    */\r\n    function getUserOrders(address _user) public constant returns(uint[]) {\r\n        return userOrders[_user];\r\n    }\r\n\r\n    /**\r\n    *@dev getter function to get all openDdaListAssets\r\n    */\r\n    function getopenDdaListAssets() view public returns (address[]){\r\n        return openDdaListAssets;\r\n    }\r\n    /**\r\n    *@dev Gets the DDA List Asset information for the specifed \r\n    *asset address\r\n    *@param _assetAddress for DDA list\r\n    *@return price, amount and true if isLong\r\n    */\r\n    function getDdaListAssetInfo(address _assetAddress) public view returns(uint, uint, bool){\r\n        return(listOfAssets[_assetAddress].price,listOfAssets[_assetAddress].amount,listOfAssets[_assetAddress].isLong);\r\n    }\r\n\r\n    /**\r\n    *@param _owner address\r\n    *@param _asset address\r\n    *@return Returns the total listed the owner has listed for the specified asset\r\n    */\r\n    function getTotalListed(address _owner, address _asset) public view returns (uint) {\r\n       return totalListed[_owner][_asset]; \r\n    }\r\n\r\n    /**\r\n    *@dev An internal function to update mappings when an order is removed from the book\r\n    *@param _orderId is the uint256 ID of order\r\n    *@param _order is the struct containing the details of the order\r\n    */\r\n    function unLister(uint256 _orderId, Order _order) internal{\r\n            uint256 tokenIndex;\r\n            uint256 lastTokenIndex;\r\n            address lastAdd;\r\n            uint256  lastToken;\r\n        totalListed[_order.maker][_order.asset] -= _order.amount;\r\n        if(forSale[_order.asset].length == 2){\r\n            tokenIndex = openBookIndex[_order.asset];\r\n            lastTokenIndex = openBooks.length.sub(1);\r\n            lastAdd = openBooks[lastTokenIndex];\r\n            openBooks[tokenIndex] = lastAdd;\r\n            openBookIndex[lastAdd] = tokenIndex;\r\n            openBooks.length--;\r\n            openBookIndex[_order.asset] = 0;\r\n            forSale[_order.asset].length -= 2;\r\n        }\r\n        else{\r\n            tokenIndex = forSaleIndex[_orderId];\r\n            lastTokenIndex = forSale[_order.asset].length.sub(1);\r\n            lastToken = forSale[_order.asset][lastTokenIndex];\r\n            forSale[_order.asset][tokenIndex] = lastToken;\r\n            forSaleIndex[lastToken] = tokenIndex;\r\n            forSale[_order.asset].length--;\r\n        }\r\n        forSaleIndex[_orderId] = 0;\r\n        orders[_orderId] = Order({\r\n            maker: address(0),\r\n            price: 0,\r\n            amount:0,\r\n            asset: address(0)\r\n        });\r\n        if(userOrders[_order.maker].length > 1){\r\n            tokenIndex = userOrderIndex[_orderId];\r\n            lastTokenIndex = userOrders[_order.maker].length.sub(1);\r\n            lastToken = userOrders[_order.maker][lastTokenIndex];\r\n            userOrders[_order.maker][tokenIndex] = lastToken;\r\n            userOrderIndex[lastToken] = tokenIndex;\r\n        }\r\n        userOrders[_order.maker].length--;\r\n        userOrderIndex[_orderId] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getDdaListAssetInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalListed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getTotalListed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getopenDdaListAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_motion\",\"type\":\"bool\"}],\"name\":\"blacklistParty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyPerUnit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"openDdaListIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"listOfAssets\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isLong\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"unlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"unlistDda\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBookCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOrderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenadd\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openDdaListAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"listDda\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"ListDDA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BuyDDA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"UnlistDDA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OrderRemoved\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://242cc2095fc70bb3f6fe9aafaa3442bbecb5d5aae98e5d81f3f4f9b85bc26883"}]}