{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n*                                        ,   ,\r\n*                                        $,  $,     ,\r\n*                                        \"ss.$ss. .s'\r\n*                                ,     .ss$$$$$$$$$$s,\r\n*                                $. s$$$$$$$$$$$$$$`$$Ss\r\n*                                \"$$$$$$$$$$$$$$$$$$o$$$       ,\r\n*                               s$$$$$$$$$$$$$$$$$$$$$$$$s,  ,s\r\n*                              s$$$$$$$$$\"$$$$$$\"\"\"\"$$$$$$\"$$$$$,\r\n*                              s$$$$$$$$$$s\"\"$$$$ssssss\"$$$$$$$$\"\r\n*                             s$$$$$$$$$$'         `\"\"\"ss\"$\"$s\"\"\r\n*                             s$$$$$$$$$$,              `\"\"\"\"\"$  .s$$s\r\n*                             s$$$$$$$$$$$$s,...               `s$$'  `\r\n*                         `ssss$$$$$$$$$$$$$$$$$$$$####s.     .$$\"$.   , s-\r\n*                           `\"\"\"\"$$$$$$$$$$$$$$$$$$$$#####$$$$$$\"     $.$'\r\n* 祝你成功                        \"$$$$$$$$$$$$$$$$$$$$$####s\"\"     .$$$|\r\n*   福    喜喜                        \"$$$$$$$$$$$$$$$$$$$$$$$$##s    .$$\" $\r\n*                                   $$\"\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\"   `\r\n*                                  $$\"  \"$\"$$$$$$$$$$$$$$$$$$$$S\"\"\"\"'\r\n*                             ,   ,\"     '  $$$$$$$$$$$$$$$$####s\r\n*                             $.          .s$$$$$$$$$$$$$$$$$####\"\r\n*                 ,           \"$s.   ..ssS$$$$$$$$$$$$$$$$$$$####\"\r\n*                 $           .$$$S$$$$$$$$$$$$$$$$$$$$$$$$#####\"\r\n*                 Ss     ..sS$$$$$$$$$$$$$$$$$$$$$$$$$$$######\"\"\r\n*                  \"$$sS$$$$$$$$$$$$$$$$$$$$$$$$$$$########\"\r\n*           ,      s$$$$$$$$$$$$$$$$$$$$$$$$#########\"\"'\r\n*           $    s$$$$$$$$$$$$$$$$$$$$$#######\"\"'      s'         ,\r\n*           $$..$$$$$$$$$$$$$$$$$$######\"'       ....,$$....    ,$\r\n*            \"$$$$$$$$$$$$$$$######\"' ,     .sS$$$$$$$$$$$$$$$$s$$\r\n*              $$$$$$$$$$$$#####\"     $, .s$$$$$$$$$$$$$$$$$$$$$$$$s.\r\n*   )          $$$$$$$$$$$#####'      `$$$$$$$$$###########$$$$$$$$$$$.\r\n*  ((          $$$$$$$$$$$#####       $$$$$$$$###\"       \"####$$$$$$$$$$\r\n*  ) \\         $$$$$$$$$$$$####.     $$$$$$###\"             \"###$$$$$$$$$   s'\r\n* (   )        $$$$$$$$$$$$$####.   $$$$$###\"                ####$$$$$$$$s$$'\r\n* )  ( (       $$\"$$$$$$$$$$$#####.$$$$$###'                .###$$$$$$$$$$\"\r\n* (  )  )   _,$\"   $$$$$$$$$$$$######.$$##'                .###$$$$$$$$$$\r\n* ) (  ( \\.         \"$$$$$$$$$$$$$#######,,,.          ..####$$$$$$$$$$$\"\r\n*(   )$ )  )        ,$$$$$$$$$$$$$$$$$$####################$$$$$$$$$$$\"\r\n*(   ($$  ( \\     _sS\"  `\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$S$$,\r\n* )  )$$$s ) )  .      .   `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\"'  `$$\r\n*  (   $$$Ss/  .$,    .$,,s$$$$$$##S$$$$$$$$$$$$$$$$$$$$$$$$S\"\"        '\r\n*    \\)_$$$$$$$$$$$$$$$$$$$$$$$##\"  $$        `$$.        `$$.\r\n*        `\"S$$$$$$$$$$$$$$$$$#\"      $          `$          `$\r\n*            `\"\"\"\"\"\"\"\"\"\"\"\"\"'         '           '           '\r\n*/\r\ncontract F3Devents {\r\n    // 只要玩家注册了名字就会被解雇\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 在购买或重装结束时解雇\r\n    event onEndTx\r\n    (\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        bytes32 playerName,\r\n        address playerAddress,\r\n        uint256 ethIn,\r\n        uint256 keysBought,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount,\r\n        uint256 potAmount,\r\n        uint256 airDropPot\r\n    );\r\n\r\n    // 只要有人退出就会被解雇\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 每当撤军力量结束时，就会被解雇\r\n    event onWithdrawAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // (fomo3d免费) 每当玩家尝试一轮又一轮的计时器时就会被解雇\r\n    // 命中零，并导致结束回合\r\n    event onBuyAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethIn,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // (fomo3d免费) 每当玩家在圆形时间后尝试重新加载时就会触发\r\n    // 命中零，并导致结束回合.\r\n    event onReLoadAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 P3DAmount,\r\n        uint256 genAmount\r\n    );\r\n\r\n    // 每当联盟会员付款时就会被解雇\r\n    event onAffiliatePayout\r\n    (\r\n        uint256 indexed affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // 收到罐子掉期存款\r\n    event onPotSwapDeposit\r\n    (\r\n        uint256 roundID,\r\n        uint256 amountAddedToPot\r\n    );\r\n}\r\n\r\n//==============================================================================\r\n//   _ _  _ _|_ _ _  __|_   _ _ _|_    _   .\r\n//  (_(_)| | | | (_|(_ |   _\\(/_ | |_||_)  .\r\n//====================================|=========================================\r\n\r\ncontract modularShort is F3Devents {}\r\n\r\ncontract WorldFomo is modularShort {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using F3DKeysCalcShort for uint256;\r\n\r\n    PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x6ed17ee485821cd47531f2e4c7b9ef8b48f2bab5);\r\n\r\n//==============================================================================\r\n//     _ _  _  |`. _     _ _ |_ | _  _  .\r\n//    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (游戏设置)\r\n//=================_|===========================================================\r\n    address private admin = msg.sender;\r\n    string constant public name = \"WorldFomo\";\r\n    string constant public symbol = \"WF\";\r\n    uint256 private rndExtra_ = 15 seconds;     // 第一个ICO的长度\r\n    uint256 private rndGap_ = 30 minutes;         // ICO阶段的长度，EOS设定为1年。\r\n    uint256 constant private rndInit_ = 30 minutes;                // 圆计时器从此开始\r\n    uint256 constant private rndInc_ = 10 seconds;              // 购买的每一把钥匙都会给计时器增加很多\r\n    uint256 constant private rndMax_ = 12 hours;                // 圆形计时器的最大长度可以是\r\n//==============================================================================\r\n//     _| _ _|_ _    _ _ _|_    _   .\r\n//    (_|(_| | (_|  _\\(/_ | |_||_)  .  (用于存储更改的游戏信息的数据)\r\n//=============================|================================================\r\n    uint256 public airDropPot_;             // 获得空投的人赢得了这个锅的一部分\r\n    uint256 public airDropTracker_ = 0;     // 每次“合格”tx发生时递增。用于确定获胜的空投\r\n    uint256 public rID_;    // 已发生的轮次ID /总轮数\r\n//****************\r\n// 球员数据\r\n//****************\r\n    mapping (address => uint256) public pIDxAddr_;          // （addr => pID）按地址返回玩家ID\r\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID）按名称返回玩家ID\r\n    mapping (uint256 => F3Ddatasets.Player) public plyr_;   // (pID => data) 球员数据\r\n    mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) 玩家ID和轮次ID的玩家轮数据\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool）玩家拥有的名字列表。 （用于这样您可以在您拥有的任何名称中更改您的显示名称）\r\n//****************\r\n// 圆形数据\r\n//****************\r\n    mapping (uint256 => F3Ddatasets.Round) public round_;   // (rID => data) 圆形数据\r\n    mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_;      // (rID => tID => 数据）每个团队的eth，by round id和team id\r\n//****************\r\n// 团队收费数据\r\n//****************\r\n    mapping (uint256 => F3Ddatasets.TeamFee) public fees_;          // (team => fees) 按团队分配费用\r\n    mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_;     // (team => fees) 锅分裂由团队分配\r\n//==============================================================================\r\n//     _ _  _  __|_ _    __|_ _  _  .\r\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (合同部署时的初始数据设置)\r\n//==============================================================================\r\n    constructor()\r\n        public\r\n    {\r\n        // 团队分配结构\r\n        // 0 = europe\r\n        // 1 = freeforall\r\n        // 2 = china\r\n        // 3 = americas\r\n\r\n        // 团队分配百分比\r\n        // (F3D, P3D) + (Pot , Referrals, Community)\r\n            // 介绍人 / 社区奖励在数学上被设计为来自获胜者的底池份额.\r\n        fees_[0] = F3Ddatasets.TeamFee(32,0);   //50% to pot, 15% to aff, 3% to com, 0% to pot swap, 0% to air drop pot\r\n        fees_[1] = F3Ddatasets.TeamFee(45,0);   //37% to pot, 15% to aff, 3% to com, 0% to pot swap, 0% to air drop pot\r\n        fees_[2] = F3Ddatasets.TeamFee(62,0);  //20% to pot, 15% to aff, 3% to com, 0% to pot swap, 0% to air drop pot\r\n        fees_[3] = F3Ddatasets.TeamFee(47,0);   //35% to pot, 15% to aff, 3% to com, 0% to pot swap, 0% to air drop pot\r\n\r\n        // 如何根据选择的球队分割最终的底池\r\n        // (F3D, P3D)\r\n        potSplit_[0] = F3Ddatasets.PotSplit(47,0);  //25% to winner, 25% to next round, 3% to com\r\n        potSplit_[1] = F3Ddatasets.PotSplit(47,0);   //25% to winner, 25% to next round, 3% to com\r\n        potSplit_[2] = F3Ddatasets.PotSplit(62,0);  //25% to winner, 10% to next round, 3% to com\r\n        potSplit_[3] = F3Ddatasets.PotSplit(62,0);  //25% to winner, 10% to next round,3% to com\r\n    }\r\n//==============================================================================\r\n//     _ _  _  _|. |`. _  _ _  .\r\n//    | | |(_)(_||~|~|(/_| _\\  .  (这些都是安全检查)\r\n//==============================================================================\r\n    /**\r\n     * @dev 用于确保在激活之前没有人可以与合同互动.\r\n     *\r\n     */\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev 防止合同与fomo3d交互\r\n     */\r\n    modifier isHuman() {\r\n        require(msg.sender == tx.origin, \"sorry humans only - FOR REAL THIS TIME\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev 设置传入tx的边界\r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n//==============================================================================\r\n//     _    |_ |. _   |`    _  __|_. _  _  _  .\r\n//    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (用这些来与合同互动)\r\n//====|=========================================================================\r\n    /**\r\n     * @dev 紧急购买使用最后存储的会员ID和团队潜行\r\n     */\r\n    function()\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // 设置我们的tx事件数据并确定玩家是否是新手\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 买核心\r\n        buyCore(_pID, plyr_[_pID].laff, 2, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 将所有传入的以太坊转换为键.\r\n     * -functionhash- 0x8f38f309 (使用ID作为会员)\r\n     * -functionhash- 0x98a0871d (使用联盟会员的地址)\r\n     * -functionhash- 0xa65b37a1 (使用联盟会员的名称)\r\n     * @param _affCode 获得联盟费用的玩家的ID /地址/名称\r\n     * @param _team 什么球队是球员?\r\n     */\r\n    function buyXid(uint256 _affCode, uint256 _team)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // 设置我们的tx事件数据并确定玩家是否是新手\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        // 如果提供联属代码并且它与先前存储的不同\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // 更新最后一个会员\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affCode, _team, _eventData_);\r\n    }\r\n\r\n    function buyXaddr(address _affCode, uint256 _team)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // 设置我们的tx事件数据并确定玩家是否是新手\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        uint256 _affID;\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // 如果是联盟代码\r\n        } else {\r\n            // 从aff Code获取会员ID\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // 如果affID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个会员\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    function buyXname(bytes32 _affCode, uint256 _team)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // 设置我们的tx事件数据并确定玩家是否是新手\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        uint256 _affID;\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // 如果是联盟代码\r\n        } else {\r\n            // 从aff Code获取会员ID\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // 如果affID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个会员\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 买核心\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 基本上与买相同，但不是你发送以太\r\n     * 从您的钱包中，它使用您未提取的收入.\r\n     * -functionhash- 0x349cdcac (使用ID作为会员)\r\n     * -functionhash- 0x82bfc739 (使用联盟会员的地址)\r\n     * -functionhash- 0x079ce327 (使用联盟会员的名称)\r\n     * @param _affCode 获得联盟费用的玩家的ID /地址/名称\r\n     * @param _team 球员在哪支球队？\r\n     * @param _eth 使用的收入金额（余额退回基金库）\r\n     */\r\n    function reLoadXid(uint256 _affCode, uint256 _team, uint256 _eth)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n        // 设置我们的tx事件数据\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        // 如果提供联属代码并且它与先前存储的不同\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // 更新最后一个会员\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重装核心\r\n        reLoadCore(_pID, _affCode, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function reLoadXaddr(address _affCode, uint256 _team, uint256 _eth)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n        // 设置我们的tx事件数据\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        uint256 _affID;\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // 如果是联盟代码\r\n        } else {\r\n            // 从aff Code获取会员ID\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // 如果affID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个会员\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重装核心\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function reLoadXname(bytes32 _affCode, uint256 _team, uint256 _eth)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n        // 设置我们的tx事件数据\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 管理会员残差\r\n        uint256 _affID;\r\n        // 如果没有给出联盟代码或者玩家试图使用他们自己的代码\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            // 使用最后存储的联盟代码\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // 如果是联盟代码\r\n        } else {\r\n            // 从aff Code获取会员ID\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // 如果affID与先前存储的不同\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // 更新最后一个会员\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // 验证是否选择了有效的团队\r\n        _team = verifyTeam(_team);\r\n\r\n        // 重装核心\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 撤回所有收入.\r\n     * -functionhash- 0x3ccfd60b\r\n     */\r\n    function withdraw()\r\n        isActivated()\r\n        isHuman()\r\n        public\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 获取玩家ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // 为玩家eth设置temp var\r\n        uint256 _eth;\r\n\r\n        // 检查圆是否已经结束并且还没有人绕圈结束\r\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // 设置我们的tx事件数据\r\n            F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n            // 圆形结束（分配锅）\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            // 得到他们的收入\r\n            _eth = withdrawEarnings(_pID);\r\n\r\n            // 给钱\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n            // 构建事件数据\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            // 火灾撤回和分发事件\r\n            emit F3Devents.onWithdrawAndDistribute\r\n            (\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eth,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.P3DAmount,\r\n                _eventData_.genAmount\r\n            );\r\n\r\n        // 在任何其他情况下\r\n        } else {\r\n            // 得到他们的收入\r\n            _eth = withdrawEarnings(_pID);\r\n\r\n            // 给钱\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n            // 消防事件\r\n            emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev 使用这些来注册名称。它们只是将注册请求发送给PlayerBook合同的包装器。所以在这里注册与在那里注册是一样的。\r\n     * UI将始终显示您注册的姓氏，但您仍将拥有所有以前注册的名称以用作会员链接。\r\n     * - 必须支付注册费\r\n     * - 名称必须是唯一的\r\n     * - 名称将转换为小写\r\n     * - 名称不能以空格开头或结尾\r\n     * - 连续不能超过1个空格\r\n     * - 不能只是数字\r\n     * - 不能以0x开头\r\n     * - name必须至少为1个字符\r\n     * - 最大长度为32个字符\r\n     * - 允许的字符：a-z，0-9和空格\r\n     * -functionhash- 0x921dec21 (使用ID作为会员)\r\n     * -functionhash- 0x3ddd4698 (使用联盟会员的地址)\r\n     * -functionhash- 0x685ffd83 (使用联盟会员的名称)\r\n     * @param _nameString 球员想要的名字\r\n     * @param _affCode 会员ID，地址或推荐您的人的姓名\r\n     * @param _all 如果您希望将信息推送到所有游戏，则设置为true\r\n     * (这可能会耗费大量气体)\r\n     */\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 火灾事件\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 火灾事件\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // 火灾事件\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n//==============================================================================\r\n//     _  _ _|__|_ _  _ _  .\r\n//    (_|(/_ |  | (/_| _\\  . (用于UI和查看etherscan上的东西)\r\n//=====_|=======================================================================\r\n    /**\r\n     * @dev 退货价格买家将支付下一个个人钥匙.\r\n     * -functionhash- 0x018a25e8\r\n     * @return 购买下一个钥匙的价格（以wei格式）\r\n     */\r\n    function getBuyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 我们是一个回合?\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n        else // rounds over.  need price for new round\r\n            return ( 75000000000000 ); // init\r\n    }\r\n\r\n    /**\r\n     * @dev 返回剩余时间。不要垃圾邮件，你可以从你的节点提供商那里得到你自己\r\n     * -functionhash- 0xc7e284b8\r\n     * @return 时间在几秒钟内\r\n     */\r\n    function getTimeLeft()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        if (_now < round_[_rID].end)\r\n            if (_now > round_[_rID].strt + rndGap_)\r\n                return( (round_[_rID].end).sub(_now) );\r\n            else\r\n                return( (round_[_rID].strt + rndGap_).sub(_now) );\r\n        else\r\n            return(0);\r\n    }\r\n\r\n    /**\r\n     * @dev 每个金库返回玩家收入\r\n     * -functionhash- 0x63066434\r\n     * @return 赢得金库\r\n     * @return 一般金库\r\n     * @return 会员保险库\r\n     */\r\n    function getPlayerVaults(uint256 _pID)\r\n        public\r\n        view\r\n        returns(uint256 ,uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 如果圆结束了但圆形结束尚未运行（因此合同没有分配奖金）\r\n        if (now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // 如果球员是胜利者\r\n            if (round_[_rID].plyr == _pID)\r\n            {\r\n                return\r\n                (\r\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(25)) / 100 ),\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\r\n                    plyr_[_pID].aff\r\n                );\r\n            // 如果玩家不是赢家\r\n            } else {\r\n                return\r\n                (\r\n                    plyr_[_pID].win,\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)  ),\r\n                    plyr_[_pID].aff\r\n                );\r\n            }\r\n\r\n        // 如果圆形仍在继续，或圆形已经结束并且圆形结束已经运行\r\n        } else {\r\n            return\r\n            (\r\n                plyr_[_pID].win,\r\n                (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\r\n                plyr_[_pID].aff\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 坚固不喜欢堆栈限制。这让我们避免那种仇恨\r\n     */\r\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return(  ((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000)  );\r\n    }\r\n\r\n    /**\r\n     * @dev 返回前端所需的所有当前轮次信息\r\n     * -functionhash- 0x747dff42\r\n     * @return 在ICO阶段投资的eth\r\n     * @return 圆的身份\r\n     * @return 圆的总钥匙\r\n     * @return 时间到了\r\n     * @return 时间开始了\r\n     * @return 目前的锅\r\n     * @return 领先的当前球队ID和球员ID\r\n     * @return 领先地址的当前玩家\r\n     * @return 引导名称中的当前玩家\r\n     * @return 鲸鱼为了圆形\r\n     * @return b耳朵为圆形\r\n     * @return 为了回合而进行的\r\n     * @return 公牛队参加比赛\r\n     * @return 空投跟踪器＃＆airdrop pot\r\n     */\r\n    function getCurrentRoundInfo()\r\n        public\r\n        view\r\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        return\r\n        (\r\n            round_[_rID].ico,               //0\r\n            _rID,                           //1\r\n            round_[_rID].keys,              //2\r\n            round_[_rID].end,               //3\r\n            round_[_rID].strt,              //4\r\n            round_[_rID].pot,               //5\r\n            (round_[_rID].team + (round_[_rID].plyr * 10)),     //6\r\n            plyr_[round_[_rID].plyr].addr,  //7\r\n            plyr_[round_[_rID].plyr].name,  //8\r\n            rndTmEth_[_rID][0],             //9\r\n            rndTmEth_[_rID][1],             //10\r\n            rndTmEth_[_rID][2],             //11\r\n            rndTmEth_[_rID][3],             //12\r\n            airDropTracker_ + (airDropPot_ * 1000)              //13\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev 根据地址返回玩家信息。如果没有给出地址，它会\r\n     * use msg.sender\r\n     * -functionhash- 0xee0b5d8b\r\n     * @param _addr 您要查找的播放器的地址\r\n     * @return 玩家ID\r\n     * @return 参赛者姓名\r\n     * @return 密钥拥有（当前轮次）\r\n     * @return 赢得金库\r\n     * @return 一般金库\r\n     * @return 会员保险库\r\n     * @return 球员圆的eth\r\n     */\r\n    function getPlayerInfoByAddress(address _addr)\r\n        public\r\n        view\r\n        returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n            _pID,                               //0\r\n            plyr_[_pID].name,                   //1\r\n            plyrRnds_[_pID][_rID].keys,         //2\r\n            plyr_[_pID].win,                    //3\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),       //4\r\n            plyr_[_pID].aff,                    //5\r\n            plyrRnds_[_pID][_rID].eth           //6\r\n        );\r\n    }\r\n\r\n//==============================================================================\r\n//     _ _  _ _   | _  _ . _  .\r\n//    (_(_)| (/_  |(_)(_||(_  . (这+工具+计算+模块=我们的软件引擎)\r\n//=====================_|=======================================================\r\n    /**\r\n     * @dev 每当执行买单时，逻辑就会运行。决定如何处理\r\n     * 传入的道德取决于我们是否处于活跃轮次\r\n     */\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 如果圆形是活跃的\r\n\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // 致电核心\r\n            core(_rID, _pID, msg.value, _affID, _team, _eventData_);\r\n\r\n        // 如果圆形不活跃\r\n        } else {\r\n            // 检查是否需要运行结束轮次\r\n            if (_now > round_[_rID].end && round_[_rID].ended == false)\r\n            {\r\n                // 结束回合（分配锅）并开始新一轮\r\n                round_[_rID].ended = true;\r\n                _eventData_ = endRound(_eventData_);\r\n\r\n                // 构建事件数据\r\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n                // 火买和分发事件\r\n                emit F3Devents.onBuyAndDistribute\r\n                (\r\n                    msg.sender,\r\n                    plyr_[_pID].name,\r\n                    msg.value,\r\n                    _eventData_.compressedData,\r\n                    _eventData_.compressedIDs,\r\n                    _eventData_.winnerAddr,\r\n                    _eventData_.winnerName,\r\n                    _eventData_.amountWon,\r\n                    _eventData_.newPot,\r\n                    _eventData_.P3DAmount,\r\n                    _eventData_.genAmount\r\n                );\r\n            }\r\n\r\n            // 将eth放入球员保险库中\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev 每当执行重新加载订单时，逻辑就会运行。决定如何处理\r\n     * 传入的道德取决于我们是否处于活跃轮次\r\n     */\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _team, uint256 _eth, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 如果圆形是活跃的\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // 从所有金库中获取收益并将未使用的金额归还给gen保险库\r\n            // 因为我们使用自定义safemath库。如果玩家，这将抛出\r\n            // 他们试图花更多的时间。\r\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\r\n\r\n            // 致电核心\r\n            core(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n\r\n        // 如果round不活动并且需要运行end round\r\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\r\n            // end the round (distributes pot) & start new round\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            // 构建事件数据\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            // 火买和分发事件\r\n            emit F3Devents.onReLoadAndDistribute\r\n            (\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.P3DAmount,\r\n                _eventData_.genAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev 这是在回合生效期间发生的任何购买/重新加载的核心逻辑\r\n     */\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // 如果玩家是新手\r\n        if (plyrRnds_[_pID][_rID].keys == 0)\r\n            _eventData_ = managePlayer(_pID, _eventData_);\r\n\r\n        // 早期的道路限制器\r\n        if (round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000)\r\n        {\r\n            uint256 _availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth);\r\n            uint256 _refund = _eth.sub(_availableLimit);\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\r\n            _eth = _availableLimit;\r\n        }\r\n\r\n        // 如果留下的eth大于min eth允许（抱歉没有口袋棉绒）\r\n        if (_eth > 1000000000)\r\n        {\r\n\r\n            // 铸造新钥匙\r\n            uint256 _keys = (round_[_rID].eth).keysRec(_eth);\r\n\r\n            // 如果他们至少买了一把钥匙\r\n            if (_keys >= 1000000000000000000)\r\n            {\r\n            updateTimer(_keys, _rID);\r\n\r\n            // 树立新的领导者\r\n            if (round_[_rID].plyr != _pID)\r\n                round_[_rID].plyr = _pID;\r\n            if (round_[_rID].team != _team)\r\n                round_[_rID].team = _team;\r\n\r\n            // 将新的领导者布尔设为真\r\n            _eventData_.compressedData = _eventData_.compressedData + 100;\r\n        }\r\n\r\n\r\n            // 存储空投跟踪器编号（自上次空投以来的购买次数）\r\n            _eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000);\r\n\r\n            // 更新播放器\r\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\r\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n\r\n            // 更新回合\r\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\r\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team]);\r\n\r\n            // 分配道德\r\n            _eventData_ = distributeExternal(_rID, _eth, _team, _eventData_);\r\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _affID, _team, _keys, _eventData_);\r\n\r\n            // 调用end tx函数来触发结束tx事件。\r\n            endTx(_pID, _team, _eth, _keys, _eventData_);\r\n        }\r\n    }\r\n//==============================================================================\r\n//     _ _ | _   | _ _|_ _  _ _  .\r\n//    (_(_||(_|_||(_| | (_)| _\\  .\r\n//==============================================================================\r\n    /**\r\n     * @dev 计算未屏蔽的收入（只计算，不更新掩码）k)\r\n     * @return earnings in wei format\r\n     */\r\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return(  (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask)  );\r\n    }\r\n\r\n    /**\r\n     * @dev 返回给出一定数量eth的密钥数量.\r\n     * -functionhash- 0xce89c80c\r\n     * @param _rID round ID you want price for\r\n     * @param _eth amount of eth sent in\r\n     * @return keys received\r\n     */\r\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 我们是一个回合?\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].eth).keysRec(_eth) );\r\n        else // 转过来。需要新一轮的钥匙\r\n            return ( (_eth).keys() );\r\n    }\r\n\r\n    /**\r\n     * @dev 返回X键的当前eth价格。\r\n     * -functionhash- 0xcf808000\r\n     * @param _keys 所需的键数（18位十进制格式）\r\n     * @return 需要发送的eth数量\r\n     */\r\n    function iWantXKeys(uint256 _keys)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 我们是一个回合?\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(_keys)).ethRec(_keys) );\r\n        else // rounds over.  need price for new round\r\n            return ( (_keys).eth() );\r\n    }\r\n//==============================================================================\r\n//    _|_ _  _ | _  .\r\n//     | (_)(_)|_\\  .\r\n//==============================================================================\r\n    /**\r\n     * @dev 从姓名合同中接收姓名/球员信息\r\n     */\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\r\n        external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if (pIDxAddr_[_addr] != _pID)\r\n            pIDxAddr_[_addr] = _pID;\r\n        if (pIDxName_[_name] != _pID)\r\n            pIDxName_[_name] = _pID;\r\n        if (plyr_[_pID].addr != _addr)\r\n            plyr_[_pID].addr = _addr;\r\n        if (plyr_[_pID].name != _name)\r\n            plyr_[_pID].name = _name;\r\n        if (plyr_[_pID].laff != _laff)\r\n            plyr_[_pID].laff = _laff;\r\n        if (plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev 接收整个玩家名单\r\n     */\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\r\n        external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if(plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev 获得现有或注册新的pID。当玩家可能是新手时使用此功能\r\n     * @return pID\r\n     */\r\n    function determinePID(F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (F3Ddatasets.EventReturns)\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        // 如果玩家是这个版本的worldfomo的新手\r\n        if (_pID == 0)\r\n        {\r\n            // 从玩家姓名合同中获取他们的玩家ID，姓名和最后一个身份证\r\n            _pID = PlayerBook.getPlayerID(msg.sender);\r\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\r\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\r\n\r\n            // 设置玩家帐户\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID)\r\n                plyr_[_pID].laff = _laff;\r\n\r\n            // 将新玩家bool设置为true\r\n            _eventData_.compressedData = _eventData_.compressedData + 1;\r\n        }\r\n        return (_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 检查以确保用户选择了一个有效的团队。如果没有设置团队\r\n     * 默认（中国）\r\n     */\r\n    function verifyTeam(uint256 _team)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_team < 0 || _team > 3)\r\n            return(2);\r\n        else\r\n            return(_team);\r\n    }\r\n\r\n    /**\r\n     * @dev 决定是否需要运行圆形结束并开始新一轮。而如果\r\n     * 需要移动之前玩过的球员未经掩盖的收入\r\n     */\r\n    function managePlayer(uint256 _pID, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 如果玩家已经玩过上一轮，则移动他们未经掩盖的收益\r\n        // 从那一轮到生成金库。\r\n        if (plyr_[_pID].lrnd != 0)\r\n            updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        // 更新玩家的最后一轮比赛\r\n        plyr_[_pID].lrnd = rID_;\r\n\r\n        // 将连接的圆形bool设置为true\r\n        _eventData_.compressedData = _eventData_.compressedData + 10;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 结束这一轮。管理支付赢家/拆分锅\r\n     */\r\n    function endRound(F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (F3Ddatasets.EventReturns)\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_;\r\n\r\n        // 抓住我们的获胜球员和球队ID\r\n        uint256 _winPID = round_[_rID].plyr;\r\n        uint256 _winTID = round_[_rID].team;\r\n\r\n        // 抓住我们的锅量\r\n        uint256 _pot = round_[_rID].pot;\r\n\r\n        // 计算我们的赢家份额，社区奖励，发行份额，\r\n        // 份额，以及为下一个底池保留的金额\r\n        uint256 _win = (_pot.mul(25)) / 100;\r\n        uint256 _com = (_pot.mul(3)) / 100;\r\n        uint256 _gen = (_pot.mul(potSplit_[_winTID].gen)) / 100;\r\n        uint256 _p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100;\r\n        uint256 _res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d);\r\n\r\n        // k计算圆形面罩的ppt\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\r\n        if (_dust > 0)\r\n        {\r\n            _gen = _gen.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        // 支付我们的赢家\r\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\r\n\r\n        // 社区奖励\r\n\r\n        admin.transfer(_com);\r\n\r\n        // 将gen部分分配给密钥持有者\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        // 准备事件数据\r\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\r\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\r\n        _eventData_.winnerName = plyr_[_winPID].name;\r\n        _eventData_.amountWon = _win;\r\n        _eventData_.genAmount = _gen;\r\n        _eventData_.P3DAmount = _p3d;\r\n        _eventData_.newPot = _res;\r\n\r\n        // 下一轮开始\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].strt = now;\r\n        round_[_rID].end = now.add(rndInit_).add(rndGap_);\r\n        round_[_rID].pot = _res;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev moves any unmasked earnings to gen vault.  updates earnings mask\r\n     */\r\n    function updateGenVault(uint256 _pID, uint256 _rIDlast)\r\n        private\r\n    {\r\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\r\n        if (_earnings > 0)\r\n        {\r\n            // 放入gen库\r\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\r\n            // 通过更新面具将收入归零\r\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev 根据购买的全部密钥数量更新圆形计时器。\r\n     */\r\n    function updateTimer(uint256 _keys, uint256 _rID)\r\n        private\r\n    {\r\n        // 抓住时间\r\n        uint256 _now = now;\r\n\r\n        // 根据购买的钥匙数计算时间\r\n        uint256 _newTime;\r\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\r\n        else\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\r\n\r\n        // 比较max并设置新的结束时间\r\n        if (_newTime < (rndMax_).add(_now))\r\n            round_[_rID].end = _newTime;\r\n        else\r\n            round_[_rID].end = rndMax_.add(_now);\r\n    }\r\n\r\n    /**\r\n     * @dev 生成0-99之间的随机数并检查是否存在\r\n     * 导致空投获胜\r\n     * @return 我们有赢家吗？我们有赢家吗？\r\n     */\r\n    function airdrop()\r\n        private\r\n        view\r\n        returns(bool)\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n\r\n        )));\r\n        if((seed - ((seed / 1000) * 1000)) < airDropTracker_)\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n\r\n    /**\r\n     * @dev 根据对com，aff和p3d的费用分配eth\r\n     */\r\n    function distributeExternal(uint256 _rID, uint256 _eth, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns(F3Ddatasets.EventReturns)\r\n    {\r\n        // 支付3％的社区奖励\r\n        uint256 _com = (_eth.mul(3)) / 100;\r\n        uint256 _p3d;\r\n        if (!address(admin).call.value(_com)())\r\n        {\r\n            _p3d = _com;\r\n            _com = 0;\r\n        }\r\n\r\n\r\n        // 支付p3d\r\n        _p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100));\r\n        if (_p3d > 0)\r\n        {\r\n            round_[_rID].pot = round_[_rID].pot.add(_p3d);\r\n\r\n            // 设置事件数据\r\n            _eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount);\r\n        }\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    function potSwap()\r\n        external\r\n        payable\r\n    {\r\n        // 设置本地rID\r\n        uint256 _rID = rID_ + 1;\r\n\r\n        round_[_rID].pot = round_[_rID].pot.add(msg.value);\r\n        emit F3Devents.onPotSwapDeposit(_rID, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev 根据对gen和pot的费用分配eth\r\n     */\r\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns(F3Ddatasets.EventReturns)\r\n    {\r\n        // 计算gen份额\r\n        uint256 _gen = (_eth.mul(fees_[_team].gen)) / 100;\r\n\r\n        // distribute share to affiliate 15%\r\n        uint256 _aff = (_eth.mul(15)) / 100;\r\n\r\n        // 更新道德平衡 (eth = eth - (com share + pot swap share + aff share))\r\n        _eth = _eth.sub(((_eth.mul(18)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100));\r\n\r\n        // 计算锅\r\n        uint256 _pot = _eth.sub(_gen);\r\n\r\n        // decide what to do with affiliate share of fees\r\n        // affiliate must not be self, and must have a name registered\r\n        if (_affID != _pID && plyr_[_affID].name != '') {\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n            emit F3Devents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            _gen = _gen.add(_aff);\r\n        }\r\n\r\n        // 分配gen份额（这就是updateMasks（）所做的）并进行调整\r\n        // 灰尘平衡。\r\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\r\n        if (_dust > 0)\r\n            _gen = _gen.sub(_dust);\r\n\r\n        // 添加eth到pot\r\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\r\n\r\n        // 设置事件数据\r\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\r\n        _eventData_.potAmount = _pot;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev 购买钥匙时更新圆形和玩家的面具\r\n     * @return 灰尘遗留下来\r\n     */\r\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        /* 掩盖笔记\r\n            收入面具对人们来说是一个棘手的事情。\r\n            这里要理解的基本内容。将有一个全球性的\r\n            跟踪器基于每轮的每股利润，增加\r\n            相关比例增加份额。\r\n\r\n            玩家将有一个额外的面具基本上说“基于\r\n            在回合面具，我的股票，以及我已经撤回了多少，\r\n            还欠我多少钱呢？“\r\n        */\r\n\r\n        // 基于此购买的每个键和圆形面具的钙利润:(灰尘进入锅）\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        // 计算玩家从他们自己购买的收入（仅基于钥匙\r\n        // 他们刚刚买了）。并更新玩家收入掩\r\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\r\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\r\n\r\n        // 计算并返回灰尘\r\n        return(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\r\n    }\r\n\r\n    /**\r\n     * @dev 加上未公开的收入和保险金收入，将它们全部设为0\r\n     * @return wei格式的收益\r\n     */\r\n    function withdrawEarnings(uint256 _pID)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // 更新gen保险库\r\n        updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        // 来自金库\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n        if (_earnings > 0)\r\n        {\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].gen = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n    /**\r\n     * @dev 准备压缩数据并触发事件以进行购买或重新加载tx\r\n     */\r\n    function endTx(uint256 _pID, uint256 _team, uint256 _eth, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000);\r\n\r\n        emit F3Devents.onEndTx\r\n        (\r\n            _eventData_.compressedData,\r\n            _eventData_.compressedIDs,\r\n            plyr_[_pID].name,\r\n            msg.sender,\r\n            _eth,\r\n            _keys,\r\n            _eventData_.winnerAddr,\r\n            _eventData_.winnerName,\r\n            _eventData_.amountWon,\r\n            _eventData_.newPot,\r\n            _eventData_.P3DAmount,\r\n            _eventData_.genAmount,\r\n            _eventData_.potAmount,\r\n            airDropPot_\r\n        );\r\n    }\r\n//==============================================================================\r\n//    (~ _  _    _._|_    .\r\n//    _)(/_(_|_|| | | \\/  .\r\n//====================/=========================================================\r\n    /** 合同部署后，它将被停用。这是一次\r\n     * 使用将激活合同的功能。我们这样做是开发者\r\n     * 有时间在网络端设置                           **/\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n    {\r\n        // 只有团队才能激活\r\n        require(msg.sender == admin, \"only admin can activate\");\r\n\r\n\r\n        // 只能跑一次\r\n        require(activated_ == false, \"FOMO Free already activated\");\r\n\r\n        // 激活合同\r\n        activated_ = true;\r\n\r\n        // 让我们开始第一轮\r\n        rID_ = 1;\r\n            round_[1].strt = now + rndExtra_ - rndGap_;\r\n            round_[1].end = now + rndInit_ + rndExtra_;\r\n    }\r\n}\r\n\r\n//==============================================================================\r\n//   __|_ _    __|_ _  .\r\n//  _\\ | | |_|(_ | _\\  .\r\n//==============================================================================\r\nlibrary F3Ddatasets {\r\n    //压缩数据密钥\r\n    // [76-33][32][31][30][29][28-18][17][16-6][5-3][2][1][0]\r\n        // 0 - new player (bool)\r\n        // 1 - joined round (bool)\r\n        // 2 - new  leader (bool)\r\n        // 3-5 - air drop tracker (uint 0-999)\r\n        // 6-16 - round end time\r\n        // 17 - winnerTeam\r\n        // 18 - 28 timestamp\r\n        // 29 - team\r\n        // 30 - 0 = reinvest (round), 1 = buy (round), 2 = buy (ico), 3 = reinvest (ico)\r\n        // 31 - airdrop happened bool\r\n        // 32 - airdrop tier\r\n        // 33 - airdrop amount won\r\n    //压缩的ID密钥\r\n    // [77-52][51-26][25-0]\r\n        // 0-25 - pID\r\n        // 26-51 - winPID\r\n        // 52-77 - rID\r\n    struct EventReturns {\r\n        uint256 compressedData;\r\n        uint256 compressedIDs;\r\n        address winnerAddr;         // 获胜者地址\r\n        bytes32 winnerName;         // 获胜者地址\r\n        uint256 amountWon;          // 金额赢了\r\n        uint256 newPot;             // 在新锅中的数量\r\n        uint256 P3DAmount;          // 金额分配给p3d\r\n        uint256 genAmount;          // 金额分配给gen\r\n        uint256 potAmount;          // 加入锅中的量\r\n    }\r\n    struct Player {\r\n        address addr;   // 球员地址\r\n        bytes32 name;   // 参赛者姓名\r\n        uint256 win;    // 赢得金库\r\n        uint256 gen;    // 一般金库\r\n        uint256 aff;    // 会员保险库\r\n        uint256 lrnd;   // 上一轮比赛\r\n        uint256 laff;   // 使用的最后一个会员ID\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 eth;    // 玩家加入回合（用于eth限制器）\r\n        uint256 keys;   // 按键\r\n        uint256 mask;   // 运动员面具\r\n        uint256 ico;    // ICO阶段投资\r\n    }\r\n    struct Round {\r\n        uint256 plyr;   // 领先的玩家的pID\r\n        uint256 team;   // 领导团队的tID\r\n        uint256 end;    // 时间结束/结束\r\n        bool ended;     // 已经运行了圆端函数\r\n        uint256 strt;   // 时间开始了\r\n        uint256 keys;   // 按键\r\n        uint256 eth;    // 总人口\r\n        uint256 pot;    // 罐装（在回合期间）/最终金额支付给获胜者（在回合结束后）\r\n        uint256 mask;   // 全球面具\r\n        uint256 ico;    // 在ICO阶段发送的总eth\r\n        uint256 icoGen; // ICO阶段的gen eth总量\r\n        uint256 icoAvg; // ICO阶段的平均关键价格\r\n    }\r\n    struct TeamFee {\r\n        uint256 gen;    // 支付给本轮关键持有人的购买百分比\r\n        uint256 p3d;    // 支付给p3d持有人的购买百分比\r\n    }\r\n    struct PotSplit {\r\n        uint256 gen;    // 支付给本轮关键持有人的底池百分比\r\n        uint256 p3d;    // 付给p3d持有者的锅的百分比\r\n    }\r\n}\r\n\r\n//==============================================================================\r\n//  |  _      _ _ | _  .\r\n//  |<(/_\\/  (_(_||(_  .\r\n//=======/======================================================================\r\nlibrary F3DKeysCalcShort {\r\n    using SafeMath for *;\r\n    /**\r\n     * @dev 计算给定X eth时收到的密钥数\r\n     * @param _curEth 合同中的当前eth数量\r\n     * @param _newEth eth被用掉了\r\n     * @return 购买的机票数量\r\n     */\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    /**\r\n     * @dev 计算出售X键时收到的eth数量\r\n     * @param _curKeys 当前存在的密钥数量\r\n     * @param _sellKeys 您希望出售的钥匙数量\r\n     * @return 收到的eth数量\r\n     */\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    /**\r\n     * @dev 计算给定一定数量的eth会存在多少个密钥\r\n     * @param _eth 合同中的道德\r\n     * @return 将存在的密钥数\r\n     */\r\n    function keys(uint256 _eth)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    /**\r\n     * @dev 在给定一些密钥的情况下计算合同中的eth数量\r\n     * @param _keys “契约”中的键数\r\n     * @return 存在的道德\r\n     */\r\n    function eth(uint256 _keys)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n//==============================================================================\r\n//  . _ _|_ _  _ |` _  _ _  _  .\r\n//  || | | (/_| ~|~(_|(_(/__\\  .\r\n//==============================================================================\r\n\r\ninterface PlayerBookInterface {\r\n    function getPlayerID(address _addr) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getNameFee() external view returns (uint256);\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev 过滤名称字符串\r\n     * -将大写转换为小写.\r\n     * -确保它不以空格开始/结束\r\n     * -确保它不包含连续的多个空格\r\n     * -不能只是数字\r\n     * -不能以0x开头\r\n     * -将字符限制为A-Z，a-z，0-9和空格。\r\n     * @return 以字节32格式重新处理的字符串\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //对不起限于32个字符\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // 确保它不以空格开头或以空格结尾\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // 确保前两个字符不是0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // 创建一个bool来跟踪我们是否有非数字字符\r\n        bool _hasNonNumber;\r\n\r\n        // 转换和检查\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // 如果它的大写A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // 转换为小写a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // 我们有一个非数字\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // 要求角色是一个空间\r\n                    _temp[i] == 0x20 ||\r\n                    // 或小写a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // 或0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // 确保连续两行不是空格\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // 看看我们是否有一个数字以外的字符\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev 带有安全检查的数学运算会引发错误\r\n * - 添加 sqrt\r\n * - 添加 sq\r\n * - 添加 pwr\r\n * - 将断言更改为需要带有错误日志输出\r\n * - 删除div，它没用\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev 将两个数字相乘，抛出溢出。\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev 减去两个数字，在溢出时抛出（即，如果减数大于减数）。\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev 添加两个数字，溢出时抛出。\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev 给出给定x的平方根.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev 给广场。将x乘以x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x到y的力量\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"},{\"name\":\"icoGen\",\"type\":\"uint256\"},{\"name\":\"icoAvg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees_\",\"outputs\":[{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"p3d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_laff\",\"type\":\"uint256\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTmEth_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"receivePlayerNameList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potSplit_\",\"outputs\":[{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"p3d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcKeysReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"potSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"airDropPot\",\"type\":\"uint256\"}],\"name\":\"onEndTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onBuyAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"P3DAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onReLoadAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffiliatePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountAddedToPot\",\"type\":\"uint256\"}],\"name\":\"onPotSwapDeposit\",\"type\":\"event\"}]","ContractName":"WorldFomo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c216b1463a1e61efe8c5815d68997bc70ee3fb88341cc71bcc2502819a6316e"}]}