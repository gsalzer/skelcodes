{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * EasyInvest 6 Contract\r\n *  - GAIN 6% PER 24 HOURS\r\n *  - STRONG MARKETING SUPPORT  \r\n *  - NEW BETTER IMPROVEMENTS\r\n * How to use:\r\n *  1. Send any amount of ether to make an investment;\r\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS);\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time;\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * Contract is reviewed and approved by professionals!\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract EasyInvest6 is Ownable\r\n{   \r\n    using SafeMath for uint;\r\n    \r\n    mapping (address => uint) public invested;\r\n    mapping (address => uint) public lastInvest;\r\n    address[] public investors;\r\n    \r\n    address private m1;\r\n    address private m2;\r\n    \r\n    \r\n    function getInvestorsCount() public view returns(uint) \r\n    {   \r\n        return investors.length;\r\n    }\r\n    \r\n    function () external payable \r\n    {   \r\n        if(msg.value > 0) \r\n        {   \r\n            require(msg.value >= 100 finney, \"require minimum 0.01 ETH\"); // min 0.01 ETH\r\n            \r\n            uint fee = msg.value.mul(7).div(100).add(msg.value.div(200)); // 7.5%;            \r\n            if(m1 != address(0)) m1.transfer(fee);\r\n            if(m2 != address(0)) m2.transfer(fee);\r\n        }\r\n    \r\n        payWithdraw(msg.sender);\r\n        \r\n        if (invested[msg.sender] == 0) \r\n        {\r\n            investors.push(msg.sender);\r\n        }\r\n        \r\n        lastInvest[msg.sender] = now;\r\n        invested[msg.sender] += msg.value;\r\n    }\r\n    \r\n    function getNumberOfPeriods(uint startTime, uint endTime) public pure returns (uint)\r\n    {\r\n        return endTime.sub(startTime).div(1 days);\r\n    }\r\n    \r\n    function getWithdrawAmount(uint investedSum, uint numberOfPeriods) public pure returns (uint)\r\n    {\r\n        return investedSum.mul(6).div(100).mul(numberOfPeriods);\r\n    }\r\n    \r\n    function payWithdraw(address to) internal\r\n    {\r\n        if (invested[to] != 0) \r\n        {\r\n            uint numberOfPeriods = getNumberOfPeriods(lastInvest[to], now);\r\n            uint amount = getWithdrawAmount(invested[to], numberOfPeriods);\r\n            to.transfer(amount);\r\n        }\r\n    }\r\n    \r\n    function batchWithdraw(address[] to) onlyOwner public \r\n    {\r\n        for(uint i = 0; i < to.length; i++)\r\n        {\r\n            payWithdraw(to[i]);\r\n        }\r\n    }\r\n    \r\n    function batchWithdraw(uint startIndex, uint length) onlyOwner public \r\n    {\r\n        for(uint i = startIndex; i < length; i++)\r\n        {\r\n            payWithdraw(investors[i]);\r\n        }\r\n    }\r\n    \r\n    function setM1(address addr) onlyOwner public \r\n    {\r\n        m1 = addr;\r\n    }\r\n    \r\n    function setM2(address addr) onlyOwner public \r\n    {\r\n        m2 = addr;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setM2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setM1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"getNumberOfPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investedSum\",\"type\":\"uint256\"},{\"name\":\"numberOfPeriods\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EasyInvest6","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1ff7e7a64255e5c58b61b302db8a5260e5a1d7f5032fe7648ee48a7219114d2"}]}