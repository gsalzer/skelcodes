{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\n\r\ncontract BatchTransferWallet is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Send token to multiple address\r\n    * @param _investors The addresses of EOA that can receive token from this contract.\r\n    * @param _tokenAmounts The values of token are sent from this contract.\r\n    */\r\n    function batchTransferFrom(address _tokenAddress, address[] _investors, uint256[] _tokenAmounts) public {\r\n        ERC20BasicInterface token = ERC20BasicInterface(_tokenAddress);\r\n        require(_investors.length == _tokenAmounts.length && _investors.length != 0);\r\n\r\n        for (uint i = 0; i < _investors.length; i++) {\r\n            require(_tokenAmounts[i] > 0 && _investors[i] != 0x0);\r\n            require(token.transferFrom(msg.sender,_investors[i], _tokenAmounts[i]));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev return token balance this contract has\r\n    * @return _address token balance this contract has.\r\n    */\r\n    function balanceOfContract(address _tokenAddress,address _address) public view returns (uint) {\r\n        ERC20BasicInterface token = ERC20BasicInterface(_tokenAddress);\r\n        return token.balanceOf(_address);\r\n    }\r\n    function getTotalSendingAmount(uint256[] _amounts) private pure returns (uint totalSendingAmount) {\r\n        for (uint i = 0; i < _amounts.length; i++) {\r\n            require(_amounts[i] > 0);\r\n            totalSendingAmount += _amounts[i];\r\n        }\r\n    }\r\n    // Events allow light clients to react on\r\n    // changes efficiently.\r\n    event Sent(address from, address to, uint amount);\r\n    function transferMulti(address[] receivers, uint256[] amounts) payable {\r\n        require(msg.value != 0 && msg.value >= getTotalSendingAmount(amounts));\r\n        for (uint256 j = 0; j < amounts.length; j++) {\r\n            receivers[j].transfer(amounts[j]);\r\n            emit Sent(msg.sender, receivers[j], amounts[j]);\r\n        }\r\n    }\r\n    /**\r\n        * @dev Withdraw the amount of token that is remaining in this contract.\r\n        * @param _address The address of EOA that can receive token from this contract.\r\n        */\r\n        function withdraw(address _address) public onlyOwner {\r\n            require(_address != address(0));\r\n            _address.transfer(address(this).balance);\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BatchTransferWallet","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d7daff20b0b89b576bccf1971ec28f0a9e4bef4175947f0205c15c610fb2bc0f"}]}