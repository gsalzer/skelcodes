{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n*  ██████╗ ██╗   ██╗███╗   ██╗███╗   ██╗██╗   ██╗    \r\n*  ██╔══██╗██║   ██║████╗  ██║████╗  ██║╚██╗ ██╔╝    \r\n*  ██████╔╝██║   ██║██╔██╗ ██║██╔██╗ ██║ ╚████╔╝     \r\n*  ██╔══██╗██║   ██║██║╚██╗██║██║╚██╗██║  ╚██╔╝      \r\n*  ██████╔╝╚██████╔╝██║ ╚████║██║ ╚████║   ██║       \r\n*  ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═══╝   ╚═╝       \r\n*                                                    \r\n*   ██████╗  █████╗ ███╗   ███╗███████╗              \r\n*  ██╔════╝ ██╔══██╗████╗ ████║██╔════╝              \r\n*  ██║  ███╗███████║██╔████╔██║█████╗                \r\n*  ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝                \r\n*  ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗              \r\n*   ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝      \r\n\r\n\r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame\r\n* \r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\n\r\ncontract Ownable {\r\n    \r\n    address public ownerCEO;\r\n    address ownerMoney;  \r\n    address ownerServer;\r\n    address privAddress;\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public { \r\n        ownerCEO = msg.sender; \r\n        ownerServer = msg.sender;\r\n        ownerMoney = msg.sender;\r\n    }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerCEO);\r\n        _;\r\n    }\r\n   \r\n    modifier onlyServer() {\r\n        require(msg.sender == ownerServer || msg.sender == ownerCEO);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address add) public onlyOwner {\r\n        if (add != address(0)) {\r\n            ownerCEO = add;\r\n        }\r\n    }\r\n \r\n\r\n    function transferOwnershipServer(address add) public onlyOwner {\r\n        if (add != address(0)) {\r\n            ownerServer = add;\r\n        }\r\n    } \r\n     \r\n    function transferOwnerMoney(address _ownerMoney) public  onlyOwner {\r\n        if (_ownerMoney != address(0)) {\r\n            ownerMoney = _ownerMoney;\r\n        }\r\n    }\r\n \r\n    function getOwnerMoney() public view onlyOwner returns(address) {\r\n        return ownerMoney;\r\n    } \r\n    function getOwnerServer() public view onlyOwner returns(address) {\r\n        return ownerServer;\r\n    }\r\n    /**\r\n    *  @dev private contract\r\n     */\r\n    function getPrivAddress() public view onlyOwner returns(address) {\r\n        return privAddress;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n \r\n\r\ncontract BaseRabbit  is Ownable {\r\n       \r\n\r\n\r\n    event SendBunny(address newOwnerBunny, uint32 bunnyId);\r\n    event StopMarket(uint32 bunnyId);\r\n    event StartMarket(uint32 bunnyId, uint money);\r\n    event BunnyBuy(uint32 bunnyId, uint money);  \r\n    event EmotherCount(uint32 mother, uint summ);\r\n    event NewBunny(uint32 bunnyId, uint dnk, uint256 blocknumber, uint breed );\r\n    event ChengeSex(uint32 bunnyId, bool sex, uint256 price);\r\n    event SalaryBunny(uint32 bunnyId, uint cost);\r\n    event CreateChildren(uint32 matron, uint32 sire, uint32 child);\r\n    event BunnyName(uint32 bunnyId, string name);\r\n    event BunnyDescription(uint32 bunnyId, string name);\r\n    event CoolduwnMother(uint32 bunnyId, uint num);\r\n\r\n\r\n    event Transfer(address from, address to, uint32 tokenId);\r\n    event Approval(address owner, address approved, uint32 tokenId);\r\n    event OwnerBunnies(address owner, uint32  tokenId);\r\n\r\n \r\n\r\n    address public  myAddr_test = 0x982a49414fD95e3268D3559540A67B03e40AcD64;\r\n\r\n    using SafeMath for uint256;\r\n    bool pauseSave = false;\r\n    uint256 bigPrice = 0.0005 ether;\r\n    \r\n    uint public commission_system = 5;\r\n     \r\n    // ID the last seal\r\n    uint32 public lastIdGen0;\r\n    uint public totalGen0 = 0;\r\n    // ID the last seal\r\n    uint public lastTimeGen0;\r\n    \r\n    // ID the last seal\r\n  //  uint public timeRangeCreateGen0 = 1800;\r\n    uint public timeRangeCreateGen0 = 1;\r\n\r\n    uint public promoGen0 = 2500;\r\n    uint public promoMoney = 1*bigPrice;\r\n    bool public promoPause = false;\r\n\r\n\r\n    function setPromoGen0(uint _promoGen0) public onlyOwner {\r\n        promoGen0 = _promoGen0;\r\n    }\r\n\r\n    function setPromoPause() public onlyOwner {\r\n        promoPause = !promoPause;\r\n    }\r\n\r\n\r\n\r\n    function setPromoMoney(uint _promoMoney) public onlyOwner {\r\n        promoMoney = _promoMoney;\r\n    }\r\n    modifier timeRange() {\r\n        require((lastTimeGen0+timeRangeCreateGen0) < now);\r\n        _;\r\n    } \r\n\r\n    mapping(uint32 => uint) public totalSalaryBunny;\r\n    mapping(uint32 => uint32[5]) public rabbitMother;\r\n    \r\n    mapping(uint32 => uint) public motherCount;\r\n    \r\n    // how many times did the rabbit cross\r\n    mapping(uint32 => uint) public rabbitBreedCount;\r\n\r\n    mapping(uint32 => uint)  public rabbitSirePrice;\r\n    mapping(uint => uint32[]) public sireGenom;\r\n    mapping (uint32 => uint) mapDNK;\r\n   \r\n    uint32[12] public cooldowns = [\r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(4 minutes),\r\n        uint32(8 minutes),\r\n        uint32(16 minutes),\r\n        uint32(32 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days)\r\n    ];\r\n\r\n\r\n    struct Rabbit { \r\n         // parents\r\n        uint32 mother;\r\n        uint32 sire; \r\n        // block in which a rabbit was born\r\n        uint birthblock;\r\n         // number of births or how many times were offspring\r\n        uint birthCount;\r\n         // The time when Rabbit last gave birth\r\n        uint birthLastTime;\r\n        //the current role of the rabbit\r\n        uint role;\r\n        //indexGenome   \r\n        uint genome;\r\n    }\r\n    /**\r\n    * Where we will store information about rabbits\r\n    */\r\n    Rabbit[]  public rabbits;\r\n     \r\n    /**\r\n    * who owns the rabbit\r\n    */\r\n    mapping (uint32 => address) public rabbitToOwner; \r\n    mapping(address => uint32[]) public ownerBunnies;\r\n    //mapping (address => uint) ownerRabbitCount;\r\n    mapping (uint32 => string) rabbitDescription;\r\n    mapping (uint32 => string) rabbitName; \r\n\r\n    //giff \r\n    mapping (uint32 => bool) giffblock; \r\n    mapping (address => bool) ownerGennezise;\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods \r\n \r\n\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint32 _tokenId) public returns (bool success);\r\n    function transfer(address _to, uint32 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns (bool);\r\n    function totalSupply() public view returns (uint total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n\r\n}\r\n\r\n/// @title Interface new rabbits address\r\ncontract PrivateRabbitInterface {\r\n    function getNewRabbit(address from)  public view returns (uint);\r\n    function mixDNK(uint dnkmother, uint dnksire, uint genome)  public view returns (uint);\r\n    function isUIntPrivate() public pure returns (bool);\r\n    \r\n  //  function mixGenesRabbits(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ncontract BodyRabbit is BaseRabbit, ERC721 {\r\n     \r\n    uint public totalBunny = 0;\r\n    string public constant name = \"CryptoRabbits\";\r\n    string public constant symbol = \"CRB\";\r\n\r\n\r\n    PrivateRabbitInterface privateContract;\r\n\r\n    /**\r\n    * @dev setting up a new address for a private contract\r\n    */\r\n    function setPriv(address _privAddress) public returns(bool) {\r\n        privAddress = _privAddress;\r\n        privateContract = PrivateRabbitInterface(_privAddress);\r\n    } \r\n\r\n    bool public fcontr = false;\r\n \r\n    \r\n    constructor() public { \r\n        setPriv(myAddr_test);\r\n        fcontr = true;\r\n    }\r\n\r\n    function isPriv() public view returns(bool) {\r\n        return privateContract.isUIntPrivate();\r\n    }\r\n\r\n    modifier checkPrivate() {\r\n        require(isPriv());\r\n        _;\r\n    }\r\n\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner) {\r\n        return rabbitToOwner[_tokenId];\r\n    }\r\n\r\n    function approve(address _to, uint32 _tokenId) public returns (bool) { \r\n        _to;\r\n        _tokenId;\r\n        return false;\r\n    }\r\n\r\n\r\n    function removeTokenList(address _owner, uint32 _tokenId) internal { \r\n        uint count = ownerBunnies[_owner].length;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            if(ownerBunnies[_owner][i] == _tokenId)\r\n            { \r\n                delete ownerBunnies[_owner][i];\r\n                if(count > 0 && count != (i-1)){\r\n                    ownerBunnies[_owner][i] = ownerBunnies[_owner][(count-1)];\r\n                    delete ownerBunnies[_owner][(count-1)];\r\n                } \r\n                ownerBunnies[_owner].length--;\r\n                return;\r\n            } \r\n        }\r\n    }\r\n    /**\r\n    * Get the cost of the reward for pairing\r\n    * @param _tokenId - rabbit that mates\r\n     */\r\n    function getSirePrice(uint32 _tokenId) public view returns(uint) {\r\n        if(rabbits[(_tokenId-1)].role == 1){\r\n            uint procent = (rabbitSirePrice[_tokenId] / 100);\r\n            uint res = procent.mul(25);\r\n            uint system  = procent.mul(commission_system);\r\n\r\n            res = res.add(rabbitSirePrice[_tokenId]);\r\n            return res.add(system); \r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n \r\n    function addTokenList(address owner,  uint32 _tokenId) internal {\r\n        ownerBunnies[owner].push( _tokenId);\r\n        emit OwnerBunnies(owner, _tokenId);\r\n        rabbitToOwner[_tokenId] = owner; \r\n    }\r\n \r\n\r\n    function transfer(address _to, uint32 _tokenId) public {\r\n        address currentOwner = msg.sender;\r\n        address oldOwner = rabbitToOwner[_tokenId];\r\n        require(rabbitToOwner[_tokenId] == msg.sender);\r\n        require(currentOwner != _to);\r\n        require(_to != address(0));\r\n        removeTokenList(oldOwner, _tokenId);\r\n        addTokenList(_to, _tokenId);\r\n        emit Transfer(oldOwner, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns(bool) {\r\n        address oldOwner = rabbitToOwner[_tokenId];\r\n        require(oldOwner == _from);\r\n        require(oldOwner != _to);\r\n        require(_to != address(0));\r\n        removeTokenList(oldOwner, _tokenId);\r\n        addTokenList(_to, _tokenId); \r\n        emit Transfer (oldOwner, _to, _tokenId);\r\n        return true;\r\n    }  \r\n    \r\n    function setTimeRangeGen0(uint _sec) public onlyOwner {\r\n        timeRangeCreateGen0 = _sec;\r\n    }\r\n\r\n\r\n    function isPauseSave() public view returns(bool) {\r\n        return !pauseSave;\r\n    }\r\n    function isPromoPause() public view returns(bool) {\r\n        if(msg.sender == ownerServer || msg.sender == ownerCEO){\r\n            return true;\r\n        }else{\r\n            return !promoPause;\r\n        } \r\n    }\r\n\r\n    function setPauseSave() public onlyOwner  returns(bool) {\r\n        return pauseSave = !pauseSave;\r\n    }\r\n\r\n    /**\r\n    * for check\r\n    *\r\n    */\r\n    function isUIntPublic() public pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    function getTokenOwner(address owner) public view returns(uint total, uint32[] list) {\r\n        total = ownerBunnies[owner].length;\r\n        list = ownerBunnies[owner];\r\n    } \r\n\r\n\r\n\r\n    function setRabbitMother(uint32 children, uint32 mother) internal { \r\n        require(children != mother);\r\n        if (mother == 0 )\r\n        {\r\n            return;\r\n        }\r\n        uint32[11] memory pullMother;\r\n        uint start = 0;\r\n        for (uint i = 0; i < 5; i++) {\r\n            if (rabbitMother[mother][i] != 0) {\r\n              pullMother[start] = uint32(rabbitMother[mother][i]);\r\n              rabbitMother[mother][i] = 0;\r\n              start++;\r\n            } \r\n        }\r\n        pullMother[start] = mother;\r\n        start++;\r\n        for (uint m = 0; m < 5; m++) {\r\n             if(start >  5){\r\n                    rabbitMother[children][m] = pullMother[(m+1)];\r\n             }else{\r\n                    rabbitMother[children][m] = pullMother[m];\r\n             }\r\n        } \r\n        setMotherCount(mother);\r\n    }\r\n\r\n      \r\n\r\n    function setMotherCount(uint32 _mother) internal returns(uint)  { //internal\r\n        motherCount[_mother] = motherCount[_mother].add(1);\r\n        emit EmotherCount(_mother, motherCount[_mother]);\r\n        return motherCount[_mother];\r\n    }\r\n\r\n\r\n     function getMotherCount(uint32 _mother) public view returns(uint) { //internal\r\n        return  motherCount[_mother];\r\n    }\r\n\r\n\r\n     function getTotalSalaryBunny(uint32 _bunny) public view returns(uint) { //internal\r\n        return  totalSalaryBunny[_bunny];\r\n    }\r\n \r\n \r\n    function getRabbitMother( uint32 mother) public view returns(uint32[5]){\r\n        return rabbitMother[mother];\r\n    }\r\n\r\n     function getRabbitMotherSumm(uint32 mother) public view returns(uint count) { //internal\r\n        for (uint m = 0; m < 5 ; m++) {\r\n            if(rabbitMother[mother][m] != 0 ) { \r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function getRabbitDNK(uint32 bunnyid) public view returns(uint) { \r\n        return mapDNK[bunnyid];\r\n    }\r\n     \r\n    function bytes32ToString(bytes32 x)internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n    \r\n    function uintToBytes(uint v) internal pure returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        } else {\r\n        while (v > 0) {\r\n                ret = bytes32(uint(ret) / (2 ** 8));\r\n                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint total) {\r\n        return totalBunny;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n      //  _owner;\r\n        return ownerBunnies[_owner].length;\r\n    }\r\n\r\n    function sendMoney(address _to, uint256 _money) internal { \r\n        _to.transfer((_money/100)*95);\r\n        ownerMoney.transfer((_money/100)*5); \r\n    }\r\n\r\n    function getGiffBlock(uint32 _bunnyid) public view returns(bool) { \r\n        return !giffblock[_bunnyid];\r\n    }\r\n\r\n    function getOwnerGennezise(address _to) public view returns(bool) { \r\n        return ownerGennezise[_to];\r\n    }\r\n    \r\n\r\n    function getBunny(uint32 _bunny) public view returns(\r\n        uint32 mother,\r\n        uint32 sire,\r\n        uint birthblock,\r\n        uint birthCount,\r\n        uint birthLastTime,\r\n        uint role, \r\n        uint genome,\r\n        bool interbreed,\r\n        uint leftTime,\r\n        uint lastTime,\r\n        uint price,\r\n        uint motherSumm\r\n        )\r\n        {\r\n            price = getSirePrice(_bunny);\r\n            _bunny = _bunny - 1;\r\n\r\n            mother = rabbits[_bunny].mother;\r\n            sire = rabbits[_bunny].sire;\r\n            birthblock = rabbits[_bunny].birthblock;\r\n            birthCount = rabbits[_bunny].birthCount;\r\n            birthLastTime = rabbits[_bunny].birthLastTime;\r\n            role = rabbits[_bunny].role;\r\n            genome = rabbits[_bunny].genome;\r\n                     \r\n            if(birthCount > 14) {\r\n                birthCount = 14;\r\n            }\r\n\r\n            motherSumm = motherCount[_bunny];\r\n\r\n            lastTime = uint(cooldowns[birthCount]);\r\n            lastTime = lastTime.add(birthLastTime);\r\n            if(lastTime <= now) {\r\n                interbreed = true;\r\n            } else {\r\n                leftTime = lastTime.sub(now);\r\n            }\r\n    }\r\n\r\n\r\n    function getBreed(uint32 _bunny) public view returns(\r\n        bool interbreed\r\n        )\r\n        {\r\n        _bunny = _bunny - 1;\r\n        if(_bunny == 0) {\r\n            return;\r\n        }\r\n        uint birtTime = rabbits[_bunny].birthLastTime;\r\n        uint birthCount = rabbits[_bunny].birthCount;\r\n\r\n        uint  lastTime = uint(cooldowns[birthCount]);\r\n        lastTime = lastTime.add(birtTime);\r\n\r\n        if(lastTime <= now && rabbits[_bunny].role == 0 ) {\r\n            interbreed = true;\r\n        } \r\n    }\r\n    /**\r\n     *  we get cooldown\r\n     */\r\n    function getcoolduwn(uint32 _mother) public view returns(uint lastTime, uint cd, uint lefttime) {\r\n        cd = rabbits[(_mother-1)].birthCount;\r\n        if(cd > 14) {\r\n            cd = 14;\r\n        }\r\n        // time when I can give birth\r\n        lastTime = (cooldowns[cd] + rabbits[(_mother-1)].birthLastTime);\r\n        if(lastTime > now) {\r\n            // I can not give birth, it remains until delivery\r\n            lefttime = lastTime.sub(now);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* sale and bye Rabbits\r\n*/\r\ncontract RabbitMarket is BodyRabbit {\r\n \r\n // Long time\r\n    uint stepMoney = 2*60*60;\r\n           \r\n    function setStepMoney(uint money) public onlyOwner {\r\n        stepMoney = money;\r\n    }\r\n    /**\r\n    * @dev number of rabbits participating in the auction\r\n    */\r\n    uint marketCount = 0; \r\n\r\n    uint daysperiod = 1;\r\n    uint sec = 1;\r\n    // how many last sales to take into account in the contract before the formation of the price\r\n    uint8 middlelast = 20;\r\n    \r\n   \r\n     \r\n    // those who currently participate in the sale\r\n    mapping(uint32 => uint256[]) internal marketRabbits;\r\n     \r\n     \r\n    uint256 middlePriceMoney = 1; \r\n    uint256 middleSaleTime = 0;  \r\n    uint moneyRange;\r\n \r\n    function setMoneyRange(uint _money) public onlyOwner {\r\n        moneyRange = _money;\r\n    }\r\n     \r\n    // the last cost of a sold seal\r\n    uint lastmoney = 0;  \r\n    // the time which was spent on the sale of the cat\r\n    uint lastTimeGen0;\r\n\r\n    //how many closed auctions\r\n    uint public totalClosedBID = 0;\r\n    mapping (uint32 => uint) bunnyCost; \r\n    mapping(uint32 => uint) bidsIndex;\r\n \r\n\r\n    /**\r\n    * @dev get rabbit price\r\n    */\r\n    function currentPrice(uint32 _bunnyid) public view returns(uint) {\r\n\r\n        uint money = bunnyCost[_bunnyid];\r\n        if (money > 0) {\r\n            uint moneyComs = money.div(100);\r\n            moneyComs = moneyComs.mul(5);\r\n            return money.add(moneyComs);\r\n        }\r\n    }\r\n    /**\r\n    * @dev We are selling rabbit for sale\r\n    * @param _bunnyid - whose rabbit we exhibit \r\n    * @param _money - sale amount \r\n    */\r\n  function startMarket(uint32 _bunnyid, uint _money) public returns (uint) {\r\n        require(isPauseSave());\r\n        require(_money >= bigPrice);\r\n        require(rabbitToOwner[_bunnyid] ==  msg.sender);\r\n        bunnyCost[_bunnyid] = _money;\r\n        emit StartMarket(_bunnyid, _money);\r\n        return marketCount++;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev remove from sale rabbit\r\n    * @param _bunnyid - a rabbit that is removed from sale \r\n    */\r\n    function stopMarket(uint32 _bunnyid) public returns(uint) {\r\n        require(isPauseSave());\r\n        require(rabbitToOwner[_bunnyid] == msg.sender);  \r\n        bunnyCost[_bunnyid] = 0;\r\n        emit StopMarket(_bunnyid);\r\n        return marketCount--;\r\n    }\r\n\r\n    /**\r\n    * @dev Acquisition of a rabbit from another user\r\n    * @param _bunnyid  Bunny\r\n     */\r\n    function buyBunny(uint32 _bunnyid) public payable {\r\n        require(isPauseSave());\r\n        require(rabbitToOwner[_bunnyid] != msg.sender);\r\n        uint price = currentPrice(_bunnyid);\r\n\r\n        require(msg.value >= price && 0 != price);\r\n        // stop trading on the current rabbit\r\n        totalClosedBID++;\r\n        // Sending money to the old user\r\n        sendMoney(rabbitToOwner[_bunnyid], msg.value);\r\n        // is sent to the new owner of the bought rabbit\r\n        transferFrom(rabbitToOwner[_bunnyid], msg.sender, _bunnyid); \r\n        stopMarket(_bunnyid); \r\n\r\n        emit BunnyBuy(_bunnyid, price);\r\n        emit SendBunny (msg.sender, _bunnyid);\r\n    } \r\n\r\n    /**\r\n    * @dev give a rabbit to a specific user\r\n    * @param add new address owner rabbits\r\n    */\r\n    function giff(uint32 bunnyid, address add) public {\r\n        require(rabbitToOwner[bunnyid] == msg.sender);\r\n        // a rabbit taken for free can not be given\r\n        require(!(giffblock[bunnyid]));\r\n        transferFrom(msg.sender, add, bunnyid);\r\n    }\r\n\r\n    function getMarketCount() public view returns(uint) {\r\n        return marketCount;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* Basic actions for the transfer of rights of rabbits\r\n*/\r\ncontract BunnyGame is RabbitMarket {    \r\n  \r\n    function transferNewBunny(address _to, uint32 _bunnyid, uint localdnk, uint breed, uint32 matron, uint32 sire) internal {\r\n        emit NewBunny(_bunnyid, localdnk, block.number, breed);\r\n        emit CreateChildren(matron, sire, _bunnyid);\r\n        addTokenList(_to, _bunnyid);\r\n        totalSalaryBunny[_bunnyid] = 0;\r\n        motherCount[_bunnyid] = 0;\r\n        totalBunny++;\r\n    }\r\n\r\n    /***\r\n    * @dev create a new gene and put it up for sale, this operation takes place on the server\r\n    */\r\n    function createGennezise(uint32 _matron) public {\r\n         \r\n        bool promo = false;\r\n        require(isPriv());\r\n        require(isPauseSave());\r\n        require(isPromoPause());\r\n \r\n        if (totalGen0 > promoGen0) { \r\n            require(msg.sender == ownerServer || msg.sender == ownerCEO);\r\n        } else if (!(msg.sender == ownerServer || msg.sender == ownerCEO)) {\r\n            // promo action\r\n                require(!ownerGennezise[msg.sender]);\r\n                ownerGennezise[msg.sender] = true;\r\n                promo = true;\r\n        }\r\n        \r\n        uint  localdnk = privateContract.getNewRabbit(msg.sender);\r\n        Rabbit memory _Rabbit =  Rabbit( 0, 0, block.number, 0, 0, 0, 0);\r\n        uint32 _bunnyid =  uint32(rabbits.push(_Rabbit));\r\n        mapDNK[_bunnyid] = localdnk;\r\n       \r\n        transferNewBunny(msg.sender, _bunnyid, localdnk, 0, 0, 0);  \r\n        \r\n        lastTimeGen0 = now;\r\n        lastIdGen0 = _bunnyid; \r\n        totalGen0++; \r\n\r\n        setRabbitMother(_bunnyid, _matron);\r\n\r\n        if (promo) {\r\n            giffblock[_bunnyid] = true;\r\n        }\r\n    }\r\n\r\n    function getGenomeChildren(uint32 _matron, uint32 _sire) internal view returns(uint) {\r\n        uint genome;\r\n        if (rabbits[(_matron-1)].genome >= rabbits[(_sire-1)].genome) {\r\n            genome = rabbits[(_matron-1)].genome;\r\n        } else {\r\n            genome = rabbits[(_sire-1)].genome;\r\n        }\r\n        return genome.add(1);\r\n    }\r\n    \r\n    /**\r\n    * create a new rabbit, according to the cooldown\r\n    * @param _matron - mother who takes into account the cooldown\r\n    * @param _sire - the father who is rewarded for mating for the fusion of genes\r\n     */\r\n    function createChildren(uint32 _matron, uint32 _sire) public  payable returns(uint32) {\r\n\r\n        require(isPriv());\r\n        require(isPauseSave());\r\n        require(rabbitToOwner[_matron] == msg.sender);\r\n        // Checking for the role\r\n        require(rabbits[(_sire-1)].role == 1);\r\n        require(_matron != _sire);\r\n\r\n        require(getBreed(_matron));\r\n        // Checking the money \r\n        \r\n        require(msg.value >= getSirePrice(_sire));\r\n        \r\n        uint genome = getGenomeChildren(_matron, _sire);\r\n\r\n        uint localdnk =  privateContract.mixDNK(mapDNK[_matron], mapDNK[_sire], genome);\r\n        Rabbit memory rabbit =  Rabbit(_matron, _sire, block.number, 0, 0, 0, genome);\r\n\r\n        uint32 bunnyid =  uint32(rabbits.push(rabbit));\r\n        mapDNK[bunnyid] = localdnk;\r\n\r\n\r\n        uint _moneyMother = rabbitSirePrice[_sire].div(4);\r\n\r\n        _transferMoneyMother(_matron, _moneyMother);\r\n\r\n        rabbitToOwner[_sire].transfer(rabbitSirePrice[_sire]);\r\n\r\n        uint system = rabbitSirePrice[_sire].div(100);\r\n        system = system.mul(commission_system);\r\n        ownerMoney.transfer(system); // refund previous bidder\r\n  \r\n        coolduwnUP(_matron);\r\n        // we transfer the rabbit to the new owner\r\n        transferNewBunny(rabbitToOwner[_matron], bunnyid, localdnk, genome, _matron, _sire);   \r\n        // we establish parents for the child\r\n        setRabbitMother(bunnyid, _matron);\r\n        return bunnyid;\r\n    } \r\n  \r\n    /**\r\n     *  Set the cooldown for childbirth\r\n     * @param _mother - mother for which cooldown\r\n     */\r\n    function coolduwnUP(uint32 _mother) internal { \r\n        require(isPauseSave());\r\n        rabbits[(_mother-1)].birthCount = rabbits[(_mother-1)].birthCount.add(1);\r\n        rabbits[(_mother-1)].birthLastTime = now;\r\n        emit CoolduwnMother(_mother, rabbits[(_mother-1)].birthCount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param _mother - matron send money for parrent\r\n     * @param _valueMoney - current sale\r\n     */\r\n    function _transferMoneyMother(uint32 _mother, uint _valueMoney) internal {\r\n        require(isPauseSave());\r\n        require(_valueMoney > 0);\r\n        if (getRabbitMotherSumm(_mother) > 0) {\r\n            uint pastMoney = _valueMoney/getRabbitMotherSumm(_mother);\r\n            for (uint i=0; i < getRabbitMotherSumm(_mother); i++) {\r\n                if (rabbitMother[_mother][i] != 0) { \r\n                    uint32 _parrentMother = rabbitMother[_mother][i];\r\n                    address add = rabbitToOwner[_parrentMother];\r\n                    // pay salaries\r\n                    setMotherCount(_parrentMother);\r\n                    totalSalaryBunny[_parrentMother] += pastMoney;\r\n\r\n                    emit SalaryBunny(_parrentMother, totalSalaryBunny[_parrentMother]);\r\n\r\n                    add.transfer(pastMoney); // refund previous bidder\r\n                }\r\n            } \r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev We set the cost of renting our genes\r\n    * @param price rent price\r\n     */\r\n    function setRabbitSirePrice(uint32 _rabbitid, uint price) public returns(bool) {\r\n        require(isPauseSave());\r\n        require(rabbitToOwner[_rabbitid] == msg.sender);\r\n        require(price > bigPrice);\r\n\r\n        uint lastTime;\r\n        (lastTime,,) = getcoolduwn(_rabbitid);\r\n        require(now >= lastTime);\r\n\r\n        if (rabbits[(_rabbitid-1)].role == 1 && rabbitSirePrice[_rabbitid] == price) {\r\n            return false;\r\n        }\r\n\r\n        rabbits[(_rabbitid-1)].role = 1;\r\n        rabbitSirePrice[_rabbitid] = price;\r\n        uint gen = rabbits[(_rabbitid-1)].genome;\r\n        sireGenom[gen].push(_rabbitid);\r\n        emit ChengeSex(_rabbitid, true, getSirePrice(_rabbitid));\r\n        return true;\r\n    }\r\n \r\n    /**\r\n    * @dev We set the cost of renting our genes\r\n     */\r\n    function setSireStop(uint32 _rabbitid) public returns(bool) {\r\n        require(isPauseSave());\r\n        require(rabbitToOwner[_rabbitid] == msg.sender);\r\n     //   require(rabbits[(_rabbitid-1)].role == 0);\r\n\r\n        rabbits[(_rabbitid-1)].role = 0;\r\n        rabbitSirePrice[_rabbitid] = 0;\r\n        deleteSire(_rabbitid);\r\n        return true;\r\n    }\r\n    \r\n      function deleteSire(uint32 _tokenId) internal { \r\n        uint gen = rabbits[(_tokenId-1)].genome;\r\n\r\n        uint count = sireGenom[gen].length;\r\n        for (uint i = 0; i < count; i++) {\r\n            if(sireGenom[gen][i] == _tokenId)\r\n            { \r\n                delete sireGenom[gen][i];\r\n                if(count > 0 && count != (i-1)){\r\n                    sireGenom[gen][i] = sireGenom[gen][(count-1)];\r\n                    delete sireGenom[gen][(count-1)];\r\n                } \r\n                sireGenom[gen].length--;\r\n                emit ChengeSex(_tokenId, false, 0);\r\n                return;\r\n            } \r\n        }\r\n    } \r\n\r\n    function getMoney(uint _value) public onlyOwner {\r\n        require(address(this).balance >= _value);\r\n        ownerMoney.transfer(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPrivAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"transferOwnershipServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getcoolduwn\",\"outputs\":[{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"cd\",\"type\":\"uint256\"},{\"name\":\"lefttime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rabbitSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rabbitMother\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"motherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoGen0\",\"type\":\"uint256\"}],\"name\":\"setPromoGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rabbitToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"}],\"name\":\"getGiffBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAddr_test\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getMotherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireGenom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMotherSumm\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getTotalSalaryBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"}],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeRangeCreateGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sec\",\"type\":\"uint256\"}],\"name\":\"setTimeRangeGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBreed\",\"outputs\":[{\"name\":\"interbreed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rabbitid\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setRabbitSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"getSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privAddress\",\"type\":\"address\"}],\"name\":\"setPriv\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bunnyid\",\"type\":\"uint32\"}],\"name\":\"getRabbitDNK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"setMoneyRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rabbits\",\"outputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"role\",\"type\":\"uint256\"},{\"name\":\"genome\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"},{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"startMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPromoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bunnyid\",\"type\":\"uint32\"},{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"giff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalSalaryBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBunny\",\"outputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"role\",\"type\":\"uint256\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"interbreed\",\"type\":\"bool\"},{\"name\":\"leftTime\",\"type\":\"uint256\"},{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"motherSumm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUIntPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastIdGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fcontr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rabbitBreedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPriv\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getOwnerGennezise\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matron\",\"type\":\"uint32\"},{\"name\":\"_sire\",\"type\":\"uint32\"}],\"name\":\"createChildren\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"}],\"name\":\"buyBunny\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rabbitid\",\"type\":\"uint32\"}],\"name\":\"setSireStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBunnies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"list\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMother\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoMoney\",\"type\":\"uint256\"}],\"name\":\"setPromoMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"setStepMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerServer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission_system\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClosedBID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPromoPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"}],\"name\":\"stopMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matron\",\"type\":\"uint32\"}],\"name\":\"createGennezise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerMoney\",\"type\":\"address\"}],\"name\":\"transferOwnerMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwnerBunny\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"}],\"name\":\"SendBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"}],\"name\":\"StopMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"StartMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"BunnyBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mother\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"summ\",\"type\":\"uint256\"}],\"name\":\"EmotherCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"dnk\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"breed\",\"type\":\"uint256\"}],\"name\":\"NewBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sex\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ChengeSex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"SalaryBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"matron\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sire\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"child\",\"type\":\"uint32\"}],\"name\":\"CreateChildren\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"BunnyName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"BunnyDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CoolduwnMother\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"OwnerBunnies\",\"type\":\"event\"}]","ContractName":"BunnyGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f84844efa8bb50d920ec23e0b4c843939eba19504bb58886ab2e627e873fa35"}]}