{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n*__/\\\\\\\\____________/\\\\\\\\________________/\\\\\\\\____________/\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\___________________________________________________\r\n* _\\/\\\\\\\\\\\\________/\\\\\\\\\\\\_______________\\/\\\\\\\\\\\\________/\\\\\\\\\\\\_______\\////\\\\\\____\\////\\\\\\___________________________________________________\r\n*  _\\/\\\\\\//\\\\\\____/\\\\\\//\\\\\\____/\\\\\\__/\\\\\\_\\/\\\\\\//\\\\\\____/\\\\\\//\\\\\\__/\\\\\\____\\/\\\\\\_______\\/\\\\\\_____/\\\\\\__________________________________________\r\n*   _\\/\\\\\\\\///\\\\\\/\\\\\\/_\\/\\\\\\___\\//\\\\\\/\\\\\\__\\/\\\\\\\\///\\\\\\/\\\\\\/_\\/\\\\\\_\\///_____\\/\\\\\\_______\\/\\\\\\____\\///______/\\\\\\\\\\_____/\\\\/\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\_\r\n*    _\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\____\\//\\\\\\\\\\___\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\__/\\\\\\____\\/\\\\\\_______\\/\\\\\\_____/\\\\\\___/\\\\\\///\\\\\\__\\/\\\\\\////\\\\\\__\\/\\\\\\//////__\r\n*     _\\/\\\\\\____\\///_____\\/\\\\\\_____\\//\\\\\\____\\/\\\\\\____\\///_____\\/\\\\\\_\\/\\\\\\____\\/\\\\\\_______\\/\\\\\\____\\/\\\\\\__/\\\\\\__\\//\\\\\\_\\/\\\\\\__\\//\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\_\r\n*      _\\/\\\\\\_____________\\/\\\\\\__/\\\\_/\\\\\\_____\\/\\\\\\_____________\\/\\\\\\_\\/\\\\\\____\\/\\\\\\_______\\/\\\\\\____\\/\\\\\\_\\//\\\\\\__/\\\\\\__\\/\\\\\\___\\/\\\\\\_\\////////\\\\\\_\r\n*       _\\/\\\\\\_____________\\/\\\\\\_\\//\\\\\\\\/______\\/\\\\\\_____________\\/\\\\\\_\\/\\\\\\__/\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\_\\/\\\\\\__\\///\\\\\\\\\\/___\\/\\\\\\___\\/\\\\\\__/\\\\\\\\\\\\\\\\\\\\_\r\n*        _\\///______________\\///___\\////________\\///______________\\///__\\///__\\/////////__\\/////////__\\///_____\\/////_____\\///____\\///__\\//////////__\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public developers = 0x0c05aE835f26a8d4a89Ae80c7A0e5495e5361ca1;\r\n    address public marketers = 0xE222Dd2DD012FCAC0256B1f3830cc033418B6889;\r\n    uint256 public constant developersPercent = 1;\r\n    uint256 public constant marketersPercent = 14;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event DevelopersChanged(address indexed previousDevelopers, address indexed newDevelopers);\r\n    event MarketersChanged(address indexed previousMarketers, address indexed newMarketers);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyThisOwner(address _owner) {\r\n        require(owner == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setDevelopers(address newDevelopers) public onlyOwner {\r\n        require(newDevelopers != address(0));\r\n        emit DevelopersChanged(developers, newDevelopers);\r\n        developers = newDevelopers;\r\n    }\r\n\r\n    function setMarketers(address newMarketers) public onlyOwner {\r\n        require(newMarketers != address(0));\r\n        emit MarketersChanged(marketers, newMarketers);\r\n        marketers = newMarketers;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function max(uint a, uint b) returns (uint) {\r\n        if (a > b) return a;\r\n        else return b;\r\n    }\r\n    function min(uint a, uint b) returns (uint) {\r\n        if (a < b) return a;\r\n        else return b;\r\n    }\r\n}\r\n\r\ncontract LeaderSystem {\r\n    using SafeMath for uint256;\r\n\r\n    event NewLeader(uint256 _indexTable, address _addr, uint256 _index, uint256 _sum);\r\n    event LeadersClear(uint256 _indexTable);\r\n\r\n    uint8 public constant leadersCount = 7;\r\n    mapping (uint8 => uint256) public leaderBonuses;\r\n\r\n    struct LeadersTable {\r\n        uint256 timestampEnd;              // timestamp of closing table\r\n        uint256 duration;                   // duration compute\r\n        uint256 minSum;                     // min sum of leaders\r\n        address[] leaders;                  // leaders array\r\n        mapping (address => uint256) users; // sum all users\r\n    }\r\n\r\n    LeadersTable[] public leaders;\r\n\r\n    function setupLeaderSystemModule() internal {\r\n        leaderBonuses[0] = 10;  // 10%\r\n        leaderBonuses[1] = 7;   // 7%\r\n        leaderBonuses[2] = 5;   // 5%\r\n        leaderBonuses[3] = 3;   // 3%\r\n        leaderBonuses[4] = 1;   // 1%\r\n        leaderBonuses[5] = 0;   // 0%\r\n        leaderBonuses[6] = 0;   // 0%\r\n\r\n        leaders.push(LeadersTable(now + 86400, 86400, 0, new address[](0)));\r\n        leaders.push(LeadersTable(now + 604800, 604800, 0, new address[](0)));\r\n        leaders.push(LeadersTable(now + 77760000, 77760000, 0, new address[](0)));\r\n        leaders.push(LeadersTable(now + 31536000, 31536000, 0, new address[](0)));\r\n    }\r\n\r\n    function _clearLeadersTable(uint256 _indexTable) internal {\r\n        LeadersTable storage _leader = leaders[_indexTable];\r\n        leaders[_indexTable] = LeadersTable(_leader.timestampEnd + _leader.duration, _leader.duration, 0, new address[](0));\r\n\r\n        emit LeadersClear(_indexTable);\r\n    }\r\n\r\n    function quickSort(LeadersTable storage leader, int left, int right) internal {\r\n        int i = left;\r\n        int j = right;\r\n        if (i == j) return;\r\n        uint pivot = leader.users[leader.leaders[uint(left + (right - left) / 2)]];\r\n        while (i <= j) {\r\n            while (leader.users[leader.leaders[uint(i)]] > pivot) i++;\r\n            while (pivot > leader.users[leader.leaders[uint(j)]]) j--;\r\n            if (i <= j) {\r\n                (leader.leaders[uint(i)], leader.leaders[uint(j)]) = (leader.leaders[uint(j)], leader.leaders[uint(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j)\r\n            quickSort(leader, left, j);\r\n        if (i < right)\r\n            quickSort(leader, i, right);\r\n    }\r\n\r\n    function _updateLeadersTable(uint256 i, address _addr, uint256 _value) internal {\r\n        if (now > leaders[i].timestampEnd) _clearLeadersTable(i);\r\n\r\n        LeadersTable storage leader = leaders[i];\r\n        bool isExist = leader.users[_addr] >= leader.minSum;\r\n\r\n        uint256 oldSum = leader.users[_addr];\r\n        uint256 newSum = oldSum.add(_value);\r\n        leader.users[_addr] = newSum;\r\n\r\n        if (newSum < leader.minSum && leader.leaders.length == leadersCount) return;\r\n\r\n        if (!isExist || leader.leaders.length == 0) leader.leaders.push(_addr);\r\n\r\n        if (leader.leaders.length > 1) quickSort(leader, 0, int256(leader.leaders.length - 1));\r\n        if (leader.leaders.length > leadersCount) {\r\n            delete leader.leaders[leadersCount - 1];\r\n        }\r\n\r\n        leader.minSum = leader.users[leader.leaders[leader.leaders.length - 1]];\r\n    }\r\n\r\n    function _updateLeaders(address _addr, uint256 _value) internal {\r\n        for (uint i = 0; i < leaders.length; i++) {\r\n            _updateLeadersTable(i, _addr, _value);\r\n        }\r\n    }\r\n\r\n    function getLeadersTableInfo(uint256 _indexTable) public view returns(uint256, uint256, uint256) {\r\n        return (leaders[_indexTable].timestampEnd, leaders[_indexTable].duration, leaders[_indexTable].minSum);\r\n    }\r\n\r\n    function getLeaders(uint256 _indexTable) public view returns(address[], uint256[]) {\r\n        LeadersTable storage leader = leaders[_indexTable];\r\n        uint256[] memory balances = new uint256[](leader.leaders.length);\r\n\r\n        for (uint i = 0; i < leader.leaders.length; i++) {\r\n            balances[i] = leader.users[leader.leaders[i]];\r\n        }\r\n\r\n        return (leader.leaders, balances);\r\n    }\r\n\r\n}\r\n\r\ncontract Factoring {\r\n\r\n    enum FactoryType { Wood, Metal, Oil, PreciousMetal }\r\n\r\n    mapping (uint8 => uint256) public resourcePrices;\r\n\r\n    function setupFactoringModule() internal {\r\n        resourcePrices[uint8(FactoryType.Wood)]         = 0.02315 szabo;\r\n        resourcePrices[uint8(FactoryType.Metal)]        = 0.03646 szabo;\r\n        resourcePrices[uint8(FactoryType.Oil)]          = 0.04244 szabo;\r\n        resourcePrices[uint8(FactoryType.PreciousMetal)]= 0.06655 szabo;\r\n    }\r\n\r\n    function getResourcePrice(uint8 _type) public view returns(uint256) {\r\n        return resourcePrices[_type];\r\n    }\r\n\r\n}\r\n\r\ncontract Improvements is Factoring {\r\n\r\n    mapping (uint8 => mapping (uint8 => Params)) public levelStack;\r\n    uint8 public constant levelsCount = 7;\r\n\r\n    struct Params {\r\n        uint256 price;      // improvements cost\r\n        uint256 ppm;        // products per minute\r\n        uint256 ppmBonus;   // bonus per minute\r\n    }\r\n\r\n    function setupImprovementsModule() internal {\r\n        // initial pricess\r\n        levelStack[uint8(FactoryType.Wood)][0]          = Params(0.01 ether, 200, 0);\r\n        levelStack[uint8(FactoryType.Metal)][0]         = Params(0.03 ether, 400, 0);\r\n        levelStack[uint8(FactoryType.Oil)][0]           = Params(0.05 ether, 600, 0);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][0] = Params(0.10 ether, 800, 0);\r\n\r\n        // level 1\r\n        levelStack[uint8(FactoryType.Wood)][1]          = Params(0.05 ether, 1200, 120);\r\n        levelStack[uint8(FactoryType.Metal)][1]         = Params(0.09 ether, 1600, 138);\r\n        levelStack[uint8(FactoryType.Oil)][1]           = Params(0.15 ether, 2400, 164);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][1] = Params(0.50 ether, 4800, 418);\r\n\r\n        // level 2\r\n        levelStack[uint8(FactoryType.Wood)][2]          = Params(0.12 ether, 3600, 540);\r\n        levelStack[uint8(FactoryType.Metal)][2]         = Params(0.27 ether, 5200, 866);\r\n        levelStack[uint8(FactoryType.Oil)][2]           = Params(0.35 ether, 6600, 1050);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][2] = Params(1.00 ether, 12800, 1670);\r\n\r\n        // level 3\r\n        levelStack[uint8(FactoryType.Wood)][3]          = Params(0.30 ether, 9600, 2400);\r\n        levelStack[uint8(FactoryType.Metal)][3]         = Params(0.75 ether, 15200, 3980);\r\n        levelStack[uint8(FactoryType.Oil)][3]           = Params(1.15 ether, 20400, 5099);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][3] = Params(3.50 ether, 40800, 11531);\r\n\r\n        // level 4\r\n        levelStack[uint8(FactoryType.Wood)][4]          = Params(0.90 ether, 27600, 9660);\r\n        levelStack[uint8(FactoryType.Metal)][4]         = Params(2.13 ether, 43600, 15568);\r\n        levelStack[uint8(FactoryType.Oil)][4]           = Params(3.00 ether, 56400, 17943);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][4] = Params(7.00 ether, 96800, 31567);\r\n\r\n        // level 5\r\n        levelStack[uint8(FactoryType.Wood)][5]          = Params(1.80 ether, 63600, 25440);\r\n        levelStack[uint8(FactoryType.Metal)][5]         = Params(5.31 ether, 114400, 49022);\r\n        levelStack[uint8(FactoryType.Oil)][5]           = Params(7.30 ether, 144000, 55629);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][5] = Params(17.10 ether, 233600, 96492);\r\n\r\n        // level 6\r\n        levelStack[uint8(FactoryType.Wood)][6]          = Params(5.40 ether, 171600, 85800);\r\n        levelStack[uint8(FactoryType.Metal)][6]         = Params(13.89 ether, 298400, 158120);\r\n        levelStack[uint8(FactoryType.Oil)][6]           = Params(24.45 ether, 437400, 218674);\r\n        levelStack[uint8(FactoryType.PreciousMetal)][6] = Params(55.50 ether, 677600, 353545);\r\n    }\r\n\r\n    function getPrice(FactoryType _type, uint8 _level) public view returns(uint256) {\r\n        return levelStack[uint8(_type)][_level].price;\r\n    }\r\n\r\n    function getProductsPerMinute(FactoryType _type, uint8 _level) public view returns(uint256) {\r\n        return levelStack[uint8(_type)][_level].ppm;\r\n    }\r\n\r\n    function getBonusPerMinute(FactoryType _type, uint8 _level) public view returns(uint256) {\r\n        return levelStack[uint8(_type)][_level].ppmBonus;\r\n    }\r\n}\r\n\r\ncontract ReferralsSystem {\r\n\r\n    struct ReferralGroup {\r\n        uint256 minSum;\r\n        uint256 maxSum;\r\n        uint16[] percents;\r\n    }\r\n\r\n    uint256 public constant minSumReferral = 0.01 ether;\r\n    uint256 public constant referralLevelsGroups = 3;\r\n    uint256 public constant referralLevelsCount = 5;\r\n    ReferralGroup[] public referralGroups;\r\n\r\n    function setupReferralsSystemModule() internal {\r\n        ReferralGroup memory refGroupFirsty = ReferralGroup(minSumReferral, 10 ether - 1 wei, new uint16[](referralLevelsCount));\r\n        refGroupFirsty.percents[0] = 300;   // 3%\r\n        refGroupFirsty.percents[1] = 75;    // 0.75%\r\n        refGroupFirsty.percents[2] = 60;    // 0.6%\r\n        refGroupFirsty.percents[3] = 40;    // 0.4%\r\n        refGroupFirsty.percents[4] = 25;    // 0.25%\r\n        referralGroups.push(refGroupFirsty);\r\n\r\n        ReferralGroup memory refGroupLoyalty = ReferralGroup(10 ether, 50 ether - 1 wei, new uint16[](referralLevelsCount));\r\n        refGroupLoyalty.percents[0] = 500;  // 5%\r\n        refGroupLoyalty.percents[1] = 200;  // 2%\r\n        refGroupLoyalty.percents[2] = 150;  // 1.5%\r\n        refGroupLoyalty.percents[3] = 100;  // 1%\r\n        refGroupLoyalty.percents[4] = 50;   // 0.5%\r\n        referralGroups.push(refGroupLoyalty);\r\n\r\n        ReferralGroup memory refGroupUltraPremium = ReferralGroup(50 ether, 2**256 - 1, new uint16[](referralLevelsCount));\r\n        refGroupUltraPremium.percents[0] = 700; // 7%\r\n        refGroupUltraPremium.percents[1] = 300; // 3%\r\n        refGroupUltraPremium.percents[2] = 250; // 2.5%\r\n        refGroupUltraPremium.percents[3] = 150; // 1.5%\r\n        refGroupUltraPremium.percents[4] = 100; // 1%\r\n        referralGroups.push(refGroupUltraPremium);\r\n    }\r\n\r\n    function getReferralPercents(uint256 _sum) public view returns(uint16[]) {\r\n        for (uint i = 0; i < referralLevelsGroups; i++) {\r\n            ReferralGroup memory group = referralGroups[i];\r\n            if (_sum >= group.minSum && _sum <= group.maxSum) return group.percents;\r\n        }\r\n    }\r\n\r\n    function getReferralPercentsByIndex(uint256 _index) public view returns(uint16[]) {\r\n        return referralGroups[_index].percents;\r\n    }\r\n\r\n}\r\n\r\n/// @title Smart-contract of MyMillions ecosystem\r\n/// @author Shagaleev Alexey\r\ncontract MyMillions is Ownable, Improvements, ReferralsSystem, LeaderSystem {\r\n    using SafeMath for uint256;\r\n\r\n    event CreateUser(uint256 _index, address _address, uint256 _balance);\r\n    event ReferralRegister(uint256 _refferalId, uint256 _userId);\r\n    event ReferrerDistribute(uint256 _userId, uint256 _referrerId, uint256 _sum);\r\n    event Deposit(uint256 _userId, uint256 _value);\r\n    event PaymentProceed(uint256 _userId, uint256 _factoryId, FactoryType _factoryType, uint256 _price);\r\n    event CollectResources(FactoryType _type, uint256 _resources);\r\n    event LevelUp(uint256 _factoryId, uint8 _newLevel, uint256 _userId, uint256 _price);\r\n    event Sell(uint256 _userId, uint8 _type, uint256 _sum);\r\n\r\n    bool isSetted = false;\r\n    uint256 public minSumDeposit = 0.01 ether;\r\n\r\n    struct User {\r\n        address addr;                                   // user address\r\n        uint256 balance;                                // balance of account\r\n        uint256 totalPay;                               // sum of all input pay\r\n        uint256 referrersReceived;                      // total deposit from referrals\r\n        uint256[] resources;                            // collected resources\r\n        uint256[] referrersByLevel;                     // referrers user ids\r\n        mapping (uint8 => uint256[]) referralsByLevel;  // all referrals user ids\r\n    }\r\n\r\n    User[] public users;\r\n    mapping (address => uint256) public addressToUser;\r\n    uint256 public totalUsers = 0;\r\n    uint256 public totalDeposit = 0;\r\n\r\n    struct Factory {\r\n        FactoryType ftype;      // factory type\r\n        uint8 level;            // factory level\r\n        uint256 collected_at;   // timestamp updated\r\n    }\r\n\r\n    Factory[] public factories;\r\n    mapping (uint256 => uint256) public factoryToUser;\r\n    mapping (uint256 => uint256[]) public userToFactories;\r\n\r\n    modifier onlyExistingUser() {\r\n        require(addressToUser[msg.sender] != 0);\r\n        _;\r\n    }\r\n    modifier onlyNotExistingUser() {\r\n        require(addressToUser[msg.sender] == 0);\r\n        _;\r\n    }\r\n\r\n    constructor() public payable {\r\n        users.push(User(0x0, 0, 0, 0, new uint256[](4), new uint256[](referralLevelsCount)));  // for find by addressToUser map\r\n    }\r\n\r\n    function setup() public onlyOwner {\r\n        require(isSetted == false);\r\n        isSetted = true;\r\n\r\n        setupFactoringModule();\r\n        setupImprovementsModule();\r\n        setupReferralsSystemModule();\r\n        setupLeaderSystemModule();\r\n    }\r\n\r\n    // @dev register for only new users with min pay\r\n    /// @return id of new user\r\n    function register() public payable onlyNotExistingUser returns(uint256) {\r\n        require(addressToUser[msg.sender] == 0);\r\n\r\n        uint256 index = users.push(User(msg.sender, msg.value, 0, 0, new uint256[](4), new uint256[](referralLevelsCount))) - 1;\r\n        addressToUser[msg.sender] = index;\r\n        totalUsers++;\r\n\r\n        emit CreateUser(index, msg.sender, msg.value);\r\n        return index;\r\n    }\r\n\r\n\r\n    /// @notice just registry by referral link\r\n    /// @param _refId the ID of the user who gets the affiliate fee\r\n    /// @return id of new user\r\n    function registerWithRefID(uint256 _refId) public payable onlyNotExistingUser returns(uint256) {\r\n        require(_refId < users.length);\r\n\r\n        uint256 index = register();\r\n        _updateReferrals(index, _refId);\r\n\r\n        emit ReferralRegister(_refId, index);\r\n        return index;\r\n    }\r\n\r\n    /// @notice update referrersByLevel and referralsByLevel of new user\r\n    /// @param _newUserId the ID of the new user\r\n    /// @param _refUserId the ID of the user who gets the affiliate fee\r\n    function _updateReferrals(uint256 _newUserId, uint256 _refUserId) private {\r\n        if (_newUserId == _refUserId) return;\r\n        users[_newUserId].referrersByLevel[0] = _refUserId;\r\n\r\n        for (uint i = 1; i < referralLevelsCount; i++) {\r\n            uint256 _refId = users[_refUserId].referrersByLevel[i - 1];\r\n            users[_newUserId].referrersByLevel[i] = _refId;\r\n            users[_refId].referralsByLevel[uint8(i)].push(_newUserId);\r\n        }\r\n\r\n        users[_refUserId].referralsByLevel[0].push(_newUserId);\r\n    }\r\n\r\n    /// @notice distribute value of tx to referrers of user\r\n    /// @param _userId the ID of the user who gets the affiliate fee\r\n    /// @param _sum value of ethereum for distribute to referrers of user\r\n    function _distributeReferrers(uint256 _userId, uint256 _sum) private {\r\n        uint256[] memory referrers = users[_userId].referrersByLevel;\r\n\r\n        for (uint i = 0; i < referralLevelsCount; i++) {\r\n            uint256 referrerId = referrers[i];\r\n\r\n            if (referrers[i] == 0) break;\r\n            if (users[referrerId].totalPay < minSumReferral) continue;\r\n\r\n            uint16[] memory percents = getReferralPercents(users[referrerId].totalPay);\r\n            uint256 value = _sum * percents[i] / 10000;\r\n            users[referrerId].balance = users[referrerId].balance.add(value);\r\n            users[referrerId].referrersReceived = users[referrerId].referrersReceived.add(value);\r\n\r\n            emit ReferrerDistribute(_userId, referrerId, value);\r\n        }\r\n    }\r\n\r\n    /// @notice deposit ethereum for user\r\n    /// @return balance value of user\r\n    function deposit() public payable onlyExistingUser returns(uint256) {\r\n        require(msg.value > minSumDeposit, \"Deposit does not enough\");\r\n        uint256 userId = addressToUser[msg.sender];\r\n        users[userId].balance = users[userId].balance.add(msg.value);\r\n        totalDeposit += msg.value;\r\n\r\n        // distribute\r\n        _distributeInvestment(msg.value);\r\n        _updateLeaders(msg.sender, msg.value);\r\n\r\n        emit Deposit(userId, msg.value);\r\n        return users[userId].balance;\r\n    }\r\n\r\n    /// @notice getter for balance of user\r\n    /// @return balance value of user\r\n    function balanceOf() public view returns (uint256) {\r\n        return users[addressToUser[msg.sender]].balance;\r\n    }\r\n\r\n    /// @notice getter for resources of user\r\n    /// @return resources value of user\r\n    function resoucesOf() public view returns (uint256[]) {\r\n        return users[addressToUser[msg.sender]].resources;\r\n    }\r\n\r\n    /// @notice getter for referrers of user\r\n    /// @return array of referrers id\r\n    function referrersOf() public view returns (uint256[]) {\r\n        return users[addressToUser[msg.sender]].referrersByLevel;\r\n    }\r\n\r\n    /// @notice getter for referrals of user by level\r\n    /// @param _level level of referrals user needed\r\n    /// @return array of referrals id\r\n    function referralsOf(uint8 _level) public view returns (uint256[]) {\r\n        return users[addressToUser[msg.sender]].referralsByLevel[uint8(_level)];\r\n    }\r\n\r\n    /// @notice getter for extended information of user\r\n    /// @param _userId id of user needed\r\n    /// @return address of user\r\n    /// @return balance of user\r\n    /// @return totalPay of user\r\n    /// @return array of resources user\r\n    /// @return array of referrers id user\r\n    function userInfo(uint256 _userId) public view returns(address, uint256, uint256, uint256, uint256[], uint256[]) {\r\n        User memory user = users[_userId];\r\n        return (user.addr, user.balance, user.totalPay, user.referrersReceived, user.resources, user.referrersByLevel);\r\n    }\r\n\r\n    /// @notice mechanics of buying any factory\r\n    /// @param _type type of factory needed\r\n    /// @return id of new factory\r\n    function buyFactory(FactoryType _type) public payable onlyExistingUser returns (uint256) {\r\n        uint256 userId = addressToUser[msg.sender];\r\n\r\n        // if user not registered\r\n        if (addressToUser[msg.sender] == 0)\r\n            userId = register();\r\n\r\n        return _paymentProceed(userId, Factory(_type, 0, now));\r\n    }\r\n\r\n    /// @notice get factories of user\r\n    /// @param _user_id id of user\r\n    /// @return array of id factory\r\n    function getFactories(uint256 _user_id) public view returns (uint256[]) {\r\n        return userToFactories[_user_id];\r\n    }\r\n\r\n    /// @notice buy wood factory\r\n    /// @dev wrapper over buyFactory for FactoryType.Wood\r\n    /// @return id of new factory\r\n    function buyWoodFactory() public payable returns (uint256) {\r\n        return buyFactory(FactoryType.Wood);\r\n    }\r\n\r\n    /// @notice buy wood factory\r\n    /// @dev wrapper over buyFactory for FactoryType.Metal\r\n    /// @return id of new factory\r\n    function buyMetalFactory() public payable returns (uint256) {\r\n        return buyFactory(FactoryType.Metal);\r\n    }\r\n\r\n    /// @notice buy wood factory\r\n    /// @dev wrapper over buyFactory for FactoryType.Oil\r\n    /// @return id of new factory\r\n    function buyOilFactory() public payable returns (uint256) {\r\n        return buyFactory(FactoryType.Oil);\r\n    }\r\n\r\n    /// @notice buy wood factory\r\n    /// @dev wrapper over buyFactory for FactoryType.PreciousMetal\r\n    /// @return id of new factory\r\n    function buyPreciousMetal() public payable returns (uint256) {\r\n        return buyFactory(FactoryType.PreciousMetal);\r\n    }\r\n\r\n    /// @notice distribute investment when user buy anything\r\n    /// @param _value value of investment\r\n    function _distributeInvestment(uint256 _value) private {\r\n        developers.transfer(msg.value * developersPercent / 100);\r\n        marketers.transfer(msg.value * marketersPercent / 100);\r\n    }\r\n\r\n    /// @notice function of proceed payment\r\n    /// @dev for only buy new factory\r\n    /// @return id of new factory\r\n    function _paymentProceed(uint256 _userId, Factory _factory) private returns(uint256) {\r\n        User storage user = users[_userId];\r\n\r\n        require(_checkPayment(user, _factory.ftype, _factory.level));\r\n\r\n        uint256 price = getPrice(_factory.ftype, 0);\r\n        user.balance = user.balance.add(msg.value);\r\n        user.balance = user.balance.sub(price);\r\n        user.totalPay = user.totalPay.add(price);\r\n        totalDeposit += msg.value;\r\n\r\n        uint256 index = factories.push(_factory) - 1;\r\n        factoryToUser[index] = _userId;\r\n        userToFactories[_userId].push(index);\r\n\r\n        // distribute\r\n        _distributeInvestment(msg.value);\r\n        _distributeReferrers(_userId, price);\r\n        _updateLeaders(msg.sender, msg.value);\r\n\r\n        emit PaymentProceed(_userId, index, _factory.ftype, price);\r\n        return index;\r\n    }\r\n\r\n    /// @notice check available investment\r\n    /// @return true if user does enough balance for investment\r\n    function _checkPayment(User _user, FactoryType _type, uint8 _level) private view returns(bool) {\r\n        uint256 totalBalance = _user.balance.add(msg.value);\r\n\r\n        if (totalBalance < getPrice(_type, _level)) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice level up for factory\r\n    /// @param _factoryId id of factory\r\n    function levelUp(uint256 _factoryId) public payable onlyExistingUser {\r\n        Factory storage factory = factories[_factoryId];\r\n        uint256 price = getPrice(factory.ftype, factory.level + 1);\r\n\r\n        uint256 userId = addressToUser[msg.sender];\r\n        User storage user = users[userId];\r\n\r\n        require(_checkPayment(user, factory.ftype, factory.level + 1));\r\n\r\n        // payment\r\n        user.balance = user.balance.add(msg.value);\r\n        user.balance = user.balance.sub(price);\r\n        user.totalPay = user.totalPay.add(price);\r\n        totalDeposit += msg.value;\r\n\r\n        _distributeInvestment(msg.value);\r\n        _distributeReferrers(userId, price);\r\n\r\n        // collect\r\n        _collectResource(factory, user);\r\n        factory.level++;\r\n\r\n        _updateLeaders(msg.sender, msg.value);\r\n\r\n        emit LevelUp(_factoryId, factory.level, userId, price);\r\n    }\r\n\r\n    /// @notice sell resources of user with type\r\n    /// @param _type type of resources\r\n    /// @return sum of sell\r\n    function sellResources(uint8 _type) public onlyExistingUser returns(uint256) {\r\n        uint256 userId = addressToUser[msg.sender];\r\n        uint256 sum = Math.min(users[userId].resources[_type] * getResourcePrice(_type), address(this).balance);\r\n        users[userId].resources[_type] = 0;\r\n\r\n        msg.sender.transfer(sum);\r\n\r\n        emit Sell(userId, _type, sum);\r\n        return sum;\r\n    }\r\n\r\n    /// @notice function for compute worktime factory\r\n    /// @param _collected_at timestamp of start\r\n    /// @return duration minutes\r\n    function worktimeAtDate(uint256 _collected_at) public view returns(uint256) {\r\n        return (now - _collected_at) / 60;\r\n    }\r\n\r\n    /// @notice function for compute duration work factory\r\n    /// @param _factoryId id of factory\r\n    /// @return timestamp of duration\r\n    function worktime(uint256 _factoryId) public view returns(uint256) {\r\n        return worktimeAtDate(factories[_factoryId].collected_at);\r\n    }\r\n\r\n    /// @notice function for compute resource factory at time\r\n    /// @param _type type of factory\r\n    /// @param _level level of factory\r\n    /// @param _collected_at timestamp for collect\r\n    /// @return count of resources\r\n    function _resourcesAtTime(FactoryType _type, uint8 _level, uint256 _collected_at) public view returns(uint256) {\r\n        return worktimeAtDate(_collected_at) * (getProductsPerMinute(_type, _level) + getBonusPerMinute(_type, _level)) / 100;\r\n    }\r\n\r\n    /// @notice function for compute resource factory at time\r\n    /// @dev wrapper over _resourcesAtTime\r\n    /// @param _factoryId id of factory\r\n    /// @return count of resources\r\n    function resourcesAtTime(uint256 _factoryId) public view returns(uint256) {\r\n        Factory storage factory = factories[_factoryId];\r\n        return _resourcesAtTime(factory.ftype, factory.level, factory.collected_at);\r\n    }\r\n\r\n    /// @notice function for collect resource\r\n    /// @param _factory factory object\r\n    /// @param _user user object\r\n    /// @return count of resources\r\n    function _collectResource(Factory storage _factory, User storage _user) internal returns(uint256) {\r\n        uint256 resources = _resourcesAtTime(_factory.ftype, _factory.level, _factory.collected_at);\r\n        _user.resources[uint8(_factory.ftype)] = _user.resources[uint8(_factory.ftype)].add(resources);\r\n        _factory.collected_at = now;\r\n\r\n        emit CollectResources(_factory.ftype, resources);\r\n        return resources;\r\n    }\r\n\r\n    /// @notice function for collect all resources from all factories\r\n    /// @dev wrapper over _collectResource\r\n    function collectResources() public onlyExistingUser {\r\n        uint256 index = addressToUser[msg.sender];\r\n        User storage user = users[index];\r\n        uint256[] storage factoriesIds = userToFactories[addressToUser[msg.sender]];\r\n\r\n        for (uint256 i = 0; i < factoriesIds.length; i++) {\r\n            _collectResource(factories[factoriesIds[i]], user);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"leaderBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factoryId\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_collected_at\",\"type\":\"uint256\"}],\"name\":\"worktimeAtDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyOilFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"totalPay\",\"type\":\"uint256\"},{\"name\":\"referrersReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resoucesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketers\",\"type\":\"address\"}],\"name\":\"setMarketers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexTable\",\"type\":\"uint256\"}],\"name\":\"getLeadersTableInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factoryToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getResourcePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexTable\",\"type\":\"uint256\"}],\"name\":\"getLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReferralPercentsByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"getFactories\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSumReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyWoodFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"name\":\"ftype\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"collected_at\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getBonusPerMinute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_collected_at\",\"type\":\"uint256\"}],\"name\":\"_resourcesAtTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevelopers\",\"type\":\"address\"}],\"name\":\"setDevelopers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"getReferralPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leadersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refId\",\"type\":\"uint256\"}],\"name\":\"registerWithRefID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralGroups\",\"outputs\":[{\"name\":\"minSum\",\"type\":\"uint256\"},{\"name\":\"maxSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getProductsPerMinute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMetalFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaders\",\"outputs\":[{\"name\":\"timestampEnd\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"minSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"sellResources\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factoryId\",\"type\":\"uint256\"}],\"name\":\"worktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resourcePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralLevelsGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelStack\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ppm\",\"type\":\"uint256\"},{\"name\":\"ppmBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"referralsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"buyFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPreciousMetal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSumDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factoryId\",\"type\":\"uint256\"}],\"name\":\"resourcesAtTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralLevelsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToFactories\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"CreateUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_refferalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"ReferralRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"ReferrerDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_factoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_factoryType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PaymentProceed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_resources\",\"type\":\"uint256\"}],\"name\":\"CollectResources\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_indexTable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_indexTable\",\"type\":\"uint256\"}],\"name\":\"LeadersClear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDevelopers\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDevelopers\",\"type\":\"address\"}],\"name\":\"DevelopersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousMarketers\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMarketers\",\"type\":\"address\"}],\"name\":\"MarketersChanged\",\"type\":\"event\"}]","ContractName":"MyMillions","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"Math:9a103a76447a747194ec6439de5e2e6eac597db1","SwarmSource":"bzzr://01b84be694a48107af3fc4e24ca99f2f35387aa892b94a6ddf2e95544a564d99"}]}