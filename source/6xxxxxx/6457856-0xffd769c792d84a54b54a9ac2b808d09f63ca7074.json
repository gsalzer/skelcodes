{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n * to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ClubAccessControl is Whitelist {\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract HKHcoinInterface {\r\n    mapping (address => uint256) public balanceOf;\r\n    function mintToken(address target, uint256 mintedAmount) public;\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract PlayerFactory is ClubAccessControl {\r\n    struct Player {\r\n        bool isFreezed;\r\n        bool isExist;\r\n    }\r\n\r\n    mapping (address => Player) public players;\r\n    HKHcoinInterface hkhconinContract;\r\n    uint initCoins = 1000000;\r\n\r\n    modifier onlyIfPlayerNotFreezed(address _playerAddress) { \r\n        require (!players[_playerAddress].isFreezed);\r\n        _; \r\n    }\r\n    \r\n    modifier onlyIfPlayerExist(address _playerAddress) { \r\n        require (players[_playerAddress].isExist);\r\n        _; \r\n    }\r\n\r\n    event NewPlayer(address indexed _playerAddress);\r\n\r\n    function setHKHcoinAddress(address _address) \r\n        external\r\n        onlyIfWhitelisted(msg.sender)\r\n    {\r\n        hkhconinContract = HKHcoinInterface(_address);\r\n    }\r\n\r\n    function getBalanceOfPlayer(address _playerAddress)\r\n        public\r\n        onlyIfPlayerExist(_playerAddress)\r\n        view\r\n        returns (uint)\r\n    {\r\n        return hkhconinContract.balanceOf(_playerAddress);\r\n    }\r\n\r\n    function joinClub(address _playerAddress)\r\n        external\r\n        onlyIfWhitelisted(msg.sender)\r\n        whenNotPaused\r\n    {\r\n        require(!players[_playerAddress].isExist);\r\n        players[_playerAddress] = Player(false, true);\r\n        hkhconinContract.mintToken(_playerAddress, initCoins);\r\n        emit NewPlayer(_playerAddress);\r\n    }\r\n\r\n    function reset(address _playerAddress)\r\n        external\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        uint balance = hkhconinContract.balanceOf(_playerAddress);\r\n\r\n        if(balance > initCoins)\r\n            _destroy(_playerAddress, balance - initCoins);\r\n        else if(balance < initCoins)\r\n            _recharge(_playerAddress, initCoins - balance);\r\n\r\n        emit NewPlayer(_playerAddress);\r\n    }\r\n\r\n    function recharge(address _playerAddress, uint _amount)\r\n        public\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        _recharge(_playerAddress, _amount);\r\n    }\r\n\r\n    function destroy(address _playerAddress, uint _amount)\r\n        public\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        _destroy(_playerAddress, _amount);\r\n    }\r\n\r\n    function freezePlayer(address _playerAddress)\r\n        public\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        players[_playerAddress].isFreezed = true;\r\n    }\r\n\r\n    function resumePlayer(address _playerAddress)\r\n        public\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        players[_playerAddress].isFreezed = false;\r\n    }\r\n\r\n    function _recharge(address _playerAddress, uint _amount)\r\n        internal\r\n    {\r\n        hkhconinContract.mintToken(_playerAddress, _amount);\r\n    }\r\n\r\n    function _destroy(address _playerAddress, uint _amount)\r\n        internal\r\n    {\r\n        hkhconinContract.burnFrom(_playerAddress, _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n */\r\ncontract LotteryFactory is PlayerFactory {\r\n\r\n    event BuyLottery(\r\n        uint32 _id,\r\n        address indexed _playerAddress,\r\n        string _betline,\r\n        string _place,\r\n        uint32 _betAmount,\r\n        uint32 indexed _date,\r\n        uint8 indexed _race\r\n    );\r\n\r\n    struct Lottery {\r\n        uint32 betAmount;\r\n        uint32 dividend;\r\n        uint32 date;\r\n        uint8 race;\r\n        bool isPaid;\r\n        string betline;\r\n        string place;\r\n    }\r\n\r\n    Lottery[] public lotteries;\r\n\r\n    mapping (uint => address) public lotteryToOwner;\r\n    mapping (address => uint) ownerLotteryCount;\r\n\r\n    constructor() public {\r\n        addAddressToWhitelist(msg.sender);\r\n    }\r\n\r\n    function getLotteriesByOwner(address _owner) \r\n        view \r\n        external \r\n        onlyIfPlayerExist(_owner) \r\n        returns(uint[]) \r\n    {\r\n        uint[] memory result = new uint[](ownerLotteryCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < lotteries.length; i++) {\r\n            if (lotteryToOwner[i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function createLottery(\r\n        address _playerAddress,\r\n        string _betline, \r\n        string _place,\r\n        uint32 _betAmount,\r\n        uint32 _date,\r\n        uint8 _race\r\n    )\r\n        external\r\n        onlyIfWhitelisted(msg.sender)\r\n        onlyIfPlayerExist(_playerAddress)\r\n        onlyIfPlayerNotFreezed(_playerAddress)\r\n        whenNotPaused\r\n    {\r\n        uint32 id = uint32(lotteries.push(Lottery(_betAmount, 0, _date, _race, false, _betline, _place))) - 1;\r\n        lotteryToOwner[id] = _playerAddress;\r\n        ownerLotteryCount[_playerAddress]++;\r\n        _destroy(_playerAddress, _betAmount);\r\n        emit BuyLottery(\r\n            id,\r\n            _playerAddress,\r\n            _betline,\r\n            _place,\r\n            _betAmount,\r\n            _date,\r\n            _race\r\n        );\r\n    }\r\n\r\n    function setDividendAndPayOut(\r\n        uint32 _id,\r\n        uint32 _dividend\r\n    )\r\n        external\r\n        onlyIfWhitelisted(msg.sender)\r\n        whenNotPaused\r\n    {\r\n        if(lotteries[_id].isPaid == false) {\r\n            lotteries[_id].dividend = _dividend;\r\n            _recharge(lotteryToOwner[_id], lotteries[_id].dividend);\r\n            lotteries[_id].isPaid = true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"resumePlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"name\":\"betAmount\",\"type\":\"uint32\"},{\"name\":\"dividend\",\"type\":\"uint32\"},{\"name\":\"date\",\"type\":\"uint32\"},{\"name\":\"race\",\"type\":\"uint8\"},{\"name\":\"isPaid\",\"type\":\"bool\"},{\"name\":\"betline\",\"type\":\"string\"},{\"name\":\"place\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"joinClub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_dividend\",\"type\":\"uint32\"}],\"name\":\"setDividendAndPayOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"freezePlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_betline\",\"type\":\"string\"},{\"name\":\"_place\",\"type\":\"string\"},{\"name\":\"_betAmount\",\"type\":\"uint32\"},{\"name\":\"_date\",\"type\":\"uint32\"},{\"name\":\"_race\",\"type\":\"uint8\"}],\"name\":\"createLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getBalanceOfPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLotteriesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"isFreezed\",\"type\":\"bool\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHKHcoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betline\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_place\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_date\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_race\",\"type\":\"uint8\"}],\"name\":\"BuyLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LotteryFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce1a108be10fa943aea5368ac4d9b69b5d440a72ca6add47c2cf0007df9c4540"}]}