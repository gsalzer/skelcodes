{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * ▒█▀▀█ ░▀░ █▀▀█ █▀▀▄ █▀▄▀█ █▀▀█ █▀▀▄ \r\n * ▒█▀▀▄ ▀█▀ █▄▄▀ █░░█ █░▀░█ █▄▄█ █░░█ \r\n * ▒█▄▄█ ▀▀▀ ▀░▀▀ ▀▀▀░ ▀░░░▀ ▀░░▀ ▀░░▀ \r\n *\r\n * Birdman helps grow the Microverse community,\r\n * which is considered the premature version of Mutual Constructor.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUtils\r\n * @dev customized admin control panel\r\n * @dev just want to keep everything safe\r\n */\r\ncontract AdminUtils is Ownable {\r\n\r\n    mapping (address => uint256) adminContracts;\r\n\r\n    address internal root;\r\n\r\n    /* modifiers */\r\n    modifier OnlyContract() {\r\n        require(isSuperContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier OwnerOrContract() {\r\n        require(msg.sender == owner || isSuperContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        require(msg.sender == root);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    constructor() public {\r\n        // This is a safe key stored offline\r\n        root = 0xe07faf5B0e91007183b76F37AC54d38f90111D40;\r\n    }\r\n\r\n    /**\r\n     * @dev this is the kickass idea from @dan\r\n     * and well we will see how it works\r\n     */\r\n    function claimOwnership()\r\n        external\r\n        onlyRoot\r\n        returns (bool) {\r\n        owner = root;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev function to address a super contract address\r\n     * some functions are meant to be called from another contract\r\n     * but not from any contracts\r\n     * @param _address A contract address\r\n     */\r\n    function addContractAddress(address _address)\r\n        public\r\n        onlyOwner\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        adminContracts[_address] = 1;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove the contract address as a super user role\r\n     * have it here just in case\r\n     * @param _address A contract address\r\n     */\r\n    function removeContractAddress(address _address)\r\n        public\r\n        onlyOwner\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        adminContracts[_address] = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev check contract eligibility\r\n     * @param _address A contract address\r\n     */\r\n    function isSuperContract(address _address)\r\n        public\r\n        view\r\n        returns (bool) {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (adminContracts[_address] == 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title EvilMortyTokenInterface\r\n */\r\ncontract EvilMortyTokenInterface {\r\n\r\n    /**\r\n     * @dev Check balance of a given address\r\n     * @param sender address\r\n     */\r\n    function balanceOf(address sender) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Birdman\r\n */\r\ncontract Birdman is AdminUtils, ERC223ReceivingContract {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event MCApplied(address sender);\r\n    event MCAdded(address sender);\r\n    event MCRemoved(address sender);\r\n    event ShareSent(address indexed receiver, uint256 value);\r\n    event SystemChangeValidMCAmount(uint256 oldValue, uint256 newValue);\r\n    event SystemChangeMaxNumMC(uint256 oldValue, uint256 newValue);\r\n    event SystemChangeShareTimeGap(uint256 oldValue, uint256 newValue);\r\n    event SystemChangeVettingTime(uint256 oldValue, uint256 newValue);\r\n\r\n    EvilMortyTokenInterface internal EvilMortyInstance;\r\n\r\n    uint256 public validMCAmount = 5000000e18;\r\n    uint256 public maxNumMC = 20;\r\n    uint256 public vettingTime = 86400; // in block height, roughly 15 days\r\n    uint256 public shareTimeGap = 86400; // in block height, roughly 15 days\r\n    uint256 public numMC;\r\n    uint256 public numMCApplied;\r\n    uint256 public nextShareTime = 6213990; // around UTC 01:00, 8/26/2018\r\n    uint256 public weiAmountShare;\r\n\r\n    mapping (uint256 => MC) constructors;\r\n    mapping (address => uint256) addressToIndex;\r\n\r\n    struct MC {\r\n      address playerAddress;\r\n      uint256 timeSince;\r\n      uint256 nextSharedSentTime;\r\n      bool passed;\r\n    }\r\n    \r\n    uint256[] emptyIndexes;\r\n\r\n    modifier isValidMC() {\r\n        require (EvilMortyInstance.balanceOf(msg.sender) >= validMCAmount);\r\n        _;\r\n    }\r\n\r\n    modifier canAddMC() {\r\n      require (numMCApplied < maxNumMC);\r\n      // make sure no one cheats\r\n      require (addressToIndex[msg.sender] == 0);\r\n      \r\n      _; \r\n    }\r\n\r\n    modifier isEvilMortyToken() {\r\n        require(msg.sender == address(EvilMortyInstance));\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    constructor(address EvilMortyAddress)\r\n        public {\r\n        EvilMortyInstance = EvilMortyTokenInterface(EvilMortyAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow funds to be sent to this contract\r\n     * if the sender is the owner or a super contract\r\n     * then it will do nothing\r\n     */\r\n    function ()\r\n        public\r\n        payable {\r\n        if (msg.sender == owner || isSuperContract(msg.sender)) {\r\n            return;\r\n        }\r\n        applyMC();\r\n    }\r\n\r\n    /**\r\n     * @dev Allow morty token to be sent to this contract\r\n     * if the sender is the owner it will do nothing\r\n     */\r\n    function tokenFallback(address _from, uint256 _value, bytes)\r\n        public\r\n        isEvilMortyToken {\r\n        if (_from == owner) {\r\n            return;\r\n        }\r\n        claimShare(addressToIndex[_from]);\r\n    }\r\n\r\n    /**\r\n     * @dev Apply for becoming a MC\r\n     */\r\n    function applyMC()\r\n        public\r\n        payable\r\n        canAddMC {\r\n\r\n        require (EvilMortyInstance.balanceOf(msg.sender) >= validMCAmount);\r\n\r\n        numMCApplied = numMCApplied.add(1);\r\n        uint256 newIndex = numMCApplied;\r\n\r\n        if (emptyIndexes.length > 0) {\r\n            newIndex = emptyIndexes[emptyIndexes.length-1];\r\n            delete emptyIndexes[emptyIndexes.length-1];\r\n            emptyIndexes.length--;\r\n        }\r\n\r\n        constructors[newIndex] = MC({\r\n            playerAddress: msg.sender,\r\n            timeSince: block.number.add(vettingTime),\r\n            nextSharedSentTime: nextShareTime,\r\n            passed: false\r\n        });\r\n\r\n        addressToIndex[msg.sender] = newIndex;\r\n\r\n        emit MCApplied(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MC's info given index\r\n     * @param _index the MC's index\r\n     */\r\n    function getMC(uint256 _index)\r\n        public\r\n        view\r\n        returns (address, uint256, uint256, bool) {\r\n        MC storage mc = constructors[_index];\r\n        return (\r\n            mc.playerAddress,\r\n            mc.timeSince,\r\n            mc.nextSharedSentTime,\r\n            mc.passed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of empty indexes\r\n     */\r\n    function numEmptyIndexes()\r\n        public\r\n        view\r\n        returns (uint256) {\r\n        return emptyIndexes.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the MC index given address\r\n     * @param _address MC's address\r\n     */\r\n    function getIndex(address _address)\r\n        public\r\n        view\r\n        returns (uint256) {\r\n        return addressToIndex[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Update all MC's status\r\n     */\r\n    function updateMCs()\r\n        public {\r\n\r\n        if (numMCApplied == 0) {\r\n            return;\r\n        }\r\n\r\n        for (uint256 i = 0; i < maxNumMC; i ++) {\r\n            updateMC(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update a MC's status, if\r\n     * - the MC's balance is below min requirement, it will be deleted;\r\n     * - the MC's vetting time is passed, it will be added\r\n     * @param _index the MC's index\r\n     */\r\n    function updateMC(uint256 _index)\r\n        public {\r\n        MC storage mc = constructors[_index];\r\n\r\n        // skip empty index\r\n        if (mc.playerAddress == 0) {\r\n            return;\r\n        }\r\n\r\n        if (EvilMortyInstance.balanceOf(mc.playerAddress) < validMCAmount) {\r\n            // remove MC\r\n            numMCApplied = numMCApplied.sub(1);\r\n            if (mc.passed == true) {\r\n                numMC = numMC.sub(1);\r\n            }\r\n            emptyIndexes.push(_index);\r\n            emit MCRemoved(mc.playerAddress);\r\n            delete addressToIndex[mc.playerAddress];\r\n            delete constructors[_index];\r\n            return;\r\n        }\r\n\r\n        if (mc.passed == false && mc.timeSince < block.number) {\r\n             mc.passed = true;\r\n             numMC = numMC.add(1);\r\n             emit MCAdded(mc.playerAddress);\r\n             return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update funds to be sent in this shares period\r\n     */\r\n    function updateWeiAmountShare()\r\n        public {\r\n        if (numMC == 0) {\r\n            return;\r\n        }\r\n        if (nextShareTime < block.number) {\r\n            weiAmountShare = address(this).balance.div(numMC);\r\n\r\n            // make height accurate\r\n            uint256 timeGap = block.number.sub(nextShareTime);\r\n            uint256 gap = timeGap.div(shareTimeGap).add(1);\r\n            nextShareTime = nextShareTime.add(shareTimeGap.mul(gap));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Ask for funds for a MC\r\n     * @param _index the Mc's index\r\n     */\r\n    function claimShare(uint256 _index)\r\n        public {\r\n\r\n        // need update all MCs first\r\n        updateMCs();\r\n\r\n        MC storage mc = constructors[_index];\r\n\r\n        // skip empty index\r\n        if (mc.playerAddress == 0) {\r\n            return;\r\n        }\r\n\r\n        if (mc.passed == false) {\r\n            return;\r\n        }\r\n\r\n        if (mc.nextSharedSentTime < block.number) {\r\n            // update next share time\r\n            updateWeiAmountShare();\r\n            mc.nextSharedSentTime = nextShareTime;\r\n            // every mc gets equal share\r\n            mc.playerAddress.transfer(weiAmountShare);\r\n            emit ShareSent(mc.playerAddress, weiAmountShare);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade evil morty\r\n     * in case of upgrade needed\r\n     */\r\n    function upgradeEvilMorty(address _address)\r\n        external\r\n        onlyOwner {\r\n\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_address)\r\n        }\r\n\r\n        if (codeLength == 0) {\r\n            return;\r\n        }\r\n\r\n        EvilMortyInstance = EvilMortyTokenInterface(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Update min requirement for being a MC\r\n     * a system event is emitted to capture the change\r\n     * @param _amount new amount\r\n     */\r\n    function updateValidMCAmount(uint256 _amount)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangeValidMCAmount(validMCAmount, _amount);\r\n        validMCAmount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Update max number of MCs\r\n     * a system event is emitted to capture the change\r\n     */\r\n    function updateMaxNumMC(uint256 _num)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangeMaxNumMC(maxNumMC, _num);\r\n        maxNumMC = _num;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the length of a share period\r\n     * a system event is emitted to capture the change\r\n     * @param _height bloch heights\r\n     */\r\n    function updateShareTimeGap(uint256 _height)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangeShareTimeGap(shareTimeGap, _height);\r\n        shareTimeGap = _height;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the length of vetting time\r\n     * a system event is emitted to capture the change\r\n     * @param _height bloch heights\r\n     */\r\n    function updateVettingTime(uint256 _height)\r\n        external\r\n        onlyOwner {\r\n        emit SystemChangeVettingTime(vettingTime, _height);\r\n        vettingTime = _height;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"updateShareTimeGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyMC\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateMCs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateWeiAmountShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareTimeGap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"updateMC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validMCAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vettingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumMC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"upgradeEvilMorty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"updateVettingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateValidMCAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMCApplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumMC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextShareTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiAmountShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numEmptyIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"EvilMortyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MCApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MCAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MCRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ShareSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangeValidMCAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangeMaxNumMC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangeShareTimeGap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SystemChangeVettingTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Birdman","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a2fe37e51930e4f0cf3489f24771f361f2bbfcc","Library":"","SwarmSource":"bzzr://e29e26b1b82216323e5472967b1012389dbc7eaddfd5ceea14b19d15df41ba18"}]}