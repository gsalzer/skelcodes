{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2018 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * ZeroGold POW Mining\r\n * \r\n * An ERC20 token wallet which dispenses tokens via Proof of Work mining.\r\n * Based on recommendation from /u/diego_91\r\n * \r\n * Version 18.8.19\r\n *\r\n * Web    : https://d14na.org\r\n * Email  : support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC 918 Mineable Token Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-918.md\r\n */\r\ncontract ERC918Interface {\r\n    function getChallengeNumber() public constant returns (bytes32);\r\n    function getMiningDifficulty() public constant returns (uint);\r\n    function getMiningTarget() public constant returns (uint);\r\n    function getMiningReward() public constant returns (uint);\r\n\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n    address public lastRewardTo;\r\n    uint public lastRewardEthBlockNumber;\r\n}\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice ZeroGoldDust - Merged Mining Contract\r\n *\r\n * @dev This is a standard ERC20 mineable token contract.\r\n */\r\ncontract ZeroGoldPOWMining is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize the ZeroGold contract. */\r\n    ERC20Interface zeroGold;\r\n    \r\n    /* Initialize the Mining Leader contract. */\r\n    ERC918Interface public miningLeader;\r\n    \r\n    /* Reward divisor. */\r\n    // NOTE A value of 20 means the reward is 1/20 (5%) \r\n    //      of current tokens held in the quarry. \r\n    uint rewardDivisor = 20;\r\n\r\n    /* Number of times this has been mined. */\r\n    uint epochCount = 0;\r\n    \r\n    /* Amount of pending rewards (merged but not yet transferred). */\r\n    uint unclaimedRewards = 0;\r\n    \r\n    /* MintHelper approved rewards (to be claimed in transfer). */\r\n    mapping(address => uint) mintHelperRewards;\r\n\r\n    /* Solved solutions (to prevent duplicate rewards). */\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n    constructor(address _miningLeader) public  {\r\n        /* Initialize the mining leader (eg 0xBitcoin). */\r\n        miningLeader = ERC918Interface(_miningLeader);\r\n\r\n        /* Initialize the ZeroGold contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        zeroGold = ERC20Interface(0x6ef5bca539A4A01157af842B4823F54F9f7E9968);\r\n    }\r\n\r\n    /**\r\n     * Merge\r\n     * (called from ANY MintHelper)\r\n     * \r\n     * Ensure that mergeMint() can only be called once per MintHelper.\r\n     * Do this by ensuring that the \"new\" challenge number from \r\n     * MiningLeader::challenge post mint can be called once and that this block time \r\n     * is the same as this mint, and the caller is msg.sender.\r\n     */\r\n    function merge() external returns (bool success) {\r\n        /* Verify MiningLeader::lastRewardTo == msg.sender. */\r\n        if (miningLeader.lastRewardTo() != msg.sender) {\r\n            // NOTE A different address called mint last \r\n            //      so return false (don't revert).\r\n            return false;\r\n        }\r\n            \r\n        /* Verify MiningLeader::lastRewardEthBlockNumber == block.number. */\r\n        if (miningLeader.lastRewardEthBlockNumber() != block.number) {\r\n            // NOTE MiningLeader::mint() was called in a different block number \r\n            //      so return false (don't revert).\r\n            return false;\r\n        }\r\n\r\n        // We now update the solutionForChallenge hashmap with the value of \r\n        // MiningLeader::challengeNumber when a solution is merge minted. Only allow \r\n        // one reward for each challenge based on MiningLeader::challengeNumber.\r\n        bytes32 challengeNumber = miningLeader.getChallengeNumber();\r\n        bytes32 solution = solutionForChallenge[challengeNumber];\r\n        if (solution != 0x0) return false; // prevent the same answer from awarding twice\r\n        \r\n        bytes32 digest = 'merge';\r\n        solutionForChallenge[challengeNumber] = digest;\r\n\r\n        // We may safely run the relevant logic to give an award to the sender, \r\n        // and update the contract.\r\n        \r\n        /* Retrieve the reward amount. */\r\n        uint reward = getRewardAmount();\r\n        \r\n        /* Increase the value of unclaimed rewards. */\r\n        unclaimedRewards = unclaimedRewards.add(reward);\r\n\r\n        /* Increase the MintHelper's reward amount. */\r\n        mintHelperRewards[msg.sender] = mintHelperRewards[msg.sender].add(reward);\r\n\r\n        /* Retrieve our ZeroGold balance. */\r\n        uint balance = zeroGold.balanceOf(address(this));\r\n\r\n        /* Verify that we will NOT try to transfer more than we HODL. */\r\n        assert(mintHelperRewards[msg.sender] <= balance);\r\n\r\n        /* Increment the epoch count. */\r\n        epochCount = epochCount.add(1);\r\n\r\n        // NOTE: Use 0 to indicate a merge mine.\r\n        emit Mint(msg.sender, mintHelperRewards[msg.sender], epochCount, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer\r\n     * (called from ANY MintHelper)\r\n     * \r\n     * Transfers the \"approved\" ZeroGold rewards to the MintHelpers's \r\n     * payout wallets. \r\n     * \r\n     * NOTE: This function will be called twice by MintHelper.merge(), \r\n     *       once for `minterWallet` and once for `payoutsWallet`.\r\n     */\r\n    function transfer(\r\n        address _wallet, \r\n        uint _reward\r\n    ) external returns (bool) {\r\n        /* Require a positive transfer value. */\r\n        if (_reward <= 0) {\r\n            return false;\r\n        }\r\n\r\n        /* Verify our MintHelper isn't trying to over reward itself. */\r\n        if (_reward > mintHelperRewards[msg.sender]) {\r\n            return false;\r\n        }\r\n\r\n        /* Reduce the MintHelper's reward amount. */\r\n        mintHelperRewards[msg.sender] = mintHelperRewards[msg.sender].sub(_reward);\r\n        \r\n        /* Reduce the unclaimed rewards amount. */\r\n        unclaimedRewards = unclaimedRewards.sub(_reward);\r\n\r\n        /* Safely transfer ZeroGold reward to MintHelper's specified wallet. */\r\n        // FIXME MintHelper can transfer rewards to ANY wallet, and NOT\r\n        //       necessarily the wallet that pool miners will benefit from.\r\n        //       How \"should we\" restrict/verify the specified wallet??\r\n        zeroGold.transfer(_wallet, _reward);\r\n    }\r\n\r\n    /* Calculate the current reward value. */\r\n    function getRewardAmount() public view returns (uint) {\r\n        /* Retrieve the ZeroGold balance available in this mineable contract. */\r\n        uint totalBalance = zeroGold.balanceOf(address(this));\r\n        \r\n        /* Calculate the available balance (minus unclaimed rewards). */\r\n        uint availableBalance = totalBalance.sub(unclaimedRewards);\r\n\r\n        /* Calculate the reward amount. */\r\n        uint rewardAmount = availableBalance.div(rewardDivisor);\r\n\r\n        return rewardAmount;\r\n    }\r\n    \r\n    /* Retrieves the \"TOTAL\" reward amount available to this MintHelper. */\r\n    // NOTE `lastRewardAmount()` is called from MintHelper during the `merge` \r\n    //      to assign the `merge_totalReward` value.\r\n    function lastRewardAmount() external view returns (uint) {\r\n        return mintHelperRewards[msg.sender];\r\n    }\r\n    \r\n    /* Set the mining leader. */\r\n    function setMiningLeader(address _miningLeader) external onlyOwner {\r\n        miningLeader = ERC918Interface(_miningLeader);\r\n    }\r\n\r\n    /* Set the reward divisor. */\r\n    function setRewardDivisor(uint _rewardDivisor) external onlyOwner {\r\n        rewardDivisor = _rewardDivisor;\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address tokenAddress, uint tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"merge\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardDivisor\",\"type\":\"uint256\"}],\"name\":\"setRewardDivisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miningLeader\",\"type\":\"address\"}],\"name\":\"setMiningLeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_miningLeader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZeroGoldPOWMining","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e6c0d69c553561765f48cadd04fbea3dfd24f0d600b43052fe5f347f1b19f89"}]}