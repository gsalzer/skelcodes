{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Contract {\r\n    mapping (address => uint256) public balances_bonus;\r\n    uint256 public contract_eth_value_bonus;\r\n}\r\n\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract HybridProxy {\r\n\r\n  struct Snapshot {\r\n    uint256 tokens_balance;\r\n    uint256 eth_balance;\r\n  }\r\n\r\n\r\n  Contract contr;\r\n  uint256 public eth_balance;\r\n  ERC20 public token;\r\n  mapping (address => uint8) public contributor_rounds;\r\n  Snapshot[] public snapshots;\r\n  address owner;\r\n  uint8 public rounds;\r\n\r\n  constructor(address _contract, address _token) {\r\n      owner = msg.sender;\r\n      contr = Contract(_contract);\r\n      token = ERC20(_token);\r\n      eth_balance = contr.contract_eth_value_bonus();\r\n  }\r\n\r\n  //public functions\r\n  function withdraw()  {\r\n  \t\t/* require(contract_token_balance != 0); */\r\n  \t\tif (contributor_rounds[msg.sender] < rounds) {\r\n            uint256 balance = contr.balances_bonus(msg.sender);\r\n  \t\t\tSnapshot storage snapshot = snapshots[contributor_rounds[msg.sender]];\r\n            uint256 tokens_to_withdraw = (balance * snapshot.tokens_balance) / snapshot.eth_balance;\r\n            /* require(tokens_to_withdraw != 0); */\r\n  \t\t\tsnapshot.tokens_balance -= tokens_to_withdraw;\r\n  \t\t\tsnapshot.eth_balance -= balance;\r\n            contributor_rounds[msg.sender]++;\r\n            require(token.transfer(msg.sender, tokens_to_withdraw));\r\n      }\r\n  }\r\n\r\n  function emergency_withdraw(address _token) {\r\n      require(msg.sender == owner);\r\n      require(ERC20(_token).transfer(owner, ERC20(_token).balanceOf(this)));\r\n  }\r\n\r\n  function set_tokens_received() {\r\n    require(msg.sender == owner);\r\n    uint256 previous_balance;\r\n    uint256 tokens_this_round;\r\n    for (uint8 i = 0; i < snapshots.length; i++) {\r\n      previous_balance += snapshots[i].tokens_balance;\r\n    }\r\n    tokens_this_round = token.balanceOf(address(this)) - previous_balance;\r\n    require(tokens_this_round != 0);\r\n    snapshots.push(Snapshot(tokens_this_round, eth_balance));\r\n    rounds++;\r\n  }\r\n\r\n  function set_token_address(address _token) {\r\n    require(msg.sender == owner && _token != 0x0);\r\n    token = ERC20(_token);\r\n  }\r\n\r\n  function set_contract_address(address _contract) {\r\n    require(msg.sender == owner);\r\n    contr = Contract(_contract);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"eth_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_tokens_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"set_contract_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergency_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"name\":\"tokens_balance\",\"type\":\"uint256\"},{\"name\":\"eth_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"HybridProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c3b7663ab5b9322871374af1fc967a926abe841a0000000000000000000000006059f55751603ead7dc6d280ad83a7b33d837c90","Library":"","SwarmSource":"bzzr://2525c5467e23ab82ff4a90c09b828a9b583d007c9d4104d83ce05553e2d33614"}]}