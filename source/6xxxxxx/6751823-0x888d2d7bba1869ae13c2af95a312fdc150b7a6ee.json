{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\ncontract BntyControllerInterface {\r\n    function destroyTokensInBntyTokenContract(address _owner, uint _amount) public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ncontract Bounty0xStaking is Ownable, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public Bounty0xToken;\r\n    uint public lockTime;\r\n\r\n    mapping (address => uint) public balances;\r\n    mapping (uint => mapping (address => uint)) public stakes; // mapping of submission ids to mapping of addresses that staked an amount of bounty token\r\n    mapping (address => uint) public huntersLockDateTime;\r\n    mapping (address => uint) public huntersLockAmount;\r\n    \r\n    \r\n    event Deposit(address indexed depositor, uint amount, uint balance);\r\n    event Withdraw(address indexed depositor, uint amount, uint balance);\r\n    event Stake(uint indexed submissionId, address indexed hunter, uint amount, uint balance);\r\n    event StakeReleased(uint indexed submissionId, address indexed from, address indexed to, uint amount);\r\n    event Lock(address indexed hunter, uint amount, uint endDateTime);\r\n    event Unlock(address indexed hunter, uint amount);\r\n\r\n\r\n    constructor(address _bounty0xToken) public {\r\n        Bounty0xToken = _bounty0xToken;\r\n        lockTime = 30 days;\r\n    }\r\n    \r\n\r\n    function deposit(uint _amount) external whenNotPaused {\r\n        require(_amount != 0);\r\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        require(ERC20(Bounty0xToken).transferFrom(msg.sender, this, _amount));\r\n        balances[msg.sender] = SafeMath.add(balances[msg.sender], _amount);\r\n\r\n        emit Deposit(msg.sender, _amount, balances[msg.sender]);\r\n    }\r\n    \r\n    function withdraw(uint _amount) external whenNotPaused {\r\n        require(_amount != 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\r\n        require(ERC20(Bounty0xToken).transfer(msg.sender, _amount));\r\n\r\n        emit Withdraw(msg.sender, _amount, balances[msg.sender]);\r\n    }\r\n    \r\n    \r\n    function lock(uint _amount) external whenNotPaused {\r\n        require(_amount != 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        \r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\r\n        huntersLockAmount[msg.sender] = SafeMath.add(huntersLockAmount[msg.sender], _amount);\r\n        huntersLockDateTime[msg.sender] = SafeMath.add(now, lockTime);\r\n        \r\n        emit Lock(msg.sender, huntersLockAmount[msg.sender], huntersLockDateTime[msg.sender]);\r\n    }\r\n    \r\n    function depositAndLock(uint _amount) external whenNotPaused {\r\n        require(_amount != 0);\r\n        require(ERC20(Bounty0xToken).transferFrom(msg.sender, this, _amount));\r\n        \r\n        huntersLockAmount[msg.sender] = SafeMath.add(huntersLockAmount[msg.sender], _amount);\r\n        huntersLockDateTime[msg.sender] = SafeMath.add(now, lockTime);\r\n        \r\n        emit Lock(msg.sender, huntersLockAmount[msg.sender], huntersLockDateTime[msg.sender]);\r\n    }\r\n    \r\n    function unlock() external whenNotPaused {\r\n        require(huntersLockDateTime[msg.sender] <= now);\r\n        uint amountLocked = huntersLockAmount[msg.sender];\r\n        require(amountLocked != 0);\r\n        \r\n        huntersLockAmount[msg.sender] = SafeMath.sub(huntersLockAmount[msg.sender], amountLocked);\r\n        balances[msg.sender] = SafeMath.add(balances[msg.sender], amountLocked);\r\n        \r\n        emit Unlock(msg.sender, amountLocked);\r\n    }\r\n\r\n\r\n    function stake(uint _submissionId, uint _amount) external whenNotPaused {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\r\n        stakes[_submissionId][msg.sender] = SafeMath.add(stakes[_submissionId][msg.sender], _amount);\r\n\r\n        emit Stake(_submissionId, msg.sender, _amount, balances[msg.sender]);\r\n    }\r\n\r\n    function stakeToMany(uint[] _submissionIds, uint[] _amounts) external whenNotPaused {\r\n        uint totalAmount = 0;\r\n        for (uint j = 0; j < _amounts.length; j++) {\r\n            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\r\n        }\r\n        require(balances[msg.sender] >= totalAmount);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\r\n\r\n        for (uint i = 0; i < _submissionIds.length; i++) {\r\n            stakes[_submissionIds[i]][msg.sender] = SafeMath.add(stakes[_submissionIds[i]][msg.sender], _amounts[i]);\r\n\r\n            emit Stake(_submissionIds[i], msg.sender, _amounts[i], balances[msg.sender]);\r\n        }\r\n    }\r\n\r\n\r\n    function releaseStake(uint _submissionId, address _from, address _to) external onlyOwner {\r\n        require(stakes[_submissionId][_from] != 0);\r\n\r\n        balances[_to] = SafeMath.add(balances[_to], stakes[_submissionId][_from]);\r\n        emit StakeReleased(_submissionId, _from, _to, stakes[_submissionId][_from]);\r\n        \r\n        stakes[_submissionId][_from] = 0;\r\n    }\r\n\r\n    function releaseManyStakes(uint[] _submissionIds, address[] _from, address[] _to) external onlyOwner {\r\n        require(_submissionIds.length == _from.length &&\r\n                _submissionIds.length == _to.length);\r\n\r\n        for (uint i = 0; i < _submissionIds.length; i++) {\r\n            require(_from[i] != address(0));\r\n            require(_to[i] != address(0));\r\n            require(stakes[_submissionIds[i]][_from[i]] != 0);\r\n            \r\n            balances[_to[i]] = SafeMath.add(balances[_to[i]], stakes[_submissionIds[i]][_from[i]]);\r\n            emit StakeReleased(_submissionIds[i], _from[i], _to[i], stakes[_submissionIds[i]][_from[i]]);\r\n            \r\n            stakes[_submissionIds[i]][_from[i]] = 0;\r\n        }\r\n    }\r\n    \r\n\r\n    function changeLockTime(uint _periodInSeconds) external onlyOwner {\r\n        lockTime = _periodInSeconds;\r\n    }\r\n    \r\n    \r\n    // Burnable mechanism\r\n\r\n    address public bntyController;\r\n\r\n    event Burn(uint indexed submissionId, address indexed from, uint amount);\r\n\r\n    function changeBntyController(address _bntyController) external onlyOwner {\r\n        bntyController = _bntyController;\r\n    }\r\n\r\n\r\n    function burnStake(uint _submissionId, address _from) external onlyOwner {\r\n        require(stakes[_submissionId][_from] > 0);\r\n\r\n        uint amountToBurn = stakes[_submissionId][_from];\r\n        stakes[_submissionId][_from] = 0;\r\n\r\n        require(BntyControllerInterface(bntyController).destroyTokensInBntyTokenContract(this, amountToBurn));\r\n        emit Burn(_submissionId, _from, amountToBurn);\r\n    }\r\n\r\n\r\n    // in case of emergency\r\n    function emergentWithdraw() external onlyOwner {\r\n        require(ERC20(Bounty0xToken).transfer(msg.sender, address(this).balance));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAndLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bntyController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_submissionId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"burnStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_submissionId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_submissionId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"releaseStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergentWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periodInSeconds\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_submissionIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"stakeToMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bntyController\",\"type\":\"address\"}],\"name\":\"changeBntyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_submissionIds\",\"type\":\"uint256[]\"},{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"releaseManyStakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"huntersLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bounty0xToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"huntersLockDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bounty0xToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDateTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bounty0xStaking","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d2d6158683aee4cc838067727209a0aaf4359de3","Library":"","SwarmSource":"bzzr://6b8f58bebb5fb514162f30d20593c0a3750758a30205db8269bc884b724c6f75"}]}