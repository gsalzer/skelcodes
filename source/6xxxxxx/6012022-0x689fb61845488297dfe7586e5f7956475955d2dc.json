{"status":"1","message":"OK","result":[{"SourceCode":"/* \t\t\r\n\t\thttps://mycryptochamp.io/\r\n\t\thello@mycryptochamp.io\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Controller{\r\n\tfunction getChampReward(uint _position) public view returns(uint);\r\n\tfunction changeChampsName(uint _champId, string _name, address _msgsender) external;\r\n\tfunction withdrawChamp(uint _id, address _msgsender) external;\r\n\tfunction attack(uint _champId, uint _targetId, address _msgsender) external;\r\n\tfunction transferToken(address _from, address _to, uint _id, bool _isTokenChamp) external;\r\n\tfunction cancelTokenSale(uint _id, address _msgsender, bool _isTokenChamp) public;\r\n\tfunction giveToken(address _to, uint _id, address _msgsender, bool _isTokenChamp) external;\r\n\tfunction setTokenForSale(uint _id, uint _price, address _msgsender, bool _isTokenChamp) external;\r\n\tfunction getTokenURIs(uint _id, bool _isTokenChamp) public pure returns(string);\r\n\tfunction takeOffItem(uint _champId, uint8 _type, address _msgsender) public;\r\n\tfunction putOn(uint _champId, uint _itemId, address _msgsender) external;\r\n\tfunction forgeItems(uint _parentItemID, uint _childItemID, address _msgsender) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title MyCryptoChamp Core - Stores all of game data. Functions are stored in the replaceable contracts. This solution was required in order to avoid unexpected bugs and make game upgradeable.\r\n/// @author Patrik Mojzis\r\ncontract MyCryptoChampCore {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Champ {\r\n        uint id; //same as position in Champ[]\r\n        uint attackPower;\r\n        uint defencePower;\r\n        uint cooldownTime; //how long does it take to be able attack again\r\n        uint readyTime; //if is smaller than block.timestamp champ is ready to fight\r\n        uint winCount;\r\n        uint lossCount;\r\n        uint position; //subtract 1 and you get position in leaderboard[]\r\n        uint price; //sale price\r\n        uint withdrawCooldown; //if you one of the 800 best champs and withdrawCooldown is less as block.timestamp then you get ETH reward\r\n        uint eq_sword; \r\n        uint eq_shield; \r\n        uint eq_helmet; \r\n        bool forSale; //is champ for sale?\r\n    }\r\n    \r\n    struct AddressInfo {\r\n        uint withdrawal;\r\n        uint champsCount;\r\n        uint itemsCount;\r\n        string name;\r\n    }\r\n\r\n    //Item struct\r\n    struct Item {\r\n        uint id;\r\n        uint8 itemType; // 1 - Sword | 2 - Shield | 3 - Helmet\r\n        uint8 itemRarity; // 1 - Common | 2 - Uncommon | 3 - Rare | 4 - Epic | 5 - Legendery | 6 - Forged\r\n        uint attackPower;\r\n        uint defencePower;\r\n        uint cooldownReduction;\r\n        uint price;\r\n        uint onChampId; //can not be used to decide if item is on champ, because champ's id can be 0, 'bool onChamp' solves it.\r\n        bool onChamp; \r\n        bool forSale; //is item for sale?\r\n    }\r\n    \r\n    Champ[] public champs;\r\n    Item[] public items;\r\n    mapping (uint => uint) public leaderboard;\r\n    mapping (address => bool) private trusted;\r\n    mapping (address => AddressInfo) public addressInfo;\r\n    mapping (bool => mapping(address => mapping (address => bool))) public tokenOperatorApprovals;\r\n    mapping (bool => mapping(uint => address)) public tokenApprovals;\r\n    mapping (bool => mapping(uint => address)) public tokenToOwner;\r\n    mapping (uint => string) public champToName;\r\n    mapping (bool => uint) public tokensForSaleCount;\r\n    uint public pendingWithdrawal = 0;\r\n    address private contractOwner;\r\n    Controller internal controller;\r\n\r\n\r\n    constructor () public \r\n    {\r\n        trusted[msg.sender] = true;\r\n        contractOwner = msg.sender;\r\n    }\r\n    \r\n\r\n    /*============== MODIFIERS ==============*/\r\n    modifier onlyTrusted(){\r\n        require(trusted[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier isPaid(uint _price)\r\n    {\r\n        require(msg.value >= _price);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwnerOfItem(uint _itemId) {\r\n        require(_itemId != 0);\r\n        require(msg.sender != tokenToOwner[false][_itemId]);\r\n        _;\r\n    }\r\n\r\n    modifier isItemForSale(uint _id){\r\n        require(items[_id].forSale);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotOwnerOfChamp(uint _champId) \r\n    {\r\n        require(msg.sender != tokenToOwner[true][_champId]);\r\n        _;\r\n    }\r\n\r\n    modifier isChampForSale(uint _id)\r\n    {\r\n        require(champs[_id].forSale);\r\n        _;\r\n    }\r\n\r\n\r\n    /*============== CONTROL COTRACT ==============*/\r\n    function loadController(address _address) external onlyTrusted {\r\n        controller = Controller(_address);\r\n    }\r\n\r\n    \r\n    function setTrusted(address _address, bool _trusted) external onlyTrusted {\r\n        trusted[_address] = _trusted;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyTrusted {\r\n        require(newOwner != address(0));\r\n        contractOwner = newOwner;\r\n    }\r\n    \r\n\r\n    /*============== PRIVATE FUNCTIONS ==============*/\r\n    function _addWithdrawal(address _address, uint _amount) private \r\n    {\r\n        addressInfo[_address].withdrawal += _amount;\r\n        pendingWithdrawal += _amount;\r\n    }\r\n\r\n    /// @notice Distribute input funds between contract owner and players\r\n    function _distributeNewSaleInput(address _affiliateAddress) private \r\n    {\r\n        //contract owner\r\n        _addWithdrawal(contractOwner, ((msg.value / 100) * 60)); // 60%\r\n\r\n        //affiliate\r\n        //checks if _affiliateAddress is set & if affiliate address is not buying player\r\n        if(_affiliateAddress != address(0) && _affiliateAddress != msg.sender){\r\n            _addWithdrawal(_affiliateAddress, ((msg.value / 100) * 25)); //provision is 25%\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n    /*============== ONLY TRUSTED ==============*/\r\n    function addWithdrawal(address _address, uint _amount) public onlyTrusted \r\n    {\r\n        _addWithdrawal(_address, _amount);\r\n    }\r\n\r\n    function clearTokenApproval(address _from, uint _tokenId, bool _isTokenChamp) public onlyTrusted\r\n    {\r\n        require(tokenToOwner[_isTokenChamp][_tokenId] == _from);\r\n        if (tokenApprovals[_isTokenChamp][_tokenId] != address(0)) {\r\n            tokenApprovals[_isTokenChamp][_tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyTrusted\r\n    {\r\n        contractOwner.transfer(address(this).balance);\r\n    }\r\n\r\n    function setChampsName(uint _champId, string _name) public onlyTrusted \r\n    {\r\n        champToName[_champId] = _name;\r\n    }\r\n\r\n    function setLeaderboard(uint _x, uint _value) public onlyTrusted\r\n    {\r\n        leaderboard[_x] = _value;\r\n    }\r\n\r\n    function setTokenApproval(uint _id, address _to, bool _isTokenChamp) public onlyTrusted\r\n    {\r\n        tokenApprovals[_isTokenChamp][_id] = _to;\r\n    }\r\n\r\n    function setTokenOperatorApprovals(address _from, address _to, bool _approved, bool _isTokenChamp) public onlyTrusted\r\n    {\r\n        tokenOperatorApprovals[_isTokenChamp][_from][_to] = _approved;\r\n    }\r\n\r\n    function setTokenToOwner(uint _id, address _owner, bool _isTokenChamp) public onlyTrusted\r\n    {\r\n        tokenToOwner[_isTokenChamp][_id] = _owner;\r\n    }\r\n\r\n    function setTokensForSaleCount(uint _value, bool _isTokenChamp) public onlyTrusted \r\n    {\r\n        tokensForSaleCount[_isTokenChamp] = _value;\r\n    }\r\n\r\n    function transferToken(address _from, address _to, uint _id, bool _isTokenChamp) public onlyTrusted\r\n    {\r\n        controller.transferToken(_from, _to, _id, _isTokenChamp);\r\n    }\r\n\r\n    function updateAddressInfo(address _address, uint _withdrawal, bool _updatePendingWithdrawal, uint _champsCount, bool _updateChampsCount, uint _itemsCount, bool _updateItemsCount, string _name, bool _updateName) public onlyTrusted {\r\n        AddressInfo storage ai = addressInfo[_address];\r\n        if(_updatePendingWithdrawal){ ai.withdrawal = _withdrawal; }\r\n        if(_updateChampsCount){ ai.champsCount = _champsCount; }\r\n        if(_updateItemsCount){ ai.itemsCount = _itemsCount; }\r\n        if(_updateName){ ai.name = _name; }\r\n    }\r\n\r\n    function newChamp(\r\n        uint _attackPower,\r\n        uint _defencePower,\r\n        uint _cooldownTime,\r\n        uint _winCount,\r\n        uint _lossCount,\r\n        uint _position,\r\n        uint _price,\r\n        uint _eq_sword, \r\n        uint _eq_shield, \r\n        uint _eq_helmet, \r\n        bool _forSale,\r\n        address _owner\r\n    ) public onlyTrusted returns (uint){\r\n\r\n        Champ memory champ = Champ({\r\n            id: 0,\r\n            attackPower: 0, //CompilerError: Stack too deep, try removing local variables.\r\n            defencePower: _defencePower,\r\n            cooldownTime: _cooldownTime,\r\n            readyTime: 0,\r\n            winCount: _winCount,\r\n            lossCount: _lossCount,\r\n            position: _position,\r\n            price: _price,\r\n            withdrawCooldown: 0,\r\n            eq_sword: _eq_sword,\r\n            eq_shield: _eq_shield,\r\n            eq_helmet: _eq_helmet,\r\n            forSale: _forSale\r\n        });\r\n        champ.attackPower = _attackPower;\r\n\r\n        uint id = champs.push(champ) - 1; \r\n        champs[id].id = id; \r\n        leaderboard[_position] = id;\r\n\r\n        addressInfo[_owner].champsCount++;\r\n        tokenToOwner[true][id] = _owner;\r\n\r\n        if(_forSale){\r\n            tokensForSaleCount[true]++;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    function newItem(\r\n        uint8 _itemType,\r\n        uint8 _itemRarity,\r\n        uint _attackPower,\r\n        uint _defencePower,\r\n        uint _cooldownReduction,\r\n        uint _price,\r\n        uint _onChampId,\r\n        bool _onChamp,\r\n        bool _forSale,\r\n        address _owner\r\n    ) public onlyTrusted returns (uint)\r\n    { \r\n        //create that struct\r\n        Item memory item = Item({\r\n            id: 0,\r\n            itemType: _itemType,\r\n            itemRarity: _itemRarity, \r\n            attackPower: _attackPower,\r\n            defencePower: _defencePower,\r\n            cooldownReduction: _cooldownReduction,\r\n            price: _price,\r\n            onChampId: _onChampId,\r\n            onChamp: _onChamp, \r\n            forSale: _forSale\r\n\r\n        });\r\n\r\n        uint id = items.push(item) - 1;\r\n        items[id].id = id; \r\n\r\n        addressInfo[_owner].itemsCount++;\r\n        tokenToOwner[false][id] = _owner;\r\n\r\n        if(_forSale){\r\n            tokensForSaleCount[false]++;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    function updateChamp(\r\n        uint _champId, \r\n        uint _attackPower,\r\n        uint _defencePower,\r\n        uint _cooldownTime,\r\n        uint _readyTime,\r\n        uint _winCount,\r\n        uint _lossCount,\r\n        uint _position,\r\n        uint _price,\r\n        uint _withdrawCooldown,\r\n        uint _eq_sword, \r\n        uint _eq_shield, \r\n        uint _eq_helmet, \r\n        bool _forSale\r\n    ) public onlyTrusted {\r\n        Champ storage champ = champs[_champId];\r\n        if(champ.attackPower != _attackPower){champ.attackPower = _attackPower;}\r\n        if(champ.defencePower != _defencePower){champ.defencePower = _defencePower;}\r\n        if(champ.cooldownTime != _cooldownTime){champ.cooldownTime = _cooldownTime;}\r\n        if(champ.readyTime != _readyTime){champ.readyTime = _readyTime;}\r\n        if(champ.winCount != _winCount){champ.winCount = _winCount;}\r\n        if(champ.lossCount != _lossCount){champ.lossCount = _lossCount;}\r\n        if(champ.position != _position){\r\n            champ.position = _position;\r\n            leaderboard[_position] = _champId;\r\n        }\r\n        if(champ.price != _price){champ.price = _price;}\r\n        if(champ.withdrawCooldown != _withdrawCooldown){champ.withdrawCooldown = _withdrawCooldown;}\r\n        if(champ.eq_sword != _eq_sword){champ.eq_sword = _eq_sword;}\r\n        if(champ.eq_shield != _eq_shield){champ.eq_shield = _eq_shield;}\r\n        if(champ.eq_helmet != _eq_helmet){champ.eq_helmet = _eq_helmet;}\r\n        if(champ.forSale != _forSale){ \r\n            champ.forSale = _forSale; \r\n            if(_forSale){\r\n                tokensForSaleCount[true]++;\r\n            }else{\r\n                tokensForSaleCount[true]--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateItem(\r\n        uint _id,\r\n        uint8 _itemType,\r\n        uint8 _itemRarity,\r\n        uint _attackPower,\r\n        uint _defencePower,\r\n        uint _cooldownReduction,\r\n        uint _price,\r\n        uint _onChampId,\r\n        bool _onChamp,\r\n        bool _forSale\r\n    ) public onlyTrusted\r\n    {\r\n        Item storage item = items[_id];\r\n        if(item.itemType != _itemType){item.itemType = _itemType;}\r\n        if(item.itemRarity != _itemRarity){item.itemRarity = _itemRarity;}\r\n        if(item.attackPower != _attackPower){item.attackPower = _attackPower;}\r\n        if(item.defencePower != _defencePower){item.defencePower = _defencePower;}\r\n        if(item.cooldownReduction != _cooldownReduction){item.cooldownReduction = _cooldownReduction;}\r\n        if(item.price != _price){item.price = _price;}\r\n        if(item.onChampId != _onChampId){item.onChampId = _onChampId;}\r\n        if(item.onChamp != _onChamp){item.onChamp = _onChamp;}\r\n        if(item.forSale != _forSale){\r\n            item.forSale = _forSale;\r\n            if(_forSale){\r\n                tokensForSaleCount[false]++;\r\n            }else{\r\n                tokensForSaleCount[false]--;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*============== CALLABLE BY PLAYER ==============*/\r\n    function buyItem(uint _id, address _affiliateAddress) external payable \r\n    onlyNotOwnerOfItem(_id) \r\n    isItemForSale(_id)\r\n    isPaid(items[_id].price) \r\n    {\r\n        if(tokenToOwner[false][_id] == address(this)){\r\n            _distributeNewSaleInput(_affiliateAddress);\r\n        }else{\r\n            _addWithdrawal(tokenToOwner[false][_id], msg.value);\r\n        }\r\n        controller.transferToken(tokenToOwner[false][_id], msg.sender, _id, false);\r\n    }\r\n\r\n    function buyChamp(uint _id, address _affiliateAddress) external payable\r\n    onlyNotOwnerOfChamp(_id) \r\n    isChampForSale(_id) \r\n    isPaid(champs[_id].price) \r\n    {\r\n        if(tokenToOwner[true][_id] == address(this)){\r\n            _distributeNewSaleInput(_affiliateAddress);\r\n        }else{\r\n            _addWithdrawal(tokenToOwner[true][_id], msg.value);\r\n        }\r\n        controller.transferToken(tokenToOwner[true][_id], msg.sender, _id, true);\r\n    }\r\n\r\n    function changePlayersName(string _name) external {\r\n        addressInfo[msg.sender].name = _name;\r\n    }\r\n\r\n    function withdrawToAddress(address _address) external \r\n    {\r\n        address playerAddress = _address;\r\n        if(playerAddress == address(0)){ playerAddress = msg.sender; }\r\n        uint share = addressInfo[playerAddress].withdrawal; //gets pending funds\r\n        require(share > 0); //is it more than 0?\r\n\r\n        addressInfo[playerAddress].withdrawal = 0; //set player's withdrawal pendings to 0 \r\n        pendingWithdrawal = pendingWithdrawal.sub(share); //subtract share from total pendings \r\n        \r\n        playerAddress.transfer(share); //transfer\r\n    }\r\n\r\n\r\n    /*============== VIEW FUNCTIONS ==============*/\r\n    function getChampsByOwner(address _owner) external view returns(uint256[]) {\r\n        uint256[] memory result = new uint256[](addressInfo[_owner].champsCount);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i < champs.length; i++) {\r\n            if (tokenToOwner[true][i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTokensForSale(bool _isTokenChamp) view external returns(uint256[]){\r\n        uint256[] memory result = new uint256[](tokensForSaleCount[_isTokenChamp]);\r\n        if(tokensForSaleCount[_isTokenChamp] > 0){\r\n            uint256 counter = 0;\r\n            if(_isTokenChamp){\r\n                for (uint256 i = 0; i < champs.length; i++) {\r\n                    if (champs[i].forSale == true) {\r\n                        result[counter]=i;\r\n                        counter++;\r\n                    }\r\n                }\r\n            }else{\r\n                for (uint256 n = 0; n < items.length; n++) {\r\n                    if (items[n].forSale == true) {\r\n                        result[counter]=n;\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getChampStats(uint256 _champId) public view returns(uint256,uint256,uint256){\r\n        Champ storage champ = champs[_champId];\r\n        Item storage sword = items[champ.eq_sword];\r\n        Item storage shield = items[champ.eq_shield];\r\n        Item storage helmet = items[champ.eq_helmet];\r\n\r\n        uint totalAttackPower = champ.attackPower + sword.attackPower + shield.attackPower + helmet.attackPower; //Gets champs AP\r\n        uint totalDefencePower = champ.defencePower + sword.defencePower + shield.defencePower + helmet.defencePower; //Gets champs  DP\r\n        uint totalCooldownReduction = sword.cooldownReduction + shield.cooldownReduction + helmet.cooldownReduction; //Gets  CR\r\n\r\n        return (totalAttackPower, totalDefencePower, totalCooldownReduction);\r\n    }\r\n\r\n    function getItemsByOwner(address _owner) external view returns(uint256[]) {\r\n        uint256[] memory result = new uint256[](addressInfo[_owner].itemsCount);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i < items.length; i++) {\r\n            if (tokenToOwner[false][i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTokenCount(bool _isTokenChamp) external view returns(uint)\r\n    {\r\n        if(_isTokenChamp){\r\n            return champs.length - addressInfo[address(0)].champsCount;\r\n        }else{\r\n            return items.length - 1 - addressInfo[address(0)].itemsCount;\r\n        }\r\n    }\r\n    \r\n    function getTokenURIs(uint _tokenId, bool _isTokenChamp) public view returns(string)\r\n    {\r\n        return controller.getTokenURIs(_tokenId,_isTokenChamp);\r\n    }\r\n\r\n    function onlyApprovedOrOwnerOfToken(uint _id, address _msgsender, bool _isTokenChamp) external view returns(bool)\r\n    {\r\n        if(!_isTokenChamp){\r\n            require(_id != 0);\r\n        }\r\n        address owner = tokenToOwner[_isTokenChamp][_id];\r\n        return(_msgsender == owner || _msgsender == tokenApprovals[_isTokenChamp][_id] || tokenOperatorApprovals[_isTokenChamp][owner][_msgsender]);\r\n    }\r\n\r\n\r\n    /*============== DELEGATE ==============*/\r\n    function attack(uint _champId, uint _targetId) external{\r\n        controller.attack(_champId, _targetId, msg.sender);\r\n    }\r\n\r\n    function cancelTokenSale(uint _id, bool _isTokenChamp) public{\r\n        controller.cancelTokenSale(_id, msg.sender, _isTokenChamp);\r\n    }\r\n\r\n    function changeChampsName(uint _champId, string _name) external{\r\n        controller.changeChampsName(_champId, _name, msg.sender);\r\n    }\r\n\r\n    function forgeItems(uint _parentItemID, uint _childItemID) external{\r\n        controller.forgeItems(_parentItemID, _childItemID, msg.sender);\r\n    }\r\n\r\n    function giveToken(address _to, uint _champId, bool _isTokenChamp) external{\r\n        controller.giveToken(_to, _champId, msg.sender, _isTokenChamp);\r\n    }\r\n\r\n    function setTokenForSale(uint _id, uint _price, bool _isTokenChamp) external{\r\n        controller.setTokenForSale(_id, _price, msg.sender, _isTokenChamp);\r\n    }\r\n\r\n    function putOn(uint _champId, uint _itemId) external{\r\n        controller.putOn(_champId, _itemId, msg.sender);\r\n    }\r\n\r\n    function takeOffItem(uint _champId, uint8 _type) public{\r\n        controller.takeOffItem(_champId, _type, msg.sender);\r\n    }\r\n\r\n    function withdrawChamp(uint _id) external{\r\n        controller.withdrawChamp(_id, msg.sender); \r\n    }\r\n\r\n    function getChampReward(uint _position) public view returns(uint){\r\n        return controller.getChampReward(_position);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"loadController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"cancelTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"setTokenApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_attackPower\",\"type\":\"uint256\"},{\"name\":\"_defencePower\",\"type\":\"uint256\"},{\"name\":\"_cooldownTime\",\"type\":\"uint256\"},{\"name\":\"_readyTime\",\"type\":\"uint256\"},{\"name\":\"_winCount\",\"type\":\"uint256\"},{\"name\":\"_lossCount\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_withdrawCooldown\",\"type\":\"uint256\"},{\"name\":\"_eq_sword\",\"type\":\"uint256\"},{\"name\":\"_eq_shield\",\"type\":\"uint256\"},{\"name\":\"_eq_helmet\",\"type\":\"uint256\"},{\"name\":\"_forSale\",\"type\":\"bool\"}],\"name\":\"updateChamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressInfo\",\"outputs\":[{\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"name\":\"champsCount\",\"type\":\"uint256\"},{\"name\":\"itemsCount\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"clearTokenApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getItemsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"setTokenForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawChamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_attackPower\",\"type\":\"uint256\"},{\"name\":\"_defencePower\",\"type\":\"uint256\"},{\"name\":\"_cooldownTime\",\"type\":\"uint256\"},{\"name\":\"_winCount\",\"type\":\"uint256\"},{\"name\":\"_lossCount\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_eq_sword\",\"type\":\"uint256\"},{\"name\":\"_eq_shield\",\"type\":\"uint256\"},{\"name\":\"_eq_helmet\",\"type\":\"uint256\"},{\"name\":\"_forSale\",\"type\":\"bool\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newChamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parentItemID\",\"type\":\"uint256\"},{\"name\":\"_childItemID\",\"type\":\"uint256\"}],\"name\":\"forgeItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"}],\"name\":\"getChampStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"putOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setChampsName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOperatorApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changePlayersName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"giveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_itemType\",\"type\":\"uint8\"},{\"name\":\"_itemRarity\",\"type\":\"uint8\"},{\"name\":\"_attackPower\",\"type\":\"uint256\"},{\"name\":\"_defencePower\",\"type\":\"uint256\"},{\"name\":\"_cooldownReduction\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_onChampId\",\"type\":\"uint256\"},{\"name\":\"_onChamp\",\"type\":\"bool\"},{\"name\":\"_forSale\",\"type\":\"bool\"}],\"name\":\"updateItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"champToName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"getTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_withdrawal\",\"type\":\"uint256\"},{\"name\":\"_updatePendingWithdrawal\",\"type\":\"bool\"},{\"name\":\"_champsCount\",\"type\":\"uint256\"},{\"name\":\"_updateChampsCount\",\"type\":\"bool\"},{\"name\":\"_itemsCount\",\"type\":\"uint256\"},{\"name\":\"_updateItemsCount\",\"type\":\"bool\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_updateName\",\"type\":\"bool\"}],\"name\":\"updateAddressInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"setTokensForSaleCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"getTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getChampReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemType\",\"type\":\"uint8\"},{\"name\":\"_itemRarity\",\"type\":\"uint8\"},{\"name\":\"_attackPower\",\"type\":\"uint256\"},{\"name\":\"_defencePower\",\"type\":\"uint256\"},{\"name\":\"_cooldownReduction\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_onChampId\",\"type\":\"uint256\"},{\"name\":\"_onChamp\",\"type\":\"bool\"},{\"name\":\"_forSale\",\"type\":\"bool\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"tokensForSaleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeChampsName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLeaderboard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaderboard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"itemType\",\"type\":\"uint8\"},{\"name\":\"itemRarity\",\"type\":\"uint8\"},{\"name\":\"attackPower\",\"type\":\"uint256\"},{\"name\":\"defencePower\",\"type\":\"uint256\"},{\"name\":\"cooldownReduction\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"onChampId\",\"type\":\"uint256\"},{\"name\":\"onChamp\",\"type\":\"bool\"},{\"name\":\"forSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"champs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"attackPower\",\"type\":\"uint256\"},{\"name\":\"defencePower\",\"type\":\"uint256\"},{\"name\":\"cooldownTime\",\"type\":\"uint256\"},{\"name\":\"readyTime\",\"type\":\"uint256\"},{\"name\":\"winCount\",\"type\":\"uint256\"},{\"name\":\"lossCount\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"withdrawCooldown\",\"type\":\"uint256\"},{\"name\":\"eq_sword\",\"type\":\"uint256\"},{\"name\":\"eq_shield\",\"type\":\"uint256\"},{\"name\":\"eq_helmet\",\"type\":\"uint256\"},{\"name\":\"forSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"onlyApprovedOrOwnerOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"takeOffItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"name\":\"buyChamp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"setTokenOperatorApprovals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"getTokenURIs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_champId\",\"type\":\"uint256\"},{\"name\":\"_targetId\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_isTokenChamp\",\"type\":\"bool\"}],\"name\":\"setTokenToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getChampsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_trusted\",\"type\":\"bool\"}],\"name\":\"setTrusted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MyCryptoChampCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67a990025a9138c614880f57620d6c8080a00f9be557de7466ec0d5681b6d500"}]}