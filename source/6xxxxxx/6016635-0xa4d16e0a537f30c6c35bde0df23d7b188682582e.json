{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n//http://scorpio.network/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *      ERC223 contract interface with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n */\r\ncontract ERC223 {\r\n    function balanceOf(address who) public view returns (uint);\r\n\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract ScorpioCoin is ERC223  {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n    address public owner = msg.sender;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public blacklist;\r\n    uint256 public etherGet=60000;\r\n    uint256 internal EthLevel=1e18;\r\n    uint256 internal EthValueBase=1e18;\r\n    mapping (address => uint256) public lockTime;\r\n    address public target;\r\n    string internal Name= \"ScorpioCoin\";\r\n    string internal Symbol = \"SPC\";\r\n    uint8 internal Decimals= 18;\r\n    uint256 internal Total= 2000000000e18;\r\n\r\n    uint256 public officalHolding = Total.mul(50).div(100);\r\n    uint256 public totalRemaining = Total;\r\n    uint256 public totalDistributed = 0;\r\n    bool public canTransfer = true;\r\n    uint256 internal Proportion1=20;\r\n    uint256 internal Proportion2=25;\r\n    uint256 internal Proportion1EthBase=5;\r\n    uint256 internal Proportion2EthBase=50;\r\n    bool public endPreSale=false;\r\n    bool public distributionFinished = false;\r\n    bool public endEthGet = false;    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier canTrans() {\r\n        require(canTransfer == true);\r\n        _;\r\n    }    \r\n    modifier onlyWhitelist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n    modifier notLockTrans() {\r\n        require(now>lockTime[msg.sender]);\r\n        _;\r\n    }    \r\n    function ScorpioCoin (address _target) public {\r\n        owner = msg.sender;\r\n        target = _target;\r\n        distr(target, officalHolding);\r\n    }\r\n\r\n    // Function to access name of token .\r\n    function name() public view returns (string _name) {\r\n      return Name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() public view returns (string _symbol) {\r\n      return Symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() public view returns (uint8 _decimals) {\r\n      return Decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n      return Total;\r\n    }\r\n\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) canTrans notLockTrans public returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n    }\r\n\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address _to, uint _value, bytes _data) canTrans notLockTrans public returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) canTrans notLockTrans public returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n    //function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }\r\n\r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n    }\r\n\r\n    \r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n      }\r\n\r\n    \r\n    function enableWhitelist(address[] addresses) onlyOwner public {\r\n        require(addresses.length <= 255);\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner public {\r\n        require(addresses.length <= 255);\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function finishDistribution() onlyOwner  public returns (bool) {\r\n        distributionFinished = true;\r\n        return true;\r\n    }\r\n    function startDistribution() onlyOwner  public returns (bool) {\r\n        distributionFinished = false;\r\n        return true;\r\n    }\r\n\r\n    function endEthGetToken() onlyOwner  public returns (bool) {\r\n        endEthGet = true;\r\n        return true;\r\n    }\r\n\r\n    function startEthGetToken() onlyOwner  public returns (bool) {\r\n        endEthGet = false;\r\n        return true;\r\n    }\r\n    function EndPreSale() onlyOwner  public returns (bool) {\r\n        endPreSale = true;\r\n        return true;\r\n    }\r\n\r\n    function StartPreSale() onlyOwner  public returns (bool) {\r\n        endPreSale = false;\r\n        return true;\r\n    }\r\n    function startTransfer() onlyOwner  public returns (bool) {\r\n        canTransfer = true;\r\n        return true;\r\n    }\r\n    function stopTransfer() onlyOwner  public returns (bool) {\r\n        canTransfer = false;\r\n        return true;\r\n    }\r\n\r\n    function changeBaseValue(uint256 EthLevel_,uint256 etherGet_,uint256 Proportion1_,uint256 Proportion2_,uint256 Proportion1EthBase_,uint256 Proportion2EthBase_) onlyOwner public returns (bool) {\r\n        EthLevel=EthLevel_;\r\n        etherGet=etherGet_;\r\n        Proportion1=Proportion1_;\r\n        Proportion2=Proportion2_;\r\n        Proportion1EthBase=Proportion1EthBase_;\r\n        Proportion2EthBase=Proportion2EthBase_;\r\n        return true;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        require(totalRemaining >= 0);\r\n        require(_amount<=totalRemaining);\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(amount <= totalRemaining);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amount <= totalRemaining);\r\n            distr(addresses[i], amount);\r\n        }\r\n  \r\n        if (totalDistributed >= Total) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n    \r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] <= totalRemaining);\r\n            distr(addresses[i], amounts[i]);\r\n            \r\n            if (totalDistributed >= Total) {\r\n                distributionFinished = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function () external payable {\r\n            getTokens();\r\n     }   \r\n    function getTokens() payable canDistr onlyWhitelist public {\r\n\r\n\r\n        address sender = msg.sender;\r\n        uint256 etherValue=msg.value;\r\n        uint256 value;\r\n        uint256 tempvalue;\r\n        require(endEthGet==false);\r\n        if(endPreSale==false){\r\n            if(etherValue>=Proportion2EthBase.mul(EthValueBase)){\r\n               value=etherValue.mul(etherGet);\r\n               value=value+value.mul(Proportion2).div(100);  \r\n            }else if(etherValue>=Proportion1EthBase.mul(EthValueBase)){\r\n               value=etherValue.mul(etherGet);\r\n               value=value+value.mul(Proportion1).div(100);\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            require(etherValue>=EthLevel);\r\n            value=etherValue.mul(etherGet);   \r\n        }\r\n\r\n         \r\n          \r\n        require(value <= totalRemaining);\r\n        if(!owner.send(etherValue))revert();           \r\n        distr(sender, value);\r\n     \r\n        if (totalDistributed >= Total) {\r\n            endEthGet=true;\r\n            distributionFinished = true;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) canTrans public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balances[_from] >= _value\r\n                && allowed[_from][msg.sender] >= _value\r\n                && blacklist[_from] == false \r\n                && blacklist[_to] == false);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint256){\r\n        ForeignToken t = ForeignToken(tokenAddress);\r\n        uint256 bal = t.balanceOf(who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw(address receiveAddress) onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        if(!receiveAddress.send(etherBalance))revert();   \r\n\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        Total = Total.sub(_value);\r\n        totalDistributed = totalDistributed.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endEthGetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EndPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"EthLevel_\",\"type\":\"uint256\"},{\"name\":\"etherGet_\",\"type\":\"uint256\"},{\"name\":\"Proportion1_\",\"type\":\"uint256\"},{\"name\":\"Proportion2_\",\"type\":\"uint256\"},{\"name\":\"Proportion1EthBase_\",\"type\":\"uint256\"},{\"name\":\"Proportion2EthBase_\",\"type\":\"uint256\"}],\"name\":\"changeBaseValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officalHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endEthGet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startEthGetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"ScorpioCoin","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000002cfd46186bfd371201ee4cddb366f845330c9e","Library":"","SwarmSource":"bzzr://39ffd80f1c8c99483741395281472bb000bbd5b295aa6fc951cd8e36793b5b25"}]}