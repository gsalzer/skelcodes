{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20I {\r\n\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n  \r\n  function allowance(address _owner, address _spender) external view returns (uint256);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow.\r\n    */\r\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        assert(y <= x);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert(z >= x);\r\n        return z;\r\n    }\r\n\t\r\n\t/**\r\n    * @dev Integer division of two numbers, reverts on division by zero.\r\n    */\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\t\r\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 z = x * y;\r\n        assert(z / x == y);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer percentage of the number.\r\n    */\r\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 z = x * y;\r\n        assert(z / x == y);    \r\n        z = z / 10000; // percent to hundredths\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the minimum value of two numbers.\r\n    */\t\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x <= y ? x : y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the maximum value of two numbers.\r\n    */\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x >= y ? x : y;\r\n        return z;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Agent contract - base contract with an agent\r\n */\r\ncontract Agent is Ownable {\r\n\r\n  address public defAgent;\r\n\r\n  mapping(address => bool) public Agents;\r\n  \r\n  constructor() public {\r\n    defAgent = msg.sender;\r\n    Agents[msg.sender] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    assert(Agents[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function updateAgent(address _agent, bool _status) public onlyOwner {\r\n    assert(_agent != address(0));\r\n    Agents[_agent] = _status;\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title PlayMarket 2.0 Exchange\r\n */\r\ncontract PEX is SafeMath, Agent {\r\n    address public feeAccount;\r\n    mapping (address => mapping (address => uint)) public tokens; \r\n    mapping (address => mapping (bytes32 => bool)) public orders;\r\n    mapping (address => mapping (bytes32 => uint)) public orderFills;  \r\n  \r\n    struct whitelistToken {\r\n        bool active;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    struct Fee {\r\n        uint256 feeMake;\r\n        uint256 feeTake;\r\n    }\r\n    \r\n    mapping (address => whitelistToken) public whitelistTokens;\r\n    mapping (address => uint256) public accountTypes;\r\n    mapping (uint256 => Fee) public feeTypes;\r\n  \r\n    event Deposit(address token, address user, uint amount, uint balance);\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n    event Order(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user);\r\n    event Cancel(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, bytes32 hash);\r\n    event Trade(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, address user, address recipient, bytes32 hash, uint256 timestamp);\r\n    event WhitelistTokens(address token, bool active, uint256 timestamp);\r\n  \r\n    modifier onlyWhitelistTokens(address token, uint256 timestamp) {\r\n        assert(whitelistTokens[token].active && whitelistTokens[token].timestamp <= timestamp);\r\n        _;\r\n    }\r\n  \r\n    constructor (address feeAccount_, uint feeMake_, uint feeTake_) public {\r\n        feeAccount = feeAccount_;\r\n        feeTypes[0] = Fee(feeMake_, feeTake_);\r\n        whitelistTokens[0] = whitelistToken(true, 1);\r\n        emit WhitelistTokens(0, true, 1);\r\n    }\r\n    \r\n    function setAccountType(address user_, uint256 type_) external onlyAgent {\r\n        accountTypes[user_] = type_;\r\n    }\r\n\r\n    function getAccountType(address user_) external view returns(uint256) {\r\n        return accountTypes[user_];\r\n    }\r\n  \r\n    function setFeeType(uint256 type_ , uint256 feeMake_, uint256 feeTake_) external onlyAgent {\r\n        feeTypes[type_] = Fee(feeMake_,feeTake_);\r\n    }\r\n    \r\n    function getFeeMake(uint256 type_ ) external view returns(uint256) {\r\n        return (feeTypes[type_].feeMake);\r\n    }\r\n    \r\n    function getFeeTake(uint256 type_ ) external view returns(uint256) {\r\n        return (feeTypes[type_].feeTake);\r\n    }\r\n    \r\n    function changeFeeAccount(address feeAccount_) external onlyAgent {\r\n        require(feeAccount_ != address(0));\r\n        feeAccount = feeAccount_;\r\n    }\r\n    \r\n    function setWhitelistTokens(address token, bool active, uint256 timestamp) external onlyAgent {\r\n        whitelistTokens[token].active = active;\r\n        whitelistTokens[token].timestamp = timestamp;\r\n        emit WhitelistTokens(token, active, timestamp);\r\n    }\r\n    \r\n    /**\r\n    * deposit ETH\r\n    */\r\n    function() public payable {\r\n        require(msg.value > 0);\r\n        deposit(msg.sender);\r\n    }\r\n  \r\n    /**\r\n    * Make deposit.\r\n    *\r\n    * @param receiver The Ethereum address who make deposit\r\n    *\r\n    */\r\n    function deposit(address receiver) private {\r\n        tokens[0][receiver] = safeAdd(tokens[0][receiver], msg.value);\r\n        emit Deposit(0, receiver, msg.value, tokens[0][receiver]);\r\n    }\r\n  \r\n    /**\r\n    * Withdraw deposit.\r\n    *\r\n    * @param amount Withdraw amount\r\n    *\r\n    */\r\n    function withdraw(uint amount) external {\r\n        require(tokens[0][msg.sender] >= amount);\r\n        tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\r\n        msg.sender.transfer(amount);\r\n        emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n    }\r\n  \r\n    /**\r\n    * Deposit token.\r\n    *\r\n    * @param token Token address\r\n    * @param amount Deposit amount\r\n    *\r\n    */\r\n    function depositToken(address token, uint amount) external onlyWhitelistTokens(token, block.timestamp) {\r\n        require(token != address(0));\r\n        require(ERC20I(token).transferFrom(msg.sender, this, amount));\r\n        tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    /**\r\n    * tokenFallback ERC223.\r\n    *\r\n    * @param owner owner token\r\n    * @param amount Deposit amount\r\n    * @param data payload  \r\n    *\r\n    */\r\n    function tokenFallback(address owner, uint256 amount, bytes data) external onlyWhitelistTokens(msg.sender, block.timestamp) returns (bool success) {\r\n        require(data.length == 0);\r\n        tokens[msg.sender][owner] = safeAdd(tokens[msg.sender][owner], amount);\r\n        emit Deposit(msg.sender, owner, amount, tokens[msg.sender][owner]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * Withdraw token.\r\n    *\r\n    * @param token Token address\r\n    * @param amount Withdraw amount\r\n    *\r\n    */\r\n    function withdrawToken(address token, uint amount) external {\r\n        require(token != address(0));\r\n        require(tokens[token][msg.sender] >= amount);\r\n        tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\r\n        require(ERC20I(token).transfer(msg.sender, amount));\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n  \r\n    function balanceOf(address token, address user) external view returns (uint) {\r\n        return tokens[token][user];\r\n    }\r\n  \r\n    function order(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce) external {\r\n        bytes32 hash = keccak256(abi.encodePacked(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, msg.sender));\r\n        orders[msg.sender][hash] = true;\r\n        emit Order(tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, msg.sender);\r\n    }\r\n  \r\n    function trade(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) external {\r\n        bytes32 hash = keccak256(abi.encodePacked(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user));\r\n        if (!(\r\n            (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) &&\r\n            block.timestamp <= expires &&\r\n            safeAdd(orderFills[user][hash], amount) <= amountBuy\r\n        )) revert();\r\n        tradeBalances(tokenBuy, amountBuy, tokenSell, amountSell, user, amount);\r\n        orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\r\n        emit Trade(tokenBuy, amount, tokenSell, amountSell * amount / amountBuy, user, msg.sender, hash, block.timestamp);\r\n    }\r\n\r\n    function tradeBalances(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, address user, uint amount) private {\r\n        uint feeMakeXfer = safeMul(amount, feeTypes[accountTypes[user]].feeMake) / (10**18);\r\n        uint feeTakeXfer = safeMul(amount, feeTypes[accountTypes[msg.sender]].feeTake) / (10**18);\r\n        tokens[tokenBuy][msg.sender] = safeSub(tokens[tokenBuy][msg.sender], safeAdd(amount, feeTakeXfer));\r\n        tokens[tokenBuy][user] = safeAdd(tokens[tokenBuy][user], safeSub(amount, feeMakeXfer));\r\n        tokens[tokenBuy][feeAccount] = safeAdd(tokens[tokenBuy][feeAccount], safeAdd(feeMakeXfer, feeTakeXfer));\r\n        tokens[tokenSell][user] = safeSub(tokens[tokenSell][user], safeMul(amountSell, amount) / amountBuy);\r\n        tokens[tokenSell][msg.sender] = safeAdd(tokens[tokenSell][msg.sender], safeMul(amountSell, amount) / amountBuy);\r\n    }\r\n  \r\n    function cancelOrder(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 hash = keccak256(abi.encodePacked(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, msg.sender));\r\n        if (!(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == msg.sender)) revert();\r\n        orderFills[msg.sender][hash] = amountBuy;\r\n        emit Cancel(tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, msg.sender, v, r, s, hash);\r\n    }\r\n  \r\n    function testTrade(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) external view returns(bool) {\r\n        if (!(\r\n            tokens[tokenBuy][sender] >= amount &&\r\n            availableVolume(tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user, v, r, s) >= amount\r\n        )) return false;\r\n        return true;\r\n    }\r\n\r\n    function availableVolume(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\r\n        bytes32 hash = keccak256(abi.encodePacked(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user));\r\n        if (!(\r\n            (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) &&\r\n            block.timestamp <= expires\r\n        )) return 0;\r\n        uint available1 = safeSub(amountBuy, orderFills[user][hash]);\r\n        uint available2 = safeMul(tokens[tokenSell][user], amountBuy) / amountSell;\r\n        if (available1<available2) return available1;\r\n        return available2;\r\n    }\r\n\r\n    function amountFilled(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user) external view returns(uint) {\r\n        bytes32 hash = keccak256(abi.encodePacked(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user));\r\n        return orderFills[user][hash];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTokens\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"getFeeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setWhitelistTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getAccountType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"setAccountType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"type_\",\"type\":\"uint256\"},{\"name\":\"feeMake_\",\"type\":\"uint256\"},{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"name\":\"setFeeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTypes\",\"outputs\":[{\"name\":\"feeMake\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"getFeeMake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"feeMake_\",\"type\":\"uint256\"},{\"name\":\"feeTake_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WhitelistTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PEX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005806ddcc0e2614376832a936382f28b705d3b4d900000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000071afd498d0000","Library":"","SwarmSource":"bzzr://8f2c76b44b195ee0ebf2515af8b912b24f5c81b90605de6bf4c99b64a7437358"}]}