{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function transfer(address, uint256) public returns (bool);\r\n}\r\n\r\ncontract Gold is ERC20 {}\r\n\r\n\r\ncontract GoldMarketplaceStorage is Upgradable {\r\n    using SafeMath256 for uint256;\r\n\r\n    Gold goldTokens;\r\n\r\n    struct Order {\r\n        address user;\r\n        uint256 price;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping (address => uint256) public userToSellOrderIndex;\r\n    mapping (address => uint256) public userToBuyOrderIndex;\r\n\r\n    Order[] public sellOrders;\r\n    Order[] public buyOrders;\r\n\r\n    constructor() public {\r\n        sellOrders.length = 1;\r\n        buyOrders.length = 1;\r\n    }\r\n\r\n    function _ordersShouldExist(uint256 _amount) internal pure {\r\n        require(_amount > 1, \"no orders\"); // take a look at the constructor\r\n    }\r\n\r\n    function _orderShouldNotExist(uint256 _index) internal pure {\r\n        require(_index == 0, \"order already exists\");\r\n    }\r\n\r\n    function _orderShouldExist(uint256 _index) internal pure {\r\n        require(_index != 0, \"order does not exist\");\r\n    }\r\n\r\n    function _sellOrderShouldExist(address _user) internal view {\r\n        _orderShouldExist(userToSellOrderIndex[_user]);\r\n    }\r\n\r\n    function _buyOrderShouldExist(address _user) internal view {\r\n        _orderShouldExist(userToBuyOrderIndex[_user]);\r\n    }\r\n\r\n    function transferGold(address _to, uint256 _value) external onlyController {\r\n        goldTokens.transfer(_to, _value);\r\n    }\r\n\r\n    function transferEth(address _to, uint256 _value) external onlyController {\r\n        _to.transfer(_value);\r\n    }\r\n\r\n    // SELL\r\n\r\n    function createSellOrder(\r\n        address _user,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _orderShouldNotExist(userToSellOrderIndex[_user]);\r\n\r\n        Order memory _order = Order(_user, _price, _amount);\r\n        userToSellOrderIndex[_user] = sellOrders.length;\r\n        sellOrders.push(_order);\r\n    }\r\n\r\n    function cancelSellOrder(\r\n        address _user\r\n    ) external onlyController {\r\n        _sellOrderShouldExist(_user);\r\n        _ordersShouldExist(sellOrders.length);\r\n\r\n        uint256 _orderIndex = userToSellOrderIndex[_user];\r\n\r\n        uint256 _lastOrderIndex = sellOrders.length.sub(1);\r\n        Order memory _lastOrder = sellOrders[_lastOrderIndex];\r\n\r\n        userToSellOrderIndex[_lastOrder.user] = _orderIndex;\r\n        sellOrders[_orderIndex] = _lastOrder;\r\n\r\n        sellOrders.length--;\r\n        delete userToSellOrderIndex[_user];\r\n    }\r\n\r\n    function updateSellOrder(\r\n        address _user,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _sellOrderShouldExist(_user);\r\n        uint256 _index = userToSellOrderIndex[_user];\r\n        sellOrders[_index].price = _price;\r\n        sellOrders[_index].amount = _amount;\r\n    }\r\n\r\n    // BUY\r\n\r\n    function () external payable onlyController {}\r\n\r\n    function createBuyOrder(\r\n        address _user,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _orderShouldNotExist(userToBuyOrderIndex[_user]);\r\n\r\n        Order memory _order = Order(_user, _price, _amount);\r\n        userToBuyOrderIndex[_user] = buyOrders.length;\r\n        buyOrders.push(_order);\r\n    }\r\n\r\n    function cancelBuyOrder(address _user) external onlyController {\r\n        _buyOrderShouldExist(_user);\r\n        _ordersShouldExist(buyOrders.length);\r\n\r\n        uint256 _orderIndex = userToBuyOrderIndex[_user];\r\n\r\n        uint256 _lastOrderIndex = buyOrders.length.sub(1);\r\n        Order memory _lastOrder = buyOrders[_lastOrderIndex];\r\n\r\n        userToBuyOrderIndex[_lastOrder.user] = _orderIndex;\r\n        buyOrders[_orderIndex] = _lastOrder;\r\n\r\n        buyOrders.length--;\r\n        delete userToBuyOrderIndex[_user];\r\n    }\r\n\r\n    function updateBuyOrder(\r\n        address _user,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _buyOrderShouldExist(_user);\r\n        uint256 _index = userToBuyOrderIndex[_user];\r\n        buyOrders[_index].price = _price;\r\n        buyOrders[_index].amount = _amount;\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    function orderOfSeller(\r\n        address _user\r\n    ) external view returns (\r\n        uint256 index,\r\n        address user,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) {\r\n        _sellOrderShouldExist(_user);\r\n        index = userToSellOrderIndex[_user];\r\n        Order memory order = sellOrders[index];\r\n        return (\r\n            index,\r\n            order.user,\r\n            order.price,\r\n            order.amount\r\n        );\r\n    }\r\n\r\n    function orderOfBuyer(\r\n        address _user\r\n    ) external view returns (\r\n        uint256 index,\r\n        address user,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) {\r\n        _buyOrderShouldExist(_user);\r\n        index = userToBuyOrderIndex[_user];\r\n        Order memory order = buyOrders[index];\r\n        return (\r\n            index,\r\n            order.user,\r\n            order.price,\r\n            order.amount\r\n        );\r\n    }\r\n\r\n    function sellOrdersAmount() external view returns (uint256) {\r\n        return sellOrders.length;\r\n    }\r\n\r\n    function buyOrdersAmount() external view returns (uint256) {\r\n        return buyOrders.length;\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        goldTokens = Gold(_newDependencies[0]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToBuyOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToSellOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferGold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOrders\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOrdersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOrdersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOrders\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"orderOfSeller\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"orderOfBuyer\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GoldMarketplaceStorage","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e2fbb1883a9600f5ac3196d9433696b7096e692028fde6e4cbc07f1bc7a8214b"}]}