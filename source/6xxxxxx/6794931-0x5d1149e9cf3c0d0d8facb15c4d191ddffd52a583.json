{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/MTMarketplace.sol\r\n\r\ncontract TVCrowdsale {\r\n    uint256 public currentRate;\r\n    function buyTokens(address _beneficiary) public payable;\r\n}\r\n\r\ncontract TVToken {\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function safeTransfer(address _to, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract MTMarketplace is Ownable {\r\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n    address public wallet;\r\n    uint256 public fee_percentage;\r\n    ERC721Basic public token;\r\n    address public manager;\r\n    address internal checkAndBuySender;\r\n    address public TVTokenAddress;\r\n    address public TVCrowdsaleAddress;\r\n    bytes4 constant TOKEN_RECEIVED = bytes4(keccak256(\"onTokenReceived(address,uint256,bytes)\"));\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(msg.sender == owner || manager == msg.sender);\r\n        _;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public priceList;\r\n    mapping(uint256 => address) public holderList;\r\n\r\n    event Stored(uint256 indexed id, uint256 price, address seller);\r\n    event Cancelled(uint256 indexed id, address seller);\r\n    event Sold(uint256 indexed id, uint256 price, address seller, address buyer);\r\n\r\n    event TokenChanged(address old_token, address new_token);\r\n    event WalletChanged(address old_wallet, address new_wallet);\r\n    event FeeChanged(uint256 old_fee, uint256 new_fee);\r\n\r\n    constructor(\r\n        address _TVTokenAddress,\r\n        address _TVCrowdsaleAddress,\r\n        address _token,\r\n        address _wallet,\r\n        address _manager,\r\n        uint _fee_percentage\r\n    ) public {\r\n        TVTokenAddress = _TVTokenAddress;\r\n        TVCrowdsaleAddress = _TVCrowdsaleAddress;\r\n        token = ERC721Basic(_token);\r\n        wallet = _wallet;\r\n        fee_percentage = _fee_percentage;\r\n        manager = _manager;\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwnerOrManager {\r\n        address old = token;\r\n        token = ERC721Basic(_token);\r\n        emit TokenChanged(old, token);\r\n    }\r\n\r\n    function setWallet(address _wallet) public onlyOwnerOrManager {\r\n        address old = wallet;\r\n        wallet = _wallet;\r\n        emit WalletChanged(old, wallet);\r\n    }\r\n\r\n    function changeFeePercentage(uint256 _percentage) public onlyOwnerOrManager {\r\n        uint256 old = fee_percentage;\r\n        fee_percentage = _percentage;\r\n        emit FeeChanged(old, fee_percentage);\r\n    }\r\n\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4) {\r\n        require(msg.sender == address(token));\r\n\r\n        uint256 _price = uint256(convertBytesToBytes32(_data));\r\n\r\n        require(_price > 0);\r\n\r\n        priceList[_tokenId] = _price;\r\n        holderList[_tokenId] = _from;\r\n\r\n        emit Stored(_tokenId, _price, _from);\r\n\r\n        return ERC721_RECEIVED;\r\n    }\r\n\r\n    function onTokenReceived(address _from, uint256 _value, bytes _data) public returns (bytes4) {\r\n        require(msg.sender == TVTokenAddress);\r\n        uint _id = uint256(convertBytesToBytes32(_data));\r\n        require(priceList[_id] == _value);\r\n\r\n        address oldHolder = holderList[_id];\r\n        uint256 price = priceList[_id];\r\n\r\n        uint256 toWallet = price / 100 * fee_percentage;\r\n        uint256 toHolder = price - toWallet;\r\n\r\n        holderList[_id] = 0x0;\r\n        priceList[_id] = 0;\r\n\r\n        _from = this == _from ? checkAndBuySender : _from;\r\n        checkAndBuySender = address(0);\r\n        token.safeTransferFrom(this, _from, _id);\r\n\r\n        TVToken(TVTokenAddress).transfer(wallet, toWallet);\r\n        TVToken(TVTokenAddress).transfer(oldHolder, toHolder);\r\n\r\n        emit Sold(_id, price, oldHolder, msg.sender);\r\n        return TOKEN_RECEIVED;\r\n    }\r\n\r\n    function cancel(uint256 _id) public returns (bool) {\r\n        require(holderList[_id] == msg.sender);\r\n\r\n        holderList[_id] = 0x0;\r\n        priceList[_id] = 0;\r\n\r\n        token.safeTransferFrom(this, msg.sender, _id);\r\n\r\n        emit Cancelled(_id, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeAndBuy(uint256 _id) public payable returns (bool) {\r\n        uint rate = TVCrowdsale(TVCrowdsaleAddress).currentRate();\r\n        uint priceWei = priceList[_id] / rate;\r\n        require(priceWei == msg.value);\r\n\r\n        TVCrowdsale(TVCrowdsaleAddress).buyTokens.value(msg.value)(this);\r\n        bytes memory data = toBytes(_id);\r\n        checkAndBuySender = msg.sender;\r\n        TVToken(TVTokenAddress).safeTransfer(this, priceList[_id], data);\r\n        return true;\r\n    }\r\n\r\n    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVTokenAddress = newAddress;\r\n    }\r\n\r\n    function changeTVCrowdsaleAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVCrowdsaleAddress = newAddress;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    function convertBytesToBytes32(bytes inBytes) internal pure returns (bytes32 out) {\r\n        if (inBytes.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            out := mload(add(inBytes, 32))\r\n        }\r\n    }\r\n\r\n    function toBytes(uint256 x) internal pure returns (bytes b) {\r\n        b = new bytes(32);\r\n        assembly {mstore(add(b, 32), x)}\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"changeAndBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVCrowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changeFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_TVTokenAddress\",\"type\":\"address\"},{\"name\":\"_TVCrowdsaleAddress\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_fee_percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Stored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"new_token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"new_wallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MTMarketplace","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f3e693175db47264c99eca0f1c1c4a2c1aed3bd7000000000000000000000000aae1be740222fb3f1125a7326fce947bbdb62b7e0000000000000000000000004a152c146ec60251c50817e2cff25700d6b711af000000000000000000000000eda8256f424eacbb9b2a6513de98d819e7496fb10000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b8000000000000000000000000000000000000000000000000000000000000000a","Library":"","SwarmSource":"bzzr://2b134d6c0748204b58069c5bee272f1ed374290e2dd86f125e073e5b3fc0ef60"}]}