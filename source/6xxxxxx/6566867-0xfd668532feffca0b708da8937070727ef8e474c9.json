{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable \r\n\r\n{\r\n\r\n  address public owner;\r\n\r\n \r\n\r\n  constructor(address _owner) public \r\n\r\n  {\r\n\r\n    owner = _owner;\r\n\r\n  }\r\n\r\n \r\n\r\n  modifier onlyOwner() \r\n\r\n  {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferOwnership(address newOwner) onlyOwner \r\n\r\n  {\r\n\r\n    require(newOwner != address(0));      \r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract LoanLogic is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct LoanInfo {\r\n\r\n\t    uint256 id; \r\n\r\n\t\taddress tokenPledge;\r\n\r\n\t\taddress tokenBorrow;\r\n\r\n\t\taddress borrower;\r\n\r\n\t\taddress lender;\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tuint256 amountPledge;\r\n\r\n\t\tuint256 amountInterest;\r\n\r\n\t\tuint256 periodDays;\r\n\r\n\t\tuint256 timeLoan;\r\n\r\n\t\tCoinExchangeRatio cerForceClose;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tstruct CoinExchangeRatio {\r\n\r\n\t\tuint256 num;\r\n\r\n\t\tuint256 denom;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\taddress public contractMarketData;\r\n\r\n\taddress public contractBiLinkLoan;\r\n\r\n\tuint256 public incrementalId;\r\n\r\n\tmapping (address => uint256[]) public borrower2LoanInfoId;\r\n\r\n\tmapping (address => uint256[]) public lender2LoanInfoId;\r\n\r\n\tmapping (uint256 => LoanInfo) public id2LoanInfo;\r\n\r\n\tuint256[] allLoanId;\r\n\r\n\tuint256 public minTradeAmountOfEth;\r\n\r\n\r\n\r\n\tevent OnAddMargin(uint256 id, uint256 amount, address borrower, uint256 timestamp);\r\n\r\n\t\r\n\r\n\tconstructor (address _owner, address _contractMarketData, uint256 _minTradeAmountOfEth) public \r\n\r\n\t\tOwnable(_owner) {\r\n\r\n\t\tincrementalId= 0;\r\n\r\n\t\tminTradeAmountOfEth= _minTradeAmountOfEth;\r\n\r\n\t\tcontractMarketData= _contractMarketData;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setMinTradeAmountOfETH(uint256 _minTradeAmountOfEth) public onlyOwner {\r\n\r\n\t\tminTradeAmountOfEth= _minTradeAmountOfEth;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction setBiLinkLoanContract(address _contractBiLinkLoan) public onlyOwner {\r\n\r\n\t\tcontractBiLinkLoan= _contractBiLinkLoan;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getLoanDataPart(uint256 _id) public constant returns (address, address, address, address) {\r\n\r\n\t\tLoanInfo memory _li= id2LoanInfo[_id];\r\n\r\n\t\treturn(_li.tokenPledge, _li.tokenBorrow, _li.borrower, _li.lender);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getLoanDataFull(uint256 _id) public constant returns (address, address, address, address,uint256,uint256,uint256,uint256,uint256,uint256,uint256) {\r\n\r\n\t\tLoanInfo memory _li= id2LoanInfo[_id];\r\n\r\n\t\treturn(_li.tokenPledge, _li.tokenBorrow, _li.borrower, _li.lender, _li.amount, _li.amountPledge, _li.amountInterest, _li.periodDays, _li.timeLoan, _li.cerForceClose.num,_li.cerForceClose.denom);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getTotalPledgeAmount(address _token, address _account) public constant returns (uint256) {\r\n\r\n\t\tuint256 _amountPledge= 0; \r\n\r\n\t\tfor(uint256 i= 0; i<borrower2LoanInfoId[_account].length;i++) {\r\n\r\n\t\t\tLoanInfo memory _li= id2LoanInfo[borrower2LoanInfoId[_account][i]];\r\n\r\n\t\t\tif(_li.borrower== _account&& _token== _li.tokenPledge) {\r\n\r\n\t\t\t\t_amountPledge= _amountPledge.add(_li.amountPledge);\r\n\r\n\t\t\t\t_amountPledge= _amountPledge.add(_li.amountInterest);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\treturn _amountPledge; \r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getTotalBorrowAmount(address _token) public constant returns (uint256) {\r\n\r\n\t\tuint256 _amountBorrow= 0; \r\n\r\n\t\tfor(uint256 i= 0; i< allLoanId.length; i++) {\r\n\r\n\t\t\tLoanInfo memory _li= id2LoanInfo[allLoanId[i]];\r\n\r\n\t\t\tif(_token== _li.tokenBorrow) {\r\n\r\n\t\t\t\t_amountBorrow= _amountBorrow.add(_li.amount);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\treturn _amountBorrow; \r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction hasUnpaidLoan(address _account) public constant returns (bool) {\r\n\r\n\t\treturn (borrower2LoanInfoId[_account].length!= 0|| lender2LoanInfoId[_account].length!= 0 );\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getUnpaiedLoanInfo(address _tokenPledge, address _tokenBorrow, address _account, bool _borrowOrLend) public constant returns (uint256[]) {\r\n\r\n\t    uint256[] memory _arrId= new uint256[]((_borrowOrLend? borrower2LoanInfoId[_account].length: lender2LoanInfoId[_account].length));\r\n\r\n\t\tuint256 _count= 0;\r\n\r\n\r\n\r\n\t\tif(_borrowOrLend) {\r\n\r\n\t\t    for(uint256 i= 0; i<borrower2LoanInfoId[_account].length;i++) {\r\n\r\n\t\t\t    if(id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenBorrow== _tokenBorrow&& id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenPledge== _tokenPledge)\r\n\r\n\t\t\t\t\t_arrId[_count++]= borrower2LoanInfoId[_account][i];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t    for(i= 0; i<lender2LoanInfoId[_account].length;i++) {\r\n\r\n\t\t\t    if(id2LoanInfo[lender2LoanInfoId[_account][i]].tokenBorrow== _tokenBorrow&& id2LoanInfo[lender2LoanInfoId[_account][i]].tokenPledge== _tokenPledge)\r\n\r\n\t\t\t\t\t_arrId[_count++]= lender2LoanInfoId[_account][i];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn _arrId;\r\n\r\n\t}\r\n\r\n\t \r\n\r\n\tfunction getPledgeAmount(address _tokenPledge, address _tokenBorrow, uint256 _amount,uint16 _ratioPledge) public constant returns (uint256) {\r\n\r\n\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_tokenPledge, _tokenBorrow);\r\n\r\n\t\tif(_num!= 0)\r\n\r\n\t\t\treturn _num.mul(_amount).mul(_ratioPledge).div(_denom).div(100);\r\n\r\n\t\telse\r\n\r\n\t\t\treturn 0;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction updateDataAfterTrade(address _tokenPledge, address _tokenBorrow, address _borrower, address _lender,\r\n\r\n\t\tuint256 _amount, uint256 _amountPledge, uint256 _amountInterest, uint256 _periodDays) public returns (bool) {\r\n\r\n\t\trequire(msg.sender== contractBiLinkLoan);\r\n\r\n\t\tif(checkMinAmountRequirement(_tokenPledge, _tokenBorrow, _amount)== false)\r\n\r\n\t\t\treturn false;\r\n\r\n\r\n\r\n\t\tCoinExchangeRatio memory _cerForceCloseLine= getForceCloseLine(_tokenPledge, _tokenBorrow, _amountPledge, _amount);\r\n\r\n\r\n\r\n\t\tincrementalId= incrementalId.add(1);\r\n\r\n\t\tLoanInfo memory _li= LoanInfo({id:incrementalId, tokenPledge: _tokenPledge, tokenBorrow: _tokenBorrow, borrower: _borrower, lender: _lender\r\n\r\n\t\t    , amount: _amount, amountPledge: _amountPledge, amountInterest: _amountInterest, periodDays: _periodDays, timeLoan: now, cerForceClose:_cerForceCloseLine});\r\n\r\n\t\tborrower2LoanInfoId[_borrower].push(incrementalId);\r\n\r\n\t\tlender2LoanInfoId[_lender].push(incrementalId);\r\n\r\n\r\n\r\n\t\tid2LoanInfo[incrementalId]= _li;\r\n\r\n\t\tallLoanId.push(incrementalId);\r\n\r\n\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction checkMinAmountRequirement(address _tokenPledge, address _tokenBorrow, uint256 _amount) private returns (bool) {\r\n\r\n\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_tokenPledge, _tokenBorrow);\r\n\r\n\t\tif((_amount.mul(_num).div(_denom))< minTradeAmountOfEth)\r\n\r\n\t\t\treturn false;\r\n\r\n\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getForceCloseLine(address _tokenPledge, address _tokenBorrow, uint256 _amountPledge, uint256 _amount) private returns (CoinExchangeRatio _cerForceCloseLine) {\r\n\r\n\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_tokenPledge, _tokenBorrow);\r\n\r\n\t\tuint256 _ratioPledge= _amountPledge.mul(100).mul(_denom).div(_amount).div(_num);\r\n\r\n\t\treturn CoinExchangeRatio({num:_num* _ratioPledge, denom:_denom* ((_ratioPledge- 100)/ 4+ 100)});\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction updateDataAfterRepay(uint256 _id, uint256 _availableAmountOfBorrower) public returns (uint256, uint256, uint256, uint256, uint256) {\r\n\r\n\t\trequire(msg.sender== contractBiLinkLoan);\r\n\r\n\t\tLoanInfo memory _li= id2LoanInfo[_id];\r\n\r\n\t\t\r\n\r\n\t\tdeleteLoan(_li);\r\n\r\n\r\n\r\n\t\tif(_availableAmountOfBorrower>= _li.amount) {\r\n\r\n\t\t\treturn(_li.amount, _li.amountInterest, getActualInterest(_li), 0, _li.amountPledge);\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t\treturn(_li.amount, _li.amountInterest, getActualInterest(_li), (_li.amount- _availableAmountOfBorrower), _li.amountPledge);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction deleteLoan (LoanInfo _li) private {\r\n\r\n\t\tuint256 _indexOne;\r\n\r\n\t\tfor(_indexOne= 0; _indexOne< borrower2LoanInfoId[_li.borrower].length; _indexOne++) {\r\n\r\n\t\t    if(borrower2LoanInfoId[_li.borrower][_indexOne]== _li.id) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t    }\r\n\r\n\t\t}\r\n\r\n\t\t \r\n\r\n\t\tuint256 _indexTwo;\r\n\r\n\t\tfor(_indexTwo= 0; _indexTwo< lender2LoanInfoId[_li.lender].length; _indexTwo++) {\r\n\r\n\t\t    if(lender2LoanInfoId[_li.lender][_indexTwo]== _li.id) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t    }\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\tfor(uint256 i= 0; i< allLoanId.length; i++) {\r\n\r\n\t\t\tif(allLoanId[i]== _li.id) {\r\n\r\n\t\t\t\tif(i< allLoanId.length- 1&& allLoanId.length> 1)\r\n\r\n\t\t\t\t\tallLoanId[i]= allLoanId[allLoanId.length- 1];\r\n\r\n\t\t\t\tdelete allLoanId[allLoanId.length- 1];\r\n\r\n\t\t\t\tallLoanId.length--;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\tdelete(id2LoanInfo[_li.id]);\r\n\r\n\t\t\r\n\r\n\t\tif(_indexOne< borrower2LoanInfoId[_li.borrower].length- 1&& borrower2LoanInfoId[_li.borrower].length> 1)\r\n\r\n\t\t\tborrower2LoanInfoId[_li.borrower][_indexOne]= borrower2LoanInfoId[_li.borrower][borrower2LoanInfoId[_li.borrower].length- 1];\r\n\r\n\t\tdelete borrower2LoanInfoId[_li.borrower][borrower2LoanInfoId[_li.borrower].length- 1];\r\n\r\n\t\tborrower2LoanInfoId[_li.borrower].length--;\r\n\r\n\t\t \r\n\r\n\t\tif(_indexTwo< lender2LoanInfoId[_li.lender].length- 1&& lender2LoanInfoId[_li.lender].length> 1)\r\n\r\n\t\t\tlender2LoanInfoId[_li.lender][_indexTwo]= lender2LoanInfoId[_li.lender][lender2LoanInfoId[_li.lender].length- 1];\r\n\r\n\t\tdelete lender2LoanInfoId[_li.lender][lender2LoanInfoId[_li.lender].length- 1];\r\n\r\n\t\tlender2LoanInfoId[_li.lender].length--;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction getActualInterest(LoanInfo _li) private returns (uint256) {\r\n\r\n\t\tuint256 _elapsedDays= (now.sub(_li.timeLoan))/ (24* 3600)+ 1;\r\n\r\n\t\tif(_elapsedDays> _li.periodDays)\r\n\r\n\t\t\t_elapsedDays= _li.periodDays;\r\n\r\n\r\n\r\n\t\treturn _li.amountInterest.mul(_elapsedDays).div(_li.periodDays);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction checkForceClose() public constant returns(uint256[]) {\r\n\r\n\t\tuint256[] memory _arrId= new uint256[](allLoanId.length);\r\n\r\n\t\tuint256 _count= 0;\r\n\r\n\t\tfor(uint256 i= 0; i< allLoanId.length; i++) {\r\n\r\n\t\t\tif(needForceClose(allLoanId[i]))\r\n\r\n\t\t\t\t_arrId[_count++]= allLoanId[i];\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn _arrId;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction needForceClose(uint256 _id) public constant returns (bool) {\r\n\r\n\t\tLoanInfo memory _li= id2LoanInfo[_id];\r\n\r\n\t\tuint256 _totalDays= (now.sub(_li.timeLoan))/ (24* 3600);\r\n\r\n\t\tif(_totalDays>= _li.periodDays) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_li.tokenPledge, _li.tokenBorrow);\r\n\r\n\t\t\tif(_num* _li.cerForceClose.denom> _denom* _li.cerForceClose.num) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction addMargin(uint256 _id, uint256 _amount) public {\r\n\r\n\t\tLoanInfo memory _li= id2LoanInfo[_id];\r\n\r\n\t\trequire(_amount> 0&& _li.borrower!= address(0)&& _li.borrower==msg.sender);\r\n\r\n\r\n\r\n\t\tid2LoanInfo[_id].amountPledge= id2LoanInfo[_id].amountPledge.add(_amount);\r\n\r\n\t\temit OnAddMargin(_id, _amount, _li.borrower, now);\r\n\r\n\t}\r\n\r\n}\r\n\r\ncontract IMarketData {\r\n\r\n\tfunction getTokenExchangeRatio(address _tokenNum, address _tokenDenom) public returns (uint256 num, uint256 denom);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    require(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Adds two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    require(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contractMarketData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_availableAmountOfBorrower\",\"type\":\"uint256\"}],\"name\":\"updateDataAfterRepay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"needForceClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalBorrowAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTradeAmountOfEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"id2LoanInfo\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tokenPledge\",\"type\":\"address\"},{\"name\":\"tokenBorrow\",\"type\":\"address\"},{\"name\":\"borrower\",\"type\":\"address\"},{\"name\":\"lender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountPledge\",\"type\":\"uint256\"},{\"name\":\"amountInterest\",\"type\":\"uint256\"},{\"name\":\"periodDays\",\"type\":\"uint256\"},{\"name\":\"timeLoan\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"denom\",\"type\":\"uint256\"}],\"name\":\"cerForceClose\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minTradeAmountOfEth\",\"type\":\"uint256\"}],\"name\":\"setMinTradeAmountOfETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLoanDataPart\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasUnpaidLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkForceClose\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lender2LoanInfoId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenPledge\",\"type\":\"address\"},{\"name\":\"_tokenBorrow\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_ratioPledge\",\"type\":\"uint16\"}],\"name\":\"getPledgeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBiLinkLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractBiLinkLoan\",\"type\":\"address\"}],\"name\":\"setBiLinkLoanContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalPledgeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incrementalId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrower2LoanInfoId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPledge\",\"type\":\"address\"},{\"name\":\"_tokenBorrow\",\"type\":\"address\"},{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_lender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_amountPledge\",\"type\":\"uint256\"},{\"name\":\"_amountInterest\",\"type\":\"uint256\"},{\"name\":\"_periodDays\",\"type\":\"uint256\"}],\"name\":\"updateDataAfterTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLoanDataFull\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenPledge\",\"type\":\"address\"},{\"name\":\"_tokenBorrow\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_borrowOrLend\",\"type\":\"bool\"}],\"name\":\"getUnpaiedLoanInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_contractMarketData\",\"type\":\"address\"},{\"name\":\"_minTradeAmountOfEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnAddMargin\",\"type\":\"event\"}]","ContractName":"LoanLogic","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4e3627034a97b75d899ee7525d446bf2d42ad66000000000000000000000000611ce695290729805e138c9c14dbddf132e76de3000000000000000000000000000000000000000000000000002386f26fc10000","Library":"","SwarmSource":"bzzr://d12d65786bdb4e9d37a1716a887ada32b56289c66b4fb0bb2d12090471984bde"}]}