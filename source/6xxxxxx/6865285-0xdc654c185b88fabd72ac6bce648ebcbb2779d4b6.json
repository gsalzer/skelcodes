{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract EIP20Interface {\r\n\r\n    uint256 public totalSupply;\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }   \r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      // uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract CommunicationCreatesValueToken is EIP20Interface {\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public freezeOf;\r\n    mapping(address => mapping(address=> uint256)) allowed;\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\t\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\t\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    constructor (\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply\r\n    ) public {\r\n        balanceOf[msg.sender] = _totalSupply;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n    }   \r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(_to != address(0));\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(_to != address(0));\r\n        require(balanceOf[_from] >= _value && allowance >= _value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function freeze(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n        require(_value>0);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);                                // Updates totalSupply\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function unfreeze(uint256 _value) public returns (bool success) {\r\n        require(freezeOf[msg.sender] >= _value);            // Check if the sender has enough\r\n\t    require(_value>0);\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);                      // Subtract from the sender\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }   \r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balanceOf[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balanceOf[_who] = balanceOf[_who].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract CommunicationCreatesValueTokenLock {\r\n  // ERC20 basic token contract being held\r\n    CommunicationCreatesValueToken public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n    uint256 public openingTime;\r\n    \r\n    uint256 public totalFreeze;\r\n\r\n    mapping(uint => uint) public unfreezed;\r\n\r\n    constructor(\r\n        CommunicationCreatesValueToken _token,\r\n        address _beneficiary,\r\n        uint256 _openingTime,\r\n        uint256 _totalFreeze\r\n    )\r\n        public\r\n    {\r\n        require(_openingTime > block.timestamp);\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        openingTime = _openingTime;\r\n        totalFreeze = _totalFreeze;\r\n    }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n    function release() public {\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 passTime = nowTime - openingTime;\r\n        uint256 weeksnow = passTime/2419200;\r\n        require(unfreezed[weeksnow] != 1, \"This week we have unfreeze part of the token\");\r\n        uint256 amount = getPartReleaseAmount();\r\n        require(amount > 0, \"the token has finished released\");\r\n        unfreezed[weeksnow] = 1;\r\n        token.transfer(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    *@dev getMonthRelease is the function to get todays month realse\r\n    *\r\n    */\r\n    function getPartReleaseAmount() public view returns(uint256){\r\n        uint stage = getStage();\r\n        for( uint i = 0; i <= stage; i++ ) {\r\n            uint256 stageAmount = totalFreeze/2;\r\n        }\r\n        uint256 amount = stageAmount*2419200/126230400;\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n    *@dev getStage is the function to get which stage the lock is on, four year will change the stage\r\n    *@return uint256\r\n    */\r\n    function getStage() public view returns(uint256) {\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 passTime = nowTime - openingTime;\r\n        uint256 stage = passTime/126230400;       //stage is the lock is on, a day is 86400 seconds\r\n        return stage;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPartReleaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unfreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_totalFreeze\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CommunicationCreatesValueTokenLock","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f4ccffc1979f2ddac609159afc89529edd92c1a4000000000000000000000000ff70b6df9f9b5fd42694a6b5cd2cd094e4a9f33a000000000000000000000000000000000000000000000000000000005c104f800000000000000000000000000000000000000000169e43a85eb381aa58000000","Library":"","SwarmSource":"bzzr://754252acd87017f6395bfc9c300089c8d80f096482f3edf6d34bbb46948026b3"}]}