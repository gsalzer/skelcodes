{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: src/Token/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: src/Token/OracleOwnable.sol\r\n\r\ncontract OracleOwnable is Ownable {\r\n\r\n    address public oracle;\r\n\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracle);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOracleOrOwner() {\r\n        require(msg.sender == oracle || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOracle(address newOracle) public onlyOracleOrOwner {\r\n        if (newOracle != address(0)) {\r\n            oracle = newOracle;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: src/Token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, OracleOwnable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: src/Token/ReleasableToken.sol\r\n\r\ncontract ReleasableToken is MintableToken {\r\n    bool public released = false;\r\n\r\n    event Release();\r\n    event Burn(address, uint);\r\n\r\n    modifier isReleased () {\r\n        require(mintingFinished);\r\n        require(released);\r\n        _;\r\n    }\r\n\r\n    function release() public onlyOwner returns (bool) {\r\n        require(mintingFinished);\r\n        require(!released);\r\n        released = true;\r\n        Release();\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function burn(address _to, uint _amount) public onlyOwner {\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        balances[_to] = balances[_to].sub(_amount);\r\n        Burn(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: src/Token/StageVestingToken.sol\r\n\r\ncontract StageVestingToken is ReleasableToken {\r\n    uint256 public stageCount;\r\n    uint256 public stage;\r\n    bool public isCheckStage;\r\n\r\n    mapping(uint => mapping(address => uint256)) internal stageVesting;\r\n\r\n    function StageVestingToken () public{\r\n        stageCount = 4;\r\n        stage = 0;\r\n        isCheckStage = true;\r\n    }\r\n\r\n    function setStage(uint256 _stage) public onlyOracleOrOwner {\r\n        stage = _stage;\r\n    }\r\n\r\n    function setStageCount(uint256 _stageCount) public onlyOracleOrOwner {\r\n        stageCount = _stageCount;\r\n    }\r\n\r\n    function setIsCheckStage(bool _isCheckStage) public onlyOracleOrOwner {\r\n        isCheckStage = _isCheckStage;\r\n    }\r\n\r\n    function getHolderLimit(address _holder) view public returns (uint256){\r\n        return stageVesting[stage][_holder];\r\n    }\r\n\r\n    function canUseTokens(address _holder, uint256 _amount) view internal returns (bool){\r\n        if (!isCheckStage) {\r\n            return true;\r\n        }\r\n        return (getHolderLimit(_holder) >= _amount);\r\n    }\r\n\r\n    function addOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\r\n        require(_stage < stageCount);\r\n        stageVesting[_stage][_to] = stageVesting[_stage][_to].add(_amount);\r\n    }\r\n\r\n    function subOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\r\n        require(_stage < stageCount);\r\n        if (stageVesting[_stage][_to] >= _amount) {\r\n            stageVesting[_stage][_to] = stageVesting[_stage][_to].sub(_amount);\r\n        } else {\r\n            stageVesting[_stage][_to] = 0;\r\n        }\r\n    }\r\n\r\n    function addOnStage(address _to, uint256 _amount) internal returns (bool){\r\n        return addOnStage(_to, _amount, stage);\r\n    }\r\n\r\n    function addOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\r\n        if (!isCheckStage) {\r\n            return true;\r\n        }\r\n        for (uint256 i = _stage; i < stageCount; i++) {\r\n            addOnOneStage(_to, _amount, i);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function subOnStage(address _to, uint256 _amount) internal returns (bool){\r\n        return subOnStage(_to, _amount, stage);\r\n    }\r\n\r\n    function subOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\r\n        if (!isCheckStage) {\r\n            return true;\r\n        }\r\n\r\n        for (uint256 i = _stage; i < stageCount; i++) {\r\n            subOnOneStage(_to, _amount, i);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount, uint256 _stage) onlyOwner canMint public returns (bool) {\r\n        super.mint(_to, _amount);\r\n        addOnStage(_to, _amount, _stage);\r\n    }\r\n\r\n    function burn(address _to, uint _amount, uint256 _stage) public onlyOwner canMint{\r\n        super.burn(_to, _amount);\r\n        subOnStage(_to, _amount, _stage);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(canUseTokens(msg.sender, _value));\r\n        require(subOnStage(msg.sender, _value));\r\n        require(addOnStage(_to, _value));\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(canUseTokens(_from, _value));\r\n        require(subOnStage(_from, _value));\r\n        require(addOnStage(_to, _value));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: src/Token/MetabaseToken.sol\r\n\r\ncontract MetabaseToken is StageVestingToken {\r\n\r\n    string public constant name = \"META-Test\";\r\n    string public constant symbol = \"MT\";\r\n    uint256 public constant decimals = 18;\r\n\r\n}\r\n\r\n// File: src/Store/MetabaseCrowdSale.sol\r\n\r\ncontract MetabaseCrowdSale is OracleOwnable {\r\n    using SafeMath for uint;\r\n\r\n    MetabaseToken token;\r\n\r\n    event Transaction(address indexed beneficiary, string currency, uint currencyAmount, uint rate, uint tokenAmount, uint stage, bool isNegative);\r\n\r\n\r\n    address[] currencyInvestors;\r\n    mapping(address => bool) currencyInvestorsAddresses;\r\n\r\n    function setToken(address _token) public onlyOracleOrOwner {\r\n        token = MetabaseToken(_token);\r\n    }\r\n\r\n    function addInvestorIfNotExists(address _beneficiary) internal {\r\n        if (!currencyInvestorsAddresses[_beneficiary]) {\r\n            currencyInvestors.push(_beneficiary);\r\n        }\r\n    }\r\n\r\n    function buy(address _beneficiary, string _currency, uint _currencyAmount, uint _rate, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\r\n        addInvestorIfNotExists(_beneficiary);\r\n\r\n        token.mint(_beneficiary, _tokenAmount, _stage);\r\n\r\n        Transaction(_beneficiary, _currency, _currencyAmount, _rate, _tokenAmount, _stage, false);\r\n    }\r\n\r\n    function refund(address _beneficiary, string _currency, uint _currencyAmount, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\r\n        addInvestorIfNotExists(_beneficiary);\r\n\r\n        token.burn(_beneficiary, _tokenAmount, _stage);\r\n\r\n        Transaction(_beneficiary, _currency, _currencyAmount, 0, _tokenAmount, _stage, true);\r\n    }\r\n\r\n    function tokenTransferOwnership(address _owner) onlyOracleOrOwner public {\r\n        token.transferOwnership(_owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenTransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isNegative\",\"type\":\"bool\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MetabaseCrowdSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b00a5ae862373aa35d3501c7421fed33a8aee52e37ff0502c86988a27923cc8"}]}