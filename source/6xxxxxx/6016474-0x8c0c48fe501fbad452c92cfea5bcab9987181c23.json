{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply()public view returns(uint total_Supply);\r\n    function balanceOf(address who)public view returns(uint256);\r\n    function allowance(address owner, address spender)public view returns(uint);\r\n    function transferFrom(address from, address to, uint value)public returns(bool ok);\r\n    function approve(address spender, uint value)public returns(bool ok);\r\n    function transfer(address to, uint value)public returns(bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract OutCloud is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n        // Name of the token\r\n    string public constant name = \"OutCloud\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"OUT\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 1200000000 * 10 ** 18; // 1.2 Billion OUT Coins\r\n    address public owner;\r\n    uint256 public _price_token;  // price in cents\r\n    uint256 no_of_tokens;\r\n    uint256 total_token;\r\n    bool stopped = false;\r\n    uint256 public ico_startdate;\r\n    // uint256 public ico_enddate;\r\n    uint256 public preico_startdate;\r\n    uint256 public preico_enddate;\r\n    bool public lockstatus; \r\n    uint256 constant public ETH_DECIMALS = 10 ** 18;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    address public ethFundMain = 0xbCa409CaD1d339267af01aF0A49002E00e9BE090; // address to receive ether from smart contract\r\n    uint256 public ethreceived;\r\n    uint256 public TotalICOSupply = 400000000 * 10 ** 18;\r\n    uint public bonusCalculationFactor;\r\n    uint256 public minContribution = 10000; // 10 USD  (1 USD = 1000)\r\n    uint256 ContributionAmount;\r\n    uint dis;\r\n   \r\n \r\n    uint public priceFactor;\r\n   // mapping(address => uint256) availTokens;\r\n\r\n    enum Stages {\r\n        NOTSTARTED,\r\n        PREICO,\r\n        ICO,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n\r\n    modifier atStage(Stages _stage) {\r\n        require (stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require (msg.sender == owner);\r\n     _;\r\n    }\r\n\r\n  \r\n    constructor(uint256 EtherPriceFactor) public\r\n    {\r\n        require(EtherPriceFactor != 0);\r\n        owner = msg.sender;\r\n        balances[owner] = 500000000 * 10 ** 18;  // 500 Million given to owner\r\n        stage = Stages.NOTSTARTED;\r\n        lockstatus = true;\r\n        priceFactor = EtherPriceFactor;\r\n        emit Transfer(0, owner, balances[owner]);\r\n       \r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        require(stage != Stages.ENDED);\r\n        require(msg.value >= minContribution);\r\n        require(!stopped && msg.sender != owner);\r\n        ContributionAmount = ((msg.value).mul(priceFactor.mul(1000)));// 1USD = 1000\r\n        if (stage == Stages.PREICO && now <= preico_enddate){\r\n            \r\n             \r\n           dis= getCurrentTokenPricepreICO(ContributionAmount);\r\n           _price_token = _price_token.sub(_price_token.mul(dis).div(100));\r\n          y();\r\n\r\n    }\r\n    else  if (stage == Stages.ICO ){\r\n  \r\n          dis= getCurrentTokenPriceICO(ContributionAmount);\r\n           _price_token = _price_token.sub(_price_token.mul(dis).div(100));\r\n          y();\r\n\r\n    }\r\n    else {\r\n        revert();\r\n    }\r\n    }\r\n    \r\n   \r\n\r\n  function getCurrentTokenPricepreICO(uint256 individuallyContributedEtherInWei) private returns (uint)\r\n        {\r\n        require(individuallyContributedEtherInWei >= (minContribution.mul(ETH_DECIMALS)));\r\n        uint disc;\r\n        bonusCalculationFactor = (block.timestamp.sub(preico_startdate)).div(604800); // 1 week time period in seconds\r\n        if (bonusCalculationFactor== 0) \r\n            disc = 30;                     //30 % Discount\r\n        else if (bonusCalculationFactor == 1) \r\n            disc = 20;                     //20 % Discount\r\n        else if (bonusCalculationFactor ==2 ) \r\n            disc = 10;                      //10 % Discount\r\n        else if (bonusCalculationFactor == 3) \r\n           disc = 5;                     //5 % Discount\r\n        \r\n            \r\n            return disc;\r\n     \r\n        }\r\n        \r\n        function getCurrentTokenPriceICO(uint256 individuallyContributedEtherInWei) private returns (uint)\r\n        {\r\n        require(individuallyContributedEtherInWei >= (minContribution.mul(ETH_DECIMALS)));\r\n        uint disc;\r\n        bonusCalculationFactor = (block.timestamp.sub(ico_startdate)).div(604800); // 1 week time period in seconds\r\n        if (bonusCalculationFactor== 0) \r\n            disc = 30;                     //30 % Discount\r\n        else if (bonusCalculationFactor == 1) \r\n            disc = 20;                     //20 % Discount\r\n        else if (bonusCalculationFactor ==2 ) \r\n            disc = 10;                      //10 % Discount\r\n        else if (bonusCalculationFactor == 3) \r\n           disc = 5;                     //5 % Discount\r\n        else if (bonusCalculationFactor > 3) \r\n           disc = 0;                  //0% Discount\r\n            \r\n            return disc;\r\n     \r\n        }\r\n        \r\n         function y() private {\r\n            \r\n             no_of_tokens = ((msg.value).mul(priceFactor.mul(1000))).div(_price_token); //(1USD =1000)\r\n             ethreceived = ethreceived.add(msg.value);\r\n             balances[address(this)] = (balances[address(this)]).sub(no_of_tokens);\r\n             balances[msg.sender] = balances[msg.sender].add(no_of_tokens);\r\n             emit Transfer(address(this), msg.sender, no_of_tokens);\r\n    }\r\n\r\n   \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner  {\r\n        stopped = true;\r\n\r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner\r\n    {\r\n        stopped = false;\r\n\r\n    }\r\n    \r\n    // to change price of Ether in USD, in case price increases or decreases\r\n     function setpricefactor(uint256 newPricefactor) external onlyOwner\r\n    {\r\n        priceFactor = newPricefactor;\r\n        \r\n    }\r\n    \r\n     function setEthmainAddress(address newEthfundaddress) external onlyOwner\r\n    {\r\n        ethFundMain = newEthfundaddress;\r\n    }\r\n \r\n    \r\n     function start_PREICO() external onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n          stage = Stages.PREICO;\r\n          stopped = false;\r\n          _price_token = 100;  // 1 OUT =  10 cents (1USD = 1000)\r\n        balances[address(this)] = 300000000 * 10 ** 18 ; //300 Million in pre-ICO\r\n         preico_startdate = now;\r\n         preico_enddate = now + 28 days; //time period for preICO = 4 weeks\r\n      emit Transfer(0, address(this), balances[address(this)]);\r\n          }\r\n    \r\n    function start_ICO() external onlyOwner atStage(Stages.PREICO)\r\n      {\r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n          balances[address(this)] = balances[address(this)].add(TotalICOSupply) ; //400 Million in ICO\r\n          _price_token = 150;   // 1 OUT =  15 cents (1USD = 1000)\r\n          ico_startdate = now;\r\n        //  ico_enddate = now + 28 days; //time period for ICO = 4 weeks\r\n          emit Transfer(0, address(this), TotalICOSupply);\r\n      \r\n          }\r\n\r\n    function end_ICO() external onlyOwner atStage(Stages.ICO)\r\n    {\r\n        // require(now > ico_enddate);\r\n        stage = Stages.ENDED;\r\n        lockstatus = false;\r\n        uint256 x = balances[address(this)];\r\n        balances[owner] = (balances[owner]).add( balances[address(this)]);\r\n        balances[address(this)] = 0;\r\n       emit  Transfer(address(this), owner , x);\r\n        \r\n    }\r\n    \r\n  \r\n   // This function can be used by owner in emergency to update running status parameter\r\n    function removeLocking(bool RunningStatusLock) external onlyOwner\r\n    {\r\n        lockstatus = RunningStatusLock;\r\n    }\r\n\r\n\r\n  \r\n    // what is the total supply of the ech tokens\r\n    function totalSupply() public view returns(uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount)public returns(bool success) {\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)public returns(bool success) {\r\n        require(_spender != 0x0);\r\n        require( !lockstatus);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)public view returns(uint256 remaining) {\r\n        require(_owner != 0x0 && _spender != 0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n       \r\n       if ( lockstatus && msg.sender == owner) {\r\n            require(balances[msg.sender] >= _amount && _amount >= 0);\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }\r\n      \r\n          else if(!lockstatus)\r\n         {\r\n           require(balances[msg.sender] >= _amount && _amount >= 0);\r\n           balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n           balances[_to] = (balances[_to]).add(_amount);\r\n           emit Transfer(msg.sender, _to, _amount);\r\n           return true;\r\n          }\r\n\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n\r\n    //In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n\r\n    function drain() external onlyOwner {\r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethreceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPricefactor\",\"type\":\"uint256\"}],\"name\":\"setpricefactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_PREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthfundaddress\",\"type\":\"address\"}],\"name\":\"setEthmainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RunningStatusLock\",\"type\":\"bool\"}],\"name\":\"removeLocking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusCalculationFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"EtherPriceFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OutCloud","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001cc","Library":"","SwarmSource":"bzzr://69e0c4e41d150f9e7c423efc9ffc531b5410007f0724b6f6df7c4311efd97a3f"}]}