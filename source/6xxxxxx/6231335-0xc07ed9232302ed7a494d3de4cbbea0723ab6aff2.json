{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BouncyCoinIco {\r\n\r\n  event TokensSold(address buyer, uint256 tokensAmount, uint256 ethAmount);\r\n\r\n  struct PriceThreshold {\r\n    uint256 tokenCount;\r\n    uint256 price;\r\n    uint256 tokensSold;\r\n  }\r\n\r\n  uint256 public constant PRE_ICO_TOKENS = 10000000 * 10**18;\r\n  uint256 public constant PRE_ICO_PRICE = 0.00010 * 10**18;\r\n\r\n  uint256 public constant PRE_ICO_MINIMUM_CONTRIBUTION = 5 ether;\r\n  uint256 public constant ICO_MINIMUM_CONTRIBUTION = 0.1 ether;\r\n\r\n  uint256 public maxPreIcoDuration;\r\n  uint256 public maxIcoDuration;\r\n\r\n  address public owner;\r\n\r\n  address public wallet;\r\n\r\n  ERC20 public bouncyCoinToken;\r\n\r\n  uint256 public startBlock;\r\n  uint256 public preIcoEndBlock;\r\n  uint256 public icoEndBlock;\r\n\r\n  uint256 public preIcoTokensSold;\r\n  PriceThreshold[2] public icoPriceThresholds;\r\n\r\n  /* Current stage */\r\n  Stages public stage;\r\n\r\n  enum Stages {\r\n    Deployed,\r\n    SetUp,\r\n    StartScheduled,\r\n    PreIcoStarted,\r\n    IcoStarted,\r\n    Ended\r\n  }\r\n\r\n  /* Modifiers */\r\n\r\n  modifier atStage(Stages _stage) {\r\n    require(stage == _stage);\r\n    _;\r\n  }\r\n\r\n  modifier isOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier isValidPayload() {\r\n    require(msg.data.length == 0 || msg.data.length == 4);\r\n    _;\r\n  }\r\n\r\n  modifier timedTransitions() {\r\n    if (stage == Stages.StartScheduled && block.number >= startBlock) {\r\n      startPreIco();\r\n    }\r\n    if (stage == Stages.PreIcoStarted && block.number >= preIcoEndBlock) {\r\n      startIco();\r\n    }\r\n    if (stage == Stages.IcoStarted && block.number >= icoEndBlock) {\r\n      finalize();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /* Constructor */\r\n\r\n  constructor(address _wallet)\r\n    public {\r\n    require(_wallet != 0x0);\r\n\r\n    owner = msg.sender;\r\n    wallet = _wallet;\r\n    stage = Stages.Deployed;\r\n  }\r\n\r\n  /* Public functions */\r\n\r\n  function()\r\n    public\r\n    payable\r\n    timedTransitions {\r\n    if (stage == Stages.PreIcoStarted) {\r\n      buyPreIcoTokens();\r\n    } else if (stage == Stages.IcoStarted) {\r\n      buyIcoTokens();\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function setup(address _bouncyCoinToken, uint256 _maxPreIcoDuration, uint256 _maxIcoDuration)\r\n    public\r\n    isOwner\r\n    atStage(Stages.Deployed) {\r\n    require(_bouncyCoinToken != 0x0);\r\n    require(_maxPreIcoDuration > 0);\r\n    require(_maxIcoDuration > 0);\r\n\r\n    icoPriceThresholds[0] = PriceThreshold(20000000 * 10**18, 0.00020 * 10**18, 0);\r\n    icoPriceThresholds[1] = PriceThreshold(50000000 * 10**18, 0.00025 * 10**18, 0);\r\n\r\n    bouncyCoinToken = ERC20(_bouncyCoinToken);\r\n    maxPreIcoDuration = _maxPreIcoDuration;\r\n    maxIcoDuration = _maxIcoDuration;\r\n\r\n    // validate token balance\r\n    uint256 tokensRequired = PRE_ICO_TOKENS + maxIcoTokensSold();\r\n    assert(bouncyCoinToken.balanceOf(this) == tokensRequired);\r\n\r\n    stage = Stages.SetUp;\r\n  }\r\n\r\n  function maxIcoTokensSold()\r\n    public\r\n    constant\r\n    returns (uint256) {\r\n    uint256 total = 0;\r\n    for (uint8 i = 0; i < icoPriceThresholds.length; i++) {\r\n      total += icoPriceThresholds[i].tokenCount;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  function totalIcoTokensSold()\r\n    public\r\n    constant\r\n    returns (uint256) {\r\n    uint256 total = 0;\r\n    for (uint8 i = 0; i < icoPriceThresholds.length; i++) {\r\n      total += icoPriceThresholds[i].tokensSold;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  /* Schedules the start */\r\n  function scheduleStart(uint256 _startBlock)\r\n    public\r\n    isOwner\r\n    atStage(Stages.SetUp) {\r\n    startBlock = _startBlock;\r\n    preIcoEndBlock = startBlock + maxPreIcoDuration;\r\n    stage = Stages.StartScheduled;\r\n  }\r\n\r\n  function updateStage()\r\n    public\r\n    timedTransitions\r\n    returns (Stages) {\r\n    return stage;\r\n  }\r\n\r\n  function buyPreIcoTokens()\r\n    public\r\n    payable\r\n    isValidPayload\r\n    timedTransitions\r\n    atStage(Stages.PreIcoStarted) {\r\n    require(msg.value >= PRE_ICO_MINIMUM_CONTRIBUTION);\r\n\r\n    uint256 amountRemaining = msg.value;\r\n\r\n    uint256 tokensAvailable = PRE_ICO_TOKENS - preIcoTokensSold;\r\n    uint256 maxTokensByAmount = amountRemaining * 10**18 / PRE_ICO_PRICE;\r\n\r\n    uint256 tokensToReceive = 0;\r\n    if (maxTokensByAmount > tokensAvailable) {\r\n      tokensToReceive = tokensAvailable;\r\n      amountRemaining -= (PRE_ICO_PRICE * tokensToReceive) / 10**18;\r\n    } else {\r\n      tokensToReceive = maxTokensByAmount;\r\n      amountRemaining = 0;\r\n    }\r\n    preIcoTokensSold += tokensToReceive;\r\n\r\n    assert(tokensToReceive > 0);\r\n\r\n    if (amountRemaining != 0) {\r\n      msg.sender.transfer(amountRemaining);\r\n    }\r\n\r\n    uint256 amountAccepted = msg.value - amountRemaining;\r\n    wallet.transfer(amountAccepted);\r\n\r\n    if (preIcoTokensSold == PRE_ICO_TOKENS) {\r\n      startIco();\r\n    }\r\n\r\n    emit TokensSold(msg.sender, tokensToReceive, amountAccepted);\r\n  }\r\n\r\n  function buyIcoTokens()\r\n    public\r\n    payable\r\n    isValidPayload\r\n    timedTransitions\r\n    atStage(Stages.IcoStarted) {\r\n    require(msg.value >= ICO_MINIMUM_CONTRIBUTION);\r\n\r\n    uint256 amountRemaining = msg.value;\r\n    uint256 tokensToReceive = 0;\r\n\r\n    for (uint8 i = 0; i < icoPriceThresholds.length; i++) {\r\n      uint256 tokensAvailable = icoPriceThresholds[i].tokenCount - icoPriceThresholds[i].tokensSold;\r\n      uint256 maxTokensByAmount = amountRemaining * 10**18 / icoPriceThresholds[i].price;\r\n\r\n      uint256 tokens;\r\n      if (maxTokensByAmount > tokensAvailable) {\r\n        tokens = tokensAvailable;\r\n        amountRemaining -= (icoPriceThresholds[i].price * tokens) / 10**18;\r\n      } else {\r\n        tokens = maxTokensByAmount;\r\n        amountRemaining = 0;\r\n      }\r\n      icoPriceThresholds[i].tokensSold += tokens;\r\n      tokensToReceive += tokens;\r\n    }\r\n\r\n    assert(tokensToReceive > 0);\r\n\r\n    if (amountRemaining != 0) {\r\n      msg.sender.transfer(amountRemaining);\r\n    }\r\n\r\n    uint256 amountAccepted = msg.value - amountRemaining;\r\n    wallet.transfer(amountAccepted);\r\n\r\n    if (totalIcoTokensSold() == maxIcoTokensSold()) {\r\n      finalize();\r\n    }\r\n\r\n    emit TokensSold(msg.sender, tokensToReceive, amountAccepted);\r\n  }\r\n\r\n  function stop()\r\n    public\r\n    isOwner {\r\n    finalize();\r\n  }\r\n\r\n  function finishPreIcoAndStartIco()\r\n    public\r\n    isOwner\r\n    timedTransitions\r\n    atStage(Stages.PreIcoStarted) {\r\n    startIco();\r\n  }\r\n\r\n  /* Private functions */\r\n\r\n  function startPreIco()\r\n    private {\r\n    stage = Stages.PreIcoStarted;\r\n  }\r\n\r\n  function startIco()\r\n    private {\r\n    stage = Stages.IcoStarted;\r\n    icoEndBlock = block.number + maxIcoDuration;\r\n  }\r\n\r\n  function finalize()\r\n    private {\r\n    stage = Stages.Ended;\r\n  }\r\n\r\n  // In case of accidental ether lock on contract\r\n  function withdraw()\r\n    public\r\n    isOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  // In case of accidental token transfer to this address, owner can transfer it elsewhere\r\n  function transferERC20Token(address _tokenAddress, address _to, uint256 _value)\r\n    public\r\n    isOwner {\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transfer(_to, _value));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_MINIMUM_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPreIcoTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIcoDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreIcoDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"scheduleStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bouncyCoinToken\",\"type\":\"address\"},{\"name\":\"_maxPreIcoDuration\",\"type\":\"uint256\"},{\"name\":\"_maxIcoDuration\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIcoTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_MINIMUM_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoPriceThresholds\",\"outputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bouncyCoinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPreIcoAndStartIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"}]","ContractName":"BouncyCoinIco","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006709aa3f1f320b87d2821a10104c113a0ba42b3a","Library":"","SwarmSource":"bzzr://0ec9f511031650c11aba0e6901896b9b7efdfc827bfdf0142735ebbce28bf613"}]}