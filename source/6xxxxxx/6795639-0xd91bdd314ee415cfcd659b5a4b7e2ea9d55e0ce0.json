{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  /*function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }*/\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  address public owner; //owner\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function commitDividend(address who) public; // pays remaining dividend\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n  // users\r\n  struct User {\r\n    uint120 tokens; // current tokens of user\r\n    uint120 asks;   // current tokens in asks\r\n    uint120 votes;  // current voting power\r\n    uint120 weis;   // current wei balance of user\r\n    uint32 lastProposalID; // last processed dividend period of user's tokens\r\n    address owner;  // votes for new owner\r\n    uint8   voted;  // vote for proposal\r\n  }\r\n  mapping (address => User) users;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length >= size + 4);\r\n    _;\r\n  }\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n    commitDividend(msg.sender);\r\n    users[msg.sender].tokens = uint120(uint(users[msg.sender].tokens).sub(_value));\r\n    if(_to == address(this)) {\r\n      commitDividend(owner);\r\n      users[owner].tokens = uint120(uint(users[owner].tokens).add(_value));\r\n      emit Transfer(msg.sender, owner, _value);\r\n    }\r\n    else {\r\n      commitDividend(_to);\r\n      users[_to].tokens = uint120(uint(users[_to].tokens).add(_value));\r\n      emit Transfer(msg.sender, _to, _value);\r\n    }\r\n  }\r\n  /**\r\n  * @dev Gets the amount of tokens\r\n  * @param _owner The address to query.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].tokens);\r\n  }\r\n  /**\r\n  * @dev Gets the amount of tokens offered for sale (in asks)\r\n  * @param _owner The address to query.\r\n  * @return An uint representing the amount offered by the passed address.\r\n  */\r\n  function askOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].asks);\r\n  }\r\n  /**\r\n  * @dev Gets the amount of tokens offered for sale (in asks)\r\n  * @param _owner The address to query.\r\n  * @return An uint representing the amount offered by the passed address.\r\n  */\r\n  function voteOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].votes);\r\n  }\r\n  /**\r\n  * @dev Gets the amount of wei owned by user and stored in contract\r\n  * @param _owner The address to query.\r\n  * @return An uint representing the amount wei stored in contract.\r\n  */\r\n  function weiOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].weis);\r\n  }\r\n  /**\r\n  * @dev Gets the id of last proccesed proposal period\r\n  * @param _owner The address to query.\r\n  * @return An uint representing the id of last processed proposal period\r\n  */\r\n  function lastOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].lastProposalID);\r\n  }\r\n  /**\r\n  * @dev Gets the proposed address of new contract owner / manager\r\n  * @param _owner The address to query.\r\n  * @return An address proposed as new contract owner / manager\r\n  */\r\n  function ownerOf(address _owner) public view returns (address) {\r\n    return users[_owner].owner;\r\n  }\r\n  /**\r\n  * @dev Gets the status of voting\r\n  * @param _owner The address to query.\r\n  * @return An uint > 0 if user already voted\r\n  */\r\n  function votedOf(address _owner) public view returns (uint) {\r\n    return uint(users[_owner].voted);\r\n  }\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n    commitDividend(_from);\r\n    commitDividend(_to);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    users[_from].tokens = uint120(uint(users[_from].tokens).sub(_value));\r\n    users[_to].tokens = uint120(uint(users[_to].tokens).add(_value));\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public {\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title PicoStocksAsset contract\r\n */\r\ncontract PicoStocksAsset is StandardToken {\r\n\r\n    // metadata\r\n    string public constant version = \"0.2\";\r\n    string public constant name = \"PicoStocks Asset\";\r\n    uint public constant decimals = 0;\r\n    uint public picoid = 0; // Asset ID on PicoStocks\r\n    string public symbol = \"\"; // Asset code on PicoStocks\r\n    string public www = \"\"; // Official web page\r\n\r\n    uint public totalWeis = 0; // sum of wei owned by users\r\n    uint public totalVotes = 0;  // number of alligible votes\r\n\r\n    struct Order {\r\n        uint64 prev;   // previous order, need this to enable safe/fast order cancel\r\n        uint64 next;   // next order\r\n        uint128 price; // offered/requested price of 1 token\r\n        uint96 amount; // number of offered/requested tokens\r\n        address who;   // address of owner of tokens or funds\r\n    }\r\n    mapping (uint => Order) asks;\r\n    mapping (uint => Order) bids;\r\n    uint64 firstask=0; // key of lowest ask\r\n    uint64 lastask=0;  // key of last inserted ask\r\n    uint64 firstbid=0; // key of highest bid\r\n    uint64 lastbid=0;  // key of last inserted bid\r\n\r\n    uint constant weekBlocks = 4*60*24*7; // number of blocks in 1 week\r\n    uint constant minPrice  = 0xFFFF;                             // min price per token\r\n    uint constant maxPrice  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // max price per token\r\n    uint constant maxTokens = 0xFFFFFFFFFFFFFFFFFFFFFFFF;         // max number of tokens\r\n\r\n    address public custodian = 0xd720a4768CACE6d508d8B390471d83BA3aE6dD32;\r\n\r\n    // investment parameters\r\n    uint public investOwner; // number of tokens assigned to owner if first round successfull\r\n    uint public investPrice; // price of 1 token\r\n    uint public investStart; // first block of funding round\r\n    uint public investEnd;   // last block of funding round\r\n    uint public investGot;   // funding collected\r\n    uint public investMin;   // minimum funding\r\n    uint public investMax;   // maximum funding\r\n    uint public investKYC = 1;   // KYC requirement\r\n\r\n    //dividends\r\n    uint[] public dividends; // dividens collected per period, growing array\r\n\r\n    //proposal\r\n    uint public proposalID = 1;   // proposal number and dividend period\r\n    uint public proposalVotesYes; // yes-votes collected\r\n    uint public proposalVotesNo;  // no-votes collected\r\n    uint public proposalBlock;    // block number proposal published\r\n    uint public proposalDividendPerShare; // dividend per share\r\n    uint public proposalBudget;   // budget for the owner for next period\r\n    uint public proposalTokens;   // number of new tokens for next round\r\n    uint public proposalPrice;    // price of new token in next round\r\n    uint public acceptedBudget;   // unspent budget for the owner in current round\r\n\r\n    //change owner\r\n    mapping (address => uint) owners; // votes for new owners / managers of the contract\r\n\r\n    // events\r\n    event LogBuy(address indexed who, uint amount, uint price);\r\n    event LogSell(address indexed who, uint amount, uint price);\r\n    event LogCancelBuy(address indexed who, uint amount, uint price);\r\n    event LogCancelSell(address indexed who, uint amount, uint price);\r\n    event LogTransaction(address indexed from, address indexed to, uint amount, uint price);\r\n    event LogDeposit(address indexed who,uint amount);\r\n    event LogWithdraw(address indexed who,uint amount);\r\n    event LogExec(address indexed who,uint amount);\r\n    event LogPayment(address indexed who, address from, uint amount);\r\n    event LogDividend(uint amount);\r\n    event LogDividend(address indexed who, uint amount, uint period);\r\n    event LogNextInvestment(uint price,uint amount);\r\n    event LogNewOwner(address indexed who);\r\n    event LogNewCustodian(address indexed who);\r\n    event LogNewWww(string www);\r\n    event LogProposal(uint dividendpershare,uint budget,uint moretokens,uint minprice);\r\n    event LogVotes(uint proposalVotesYes,uint proposalVotesNo);\r\n    event LogBudget(uint proposalBudget);\r\n    event LogAccepted(uint proposalDividendPerShare,uint proposalBudget,uint proposalTokens,uint proposalPrice);\r\n    event LogRejected(uint proposalDividendPerShare,uint proposalBudget,uint proposalTokens,uint proposalPrice);\r\n    \r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // constructor\r\n    /**\r\n     * @dev Contract constructor\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n/* initial investment functions */\r\n\r\n    /**\r\n     * @dev Set first funding round parameters\r\n     * @param _tokens number of tokens given to admin\r\n     * @param _budget initial approved budget\r\n     * @param _price price of 1 token in first founding round\r\n     * @param _from block number of start of funding round\r\n     * @param _length length of the funding round in blocks\r\n     * @param _min minimum number of tokens to sell\r\n     * @param _max maximum number of tokens to sell\r\n     * @param _kyc require KYC during first investment round\r\n     * @param _picoid asset id on picostocks\r\n     * @param _symbol asset symmbol on picostocks\r\n     */\r\n    function setFirstInvestPeriod(uint _tokens,uint _budget,uint _price,uint _from,uint _length,uint _min,uint _max,uint _kyc,uint _picoid,string memory _symbol) public onlyOwner {\r\n        require(investEnd == 0 && _price < maxPrice && _length <= weekBlocks * 12 && _min <= _max && _tokens.add(_max) < maxTokens );\r\n        investOwner = _tokens;\r\n        acceptedBudget = _budget;\r\n        users[owner].lastProposalID = uint32(proposalID);\r\n        users[custodian].lastProposalID = uint32(proposalID);\r\n        if(_price <= minPrice){\r\n          _price = minPrice+1;\r\n        }\r\n        investPrice = _price;\r\n        if(_from < block.number){\r\n          _from = block.number;\r\n        }\r\n        investStart = _from;\r\n        if(_length == 0){\r\n          _length = weekBlocks * 4;\r\n        }\r\n        investEnd = _from + _length;\r\n        investMin = _min;\r\n        investMax = _max;\r\n        investKYC = _kyc;\r\n        picoid = _picoid;\r\n        symbol = _symbol;\r\n        dividends.push(0); // not used\r\n        dividends.push(0); // current dividend\r\n        if(investMax == 0){\r\n          closeInvestPeriod();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Accept address for first investment\r\n     * @param _who accepted address (investor)\r\n     */\r\n    function acceptKYC(address _who) external onlyOwner {\r\n        if(users[_who].lastProposalID==0){\r\n          users[_who].lastProposalID=1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens\r\n     */\r\n    function invest() payable public {\r\n        commitDividend(msg.sender);\r\n        require(msg.value > 0 && block.number >= investStart && block.number < investEnd && totalSupply < investMax && investPrice > 0);\r\n        uint tokens = msg.value / investPrice;\r\n        if(investMax < totalSupply.add(tokens)){\r\n            tokens = investMax.sub(totalSupply);\r\n        }\r\n        totalSupply += tokens;\r\n        users[msg.sender].tokens += uint120(tokens);\r\n        emit Transfer(address(0),msg.sender,tokens);\r\n        uint _value = msg.value.sub(tokens * investPrice);\r\n        if(_value > 0){ // send back excess funds immediately\r\n            emit LogWithdraw(msg.sender,_value);\r\n            (bool success, /*bytes memory _unused*/) = msg.sender.call.value(_value)(\"\");\r\n            require(success);\r\n        }\r\n        if(totalSupply>=investMax){\r\n            closeInvestPeriod();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens\r\n     */\r\n    function () payable external {\r\n        invest();\r\n    }\r\n\r\n    /**\r\n     * @dev Return wei to token owners if first funding round failes\r\n     */\r\n    function disinvest() public {\r\n        require(investEnd < block.number && totalSupply < investMin && totalSupply>0 && proposalID > 1);\r\n        payDividend((address(this).balance-totalWeis)/totalSupply); //CHANGED\r\n        investEnd = block.number + weekBlocks*4; // enable future dividend payment if contract has funds\r\n    }\r\n\r\n/* management functions */\r\n\r\n    /**\r\n     * @dev Propose dividend, budget and optional funding parameters for next round\r\n     * @param _dividendpershare amount of wei per share to pay out\r\n     * @param _budget amount of wei to give to owner\r\n     * @param _tokens amount of new tokens to issue\r\n     * @param _price price of 1 new token\r\n     */\r\n    function propose(uint _dividendpershare,uint _budget,uint _tokens,uint _price) external onlyOwner {\r\n        require(proposalBlock + weekBlocks*4 < block.number && investEnd < block.number && proposalID > 1); //can not send more than 1 proposal per 28 days\r\n        if(block.number>investEnd && investStart>0 && investPrice>0 && investMax>0){\r\n          totalVotes=totalSupply;\r\n          investStart=0;\r\n          investMax=0;\r\n        }\r\n        proposalVotesYes=0;\r\n        proposalVotesNo=0;\r\n        proposalID++;\r\n        dividends.push(0);\r\n        proposalBlock=block.number;\r\n        proposalDividendPerShare=_dividendpershare;\r\n        proposalBudget=_budget;\r\n        proposalTokens=_tokens;\r\n        proposalPrice=_price;\r\n        emit LogProposal(_dividendpershare,_budget,_tokens,_price);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute proposed plan if passed\r\n     */\r\n    function executeProposal() public {\r\n        require(proposalVotesYes > 0 && (proposalBlock + weekBlocks*4 < block.number || proposalVotesYes>totalVotes/2 || proposalVotesNo>totalVotes/2) && proposalID > 1);\r\n        //old require(proposalVotesYes > 0);\r\n        emit LogVotes(proposalVotesYes,proposalVotesNo);\r\n        if(proposalVotesYes >= proposalVotesNo && (proposalTokens==0 || proposalPrice>=investPrice || proposalVotesYes>totalVotes/2)){\r\n          if(payDividend(proposalDividendPerShare) > 0){\r\n            emit LogBudget(proposalBudget);\r\n            acceptedBudget=proposalBudget;}\r\n          if(proposalTokens>0){\r\n            emit LogNextInvestment(proposalPrice,proposalTokens);\r\n            setNextInvestPeriod(proposalPrice,proposalTokens);}\r\n          emit LogAccepted(proposalDividendPerShare,proposalBudget,proposalTokens,proposalPrice);}\r\n        else{\r\n          emit LogRejected(proposalDividendPerShare,proposalBudget,proposalTokens,proposalPrice);}\r\n        proposalBlock=0;\r\n        proposalVotesYes=0;\r\n        proposalVotesNo=0;\r\n        proposalDividendPerShare=0;\r\n        proposalBudget=0;\r\n        proposalTokens=0;\r\n        proposalPrice=0;\r\n    }\r\n\r\n    /**\r\n     * @dev Set next funding round parameters\r\n     * @param _price price of 1 new token\r\n     * @param _tokens amount of new tokens to issue\r\n     */\r\n    function setNextInvestPeriod(uint _price,uint _tokens) internal {\r\n        require(totalSupply >= investMin && _price > 0 && _price < maxPrice && totalSupply + _tokens < 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        investStart = block.number + weekBlocks*2;\r\n        investEnd = block.number + weekBlocks*4;\r\n        investPrice = _price; // too high price will disable future investments\r\n        investMax = totalSupply + _tokens;\r\n        investKYC=0;\r\n    }\r\n\r\n    /**\r\n     * @dev Finish funding round and update voting power\r\n     */\r\n    function closeInvestPeriod() public {\r\n        require((block.number>investEnd || totalSupply>=investMax) && investStart>0);\r\n        if(proposalID == 1){\r\n          totalSupply += investOwner;\r\n          users[owner].tokens += uint120(investOwner);\r\n          if(totalSupply == 0){\r\n            totalSupply = 1;\r\n            users[owner].tokens = 1;\r\n          }\r\n        }\r\n        proposalID++;\r\n        dividends.push(0);\r\n        totalVotes=totalSupply;\r\n        investStart=0;\r\n        investMax=0;\r\n        investKYC=0;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay dividend per share \r\n     * @param _wei The amount of wei to pay per share\r\n     */\r\n    function payDividend(uint _wei) internal returns (uint) {\r\n        if(_wei == 0){\r\n          return 1;}\r\n        //uint newdividend = _wei.mul(totalSupply);\r\n        uint newdividend = _wei * totalSupply;\r\n        require(newdividend / _wei == totalSupply);\r\n        if(address(this).balance < newdividend.add(totalWeis)){\r\n          emit LogDividend(0); //indicates failure\r\n          return 0;}\r\n        totalWeis += newdividend;\r\n        dividends[proposalID] = _wei;\r\n        proposalID++;\r\n        dividends.push(0);\r\n        totalVotes=totalSupply;\r\n        emit LogDividend(_wei);\r\n        return(_wei);\r\n    }\r\n\r\n    /**\r\n     * @dev Commit remaining dividends and update votes before transfer of tokens\r\n     * @param _who User to process\r\n     */\r\n    function commitDividend(address _who) public {\r\n        uint last = users[_who].lastProposalID;\r\n        require(investKYC==0 || last>0); // only authorized investors during KYC period\r\n        uint tokens=users[_who].tokens+users[_who].asks;\r\n        if((tokens==0) || (last==0)){\r\n            users[_who].lastProposalID=uint32(proposalID);\r\n            return;\r\n        }\r\n        if(last==proposalID) {\r\n            return;\r\n        }\r\n        if(tokens != users[_who].votes){\r\n            if(users[_who].owner != address(0)){\r\n                owners[users[_who].owner] = owners[users[_who].owner].add(tokens).sub(uint(users[_who].votes));\r\n            }\r\n            users[_who].votes=uint120(tokens); // store voting power\r\n        }\r\n        uint balance = 0;\r\n        for(; last < proposalID ; last ++) {\r\n            balance += tokens * dividends[last];\r\n        }\r\n        users[_who].weis += uint120(balance);\r\n        users[_who].lastProposalID = uint32(last);\r\n        users[_who].voted=0;\r\n        emit LogDividend(_who,balance,last);\r\n    }\r\n\r\n/* administrative functions */\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param _who The address of new owner\r\n     */\r\n    function changeOwner(address _who) external onlyOwner {\r\n        assert(_who != address(0));\r\n        owner = _who;\r\n        emit LogNewOwner(_who);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the official www address\r\n     * @param _www The new www address\r\n     */\r\n    function changeWww(string calldata _www) external onlyOwner {\r\n        www=_www;\r\n        emit LogNewWww(_www);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param _who The address of new owner\r\n     */\r\n    function changeCustodian(address _who) external { //CHANGED\r\n        assert(msg.sender == custodian);\r\n        assert(_who != address(0));\r\n        custodian = _who;\r\n        emit LogNewCustodian(_who);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a call\r\n     * @param _to destination address\r\n     * @param _data The call data\r\n     */\r\n    function exec(address _to,bytes calldata _data) payable external onlyOwner {\r\n        emit LogExec(_to,msg.value);\r\n        (bool success, /*bytes memory _unused*/) =_to.call.value(msg.value)(_data);\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw funds from contract by contract owner / manager\r\n     * @param _amount The amount of wei to withdraw\r\n     * @param _who The addres to send wei to\r\n     */\r\n    function spend(uint _amount,address _who) external onlyOwner {\r\n        require(_amount > 0 && address(this).balance >= _amount.add(totalWeis) && totalSupply >= investMin);\r\n        acceptedBudget=acceptedBudget.sub(_amount); //check for excess withdrawal\r\n        if(_who == address(0)){\r\n          emit LogWithdraw(msg.sender,_amount);\r\n          (bool success, /*bytes memory _unused*/) = msg.sender.call.value(_amount)(\"\");\r\n          require(success);}\r\n        else{\r\n          emit LogWithdraw(_who,_amount);\r\n          (bool success, /*bytes memory _unused*/) = _who.call.value(_amount)(\"\");\r\n          require(success);}\r\n    }\r\n\r\n/* user functions */\r\n\r\n    /**\r\n     * @dev Vote to change contract owner / manager\r\n     * @param _who The addres of the proposed new contract owner / manager\r\n     */\r\n    function voteOwner(address _who) external {\r\n        require(_who != users[msg.sender].owner);\r\n        if(users[msg.sender].owner != address(0)){\r\n          owners[users[msg.sender].owner] = owners[users[msg.sender].owner].sub(users[msg.sender].votes);\r\n        }\r\n        users[msg.sender].owner=_who;\r\n        if(_who != address(0)){\r\n          owners[_who] = owners[_who].add(users[msg.sender].votes);\r\n          if(owners[_who] > totalVotes/2 && _who != owner){\r\n            owner = _who;\r\n            emit LogNewOwner(_who);\r\n          }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Vote in favor of the current proposal\r\n     */\r\n    function voteYes() public {\r\n        commitDividend(msg.sender);\r\n        require(users[msg.sender].voted == 0 && proposalBlock + weekBlocks*4 > block.number && proposalBlock > 0);\r\n        users[msg.sender].voted=1;\r\n        proposalVotesYes+=users[msg.sender].votes;\r\n    }\r\n\r\n    /**\r\n     * @dev Vote against the current proposal\r\n     */\r\n    function voteNo() public {\r\n        commitDividend(msg.sender);\r\n        require(users[msg.sender].voted == 0 && proposalBlock + weekBlocks*4 > block.number && proposalBlock > 0);\r\n        users[msg.sender].voted=1;\r\n        proposalVotesNo+=users[msg.sender].votes;\r\n    }\r\n\r\n    /**\r\n     * @dev Vote in favor of the proposal defined by ID\r\n     * @param _id Proposal ID\r\n     */\r\n    function voteYes(uint _id) external {\r\n        require(proposalID==_id);\r\n        voteYes();\r\n    }\r\n\r\n    /**\r\n     * @dev Vote against the proposal defined by ID\r\n     * @param _id Proposal ID\r\n     */\r\n    function voteNo(uint _id) external {\r\n        require(proposalID==_id);\r\n        voteNo();\r\n    }\r\n\r\n    /**\r\n     * @dev Store funds in contract\r\n     */\r\n    function deposit() payable external {\r\n        commitDividend(msg.sender); //CHANGED\r\n        users[msg.sender].weis += uint120(msg.value);\r\n        totalWeis += msg.value;\r\n        emit LogDeposit(msg.sender,msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw funds from contract\r\n     * @param _amount Amount of wei to withdraw\r\n     */\r\n    function withdraw(uint _amount) external {\r\n        commitDividend(msg.sender);\r\n        uint amount=_amount;\r\n        if(amount > 0){\r\n           require(users[msg.sender].weis >= amount);\r\n        }\r\n        else{\r\n           require(users[msg.sender].weis > 0);\r\n           amount=users[msg.sender].weis;\r\n        }\r\n        users[msg.sender].weis = uint120(uint(users[msg.sender].weis).sub(amount));\r\n        totalWeis = totalWeis.sub(amount);\r\n        //msg.sender.transfer(amount);\r\n        emit LogWithdraw(msg.sender,amount);\r\n        (bool success, /*bytes memory _unused*/) = msg.sender.call.value(amount)(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @dev Wire funds from one user to another user\r\n     * @param _amount Amount of wei to wire\r\n     * @param _who Address of the user to wire to\r\n     */\r\n    function wire(uint _amount,address _who) external {\r\n        users[msg.sender].weis = uint120(uint(users[msg.sender].weis).sub(_amount));\r\n        users[_who].weis = uint120(uint(users[_who].weis).add(_amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Send wei to contract\r\n     * @param _who Address of the payee\r\n     */\r\n    function pay(address _who) payable external {\r\n        emit LogPayment(_who,msg.sender,msg.value);\r\n    }\r\n\r\n/* market view functions */\r\n\r\n    /**\r\n     * @dev Return ask orders optionally filtered by user\r\n     * @param _who Optional address of the user\r\n     * @return An array of uint representing the (filtered) orders, 4 uints per order (id,price,amount,user)\r\n     */\r\n    function ordersSell(address _who) external view returns (uint[256] memory) {\r\n        uint[256] memory ret;\r\n        uint num=firstask;\r\n        uint id=0;\r\n        for(;asks[num].price>0 && id<64;num=uint(asks[num].next)){\r\n          if(_who!=address(0) && _who!=asks[num].who){\r\n            continue;\r\n          }\r\n          ret[4*id+0]=num;\r\n          ret[4*id+1]=uint(asks[num].price);\r\n          ret[4*id+2]=uint(asks[num].amount);\r\n          ret[4*id+3]=uint(asks[num].who);\r\n          id++;}\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Return bid orders optionally filtered by user\r\n     * @param _who Optional address of the user\r\n     * @return An array of uint representing the (filtered) orders, 4 uints per order (id,price,amount,user)\r\n     */\r\n    function ordersBuy(address _who) external view returns (uint[256] memory) {\r\n        uint[256] memory ret;\r\n        uint num=firstbid;\r\n        uint id=0;\r\n        for(;bids[num].price>0 && id<64;num=uint(bids[num].next)){\r\n          if(_who!=address(0) && _who!=bids[num].who){\r\n            continue;\r\n          }\r\n          ret[4*id+0]=num;\r\n          ret[4*id+1]=uint(bids[num].price);\r\n          ret[4*id+2]=uint(bids[num].amount);\r\n          ret[4*id+3]=uint(bids[num].who);\r\n          id++;}\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Find the ask order id for a user\r\n     * @param _who The address of the user\r\n     * @param _minprice Optional minimum price\r\n     * @param _maxprice Optional maximum price\r\n     * @return The id of the order\r\n     */\r\n    function findSell(address _who,uint _minprice,uint _maxprice) external view returns (uint) {\r\n        uint num=firstask;\r\n        for(;asks[num].price>0;num=asks[num].next){\r\n          if(_maxprice > 0 && asks[num].price > _maxprice){\r\n            return 0;}\r\n          if(_minprice > 0 && asks[num].price < _minprice){\r\n            continue;}\r\n          if(_who == asks[num].who){ //FIXED !!!\r\n            return num;}}\r\n    }\r\n\r\n    /**\r\n     * @dev Find the bid order id for a user\r\n     * @param _who The address of the user\r\n     * @param _minprice Optional minimum price\r\n     * @param _maxprice Optional maximum price\r\n     * @return The id of the order\r\n     */\r\n    function findBuy(address _who,uint _minprice,uint _maxprice) external view returns (uint) {\r\n        uint num=firstbid;\r\n        for(;bids[num].price>0;num=bids[num].next){\r\n          if(_minprice > 0 && bids[num].price < _minprice){\r\n            return 0;}\r\n          if(_maxprice > 0 && bids[num].price > _maxprice){\r\n            continue;}\r\n          if(_who == bids[num].who){\r\n            return num;}}\r\n    }\r\n\r\n    /**\r\n     * @dev Report the user address of an ask order\r\n     * @param _id The id of the order\r\n     * @return The address of the user placing the order\r\n     */\r\n    function whoSell(uint _id) external view returns (address) {\r\n        if(_id>0){\r\n          return address(asks[_id].who);\r\n        }\r\n        return address(asks[firstask].who);\r\n    }\r\n\r\n    /**\r\n     * @dev Report the user address of a bid order\r\n     * @param _id The id of the order\r\n     * @return The address of the user placing the order\r\n     */\r\n    function whoBuy(uint _id) external view returns (address) {\r\n        if(_id>0){\r\n          return address(bids[_id].who);\r\n        }\r\n        return address(bids[firstbid].who);\r\n    }\r\n\r\n    /**\r\n     * @dev Report the amount of tokens of an ask order\r\n     * @param _id The id of the order\r\n     * @return The amount of tokens offered\r\n     */\r\n    function amountSell(uint _id) external view returns (uint) {\r\n        if(_id>0){\r\n          return uint(asks[_id].amount);\r\n        }\r\n        return uint(asks[firstask].amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Report the amount of tokens of a bid order\r\n     * @param _id The id of the order\r\n     * @return The amount of tokens requested\r\n     */\r\n    function amountBuy(uint _id) external view returns (uint) {\r\n        if(_id>0){\r\n          return uint(bids[_id].amount);\r\n        }\r\n        return uint(bids[firstbid].amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Report the price of 1 token of an ask order\r\n     * @param _id The id of the order\r\n     * @return The requested price for 1 token\r\n     */\r\n    function priceSell(uint _id) external view returns (uint) {\r\n        if(_id>0){\r\n          return uint(asks[_id].price);\r\n        }\r\n        return uint(asks[firstask].price);\r\n    }\r\n\r\n    /**\r\n     * @dev Report the price of 1 token of a bid order\r\n     * @param _id The id of the order\r\n     * @return The offered price for 1 token\r\n     */\r\n    function priceBuy(uint _id) external view returns (uint) {\r\n        if(_id>0){\r\n          return uint(bids[_id].price);\r\n        }\r\n        return uint(bids[firstbid].price);\r\n    }\r\n\r\n/* trade functions */\r\n\r\n    /**\r\n     * @dev Cancel an ask order\r\n     * @param _id The id of the order\r\n     */\r\n    function cancelSell(uint _id) external {\r\n        require(asks[_id].price>0 && asks[_id].who==msg.sender);\r\n        users[msg.sender].tokens=uint120(uint(users[msg.sender].tokens).add(asks[_id].amount));\r\n        users[msg.sender].asks=uint120(uint(users[msg.sender].asks).sub(asks[_id].amount));\r\n        if(asks[_id].prev>0){\r\n          asks[asks[_id].prev].next=asks[_id].next;}\r\n        else{\r\n          firstask=asks[_id].next;}\r\n        if(asks[_id].next>0){\r\n          asks[asks[_id].next].prev=asks[_id].prev;}\r\n        emit LogCancelSell(msg.sender,asks[_id].amount,asks[_id].price);\r\n        delete(asks[_id]);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid order\r\n     * @param _id The id of the order\r\n     */\r\n    function cancelBuy(uint _id) external {\r\n        require(bids[_id].price>0 && bids[_id].who==msg.sender);\r\n        uint value=bids[_id].amount*bids[_id].price;\r\n        users[msg.sender].weis+=uint120(value);\r\n        if(bids[_id].prev>0){\r\n          bids[bids[_id].prev].next=bids[_id].next;}\r\n        else{\r\n          firstbid=bids[_id].next;}\r\n        if(bids[_id].next>0){\r\n          bids[bids[_id].next].prev=bids[_id].prev;}\r\n        emit LogCancelBuy(msg.sender,bids[_id].amount,bids[_id].price);\r\n        delete(bids[_id]);\r\n    }\r\n\r\n    /**\r\n     * @dev Place and ask order (sell tokens)\r\n     * @param _amount The amount of tokens to sell\r\n     * @param _price The minimum price per token in wei\r\n     */\r\n    function sell(uint _amount, uint _price) external {\r\n        require(0 < _price && _price < maxPrice && 0 < _amount && _amount < maxTokens && _amount <= users[msg.sender].tokens);\r\n        commitDividend(msg.sender);\r\n        users[msg.sender].tokens-=uint120(_amount); //we will sell that much\r\n        uint funds=0;\r\n        uint amount=_amount;\r\n        for(;bids[firstbid].price>0 && bids[firstbid].price>=_price;){\r\n          uint value=uint(bids[firstbid].price)*uint(bids[firstbid].amount);\r\n          uint fee=value >> 9; //0.4% fee\r\n          if(amount>=bids[firstbid].amount){\r\n            amount=amount.sub(uint(bids[firstbid].amount));\r\n            commitDividend(bids[firstbid].who);\r\n            emit LogTransaction(msg.sender,bids[firstbid].who,bids[firstbid].amount,bids[firstbid].price);\r\n            //seller\r\n            //users[msg.sender].tokens-=bids[firstbid].amount;\r\n            funds=funds.add(value-fee-fee);\r\n            users[custodian].weis+=uint120(fee);\r\n            totalWeis=totalWeis.sub(fee);\r\n            //buyer\r\n            users[bids[firstbid].who].tokens+=bids[firstbid].amount;\r\n            //clear\r\n            uint64 next=bids[firstbid].next;\r\n            delete bids[firstbid];\r\n            firstbid=next; // optimize and move outside ?\r\n            if(amount==0){\r\n              break;}\r\n            continue;}\r\n          value=amount*uint(bids[firstbid].price);\r\n          fee=value >> 9; //0.4% fee\r\n          commitDividend(bids[firstbid].who);\r\n          funds=funds.add(value-fee-fee);\r\n          emit LogTransaction(msg.sender,bids[firstbid].who,amount,bids[firstbid].price);\r\n          //seller\r\n          //users[msg.sender].tokens-=amount;\r\n          users[custodian].weis+=uint120(fee);\r\n          totalWeis=totalWeis.sub(fee);\r\n          bids[firstbid].amount=uint96(uint(bids[firstbid].amount).sub(amount));\r\n          require(bids[firstbid].amount>0);\r\n          //buyer\r\n          users[bids[firstbid].who].tokens+=uint120(amount);\r\n          bids[firstbid].prev=0;\r\n          totalWeis=totalWeis.sub(funds);\r\n          (bool success, /*bytes memory _unused*/) = msg.sender.call.value(funds)(\"\");\r\n          require(success);\r\n          return;}\r\n        if(firstbid>0){\r\n          bids[firstbid].prev=0;}\r\n        if(amount>0){\r\n          uint64 ask=firstask;\r\n          uint64 last=0;\r\n          for(;asks[ask].price>0 && asks[ask].price<=_price;ask=asks[ask].next){\r\n            last=ask;}\r\n          lastask++;\r\n          asks[lastask].prev=last;\r\n          asks[lastask].next=ask;\r\n          asks[lastask].price=uint128(_price);\r\n          asks[lastask].amount=uint96(amount);\r\n          asks[lastask].who=msg.sender;\r\n          users[msg.sender].asks+=uint120(amount);\r\n          emit LogSell(msg.sender,amount,_price);\r\n          if(last>0){\r\n            asks[last].next=lastask;}\r\n          else{\r\n            firstask=lastask;}\r\n          if(ask>0){\r\n            asks[ask].prev=lastask;}}\r\n        if(funds>0){\r\n          totalWeis=totalWeis.sub(funds);\r\n          (bool success, /*bytes memory _unused*/) = msg.sender.call.value(funds)(\"\");\r\n          require(success);}\r\n    }\r\n\r\n    /**\r\n     * @dev Place and bid order (buy tokens using Ether of the transaction)\r\n     * @param _amount The maximum amount of tokens to buy\r\n     * @param _price The maximum price per token in wei\r\n     */\r\n    function buy(uint _amount, uint _price) payable external {\r\n        require(0 < _price && _price < maxPrice && 0 < _amount && _amount < maxTokens && _price <= msg.value);\r\n        commitDividend(msg.sender);\r\n        uint funds=msg.value;\r\n        uint amount=_amount;\r\n        uint value;\r\n        for(;asks[firstask].price>0 && asks[firstask].price<=_price;){\r\n          value=uint(asks[firstask].price)*uint(asks[firstask].amount);\r\n          uint fee=value >> 9; //2*0.4% fee\r\n          if(funds>=value+fee+fee && amount>=asks[firstask].amount){\r\n            amount=amount.sub(uint(asks[firstask].amount));\r\n            commitDividend(asks[firstask].who);\r\n            funds=funds.sub(value+fee+fee);\r\n            emit LogTransaction(asks[firstask].who,msg.sender,asks[firstask].amount,asks[firstask].price);\r\n            //seller\r\n            users[asks[firstask].who].asks-=asks[firstask].amount;\r\n            users[asks[firstask].who].weis+=uint120(value);\r\n            users[custodian].weis+=uint120(fee);\r\n            totalWeis=totalWeis.add(value+fee);\r\n            //buyer\r\n            users[msg.sender].tokens+=asks[firstask].amount;\r\n            //clear\r\n            uint64 next=asks[firstask].next;\r\n            delete asks[firstask];\r\n            firstask=next; // optimize and move outside ?\r\n            if(funds<asks[firstask].price){\r\n              break;}\r\n            continue;}\r\n          if(amount>asks[firstask].amount){\r\n            amount=asks[firstask].amount;}\r\n          if((funds-(funds>>8))<amount*asks[firstask].price){\r\n            amount=(funds-(funds>>8))/asks[firstask].price;}\r\n          if(amount>0){\r\n            value=amount*uint(asks[firstask].price);\r\n            fee=value >> 9; //2*0.4% fee\r\n            commitDividend(asks[firstask].who);\r\n            funds=funds.sub(value+fee+fee);\r\n            emit LogTransaction(asks[firstask].who,msg.sender,amount,asks[firstask].price);\r\n            //seller\r\n            users[asks[firstask].who].asks-=uint120(amount);\r\n            users[asks[firstask].who].weis+=uint120(value);\r\n            users[custodian].weis+=uint120(fee);\r\n            totalWeis=totalWeis.add(value+fee);\r\n            asks[firstask].amount=uint96(uint(asks[firstask].amount).sub(amount));\r\n            require(asks[firstask].amount>0);\r\n            //buyer\r\n            users[msg.sender].tokens+=uint120(amount);}\r\n          asks[firstask].prev=0;\r\n          if(funds>0){\r\n            (bool success, /*bytes memory _unused*/) = msg.sender.call.value(funds)(\"\");\r\n            require(success);}\r\n          return;}\r\n        if(firstask>0){ //all orders removed\r\n          asks[firstask].prev=0;}\r\n        if(amount>funds/_price){\r\n          amount=funds/_price;}\r\n        if(amount>0){\r\n          uint64 bid=firstbid;\r\n          uint64 last=0;\r\n          for(;bids[bid].price>0 && bids[bid].price>=_price;bid=bids[bid].next){\r\n            last=bid;}\r\n          lastbid++;\r\n          bids[lastbid].prev=last;\r\n          bids[lastbid].next=bid;\r\n          bids[lastbid].price=uint128(_price);\r\n          bids[lastbid].amount=uint96(amount);\r\n          bids[lastbid].who=msg.sender;\r\n          value=amount*_price;\r\n          totalWeis=totalWeis.add(value);\r\n          funds=funds.sub(value);\r\n          emit LogBuy(msg.sender,amount,_price);\r\n          if(last>0){\r\n            bids[last].next=lastbid;}\r\n          else{\r\n            firstbid=lastbid;}\r\n          if(bid>0){\r\n            bids[bid].prev=lastbid;}}\r\n        if(funds>0){\r\n          (bool success, /*bytes memory _unused*/) = msg.sender.call.value(funds)(\"\");\r\n          require(success);}\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"wire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"commitDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"whoBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalDividendPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"ordersBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picoid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"www\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_budget\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_length\",\"type\":\"uint256\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"},{\"name\":\"_kyc\",\"type\":\"uint256\"},{\"name\":\"_picoid\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setFirstInvestPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"spend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"priceBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lastOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendpershare\",\"type\":\"uint256\"},{\"name\":\"_budget\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"askOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"voteOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"amountBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteYes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_minprice\",\"type\":\"uint256\"},{\"name\":\"_maxprice\",\"type\":\"uint256\"}],\"name\":\"findSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeInvestPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalVotesNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteYes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"weiOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"votedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"priceSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_www\",\"type\":\"string\"}],\"name\":\"changeWww\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeCustodian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"ordersSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[256]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_minprice\",\"type\":\"uint256\"},{\"name\":\"_maxprice\",\"type\":\"uint256\"}],\"name\":\"findBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investGot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"whoSell\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalVotesYes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"acceptKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"amountSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"voteOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogCancelBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogCancelSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogExec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogNextInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogNewCustodian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"www\",\"type\":\"string\"}],\"name\":\"LogNewWww\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendpershare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"moretokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minprice\",\"type\":\"uint256\"}],\"name\":\"LogProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalVotesYes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalVotesNo\",\"type\":\"uint256\"}],\"name\":\"LogVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalBudget\",\"type\":\"uint256\"}],\"name\":\"LogBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalDividendPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalPrice\",\"type\":\"uint256\"}],\"name\":\"LogAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalDividendPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposalPrice\",\"type\":\"uint256\"}],\"name\":\"LogRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PicoStocksAsset","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a989a229fa334b9a50c32a959bb24193a55a41111b075ffca39602da5da9f160"}]}