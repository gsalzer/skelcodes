{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/// @title provides subject to role checking logic\r\ncontract IAccessPolicy {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice We don't make this function constant to allow for state-updating access controls such as rate limiting.\r\n    /// @dev checks if subject belongs to requested role for particular object\r\n    /// @param subject address to be checked against role, typically msg.sender\r\n    /// @param role identifier of required role\r\n    /// @param object contract instance context for role checking, typically contract requesting the check\r\n    /// @param verb additional data, in current AccessControll implementation msg.sig\r\n    /// @return if subject belongs to a role\r\n    function allowed(\r\n        address subject,\r\n        bytes32 role,\r\n        address object,\r\n        bytes4 verb\r\n    )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n/// @title enables access control in implementing contract\r\n/// @dev see AccessControlled for implementation\r\ncontract IAccessControlled {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// @dev must log on access policy change\r\n    event LogAccessPolicyChanged(\r\n        address controller,\r\n        IAccessPolicy oldPolicy,\r\n        IAccessPolicy newPolicy\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev allows to change access control mechanism for this contract\r\n    ///     this method must be itself access controlled, see AccessControlled implementation and notice below\r\n    /// @notice it is a huge issue for Solidity that modifiers are not part of function signature\r\n    ///     then interfaces could be used for example to control access semantics\r\n    /// @param newPolicy new access policy to controll this contract\r\n    /// @param newAccessController address of ROLE_ACCESS_CONTROLLER of new policy that can set access to this contract\r\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\r\n        public;\r\n\r\n    function accessPolicy()\r\n        public\r\n        constant\r\n        returns (IAccessPolicy);\r\n\r\n}\r\n\r\ncontract StandardRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // @notice Soldity somehow doesn't evaluate this compile time\r\n    // @dev role which has rights to change permissions and set new policy in contract, keccak256(\"AccessController\")\r\n    bytes32 internal constant ROLE_ACCESS_CONTROLLER = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\r\n}\r\n\r\n/// @title Granular code execution permissions\r\n/// @notice Intended to replace existing Ownable pattern with more granular permissions set to execute smart contract functions\r\n///     for each function where 'only' modifier is applied, IAccessPolicy implementation is called to evaluate if msg.sender belongs to required role for contract being called.\r\n///     Access evaluation specific belong to IAccessPolicy implementation, see RoleBasedAccessPolicy for details.\r\n/// @dev Should be inherited by a contract requiring such permissions controll. IAccessPolicy must be provided in constructor. Access policy may be replaced to a different one\r\n///     by msg.sender with ROLE_ACCESS_CONTROLLER role\r\ncontract AccessControlled is IAccessControlled, StandardRoles {\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    IAccessPolicy private _accessPolicy;\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    /// @dev limits function execution only to senders assigned to required 'role'\r\n    modifier only(bytes32 role) {\r\n        require(_accessPolicy.allowed(msg.sender, role, this, msg.sig));\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    constructor(IAccessPolicy policy) internal {\r\n        require(address(policy) != 0x0);\r\n        _accessPolicy = policy;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IAccessControlled\r\n    //\r\n\r\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\r\n        public\r\n        only(ROLE_ACCESS_CONTROLLER)\r\n    {\r\n        // ROLE_ACCESS_CONTROLLER must be present\r\n        // under the new policy. This provides some\r\n        // protection against locking yourself out.\r\n        require(newPolicy.allowed(newAccessController, ROLE_ACCESS_CONTROLLER, this, msg.sig));\r\n\r\n        // We can now safely set the new policy without foot shooting.\r\n        IAccessPolicy oldPolicy = _accessPolicy;\r\n        _accessPolicy = newPolicy;\r\n\r\n        // Log event\r\n        emit LogAccessPolicyChanged(msg.sender, oldPolicy, newPolicy);\r\n    }\r\n\r\n    function accessPolicy()\r\n        public\r\n        constant\r\n        returns (IAccessPolicy)\r\n    {\r\n        return _accessPolicy;\r\n    }\r\n}\r\n\r\ncontract Math {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // absolute difference: |v1 - v2|\r\n    function absDiff(uint256 v1, uint256 v2)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return v1 > v2 ? v1 - v2 : v2 - v1;\r\n    }\r\n\r\n    // divide v by d, round up if remainder is 0.5 or more\r\n    function divRound(uint256 v, uint256 d)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return add(v, d/2) / d;\r\n    }\r\n\r\n    // computes decimal decimalFraction 'frac' of 'amount' with maximum precision (multiplication first)\r\n    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\r\n    // mind loss of precision as decimal fractions do not have finite binary expansion\r\n    // do not use instead of division\r\n    function decimalFraction(uint256 amount, uint256 frac)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        // it's like 1 ether is 100% proportion\r\n        return proportion(amount, frac, 10**18);\r\n    }\r\n\r\n    // computes part/total of amount with maximum precision (multiplication first)\r\n    // part and total must have the same units\r\n    function proportion(uint256 amount, uint256 part, uint256 total)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return divRound(mul(amount, part), total);\r\n    }\r\n\r\n    //\r\n    // Open Zeppelin Math library below\r\n    //\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\n/// @title standard access roles of the Platform\r\n/// @dev constants are kept in CODE not in STORAGE so they are comparatively cheap\r\ncontract AccessRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // NOTE: All roles are set to the keccak256 hash of the\r\n    // CamelCased role name, i.e.\r\n    // ROLE_LOCKED_ACCOUNT_ADMIN = keccak256(\"LockedAccountAdmin\")\r\n\r\n    // May issue (generate) Neumarks\r\n    bytes32 internal constant ROLE_NEUMARK_ISSUER = 0x921c3afa1f1fff707a785f953a1e197bd28c9c50e300424e015953cbf120c06c;\r\n\r\n    // May burn Neumarks it owns\r\n    bytes32 internal constant ROLE_NEUMARK_BURNER = 0x19ce331285f41739cd3362a3ec176edffe014311c0f8075834fdd19d6718e69f;\r\n\r\n    // May create new snapshots on Neumark\r\n    bytes32 internal constant ROLE_SNAPSHOT_CREATOR = 0x08c1785afc57f933523bc52583a72ce9e19b2241354e04dd86f41f887e3d8174;\r\n\r\n    // May enable/disable transfers on Neumark\r\n    bytes32 internal constant ROLE_TRANSFER_ADMIN = 0xb6527e944caca3d151b1f94e49ac5e223142694860743e66164720e034ec9b19;\r\n\r\n    // may reclaim tokens/ether from contracts supporting IReclaimable interface\r\n    bytes32 internal constant ROLE_RECLAIMER = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\r\n\r\n    // represents legally platform operator in case of forks and contracts with legal agreement attached. keccak256(\"PlatformOperatorRepresentative\")\r\n    bytes32 internal constant ROLE_PLATFORM_OPERATOR_REPRESENTATIVE = 0xb2b321377653f655206f71514ff9f150d0822d062a5abcf220d549e1da7999f0;\r\n\r\n    // allows to deposit EUR-T and allow addresses to send and receive EUR-T. keccak256(\"EurtDepositManager\")\r\n    bytes32 internal constant ROLE_EURT_DEPOSIT_MANAGER = 0x7c8ecdcba80ce87848d16ad77ef57cc196c208fc95c5638e4a48c681a34d4fe7;\r\n\r\n    // allows to register identities and change associated claims keccak256(\"IdentityManager\")\r\n    bytes32 internal constant ROLE_IDENTITY_MANAGER = 0x32964e6bc50f2aaab2094a1d311be8bda920fc4fb32b2fb054917bdb153a9e9e;\r\n\r\n    // allows to replace controller on euro token and to destroy tokens without withdraw kecckak256(\"EurtLegalManager\")\r\n    bytes32 internal constant ROLE_EURT_LEGAL_MANAGER = 0x4eb6b5806954a48eb5659c9e3982d5e75bfb2913f55199877d877f157bcc5a9b;\r\n\r\n    // allows to change known interfaces in universe kecckak256(\"UniverseManager\")\r\n    bytes32 internal constant ROLE_UNIVERSE_MANAGER = 0xe8d8f8f9ea4b19a5a4368dbdace17ad71a69aadeb6250e54c7b4c7b446301738;\r\n\r\n    // allows to exchange gas for EUR-T keccak(\"GasExchange\")\r\n    bytes32 internal constant ROLE_GAS_EXCHANGE = 0x9fe43636e0675246c99e96d7abf9f858f518b9442c35166d87f0934abef8a969;\r\n\r\n    // allows to set token exchange rates keccak(\"TokenRateOracle\")\r\n    bytes32 internal constant ROLE_TOKEN_RATE_ORACLE = 0xa80c3a0c8a5324136e4c806a778583a2a980f378bdd382921b8d28dcfe965585;\r\n}\r\n\r\ncontract IBasicToken {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    /// @param owner The address that's balance is being requested\r\n    /// @return The balance of `owner` at the current block\r\n    function balanceOf(address owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance);\r\n\r\n    /// @notice Send `amount` tokens to `to` from `msg.sender`\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\n/// @title allows deriving contract to recover any token or ether that it has balance of\r\n/// @notice note that this opens your contracts to claims from various people saying they lost tokens and they want them back\r\n///     be ready to handle such claims\r\n/// @dev use with care!\r\n///     1. ROLE_RECLAIMER is allowed to claim tokens, it's not returning tokens to original owner\r\n///     2. in derived contract that holds any token by design you must override `reclaim` and block such possibility.\r\n///         see ICBMLockedAccount as an example\r\ncontract Reclaimable is AccessControlled, AccessRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    IBasicToken constant internal RECLAIM_ETHER = IBasicToken(0x0);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function reclaim(IBasicToken token)\r\n        public\r\n        only(ROLE_RECLAIMER)\r\n    {\r\n        address reclaimer = msg.sender;\r\n        if(token == RECLAIM_ETHER) {\r\n            reclaimer.transfer(address(this).balance);\r\n        } else {\r\n            uint256 balance = token.balanceOf(this);\r\n            require(token.transfer(reclaimer, balance));\r\n        }\r\n    }\r\n}\r\n\r\n/// @title uniquely identifies deployable (non-abstract) platform contract\r\n/// @notice cheap way of assigning implementations to knownInterfaces which represent system services\r\n///         unfortunatelly ERC165 does not include full public interface (ABI) and does not provide way to list implemented interfaces\r\n///         EIP820 still in the making\r\n/// @dev ids are generated as follows keccak256(\"neufund-platform:<contract name>\")\r\n///      ids roughly correspond to ABIs\r\ncontract IContractId {\r\n    /// @param id defined as above\r\n    /// @param version implementation version\r\n    function contractId() public pure returns (bytes32 id, uint256 version);\r\n}\r\n\r\ncontract IERC20Allowance {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param owner The address of the account that owns the token\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of owner that spender is allowed\r\n    ///  to spend\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining);\r\n\r\n    /// @notice `msg.sender` approves `spender` to spend `amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @param amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n    /// @notice Send `amount` tokens to `to` from `from` on the condition it\r\n    ///  is approved by `from`\r\n    /// @param from The address holding the tokens being transferred\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\ncontract IERC20Token is IBasicToken, IERC20Allowance {\r\n\r\n}\r\n\r\ncontract ITokenMetadata {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function symbol()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function name()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function decimals()\r\n        public\r\n        constant\r\n        returns (uint8);\r\n}\r\n\r\ncontract IERC223Token is IERC20Token, ITokenMetadata {\r\n\r\n    /// @dev Departure: We do not log data, it has no advantage over a standard\r\n    ///     log event. By sticking to the standard log event we\r\n    ///     stay compatible with constracts that expect and ERC20 token.\r\n\r\n    // event Transfer(\r\n    //    address indexed from,\r\n    //    address indexed to,\r\n    //    uint256 amount,\r\n    //    bytes data);\r\n\r\n\r\n    /// @dev Departure: We do not use the callback on regular transfer calls to\r\n    ///     stay compatible with constracts that expect and ERC20 token.\r\n\r\n    // function transfer(address to, uint256 amount)\r\n    //     public\r\n    //     returns (bool);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function transfer(address to, uint256 amount, bytes data)\r\n        public\r\n        returns (bool);\r\n}\r\n\r\ncontract IGasExchange {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// @notice logged on eur-t to gas (ether) exchange\r\n    /// gasRecipient obtained amountWei gas, there is additional fee of exchangeFeeEurUlps\r\n    event LogGasExchange(\r\n        address indexed gasRecipient,\r\n        uint256 amountEurUlps,\r\n        uint256 exchangeFeeFrac,\r\n        uint256 amountWei,\r\n        uint256 rate\r\n    );\r\n\r\n    event LogSetExchangeRate(\r\n        address indexed numeratorToken,\r\n        address indexed denominatorToken,\r\n        uint256 rate\r\n    );\r\n\r\n    event LogReceivedEther(\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public methods\r\n    ////////////////////////\r\n\r\n    /// @notice will exchange amountEurUlps of gasRecipient balance into ether\r\n    /// @dev EuroTokenController has permanent allowance for gasExchange contract to make such exchange possible when gasRecipient has no Ether\r\n    ///     (chicken and egg problem is solved). The rate from token rate oracle will be used\r\n    ///     exchangeFeeFraction will be deduced before the exchange happens\r\n    /// @dev you should probably apply access modifier in the implementation\r\n    function gasExchange(address gasRecipient, uint256 amountEurUlps, uint256 exchangeFeeFraction)\r\n        public;\r\n\r\n    /// @notice see above. allows for batching gas exchanges\r\n    function gasExchangeMultiple(address[] gasRecipients, uint256[] amountsEurUlps, uint256 exchangeFeeFraction)\r\n        public;\r\n\r\n    /// sets current euro to ether exchange rate, also sets inverse\r\n    /// ROLE_TOKEN_RATE_ORACLE is allowed to provide rates. we do not implement decentralized oracle here\r\n    /// there is no so actual working decentralized oracle ecosystem\r\n    /// the closes is MakerDao Medianizer at https://etherscan.io/address/0x729D19f657BD0614b4985Cf1D82531c67569197B#code but it's still centralized and only USD/ETH\r\n    /// Oraclize is centralized and you still need to pay fees.\r\n    /// Gnosis does not seem to be working\r\n    /// it seems that for Neufund investor it's best to trust Platform Operator to provide correct information, Platform is aligned via NEU and has no incentive to lie\r\n    /// SimpleExchange is replaceable via Universe. when proper oracle is available we'll move to it\r\n    /// @param numeratorToken token to be converted from\r\n    /// @param denominatorToken token to be converted to\r\n    /// @param rateFraction a decimal fraction (see Math.decimalFraction) of numeratorToken to denominatorToken\r\n    /// example: to set rate of eur to eth you provide (euroToken, etherToken, 0.0016129032258064516129032*10**18)\r\n    /// example: to set rate of eth to eur you provide (etherToken, euroToken, 620*10**18)\r\n    /// @dev you should probably apply access modifier in the implementation\r\n    function setExchangeRate(IERC223Token numeratorToken, IERC223Token denominatorToken, uint256 rateFraction)\r\n        public;\r\n\r\n    /// @notice see above. allows for batching gas exchanges\r\n    /// @dev you should probably apply access modifier in the implementation\r\n    function setExchangeRates(IERC223Token[] numeratorTokens, IERC223Token[] denominatorTokens, uint256[] rateFractions)\r\n        public;\r\n}\r\n\r\ncontract ITokenExchangeRateOracle {\r\n    /// @notice provides actual price of 'numeratorToken' in 'denominatorToken'\r\n    ///     returns timestamp at which price was obtained in oracle\r\n    function getExchangeRate(address numeratorToken, address denominatorToken)\r\n        public\r\n        constant\r\n        returns (uint256 rateFraction, uint256 timestamp);\r\n\r\n    /// @notice allows to retreive multiple exchange rates in once call\r\n    function getExchangeRates(address[] numeratorTokens, address[] denominatorTokens)\r\n        public\r\n        constant\r\n        returns (uint256[] rateFractions, uint256[] timestamps);\r\n}\r\n\r\n/// @title simple exchange providing EUR to ETH exchange rate and gas exchange\r\n/// see below discussion on oracle type used\r\ncontract SimpleExchange is\r\n    ITokenExchangeRateOracle,\r\n    IGasExchange,\r\n    IContractId,\r\n    Reclaimable,\r\n    Math\r\n{\r\n    ////////////////////////\r\n    // Data types\r\n    ////////////////////////\r\n\r\n    struct TokenRate {\r\n        // rate of numerator token to denominator token\r\n        uint128 rateFraction;\r\n        // timestamp of where rate was updated\r\n        uint128 timestamp;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // ether token to store and transfer ether\r\n    IERC223Token private ETHER_TOKEN;\r\n    // euro token to store and transfer euro\r\n    IERC223Token private EURO_TOKEN;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // rate from numerator to denominator\r\n    mapping (address => mapping (address => TokenRate)) private _rates;\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    constructor(\r\n        IAccessPolicy accessPolicy,\r\n        IERC223Token euroToken,\r\n        IERC223Token etherToken\r\n    )\r\n        AccessControlled(accessPolicy)\r\n        Reclaimable()\r\n        public\r\n    {\r\n        EURO_TOKEN = euroToken;\r\n        ETHER_TOKEN = etherToken;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public methods\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IGasExchange\r\n    //\r\n\r\n    function gasExchange(address gasRecipient, uint256 amountEurUlps, uint256 exchangeFeeFraction)\r\n        public\r\n        only(ROLE_GAS_EXCHANGE)\r\n    {\r\n        // fee must be less than 100%\r\n        assert(exchangeFeeFraction < 10**18);\r\n        (uint256 rate, uint256 rateTimestamp) = getExchangeRatePrivate(EURO_TOKEN, ETHER_TOKEN);\r\n        // require if rate older than 1 hours\r\n        require(block.timestamp - rateTimestamp < 1 hours, \"NF_SEX_OLD_RATE\");\r\n        gasExchangePrivate(gasRecipient, amountEurUlps, exchangeFeeFraction, rate);\r\n    }\r\n\r\n    function gasExchangeMultiple(\r\n        address[] gasRecipients,\r\n        uint256[] amountsEurUlps,\r\n        uint256 exchangeFeeFraction\r\n    )\r\n        public\r\n        only(ROLE_GAS_EXCHANGE)\r\n    {\r\n        // fee must be less than 100%\r\n        assert(exchangeFeeFraction < 10**18);\r\n        require(gasRecipients.length == amountsEurUlps.length);\r\n        (uint256 rate, uint256 rateTimestamp) = getExchangeRatePrivate(EURO_TOKEN, ETHER_TOKEN);\r\n        // require if rate older than 1 hours\r\n        require(block.timestamp - rateTimestamp < 1 hours, \"NF_SEX_OLD_RATE\");\r\n        uint256 idx;\r\n        while(idx < gasRecipients.length) {\r\n            gasExchangePrivate(gasRecipients[idx], amountsEurUlps[idx], exchangeFeeFraction, rate);\r\n            idx += 1;\r\n        }\r\n    }\r\n\r\n    /// @notice please read method description in the interface\r\n    /// @dev we always set a rate and an inverse rate! so you call once with eur/eth and you also get eth/eur\r\n    function setExchangeRate(IERC223Token numeratorToken, IERC223Token denominatorToken, uint256 rateFraction)\r\n        public\r\n        only(ROLE_TOKEN_RATE_ORACLE)\r\n    {\r\n        setExchangeRatePrivate(numeratorToken, denominatorToken, rateFraction);\r\n    }\r\n\r\n    function setExchangeRates(IERC223Token[] numeratorTokens, IERC223Token[] denominatorTokens, uint256[] rateFractions)\r\n        public\r\n        only(ROLE_TOKEN_RATE_ORACLE)\r\n    {\r\n        require(numeratorTokens.length == denominatorTokens.length);\r\n        require(numeratorTokens.length == rateFractions.length);\r\n        for(uint256 idx = 0; idx < numeratorTokens.length; idx++) {\r\n            setExchangeRatePrivate(numeratorTokens[idx], denominatorTokens[idx], rateFractions[idx]);\r\n        }\r\n    }\r\n\r\n    //\r\n    // Implements ITokenExchangeRateOracle\r\n    //\r\n\r\n    function getExchangeRate(address numeratorToken, address denominatorToken)\r\n        public\r\n        constant\r\n        returns (uint256 rateFraction, uint256 timestamp)\r\n    {\r\n        return getExchangeRatePrivate(numeratorToken, denominatorToken);\r\n    }\r\n\r\n    function getExchangeRates(address[] numeratorTokens, address[] denominatorTokens)\r\n        public\r\n        constant\r\n        returns (uint256[] rateFractions, uint256[] timestamps)\r\n    {\r\n        require(numeratorTokens.length == denominatorTokens.length);\r\n        uint256 idx;\r\n        rateFractions = new uint256[](numeratorTokens.length);\r\n        timestamps = new uint256[](denominatorTokens.length);\r\n        while(idx < numeratorTokens.length) {\r\n            (uint256 rate, uint256 timestamp) = getExchangeRatePrivate(numeratorTokens[idx], denominatorTokens[idx]);\r\n            rateFractions[idx] = rate;\r\n            timestamps[idx] = timestamp;\r\n            idx += 1;\r\n        }\r\n    }\r\n\r\n    //\r\n    // Implements IContractId\r\n    //\r\n\r\n    function contractId() public pure returns (bytes32 id, uint256 version) {\r\n        return (0x434a1a753d1d39381c462f37c155e520ae6f86ad79289abca9cde354a0cebd68, 0);\r\n    }\r\n\r\n    //\r\n    // Override default function\r\n    //\r\n\r\n    function () external payable {\r\n        emit LogReceivedEther(msg.sender, msg.value, address(this).balance);\r\n    }\r\n\r\n    ////////////////////////\r\n    // Private methods\r\n    ////////////////////////\r\n\r\n    function gasExchangePrivate(\r\n        address gasRecipient,\r\n        uint256 amountEurUlps,\r\n        uint256 exchangeFeeFraction,\r\n        uint256 rate\r\n    )\r\n        private\r\n    {\r\n        // exchange declared amount - the exchange fee, no overflow, fee < 0\r\n        uint256 amountEthWei = decimalFraction(amountEurUlps - decimalFraction(amountEurUlps, exchangeFeeFraction), rate);\r\n        // take all euro tokens\r\n        assert(EURO_TOKEN.transferFrom(gasRecipient, this, amountEurUlps));\r\n        // transfer ether to gasRecipient\r\n        gasRecipient.transfer(amountEthWei);\r\n\r\n        emit LogGasExchange(gasRecipient, amountEurUlps, exchangeFeeFraction, amountEthWei, rate);\r\n    }\r\n\r\n    function getExchangeRatePrivate(address numeratorToken, address denominatorToken)\r\n        private\r\n        constant\r\n        returns (uint256 rateFraction, uint256 timestamp)\r\n    {\r\n        TokenRate storage requested_rate = _rates[numeratorToken][denominatorToken];\r\n        TokenRate storage inversed_requested_rate = _rates[denominatorToken][numeratorToken];\r\n        if (requested_rate.timestamp > 0) {\r\n            return (requested_rate.rateFraction, requested_rate.timestamp);\r\n        }\r\n        else if (inversed_requested_rate.timestamp > 0) {\r\n            uint256 invRateFraction = proportion(10**18, 10**18, inversed_requested_rate.rateFraction);\r\n            return (invRateFraction, inversed_requested_rate.timestamp);\r\n        }\r\n        // will return (0, 0) == (rateFraction, timestamp)\r\n    }\r\n\r\n    function setExchangeRatePrivate(\r\n        IERC223Token numeratorToken,\r\n        IERC223Token denominatorToken,\r\n        uint256 rateFraction\r\n    )\r\n        private\r\n    {\r\n        require(numeratorToken != denominatorToken, \"NF_SEX_SAME_N_D\");\r\n        assert(rateFraction > 0);\r\n        assert(rateFraction < 2**128);\r\n        uint256 invRateFraction = proportion(10**18, 10**18, rateFraction);\r\n\r\n        // Inversion of rate biger than 10**36 is not possible and it will always be 0.\r\n        // require(invRateFraction < 2**128, \"NF_SEX_OVR_INV\");\r\n        require(denominatorToken.decimals() == numeratorToken.decimals(), \"NF_SEX_DECIMALS\");\r\n        // TODO: protect against outliers\r\n\r\n        if (_rates[denominatorToken][numeratorToken].timestamp > 0) {\r\n            _rates[denominatorToken][numeratorToken] = TokenRate({\r\n                rateFraction: uint128(invRateFraction),\r\n                timestamp: uint128(block.timestamp)\r\n            });\r\n        }\r\n        else {\r\n            _rates[numeratorToken][denominatorToken] = TokenRate({\r\n                rateFraction: uint128(rateFraction),\r\n                timestamp: uint128(block.timestamp)\r\n            });\r\n        }\r\n\r\n        emit LogSetExchangeRate(numeratorToken, denominatorToken, rateFraction);\r\n        emit LogSetExchangeRate(denominatorToken, numeratorToken, invRateFraction);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gasRecipient\",\"type\":\"address\"},{\"name\":\"amountEurUlps\",\"type\":\"uint256\"},{\"name\":\"exchangeFeeFraction\",\"type\":\"uint256\"}],\"name\":\"gasExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPolicy\",\"type\":\"address\"},{\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"setAccessPolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gasRecipients\",\"type\":\"address[]\"},{\"name\":\"amountsEurUlps\",\"type\":\"uint256[]\"},{\"name\":\"exchangeFeeFraction\",\"type\":\"uint256\"}],\"name\":\"gasExchangeMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numeratorToken\",\"type\":\"address\"},{\"name\":\"denominatorToken\",\"type\":\"address\"},{\"name\":\"rateFraction\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numeratorTokens\",\"type\":\"address[]\"},{\"name\":\"denominatorTokens\",\"type\":\"address[]\"}],\"name\":\"getExchangeRates\",\"outputs\":[{\"name\":\"rateFractions\",\"type\":\"uint256[]\"},{\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"numeratorToken\",\"type\":\"address\"},{\"name\":\"denominatorToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"rateFraction\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numeratorTokens\",\"type\":\"address[]\"},{\"name\":\"denominatorTokens\",\"type\":\"address[]\"},{\"name\":\"rateFractions\",\"type\":\"uint256[]\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"accessPolicy\",\"type\":\"address\"},{\"name\":\"euroToken\",\"type\":\"address\"},{\"name\":\"etherToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldPolicy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPolicy\",\"type\":\"address\"}],\"name\":\"LogAccessPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gasRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountEurUlps\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangeFeeFrac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogGasExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"numeratorToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"denominatorToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogSetExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogReceivedEther\",\"type\":\"event\"}]","ContractName":"SimpleExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ae38c27e646959735ec70d77ed4ecc03a3eff49000000000000000000000000061646f3bede9e1a24d387feb661888b4cc1587d80000000000000000000000000b7dc5a43ce121b4eaaa41b0f4f43bba47bb8951","Library":"","SwarmSource":"bzzr://c7ef9d1149a7d7d70516a99ded68dc253e6e94aa93c025a5ed3cd959dc1c1b9d"}]}