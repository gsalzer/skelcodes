{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20; // solhint-disable-line\r\n\r\n\r\n/*\r\n  modified pyramid contract by Cryptopinions (https://ethverify.net)\r\n*/\r\ncontract DailyDivsSavings{\r\n  using SafeMath for uint;\r\n  address public ceo;\r\n  address public ceo2;\r\n  mapping(address => address) public referrer;//who has referred who\r\n  mapping(address => uint256) public referralsHeld;//amount of eth from referrals held\r\n  mapping(address => uint256) public refBuys;//how many people you have referred\r\n  mapping(address => uint256) public tokenBalanceLedger_;\r\n  mapping(address => int256) public payoutsTo_;\r\n  uint256 public tokenSupply_ = 0;\r\n  uint256 public profitPerShare_;\r\n  uint256 constant internal magnitude = 2**64;\r\n  uint256 constant internal tokenPriceInitial_ = 0.0000000001 ether;\r\n  uint8 constant internal dividendFee_ = 50;\r\n\r\n  event onTokenPurchase(\r\n      address indexed customerAddress,\r\n      uint256 incomingEthereum,\r\n      uint256 tokensMinted,\r\n      address indexed referredBy\r\n  );\r\n   event onTokenSell(\r\n       address indexed customerAddress,\r\n       uint256 tokensBurned,\r\n       uint256 ethereumEarned\r\n   );\r\n\r\n   event onReinvestment(\r\n       address indexed customerAddress,\r\n       uint256 ethereumReinvested,\r\n       uint256 tokensMinted\r\n   );\r\n\r\n   event onWithdraw(\r\n       address indexed customerAddress,\r\n       uint256 ethereumWithdrawn\r\n   );\r\n\r\n   function DailyDivsSavings() public{\r\n     ceo=msg.sender;\r\n     ceo2=0x93c5371707D2e015aEB94DeCBC7892eC1fa8dd80;\r\n   }\r\n\r\n  function ethereumToTokens_(uint _ethereum) public view returns(uint){\r\n    //require(_ethereum>tokenPriceInitial_);\r\n    return _ethereum.div(tokenPriceInitial_);\r\n  }\r\n  function tokensToEthereum_(uint _tokens) public view returns(uint){\r\n    return tokenPriceInitial_.mul(_tokens);\r\n  }\r\n  function myHalfDividends() public view returns(uint){\r\n    return (dividendsOf(msg.sender)*98)/200;//no safemath because for external use only\r\n  }\r\n  function myDividends()\r\n    public\r\n    view\r\n    returns(uint256)\r\n  {\r\n      return dividendsOf(msg.sender) ;\r\n  }\r\n  function dividendsOf(address _customerAddress)\r\n      view\r\n      public\r\n      returns(uint)\r\n  {\r\n      return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n  }\r\n  function balance() public view returns(uint256){\r\n    return address(this).balance;\r\n  }\r\n  function mySavings() public view returns(uint){\r\n    return tokensToEthereum_(tokenBalanceLedger_[msg.sender]);\r\n  }\r\n  function depositNoRef() public payable{\r\n    deposit(0);\r\n  }\r\n  function deposit(address ref) public payable{\r\n    require(ref!=msg.sender);\r\n    if(referrer[msg.sender]==0 && ref!=0){\r\n      referrer[msg.sender]=ref;\r\n      refBuys[ref]+=1;\r\n    }\r\n\r\n    purchaseTokens(msg.value);\r\n  }\r\n  function purchaseTokens(uint _incomingEthereum) private\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _dividends = _undividedDividends;\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens.add(tokenSupply_) > tokenSupply_);\r\n\r\n\r\n\r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        //remove divs from before buy\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        // fire event\r\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, 0);\r\n\r\n        //return _amountOfTokens;\r\n    }\r\n    function sell(uint _amountOfEth) public {\r\n      reinvest();\r\n      sell_(ethereumToTokens_(_amountOfEth));\r\n      withdraw();\r\n    }\r\n    function withdraw()\r\n    private\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(); // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        //_dividends += referralBalance_[_customerAddress];\r\n        //referralBalance_[_customerAddress] = 0;\r\n\r\n        //payout\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    function sell_(uint256 _amountOfTokens)\r\n        private\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        require(tokenBalanceLedger_[_customerAddress]>0);\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        //uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = _ethereum;//SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        // no divs on sell\r\n        //if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            //profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        //}\r\n\r\n        // fire event\r\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n    function reinvest()\r\n    public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(); // retrieve ref. bonus later in the code\r\n        //require(_dividends>1);\r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        //_dividends += referralBalance_[_customerAddress];\r\n        //referralBalance_[_customerAddress] = 0;\r\n\r\n        uint halfDivs=_dividends.div(2);\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        if(ethereumToTokens_(halfDivs.add(referralsHeld[msg.sender]))>0){\r\n          purchaseTokens(halfDivs.add(referralsHeld[msg.sender]));//uint256 _tokens =\r\n          referralsHeld[msg.sender]=0;\r\n        }\r\n\r\n        //give half to the referrer\r\n\r\n        address refaddr=referrer[_customerAddress];\r\n        if(refaddr==0){\r\n          uint quarterDivs=halfDivs.div(2);\r\n          referralsHeld[ceo]=referralsHeld[ceo].add(quarterDivs);\r\n          referralsHeld[ceo2]=referralsHeld[ceo2].add(quarterDivs);\r\n        }\r\n        else{\r\n          referralsHeld[refaddr]=referralsHeld[refaddr].add(halfDivs);\r\n        }\r\n\r\n        // fire event\r\n        onReinvestment(_customerAddress, _dividends, halfDivs);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myHalfDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mySavings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceLedger_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitPerShare_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositNoRef\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfEth\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralsHeld\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"DailyDivsSavings","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a615bfa27aa2fb614e80f35fffb780893665c2f4b2d982f907c72ed70c554a3"}]}