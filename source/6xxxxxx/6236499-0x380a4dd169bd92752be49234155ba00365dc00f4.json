{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/zos-lib/contracts/application/versioning/ImplementationProvider.sol\r\n\r\n/**\r\n * @title ImplementationProvider\r\n * @dev Interface for providing implementation addresses for other contracts by name.\r\n */\r\ninterface ImplementationProvider {\r\n  /**\r\n   * @dev Abstract function to return the implementation address of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @return Implementation address of the contract.\r\n   */\r\n  function getImplementation(string contractName) public view returns (address);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/zos-lib/contracts/application/versioning/Package.sol\r\n\r\n/**\r\n * @title Package\r\n * @dev Collection of contracts grouped into versions.\r\n * Contracts with the same name can have different implementation addresses in different versions.\r\n */\r\ncontract Package is Ownable {\r\n  /**\r\n   * @dev Emitted when a version is added to the package.\r\n   * XXX The version is not indexed due to truffle testing constraints.\r\n   * @param version Name of the added version.\r\n   * @param provider ImplementationProvider associated with the version.\r\n   */\r\n  event VersionAdded(string version, ImplementationProvider provider);\r\n\r\n  /*\r\n   * @dev Mapping associating versions and their implementation providers.\r\n   */\r\n  mapping (string => ImplementationProvider) internal versions;\r\n\r\n  /**\r\n   * @dev Returns the implementation provider of a version.\r\n   * @param version Name of the version.\r\n   * @return The implementation provider of the version.\r\n   */\r\n  function getVersion(string version) public view returns (ImplementationProvider) {\r\n    ImplementationProvider provider = versions[version];\r\n    return provider;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds the implementation provider of a new version to the package.\r\n   * @param version Name of the version.\r\n   * @param provider ImplementationProvider associated with the version.\r\n   */\r\n  function addVersion(string version, ImplementationProvider provider) public onlyOwner {\r\n    require(!hasVersion(version), \"Given version is already registered in package\");\r\n    versions[version] = provider;\r\n    emit VersionAdded(version, provider);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether a version is present in the package.\r\n   * @param version Name of the version.\r\n   * @return true if the version is already in the package, false otherwise.\r\n   */\r\n  function hasVersion(string version) public view returns (bool) {\r\n    return address(versions[version]) != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the implementation address for a given version and contract name.\r\n   * @param version Name of the version.\r\n   * @param contractName Name of the contract.\r\n   * @return Address where the contract is implemented.\r\n   */\r\n  function getImplementation(string version, string contractName) public view returns (address) {\r\n    ImplementationProvider provider = getVersion(version);\r\n    return provider.getImplementation(contractName);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"addVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"}],\"name\":\"hasVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"VersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Package","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df8d50d2bf5ada94114f89f012fa50372c5aad0233cd4a57152831e0259b0168"}]}