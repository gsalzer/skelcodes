{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Forwarder {\r\n    using SafeMath for *;\r\n\r\n    string public name = \"Forwarder\";\r\n    address private currentCorpBank1_ = 0xc95EFA676762BE92F70405B25214cd10616d0089;\r\n    address private currentCorpBank2_ = 0xF29527437Eb2AE5Da10db32d49E27Cb22F04b875;\r\n    address private currentCorpBank3_ = 0x19306Bfa01cB57A3F1E3CB80d2ACE2057661F41C;\r\n    \r\n    constructor() \r\n        public\r\n    {\r\n        //constructor does nothing.\r\n    }\r\n    \r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        // done so that if any one tries to dump eth into this contract, we can\r\n        // just forward it to corp bank.\r\n        if (currentCorpBank1_ != address(0) && currentCorpBank2_ != address(0) && currentCorpBank3_ != address(0))\r\n            uint total = msg.value;\r\n            uint div2 = (total/10).mul(3);\r\n            uint div3 = (total/10).mul(4);\r\n            uint div1 = (total.sub(div2)).sub(div3);\r\n            currentCorpBank1_.transfer(div1);\r\n            currentCorpBank2_.transfer(div2);\r\n            currentCorpBank3_.transfer(div3);\r\n    }\r\n    \r\n    function deposit()\r\n        public \r\n        payable\r\n        returns(bool)\r\n    {\r\n        require(msg.value > 0, \"Forwarder Deposit failed - zero deposits not allowed\");\r\n        uint total = msg.value;\r\n        uint div2 = (total/10).mul(3);\r\n        uint div3 = (total/10).mul(4);\r\n        uint div1 = (total.sub(div2)).sub(div3);\r\n        currentCorpBank1_.transfer(div1);\r\n        currentCorpBank2_.transfer(div2);\r\n        currentCorpBank3_.transfer(div3);\r\n        return(true);\r\n    }\r\n\r\n    function withdraw()\r\n        public\r\n        payable\r\n    {\r\n        require(msg.sender == currentCorpBank1_|| msg.sender == currentCorpBank2_ || msg.sender == currentCorpBank3_);\r\n        uint total = address(this).balance;\r\n        uint div2 = (total/10).mul(3);\r\n        uint div3 = (total/10).mul(4);\r\n        uint div1 = (total.sub(div2)).sub(div3);\r\n        currentCorpBank1_.transfer(div1);\r\n        currentCorpBank2_.transfer(div2);\r\n        currentCorpBank3_.transfer(div3);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Forwarder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24b0f06805518f4cd26cc1a6e09835cb3a788545d7be8e24ce8f22c1c338596e"}]}