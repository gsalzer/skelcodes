{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * MonetaryCoin AddressList Smart contract\r\n * For full details see: https://github.com/Monetary-Foundation/MonetaryCoin\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AddressList\r\n * @dev AddressList\r\n * Simple storage for addresses that can participate in the distribution\r\n */\r\ncontract AddressList is Ownable {\r\n\r\n  /**\r\n  * @dev Map of addresses that have been whitelisted (and passed KYC).\r\n  * Whitelist value > 0 indicates the address has been whitelisted.\r\n  */\r\n  mapping(address => uint8) public whitelist;\r\n  \r\n  address operator_;\r\n\r\n  /**\r\n  * @dev init the contract and the operator address\r\n  */\r\n  constructor(address _operator) public{\r\n    require(_operator != address(0));\r\n    operator_ = _operator;\r\n  }\r\n\r\n  /**\r\n  * @dev Modifier Throws if called by any account other than the operator_ or owner.\r\n  */\r\n  modifier onlyOps() {\r\n    require((msg.sender == operator_) || (msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  event OperatorTransferred(address indexed newOperator);\r\n\r\n  /**\r\n  * @dev Allows the current Owner to transfer control to a newOperator.\r\n  * @param newOperator The address to transfer operator to.\r\n  */\r\n  function transferOperator(address newOperator) public onlyOwner {\r\n    operator_ = newOperator;\r\n    emit OperatorTransferred(operator_);\r\n  }\r\n\r\n  /**\r\n  * @dev get operator\r\n  * @return the address of the operator\r\n  */\r\n  function operator() public view returns (address) {\r\n    return operator_;\r\n  }\r\n\r\n\r\n  event WhitelistUpdated(address indexed account, uint8 phase);\r\n\r\n  /**\r\n  * @dev Allows ops to add accounts to the whitelist.\r\n  * Only those accounts will be allowed to contribute during the distribution.\r\n  * _phase > 0: Can contribute\r\n  * _phase = 0: Cannot contribute at all (not whitelisted).\r\n  * @return true\r\n  */\r\n  function updateWhitelist(address _account, uint8 _phase) external onlyOps returns (bool) {\r\n    require(_account != address(0));\r\n    require(_phase <= 2);\r\n\r\n    whitelist[_account] = _phase;\r\n\r\n    emit WhitelistUpdated(_account, _phase);\r\n\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AddressList","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000320999bfefc081c8a4b901c7c8afac463cfd1a9e","Library":"","SwarmSource":"bzzr://0cd493a773e22e947cf0d2d00b138b214fb5de81fb16cb3812e5d2f92c46149e"}]}