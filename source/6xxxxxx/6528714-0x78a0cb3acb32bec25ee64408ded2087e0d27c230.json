{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function isContract(address addr) internal view returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(addr), 0)\r\n        }\r\n    }\r\n\r\n    function handleReturnBool() internal pure returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch eq(returndatasize(), 32) // not a std erc20\r\n            case 1 {\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch gt(returndatasize(), 32) // std erc20\r\n            case 1 {\r\n                returndatacopy(0, 64, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch lt(returndatasize(), 32) // anything else, should revert for safety\r\n            case 1 {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(address token, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmTransferFrom(address token, address from, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), from, to, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmApprove(address token, address spender, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"approve(address,uint256)\")), spender, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    //\r\n\r\n    function checkedTransfer(ERC20 token, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 balance = token.balanceOf(this);\r\n            asmTransfer(token, to, value);\r\n            require(token.balanceOf(this) == balance.sub(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 toBalance = token.balanceOf(to);\r\n            asmTransferFrom(token, from, to, value);\r\n            require(token.balanceOf(to) == toBalance.add(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    //\r\n\r\n    function asmName(address token) internal view returns(bytes32) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"name()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n\r\n    function asmSymbol(address token) internal view returns(bytes32) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"symbol()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/ext/ERC1003Token.sol\r\n\r\ncontract ERC1003Caller is Ownable {\r\n    function makeCall(address target, bytes data) external payable onlyOwner returns (bool) {\r\n        // solium-disable-next-line security/no-call-value\r\n        return target.call.value(msg.value)(data);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC1003Token is ERC20 {\r\n    ERC1003Caller private _caller = new ERC1003Caller();\r\n    address[] internal _sendersStack;\r\n\r\n    function caller() public view returns(ERC1003Caller) {\r\n        return _caller;\r\n    }\r\n\r\n    function approveAndCall(address to, uint256 value, bytes data) public payable returns (bool) {\r\n        _sendersStack.push(msg.sender);\r\n        approve(to, value);\r\n        require(_caller.makeCall.value(msg.value)(to, data));\r\n        _sendersStack.length -= 1;\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address to, uint256 value, bytes data) public payable returns (bool) {\r\n        transfer(to, value);\r\n        require(_caller.makeCall.value(msg.value)(to, data));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        address spender = (from != address(_caller)) ? from : _sendersStack[_sendersStack.length - 1];\r\n        return super.transferFrom(spender, to, value);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    function tokensCount() public view returns(uint256);\r\n    function tokens(uint i) public view returns(ERC20);\r\n    function bundlingEnabled() public view returns(bool);\r\n    \r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n\r\n    // Owner methods\r\n    function disableBundling() public;\r\n    function enableBundling() public;\r\n\r\n    bytes4 public constant InterfaceId_IBasicMultiToken = 0xd5c368b6;\r\n\t  /**\r\n\t   * 0xd5c368b6 ===\r\n\t   *   bytes4(keccak256('tokensCount()')) ^\r\n\t   *   bytes4(keccak256('tokens(uint256)')) ^\r\n       *   bytes4(keccak256('bundlingEnabled()')) ^\r\n       *   bytes4(keccak256('bundleFirstTokens(address,uint256,uint256[])')) ^\r\n       *   bytes4(keccak256('bundle(address,uint256)')) ^\r\n       *   bytes4(keccak256('unbundle(address,uint256)')) ^\r\n       *   bytes4(keccak256('unbundleSome(address,uint256,address[])')) ^\r\n       *   bytes4(keccak256('disableBundling()')) ^\r\n       *   bytes4(keccak256('enableBundling()'))\r\n\t   */\r\n}\r\n\r\n// File: contracts/BasicMultiToken.sol\r\n\r\ncontract BasicMultiToken is Ownable, StandardToken, DetailedERC20, ERC1003Token, IBasicMultiToken, SupportsInterfaceWithLookup {\r\n    using CheckedERC20 for ERC20;\r\n    using CheckedERC20 for DetailedERC20;\r\n\r\n    ERC20[] private _tokens;\r\n    uint private _inLendingMode;\r\n    bool private _bundlingEnabled = true;\r\n\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event BundlingStatus(bool enabled);\r\n\r\n    modifier notInLendingMode {\r\n        require(_inLendingMode == 0, \"Operation can't be performed while lending\");\r\n        _;\r\n    }\r\n\r\n    modifier whenBundlingEnabled {\r\n        require(_bundlingEnabled, \"Bundling is disabled\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public DetailedERC20(\"\", \"\", 0)\r\n    {\r\n    }\r\n\r\n    function init(ERC20[] tokens, string theName, string theSymbol, uint8 theDecimals) public {\r\n        require(decimals == 0, \"constructor: decimals should be zero\");\r\n        require(theDecimals > 0, \"constructor: _decimals should not be zero\");\r\n        require(bytes(theName).length > 0, \"constructor: name should not be empty\");\r\n        require(bytes(theSymbol).length > 0, \"constructor: symbol should not be empty\");\r\n        require(tokens.length >= 2, \"Contract does not support less than 2 inner tokens\");\r\n\r\n        name = theName;\r\n        symbol = theSymbol;\r\n        decimals = theDecimals;\r\n        _tokens = tokens;\r\n\r\n        _registerInterface(InterfaceId_IBasicMultiToken);\r\n    }\r\n\r\n    function tokensCount() public view returns(uint) {\r\n        return _tokens.length;\r\n    }\r\n\r\n    function tokens(uint i) public view returns(ERC20) {\r\n        return _tokens[i];\r\n    }\r\n\r\n    function inLendingMode() public view returns(uint) {\r\n        return _inLendingMode;\r\n    }\r\n\r\n    function bundlingEnabled() public view returns(bool) {\r\n        return _bundlingEnabled;\r\n    }\r\n\r\n    function bundleFirstTokens(address beneficiary, uint256 amount, uint256[] tokenAmounts) public whenBundlingEnabled notInLendingMode {\r\n        require(totalSupply_ == 0, \"bundleFirstTokens: This method can be used with zero total supply only\");\r\n        _bundle(beneficiary, amount, tokenAmounts);\r\n    }\r\n\r\n    function bundle(address beneficiary, uint256 amount) public whenBundlingEnabled notInLendingMode {\r\n        require(totalSupply_ != 0, \"This method can be used with non zero total supply only\");\r\n        uint256[] memory tokenAmounts = new uint256[](_tokens.length);\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            tokenAmounts[i] = _tokens[i].balanceOf(this).mul(amount).div(totalSupply_);\r\n        }\r\n        _bundle(beneficiary, amount, tokenAmounts);\r\n    }\r\n\r\n    function unbundle(address beneficiary, uint256 value) public notInLendingMode {\r\n        unbundleSome(beneficiary, value, _tokens);\r\n    }\r\n\r\n    function unbundleSome(address beneficiary, uint256 value, ERC20[] someTokens) public notInLendingMode {\r\n        _unbundle(beneficiary, value, someTokens);\r\n    }\r\n\r\n    // Admin methods\r\n\r\n    function disableBundling() public onlyOwner {\r\n        require(_bundlingEnabled, \"Bundling is already disabled\");\r\n        _bundlingEnabled = false;\r\n        emit BundlingStatus(false);\r\n    }\r\n\r\n    function enableBundling() public onlyOwner {\r\n        require(!_bundlingEnabled, \"Bundling is already enabled\");\r\n        _bundlingEnabled = true;\r\n        emit BundlingStatus(true);\r\n    }\r\n\r\n    // Internal methods\r\n\r\n    function _bundle(address beneficiary, uint256 amount, uint256[] tokenAmounts) internal {\r\n        require(amount != 0, \"Bundling amount should be non-zero\");\r\n        require(_tokens.length == tokenAmounts.length, \"Lenghts of _tokens and tokenAmounts array should be equal\");\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            require(tokenAmounts[i] != 0, \"Token amount should be non-zero\");\r\n            _tokens[i].checkedTransferFrom(msg.sender, this, tokenAmounts[i]);\r\n        }\r\n\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[beneficiary] = balances[beneficiary].add(amount);\r\n        emit Bundle(msg.sender, beneficiary, amount);\r\n        emit Transfer(0, beneficiary, amount);\r\n    }\r\n\r\n    function _unbundle(address beneficiary, uint256 value, ERC20[] someTokens) internal {\r\n        require(someTokens.length > 0, \"Array of someTokens can't be empty\");\r\n\r\n        uint256 totalSupply = totalSupply_;\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        totalSupply_ = totalSupply.sub(value);\r\n        emit Unbundle(msg.sender, beneficiary, value);\r\n        emit Transfer(msg.sender, 0, value);\r\n\r\n        for (uint i = 0; i < someTokens.length; i++) {\r\n            for (uint j = 0; j < i; j++) {\r\n                require(someTokens[i] != someTokens[j], \"unbundleSome: should not unbundle same token multiple times\");\r\n            }\r\n            uint256 tokenAmount = someTokens[i].balanceOf(this).mul(value).div(totalSupply);\r\n            someTokens[i].checkedTransfer(beneficiary, tokenAmount);\r\n        }\r\n    }\r\n\r\n    // Instant Loans\r\n\r\n    function lend(address to, ERC20 token, uint256 amount, address target, bytes data) public payable {\r\n        uint256 prevBalance = token.balanceOf(this);\r\n        token.asmTransfer(to, amount);\r\n        _inLendingMode += 1;\r\n        require(caller().makeCall.value(msg.value)(target, data), \"lend: arbitrary call failed\");\r\n        _inLendingMode -= 1;\r\n        require(token.balanceOf(this) >= prevBalance, \"lend: lended token must be refilled\");\r\n    }\r\n}\r\n\r\n// File: contracts/FeeBasicMultiToken.sol\r\n\r\ncontract FeeBasicMultiToken is Ownable, BasicMultiToken {\r\n    using CheckedERC20 for ERC20;\r\n\r\n    uint256 constant public TOTAL_PERCRENTS = 1000000;\r\n    uint256 internal _lendFee;\r\n\r\n    function lendFee() public view returns(uint256) {\r\n        return _lendFee;\r\n    }\r\n\r\n    function setLendFee(uint256 theLendFee) public onlyOwner {\r\n        require(theLendFee <= 30000, \"setLendFee: fee should be not greater than 3%\");\r\n        _lendFee = theLendFee;\r\n    }\r\n\r\n    function lend(address to, ERC20 token, uint256 amount, address target, bytes data) public payable {\r\n        uint256 expectedBalance = token.balanceOf(this).mul(TOTAL_PERCRENTS.add(_lendFee)).div(TOTAL_PERCRENTS);\r\n        super.lend(to, token, amount, target, data);\r\n        require(token.balanceOf(this) >= expectedBalance, \"lend: tokens must be returned with lend fee\");\r\n    }\r\n}\r\n\r\n// File: contracts/implementation/AstraBasicMultiToken.sol\r\n\r\ncontract AstraBasicMultiToken is FeeBasicMultiToken {\r\n    function init(ERC20[] tokens, string theName, string theSymbol, uint8 /*theDecimals*/) public {\r\n        super.init(tokens, theName, theSymbol, 18);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inLendingMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bundlingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"bundleFirstTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"theName\",\"type\":\"string\"},{\"name\":\"theSymbol\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unbundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"someTokens\",\"type\":\"address[]\"}],\"name\":\"unbundleSome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"theLendFee\",\"type\":\"uint256\"}],\"name\":\"setLendFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_IBasicMultiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_PERCRENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unbundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BundlingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AstraBasicMultiToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0ae76901823d4050c5bfdb550e15a1715f0f52d0ca87b0cc821d5be23e6a2fc"}]}