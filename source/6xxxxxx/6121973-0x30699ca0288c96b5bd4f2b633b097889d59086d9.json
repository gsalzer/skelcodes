{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n\r\nhttps://fortisgames.com https://fortisgames.com https://fortisgames.com https://fortisgames.com https://fortisgames.com\r\n                                                                                                    \r\nFFFFFFFFFFFFFFFFFFFFFF                                           tttt            iiii                   \r\nF::::::::::::::::::::F                                        ttt:::t           i::::i                  \r\nF::::::::::::::::::::F                                        t:::::t            iiii                   \r\nFF::::::FFFFFFFFF::::F                                        t:::::t                                   \r\n  F:::::F       FFFFFFooooooooooo   rrrrr   rrrrrrrrr   ttttttt:::::ttttttt    iiiiiii     ssssssssss   \r\n  F:::::F           oo:::::::::::oo r::::rrr:::::::::r  t:::::::::::::::::t    i:::::i   ss::::::::::s  \r\n  F::::::FFFFFFFFFFo:::::::::::::::or:::::::::::::::::r t:::::::::::::::::t     i::::i ss:::::::::::::s \r\n  F:::::::::::::::Fo:::::ooooo:::::orr::::::rrrrr::::::rtttttt:::::::tttttt     i::::i s::::::ssss:::::s\r\n  F:::::::::::::::Fo::::o     o::::o r:::::r     r:::::r      t:::::t           i::::i  s:::::s  ssssss \r\n  F::::::FFFFFFFFFFo::::o     o::::o r:::::r     rrrrrrr      t:::::t           i::::i    s::::::s      \r\n  F:::::F          o::::o     o::::o r:::::r                  t:::::t           i::::i       s::::::s   \r\n  F:::::F          o::::o     o::::o r:::::r                  t:::::t    tttttt i::::i ssssss   s:::::s \r\nFF:::::::FF        o:::::ooooo:::::o r:::::r                  t::::::tttt:::::ti::::::is:::::ssss::::::s\r\nF::::::::FF        o:::::::::::::::o r:::::r                  tt::::::::::::::ti::::::is::::::::::::::s \r\nF::::::::FF         oo:::::::::::oo  r:::::r                    tt:::::::::::tti::::::i s:::::::::::ss  \r\nFFFFFFFFFFF           ooooooooooo    rrrrrrr                      ttttttttttt  iiiiiiii  sssssssssss    \r\n\r\n\r\nDiscord:   https://discord.gg/gDtTX62                                                                              \r\n\r\nAn interactive, variable-dividend rate contract with an ICO-capped price floor and collectibles.\r\nThis contract describes those collectibles. Don't get left with a hot potato!\r\n\r\n\r\n**/\r\n\r\n// Required ERC721 interface.\r\n\r\ncontract ERC721 {\r\n\r\n  function approve(address _to, uint _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint _tokenId) public;\r\n  function totalSupply() public view returns (uint total);\r\n  function transferFrom(address _from, address _to, uint _tokenId) public;\r\n  function transfer(address _to, uint _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint tokenId);\r\n\r\n}\r\n\r\ncontract ZethrDividendCards is ERC721 {\r\n    using SafeMath for uint;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new dividend card comes into existence.\r\n  event Birth(uint tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token (dividend card, in this case) is sold.\r\n  event TokenSold(uint tokenId, uint oldPrice, uint newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  Ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME           = \"ZethrDividendCard\";\r\n  string public constant SYMBOL         = \"ZDC\";\r\n  address public         BANKROLL;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from dividend card indices to the address that owns them.\r\n  ///  All dividend cards have a valid owner address.\r\n\r\n  mapping (uint => address) public      divCardIndexToOwner;\r\n\r\n  // A mapping from a dividend rate to the card index.\r\n\r\n  mapping (uint => uint) public         divCardRateToIndex;\r\n\r\n  // @dev A mapping from owner address to the number of dividend cards that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n\r\n  mapping (address => uint) private     ownershipDivCardCount;\r\n\r\n  /// @dev A mapping from dividend card indices to an address that has been approved to call\r\n  ///  transferFrom(). Each dividend card can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n\r\n  mapping (uint => address) public      divCardIndexToApproved;\r\n\r\n  // @dev A mapping from dividend card indices to the price of the dividend card.\r\n\r\n  mapping (uint => uint) private        divCardIndexToPrice;\r\n\r\n  mapping (address => bool) internal    administrators;\r\n\r\n  address public                        creator;\r\n  bool    public                        onSale;\r\n\r\n  /*** DATATYPES ***/\r\n\r\n  struct Card {\r\n    string name;\r\n    uint percentIncrease;\r\n  }\r\n\r\n  Card[] private divCards;\r\n\r\n  modifier onlyCreator() {\r\n    require(msg.sender == creator);\r\n    _;\r\n  }\r\n\r\n  constructor (address _bankroll) public {\r\n    creator = msg.sender;\r\n    BANKROLL = _bankroll;\r\n\r\n    createDivCard(\"2%\", 1 ether, 2);\r\n    divCardRateToIndex[2] = 0;\r\n\r\n    createDivCard(\"5%\", 1 ether, 5);\r\n    divCardRateToIndex[5] = 1;\r\n\r\n    createDivCard(\"10%\", 1 ether, 10);\r\n    divCardRateToIndex[10] = 2;\r\n\r\n    createDivCard(\"15%\", 1 ether, 15);\r\n    divCardRateToIndex[15] = 3;\r\n\r\n    createDivCard(\"20%\", 1 ether, 20);\r\n    divCardRateToIndex[20] = 4;\r\n\r\n    createDivCard(\"25%\", 1 ether, 25);\r\n    divCardRateToIndex[25] = 5;\r\n\r\n    createDivCard(\"33%\", 1 ether, 33);\r\n    divCardRateToIndex[33] = 6;\r\n\r\n    createDivCard(\"MASTER\", 5 ether, 10);\r\n    divCardRateToIndex[999] = 7;\r\n\r\n\tonSale = false;\r\n\r\n    administrators[0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae] = true; // Norsefire\r\n    administrators[0x11e52c75998fe2E7928B191bfc5B25937Ca16741] = true; // klob\r\n    administrators[0x20C945800de43394F70D789874a4daC9cFA57451] = true; // Etherguy\r\n    administrators[0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB] = true; // blurr\r\n\r\n  }\r\n\r\n  /*** MODIFIERS ***/\r\n\r\n    // Modifier to prevent contracts from interacting with the flip cards\r\n    modifier isNotContract()\r\n    {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n\t// Modifier to prevent purchases before we open them up to everyone\r\n\tmodifier hasStarted()\r\n    {\r\n\t\trequire (onSale == true);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isAdmin()\r\n    {\r\n\t    require(administrators[msg.sender]);\r\n\t    _;\r\n    }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  // Administrative update of the bankroll contract address\r\n    function setBankroll(address where)\r\n        isAdmin\r\n    {\r\n        BANKROLL = where;\r\n    }\r\n\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(address _to, uint _tokenId)\r\n    public\r\n    isNotContract\r\n  {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    divCardIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner)\r\n    public\r\n    view\r\n    returns (uint balance)\r\n  {\r\n    return ownershipDivCardCount[_owner];\r\n  }\r\n\r\n  // Creates a div card with bankroll as the owner\r\n  function createDivCard(string _name, uint _price, uint _percentIncrease)\r\n    public\r\n    onlyCreator\r\n  {\r\n    _createDivCard(_name, BANKROLL, _price, _percentIncrease);\r\n  }\r\n\r\n\t// Opens the dividend cards up for sale.\r\n\tfunction startCardSale()\r\n        public\r\n        onlyCreator\r\n    {\r\n\t\tonSale = true;\r\n\t}\r\n\r\n  /// @notice Returns all the relevant information about a specific div card\r\n  /// @param _divCardId The tokenId of the div card of interest.\r\n  function getDivCard(uint _divCardId)\r\n    public\r\n    view\r\n    returns (string divCardName, uint sellingPrice, address owner)\r\n  {\r\n    Card storage divCard = divCards[_divCardId];\r\n    divCardName = divCard.name;\r\n    sellingPrice = divCardIndexToPrice[_divCardId];\r\n    owner = divCardIndexToOwner[_divCardId];\r\n  }\r\n\r\n  function implementsERC721()\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name()\r\n    public\r\n    pure\r\n    returns (string)\r\n  {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _divCardId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint _divCardId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = divCardIndexToOwner[_divCardId];\r\n    require(owner != address(0));\r\n\treturn owner;\r\n  }\r\n\r\n  // Allows someone to send Ether and obtain a card\r\n  function purchase(uint _divCardId)\r\n    public\r\n    payable\r\n    hasStarted\r\n    isNotContract\r\n  {\r\n    address oldOwner  = divCardIndexToOwner[_divCardId];\r\n    address newOwner  = msg.sender;\r\n\r\n    // Get the current price of the card\r\n    uint currentPrice = divCardIndexToPrice[_divCardId];\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= currentPrice);\r\n\r\n    // To find the total profit, we need to know the previous price\r\n    // currentPrice      = previousPrice * (100 + percentIncrease);\r\n    // previousPrice     = currentPrice / (100 + percentIncrease);\r\n    uint percentIncrease = divCards[_divCardId].percentIncrease;\r\n    uint previousPrice   = SafeMath.mul(currentPrice, 100).div(100 + percentIncrease);\r\n\r\n    // Calculate total profit and allocate 50% to old owner, 50% to bankroll\r\n    uint totalProfit     = SafeMath.sub(currentPrice, previousPrice);\r\n    uint oldOwnerProfit  = SafeMath.div(totalProfit, 2);\r\n    uint bankrollProfit  = SafeMath.sub(totalProfit, oldOwnerProfit);\r\n    oldOwnerProfit       = SafeMath.add(oldOwnerProfit, previousPrice);\r\n\r\n    // Refund the sender the excess he sent\r\n    uint purchaseExcess  = SafeMath.sub(msg.value, currentPrice);\r\n\r\n    // Raise the price by the percentage specified by the card\r\n    divCardIndexToPrice[_divCardId] = SafeMath.div(SafeMath.mul(currentPrice, (100 + percentIncrease)), 100);\r\n\r\n    // Transfer ownership\r\n    _transfer(oldOwner, newOwner, _divCardId);\r\n\r\n    // Using send rather than transfer to prevent contract exploitability.\r\n    BANKROLL.send(bankrollProfit);\r\n    oldOwner.send(oldOwnerProfit);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  function priceOf(uint _divCardId)\r\n    public\r\n    view\r\n    returns (uint price)\r\n  {\r\n    return divCardIndexToPrice[_divCardId];\r\n  }\r\n\r\n  function setCreator(address _creator)\r\n    public\r\n    onlyCreator\r\n  {\r\n    require(_creator != address(0));\r\n\r\n    creator = _creator;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol()\r\n    public\r\n    pure\r\n    returns (string)\r\n  {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a dividend card.\r\n  /// @param _divCardId The ID of the card that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint _divCardId)\r\n    public\r\n    isNotContract\r\n  {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = divCardIndexToOwner[_divCardId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _divCardId));\r\n\r\n    _transfer(oldOwner, newOwner, _divCardId);\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply()\r\n    public\r\n    view\r\n    returns (uint total)\r\n  {\r\n    return divCards.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the card to another account\r\n  /// @param _to The address for the card to be transferred to.\r\n  /// @param _divCardId The ID of the card that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(address _to, uint _divCardId)\r\n    public\r\n    isNotContract\r\n  {\r\n    require(_owns(msg.sender, _divCardId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _divCardId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of a card from address _from to address _to\r\n  /// @param _from The address for the card to be transferred from.\r\n  /// @param _to The address for the card to be transferred to.\r\n  /// @param _divCardId The ID of the card that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(address _from, address _to, uint _divCardId)\r\n    public\r\n    isNotContract\r\n  {\r\n    require(_owns(_from, _divCardId));\r\n    require(_approved(_to, _divCardId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _divCardId);\r\n  }\r\n\r\n  function receiveDividends(uint _divCardRate)\r\n    public\r\n    payable\r\n  {\r\n    uint _divCardId = divCardRateToIndex[_divCardRate];\r\n    address _regularAddress = divCardIndexToOwner[_divCardId];\r\n    address _masterAddress = divCardIndexToOwner[7];\r\n\r\n    uint toMaster = msg.value.div(2);\r\n    uint toRegular = msg.value.sub(toMaster);\r\n\r\n    _masterAddress.send(toMaster);\r\n    _regularAddress.send(toRegular);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to)\r\n    private\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint _divCardId)\r\n    private\r\n    view\r\n    returns (bool)\r\n  {\r\n    return divCardIndexToApproved[_divCardId] == _to;\r\n  }\r\n\r\n  /// For creating a dividend card\r\n  function _createDivCard(string _name, address _owner, uint _price, uint _percentIncrease)\r\n    private\r\n  {\r\n    Card memory _divcard = Card({\r\n      name: _name,\r\n      percentIncrease: _percentIncrease\r\n    });\r\n    uint newCardId = divCards.push(_divcard) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newCardId == uint(uint32(newCardId)));\r\n\r\n    emit Birth(newCardId, _name, _owner);\r\n\r\n    divCardIndexToPrice[newCardId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as per ERC721 draft\r\n    _transfer(BANKROLL, _owner, newCardId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint _divCardId)\r\n    private\r\n    view\r\n    returns (bool)\r\n  {\r\n    return claimant == divCardIndexToOwner[_divCardId];\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Card to an address.\r\n  function _transfer(address _from, address _to, uint _divCardId)\r\n    private\r\n  {\r\n    // Since the number of cards is capped to 2^32 we can't overflow this\r\n    ownershipDivCardCount[_to]++;\r\n    //transfer ownership\r\n    divCardIndexToOwner[_divCardId] = _to;\r\n\r\n    // When creating new div cards _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipDivCardCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete divCardIndexToApproved[_divCardId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _divCardId);\r\n  }\r\n}\r\n\r\n// SafeMath library\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"divCardRateToIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCardSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_percentIncrease\",\"type\":\"uint256\"}],\"name\":\"createDivCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"getDivCard\",\"outputs\":[{\"name\":\"divCardName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANKROLL\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"where\",\"type\":\"address\"}],\"name\":\"setBankroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"divCardIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_divCardId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"divCardIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_divCardRate\",\"type\":\"uint256\"}],\"name\":\"receiveDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bankroll\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ZethrDividendCards","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000818189b1a0ba4f9e543de04eb76669ec8354e122","Library":"","SwarmSource":"bzzr://922d77e4dc22c1b90ae4cf4906aa0a156f31d21aad9b38217b9a0445ad2dba86"}]}