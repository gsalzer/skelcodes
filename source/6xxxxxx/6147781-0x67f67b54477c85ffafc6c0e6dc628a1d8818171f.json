{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\ncontract Base {\r\n\r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    \r\n    struct Client {\r\n        uint256 Tokens;\r\n        address Owner;\r\n        uint256 Category;\r\n        uint256[] LoansID;\r\n    }\r\n    struct Bank {\r\n        uint256 Tokens;\r\n        address Owner;\r\n     \r\n        mapping (uint256=>strCateg) Category;\r\n        uint256[] LoansID;\r\n        Loan[] LoanPending;\r\n        Portfolio[] Portfolios;\r\n    }\r\n    struct strCateg{\r\n        mapping(uint256=>strAmount) Amount;\r\n    }\r\n    struct strAmount{\r\n        mapping(uint256=>strInsta) Installment;\r\n    }\r\n    struct strInsta{\r\n        uint256 value;\r\n        bool enable;\r\n    }\r\n    struct Loan{\r\n            uint256 Debt;\r\n\r\n            uint256 Installment;\r\n            uint256 Id;\r\n            uint256 ForSale;\r\n            address Client;\r\n            address Owner;\r\n            uint256 Category;\r\n            uint256 Amount;\r\n            uint256 StartTime;\r\n            uint256 EndTime;\r\n    }\r\n    struct Portfolio{\r\n        uint256[] idLoans;\r\n        address Owner;\r\n        uint256 forSale;\r\n    }\r\n    \r\n    mapping(address => Client) clients;\r\n    mapping(address => Bank) banks;\r\n    Loan[] loans;\r\n    \r\n    function () public payable{\r\n        require(false, \"Should not go through this point\");\r\n    }\r\n\r\n \r\n}\r\ncontract ClientFunctions is Base{\r\n    // funciones del usuario\r\n    modifier isClient(){\r\n        require(clients[msg.sender].Owner == msg.sender, \"not a client\");\r\n        _;\r\n    }\r\n    // esta funcion es llamada por el cliente para pedir un prestamo\r\n    function askForALoan(address _bankAddress, uint256 _amount, uint256 _installment) isClient public  {\r\n        \r\n        require(banks[_bankAddress].Owner==_bankAddress, \"not a valid bank\");\r\n        require(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable, \"you not apply for that loan\");\r\n\r\n        Loan memory _loan;\r\n        _loan.Debt = _amount;\r\n        _loan.Debt  = _loan.Debt.add(banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value);\r\n        \r\n        _loan.Client = msg.sender;\r\n        _loan.Owner = _bankAddress;\r\n        _loan.Installment = _installment;\r\n        _loan.Category = clients[msg.sender].Category;\r\n        _loan.Amount = _amount;\r\n        \r\n        banks[_bankAddress].LoanPending.push(_loan);\r\n        \r\n        \r\n\r\n    }\r\n    \r\n    function findOutInterestByClientCategory(address _bankAddress, uint256 _amount, uint256 _installment) isClient public view returns(uint256 _value, bool _enable){\r\n        _value = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].value;\r\n        _enable = banks[_bankAddress].Category[clients[msg.sender].Category].Amount[_amount].Installment[_installment].enable;\r\n    }\r\n    // esta funcion es llamada por el cliente, cuando el banco central (estado) le otorga el dinero \r\n    function removeClientToken(uint256 _value) isClient public{\r\n        require(clients[msg.sender].Tokens >= _value, \"You don't have that many tokens\");\r\n        clients[msg.sender].Tokens = clients[msg.sender].Tokens.sub(_value);\r\n    }\r\n    // esta funcion es llamada por cliente para saber cuantos Tokens le quedan disponibles\r\n    function getClientBalance() isClient public view returns (uint256 _value){\r\n        _value = clients[msg.sender].Tokens;\r\n    }\r\n    \r\n\r\n    function getLoansLengthByClient() isClient public view returns(uint256){\r\n        return clients[msg.sender].LoansID.length;\r\n    }\r\n    function getLoanIDbyClient(uint256 _indexLoan) isClient public view returns (uint256){\r\n        return clients[msg.sender].LoansID[_indexLoan];\r\n    }\r\n    function getClientCategory() isClient public view returns(uint256){\r\n\r\n        return clients[msg.sender].Category;\r\n    } \r\n}\r\ncontract BankFunctions is ClientFunctions{\r\n    modifier isBank(){\r\n        require(banks[msg.sender].Owner==msg.sender, \"you are not a bank\");\r\n        _;\r\n    }\r\n    modifier isLoanOwner(uint256 _id) {\r\n        require(banks[msg.sender].Owner==msg.sender, \"you are not a bank\");\r\n        require(loans[_id].Owner == msg.sender, \"not owner of loan\");\r\n        _;\r\n    }\r\n    \r\n    function GetClientCategory(address _client) isBank public view returns(uint256){\r\n\r\n        return clients[_client].Category;\r\n    } \r\n    \r\n    function removeBankToken(uint256 _value) isBank public{\r\n        require(banks[msg.sender].Tokens >= _value, \"You don't have that many tokens\");\r\n        banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value);\r\n    }\r\n    // funcion llamada por el banco owner del Loan, permite saldar la deuda\r\n    function payOffClientDebt(uint256 _loanId, uint256 _value)  isLoanOwner(_loanId) public{\r\n\r\n        // checkear datos\r\n        require(loans[_loanId].Debt > 0);\r\n        require(_value > 0);\r\n        require(loans[_loanId].Debt>= _value);\r\n        loans[loans.length-1].EndTime = now;\r\n        loans[_loanId].Debt = loans[_loanId].Debt.sub(_value);\r\n    \r\n\r\n    }\r\n    \r\n    function ChangeInterest(uint256 _category, uint256 _amount, uint256 _installment, uint256 _value, bool _enable) isBank public{\r\n        banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value = _value;\r\n        banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable = _enable;\r\n    }\r\n    // retorna el balance en tokens del banco\r\n    function GetBankBalance() isBank public view returns (uint256 ){\r\n        return banks[msg.sender].Tokens;\r\n    }\r\n    function findOutInterestByBank(uint256 _category, uint256 _amount, uint256 _installment) isBank public view returns(uint256 _value, bool _enable){\r\n        _value = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].value;\r\n        _enable = banks[msg.sender].Category[_category].Amount[_amount].Installment[_installment].enable;\r\n    }\r\n\r\n    \r\n}\r\ncontract LoansFunctions is BankFunctions{\r\n\r\n    \r\n    // asigna un valor al Loan para ser comprado por otro banco\r\n    function SellLoan(uint256 _loanId, uint256 _value) isLoanOwner(_loanId)  public {\r\n        loans[_loanId].ForSale = _value;\r\n    }\r\n    \r\n    // permite comprar con Tokens un Loan\r\n    function BuyLoan(address _owner, uint256 _loanId, uint256 _value)  isBank public{\r\n        require(loans[_loanId].ForSale > 0, \"not for sale\");\r\n        require(banks[msg.sender].Tokens>= _value, \"you dont have money\");\r\n        // asignar Loan\r\n        SwitchLoanOwner( _owner,  _loanId);        \r\n        \r\n        //intercambio de dinero\r\n        banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value);\r\n        banks[_owner].Tokens = banks[_owner].Tokens.add(_value);\r\n    }\r\n    //funcion interna para intercambiar el dueÃ±o del Loan\r\n    \r\n    function SwitchLoanOwner(address _owner, uint256 _loanId) internal{\r\n        //requisitos\r\n        require(loans[_loanId].Debt> 0, \"at least one of the loans is already paid\");\r\n        require(loans[_loanId].Owner == _owner);\r\n        uint256 _indexLoan;\r\n        for (uint256 i; i<banks[_owner].LoansID.length; i++){\r\n            if (banks[_owner].LoansID[i] == _loanId){\r\n                _indexLoan = i;\r\n                i =  banks[_owner].LoansID.length.add(1);\r\n            }\r\n        }\r\n\r\n\r\n        // asignar Loan\r\n        banks[msg.sender].LoansID.push(_loanId);\r\n        \r\n        if (_indexLoan !=banks[_owner].LoansID.length - 1){\r\n                banks[_owner].LoansID[_indexLoan] = banks[_owner].LoansID[banks[_owner].LoansID.length - 1];         \r\n        }\r\n        \r\n        delete banks[_owner].LoansID[banks[_owner].LoansID.length -1];\r\n        banks[_owner].LoansID.length --;\r\n        \r\n        loans[_loanId].ForSale = 0;\r\n        loans[_loanId].Owner = msg.sender;\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    function aproveLoan(uint256 _loanIndex) public {\r\n        require(banks[msg.sender].LoanPending[_loanIndex].Owner == msg.sender, \"you are not the owner\");\r\n        require(banks[msg.sender].Tokens>=banks[msg.sender].LoanPending[_loanIndex].Amount, \"the bank does not have that amount of tokens\");\r\n\r\n        banks[msg.sender].LoanPending[_loanIndex].Id =loans.length;\r\n        loans.push(banks[msg.sender].LoanPending[_loanIndex]);\r\n        loans[loans.length-1].StartTime = now;\r\n        address _client = banks[msg.sender].LoanPending[_loanIndex].Client;\r\n        uint256 _amount  = banks[msg.sender].LoanPending[_loanIndex].Amount;\r\n        \r\n        banks[msg.sender].LoansID.push(loans.length - 1);\r\n        clients[_client].LoansID.push(loans.length - 1);\r\n        \r\n        clients[_client].Tokens =  clients[_client].Tokens.add(_amount);\r\n        banks[msg.sender].Tokens =  banks[msg.sender].Tokens.sub(_amount);\r\n\r\n        \r\n        if(banks[msg.sender].LoanPending.length !=1){\r\n            banks[msg.sender].LoanPending[_loanIndex] = banks[msg.sender].LoanPending [banks[msg.sender].LoanPending.length - 1];    \r\n        }\r\n\r\n        delete banks[msg.sender].LoanPending [banks[msg.sender].LoanPending.length - 1];\r\n        banks[msg.sender].LoanPending.length--;\r\n\r\n    }\r\n    // en caso de pasar true como parametro revisa las deudas aun no aprobadas\r\n    function GetLoansLenght(bool _pending) public isBank view returns (uint256) {\r\n        if (_pending){\r\n            return banks[msg.sender].LoanPending.length;    \r\n        }else{\r\n            return banks[msg.sender].LoansID.length;\r\n        }\r\n        \r\n    }\r\n    function GetLoanInfo(uint256 _indexLoan, bool _pending)  public view returns(uint256 _debt, address _client, uint256 _installment, uint256 _category , uint256 _amount, address _owner, uint256 _forSale, uint256 _StartTime, uint256 _EndTime){\r\n        \r\n        Loan memory _loan;\r\n        if (_pending){\r\n            require (_indexLoan < banks[msg.sender].LoanPending.length, \"null value\");\r\n            _loan = banks[msg.sender].LoanPending[_indexLoan];\r\n        }else{\r\n            _loan = loans[_indexLoan];\r\n        }\r\n        \r\n        _debt = _loan.Debt;\r\n        _client =  _loan.Client;\r\n        _installment =  _loan.Installment;\r\n        _category = _loan.Category;\r\n        _amount = _loan.Amount ;\r\n        _owner = _loan.Owner ;\r\n        _forSale = _loan.ForSale;\r\n        _StartTime = _loan.StartTime;\r\n        _EndTime = _loan.EndTime;\r\n    }\r\n\r\n\r\n    \r\n}\r\ncontract PortfolioFunctions is LoansFunctions{\r\n    modifier isOwnerPortfolio(uint256 _indexPortfolio)  {\r\n        require(banks[msg.sender].Portfolios[_indexPortfolio].Owner== msg.sender, \"not the owner of portfolio\");\r\n        _;\r\n    }\r\n    // crear Portolio\r\n    function createPortfolio(uint256 _idLoan) isBank public  returns (uint256 )  {\r\n            require(msg.sender== loans[_idLoan].Owner);\r\n            Portfolio  memory  _portfolio;\r\n            banks[msg.sender].Portfolios.push(_portfolio);\r\n            banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length-1].idLoans.push(_idLoan);\r\n            banks[msg.sender].Portfolios[banks[msg.sender].Portfolios.length-1].Owner= msg.sender;\r\n\r\n            return banks[msg.sender].Portfolios.length-1;\r\n    }\r\n    function deletePortfolio(uint256 _indexPortfolio) isOwnerPortfolio(_indexPortfolio) public{\r\n        uint256 _PortfolioLength = banks[msg.sender].Portfolios.length;\r\n        banks[msg.sender].Portfolios[_indexPortfolio] = banks[msg.sender].Portfolios[_PortfolioLength -1];\r\n        delete banks[msg.sender].Portfolios[_PortfolioLength -1];\r\n        banks[msg.sender].Portfolios.length --;\r\n        \r\n    }\r\n    // agregar Loan to Portfolio\r\n    function addLoanToPortfolio(uint256 _indexPortfolio, uint256 _idLoan) isOwnerPortfolio (_indexPortfolio) public {\r\n        for(uint256 i; i<banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length;i++){\r\n            if (banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i]==_idLoan){\r\n                require(false, \"that loan already exists on the portfolio\");\r\n            }\r\n        }\r\n        banks[msg.sender].Portfolios[_indexPortfolio].idLoans.push(_idLoan);\r\n    }\r\n    \r\n    function removeLoanFromPortfolio(uint256 _indexPortfolio, uint256 _idLoan) isOwnerPortfolio (_indexPortfolio) public returns (bool _result){\r\n        \r\n        uint256 Loanslength = banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length;\r\n        uint256 _loanIndex = Loanslength;\r\n        for(uint256 i; i<Loanslength; i++){\r\n            if(_idLoan ==banks[msg.sender].Portfolios[_indexPortfolio].idLoans[i]){\r\n                _loanIndex = i;\r\n                i= Loanslength;\r\n            }\r\n        }\r\n        require(_loanIndex<Loanslength, \"el Loan no se encuentra en el Portfolio\");\r\n        \r\n        if (_loanIndex !=banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length-1){\r\n               banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_loanIndex] = banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength-1];\r\n        }\r\n        delete banks[msg.sender].Portfolios[_indexPortfolio].idLoans[Loanslength -1];\r\n        banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length --;\r\n        \r\n        if (banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length == 0){\r\n            deletePortfolio(_indexPortfolio);\r\n        }\r\n        _result = true;\r\n    }    \r\n    function getPortfolioInfo (address _bankAddress, uint256 _indexPortfolio) isBank  public view returns (uint256 _LoansLength, uint256 _forSale, address _owner){\r\n        require(banks[_bankAddress].Portfolios[_indexPortfolio].Owner == _bankAddress, \"not the owner of that portfolio\");\r\n        _LoansLength =    banks[_bankAddress].Portfolios[_indexPortfolio].idLoans.length;\r\n        _forSale =    banks[_bankAddress].Portfolios[_indexPortfolio].forSale;\r\n        _owner =    banks[_bankAddress].Portfolios[_indexPortfolio].Owner;\r\n    }\r\n    function sellPorftolio(uint256 _indexPortfolio, uint256 _value) isOwnerPortfolio (_indexPortfolio) public {\r\n          require(banks[msg.sender].Portfolios[_indexPortfolio].idLoans.length>0);\r\n          banks[msg.sender].Portfolios[_indexPortfolio].forSale = _value;\r\n    }\r\n    function buyPortfolio(address _owner, uint256 _indexPortfolio, uint256 _value) isBank public {\r\n        \r\n        require(banks[msg.sender].Tokens>=_value);\r\n        require(banks[_owner].Portfolios[_indexPortfolio].idLoans.length > 0);\r\n        require(banks[_owner].Portfolios[_indexPortfolio].forSale > 0);\r\n        require(banks[_owner].Portfolios[_indexPortfolio].forSale == _value );\r\n        \r\n\r\n        banks[msg.sender].Tokens = banks[msg.sender].Tokens.sub(_value);\r\n        banks[_owner].Tokens = banks[_owner].Tokens.add(_value);\r\n        \r\n        for(uint256 a;a< banks[_owner].Portfolios[_indexPortfolio].idLoans.length ;a++){\r\n           SwitchLoanOwner(_owner,  banks[_owner].Portfolios[_indexPortfolio].idLoans[a]);\r\n        }\r\n        \r\n        if (_indexPortfolio !=banks[_owner].Portfolios.length-1){\r\n               banks[_owner].Portfolios[_indexPortfolio] = banks[_owner].Portfolios[banks[_owner].Portfolios.length-1];         \r\n        }\r\n        delete banks[_owner].Portfolios[banks[_owner].Portfolios.length -1];\r\n        banks[_owner].Portfolios.length--;\r\n    }\r\n    function countPortfolios(address _bankAddress) isBank public view returns (uint256 _result){\r\n        _result = banks[_bankAddress].Portfolios.length;\r\n    }\r\n    function GetLoanIdFromPortfolio(uint256 _indexPortfolio, uint256 _indexLoan)  isBank public view returns(uint256 _ID){\r\n        return banks[msg.sender].Portfolios[_indexPortfolio].idLoans[_indexLoan];\r\n    }\r\n    \r\n\r\n    \r\n}\r\ncontract GobernanceFunctions is PortfolioFunctions{\r\n\r\n    modifier IsOwner{\r\n        require(owner == msg.sender, \"not the owner\");\r\n        _;\r\n    }\r\n\r\n    function addBank(address _addressBank, uint256 _tokens) IsOwner public{\r\n        require(banks[_addressBank].Owner==0);\r\n        require(clients[_addressBank].Owner == 0);\r\n        banks[_addressBank].Owner=_addressBank;\r\n        banks[_addressBank].Tokens =  _tokens;\r\n\r\n    }\r\n    function addClient (address _addressClient, uint256 _category) IsOwner  public{\r\n        require(banks[_addressClient].Owner!=_addressClient, \"that addreess is a bank\");\r\n        require(clients[_addressClient].Owner!=_addressClient, \"that client already exists\");\r\n        require (_category > 0);\r\n        clients[_addressClient].Owner = _addressClient;\r\n        clients[_addressClient].Category =  _category; \r\n        clients[_addressClient].Tokens =  0;\r\n    }\r\n    function addTokensToBank(address _bank, uint256 _tokens) IsOwner public{\r\n        require(banks[_bank].Owner==_bank, \"not a Bank\");\r\n        banks[_bank].Tokens = banks[_bank].Tokens.add(_tokens);\r\n    }\r\n    function changeClientCategory (address _client, uint256 _category) IsOwner public{\r\n        require (clients[_client].Owner==_client, \"not a client\");\r\n        //function\r\n        clients[_client].Category = _category;\r\n    \r\n    }\r\n}\r\n// deployar el contrato \"Deploy\"  con el address del gobierno\r\ncontract Deploy is GobernanceFunctions{\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        forTesting();\r\n    }\r\n    function forTesting() internal{\r\n        addBank(0x14723a09acff6d2a60dcdf7aa4aff308fddc160c,1);\r\n        addBank(0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db,1);\r\n        addTokensToBank(0x14723a09acff6d2a60dcdf7aa4aff308fddc160c,20000);\r\n        addTokensToBank(0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db,40000);\r\n        addClient(0x583031d1113ad414f02576bd6afabfb302140225, 1);\r\n        addClient(0xdd870fa1b7c4700f2bd7f44238821c26f7392148, 1);     \r\n        changeClientCategory(0x583031d1113ad414f02576bd6afabfb302140225, 5);\r\n        changeClientCategory(0xdd870fa1b7c4700f2bd7f44238821c26f7392148, 5);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_loanIndex\",\"type\":\"uint256\"}],\"name\":\"aproveLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressClient\",\"type\":\"address\"},{\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"addClient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"}],\"name\":\"deletePortfolio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BuyLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pending\",\"type\":\"bool\"}],\"name\":\"GetLoansLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"GetClientCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClientBalance\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoansLengthByClient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"},{\"name\":\"_idLoan\",\"type\":\"uint256\"}],\"name\":\"addLoanToPortfolio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBankBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"changeClientCategory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idLoan\",\"type\":\"uint256\"}],\"name\":\"createPortfolio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexLoan\",\"type\":\"uint256\"},{\"name\":\"_pending\",\"type\":\"bool\"}],\"name\":\"GetLoanInfo\",\"outputs\":[{\"name\":\"_debt\",\"type\":\"uint256\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_installment\",\"type\":\"uint256\"},{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_forSale\",\"type\":\"uint256\"},{\"name\":\"_StartTime\",\"type\":\"uint256\"},{\"name\":\"_EndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SellLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payOffClientDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"},{\"name\":\"_indexLoan\",\"type\":\"uint256\"}],\"name\":\"GetLoanIdFromPortfolio\",\"outputs\":[{\"name\":\"_ID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexLoan\",\"type\":\"uint256\"}],\"name\":\"getLoanIDbyClient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_installment\",\"type\":\"uint256\"}],\"name\":\"findOutInterestByClientCategory\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"removeClientToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressBank\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"},{\"name\":\"_idLoan\",\"type\":\"uint256\"}],\"name\":\"removeLoanFromPortfolio\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"},{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"}],\"name\":\"getPortfolioInfo\",\"outputs\":[{\"name\":\"_LoansLength\",\"type\":\"uint256\"},{\"name\":\"_forSale\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_installment\",\"type\":\"uint256\"}],\"name\":\"findOutInterestByBank\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bank\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addTokensToBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_installment\",\"type\":\"uint256\"}],\"name\":\"askForALoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClientCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"}],\"name\":\"countPortfolios\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"removeBankToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_installment\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"ChangeInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sellPorftolio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_indexPortfolio\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buyPortfolio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Deploy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c4e4a19053f763596bd8ae8436eb78380940aca96040a300ec9323f6a514314"}]}