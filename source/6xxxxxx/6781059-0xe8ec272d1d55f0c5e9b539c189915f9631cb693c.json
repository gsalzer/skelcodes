{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/IEntityStorage.sol\r\n\r\ninterface IEntityStorage {\r\n    function storeBulk(uint256[] _tokenIds, uint256[] _attributes) external;\r\n    function store(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function remove(uint256 _tokenId) external;\r\n    function list() external view returns (uint256[] tokenIds);\r\n    function getAttributes(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds);\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    // mapping for creature Type to Sale\r\n    address[] internal controllers;\r\n    //mapping(address => address) internal controllers;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n   \r\n    /**\r\n    * @dev Throws if called by any account that's not a superuser.\r\n    */\r\n    modifier onlyController() {\r\n        require(isController(msg.sender), \"only Controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrController() {\r\n        require(msg.sender == owner || isController(msg.sender), \"only Owner Or Controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"sender address must be the owner's address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(address(0) != _newOwner, \"new owner address must not be the owner's address\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the new owner to confirm that they are taking control of the contract..tr\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"sender address must not be the new owner's address\");\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function isController(address _controller) internal view returns(bool) {\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getControllers() public onlyOwner view returns(address[]) {\r\n        return controllers;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function addController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        require(_controller != owner, \"controller address must not be the owner's address\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                return;\r\n            }\r\n        }\r\n        controllers.push(_controller);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows a new controllers to be added\r\n    * @param _controller The address controller.\r\n    */\r\n    function removeController(address _controller) public onlyOwner {\r\n        require(address(0) != _controller, \"controller address must not be 0\");\r\n        for (uint8 index = 0; index < controllers.length; index++) {\r\n            if (controllers[index] == _controller) {\r\n                delete controllers[index];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/CBCreatureStorage.sol\r\n\r\n/**\r\n* @title CBCreatureStorage\r\n* @dev Composable storage contract for recording attribute data and attached components for a CryptoBeasties card. \r\n* CryptoBeasties content and source code is Copyright (C) 2018 PlayStakes LLC, All rights reserved.\r\n*/\r\ncontract CBCreatureStorage is Ownable, IEntityStorage { \r\n    using SafeMath for uint256;  \r\n\r\n    struct Token {\r\n        uint256 tokenId;\r\n        uint256 attributes;\r\n        uint256[] componentIds;\r\n        uint index;\r\n    }\r\n\r\n    // Array with all Tokens, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Maps token ids to data\r\n    mapping(uint256 => Token) internal tokens;\r\n\r\n    event Stored(uint256 tokenId, uint256 attributes, uint256[] componentIds);\r\n    event Removed(uint256 tokenId);\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param _tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        return tokens[_tokenId].tokenId == _tokenId;\r\n    }\r\n\r\n    /**\r\n    * @dev Bulk Load of Tokens\r\n    * @param _tokenIds Array of tokenIds\r\n    * @param _attributes Array of packed attributes value\r\n    */\r\n    function storeBulk(uint256[] _tokenIds, uint256[] _attributes) external onlyOwnerOrController {\r\n        uint256[] memory _componentIds;\r\n        uint startIndex = allTokens.length;\r\n        for (uint index = 0; index < _tokenIds.length; index++) {\r\n            require(!this.exists(_tokenIds[index]));\r\n            allTokens.push(_tokenIds[index]);\r\n            tokens[_tokenIds[index]] = Token(_tokenIds[index], _attributes[index], _componentIds, startIndex + index);\r\n            emit Stored(_tokenIds[index], _attributes[index], _componentIds);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Create a new CryptoBeasties Token\r\n    * @param _tokenId ID of the token\r\n    * @param _attributes Packed attributes value\r\n    * @param _componentIds Array of CryptoBeasties componentIds (i.e. PowerStones)\r\n    */\r\n    function store(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external onlyOwnerOrController {\r\n        require(!this.exists(_tokenId));\r\n        allTokens.push(_tokenId);\r\n        tokens[_tokenId] = Token(_tokenId, _attributes, _componentIds, allTokens.length - 1);\r\n        emit Stored(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n    /**\r\n    * @dev Remove a CryptoBeasties Token from storage\r\n    * @param _tokenId ID of the token\r\n    */\r\n    function remove(uint256 _tokenId) external onlyOwnerOrController {\r\n        require(_tokenId > 0);\r\n        require(exists(_tokenId));\r\n        \r\n        uint doomedTokenIndex = tokens[_tokenId].index;\r\n        \r\n        delete tokens[_tokenId];\r\n\r\n        // Reorg allTokens array\r\n        uint lastTokenIndex = allTokens.length.sub(1);\r\n        uint256 lastTokenId = allTokens[lastTokenIndex];\r\n\r\n        // update the moved token's index\r\n        tokens[lastTokenId].index = doomedTokenIndex;\r\n        \r\n        allTokens[doomedTokenIndex] = lastTokenId;\r\n        allTokens[lastTokenIndex] = 0;\r\n\r\n        allTokens.length--;\r\n        emit Removed(_tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev List all CryptoBeasties Tokens in storage\r\n    */\r\n    function list() external view returns (uint256[] tokenIds) {\r\n        return allTokens;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets attributes and componentIds (i.e. PowerStones) for a CryptoBeastie\r\n    * @param _tokenId uint256 for the given token\r\n    */\r\n    function getAttributes(uint256 _tokenId) external view returns (uint256 attrs, uint256[] compIds) {\r\n        require(exists(_tokenId));\r\n        return (tokens[_tokenId].attributes, tokens[_tokenId].componentIds);\r\n    }\r\n\r\n    /**\r\n    * @dev Update CryptoBeasties attributes and Component Ids (i.e. PowerStones) CryptoBeastie\r\n    * @param _tokenId uint256 ID of the token to update\r\n    * @param _attributes Packed attributes value\r\n    * @param _componentIds Array of CryptoBeasties componentIds (i.e. PowerStones)\r\n    */\r\n    function updateAttributes(uint256 _tokenId, uint256 _attributes, uint256[] _componentIds) external onlyOwnerOrController {\r\n        require(exists(_tokenId));\r\n        require(_attributes > 0);\r\n        tokens[_tokenId].attributes = _attributes;\r\n        tokens[_tokenId].componentIds = _componentIds;\r\n        emit Stored(_tokenId, _attributes, _componentIds);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the total number of tokens in storage\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_attributes\",\"type\":\"uint256[]\"}],\"name\":\"storeBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttributes\",\"outputs\":[{\"name\":\"attrs\",\"type\":\"uint256\"},{\"name\":\"compIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_attributes\",\"type\":\"uint256\"},{\"name\":\"_componentIds\",\"type\":\"uint256[]\"}],\"name\":\"store\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"attributes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"componentIds\",\"type\":\"uint256[]\"}],\"name\":\"Stored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CBCreatureStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0511884484fcf20ffc07e6c3bd2dcec95c6116eda89b788985bdde3c783151b7"}]}