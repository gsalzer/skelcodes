{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// @notice Contract to create posts\r\ncontract DReddit {\r\n\r\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\r\n\r\n    struct Post {\r\n        uint creationDate;   \r\n        bytes description;   \r\n        address owner;\r\n        uint upvotes;  \r\n        uint downvotes;\r\n        mapping(address => Ballot) voters;\r\n    }\r\n\r\n    Post[] public posts;\r\n\r\n    event NewPost (\r\n        uint indexed postId,\r\n        address owner,\r\n        bytes description\r\n    );\r\n\r\n    event Vote(\r\n        uint indexed postId,\r\n        address voter,\r\n        uint8 vote\r\n    );\r\n\r\n    // @notice Number of posts created\r\n    // @return Num of posts\r\n    function numPosts()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return posts.length;\r\n    }\r\n\r\n    // @notice Create Post\r\n    // @param _description IPFS hash of the content of the post\r\n    function create(bytes _description)\r\n        public\r\n    {\r\n        uint postId = posts.length++;\r\n        posts[postId] = Post({\r\n            creationDate: block.timestamp,\r\n            description: _description,\r\n            owner: msg.sender,\r\n            upvotes: 0,\r\n            downvotes: 0\r\n        });\r\n        emit NewPost(postId, msg.sender, _description);\r\n    }\r\n\r\n    // @notice Vote on a post\r\n    // @param _postId Id of the post to up/downvote\r\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\r\n    function vote(uint _postId, uint8 _vote)\r\n        public\r\n    {\r\n        Post storage p = posts[_postId];\r\n        require(p.creationDate != 0, \"Post does not exist\");\r\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\r\n\r\n        Ballot b = Ballot(_vote);\r\n        if (b == Ballot.UPVOTE) {\r\n            p.upvotes++;\r\n        } else {\r\n            p.downvotes++;\r\n        }\r\n        p.voters[msg.sender] = b;\r\n\r\n        emit Vote(_postId, msg.sender, _vote);\r\n    }\r\n\r\n    // @notice Determine if the sender can vote on a post\r\n    // @param _postId Id of the post\r\n    // @return bool that indicates if the sender can vote or not\r\n    function canVote(uint _postId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if(_postId > posts.length - 1) return false;\r\n\r\n        Post storage p = posts[_postId];    \r\n        return (p.voters[msg.sender] == Ballot.NONE);\r\n    }\r\n\r\n    // @notice Obtain vote for specific post\r\n    // @param _postId Id of the post\r\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\r\n    function getVote(uint _postId)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {\r\n        Post storage p = posts[_postId];\r\n        return uint8(p.voters[msg.sender]);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"name\":\"creationDate\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"bytes\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"upvotes\",\"type\":\"uint256\"},{\"name\":\"downvotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"},{\"name\":\"_vote\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"bytes\"}],\"name\":\"NewPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"Vote\",\"type\":\"event\"}]","ContractName":"DReddit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f56c8ed3d873a2fce56b97588c84c6b020aefc48ed4dcf1343e73b6f5a983362"}]}