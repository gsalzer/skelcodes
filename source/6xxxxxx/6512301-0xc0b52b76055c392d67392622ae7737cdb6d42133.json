{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n *                                  ╔╗╔╗╔╗╔══╗╔╗──╔╗──╔══╗╔═══╗──╔╗──╔╗╔═══╗\r\n *                                  ║║║║║║║╔╗║║║──║║──╚╗╔╝║╔══╝──║║──║║║╔══╝\r\n *                                  ║║║║║║║╚╝║║║──║║───║║─║╚══╗──║╚╗╔╝║║╚══╗\r\n *                                  ║║║║║║║╔╗║║║──║║───║║─║╔══╝──║╔╗╔╗║║╔══╝\r\n *                                  ║╚╝╚╝║║║║║║╚═╗║╚═╗╔╝╚╗║╚══╗╔╗║║╚╝║║║╚══╗\r\n *                                  ╚═╝╚═╝╚╝╚╝╚══╝╚══╝╚══╝╚═══╝╚╝╚╝──╚╝╚═══╝\r\n *                                  ┌──────────────────────────────────────┐  \r\n *                                  │      Website:  http://wallie.me      │\r\n *                                  │                                      │  \r\n *                                  │  CN Telegram: https://t.me/WallieCH  │\r\n *                                  │  RU Telegram: https://t.me/wallieRU  |\r\n *                                  │  *  Telegram: https://t.me/WallieNews|\r\n *                                  |Twitter: https://twitter.com/WalliemeO|\r\n *                                  └──────────────────────────────────────┘ \r\n *                    | Youtube – https://www.youtube.com/channel/UC1q3sPOlXsaJGrT8k-BZuyw |\r\n *\r\n *                                     * WALLIE - distribution contract *\r\n * \r\n *  - Growth of 1.44% in 24 hours (every 5900 blocks)\r\n * \r\n * Distribution: *\r\n * - 10% Advertising, promotion\r\n * - 10% Referral program\r\n * - 3% Cashback\r\n * - 5% for developers and technical support\r\n *\r\n * Usage rules *\r\n *  Holding:\r\n *   1. Send any amount of ether but not less than 0.01 THD to make a contribution.\r\n *   2. Send 0 ETH at any time to get profit from the Deposit.\r\n *  \r\n *  - You can make a profit at any time. Consider your transaction costs (GAS).\r\n *  \r\n * Affiliate program *\r\n * - You have access to a single-level referral system for additional profit (10% of the referral's contribution).\r\n * - * - Affiliate fees will come from each referral's Deposit as long as it doesn't change your wallet address Ethereum on the other.\r\n * 1. The depositor in the transfer of funds indicates the DATA in your e-wallet Ethereum.\r\n * 2. After successful transfer you will be charged 10% of the amount of his Deposit.\r\n * * 3. Your partner receives a \"Refback bonus\" in the amount of 3% of his contribution.\r\n * \r\n *  \r\n * \r\n *\r\n * RECOMMENDED GAS LIMIT: 250000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * The contract has been tested for vulnerabilities!\r\n *\r\n */ \r\n\r\ncontract WallieInvest{\r\n\r\n    mapping (address => uint256) public invested;\r\n\r\n    mapping (address => uint256) public payments; \r\n     \r\n    mapping (address => address) public investedRef;\r\n    \r\n    mapping (address => uint256) public atBlock;\r\n    \r\n    mapping (address => uint256) public cashBack;\r\n    \r\n    mapping (address => uint256) public cashRef;\r\n    \r\n    mapping (address => uint256) public admComiss;\r\n    \r\n    using SafeMath for uint;\r\n    using ToAddress for *;\r\n    using Zero for *;\r\n    \r\n    address private adm_addr; //NB!\r\n    uint256 private start_block;\r\n    uint256 private constant dividends = 144;           // 1.44%\r\n    uint256 private constant adm_comission = 15;        // 15%\r\n    uint256 private constant ref_bonus = 10;            // 10%\r\n    uint256 private constant ref_cashback = 3;          // 3%\r\n    uint256 private constant block_of_24h = 5900;       // ~24 hour\r\n    uint256 private constant min_invesment = 10 finney; // 0.01 eth\r\n    \r\n    //Statistics\r\n    uint256 private all_invest_users_count = 0;\r\n    uint256 private all_invest = 0;\r\n    uint256 private all_payments = 0;\r\n    uint256 private all_cash_back_payments = 0;\r\n    uint256 private all_ref_payments = 0;\r\n    uint256 private all_adm_payments = 0;\r\n    uint256 private all_reinvest = 0;\r\n    address private last_invest_addr = 0;\r\n    uint256 private last_invest_amount = 0;\r\n    uint256 private last_invest_block = 0;\r\n    \r\n    constructor() public {\r\n    adm_addr = msg.sender;\r\n    start_block = block.number;\r\n    }\r\n    \r\n    // this function called every time anyone sends a transaction to this contract\r\n    function() public payable {\r\n        \r\n        uint256 amount = 0;\r\n        \r\n        // if sender is invested more than 0 ether\r\n        if (invested[msg.sender] != 0) {\r\n            \r\n            // calculate profit:\r\n            //amount = (amount invested) * 1.44% * (blocks since last transaction) / 5900\r\n            //amount = invested[msg.sender] * dividends / 10000 * (block.number - atBlock[msg.sender]) / block_of_24h;\r\n            amount = invested[msg.sender].mul(dividends).div(10000).mul(block.number.sub(atBlock[msg.sender])).div(block_of_24h);\r\n        }\r\n        \r\n\r\n        if (msg.value == 0) {\r\n           \r\n            // Commission payment\r\n            if (admComiss[adm_addr] != 0 && msg.sender == adm_addr){\r\n                amount = amount.add(admComiss[adm_addr]);\r\n                admComiss[adm_addr] = 0;\r\n                all_adm_payments += amount;\r\n               }\r\n           \r\n            // Payment of referral fees\r\n            if (cashRef[msg.sender] != 0){\r\n                amount = amount.add(cashRef[msg.sender]);\r\n                cashRef[msg.sender] = 0;\r\n                all_ref_payments += amount;\r\n            }\r\n            \r\n            // Payment of cashback\r\n            if (cashBack[msg.sender] != 0){\r\n                amount = amount.add(cashBack[msg.sender]);\r\n                cashBack[msg.sender] = 0;\r\n                all_cash_back_payments += amount;\r\n               }\r\n           }\r\n        else\r\n           {\r\n            \r\n            // Minimum payment\r\n            require(msg.value >= min_invesment, \"msg.value must be >= 0.01 ether (10 finney)\");\r\n               \r\n            // Enrollment fees\r\n            admComiss[adm_addr] += msg.value.mul(adm_comission).div(100);\r\n             \r\n            address ref_addr = msg.data.toAddr();\r\n            \r\n              if (ref_addr.notZero()) {\r\n                  \r\n                 //Anti-Cheat mode\r\n                 require(msg.sender != ref_addr, \"referal must be != msg.sender\");\r\n                  \r\n                 // Referral enrollment\r\n                 cashRef[ref_addr] += msg.value.mul(ref_bonus).div(100);\r\n                 \r\n                 // Securing the referral for the investor\r\n                 investedRef[msg.sender] = ref_addr;\r\n                 \r\n                 // Cashback Enrollment\r\n                 if (invested[msg.sender] == 0)\r\n                     cashBack[msg.sender] += msg.value.mul(ref_cashback).div(100);\r\n                 \r\n                 }\r\n                 else\r\n                 {\r\n                 // Referral enrollment\r\n                   if (investedRef[msg.sender].notZero())\r\n                      cashRef[investedRef[msg.sender]] += msg.value.mul(ref_bonus).div(100);    \r\n                 }\r\n                 \r\n                 \r\n            if (invested[msg.sender] == 0) all_invest_users_count++;   \r\n               \r\n            // investment accounting\r\n            invested[msg.sender] += msg.value;\r\n            \r\n            atBlock[msg.sender] = block.number;\r\n            \r\n            // statistics\r\n            all_invest += msg.value;\r\n            if (invested[msg.sender] > 0) all_reinvest += msg.value;\r\n            last_invest_addr = msg.sender;\r\n            last_invest_amount = msg.value;\r\n            last_invest_block = block.number;\r\n            \r\n           }\r\n           \r\n         // record block number and invested amount (msg.value) of this transaction\r\n         atBlock[msg.sender] = block.number;    \r\n           \r\n         if (amount != 0)\r\n            {\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            address sender = msg.sender;\r\n            \r\n            all_payments += amount;\r\n            payments[sender] += amount;\r\n            \r\n            sender.transfer(amount);\r\n            }\r\n   }\r\n   \r\n    \r\n    //Stat\r\n    //getFundStatsMap\r\n    function getFundStatsMap() public view returns (uint256[7]){\r\n    uint256[7] memory stateMap; \r\n    stateMap[0] = all_invest_users_count;\r\n    stateMap[1] = all_invest;\r\n    stateMap[2] = all_payments;\r\n    stateMap[3] = all_cash_back_payments;\r\n    stateMap[4] = all_ref_payments;\r\n    stateMap[5] = all_adm_payments;\r\n    stateMap[6] = all_reinvest;\r\n    return (stateMap); \r\n    }\r\n    \r\n    //getUserStats\r\n    function getUserStats(address addr) public view returns (uint256,uint256,uint256,uint256,uint256,uint256,address){\r\n    return (invested[addr],cashBack[addr],cashRef[addr],atBlock[addr],block.number,payments[addr],investedRef[addr]); \r\n    }\r\n    \r\n    //getWebStats\r\n    function getWebStats() public view returns (uint256,uint256,uint256,uint256,address,uint256,uint256){\r\n    return (all_invest_users_count,address(this).balance,all_invest,all_payments,last_invest_addr,last_invest_amount,last_invest_block); \r\n    }\r\n  \r\n}   \r\n    \r\n\r\nlibrary SafeMath {\r\n \r\n\r\n/**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\nlibrary ToAddress {\r\n  function toAddr(uint source) internal pure returns(address) {\r\n    return address(source);\r\n  }\r\n\r\n  function toAddr(bytes source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n}\r\n\r\nlibrary Zero {\r\n  function requireNotZero(uint a) internal pure {\r\n    require(a != 0, \"require not zero\");\r\n  }\r\n\r\n  function requireNotZero(address addr) internal pure {\r\n    require(addr != address(0), \"require not zero address\");\r\n  }\r\n\r\n  function notZero(address addr) internal pure returns(bool) {\r\n    return !(addr == address(0));\r\n  }\r\n\r\n  function isZero(address addr) internal pure returns(bool) {\r\n    return addr == address(0);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundStatsMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admComiss\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWebStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"WallieInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://86925451b1537482827042ba37fa59f508cd615297ccb79f2eeb81225b916e5a"}]}