{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract J8TTokenInterface {\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract FeeInterface {\r\n  function getFee(uint _base, uint _amount) external view returns (uint256 fee);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n  address private _admin;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  event AdministrationTransferred(\r\n    address indexed previousAdmin,\r\n    address indexed newAdmin\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the admin.\r\n   */\r\n  function admin() public view returns(address) {\r\n    return _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(isAdmin());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the admin of the contract.\r\n   */\r\n  function isAdmin() public view returns(bool) {\r\n    return msg.sender == _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer admin control of the contract to a newAdmin.\r\n   * @param newAdmin The address to transfer admin powers to.\r\n   */\r\n  function transferAdministration(address newAdmin) public onlyOwner {\r\n    _transferAdministration(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers admin control of the contract to a newAdmin.\r\n   * @param newAdmin The address to transfer admin power to.\r\n   */\r\n  function _transferAdministration(address newAdmin) internal {\r\n    require(newAdmin != address(0));\r\n    require(newAdmin != address(this));\r\n    emit AdministrationTransferred(_admin, newAdmin);\r\n    _admin = newAdmin;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\n\r\ncontract Pausable is Ownable {\r\n\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool private _paused = false;\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused, \"Contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused, \"Contract is not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    _paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    _paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract WalletCoordinator is Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  J8TTokenInterface public tokenContract;\r\n  FeeInterface public feeContract;\r\n  address public custodian;\r\n\r\n  event TransferSuccess(\r\n    address indexed fromAddress,\r\n    address indexed toAddress,\r\n    uint amount,\r\n    uint networkFee\r\n  );\r\n\r\n  event TokenAddressUpdated(\r\n    address indexed oldAddress,\r\n    address indexed newAddress\r\n  );\r\n\r\n  event FeeContractAddressUpdated(\r\n    address indexed oldAddress,\r\n    address indexed newAddress\r\n  );\r\n\r\n  event CustodianAddressUpdated(\r\n    address indexed oldAddress,\r\n    address indexed newAddress\r\n  );\r\n\r\n  /**\r\n   * @dev Allows the current smart contract to transfer amount of tokens from fromAddress to toAddress\r\n   */\r\n  function transfer(address _fromAddress, address _toAddress, uint _amount, uint _baseFee) public onlyAdmin whenNotPaused {\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    require(_fromAddress != _toAddress,  \"Addresses _fromAddress and _toAddress are equal\");\r\n    require(_fromAddress != address(0), \"Address _fromAddress is 0x0\");\r\n    require(_fromAddress != address(this), \"Address _fromAddress is smart contract address\");\r\n    require(_toAddress != address(0), \"Address _toAddress is 0x0\");\r\n    require(_toAddress != address(this), \"Address _toAddress is smart contract address\");\r\n\r\n    uint networkFee = feeContract.getFee(_baseFee, _amount);\r\n    uint fromBalance = tokenContract.balanceOf(_fromAddress);\r\n\r\n    require(_amount <= fromBalance, \"Insufficient account balance\");\r\n\r\n    require(tokenContract.transferFrom(_fromAddress, _toAddress, _amount.sub(networkFee)), \"transferFrom did not succeed\");\r\n    require(tokenContract.transferFrom(_fromAddress, custodian, networkFee), \"transferFrom fee did not succeed\");\r\n\r\n    emit TransferSuccess(_fromAddress, _toAddress, _amount, networkFee);\r\n  }\r\n\r\n  function getFee(uint _base, uint _amount) public view returns (uint256) {\r\n    return feeContract.getFee(_base, _amount);\r\n  }\r\n\r\n  function setTokenInterfaceAddress(address _newAddress) external onlyOwner whenPaused returns (bool) {\r\n    require(_newAddress != address(this), \"The new token address is equal to the smart contract address\");\r\n    require(_newAddress != address(0), \"The new token address is equal to 0x0\");\r\n    require(_newAddress != address(tokenContract), \"The new token address is equal to the old token address\");\r\n\r\n    address _oldAddress = tokenContract;\r\n    tokenContract = J8TTokenInterface(_newAddress);\r\n\r\n    emit TokenAddressUpdated(_oldAddress, _newAddress);\r\n\r\n    return true;\r\n  }\r\n\r\n  function setFeeContractAddress(address _newAddress) external onlyOwner whenPaused returns (bool) {\r\n    require(_newAddress != address(this), \"The new fee contract address is equal to the smart contract address\");\r\n    require(_newAddress != address(0), \"The new fee contract address is equal to 0x0\");\r\n\r\n    address _oldAddress = feeContract;\r\n    feeContract = FeeInterface(_newAddress);\r\n\r\n    emit FeeContractAddressUpdated(_oldAddress, _newAddress);\r\n\r\n    return true;\r\n  }\r\n\r\n  function setCustodianAddress(address _newAddress) external onlyOwner returns (bool) {\r\n    require(_newAddress != address(this), \"The new custodian address is equal to the smart contract address\");\r\n    require(_newAddress != address(0), \"The new custodian address is equal to 0x0\");\r\n\r\n    address _oldAddress = custodian;\r\n    custodian = _newAddress;\r\n\r\n    emit CustodianAddressUpdated(_oldAddress, _newAddress);\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fromAddress\",\"type\":\"address\"},{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTokenInterfaceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFeeContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdministration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setCustodianAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"networkFee\",\"type\":\"uint256\"}],\"name\":\"TransferSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CustodianAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdministrationTransferred\",\"type\":\"event\"}]","ContractName":"WalletCoordinator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d01709097fae6970717b0ee8e73055ee95d7a4c0c62de79695a3cadbb89fd72"}]}