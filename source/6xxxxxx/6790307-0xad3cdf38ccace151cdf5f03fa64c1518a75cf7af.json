{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract HumanOriented {\r\n    modifier onlyHuman() {\r\n        require(msg.sender == tx.origin, \"not a human\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract Events {\r\n    function emitEggClaimed(address, uint256) external {}\r\n    function emitEggSentToNest(address, uint256) external {}\r\n    function emitDragonUpgraded(uint256) external {}\r\n    function emitEggHatched(address, uint256, uint256) external {}\r\n    function emitEggCreated(address, uint256) external {}\r\n    function emitDistributionUpdated(uint256, uint256, uint256) external {}\r\n    function emitSkillSet(uint256) external {}\r\n    function emitSkillUsed(uint256, uint256) external {}\r\n    function emitDragonNameSet(uint256, bytes32) external {}\r\n    function emitDragonTacticsSet(uint256, uint8, uint8) external {}\r\n    function emitUserNameSet(address, bytes32) external {}\r\n    function emitLeaderboardRewardsDistributed(uint256[10], address[10]) external {}\r\n}\r\n\r\ncontract User {\r\n    mapping (bytes32 => bool) public existingNames;\r\n    mapping (address => bytes32) public names;\r\n\r\n    function getName(address) external view returns (bytes32) {}\r\n    function setName(address, string) external returns (bytes32) {}\r\n}\r\n\r\ncontract CoreController {\r\n    function claimEgg(address, uint8) external returns (uint256, uint256, uint256, uint256) {}\r\n    function sendToNest(address, uint256) external returns (bool, uint256, uint256, address) {}\r\n    function breed(address, uint256, uint256) external returns (uint256) {}\r\n    function upgradeDragonGenes(address, uint256, uint16[10]) external {}\r\n    function setDragonTactics(address, uint256, uint8, uint8) external {}\r\n    function setDragonName(address, uint256, string) external returns (bytes32) {}\r\n    function setDragonSpecialPeacefulSkill(address, uint256, uint8) external {}\r\n    function useDragonSpecialPeacefulSkill(address, uint256, uint256) external {}\r\n    function distributeLeaderboardRewards() external returns (uint256[10], address[10]) {}\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract MainBase is Pausable, Upgradable, HumanOriented {\r\n    CoreController coreController;\r\n    User user;\r\n    Events events;\r\n\r\n    function claimEgg(uint8 _dragonType) external onlyHuman whenNotPaused {\r\n        (\r\n            uint256 _eggId,\r\n            uint256 _restAmount,\r\n            uint256 _lastBlock,\r\n            uint256 _interval\r\n        ) = coreController.claimEgg(msg.sender, _dragonType);\r\n\r\n        events.emitEggClaimed(msg.sender, _eggId);\r\n        events.emitDistributionUpdated(_restAmount, _lastBlock, _interval);\r\n    }\r\n\r\n    // ACTIONS WITH OWN TOKENS\r\n\r\n    function sendToNest(\r\n        uint256 _eggId\r\n    ) external onlyHuman whenNotPaused {\r\n        (\r\n            bool _isHatched,\r\n            uint256 _newDragonId,\r\n            uint256 _hatchedId,\r\n            address _owner\r\n        ) = coreController.sendToNest(msg.sender, _eggId);\r\n\r\n        events.emitEggSentToNest(msg.sender, _eggId);\r\n\r\n        if (_isHatched) {\r\n            events.emitEggHatched(_owner, _newDragonId, _hatchedId);\r\n        }\r\n    }\r\n\r\n    function breed(uint256 _momId, uint256 _dadId) external onlyHuman whenNotPaused {\r\n        uint256 eggId = coreController.breed(msg.sender, _momId, _dadId);\r\n        events.emitEggCreated(msg.sender, eggId);\r\n    }\r\n\r\n    function upgradeDragonGenes(uint256 _id, uint16[10] _dnaPoints) external onlyHuman whenNotPaused {\r\n        coreController.upgradeDragonGenes(msg.sender, _id, _dnaPoints);\r\n        events.emitDragonUpgraded(_id);\r\n    }\r\n\r\n    function setDragonTactics(uint256 _id, uint8 _melee, uint8 _attack) external onlyHuman whenNotPaused {\r\n        coreController.setDragonTactics(msg.sender, _id, _melee, _attack);\r\n        events.emitDragonTacticsSet(_id, _melee, _attack);\r\n    }\r\n\r\n    function setDragonName(uint256 _id, string _name) external onlyHuman whenNotPaused returns (bytes32 name) {\r\n        name = coreController.setDragonName(msg.sender, _id, _name);\r\n        events.emitDragonNameSet(_id, name);\r\n    }\r\n\r\n    function setDragonSpecialPeacefulSkill(uint256 _id, uint8 _class) external onlyHuman whenNotPaused {\r\n        coreController.setDragonSpecialPeacefulSkill(msg.sender, _id, _class);\r\n        events.emitSkillSet(_id);\r\n    }\r\n\r\n    function useDragonSpecialPeacefulSkill(uint256 _id, uint256 _target) external onlyHuman whenNotPaused {\r\n        coreController.useDragonSpecialPeacefulSkill(msg.sender, _id, _target);\r\n        events.emitSkillUsed(_id, _target);\r\n    }\r\n\r\n    // LEADERBOARD\r\n\r\n    function distributeLeaderboardRewards() external onlyHuman whenNotPaused {\r\n        (\r\n            uint256[10] memory _dragons,\r\n            address[10] memory _users\r\n        ) = coreController.distributeLeaderboardRewards();\r\n        events.emitLeaderboardRewardsDistributed(_dragons, _users);\r\n    }\r\n\r\n    // USER\r\n\r\n    function setName(string _name) external onlyHuman whenNotPaused returns (bytes32 name) {\r\n        name = user.setName(msg.sender, _name);\r\n        events.emitUserNameSet(msg.sender, name);\r\n    }\r\n\r\n    function getName(address _user) external view returns (bytes32) {\r\n        return user.getName(_user);\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        coreController = CoreController(_newDependencies[0]);\r\n        user = User(_newDependencies[1]);\r\n        events = Events(_newDependencies[2]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dnaPoints\",\"type\":\"uint16[10]\"}],\"name\":\"upgradeDragonGenes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_melee\",\"type\":\"uint8\"},{\"name\":\"_attack\",\"type\":\"uint8\"}],\"name\":\"setDragonTactics\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"useDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeLeaderboardRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonType\",\"type\":\"uint8\"}],\"name\":\"claimEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setDragonName\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"setDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint256\"}],\"name\":\"sendToNest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_momId\",\"type\":\"uint256\"},{\"name\":\"_dadId\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MainBase","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40da39e1b66cc27bf6d333686ac26b559720b7ba99f2dbd494d668b5fa136854"}]}