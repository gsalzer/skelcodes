{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    \r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract Plumix is StandardToken { \r\n\r\n    /* Public variables of the token */\r\n\r\n   \r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\r\n    uint256 public minSales;                 // Minimum amount to be bought (0.01ETH)\r\n    uint256 public totalEthInWei;         \r\n    address internal fundsWallet;           \r\n    uint256 public airDropBal;\r\n    uint256 public icoSales;\r\n    uint256 public icoSalesBal;\r\n    uint256 public icoSalesCount;\r\n    bool public distributionClosed;\r\n\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionClosed);\r\n        _;\r\n    }\r\n    \r\n    address owner = msg.sender;\r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n    event DistrClosed();\r\n    event DistrStarted();\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    \r\n    function endDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionClosed = true;\r\n        emit DistrClosed();\r\n        return true;\r\n    }\r\n    \r\n    function startDistribution() onlyOwner public returns (bool) {\r\n        distributionClosed = false;\r\n        emit DistrStarted();\r\n        return true;\r\n    }\r\n    \r\n\r\n    function Plumix() {\r\n        balances[msg.sender] = 10000000000e18;               \r\n        totalSupply = 10000000000e18;                        \r\n        airDropBal = 1500000000e18;\r\n        icoSales = 5000000000e18;\r\n        icoSalesBal = 5000000000e18;\r\n        name = \"Plumix\";                                   \r\n        decimals = 18;                                               \r\n        symbol = \"PLXT\";                                             \r\n        unitsOneEthCanBuy = 10000000;\r\n        minSales = 1 ether / 100; // 0.01ETH\r\n        icoSalesCount = 0;\r\n        fundsWallet = msg.sender;                                   \r\n        distributionClosed = true;\r\n        \r\n    }\r\n\r\n    function() public canDistr payable{\r\n        totalEthInWei = totalEthInWei + msg.value;\r\n        uint256 amount = msg.value * unitsOneEthCanBuy;\r\n        require(msg.value >= minSales);\r\n        require(amount <= icoSalesBal);\r\n        \r\n\r\n        balances[fundsWallet] = balances[fundsWallet] - amount;\r\n        balances[msg.sender] = balances[msg.sender] + amount;\r\n\r\n        Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\r\n\r\n        \r\n        fundsWallet.transfer(msg.value);\r\n        \r\n        icoSalesCount = icoSalesCount + amount;\r\n        icoSalesBal = icoSalesBal - amount;\r\n        if (icoSalesCount >= icoSales) {\r\n            distributionClosed = true;\r\n        }\r\n    }\r\n    \r\n    \r\n function doAirdrop(address _participant, uint _amount) internal {\r\n\r\n        require( _amount > 0 );      \r\n\r\n        require( _amount <= airDropBal );\r\n        \r\n        balances[_participant] = balances[_participant] + _amount;\r\n        airDropBal = airDropBal - _amount ;\r\n     \r\n     // Airdrop log\r\n    emit Airdrop(_participant, _amount, balances[_participant]);  \r\n     }\r\n     \r\n     \r\n         function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \r\n        doAirdrop(_participant, _amount);\r\n    }\r\n\r\n    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \r\n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\r\n    }\r\n     \r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner] - _value;\r\n        totalSupply = totalSupply - _value;\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSalesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSalesBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Plumix","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1f348180ee2046b0863f8ca7f2f71cd9ff31dc8e0647e3de052b5cb49e13487d"}]}