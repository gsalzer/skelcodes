{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// THE LAST SMART CONTRACT HAD SOME SECURITY HOLES\r\n// THIS IS THE SECOND SMART CONTRACT\r\n// OLD CONTRACT CAN BE SEEN AT https://etherscan.io/address/0xdd8f1fc3f9eb03e151abb5afcc42644e28a1e797\r\n// DATA IS IMPORTED FROM THE LAST CONTRACT\r\n// BIG SHOUTOUT TO CASTILLO NETWORK FOR FINDING THE SECURITY HOLE AND PERFORMING AN AUDIT ON THE LAST CONTRACT\r\n// https://github.com/EthereumCommonwealth/Auditing\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n// Create Ad on DappVolume\r\n// Advertiser can choose 1 hour, 12 hours, 24 hours, or 1 week\r\n// half of the money gets sent back to last advertiser\r\n//\r\n// An investor can earn 10% of the ad revenue\r\n// Investors can get bought out by new investors\r\n// when an invester is bought out, they get 120% of their investment back\r\n\r\ncontract DappVolumeAd {\r\n\r\n\t// import safemath\r\n\tusing SafeMath for uint256;\r\n\r\n\t// set variables\r\n\tuint256 public dappId;\r\n\tuint256 public purchaseTimestamp;\r\n\tuint256 public purchaseSeconds;\r\n\tuint256 public investmentMin;\r\n\tuint256 public adPriceHour;\r\n\tuint256 public adPriceHalfDay;\r\n\tuint256 public adPriceDay;\r\n\tuint256 public adPriceWeek;\r\n\tuint256 public adPriceMultiple;\r\n\taddress public contractOwner;\r\n\taddress public lastOwner;\r\n\taddress public theInvestor;\r\n\r\n\t// only contract owner\r\n\tmodifier onlyContractOwner {\r\n\t\trequire(msg.sender == contractOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\t// set constructor\r\n\tconstructor() public {\r\n\t\tinvestmentMin = 4096000000000000000;\r\n\t\tadPriceHour = 5000000000000000;\r\n\t\tadPriceHalfDay = 50000000000000000;\r\n\t\tadPriceDay = 100000000000000000;\r\n\t\tadPriceWeek = 500000000000000000;\r\n\t\tadPriceMultiple = 2;\r\n\t\tcontractOwner = msg.sender;\r\n\t\ttheInvestor = 0x1C26d2dFDACe03F0F6D0AaCa233D00728b9e58da;\r\n\t\tlastOwner = contractOwner;\r\n\t}\r\n\r\n\t// withdraw funds to contract creator\r\n\tfunction withdraw() public onlyContractOwner {\r\n\t\tcontractOwner.transfer(address(this).balance);\r\n\t}\r\n\r\n\t// set ad price multiple incase we want to up the price in the future\r\n\tfunction setAdPriceMultiple(uint256 amount) public onlyContractOwner {\r\n\t\tadPriceMultiple = amount;\r\n\t}\r\n\r\n\t// update and set ad\r\n\tfunction updateAd(uint256 id) public payable {\r\n\t\t// set minimum amount and make sure ad hasnt expired\r\n\t\trequire(msg.value >= adPriceMultiple.mul(adPriceHour));\r\n\t\trequire(block.timestamp > purchaseTimestamp.add(purchaseSeconds));\r\n\t\trequire(id > 0);\r\n\r\n\t\t// send 10% to the investor\r\n\t\ttheInvestor.send(msg.value.div(10));\r\n\t\t// send 50% of the money to the last person\r\n\t\tlastOwner.send(msg.value.div(2));\r\n\r\n\t\t// set ad time limit in seconds\r\n\t\tif (msg.value >= adPriceMultiple.mul(adPriceWeek)) {\r\n\t\t\tpurchaseSeconds = 604800; // 1 week\r\n\t\t} else if (msg.value >= adPriceMultiple.mul(adPriceDay)) {\r\n\t\t\tpurchaseSeconds = 86400; // 1 day\r\n\t\t} else if (msg.value >= adPriceMultiple.mul(adPriceHalfDay)) {\r\n\t\t\tpurchaseSeconds = 43200; // 12 hours\r\n\t\t} else {\r\n\t\t\tpurchaseSeconds = 3600; // 1 hour\r\n\t\t}\r\n\r\n\t\t// set dapp id\r\n\t\tdappId = id;\r\n\t\t// set new timestamp\r\n\t\tpurchaseTimestamp = block.timestamp;\r\n\t\t// set last owner\r\n\t\tlastOwner = msg.sender;\r\n\t}\r\n\r\n\t// update the investor\r\n\tfunction updateInvestor() public payable {\r\n\t\trequire(msg.value >= investmentMin);\r\n\t\t// send 60% to last investor (120% of original purchase)\r\n\t\ttheInvestor.send(msg.value.div(100).mul(60));\r\n\t\t// double the price to become the investor\r\n\t\tinvestmentMin = investmentMin.mul(2);\r\n\t\t// set new investor\r\n\t\ttheInvestor = msg.sender;\r\n\t}\r\n\r\n\t// get timestamp when ad ends\r\n\tfunction getPurchaseTimestampEnds() public view returns (uint _getPurchaseTimestampAdEnds) {\r\n\t\treturn purchaseTimestamp.add(purchaseSeconds);\r\n\t}\r\n\r\n\t// get contract balance\r\n\tfunction getBalance() public view returns(uint256){\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"adPriceDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateAd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceHalfDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAdPriceMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseTimestampEnds\",\"outputs\":[{\"name\":\"_getPurchaseTimestampAdEnds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateInvestor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adPriceHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DappVolumeAd","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84291fd294aa5f565c761749e584ee8d89ca1eefbce1207b16c86accca8312db"}]}