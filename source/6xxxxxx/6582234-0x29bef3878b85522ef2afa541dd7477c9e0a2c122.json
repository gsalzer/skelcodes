{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* ETHERLIFE INTERNATIONAL ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\r\n* Web:               https://etherlife.io\r\n* Telegram_channel:  https://t.me/etherlife\r\n* EN  Telegram_chat: https://t.me/etherlife_eng\r\n* RU  Telegram_chat: https://t.me/EtherLife_rus\r\n* Email:             support@etherlife.io\r\n* \r\n* \r\n*  - GAIN 4% - 0,5% per 24 HOURS\r\n*  - Life-long payments\r\n*  - The revolutionary reliability\r\n*  - Minimal contribution 0.1 eth\r\n*  - Currency and payment - ETH only\r\n*  - Contribution allocation schemes:\r\n*       - 89% payments;\r\n*       - 4% marketing;\r\n*       - 7% technical support & dev.\r\n*\r\n* HOW TO USE:\r\n*  1. Send from ETH wallet to the smart contract address 0x29BeF3878B85522Ef2AFA541dD7477c9e0a2c122 any amount from 0.1 ETH.\r\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address \r\n*     of your wallet.\r\n*  3a. Claim your profit by sending 0 ether transaction.\r\n*  OR\r\n*  3b. For reinvest, you need to deposit the amount that you want to reinvest and the \r\n*      accrued interest automatically summed to your new contribution.\r\n*\r\n* RECOMMEND\r\n* GAS LIMIT: 200000\r\n* GAS PRICE: https://ethgasstation.info/\r\n* \r\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet. \r\n*\r\n* AFFILIATE PROGRAM:\r\n* 1 LEVEL - 2 %\r\n* 2 LEVEL - 1 %\r\n* 3 LEVEL - 0.5 %\r\n* 4 LEVEL - 0.25 %\r\n* 5 LEVEL - 0.25 %\r\n*\r\n* ATTENTION!\r\n* It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you \r\n* have private keys.\r\n*\r\n* Contracts reviewed and approved by octopus.\r\n*/\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EtherLife\r\n{   \r\n    using SafeMath for uint;\r\n    address public owner;\r\n    \r\n    struct deposit {\r\n        uint time;\r\n        uint value;\r\n        uint timeOfLastWithdraw;\r\n    }\r\n    \r\n    mapping(address => deposit) public deposits;\r\n    mapping(address => address) public parents;\r\n    address[] public investors;\r\n    \r\n    uint public constant minDepositSum = 100 finney; // 0.1 ether;\r\n    \r\n    event Deposit(address indexed from, uint256 value, uint256 startTime);\r\n    event Withdraw(address indexed from, uint256 value);\r\n    event ReferrerBonus(address indexed from, address indexed to, uint8 level, uint256 value);\r\n    \r\n    constructor () public \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier checkSender() \r\n    {\r\n        require(msg.sender != address(0));\r\n        _;\r\n    }\r\n    \r\n    function bytesToAddress(bytes source) internal pure returns(address parsedAddress) \r\n    {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    function () checkSender public payable \r\n    {\r\n        if(msg.value == 0)\r\n        {\r\n            withdraw();\r\n            return;\r\n        }\r\n        \r\n        require(msg.value >= minDepositSum);\r\n        \r\n        uint bonus = checkReferrer(msg.sender, msg.value);\r\n        \r\n        payFee(msg.value);\r\n        addDeposit(msg.sender, msg.value, bonus);\r\n        \r\n        payRewards(msg.sender, msg.value);\r\n    }\r\n    \r\n    function getInvestorsLength() public view returns (uint)\r\n    {\r\n        return investors.length;\r\n    }\r\n    \r\n    function getParents(address investorAddress) public view returns (address[])\r\n    {\r\n        address[] memory refLevels = new address[](5);\r\n        address current = investorAddress;\r\n        \r\n        for(uint8 i = 0; i < 5; i++)\r\n        {\r\n             current = parents[current];\r\n             if(current == address(0)) break;\r\n             refLevels[i] = current;\r\n        }\r\n        \r\n        return refLevels;\r\n    }\r\n    \r\n    function calculateRewardForLevel(uint8 level, uint value) public pure returns (uint)\r\n    {\r\n        if(level == 1) return value.div(50);           // 2%\r\n        if(level == 2) return value.div(100);          // 1%\r\n        if(level == 3) return value.div(200);          // 0.5%\r\n        if(level == 4) return value.div(400);          // 0.25%\r\n        if(level == 5) return value.div(400);          // 0.25%\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function calculateWithdrawalSumForPeriod(uint period, uint depositValue, uint duration) public pure returns (uint)\r\n    {\r\n        if(period == 1) return depositValue * 4 / 100 * duration / 1 days;          // 4%\r\n        else if(period == 2) return depositValue * 3 / 100 * duration / 1 days;     // 3%\r\n        else if(period == 3) return depositValue * 2 / 100 * duration / 1 days;     // 2%\r\n        else if(period == 4) return depositValue / 100 * duration / 1 days;         // 1%\r\n        else if(period == 5) return depositValue / 200 * duration / 1 days;         // 0.5%\r\n        return 0;\r\n    }\r\n    \r\n    function calculateWithdrawalSum(uint currentTime, uint depositTime, uint depositValue, uint timeOfLastWithdraw) public pure returns (uint)\r\n    {\r\n        uint startTime = 0;\r\n        uint endTime = 0;\r\n        uint sum = 0;\r\n        int duration = 0;\r\n        \r\n        uint timeEndOfPeriod = 0;\r\n        uint timeEndOfPrevPeriod = 0;\r\n        \r\n        for(uint i = 1; i <= 5; i++)\r\n        {\r\n            timeEndOfPeriod = depositTime.add(i.mul(30 days));\r\n            \r\n            if(i == 1)\r\n            {\r\n                startTime = timeOfLastWithdraw;\r\n                endTime = currentTime > timeEndOfPeriod ? timeEndOfPeriod : currentTime;\r\n            }\r\n            else if(i == 5) \r\n            {\r\n                timeEndOfPrevPeriod = timeEndOfPeriod.sub(30 days);\r\n                startTime = timeOfLastWithdraw > timeEndOfPrevPeriod ? timeOfLastWithdraw : timeEndOfPrevPeriod;\r\n                endTime = currentTime;\r\n            }\r\n            else\r\n            {\r\n                timeEndOfPrevPeriod = timeEndOfPeriod.sub(30 days);\r\n                startTime = timeOfLastWithdraw > timeEndOfPrevPeriod ? timeOfLastWithdraw : timeEndOfPrevPeriod;\r\n                endTime = currentTime > timeEndOfPeriod ? timeEndOfPeriod : currentTime;    \r\n            }\r\n            \r\n            duration = int(endTime - startTime);\r\n            if(duration >= 0)\r\n            {\r\n                sum = sum.add(calculateWithdrawalSumForPeriod(i, depositValue, uint(duration)));\r\n                timeOfLastWithdraw = endTime;\r\n            }\r\n        }\r\n        \r\n        return sum;\r\n    }\r\n    \r\n    function checkReferrer(address investorAddress, uint weiAmount) internal returns (uint)\r\n    {\r\n        if(deposits[investorAddress].value == 0 && msg.data.length == 20)\r\n        {\r\n            address referrerAddress = bytesToAddress(bytes(msg.data));\r\n            require(referrerAddress != investorAddress);     \r\n            require(deposits[referrerAddress].value > 0);        \r\n            \r\n            parents[investorAddress] = referrerAddress;\r\n            return weiAmount / 100; // 1%\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function payRewards(address investorAddress, uint depositValue) internal\r\n    {   \r\n        address[] memory parentAddresses = getParents(investorAddress);\r\n        for(uint8 i = 0; i < parentAddresses.length; i++)\r\n        {\r\n            address parent = parentAddresses[i];\r\n            if(parent == address(0)) break;\r\n            \r\n            uint rewardValue = calculateRewardForLevel(i + 1, depositValue);\r\n            parent.transfer(rewardValue);\r\n            \r\n            emit ReferrerBonus(investorAddress, parent, i + 1, rewardValue);\r\n        }\r\n    }\r\n    \r\n    function addDeposit(address investorAddress, uint weiAmount, uint bonus) internal\r\n    {   \r\n        if(deposits[investorAddress].value == 0)\r\n        {\r\n            deposits[investorAddress].time = now;\r\n            deposits[investorAddress].timeOfLastWithdraw = deposits[investorAddress].time;\r\n            deposits[investorAddress].value = weiAmount.add(bonus);\r\n            investors.push(investorAddress);\r\n        }\r\n        else\r\n        {\r\n            payWithdraw(investorAddress);\r\n            deposits[investorAddress].value = deposits[investorAddress].value.add(weiAmount);\r\n        }\r\n        \r\n        emit Deposit(msg.sender, msg.value, deposits[investorAddress].timeOfLastWithdraw);\r\n    }\r\n    \r\n    function payFee(uint weiAmount) internal\r\n    {\r\n        uint fee = weiAmount.mul(11).div(100); // 11%\r\n        owner.transfer(fee);\r\n    }\r\n    \r\n    function calculateNewTime(uint startTime, uint endTime) public pure returns (uint) \r\n    {\r\n        uint daysCount = endTime.sub(startTime).div(1 days);\r\n        return startTime.add(daysCount.mul(1 days));\r\n    }\r\n    \r\n    function payWithdraw(address to) internal\r\n    {\r\n        require(deposits[to].value > 0);\r\n        require(now - deposits[to].timeOfLastWithdraw >= 1 days);\r\n        \r\n        uint sum = calculateWithdrawalSum(now, deposits[to].time, deposits[to].value, deposits[to].timeOfLastWithdraw);\r\n        require(sum > 0);\r\n        \r\n        deposits[to].timeOfLastWithdraw = now;\r\n        \r\n        to.transfer(sum);\r\n        emit Withdraw(to, sum);\r\n    }\r\n    \r\n    function withdraw() checkSender public\r\n    {\r\n        payWithdraw(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"parents\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDepositSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"depositValue\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawalSumForPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTime\",\"type\":\"uint256\"},{\"name\":\"depositTime\",\"type\":\"uint256\"},{\"name\":\"depositValue\",\"type\":\"uint256\"},{\"name\":\"timeOfLastWithdraw\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawalSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calculateNewTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"getParents\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateRewardForLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timeOfLastWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReferrerBonus\",\"type\":\"event\"}]","ContractName":"EtherLife","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://801cec58c94f64926930c625f76aee820755e5da1cc1335ad4a420839b42ef13"}]}