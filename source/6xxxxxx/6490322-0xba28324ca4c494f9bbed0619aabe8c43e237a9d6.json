{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Magic10 {\r\n    \r\n    // Timer of percentage increasing \r\n\tuint256 public periodLength = 7 days;\r\n\t\r\n\t// We need to work with fractional percents like 0.7%, so we need to devide by 1000 before multiply the number\r\n\t// Each variable which calculated with this value has a prefix Decimal\r\n\tuint256 public percentDecimals = 3;\r\n\t\r\n\t// Percents calculation using percentDecimals 2% = 20\r\n\tuint256 public startDecimalPercent = 20;\r\n\r\n    // Additional percent for completed period is 0.3% = 3\r\n\tuint256 public bonusDecimalPercentByPeriod = 3; \r\n\t\r\n\t// Maximal percent is 5% = 50\r\n\tuint256 public maximalDecimalPercent = 50;\r\n\r\n    // Structure of deposit\r\n\tstruct Deposit {\r\n\t    address owner;\r\n        uint256 amount;\r\n        uint64 timeFrom;\r\n    }\r\n    \r\n    // Notice, start index for all deposits is 1.\r\n    // List of all deposits\r\n    mapping(uint64 => Deposit) public deposits;\r\n    \r\n    // List of all deposits by each investor\r\n    // Implemented to enable quick access to investor deposits even without server caching\r\n    mapping(address => mapping(uint64 => uint64)) public investorsToDeposit;\r\n    \r\n    // Count of deposits by each investor\r\n    mapping(address => uint16) public depositsByInvestor;\r\n    \r\n    // List of registered referrals\r\n    mapping(address => bool) public referralList;\r\n    \r\n    // Total number of deposits\r\n    uint64 public depositsCount = 0;\r\n    \r\n    \r\n    // Create a new deposit\r\n    function createDeposit(address _referral) external payable {\r\n        \r\n        // Minimal deposit is 1 finney\r\n        require(msg.value >= 1 finney);\r\n        \r\n        // Create a deposit object\r\n        Deposit memory _deposit = Deposit({\r\n            owner: msg.sender,\r\n            amount: msg.value,\r\n            timeFrom: uint64(now)\r\n        });\r\n        \r\n        //\r\n        // Calculating IDS\r\n        //\r\n        \r\n        // New deposit ID equals to current deposits count + 1\r\n        uint64 depositId = depositsCount+1;\r\n        \r\n        // new deposit ID for investor equals current count + 1\r\n        uint64 depositIdByInvestor = depositsByInvestor[msg.sender] + 1;\r\n        \r\n        //\r\n        // Saving data\r\n        //\r\n        \r\n        // Saving deposit into current ID\r\n        deposits[depositId] = _deposit;\r\n        \r\n        // Adding deposit ID into list of deposits for current investor\r\n        investorsToDeposit[msg.sender][depositIdByInvestor] = depositId;\r\n        \r\n        //\r\n        // Counters incrementing    \r\n        //\r\n        \r\n        // Increment count of deposits for current investor\r\n        depositsByInvestor[msg.sender]++;\r\n        \r\n        // Increment global count of deposits\r\n        depositsCount++;\r\n        \r\n        //\r\n        // Additional sendings - 5% to company and 1-5% to referrals\r\n        //\r\n        \r\n        address company = 0xFd40fE6D5d31c6A523F89e3Af05bb3457B5EAD0F;\r\n        \r\n        // 5% goes to the company budget\r\n        company.transfer(msg.value / 20);\r\n        \r\n        // Referral percent\r\n        uint8 refferalPercent = currentReferralPercent();\r\n        \r\n        // Referral receive reward according current reward percent if he is in list.\r\n        if(referralList[_referral] && _referral != msg.sender) {\r\n            _referral.transfer(msg.value * refferalPercent/ 100);\r\n        }\r\n    }\r\n    \r\n    // Function for withdraw\r\n    function withdrawPercents(uint64 _depositId) external {\r\n        \r\n        // Get deposit information\r\n        Deposit memory deposit = deposits[_depositId];\r\n        \r\n        // Available for deposit owner only\r\n        require(deposit.owner == msg.sender);\r\n        \r\n        // Get reward amount by public function currentReward\r\n        uint256 reward = currentReward(_depositId);\r\n        \r\n        // Refresh deposit time and save it\r\n        deposit.timeFrom = uint64(now);\r\n        deposits[_depositId] = deposit;\r\n        \r\n        // Transfer reward to investor\r\n        deposit.owner.transfer(reward);\r\n    }\r\n\r\n    // Referal registration\r\n    function registerReferral(address _refferal) external {\r\n        // Available from this address only \r\n        require(msg.sender == 0x21b4d32e6875a6c2e44032da71a33438bbae8820);\r\n        \r\n        referralList[_refferal] = true;\r\n    }\r\n    \r\n    //\r\n    //\r\n    //\r\n    // Information functions\r\n    //\r\n    //\r\n    //\r\n    \r\n    // Calcaulating current reward by deposit ID\r\n    function currentReward(uint64 _depositId)\r\n        view \r\n        public \r\n        returns(uint256 amount) \r\n    {\r\n        // Get information about deposit\r\n        Deposit memory deposit = deposits[_depositId];\r\n        \r\n        // Bug protection with \"now\" time\r\n        if(deposit.timeFrom > now)\r\n            return 0;\r\n        \r\n        // Get current deposit percent using public function rewardDecimalPercentByTime\r\n        uint16 dayDecimalPercent = rewardDecimalPercentByTime(deposit.timeFrom);\r\n        \r\n        // Calculating reward for each day\r\n        uint256 amountByDay = ( deposit.amount * dayDecimalPercent / 10**percentDecimals ) ;\r\n        \r\n        // Calculate time from the start of the deposit to current time in minutes\r\n        uint256 minutesPassed = (now - deposit.timeFrom) / 60;\r\n        amount = amountByDay * minutesPassed / 1440;\r\n    }\r\n    \r\n    // Calculate reward percent by timestamp of creation\r\n    function rewardDecimalPercentByTime(uint256 _timeFrom) \r\n        view \r\n        public \r\n        returns(uint16 decimalPercent) \r\n    {\r\n        // Returning start percent, if sending timestamp from the future\r\n        if(_timeFrom >= now)\r\n            return uint16(startDecimalPercent);\r\n            \r\n        // Main calculating\r\n        decimalPercent = uint16(startDecimalPercent +  (( (now - _timeFrom) / periodLength ) * bonusDecimalPercentByPeriod));\r\n        \r\n        // Returning the maximum percentage if the percentage is higher than the maximum\r\n        if(decimalPercent > maximalDecimalPercent)\r\n            return uint16(maximalDecimalPercent);\r\n    }\r\n    \r\n    // Referral percent calculating by contract balance\r\n    function currentReferralPercent() \r\n        view \r\n        public \r\n        returns(uint8 percent) \r\n    {\r\n        if(address(this).balance > 10000 ether)\r\n            return 1;\r\n            \r\n        if(address(this).balance > 1000 ether)\r\n            return 2;\r\n            \r\n        if(address(this).balance > 100 ether)\r\n            return 3;\r\n            \r\n        if(address(this).balance > 10 ether)\r\n            return 4;\r\n        \r\n        return 5;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_timeFrom\",\"type\":\"uint256\"}],\"name\":\"rewardDecimalPercentByTime\",\"outputs\":[{\"name\":\"decimalPercent\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"investorsToDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refferal\",\"type\":\"address\"}],\"name\":\"registerReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositId\",\"type\":\"uint64\"}],\"name\":\"withdrawPercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositsByInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"createDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusDecimalPercentByPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timeFrom\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDecimalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalDecimalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_depositId\",\"type\":\"uint64\"}],\"name\":\"currentReward\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReferralPercent\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Magic10","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b728de7da7a705c6b14f1238f718bc049d903610f6ab9d4e2d8c1cc3253f2d86"}]}