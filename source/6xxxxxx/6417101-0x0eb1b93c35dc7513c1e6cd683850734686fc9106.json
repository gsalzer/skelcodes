{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n*\r\n* @dev Stores permissions and validators and provides setter and getter methods. \r\n* Permissions determine which methods users have access to call. Validators\r\n* are able to mutate permissions at the Regulator level.\r\n*\r\n*/\r\ncontract RegulatorStorage is Ownable {\r\n    \r\n    /** \r\n        Structs \r\n    */\r\n\r\n    /* Contains metadata about a permission to execute a particular method signature. */\r\n    struct Permission {\r\n        string name; // A one-word description for the permission. e.g. \"canMint\"\r\n        string description; // A longer description for the permission. e.g. \"Allows user to mint tokens.\"\r\n        string contract_name; // e.g. \"PermissionedToken\"\r\n        bool active; // Permissions can be turned on or off by regulator\r\n    }\r\n\r\n    /** \r\n        Constants: stores method signatures. These are potential permissions that a user can have, \r\n        and each permission gives the user the ability to call the associated PermissionedToken method signature\r\n    */\r\n    bytes4 public constant MINT_SIG = bytes4(keccak256(\"mint(address,uint256)\"));\r\n    bytes4 public constant MINT_CUSD_SIG = bytes4(keccak256(\"mintCUSD(address,uint256)\"));\r\n    bytes4 public constant CONVERT_WT_SIG = bytes4(keccak256(\"convertWT(uint256)\"));\r\n    bytes4 public constant BURN_SIG = bytes4(keccak256(\"burn(uint256)\"));\r\n    bytes4 public constant CONVERT_CARBON_DOLLAR_SIG = bytes4(keccak256(\"convertCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant BURN_CARBON_DOLLAR_SIG = bytes4(keccak256(\"burnCarbonDollar(address,uint256)\"));\r\n    bytes4 public constant DESTROY_BLACKLISTED_TOKENS_SIG = bytes4(keccak256(\"destroyBlacklistedTokens(address,uint256)\"));\r\n    bytes4 public constant APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG = bytes4(keccak256(\"approveBlacklistedAddressSpender(address)\"));\r\n    bytes4 public constant BLACKLISTED_SIG = bytes4(keccak256(\"blacklisted()\"));\r\n\r\n    /** \r\n        Mappings \r\n    */\r\n\r\n    /* each method signature maps to a Permission */\r\n    mapping (bytes4 => Permission) public permissions;\r\n    /* list of validators, either active or inactive */\r\n    mapping (address => bool) public validators;\r\n    /* each user can be given access to a given method signature */\r\n    mapping (address => mapping (bytes4 => bool)) public userPermissions;\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event PermissionAdded(bytes4 methodsignature);\r\n    event PermissionRemoved(bytes4 methodsignature);\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n\r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a permission within the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    * @param _permissionName A \"slug\" name for this permission (e.g. \"canMint\").\r\n    * @param _permissionDescription A lengthier description for this permission (e.g. \"Allows user to mint tokens\").\r\n    * @param _contractName Name of the contract that the method belongs to.\r\n    */\r\n    function addPermission(\r\n        bytes4 _methodsignature, \r\n        string _permissionName, \r\n        string _permissionDescription, \r\n        string _contractName) public onlyValidator { \r\n        Permission memory p = Permission(_permissionName, _permissionDescription, _contractName, true);\r\n        permissions[_methodsignature] = p;\r\n        emit PermissionAdded(_methodsignature);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removePermission(bytes4 _methodsignature) public onlyValidator {\r\n        permissions[_methodsignature].active = false;\r\n        emit PermissionRemoved(_methodsignature);\r\n    }\r\n    \r\n    /**\r\n    * @notice Sets a permission in the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function setUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being set must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission from the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removeUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being removed must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = false;\r\n    }\r\n\r\n    /**\r\n    * @notice add a Validator\r\n    * @param _validator Address of validator to add\r\n    */\r\n    function addValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = true;\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice remove a Validator\r\n    * @param _validator Address of validator to remove\r\n    */\r\n    function removeValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = false;\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice does validator exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return validators[_validator];\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isPermission(bytes4 _methodsignature) public view returns (bool) {\r\n        return permissions[_methodsignature].active;\r\n    }\r\n\r\n    /**\r\n    * @notice get Permission structure\r\n    * @param _methodsignature request to retrieve the Permission struct for this methodsignature\r\n    * @return Permission\r\n    **/\r\n    function getPermission(bytes4 _methodsignature) public view returns \r\n        (string name, \r\n         string description, \r\n         string contract_name,\r\n         bool active) {\r\n        return (permissions[_methodsignature].name,\r\n                permissions[_methodsignature].description,\r\n                permissions[_methodsignature].contract_name,\r\n                permissions[_methodsignature].active);\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function hasUserPermission(address _who, bytes4 _methodsignature) public view returns (bool) {\r\n        return userPermissions[_who][_methodsignature];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Regulator\r\n * @dev Regulator can be configured to meet relevant securities regulations, KYC policies\r\n * AML requirements, tax laws, and more. The Regulator ensures that the PermissionedToken\r\n * makes compliant transfers possible. Contains the userPermissions necessary\r\n * for regulatory compliance.\r\n *\r\n */\r\ncontract Regulator is RegulatorStorage {\r\n    \r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event LogWhitelistedUser(address indexed who);\r\n    event LogBlacklistedUser(address indexed who);\r\n    event LogNonlistedUser(address indexed who);\r\n    event LogSetMinter(address indexed who);\r\n    event LogRemovedMinter(address indexed who);\r\n    event LogSetBlacklistDestroyer(address indexed who);\r\n    event LogRemovedBlacklistDestroyer(address indexed who);\r\n    event LogSetBlacklistSpender(address indexed who);\r\n    event LogRemovedBlacklistSpender(address indexed who);\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setMinter(address _who) public onlyValidator {\r\n        _setMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeMinter(address _who) public onlyValidator {\r\n        _removeMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        setUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogSetBlacklistSpender(_who);\r\n    }\r\n    \r\n    /**\r\n    * @notice Removes the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        removeUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogRemovedBlacklistSpender(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        setUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogSetBlacklistDestroyer(_who);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        removeUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogRemovedBlacklistDestroyer(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"whitelisted\" user.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setWhitelistedUser(address _who) public onlyValidator {\r\n        _setWhitelistedUser(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"blacklisted\" user. A blacklisted user has their accounts\r\n    * frozen; they cannot transfer, burn, or withdraw any tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistedUser(address _who) public onlyValidator {\r\n        _setBlacklistedUser(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"nonlisted\" user. Nonlisted users can trade tokens,\r\n    * but cannot burn them (and therefore cannot convert them into fiat.)\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setNonlistedUser(address _who) public onlyValidator {\r\n        _setNonlistedUser(_who);\r\n    }\r\n\r\n    /** Returns whether or not a user is whitelisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is whitelisted, `false` otherwise.\r\n     */\r\n    function isWhitelistedUser(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is blacklisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is blacklisted, `false` otherwise.\r\n     */\r\n    function isBlacklistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, BURN_SIG) && hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is nonlisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is nonlisted, `false` otherwise.\r\n     */\r\n    function isNonlistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, BURN_SIG) && !hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n    /** Returns whether or not a user is a blacklist spender.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist spender, `false` otherwise.\r\n     */\r\n    function isBlacklistSpender(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a blacklist destroyer.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist destroyer, `false` otherwise.\r\n     */\r\n    function isBlacklistDestroyer(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a minter.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a minter, `false` otherwise.\r\n     */\r\n    function isMinter(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, MINT_SIG);\r\n    }\r\n\r\n    /** Internal Functions **/\r\n\r\n    function _setMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        setUserPermission(_who, MINT_SIG);\r\n        emit LogSetMinter(_who);\r\n    }\r\n\r\n    function _removeMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        removeUserPermission(_who, MINT_SIG);\r\n        emit LogRemovedMinter(_who);\r\n    }\r\n\r\n    function _setNonlistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        removeUserPermission(_who, BURN_SIG);\r\n        removeUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogNonlistedUser(_who);\r\n    }\r\n\r\n    function _setBlacklistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        removeUserPermission(_who, BURN_SIG);\r\n        setUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogBlacklistedUser(_who);\r\n    }\r\n\r\n    function _setWhitelistedUser(address _who) internal {\r\n        require(isPermission(BURN_SIG), \"Burn method not supported by token\");\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        setUserPermission(_who, BURN_SIG);\r\n        removeUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogWhitelistedUser(_who);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedTokenRegulator\r\n * @dev WhitelistedTokenRegulator is a type of Regulator that modifies its definitions of\r\n * what constitutes a \"whitelisted/nonlisted/blacklisted\" user. A WhitelistedToken\r\n * provides a user the additional ability to convert from a whtielisted stablecoin into the\r\n * meta-token CUSD, or mint CUSD directly through a specific WT.\r\n *\r\n */\r\ncontract WhitelistedTokenRegulator is Regulator {\r\n\r\n    function isMinter(address _who) public view returns (bool) {\r\n        return (super.isMinter(_who) && hasUserPermission(_who, MINT_CUSD_SIG));\r\n    }\r\n\r\n    // Getters\r\n\r\n    function isWhitelistedUser(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, CONVERT_WT_SIG) && super.isWhitelistedUser(_who));\r\n    }\r\n\r\n    function isBlacklistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isBlacklistedUser(_who));\r\n    }\r\n\r\n    function isNonlistedUser(address _who) public view returns (bool) {\r\n        return (!hasUserPermission(_who, CONVERT_WT_SIG) && super.isNonlistedUser(_who));\r\n    }   \r\n\r\n    /** Internal functions **/\r\n\r\n    // A WT minter should have option to either mint directly into CUSD via mintCUSD(), or\r\n    // mint the WT via an ordinary mint() \r\n    function _setMinter(address _who) internal {\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        setUserPermission(_who, MINT_CUSD_SIG);\r\n        super._setMinter(_who);\r\n    }\r\n\r\n    function _removeMinter(address _who) internal {\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        removeUserPermission(_who, MINT_CUSD_SIG);\r\n        super._removeMinter(_who);\r\n    }\r\n\r\n    // Setters\r\n\r\n    // A WT whitelisted user should gain ability to convert their WT into CUSD. They can also burn their WT, as a\r\n    // PermissionedToken whitelisted user can do\r\n    function _setWhitelistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        setUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setWhitelistedUser(_who);\r\n    }\r\n\r\n    function _setBlacklistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        removeUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setBlacklistedUser(_who);\r\n    }\r\n\r\n    function _setNonlistedUser(address _who) internal {\r\n        require(isPermission(CONVERT_WT_SIG), \"Converting to CUSD not supported by token\");\r\n        removeUserPermission(_who, CONVERT_WT_SIG);\r\n        super._setNonlistedUser(_who);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeBlacklistSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setWhitelistedUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"hasUserPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"getPermission\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"contract_name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"setUserPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setBlacklistDestroyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"permissions\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"contract_name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isNonlistedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"removeUserPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeBlacklistDestroyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERT_WT_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"},{\"name\":\"_permissionName\",\"type\":\"string\"},{\"name\":\"_permissionDescription\",\"type\":\"string\"},{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"addPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isBlacklistedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"userPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_CUSD_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isBlacklistSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"isPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLACKLISTED_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DESTROY_BLACKLISTED_TOKENS_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_methodsignature\",\"type\":\"bytes4\"}],\"name\":\"removePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setBlacklistSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_CARBON_DOLLAR_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setBlacklistedUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setNonlistedUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isWhitelistedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isBlacklistDestroyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERT_CARBON_DOLLAR_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogWhitelistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogBlacklistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogNonlistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogSetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogRemovedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogSetBlacklistDestroyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogRemovedBlacklistDestroyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogSetBlacklistSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"LogRemovedBlacklistSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodsignature\",\"type\":\"bytes4\"}],\"name\":\"PermissionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"methodsignature\",\"type\":\"bytes4\"}],\"name\":\"PermissionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhitelistedTokenRegulator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91a1dff2ccf1c080640faefd835783fe92af06e4b5778917b6af8cfcb300e919"}]}