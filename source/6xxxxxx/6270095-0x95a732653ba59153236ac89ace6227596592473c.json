{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract XToken {\r\n    /**\r\n    代币：商品购买\r\n    初始化时定义商品描述，商品价格和单位\r\n    商品商家:即收款方\r\n    买家：即出资方\r\n    */\r\n    struct Goods {\r\n        string _desc;   //备注\r\n        string _name;   //商品名称\r\n        string _unit;   //商品计量单位\r\n        uint _price;    //商品价格\r\n        address _shopowner; //店长\r\n    }\r\n\r\n    /**\r\n    买家购物清单\r\n    */\r\n    struct ShoppingItem {\r\n        uint _id;\r\n        uint _count;\r\n    }\r\n    struct ShoppingList {\r\n        address _buyer;\r\n        ShoppingItem[] _items;\r\n    }\r\n\r\n    address private _owner; //平台拥有者\r\n    address private _finance; //负责财经，平台收款人员\r\n    uint private _percentage; //接百分比提成\r\n\r\n    //商品列表\r\n    Goods[] private _goods;\r\n    //买家清单\r\n    ShoppingList[] private _buyers;\r\n\r\n\r\n\tmapping (address => uint) private balances;\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\r\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\r\n\t\trequire(balances[from] > amount, \"发起交易的账号没有更多额度\");\r\n\r\n\t\tbalances[from] -= amount;\r\n\t\tbalances[to] += amount;\r\n\r\n\t\temit Transfer(from, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n    /**\r\n    只有管理员才可以给其它账号充值\r\n     */\r\n    function recharge(address to, uint amount) public returns(bool) {\r\n        balances[to] += amount;\r\n        balances[_owner] -= amount;//总账号数据要减少，保证存量一定\r\n        emit Transfer(_owner, to, amount);\r\n        return true;\r\n    } \r\n\r\n    constructor(uint percent) public {\r\n\t\t//balances[msg.sender] = 100000000000;\r\n\r\n        //_owner = msg.sender;\r\n        _percentage = percent; \r\n\r\n        //指定两个特殊号\r\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //公链账号\r\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\r\n\r\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //私有链账号\r\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \r\n        //代币总量\r\n        balances[_owner] = 100000000000;\r\n    }\r\n\r\n    function set_percentage(uint percentage) public {\r\n        require(msg.sender == _owner, \"非平台管理员，不能修改提成\");\r\n\r\n        _percentage = percentage;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\r\n        require(price > 0, \"商品价格需要大于0\");\r\n        require(shopowner != address(0), \"商家地址不能为空\");\r\n        /**\r\n        新增商品，每个商品的基本属性：价格，单位，名称，拥有者\r\n        */\r\n        Goods memory newGoods = Goods({\r\n            _name: name,\r\n            _unit: unit,\r\n            _price: price,\r\n            _shopowner: shopowner,\r\n            _desc: desc\r\n        });\r\n        \r\n        _goods.push(newGoods);\r\n\r\n        //返回商品ＩＤ\r\n        return _goods.length;\r\n    }\r\n\r\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\r\n        /**\r\n        出售商品：买家需要向店长　按商品名和数量，支付费用\r\n        */\r\n        \r\n        require(count > 0, \"购买数据不能为0\");\r\n        require(buyer != address(0), \"买家不能为空\");\r\n\r\n        /**\r\n        查找是否有指定的商品名，如果有就支付，没有返回\r\n         */\r\n\r\n        uint price;\r\n        uint p_shop;\r\n        uint p_owner;\r\n        /**这里后面需要修改为id来查找，不能用商品名，因为商品名有重复 */\r\n        for (uint i = 0; i < _goods.length; i++) {\r\n            if( i ==  goodsID) {\r\n\r\n                price = _goods[i]._price * count;\r\n\r\n                p_shop = price * (100 - _percentage) / 100;\r\n                p_owner = price * _percentage;\r\n\r\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\r\n                    return 0;\r\n                }\r\n                if(false == send_coin(buyer, _finance, p_owner)) {\r\n                    return 0;\r\n                }\r\n\r\n                //只存在买家清单中\r\n                return price;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\r\n        bytes storage a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        if (a.length != b.length)\r\n            return false;\r\n        // @todo unroll this loop\r\n        for (uint i = 0; i < a.length; i ++)\r\n            if (a[i] != b[i])\r\n            {\r\n                return false;\r\n            }    \r\n        return true;\r\n    }\r\n    \r\n\r\n\tfunction get_balance(address addr) public returns(uint) {\r\n\t\treturn balances[addr];\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"set_percentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"goodsID\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"sell_goods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"shopowner\",\"type\":\"address\"},{\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"add_goods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"XToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://364e9db8410d98ad2bf8ca6ba1902779dbcaef2a02ea49c617e253b493fcc3a1"}]}