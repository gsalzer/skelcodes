{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract NotASecurity {\r\n  uint public totalSupply;\r\n\r\n  uint public decimals = 18;\r\n  string public symbol = \"NOT\";\r\n  string public name = \"NotASecurity\";\r\n\r\n  mapping (address => uint) public balanceOf;\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n  address[11] public benefactors;\r\n  uint public benefactorsBalance;\r\n\r\n  // Caching things for performance reasons\r\n  mapping (address => uint8) private benefactorMap;\r\n  address private lowestBenefactor;\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n  constructor (uint _fee) public {\r\n    benefactors[1] = msg.sender;\r\n    lowestBenefactor = address(0);\r\n    benefactorMap[msg.sender] = 1;\r\n    balanceOf[msg.sender] = _fee;\r\n    totalSupply = _fee;\r\n    benefactorsBalance = _fee;\r\n  }\r\n\r\n  function buy() payable public returns (uint) {\r\n    uint _wei = msg.value;\r\n    address _investor = msg.sender;\r\n\r\n    require(_wei > 0);\r\n    require(distribute(_wei));\r\n\r\n    balanceOf[_investor] += _wei;\r\n    totalSupply += _wei;\r\n\r\n    require(reorganize(_wei, _investor));\r\n\r\n    return _wei;\r\n  }\r\n\r\n  function () payable public {\r\n    buy();\r\n  }\r\n\r\n  event Distribution(address _addr, uint _amount);\r\n\r\n  function distribute(uint _amount) public returns (bool) {\r\n    for (uint _i = 1; _i < benefactors.length; _i++) {\r\n      address _benefactor = benefactors[_i];\r\n      uint _benefactorBalance = balanceOf[_benefactor];\r\n\r\n      uint _amountToTransfer = (_benefactorBalance * _amount) / benefactorsBalance;\r\n      emit Distribution(_benefactor, _amountToTransfer);\r\n\r\n      if (_amountToTransfer > 0 && _benefactor != address(0)) {\r\n        _benefactor.transfer(_amountToTransfer);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function findLowestBenefactor() public returns (address) {\r\n    address _lowestBenefactor = benefactors[1];\r\n    address _benefactor;\r\n    for (\r\n      uint _j = 2;\r\n      _j < benefactors.length;\r\n      _j++\r\n    ) {\r\n      _benefactor = benefactors[_j];\r\n      if (_benefactor == address(0)) {\r\n        return _benefactor;\r\n\r\n      } else if (balanceOf[_benefactor] < balanceOf[_lowestBenefactor]) {\r\n        _lowestBenefactor = _benefactor;\r\n      }\r\n    }\r\n    return _lowestBenefactor;\r\n  }\r\n\r\n  function findEmptyBenefactorIndex() public returns (uint8) {\r\n    for (uint8 _i = 1; _i < benefactors.length; _i++) {\r\n      if (benefactors[_i] == address(0)) {\r\n        return _i;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function reorganize(uint _amount, address _investor) public returns (bool) {\r\n    // if investor is already a benefactor\r\n    if (benefactorMap[_investor] > 0) {\r\n      benefactorsBalance += _amount;\r\n\r\n    // if investor is now a top token holder\r\n    } else if (balanceOf[_investor] > balanceOf[lowestBenefactor]) {\r\n      bool _lowestBenefactorEmpty = lowestBenefactor == address(0);\r\n      uint _oldBalance = balanceOf[lowestBenefactor];\r\n      uint8 _indexToSwap = _lowestBenefactorEmpty\r\n        ? findEmptyBenefactorIndex()\r\n        : benefactorMap[lowestBenefactor];\r\n\r\n      // Swap out benefactors\r\n      if (!_lowestBenefactorEmpty) {\r\n        benefactorMap[lowestBenefactor] = 0;\r\n      }\r\n      benefactors[_indexToSwap] = _investor;\r\n      benefactorMap[_investor] = _indexToSwap;\r\n      lowestBenefactor = findLowestBenefactor();\r\n\r\n      // Adjust benefactors balance\r\n      benefactorsBalance += (balanceOf[_investor] - _oldBalance);\r\n\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint _amount\r\n  ) internal returns (bool success) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_amount > 0);\r\n    require(balanceOf[_from] >= _amount);\r\n    require(balanceOf[_to] + _amount > balanceOf[_to]);\r\n\r\n    balanceOf[_from] -= _amount;\r\n    balanceOf[_to] += _amount;\r\n\r\n    // reorganize for both addresses\r\n\r\n    emit Transfer(msg.sender, _to, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool success) {\r\n    return _transfer(msg.sender, _to, _amount);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) external returns (bool success) {\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n\r\n    bool _tranferSuccess = _transfer(_from, _to, _amount);\r\n    if (_tranferSuccess) {\r\n      allowed[_from][msg.sender] -= _amount;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function approve(address _spender, uint _value) external returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) external constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"benefactors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"reorganize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benefactorsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"findLowestBenefactor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"findEmptyBenefactorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"}]","ContractName":"NotASecurity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000001ac384","Library":"","SwarmSource":"bzzr://6445799a0baa0abc582469642f26e382eb2593a20d2d74e85181f96d94cdf1ea"}]}