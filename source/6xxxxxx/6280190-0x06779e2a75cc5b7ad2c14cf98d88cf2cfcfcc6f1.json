{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// --> http://lucky9.io <-- Ethereum Lottery.\r\n//\r\n// - 1 of 3 chance to win a portion of the JACKPOT! Winners are selected and payouts made every day @ 18:00 GMT.\r\n//\r\n// - The winnings are calculated on FIFO basis - first purchased winning tickets receive the biggest stake, while\r\n//   the last - smallest. Therefore, be quick to buy the tickets for the day.\r\n//\r\n// - 85% of the ticket price goes to current JACKPOT of the day.\r\n// - The house edge is 15% of the ticket price. This includes the transactions and pay-out costs.\r\n//\r\n// - Smart Contract address: 0x06779e2a75cc5b7ad2c14cf98d88cf2cfcfcc6f1\r\n// - More details at: https://etherscan.io/address/0x06779e2a75cc5b7ad2c14cf98d88cf2cfcfcc6f1\r\n//\r\n// - NOTE: Ensure sufficient gas limit for transaction to succeed. Gas limit 200,000 should be sufficient.\r\n//\r\n// --- GOOD LUCK! ---\r\n//\r\n\r\ncontract lucky9io {\r\n    // Public variables\r\n    uint public house_edge = 0;\r\n    uint public jackpot = 0;\r\n    uint public total_wins_wei = 0;\r\n    uint public total_wins_count = 0;\r\n    uint public total_tickets = 0;\r\n\r\n    // Internal variables\r\n    bool private game_alive = true;\r\n    address private owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201;\r\n    address[] private entries_addresses;\r\n    bytes32[] private entries_blockhash;\r\n    uint private entries_count = 0;\r\n\r\n    modifier onlyOwner() {\r\n     require(msg.sender == owner, \"Sender not authorized.\");\r\n     _;\r\n    }\r\n\r\n    function () public payable {\r\n        // Only accept ticket purchases if the game is ON\r\n        require(game_alive == true);\r\n\r\n        // Price of the ticket is 0.009 ETH\r\n        require(msg.value / 1000000000000000 == 9);\r\n\r\n        // House edge (15%) + Jackpot (85%)\r\n        jackpot = jackpot + (msg.value * 85 / 100);\r\n        house_edge = house_edge + (msg.value * 15 / 100);\r\n\r\n        // Owner does not participate in the play, only adds up to the JACKPOT\r\n        if(msg.sender == owner) return;\r\n\r\n        // Add the ticket entry to the daily game\r\n        if(entries_count >= entries_addresses.length) {\r\n            entries_addresses.push(msg.sender);\r\n            entries_blockhash.push(blockhash(block.number));\r\n        } else {\r\n            entries_addresses[entries_count] = msg.sender;\r\n            entries_blockhash[entries_count] = blockhash(block.number);\r\n        }\r\n        entries_count++;\r\n        total_tickets++;\r\n\r\n        return;\r\n    }\r\n\r\n    function pickWinners(uint random_seed) payable public onlyOwner {\r\n        require(entries_count > 0);\r\n\r\n        for (uint i=0; i<entries_count; i++) {\r\n            uint lucky_number = uint(keccak256(abi.encodePacked(abi.encodePacked(i+random_seed+uint(entries_addresses[i]), blockhash(block.number)), entries_blockhash[i])));\r\n\r\n            if(((lucky_number % 99) % 9) % 3 == 1) {\r\n                // We have a WINNER !!!\r\n\r\n                // Calculate the prize money\r\n                uint win_amount = jackpot * 30 / 100;\r\n                if(address(this).balance - house_edge < win_amount) {\r\n                    win_amount = (address(this).balance-house_edge) * 30 / 100;\r\n                }\r\n\r\n                jackpot = jackpot - win_amount;\r\n\r\n                // Set the statistics\r\n                total_wins_count = total_wins_count + 1;\r\n                total_wins_wei = total_wins_wei + win_amount;\r\n\r\n                // Pay the winning\r\n                entries_addresses[i].transfer(win_amount);\r\n            }\r\n        }\r\n\r\n        entries_count = 0;\r\n        return;\r\n    }\r\n\r\n    function getBalance() constant public returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Owner functions\r\n    function getEntriesCount() view public onlyOwner returns (uint) {\r\n        return entries_count;\r\n    }\r\n\r\n    function stopGame() public onlyOwner {\r\n        game_alive = false;\r\n        return;\r\n    }\r\n\r\n    function startGame() public onlyOwner {\r\n        game_alive = true;\r\n        return;\r\n    }\r\n\r\n    function transferHouseEdge(uint amount) public onlyOwner payable {\r\n        require(amount <= house_edge);\r\n        require((address(this).balance - amount) > 0);\r\n\r\n        owner.transfer(amount);\r\n        house_edge = house_edge - amount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"random_seed\",\"type\":\"uint256\"}],\"name\":\"pickWinners\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"house_edge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_wins_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_wins_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferHouseEdge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_tickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEntriesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"lucky9io","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://efc79d7b1a15da2ab4c02127ceefb310047c8d08a72e37a4f8b8b3fdf09058e4"}]}