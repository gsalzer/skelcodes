{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n    require(token.approve(spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n    require(token.approve(spender, newAllowance));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 private _rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param rate Number of token units a buyer gets per wei\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(uint256 rate, address wallet, IERC20 token) internal {\r\n    require(rate > 0);\r\n    require(wallet != address(0));\r\n    require(token != address(0));\r\n\r\n    _rate = rate;\r\n    _wallet = wallet;\r\n    _token = token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   * Note that other contracts will transfer fund with a base gas stipend\r\n   * of 2300, which is not enough to call buyTokens. Consider calling\r\n   * buyTokens directly when purchasing tokens from a contract.\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return the token being sold.\r\n   */\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the address where funds are collected.\r\n   */\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  /**\r\n   * @return the number of token units a buyer gets per wei.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  /**\r\n   * @return the amount of wei raised.\r\n   */\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * This function has a non-reentrancy guard, so it shouldn't be called by\r\n   * another `nonReentrant` function.\r\n   * @param beneficiary Recipient of the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public nonReentrant payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _openingTime;\r\n  uint256 private _closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(isOpen());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param openingTime Crowdsale opening time\r\n   * @param closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 openingTime, uint256 closingTime) internal {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(openingTime >= block.timestamp);\r\n    require(closingTime > openingTime);\r\n\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale opening time.\r\n   */\r\n  function openingTime() public view returns(uint256) {\r\n    return _openingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale closing time.\r\n   */\r\n  function closingTime() public view returns(uint256) {\r\n    return _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale is open, false otherwise.\r\n   */\r\n  function isOpen() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n    view\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  /**\r\n  * @dev Returns the largest of two numbers.\r\n  */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the smallest of two numbers.\r\n  */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculates the average of two numbers. Since these are integers,\r\n  * averages of an even and odd number cannot be represented, and will be\r\n  * rounded down.\r\n  */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow, so we distribute\r\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol\r\n\r\n/**\r\n * @title AllowanceCrowdsale\r\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\r\n */\r\ncontract AllowanceCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  address private _tokenWallet;\r\n\r\n  /**\r\n   * @dev Constructor, takes token wallet address.\r\n   * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\r\n   */\r\n  constructor(address tokenWallet) internal {\r\n    require(tokenWallet != address(0));\r\n    _tokenWallet = tokenWallet;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the wallet that will hold the tokens.\r\n   */\r\n  function tokenWallet() public view returns(address) {\r\n    return _tokenWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks the amount of tokens left in the allowance.\r\n   * @return Amount of tokens left in the allowance\r\n   */\r\n  function remainingTokens() public view returns (uint256) {\r\n    return Math.min(\r\n      token().balanceOf(_tokenWallet),\r\n      token().allowance(_tokenWallet, this)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides parent behavior by transferring tokens from wallet.\r\n   * @param beneficiary Token purchaser\r\n   * @param tokenAmount Amount of tokens purchased\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _cap;\r\n\r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 cap) internal {\r\n    require(cap > 0);\r\n    _cap = cap;\r\n  }\r\n\r\n  /**\r\n   * @return the cap of the crowdsale.\r\n   */\r\n  function cap() public view returns(uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised() >= _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n    require(weiRaised().add(weiAmount) <= _cap);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BitherCrowdsale.sol\r\n\r\n/**\r\n * @title BitherCrowdsale\r\n * @dev BitherCrowdsale contract uses multiple openzeppelin base contracts and adds some custom behaviour.\r\n *      The openzeppelin base contracts have been audited and are widely used by the community. They can\r\n *      be trusted to have almost zero security vulnerabilities and therefore do not need to be tested.\r\n *      The BitherCrowdale enables the purchasing of 2 tokens, the BitherToken (BTR) and BitherStockToken\r\n *      (BSK) at rates determined by the current block time. It specifies a cap of Ether that can be contributed\r\n *      and a length of time the crowdsale lasts. It requires the crowdsale contract address be given\r\n *      an allowance of 33000000 BTR and 21000000 BSK enabling it to distribute the purchased tokens. These\r\n *      values are determined by the cap of 300000 ETH and the phased distribution rates.\r\n */\r\ncontract BitherCrowdsale is AllowanceCrowdsale, TimedCrowdsale, CappedCrowdsale {\r\n\r\n    uint256 constant private CAP_IN_WEI = 300000 ether;\r\n\r\n    uint256 constant private BTR_PRIVATE_SALE_RATE = 110;\r\n    uint256 constant private BTR_PRESALE_RATE_DAY_1 = 110;\r\n    uint256 constant private BTR_PRESALE_RATE_DAY_2_TO_5 = 109;\r\n    uint256 constant private BTR_PRESALE_RATE_DAY_6_TO_9 = 108;\r\n    uint256 constant private BTR_PRESALE_RATE_DAY_10_TO_13 = 107;\r\n\r\n    uint256 constant private BTR_CROWDSALE_RATE_DAY_1_FIRST_2_HOURS = 110;\r\n    uint256 constant private BTR_CROWDSALE_RATE_DAY_1_TO_7 = 106;\r\n    uint256 constant private BTR_CROWDSALE_RATE_DAY_8_TO_14 = 104;\r\n    uint256 constant private BTR_CROWDSALE_RATE_DAY_15_TO_21 = 102;\r\n    uint256 constant private BTR_CROWDSALE_RATE_DAY_22_TO_28 = 100;\r\n\r\n    uint256 constant private BSK_PRIVATE_SALE_RATE = 70;\r\n    uint256 constant private BSK_PRESALE_RATE_FIRST_2_HOURS = 70;\r\n    uint256 constant private BSK_PRESALE_RATE_DAY_1 = 68;\r\n    uint256 constant private BSK_PRESALE_RATE_DAY_2_TO_5 = 66;\r\n    uint256 constant private BSK_PRESALE_RATE_DAY_6_TO_9 = 64;\r\n    uint256 constant private BSK_PRESALE_RATE_DAY_10_TO_13 = 62;\r\n\r\n    uint256 constant private BSK_CROWDSALE_RATE_DAY_1_TO_7 = 60;\r\n    uint256 constant private BSK_CROWDSALE_RATE_DAY_8_TO_14 = 57;\r\n    uint256 constant private BSK_CROWDSALE_RATE_DAY_15_TO_21 = 54;\r\n    uint256 constant private BSK_CROWDSALE_RATE_DAY_22_TO_28 = 50;\r\n\r\n    IERC20 private _bitherStockToken;\r\n    uint256 private _privateSaleClosingTime; // Thursday, 24 January 2019 14:00:00 (1548338400)\r\n    uint256 private _presaleOpeningTime; // Saturday, 26 January 2019 14:00:00 (1548511200)\r\n    uint256 private _crowdsaleOpeningTime; // Saturday, 16 February 2019 14:00:00 (1550325600)\r\n    uint256 private _crowdsaleClosingTime; // Saturday, 16 March 2019 14:00:00 (1552744800)\r\n\r\n    /**\r\n     * Event for BSK token purchase logging\r\n     * @param purchaser Who paid for the tokens\r\n     * @param beneficiary Who got the tokens\r\n     * @param value Wei paid for purchase\r\n     * @param amount Amount of tokens purchased\r\n     */\r\n    event BitherStockTokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor, calls the inherited classes constructors, stores bitherStockToken and determines crowdsale times\r\n     * @param bitherToken The BitherToken address, must be an ERC20 contract\r\n     * @param bitherStockToken The BitherStockToken, must be an ERC20 contract\r\n     * @param bitherTokensOwner Address holding the tokens, which has approved allowance to the crowdsale\r\n     * @param etherBenefactor Address that will receive the deposited Ether\r\n     * @param preSaleOpeningTime The presale opening time, in seconds, all other times are determined using this to reduce risk of error\r\n     */\r\n    constructor(IERC20 bitherToken, IERC20 bitherStockToken, address bitherTokensOwner, address etherBenefactor, uint256 preSaleOpeningTime)\r\n        Crowdsale(BTR_PRIVATE_SALE_RATE, etherBenefactor, bitherToken)\r\n        AllowanceCrowdsale(bitherTokensOwner)\r\n        TimedCrowdsale(now, preSaleOpeningTime + 7 weeks)\r\n        CappedCrowdsale(CAP_IN_WEI)\r\n        public\r\n    {\r\n        _bitherStockToken = bitherStockToken;\r\n\r\n        _privateSaleClosingTime = preSaleOpeningTime - 2 days;\r\n        _presaleOpeningTime = preSaleOpeningTime;\r\n        _crowdsaleOpeningTime = preSaleOpeningTime + 3 weeks;\r\n        _crowdsaleClosingTime = _crowdsaleOpeningTime + 4 weeks;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides function in the Crowdsale contract to revert contributions less then\r\n     *      69 Eth during the first period and less than 0.1 Eth during the rest of the crowdsale\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        if (now < _privateSaleClosingTime) {\r\n            require(weiAmount >= 69 ether, \"Not enough Eth. Contributions must be 69 Eth minimum during the private sale\");\r\n        } else {\r\n            require(weiAmount >= 100 finney, \"Not enough Eth. Contributions must be 0.1 Eth minimum during the presale and crowdsale\");\r\n        }\r\n\r\n        if (now > _privateSaleClosingTime && now < _presaleOpeningTime) {\r\n            revert(\"Private sale has ended and the presale is yet to begin\");\r\n        } else if (now > _presaleOpeningTime + 13 days && now < _crowdsaleOpeningTime) {\r\n            revert(\"Presale has ended and the crowdsale is yet to begin\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides function in the Crowdsale contract to enable a custom phased distribution\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n\r\n        if (now < _privateSaleClosingTime) {\r\n            return weiAmount.mul(BTR_PRIVATE_SALE_RATE);\r\n\r\n        } else if (now < _presaleOpeningTime + 1 days) {\r\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_1);\r\n        } else if (now < _presaleOpeningTime + 5 days) {\r\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_2_TO_5);\r\n        } else if (now < _presaleOpeningTime + 9 days) {\r\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_6_TO_9);\r\n        } else if (now < _presaleOpeningTime + 13 days) {\r\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_10_TO_13);\r\n\r\n        } else if (now < _crowdsaleOpeningTime + 2 hours) {\r\n            return weiAmount.mul(BTR_CROWDSALE_RATE_DAY_1_FIRST_2_HOURS);\r\n        } else if (now < _crowdsaleOpeningTime + 1 weeks) {\r\n            return weiAmount.mul(BTR_CROWDSALE_RATE_DAY_1_TO_7);\r\n        } else if (now < _crowdsaleOpeningTime + 2 weeks) {\r\n            return weiAmount.mul(BTR_CROWDSALE_RATE_DAY_8_TO_14);\r\n        } else if (now < _crowdsaleOpeningTime + 3 weeks) {\r\n            return weiAmount.mul(BTR_CROWDSALE_RATE_DAY_15_TO_21);\r\n        } else if (now <= closingTime()) {\r\n            return weiAmount.mul(BTR_CROWDSALE_RATE_DAY_22_TO_28);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides function in AllowanceCrowdsale contract (therefore also overrides function\r\n     *      in Crowdsale contract) to add functionality for distribution of a second token, BSK.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Amount of tokens purchased\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        super._deliverTokens(beneficiary, tokenAmount);\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 bskTokenAmount = getBskTokenAmount(weiAmount);\r\n\r\n        _bitherStockToken.safeTransferFrom(tokenWallet(), beneficiary, bskTokenAmount);\r\n\r\n        emit BitherStockTokensPurchased(msg.sender, beneficiary, weiAmount, bskTokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines distribution of BSK depending on the time of the transaction\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified weiAmount\r\n     */\r\n    function getBskTokenAmount(uint256 weiAmount) private view returns (uint256) {\r\n\r\n        if (now < _privateSaleClosingTime) {\r\n            return weiAmount.mul(BSK_PRIVATE_SALE_RATE);\r\n\r\n        } else if (now < _presaleOpeningTime + 2 hours) {\r\n            return weiAmount.mul(BSK_PRESALE_RATE_FIRST_2_HOURS);\r\n        } else if (now < _presaleOpeningTime + 1 days) {\r\n            return weiAmount.mul(BSK_PRESALE_RATE_DAY_1);\r\n        } else if (now < _presaleOpeningTime + 5 days) {\r\n            return weiAmount.mul(BSK_PRESALE_RATE_DAY_2_TO_5);\r\n        } else if (now < _presaleOpeningTime + 9 days) {\r\n            return weiAmount.mul(BSK_PRESALE_RATE_DAY_6_TO_9);\r\n        } else if (now < _presaleOpeningTime + 13 days) {\r\n            return weiAmount.mul(BSK_PRESALE_RATE_DAY_10_TO_13);\r\n\r\n        } else if (now < _crowdsaleOpeningTime + 1 weeks) {\r\n            return weiAmount.mul(BSK_CROWDSALE_RATE_DAY_1_TO_7);\r\n        } else if (now < _crowdsaleOpeningTime + 2 weeks) {\r\n            return weiAmount.mul(BSK_CROWDSALE_RATE_DAY_8_TO_14);\r\n        } else if (now < _crowdsaleOpeningTime + 3 weeks) {\r\n            return weiAmount.mul(BSK_CROWDSALE_RATE_DAY_15_TO_21);\r\n        } else if (now <= closingTime()) {\r\n            return weiAmount.mul(BSK_CROWDSALE_RATE_DAY_22_TO_28);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"bitherToken\",\"type\":\"address\"},{\"name\":\"bitherStockToken\",\"type\":\"address\"},{\"name\":\"bitherTokensOwner\",\"type\":\"address\"},{\"name\":\"etherBenefactor\",\"type\":\"address\"},{\"name\":\"preSaleOpeningTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BitherStockTokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"BitherCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009870811ef1a1c7d6b3cd78d8d8bb553e9464d454000000000000000000000000cb2d8b44446614e20f1410b88d1ba1eefef47a57000000000000000000000000b0b798db83574fda60fec1dea57f90b4f49e8df5000000000000000000000000b0b798db83574fda60fec1dea57f90b4f49e8df5000000000000000000000000000000000000000000000000000000005c4c67e0","Library":"","SwarmSource":"bzzr://d924a20aff505b01ee4278dbd1333fd5e0f43d20357960d8abc59c7641b9e328"}]}