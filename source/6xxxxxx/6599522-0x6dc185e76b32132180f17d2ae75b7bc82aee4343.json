{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * \r\nOwnable contract  comes from\r\nhttps://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\nand is Licensed under MIT license \r\n\r\nAll other contracts are Created by \r\nŁukasz Grynasz https://www.linkedin.com/in/%C5%82ukasz-grynasz-aba24b55/\r\nAdam Skrodzki https://www.linkedin.com/in/adam-skrodzki-521051b/\r\n\r\nas a part of https://pway.io project\r\n\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\PwayContract.sol\r\n\r\ncontract PwayContract is Ownable {\r\n\r\n    modifier onlyHuman(address addr){\r\n        uint size;\r\n        assembly { size := extcodesize(addr) } // solium-disable-line\r\n        if(size == 0){\r\n            _;\r\n        }else{\r\n            revert(\"Provided address is a contract\");\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts\\NameRegistry.sol\r\n\r\ncontract NameRegistry is PwayContract {\r\n\r\n    event EntrySet(string entry,address adr);\r\n\r\n    mapping(string => address) names;\r\n  \r\n    function hasAddress(string name) public view returns(bool) {\r\n        return names[name] != address(0);\r\n    }\r\n    \r\n    function getAddress(string name) public view returns(address) {\r\n        require(names[name] != address(0), \"Address could not be 0x0\");\r\n        return names[name];\r\n    }\r\n    \r\n    function setAddress(string name, address _adr) public {\r\n        require(_adr != address(0), \"Address could not be 0x0\");\r\n\r\n        bytes memory nameBytes = bytes(name);\r\n        require(nameBytes.length > 0, \"Name could not be empty\");\r\n\r\n        bool isEmpty = names[name] == address(0);\r\n\r\n        //can be initialized by everyone , but only change by itself\r\n        require(isEmpty || names[name] == msg.sender);\r\n\r\n        names[name] = _adr;\r\n        emit EntrySet(name, names[name]);\r\n    } \r\n  \r\n}\r\n\r\n// File: contracts\\rateProviders\\IProvider.sol\r\n\r\ninterface IEthRateProvider\r\n{\r\n\t\r\n\tfunction getETHUSDRate() view public returns(uint256);\r\n\tfunction changeProvider(NameRegistry _reg,address _newProvider) ;\r\n}\r\n\r\n// File: contracts\\rateProviders\\OasisDexProvider.sol\r\n\r\ninterface IDex{\r\n\tfunction getBuyAmount(address buy_gem, address pay_gem, uint256 pay_amt) returns (uint256);\r\n}\r\n\r\ncontract OasisDexProvider is PwayContract\r\n{\r\n\r\n\taddress public dex;//0x14FBCA95be7e99C15Cc2996c6C9d841e54B79425  \r\n\taddress public dai;//0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359  \r\n\taddress public weth;//0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\r\n\r\n\t\r\n\tNameRegistry reg;\r\n\r\n\tconstructor(NameRegistry _reg,address dexAddress,address daiTokenAddress,address wethAddress){\r\n\t\treg = _reg;\t\r\n\t\t_reg.setAddress(\"EthRateProvider\",address(this));\r\n\t\tdex=dexAddress;\r\n\t\tdai=daiTokenAddress;\r\n\t\tweth=wethAddress;\r\n\t}\r\n\t\r\n\tfunction getETHUSDRate() view public returns(uint256){\r\n\t\treturn IDex(dex).getBuyAmount(dai,weth,1);\r\n\t}\r\n\r\n\tfunction changeProvider(NameRegistry _reg,address _newProvider) onlyOwner{\r\n\t\trequire(IEthRateProvider(_newProvider).getETHUSDRate()!=0);\r\n\t\t_reg.setAddress(\"EthRateProvider\",_newProvider);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reg\",\"type\":\"address\"},{\"name\":\"_newProvider\",\"type\":\"address\"}],\"name\":\"changeProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHUSDRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_reg\",\"type\":\"address\"},{\"name\":\"dexAddress\",\"type\":\"address\"},{\"name\":\"daiTokenAddress\",\"type\":\"address\"},{\"name\":\"wethAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OasisDexProvider","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009fa95d7da8887aaa041a5768744358cf995cb0fc00000000000000000000000014fbca95be7e99c15cc2996c6c9d841e54b7942500000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","Library":"","SwarmSource":"bzzr://4d7c3307b433dd41dba6a77d0a989213e8709a35821e7f1126ee933cb9f28fe3"}]}