{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * title ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Token{\r\n  uint256 public totalSupply;\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * title Standard ERC20 token\r\n *\r\n * Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20Token{\r\n  string public version = \"1.0\";\r\n  string public name = \"eleven-dimensional resonnance\";\r\n  string public symbol = \"R11\";\r\n  uint8 public  decimals = 18;\r\n\r\n  bool public transfersEnabled = true;\r\n\r\n  /**\r\n   * to stop this contract\r\n   */\r\n  modifier transable(){\r\n      require(transfersEnabled);\r\n      _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) transable public returns (bool) {\r\n    require(_to != address(0)&&_value>0);\r\n    require(balanceOf[msg.sender]>_value);\r\n    balanceOf[msg.sender] -= _value;\r\n    balanceOf[_to] += _value;\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from one address to another\r\n   * param _from address The address which you want to send tokens from\r\n   * param _to address The address which you want to transfer to\r\n   * param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) transable public returns (bool) {\r\n    require(_to != address(0)&&_value>0);\r\n\r\n    uint256 _allowance = allowance[_from][msg.sender];\r\n\r\n    require (_value <= _allowance);\r\n    require(balanceOf[_from]>_value);\r\n\r\n    balanceOf[_from] -= _value;\r\n    balanceOf[_to] += _value;\r\n    allowance[_from][msg.sender] -= _value;\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * \r\n   * param _spender The address which will spend the funds.\r\n   * param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(allowance[msg.sender][_spender]==0);\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * approve should be called only first. To increment\r\n   * allowed value is better to use this function\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowance[msg.sender][_spender] += _addedValue;\r\n    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowance[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowance[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowance[msg.sender][_spender] -= _subtractedValue;\r\n    }\r\n    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n// This is just a contract of a BOP Token.\r\n// It is a ERC20 token\r\ncontract Token is StandardToken{\r\n\r\n    //解锁信息\r\n    uint  currUnlockStep; //当前解锁step\r\n    uint256 currUnlockSeq; //当前解锁step 内的游标\r\n\r\n    //Key1: step(募资阶段); Key2: user sequence(用户序列)\r\n    mapping (uint => uint256[]) public freezeOf; //所有数额，地址与数额合并为uint256，位运算拆分。\r\n    mapping (uint => bool) public stepUnlockInfo; //所有锁仓，key 使用序号向上增加，value,是否已解锁。\r\n    mapping (address => uint256) public freezeOfUser; //用户所有锁仓，方便用户查询自己锁仓余额\r\n    \r\n   \r\n    uint256 internal constant INITIAL_SUPPLY = 1 * (10**8) * (10 **18);\r\n\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Freeze(address indexed locker, uint256 value);\r\n    event Unfreeze(address indexed unlocker, uint256 value);\r\n    event TransferMulti(uint256 count, uint256 total);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        balanceOf[owner] = INITIAL_SUPPLY;\r\n        totalSupply = INITIAL_SUPPLY;\r\n    }\r\n\r\n    // transfer to and lock it\r\n    function transferAndLock(address _to, uint256 _value, uint256 _lockValue, uint _step) transable public returns (bool success) {\r\n        require(_to != 0x0);\r\n        require(_value <= balanceOf[msg.sender]);\r\n        require(_value > 0);\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        freeze(_to, _lockValue, _step);\r\n        return true;\r\n    }\r\n\r\n    // transfer to and lock it\r\n    function transferFromAndLock(address _from, address _to, uint256 _value, uint256 _lockValue, uint _step) transable public returns (bool success) {\r\n        uint256 _allowance = allowance[_from][msg.sender];\r\n\r\n        require (_value <= _allowance);\r\n        require(_to != 0x0);\r\n        require(_value <= balanceOf[_from]);\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        freeze(_to, _lockValue, _step);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferMulti(address[] _to, uint256[] _value) transable public returns (uint256 amount){\r\n        require(_to.length == _value.length && _to.length <= 1024);\r\n        uint256 balanceOfSender = balanceOf[msg.sender];\r\n        uint256 len = _to.length;\r\n        for(uint256 j; j<len; j++){\r\n            require(_value[j] <= balanceOfSender); //limit transfer value\r\n            require(amount <= balanceOfSender);\r\n            amount += _value[j];\r\n        }\r\n        require(balanceOfSender >= amount); //check enough and not overflow\r\n        balanceOf[msg.sender] -= amount;\r\n        for(uint256 i; i<len; i++){\r\n            address _toI = _to[i];\r\n            uint256 _valueI = _value[i];\r\n            balanceOf[_toI] += _valueI;\r\n            emit Transfer(msg.sender, _toI, _valueI);\r\n        }\r\n        emit TransferMulti(len, amount);\r\n    }\r\n    \r\n    //冻结账户\r\n    function freeze(address _user, uint256 _value, uint _step) internal returns (bool success) {\r\n        require(balanceOf[_user] >= _value);\r\n        balanceOf[_user] -= _value;\r\n        freezeOfUser[_user] += _value;\r\n        freezeOf[_step].push(uint256(_user)<<92|_value);\r\n        emit Freeze(_user, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    //event ShowStart(uint256 start);\r\n\r\n    //为用户解锁账户资金\r\n    function unFreeze(uint _step) onlyOwner public returns (bool unlockOver) {\r\n        require(currUnlockStep==_step || currUnlockSeq==uint256(0));\r\n        require(stepUnlockInfo[_step]==false);\r\n        uint256[] memory currArr = freezeOf[_step];\r\n        currUnlockStep = _step;\r\n        if(currUnlockSeq==uint256(0)){\r\n            currUnlockSeq = currArr.length;\r\n        }\r\n\r\n        uint256 userLockInfo;\r\n        uint256 _amount;\r\n        address userAddress;\r\n\r\n        for(uint i = 0; i<99&&currUnlockSeq>0; i++){\r\n            userLockInfo = freezeOf[_step][currUnlockSeq-1];\r\n            _amount = userLockInfo&0xFFFFFFFFFFFFFFFFFFFFFFF;\r\n            userAddress = address(userLockInfo>>92);\r\n            if(freezeOfUser[userAddress]>= _amount){\r\n              balanceOf[userAddress] += _amount;\r\n              freezeOfUser[userAddress] -= _amount;\r\n              emit Unfreeze(userAddress, _amount);\r\n            }\r\n            \r\n            currUnlockSeq--;\r\n        }\r\n        if(currUnlockSeq==0){\r\n            stepUnlockInfo[_step] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    //为用户解锁账户资金\r\n    function unFreezeUser(address _user) onlyOwner public returns (bool unlockOver) {\r\n        require(_user != address(0));\r\n        \r\n        uint256 _amount = freezeOfUser[_user];\r\n        if(_amount>0){\r\n          balanceOf[_user] += _amount;\r\n          delete freezeOfUser[_user];\r\n          emit Unfreeze(_user, _amount);\r\n        }\r\n           \r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Burns a specific amount of tokens.\r\n     * param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) transable public returns (bool success) {\r\n        require(_value > 0);\r\n        require(_value <= balanceOf[msg.sender]);\r\n   \r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * dev Function to mint tokens\r\n     * param _to The address that will receive the minted tokens.\r\n     * param _amount The amount of tokens to mint.\r\n     * return A boolean that indicates if the operation was successful.\r\n     */\r\n    function enableTransfers(bool _transfersEnabled) onlyOwner public {\r\n      transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n\r\n    address public owner;\r\n\r\n    event ChangeOwner(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * revert if called by any account except owner.\r\n     */\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Allows the current owner to transfer control of the contract to a newOwner.\r\n     * param newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n      require(newOwner != address(0));\r\n      owner = newOwner;\r\n      emit ChangeOwner(owner, newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stepUnlockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unFreezeUser\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockValue\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"transferFromAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockValue\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TransferMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://216eaeab90b94407776fb5646fb6533096732cb27e2c781904de3516f8d78ca0"}]}