{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n  public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n  public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math   with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * mul\r\n     * @dev Safe math multiply function\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n   * add\r\n   * @dev Safe math addition function\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n    /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable has an owner address to simplify \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * Ownable\r\n   * @dev Ownable constructor sets the `owner` of the contract to sender\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * ownerOnly\r\n   * @dev Throws an error if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title LavevelICO\r\n * @dev LavevelICO contract is Ownable\r\n **/\r\ncontract AFDTICO is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n  using SafeMath for uint256;\r\n \r\n  uint256 public RATE = 2188; // 以太兑换AFDT比例\r\n  uint256 public minimum = 10000000000000000;   //0.01ETH\r\n//   uint256 public constant initialTokens = 1000000 * 10**8; // Initial number of tokens available\r\n  address public constant FAVOREE = 0x57f3495D0eb2257F1B0Dbbc77a8A49E4AcAC82f5; //受益人账号\r\n  uint256 public raisedAmount = 0; //合约以太数量\r\n  \r\n  /**\r\n   * BoughtTokens\r\n   * @dev Log tokens bought onto the blockchain\r\n   */\r\n  event BoughtTokens(address indexed to, uint256 value, uint256 tokens);\r\n\r\n  constructor(ERC20Basic _token) public {\r\n      token = _token;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function if ether is sent to address insted of buyTokens function\r\n   **/\r\n  function () public payable {\r\n\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * buyTokens\r\n   * @dev function that sells available tokens\r\n   **/\r\n  function buyTokens() public payable {\r\n    require(msg.value >= minimum);\r\n    uint256 tokens = msg.value.mul(RATE).div(10**10);  //应得AFDT数量\r\n    uint256 balance = token.balanceOf(this);     //合约拥有AFDT数量\r\n    if (tokens > balance){                       //如果应得数量大于合约拥有数量返还ETH\r\n        msg.sender.transfer(msg.value);\r\n    }\r\n    \r\n    else{\r\n        token.transfer(msg.sender, tokens); // Send tokens to buyer\r\n        emit BoughtTokens(msg.sender, msg.value, tokens);\r\n        raisedAmount = raisedAmount.add(msg.value);\r\n    }\r\n }\r\n\r\n  /**\r\n   * tokensAvailable\r\n   * @dev returns the number of tokens allocated to this contract\r\n   **/\r\n  function tokensAvailable() public constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function ratio(uint256 _RATE) onlyOwner public {\r\n      RATE = _RATE;\r\n  }\r\n  \r\n  function withdrawals() onlyOwner public {\r\n      FAVOREE.transfer(raisedAmount);\r\n      raisedAmount = 0;\r\n  }\r\n  \r\n  function adjust_eth(uint256 _minimum) onlyOwner  public {\r\n      minimum = _minimum;\r\n  }\r\n  /**\r\n   * destroy\r\n   * @notice Terminate contract and refund to owner\r\n   **/\r\n  function destroy() onlyOwner public {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > 0);\r\n    token.transfer(FAVOREE, balance);\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(FAVOREE); \r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_RATE\",\"type\":\"uint256\"}],\"name\":\"ratio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAVOREE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"adjust_eth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"}]","ContractName":"AFDTICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bff63cd0fd1b6a3562667f173cc885fdd98769ad","Library":"","SwarmSource":"bzzr://2370b6d0e828b477d0fc469aeb0ae1f256dd58fae8fc4978cafb24d8ee1cab37"}]}