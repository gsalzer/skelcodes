{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title A facet of CSportsCore that holds all important constants and modifiers\r\n/// @author CryptoSports, Inc. (https://cryptosports.team))\r\n/// @dev See the CSportsCore contract documentation to understand how the various CSports contract facets are arranged.\r\ncontract CSportsConstants {\r\n\r\n    /// @dev The maximum # of marketing tokens that can ever be created\r\n    /// by the commissioner.\r\n    uint16 public MAX_MARKETING_TOKENS = 2500;\r\n\r\n    /// @dev The starting price for commissioner auctions (if the average\r\n    ///   of the last 2 is less than this, we will use this value)\r\n    ///   A finney is 1/1000 of an ether.\r\n    uint256 public COMMISSIONER_AUCTION_FLOOR_PRICE = 5 finney; // 5 finney for production, 15 for script testing and 1 finney for Rinkeby\r\n\r\n    /// @dev The duration of commissioner auctions\r\n    uint256 public COMMISSIONER_AUCTION_DURATION = 14 days; // 30 days for testing;\r\n\r\n    /// @dev Number of seconds in a week\r\n    uint32 constant WEEK_SECS = 1 weeks;\r\n\r\n}\r\n\r\n/// @title A facet of CSportsCore that manages an individual's authorized role against access privileges.\r\n/// @author CryptoSports, Inc. (https://cryptosports.team))\r\n/// @dev See the CSportsCore contract documentation to understand how the various CSports contract facets are arranged.\r\ncontract CSportsAuth is CSportsConstants {\r\n    // This facet controls access control for CryptoSports. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the CSportsCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from CSportsCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can perform administrative functions.\r\n    //\r\n    //     - The Commisioner can perform \"oracle\" functions like adding new real world players,\r\n    //       setting players active/inactive, and scoring contests.\r\n    //\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    /// The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n    address public commissionerAddress;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Flag that identifies whether or not we are in development and should allow development\r\n    /// only functions to be called.\r\n    bool public isDevelopment = true;\r\n\r\n    /// @dev Access modifier to allow access to development mode functions\r\n    modifier onlyUnderDevelopment() {\r\n      require(isDevelopment == true);\r\n      _;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for Commissioner-only functionality\r\n    modifier onlyCommissioner() {\r\n        require(msg.sender == commissionerAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Requires any one of the C level addresses\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress ||\r\n            msg.sender == commissionerAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev prevents contracts from hitting the method\r\n    modifier notContract() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev One way switch to set the contract into prodution mode. This is one\r\n    /// way in that the contract can never be set back into development mode. Calling\r\n    /// this function will block all future calls to functions that are meant for\r\n    /// access only while we are under development. It will also enable more strict\r\n    /// additional checking on various parameters and settings.\r\n    function setProduction() public onlyCEO onlyUnderDevelopment {\r\n      isDevelopment = false;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Commissioner. Only available to the current CEO.\r\n    /// @param _newCommissioner The address of the new COO\r\n    function setCommissioner(address _newCommissioner) public onlyCEO {\r\n        require(_newCommissioner != address(0));\r\n\r\n        commissionerAddress = _newCommissioner;\r\n    }\r\n\r\n    /// @dev Assigns all C-Level addresses\r\n    /// @param _ceo CEO address\r\n    /// @param _cfo CFO address\r\n    /// @param _coo COO address\r\n    /// @param _commish Commissioner address\r\n    function setCLevelAddresses(address _ceo, address _cfo, address _coo, address _commish) public onlyCEO {\r\n        require(_ceo != address(0));\r\n        require(_cfo != address(0));\r\n        require(_coo != address(0));\r\n        require(_commish != address(0));\r\n        ceoAddress = _ceo;\r\n        cfoAddress = _cfo;\r\n        cooAddress = _coo;\r\n        commissionerAddress = _commish;\r\n    }\r\n\r\n    /// @dev Transfers the balance of this contract to the CFO\r\n    function withdrawBalance() external onlyCFO {\r\n        cfoAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n/// @title CSportsContestBase base class for contests and teams contracts\r\n/// @dev This interface defines base class for contests and teams contracts\r\n/// @author CryptoSports\r\ncontract CSportsContestBase {\r\n\r\n    /// @dev Structure holding the player token IDs for a team\r\n    struct Team {\r\n      address owner;              // Address of the owner of the player tokens\r\n      int32 score;                // Score assigned to this team after a contest\r\n      uint32 place;               // Place this team finished in its contest\r\n      bool holdsEntryFee;         // TRUE if this team currently holds an entry fee\r\n      bool ownsPlayerTokens;      // True if the tokens are being escrowed by the Team contract\r\n      uint32[] playerTokenIds;    // IDs of the tokens held by this team\r\n    }\r\n\r\n}\r\n\r\n/// @title CSportsTeam Interface\r\n/// @dev This interface defines methods required by the CSportsContestCore\r\n///   in implementing a contest.\r\n/// @author CryptoSports\r\ncontract CSportsTeam {\r\n\r\n    bool public isTeamContract;\r\n\r\n    /// @dev Define team events\r\n    event TeamCreated(uint256 teamId, address owner);\r\n    event TeamUpdated(uint256 teamId);\r\n    event TeamReleased(uint256 teamId);\r\n    event TeamScored(uint256 teamId, int32 score, uint32 place);\r\n    event TeamPaid(uint256 teamId);\r\n\r\n    function setCoreContractAddress(address _address) public;\r\n    function setLeagueRosterContractAddress(address _address) public;\r\n    function setContestContractAddress(address _address) public;\r\n    function createTeam(address _owner, uint32[] _tokenIds) public returns (uint32);\r\n    function updateTeam(address _owner, uint32 _teamId, uint8[] _indices, uint32[] _tokenIds) public;\r\n    function releaseTeam(uint32 _teamId) public;\r\n    function getTeamOwner(uint32 _teamId) public view returns (address);\r\n    function scoreTeams(uint32[] _teamIds, int32[] _scores, uint32[] _places) public;\r\n    function getScore(uint32 _teamId) public view returns (int32);\r\n    function getPlace(uint32 _teamId) public view returns (uint32);\r\n    function ownsPlayerTokens(uint32 _teamId) public view returns (bool);\r\n    function refunded(uint32 _teamId) public;\r\n    function tokenIdsForTeam(uint32 _teamId) public view returns (uint32, uint32[50]);\r\n    function getTeam(uint32 _teamId) public view returns (\r\n        address _owner,\r\n        int32 _score,\r\n        uint32 _place,\r\n        bool _holdsEntryFee,\r\n        bool _ownsPlayerTokens);\r\n}\r\n\r\n/// @title CSports Contest\r\n/// @dev Implementation of a fantasy sports contest using tokens managed\r\n///   by a CSportsCore contract. This class implements functionality that\r\n///   is generic to any sport that involves teams. The specifics of how\r\n///   teams are structured, validated, and scored happen in the attached\r\n///   contract that implements the CSportsTeam interface.\r\ncontract CSportsContest is CSportsAuth, CSportsContestBase {\r\n\r\n  enum ContestStatus { Invalid, Active, Scoring, Paying, Paid, Canceled }\r\n  enum PayoutKey { Invalid, WinnerTakeAll, FiftyFifty, TopTen }\r\n\r\n  /// @dev Used as sanity check by other contracts\r\n  bool public isContestContract = true;\r\n\r\n  /// @dev Instance of the team contract connected to this contest. It is\r\n  ///   the team contract that implements most of the specific rules for\r\n  ///   this contrest.\r\n  CSportsTeam public teamContract;\r\n\r\n  /// @dev Cut owner takes of the entry fees paid into a contest as a fee for\r\n  ///   scoring the contest (measured in basis points (1/100 of a percent).\r\n  ///   Values 0-10,000 map to 0%-100%\r\n  uint256 public ownerCut;\r\n\r\n  /// @dev Structure for the definition of a single contest.\r\n  struct Contest {\r\n    address scoringOracleAddress;                 // Eth address of scoring oracle, if == 0, it's our commissioner address\r\n    address creator;                              // Address of the creator of the contest\r\n    uint32 gameSetId;                             // ID of the gameset associated with this contest\r\n    uint32 numWinners;                            // Number of winners in this contest\r\n    uint32 winnersToPay;                          // Number of winners that remain to be paid\r\n    uint64 startTime;                             // Starting time for the contest (lock time)\r\n    uint64 endTime;                               // Ending time for  the contest (can score after this time)\r\n    uint128 entryFee;                             // Fee to enter the contest\r\n    uint128 prizeAmount;                          // Fee to enter the contest\r\n    uint128 remainingPrizeAmount;                 // Remaining amount of prize money to payout\r\n    uint64 maxMinEntries;                         // Maximum and minimum number of entries allowed in the contest\r\n    ContestStatus status;                         // 1 = active, 2 = scoring, 3 = paying, 4 = paid, 5 = canceled\r\n    PayoutKey payoutKey;                          // Identifies the payout structure for the contest (see comments above)\r\n    uint32[] teamIds;                             // An array of teams entered into this contest\r\n    string name;                                  // Name of contest\r\n    mapping (uint32 => uint32) placeToWinner;     // Winners list mapping place to teamId\r\n    mapping (uint32 => uint32) teamIdToIdx;       // Maps a team ID to its index into the teamIds array\r\n  }\r\n\r\n  /// @dev Holds all of our contests (public)\r\n  Contest[] public contests;\r\n\r\n  /// @dev Maps team IDs to contest IDs\r\n  mapping (uint32 => uint32) public teamIdToContestId;\r\n\r\n  /// @dev We do not transfer funds directly to users when making any kind of payout. We\r\n  ///   require the user to pull his own funds. This is to eliminate DoS and reentrancy problems.\r\n  mapping (address => uint128) public authorizedUserPayment;\r\n\r\n  /// @dev Always has the total amount this contract is authorized to pay out to\r\n  ///   users.\r\n  uint128 public totalAuthorizedForPayment;\r\n\r\n  /// @dev Define contest events\r\n  event ContestCreated(uint256 contestId);\r\n  event ContestCanceled(uint256 contestId);\r\n  event ContestEntered(uint256 contestId, uint256 teamId);\r\n  event ContestExited(uint256 contestId, uint256 teamId);\r\n  event ContestClosed(uint32 contestId);\r\n  event ContestTeamWinningsPaid(uint32 contestId, uint32 teamId, uint128 amount);\r\n  event ContestTeamRefundPaid(uint32 contestId, uint32 teamId, uint128 amount);\r\n  event ContestCreatorEntryFeesPaid(uint32 contestId, uint128 amount);\r\n  event ContestApprovedFundsDelivered(address toAddress, uint128 amount);\r\n\r\n  /// @dev Class constructor creates the main CSportsContest smart contract instance.\r\n  constructor(uint256 _cut) public {\r\n      require(_cut <= 10000);\r\n      ownerCut = _cut;\r\n\r\n      // All C-level roles are the message sender\r\n      ceoAddress = msg.sender;\r\n      cfoAddress = msg.sender;\r\n      cooAddress = msg.sender;\r\n      commissionerAddress = msg.sender;\r\n\r\n      // Create a contest to take up the 0th slot.\r\n      // Create it in the canceled state with no teams.\r\n      // This is to deal with the fact that mappings return 0\r\n      // when queried with non-existent keys.\r\n      Contest memory _contest = Contest({\r\n          scoringOracleAddress: commissionerAddress,\r\n          gameSetId: 0,\r\n          maxMinEntries: 0,\r\n          numWinners: 0,\r\n          winnersToPay: 0,\r\n          startTime: 0,\r\n          endTime: 0,\r\n          creator: msg.sender,\r\n          entryFee: 0,\r\n          prizeAmount: 0,\r\n          remainingPrizeAmount: 0,\r\n          status: ContestStatus.Canceled,\r\n          payoutKey: PayoutKey(0),\r\n          name: \"mythical\",\r\n          teamIds: new uint32[](0)\r\n        });\r\n\r\n        contests.push(_contest);\r\n  }\r\n\r\n  /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n  ///  a bug or exploit is detected and we need to limit damage.\r\n  function pause() public onlyCLevel whenNotPaused {\r\n    paused = true;\r\n  }\r\n\r\n  /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n  ///  one reason we may pause the contract is when CFO or COO accounts are\r\n  ///  compromised.\r\n  function unpause() public onlyCEO whenPaused {\r\n    // can't unpause if contract was upgraded\r\n    paused = false;\r\n  }\r\n\r\n  /// @dev Sets the teamContract that will manage teams for this contest\r\n  /// @param _address - Address of our team contract\r\n  function setTeamContractAddress(address _address) public onlyCEO {\r\n    CSportsTeam candidateContract = CSportsTeam(_address);\r\n    require(candidateContract.isTeamContract());\r\n    teamContract = candidateContract;\r\n  }\r\n\r\n  /// @dev Allows anyone who has funds approved to receive them. We use this\r\n  ///   \"pull\" funds mechanism to eliminate problems resulting from malicious behavior.\r\n  function transferApprovedFunds() public {\r\n    uint128 amount = authorizedUserPayment[msg.sender];\r\n    if (amount > 0) {\r\n\r\n      // Shouldn't have to check this, but if for any reason things got screwed up,\r\n      // this prevents anyone from withdrawing more than has been approved in total\r\n      // on the contract.\r\n      if (totalAuthorizedForPayment >= amount) {\r\n\r\n        // Imporant to do the delete before the transfer to eliminate re-entrancy attacks\r\n        delete authorizedUserPayment[msg.sender];\r\n        totalAuthorizedForPayment -= amount;\r\n        msg.sender.transfer(amount);\r\n\r\n        // Create log entry\r\n        emit ContestApprovedFundsDelivered(msg.sender, amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns the amount of funds available for a given sender\r\n  function authorizedFundsAvailable() public view returns (uint128) {\r\n    return authorizedUserPayment[msg.sender];\r\n  }\r\n\r\n  /// @dev Returns the total amount of ether held by this contract\r\n  /// that has been approved for dispursement to contest creators\r\n  /// and participants.\r\n  function getTotalAuthorizedForPayment() public view returns (uint128) {\r\n    return totalAuthorizedForPayment;\r\n  }\r\n\r\n  /// @dev Creates a team for this contest. Called by an end-user of the CSportsCore\r\n  ///   contract. If the contract is paused, no additional contests can be created (although\r\n  ///   all other contract functionality remains valid.\r\n  /// @param _gameSetId - Identifes the games associated with contest. Used by the scoring oracle.\r\n  /// @param _startTime - Start time for the contest, used to determine locking of the teams\r\n  /// @param _endTime - End time representing the earliest this contest can be scored by the oracle\r\n  /// @param _entryFee - Entry fee paid to enter a team into this contest\r\n  /// @param _prizeAmount - Prize amount awarded to the winner\r\n  /// @param _maxEntries - Maximum number of entries in the contest\r\n  /// @param _minEntries - If false, we will return all ether and release all players\r\n  /// @param _payoutKey - Identifes the payout structure for the contest\r\n  ///   if we hit the start time with fewer than _maxEntries teams entered into the contest.\r\n  /// @param _tokenIds - Player token ids to be associated with the creator's team.\r\n  function createContest\r\n  (\r\n    string _name,\r\n    address _scoringOracleAddress,\r\n    uint32 _gameSetId,\r\n    uint64 _startTime,\r\n    uint64 _endTime,\r\n    uint128 _entryFee,\r\n    uint128 _prizeAmount,\r\n    uint32 _maxEntries,\r\n    uint32 _minEntries,\r\n    uint8 _payoutKey,\r\n    uint32[] _tokenIds\r\n  ) public payable whenNotPaused {\r\n\r\n      require (msg.sender != address(0));\r\n      require (_endTime > _startTime);\r\n      require (_maxEntries != 1);\r\n      require (_minEntries <= _maxEntries);\r\n      require(_startTime > uint64(now));\r\n\r\n      // The commissioner is allowed to create contests with no initial entry\r\n      require((msg.sender == commissionerAddress) || (_tokenIds.length > 0));\r\n\r\n      // Make sure we don't overflow\r\n      require(((_prizeAmount + _entryFee) >= _prizeAmount) && ((_prizeAmount + _entryFee) >= _entryFee));\r\n\r\n      // Creator must put up the correct amount of ether to cover the prize as well\r\n      // as his own entry fee if a team has been entered.\r\n      if (_tokenIds.length > 0) {\r\n        require(msg.value == (_prizeAmount + _entryFee));\r\n      } else {\r\n        require(msg.value == _prizeAmount);\r\n      }\r\n\r\n      // The default scoring oracle address will be set to the commissionerAddress\r\n      if (_scoringOracleAddress == address(0)) {\r\n        _scoringOracleAddress = commissionerAddress;\r\n      }\r\n\r\n      // Pack our maxMinEntries (due to stack limitations on struct sizes)\r\n      // uint64 maxMinEntries = (uint64(_maxEntries) << 32) | uint64(_minEntries);\r\n\r\n      // Create the contest object in memory\r\n      Contest memory _contest = Contest({\r\n          scoringOracleAddress: _scoringOracleAddress,\r\n          gameSetId: _gameSetId,\r\n          maxMinEntries: (uint64(_maxEntries) << 32) | uint64(_minEntries),\r\n          numWinners: 0,\r\n          winnersToPay: 0,\r\n          startTime: _startTime,\r\n          endTime: _endTime,\r\n          creator: msg.sender,\r\n          entryFee: _entryFee,\r\n          prizeAmount: _prizeAmount,\r\n          remainingPrizeAmount: _prizeAmount,\r\n          status: ContestStatus.Active,\r\n          payoutKey: PayoutKey(_payoutKey),\r\n          name: _name,\r\n          teamIds: new uint32[](0)\r\n        });\r\n\r\n      // We only create a team if we have tokens\r\n      uint32 uniqueTeamId = 0;\r\n      if (_tokenIds.length > 0) {\r\n        // Create the team for the creator of this contest. This\r\n        // will throw if msg.sender does not own all _tokenIds. The result\r\n        // of this call is that the team contract will now own the tokens.\r\n        //\r\n        // Note that the _tokenIds MUST BE OWNED by the msg.sender, and\r\n        // there may be other conditions enforced by the CSportsTeam contract's\r\n        // createTeam(...) method.\r\n        uniqueTeamId = teamContract.createTeam(msg.sender, _tokenIds);\r\n\r\n        // Again, we make sure our unique teamId stays within bounds\r\n        require(uniqueTeamId < 4294967295);\r\n        _contest.teamIds = new uint32[](1);\r\n        _contest.teamIds[0] = uniqueTeamId;\r\n\r\n        // We do not have to do this mapping here because 0 is returned from accessing\r\n        // a non existent member of a mapping (we deal with this when we use this\r\n        // structure in removing a team from the teamIds array). Can't do it anyway because\r\n        // mappings can't be accessed outside of storage.\r\n        //\r\n        // _contest.teamIdToIdx[uniqueTeamId] = 0;\r\n      }\r\n\r\n      // Save our contest\r\n      //\r\n      // It's probably never going to happen, 4 billion contests and teams is A LOT, but\r\n      // let's just be 100% sure we never let this happen because teamIds are\r\n      // often cast as uint32.\r\n      uint256 _contestId = contests.push(_contest) - 1;\r\n      require(_contestId < 4294967295);\r\n\r\n      // Map our entered teamId if we in fact entered a team\r\n      if (_tokenIds.length > 0) {\r\n        teamIdToContestId[uniqueTeamId] = uint32(_contestId);\r\n      }\r\n\r\n      // Fire events\r\n      emit ContestCreated(_contestId);\r\n      if (_tokenIds.length > 0) {\r\n        emit ContestEntered(_contestId, uniqueTeamId);\r\n      }\r\n  }\r\n\r\n  /// @dev Method to enter an existing contest. The msg.sender must own\r\n  ///   all of the player tokens on the team.\r\n  /// @param _contestId - ID of contest being entered\r\n  /// @param _tokenIds - IDs of player tokens on the team being entered\r\n  function enterContest(uint32 _contestId, uint32[] _tokenIds) public  payable whenNotPaused {\r\n\r\n    require (msg.sender != address(0));\r\n    require ((_contestId > 0) && (_contestId < contests.length));\r\n\r\n    // Grab the contest and make sure it is available to enter\r\n    Contest storage _contestToEnter = contests[_contestId];\r\n    require (_contestToEnter.status == ContestStatus.Active);\r\n    require(_contestToEnter.startTime > uint64(now));\r\n\r\n    // Participant must put up the entry fee.\r\n    require(msg.value >= _contestToEnter.entryFee);\r\n\r\n    // Cannot exceed the contest's max entry requirement\r\n    uint32 maxEntries = uint32(_contestToEnter.maxMinEntries >> 32);\r\n    if (maxEntries > 0) {\r\n      require(_contestToEnter.teamIds.length < maxEntries);\r\n    }\r\n\r\n    // Note that the _tokenIds MUST BE OWNED by the msg.sender, and\r\n    // there may be other conditions enforced by the CSportsTeam contract's\r\n    // createTeam(...) method.\r\n    uint32 _newTeamId = teamContract.createTeam(msg.sender, _tokenIds);\r\n\r\n    // Add the new team to our contest\r\n    uint256 _teamIndex = _contestToEnter.teamIds.push(_newTeamId) - 1;\r\n    require(_teamIndex < 4294967295);\r\n\r\n    // Map the team's ID to its index in the teamIds array\r\n    _contestToEnter.teamIdToIdx[_newTeamId] = uint32(_teamIndex);\r\n\r\n    // Map the team to the contest\r\n    teamIdToContestId[_newTeamId] = uint32(_contestId);\r\n\r\n    // Fire event\r\n    emit ContestEntered(_contestId, _newTeamId);\r\n\r\n  }\r\n\r\n  /// @dev Removes a team from a contest. The msg.sender must be the owner\r\n  ///   of the team being removed.\r\n  function exitContest(uint32 _teamId) public {\r\n\r\n    // Get the team from the team contract\r\n    address owner;\r\n    int32 score;\r\n    uint32 place;\r\n    bool holdsEntryFee;\r\n    bool ownsPlayerTokens;\r\n    (owner, score, place, holdsEntryFee, ownsPlayerTokens) = teamContract.getTeam(_teamId);\r\n\r\n    // Caller must own the team\r\n    require (owner == msg.sender);\r\n\r\n    uint32 _contestId = teamIdToContestId[_teamId];\r\n    require(_contestId > 0);\r\n    Contest storage _contestToExitFrom = contests[_contestId];\r\n\r\n    // Cannot exit a contest that has already begun\r\n    require(_contestToExitFrom.startTime > uint64(now));\r\n\r\n    // Return the entry fee to the owner and release the team\r\n    if (holdsEntryFee) {\r\n      teamContract.refunded(_teamId);\r\n      if (_contestToExitFrom.entryFee > 0) {\r\n        _authorizePayment(owner, _contestToExitFrom.entryFee);\r\n        emit ContestTeamRefundPaid(_contestId, _teamId, _contestToExitFrom.entryFee);\r\n      }\r\n    }\r\n    teamContract.releaseTeam(_teamId);  // Will throw if _teamId does not exist\r\n\r\n    // Remove the team from our list of teams participating in the contest\r\n    //\r\n    // Note that this mechanism works even if the teamId to be removed is the last\r\n    // entry in the teamIds array. In this case, the lastTeamIdx == toRemoveIdx so\r\n    // we would overwrite the last entry with itself. This last entry is subsequently\r\n    // removed from the teamIds array.\r\n    //\r\n    // Note that because of this method of removing a team from the teamIds array,\r\n    // the teamIds array is not guaranteed to be in an order that maps to the order of\r\n    // teams entering the contest (the order is now arbitrary).\r\n    uint32 lastTeamIdx = uint32(_contestToExitFrom.teamIds.length) - 1;\r\n    uint32 lastTeamId = _contestToExitFrom.teamIds[lastTeamIdx];\r\n    uint32 toRemoveIdx = _contestToExitFrom.teamIdToIdx[_teamId];\r\n\r\n    require(_contestToExitFrom.teamIds[toRemoveIdx] == _teamId);      // Sanity check (handle's Solidity's mapping of non-existing entries to 0)\r\n\r\n    _contestToExitFrom.teamIds[toRemoveIdx] = lastTeamId;             // Overwriting the teamIds array entry for the team\r\n                                                                      // being removed with the last entry's teamId\r\n    _contestToExitFrom.teamIdToIdx[lastTeamId] = toRemoveIdx;         // Re-map the lastTeamId to the removed teamId's index\r\n\r\n    delete _contestToExitFrom.teamIds[lastTeamIdx];                   // Remove the last entry that is now repositioned\r\n    _contestToExitFrom.teamIds.length--;                              // Shorten the array\r\n    delete _contestToExitFrom.teamIdToIdx[_teamId];                   // Remove the index mapping for the removed team\r\n\r\n    // Remove the team from our list of teams participating in the contest\r\n    // (OLD way that would limit the # of teams in a contest due to gas consumption)\r\n//    for (uint i = 0; i < _contestToExitFrom.teamIds.length; i++) {\r\n//      if (_contestToExitFrom.teamIds[i] == _teamId) {\r\n//        uint32 stopAt = uint32(_contestToExitFrom.teamIds.length - 1);\r\n//        for (uint  j = i; j < stopAt; j++) {\r\n//          _contestToExitFrom.teamIds[j] = _contestToExitFrom.teamIds[j+1];\r\n//        }\r\n//        delete _contestToExitFrom.teamIds[_contestToExitFrom.teamIds.length-1];\r\n//        _contestToExitFrom.teamIds.length--;\r\n//        break;\r\n//      }\r\n//    }\r\n\r\n    // This _teamId will no longer map to any contest\r\n    delete teamIdToContestId[_teamId];\r\n\r\n    // Fire event\r\n    emit ContestExited(_contestId, _teamId);\r\n  }\r\n\r\n  /// @dev Method that allows a contest creator to cancel his/her contest.\r\n  ///   Throws if we try to cancel a contest not owned by the msg.sender\r\n  ///   or by contract's scoring oracle. Also throws if we try to cancel a contest that\r\n  ///   is not int the ContestStatus.Active state.\r\n  function cancelContest(uint32 _contestId) public {\r\n\r\n    require(_contestId > 0);\r\n    Contest storage _toCancel = contests[_contestId];\r\n\r\n    // The a contest can only be canceled if it is in the active state.\r\n    require (_toCancel.status == ContestStatus.Active);\r\n\r\n    // Now make sure the calling entity is authorized to cancel the contest\r\n    // based on the state of the contest.\r\n    if (_toCancel.startTime > uint64(now)) {\r\n      // This is a contest that starts in the future. The creator of\r\n      // the contest or the scoringOracle can cancel it.\r\n      require((msg.sender == _toCancel.creator) || (msg.sender == _toCancel.scoringOracleAddress));\r\n    } else {\r\n      // This is a contest that has passed its lock time (i.e. started).\r\n      if (_toCancel.teamIds.length >= uint32(_toCancel.maxMinEntries & 0x00000000FFFFFFFF)) {\r\n\r\n        // A contest that has met its minimum entry count can only be canceled\r\n        // by the scoringOracle.\r\n        require(msg.sender == _toCancel.scoringOracleAddress);\r\n      }\r\n    }\r\n\r\n    // Note: Contests that have not met their minimum entry requirement\r\n    // can be canceled by anyone since they cannot be scored or paid out. Once canceled,\r\n    // anyone can release the teams back to their owners and refund any entry\r\n    // fees. Otherwise, it would require the contests' ending time to pass\r\n    // before anyone could release and refund as implemented in the\r\n    // releaseTeams(...) method.\r\n\r\n    // Return the creator's prizeAmount\r\n    if (_toCancel.prizeAmount > 0) {\r\n      _authorizePayment(_toCancel.creator, _toCancel.prizeAmount);\r\n      _toCancel.remainingPrizeAmount = 0;\r\n    }\r\n\r\n    // Mark the contest as canceled, which then will allow anyone to\r\n    // release the teams (and refund the entryFees if any) for this contest.\r\n    // Generally, this is automatically done by the scoring oracle.\r\n    _toCancel.status = ContestStatus.Canceled;\r\n\r\n    // Fire event\r\n    emit ContestCanceled(_contestId);\r\n  }\r\n\r\n  /// @dev - Releases a set of teams if the contest has passed its ending\r\n  //    time (or has been canceled). This method can be called by the general\r\n  ///   public, but should called by our scoring oracle automatically.\r\n  /// @param _contestId - The ID of the contest the teams belong to\r\n  /// @param _teamIds - TeamIds of the teams we want to release. Array should\r\n  ///   be short enough in length so as not to run out of gas\r\n  function releaseTeams(uint32 _contestId, uint32[] _teamIds) public {\r\n    require((_contestId < contests.length) && (_contestId > 0));\r\n    Contest storage c = contests[_contestId];\r\n\r\n    // Teams can only be released for canceled contests or contests that have\r\n    // passed their end times.\r\n    require ((c.status == ContestStatus.Canceled) || (c.endTime <= uint64(now)));\r\n\r\n    for (uint32 i = 0; i < _teamIds.length; i++) {\r\n      uint32 teamId = _teamIds[i];\r\n      uint32 teamContestId = teamIdToContestId[teamId];\r\n      if (teamContestId == _contestId) {\r\n        address owner;\r\n        int32 score;\r\n        uint32 place;\r\n        bool holdsEntryFee;\r\n        bool ownsPlayerTokens;\r\n        (owner, score, place, holdsEntryFee, ownsPlayerTokens) = teamContract.getTeam(teamId);\r\n        if ((c.status == ContestStatus.Canceled) && holdsEntryFee) {\r\n          teamContract.refunded(teamId);\r\n          if (c.entryFee > 0) {\r\n            emit ContestTeamRefundPaid(_contestId, teamId, c.entryFee);\r\n            _authorizePayment(owner, c.entryFee);\r\n          }\r\n        }\r\n        if (ownsPlayerTokens) {\r\n          teamContract.releaseTeam(teamId);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev - Updates a team with new player tokens, releasing ones that are replaced back\r\n  ///   to the owner. New player tokens must be approved for transfer to the team contract.\r\n  /// @param _contestId - ID of the contest we are working on\r\n  /// @param _teamId - Team ID of the team being updated\r\n  /// @param _indices - Indices of playerTokens to be replaced\r\n  /// @param _tokenIds - Array of player token IDs that will replace those\r\n  ///   currently held at the indices specified.\r\n  function updateContestTeam(uint32 _contestId, uint32 _teamId, uint8[] _indices, uint32[] _tokenIds) public whenNotPaused {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require (c.status == ContestStatus.Active);\r\n\r\n    // To prevent a form of sniping, we do not allow you to update your\r\n    // team within 1 hour of the starting time of the contest.\r\n    require(c.startTime > uint64(now + 1 hours));\r\n\r\n    teamContract.updateTeam(msg.sender, _teamId, _indices, _tokenIds);\r\n  }\r\n\r\n  /// @dev Returns the contest data for a specific contest\r\n  ///@param _contestId - contest ID we are seeking the full info for\r\n  function getContest(uint32 _contestId) public view returns (\r\n    string name,                    // Name of this contest\r\n    address scoringOracleAddress,   // Address of the scoring oracle for this contest\r\n    uint32 gameSetId,               // ID of the gameset associated with this contest\r\n    uint32 maxEntries,              // Maximum number of entries allowed in the contest\r\n    uint64 startTime,               // Starting time for the contest (lock time)\r\n    uint64 endTime,                 // Ending time for the contest (lock time)\r\n    address creator,                // Address of the creator of the contest\r\n    uint128 entryFee,               // Fee to enter the contest\r\n    uint128 prizeAmount,            // Fee to enter the contest\r\n    uint32 minEntries,              // Wide receivers\r\n    uint8 status,                   // 1 = active, 2 = scored, 3-paying, 4 = paid, 5 = canceled\r\n    uint8 payoutKey,                // Identifies the payout structure for the contest (see comments above)\r\n    uint32 entryCount               // Current number of entries in the contest\r\n  )\r\n  {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n\r\n    // Unpack max & min entries (packed in struct due to stack limitations)\r\n    // Couldn't create these local vars due to stack limitation too.\r\n    /* uint32 _maxEntries = uint32(c.maxMinEntries >> 32);\r\n    uint32 _minEntries = uint32(c.maxMinEntries & 0x00000000FFFFFFFF); */\r\n\r\n    Contest storage c = contests[_contestId];\r\n    scoringOracleAddress = c.scoringOracleAddress;\r\n    gameSetId = c.gameSetId;\r\n    maxEntries = uint32(c.maxMinEntries >> 32);\r\n    startTime = c.startTime;\r\n    endTime = c.endTime;\r\n    creator = c.creator;\r\n    entryFee = c.entryFee;\r\n    prizeAmount = c.prizeAmount;\r\n    minEntries = uint32(c.maxMinEntries & 0x00000000FFFFFFFF);\r\n    status = uint8(c.status);\r\n    payoutKey = uint8(c.payoutKey);\r\n    name = c.name;\r\n    entryCount = uint32(c.teamIds.length);\r\n  }\r\n\r\n  /// @dev Returns the number of teams in a particular contest\r\n  /// @param _contestId ID of contest we are inquiring about\r\n  function getContestTeamCount(uint32 _contestId) public view returns (uint32 count) {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    count = uint32(c.teamIds.length);\r\n  }\r\n\r\n  /// @dev Returns the index into the teamIds array of a contest a particular teamId sits at\r\n  /// @param _contestId ID of contest we are inquiring about\r\n  /// @param _teamId The team ID within the contest that we are interested in learning its teamIds index\r\n  function getIndexForTeamId(uint32 _contestId, uint32 _teamId) public view returns (uint32 idx) {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    idx = c.teamIdToIdx[_teamId];\r\n\r\n    require (idx < c.teamIds.length);  // Handles the Solidity returning 0 from mapping for non-existent entries\r\n    require(c.teamIds[idx] == _teamId);\r\n  }\r\n\r\n  /// @dev Returns the team data for a particular team entered into the contest\r\n  /// @param _contestId - ID of contest we are getting a team from\r\n  /// @param _teamIndex - Index of team we are getting from the contest\r\n  function getContestTeam(uint32 _contestId, uint32 _teamIndex) public view returns (\r\n    uint32 teamId,\r\n    address owner,\r\n    int score,\r\n    uint place,\r\n    bool holdsEntryFee,\r\n    bool ownsPlayerTokens,\r\n    uint32 count,\r\n    uint32[50] playerTokenIds\r\n  )\r\n  {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require(_teamIndex < c.teamIds.length);\r\n\r\n    uint32 _teamId = c.teamIds[_teamIndex];\r\n    (teamId) = _teamId;\r\n    (owner, score, place, holdsEntryFee, ownsPlayerTokens) = teamContract.getTeam(_teamId);\r\n    (count, playerTokenIds) = teamContract.tokenIdsForTeam(_teamId);\r\n  }\r\n\r\n  /// @dev - Puts the contest into a state where the scoring oracle can\r\n  ///   now score the contest. CAN ONLY BE CALLED BY THE SCORING ORACLE\r\n  ///   for the given contest.\r\n  function prepareToScore(uint32 _contestId) public {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require ((c.scoringOracleAddress == msg.sender) && (c.status == ContestStatus.Active) && (c.endTime <= uint64(now)));\r\n\r\n    // Cannot score a contest that has not met its minimum entry count\r\n    require (uint32(c.teamIds.length) >= uint32(c.maxMinEntries & 0x00000000FFFFFFFF));\r\n\r\n    c.status = ContestStatus.Scoring;\r\n\r\n    // Calculate the # of winners to payout\r\n    uint32 numWinners = 1;\r\n    if (c.payoutKey == PayoutKey.TopTen) {\r\n        numWinners = 10;\r\n    } else if (c.payoutKey == PayoutKey.FiftyFifty) {\r\n        numWinners = uint32(c.teamIds.length) / 2;\r\n    }\r\n    c.winnersToPay = numWinners;\r\n    c.numWinners = numWinners;\r\n\r\n    // We must have at least as many entries into the contest as there are\r\n    // number of winners. i.e. must have 10 or more entries in a top ten\r\n    // payout contest.\r\n    require(c.numWinners <= c.teamIds.length);\r\n  }\r\n\r\n  /// @dev Assigns a score and place for an array of teams. The indexes into the\r\n  ///   arrays are what tie a particular teamId to score and place. The contest being\r\n  ///   scored must (a) be in the ContestStatus.Scoring state, and (b) have its\r\n  ///   scoringOracleAddress == the msg.sender.\r\n  /// @param _contestId - ID of contest the teams being scored belong to\r\n  /// @param _teamIds - IDs of the teams we are scoring\r\n  /// @param _scores - Scores to assign\r\n  /// @param _places - Places to assign\r\n  /// @param _startingPlaceOffset - Offset the _places[0] is from first place\r\n  /// @param _totalWinners - Total number of winners including ties\r\n  function scoreTeams(uint32 _contestId, uint32[] _teamIds, int32[] _scores, uint32[] _places, uint32 _startingPlaceOffset, uint32 _totalWinners) public {\r\n    require ((_teamIds.length == _scores.length) && (_teamIds.length == _places.length));\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require ((c.scoringOracleAddress == msg.sender) && (c.status == ContestStatus.Scoring));\r\n\r\n    // Deal with validating the teams all belong to the contest,\r\n    // and assign to winners list if we have a prizeAmount.\r\n    for (uint32 i = 0; i < _places.length; i++) {\r\n      uint32 teamId = _teamIds[i];\r\n\r\n      // Make sure ALL TEAMS PASED IN BELONG TO THE CONTEST BEING SCORED\r\n      uint32 contestIdForTeamBeingScored = teamIdToContestId[teamId];\r\n      require(contestIdForTeamBeingScored == _contestId);\r\n\r\n      // Add the team to the winners list if we have a prize\r\n      if (c.prizeAmount > 0) {\r\n        if ((_places[i] <= _totalWinners - _startingPlaceOffset) && (_places[i] > 0)) {\r\n          c.placeToWinner[_places[i] + _startingPlaceOffset] = teamId;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Relay request over to the team contract\r\n    teamContract.scoreTeams(_teamIds, _scores, _places);\r\n  }\r\n\r\n  /// @dev Returns the place a particular team finished in (or is currently\r\n  ///   recorded as being in). Mostly used just to verify things during dev.\r\n  /// @param _teamId - Team ID of the team we are inquiring about\r\n  function getWinningPosition(uint32 _teamId) public view returns (uint32) {\r\n    uint32 _contestId = teamIdToContestId[_teamId];\r\n    require(_contestId > 0);\r\n    Contest storage c = contests[_contestId];\r\n    for (uint32 i = 1; i <= c.teamIds.length; i++) {\r\n      if (c.placeToWinner[i] == _teamId) {\r\n        return i;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /// @dev - Puts the contest into a state where the scoring oracle can\r\n  ///   pay the winners of a contest. CAN ONLY BE CALLED BY THE SCORING ORACLE\r\n  ///   for the given contest. Contest must be in the ContestStatus.Scoring state.\r\n  /// @param _contestId - ID of contest being prepared to payout.\r\n  function prepareToPayWinners(uint32 _contestId) public {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require ((c.scoringOracleAddress == msg.sender) && (c.status == ContestStatus.Scoring) && (c.endTime < uint64(now)));\r\n    c.status = ContestStatus.Paying;\r\n  }\r\n\r\n  /// @dev Returns the # of winners to pay if we are in the paying state.\r\n  /// @param _contestId - ID of contestId we are inquiring about\r\n  function numWinnersToPay(uint32 _contestId) public view returns (uint32) {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest memory c = contests[_contestId];\r\n    if (c.status == ContestStatus.Paying) {\r\n      return c.winnersToPay;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /// @dev Pays the next batch of winners (authorizes payment) and return TRUE if there\r\n  ///   more to pay, otherwise FALSE. Contest must be in the ContestStatus.Paying state\r\n  ///   and CAN ONLY BE CALLED BY THE SCORING ORACLE. The scoring oracle is intended to\r\n  ///   loop on this until it returns FALSE.\r\n  /// @param _contestId - ID of contest being paid out.\r\n  /// @param _payingStartingIndex - Starting index of winner being paid. Equal to the number\r\n  /// of winners paid in previous calls to this method. Starts at 0 and goes up by numToPay\r\n  /// each time the method is called.\r\n  /// @param _numToPay - The number of winners to pay this time, can exceed the number\r\n  ///   left to pay.\r\n  /// @param _isFirstPlace - True if the first entry at the place being scored is a first\r\n  ///   place winner\r\n  /// @param _prevTies - # of places prior to the first place being paid in this call that\r\n  ///   had a tied value to the first place being paid in this call\r\n  /// @param _nextTies - # of places after to the last place being scored in this call that\r\n  ///   had a tied value to the last place paid in this call\r\n  function payWinners(uint32 _contestId, uint32 _payingStartingIndex, uint _numToPay, bool _isFirstPlace, uint32 _prevTies, uint32 _nextTies) public {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require ((c.scoringOracleAddress == msg.sender) && (c.status == ContestStatus.Paying));\r\n\r\n    // Due to EVM stack restrictings, certain local variables are packed into\r\n    // an array that is stored in memory as opposed to the stack.\r\n    //\r\n    // localVars index 0 = placeBeingPaid (\r\n    // localVars index 1 = nextBeingPaid\r\n    uint32[] memory localVars = new uint32[](2);\r\n    localVars[0] = _payingStartingIndex + 1;\r\n\r\n    // We have to add _prevTies here to handle the case where a batch holding the final\r\n    // winner to pay position (1, 10, or 50%) finishes processing its batch size, but\r\n    // the final position is a tie and the next batch is a tie of the final position.\r\n    // When the next batch is called, the c.winnersToPay would be 0 but there are still\r\n    // positions to be paid as ties to last place. This is where _prevTies comes in\r\n    // and keeps us going. However, a rogue scoring oracle could keep calling this\r\n    // payWinners method with a positive _prevTies value, which could cause us to\r\n    // pay out too much. This is why we have the c.remainingPrizeAmount check when\r\n    // we loop and actually payout the winners.\r\n    if (c.winnersToPay + _prevTies > 0) {\r\n      // Calculation of place amount:\r\n      //\r\n      // let n = c.numWinners\r\n      //\r\n      // s = sum of numbers 1 through c.numWinners\r\n      // m = (2*prizeAmount) / c.numWinners * (c.numWinners + 1);\r\n      // payout = placeBeingPaid*m\r\n      //\r\n      uint32 s = (c.numWinners * (c.numWinners + 1)) / 2;\r\n      uint128 m = c.prizeAmount / uint128(s);\r\n      while ((c.winnersToPay + _prevTies > 0) && (_numToPay > 0)) {\r\n\r\n        uint128 totalPayout = 0;\r\n        uint32 totalNumWinnersWithTies = _prevTies;\r\n        if (_prevTies > 0) {\r\n          // Adding the prize money associated with the _prevTies number of\r\n          // places that are getting aggregated into this tied position.\r\n          totalPayout = m*(_prevTies * c.winnersToPay + (_prevTies * (_prevTies + 1)) / 2);\r\n        }\r\n\r\n        // nextBeingPaid = placeBeingPaid;\r\n        localVars[1] = localVars[0];\r\n\r\n        // This loop accumulates the payouts associated with a string of tied scores.\r\n        // It always executes at least once.\r\n        uint32 numProcessedThisTime = 0;\r\n        while (teamContract.getScore(c.placeToWinner[localVars[1]]) == teamContract.getScore(c.placeToWinner[localVars[0]])) {\r\n\r\n          // Accumulate the prize money for each place in a string of tied scores\r\n          // (but only if there are winners left to pay)\r\n          if (c.winnersToPay > 0) {\r\n            totalPayout += m*c.winnersToPay;\r\n          }\r\n\r\n          // This value represents the number of ties at a particular score\r\n          totalNumWinnersWithTies++;\r\n\r\n          // Incerement the number processed in this call\r\n          numProcessedThisTime++;\r\n\r\n          // We decrement our winnersToPay value for each team at the same\r\n          // score, but we don't let it go negative.\r\n          if (c.winnersToPay > 0) {\r\n            c.winnersToPay--;\r\n          }\r\n\r\n          localVars[1]++;\r\n          _numToPay -= 1;\r\n          if ((_numToPay == 0) || (c.placeToWinner[localVars[1]] == 0)) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Deal with first place getting the distributed rounding error\r\n        if (_isFirstPlace) {\r\n          totalPayout += c.prizeAmount - m * s;\r\n        }\r\n        _isFirstPlace = false;\r\n\r\n        // If we are on the last loop of this call, we need to deal\r\n        // with the _nextTies situation\r\n        if ((_numToPay == 0) && (_nextTies > 0)) {\r\n          totalNumWinnersWithTies += _nextTies;\r\n          if (_nextTies < c.winnersToPay) {\r\n            totalPayout += m*(_nextTies * (c.winnersToPay + 1) - (_nextTies * (_nextTies + 1)) / 2);\r\n          } else {\r\n            totalPayout += m*(c.winnersToPay * (c.winnersToPay + 1) - (c.winnersToPay * (c.winnersToPay + 1)) / 2);\r\n          }\r\n        }\r\n\r\n        // Payout is evenly distributed to all players with the same score\r\n        uint128 payout = totalPayout / totalNumWinnersWithTies;\r\n\r\n        // If this is the last place being paid, we are going to evenly distribute\r\n        // the remaining amount this contest holds in prize money evenly over other\r\n        // the number of folks remaining to be paid.\r\n        if (c.winnersToPay == 0) {\r\n          payout = c.remainingPrizeAmount / (numProcessedThisTime + _nextTies);\r\n        }\r\n\r\n        for (uint32 i = _prevTies; (i < (numProcessedThisTime + _prevTies)) && (c.remainingPrizeAmount > 0); i++) {\r\n\r\n          // Deals with rounding error in the last payout in a group of ties since the totalPayout\r\n          // was divided among tied players.\r\n          if (i == (totalNumWinnersWithTies - 1)) {\r\n            if ((c.winnersToPay == 0) && (_nextTies == 0)) {\r\n              payout = c.remainingPrizeAmount;\r\n            } else {\r\n              payout = totalPayout - (totalNumWinnersWithTies - 1)*payout;\r\n            }\r\n          }\r\n\r\n          // This is a safety check. Shouldn't be needed but this prevents a rogue scoringOracle\r\n          // from draining anything more than the prize amount for the contest they are oracle of.\r\n          if (payout > c.remainingPrizeAmount) {\r\n            payout = c.remainingPrizeAmount;\r\n          }\r\n          c.remainingPrizeAmount -= payout;\r\n\r\n          _authorizePayment(teamContract.getTeamOwner(c.placeToWinner[localVars[0]]), payout);\r\n\r\n          // Fire the event\r\n          emit ContestTeamWinningsPaid(_contestId, c.placeToWinner[localVars[0]], payout);\r\n\r\n          // Increment our placeBeingPaid value\r\n          localVars[0]++;\r\n        }\r\n\r\n        // We only initialize with _prevTies the first time through the loop\r\n        _prevTies = 0;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Closes out a contest that is currently in the ContestStatus.Paying state.\r\n  ///   The contest being closed must (a) be in the ContestStatus.Paying state, and (b) have its\r\n  ///   scoringOracleAddress == the msg.sender, and (c) have no more winners to payout.\r\n  ///   Will then allow for the player tokens associated with any team in this contest to be released.\r\n  ///   Also authorizes the payment of all entry fees to the contest creator (less ownerCut if\r\n  ///   cryptosports was the scoring oracle)\r\n  /// @param _contestId - ID of the contest to close\r\n  function closeContest(uint32 _contestId) public {\r\n    require((_contestId > 0) && (_contestId < contests.length));\r\n    Contest storage c = contests[_contestId];\r\n    require ((c.scoringOracleAddress == msg.sender) && (c.status == ContestStatus.Paying) && (c.winnersToPay == 0));\r\n\r\n    // Move to the Paid state so we can only close the contest once\r\n    c.status = ContestStatus.Paid;\r\n\r\n    uint128 totalEntryFees = c.entryFee * uint128(c.teamIds.length);\r\n\r\n    // Transfer owner cut to the CFO address if the contest was scored by the commissioner\r\n    if (c.scoringOracleAddress == commissionerAddress) {\r\n      uint128 cut = _computeCut(totalEntryFees);\r\n      totalEntryFees -= cut;\r\n      cfoAddress.transfer(cut);\r\n    }\r\n\r\n    // Payout the contest creator\r\n    if (totalEntryFees > 0) {\r\n      _authorizePayment(c.creator, totalEntryFees);\r\n      emit ContestCreatorEntryFeesPaid(_contestId, totalEntryFees);\r\n    }\r\n\r\n    emit ContestClosed(_contestId);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // PRIVATE METHODS -----------------------------------------------------------\r\n  // ---------------------------------------------------------------------------\r\n\r\n  /// @dev Authorizes a user to receive payment from this contract.\r\n  /// @param _to - Address authorized to withdraw funds\r\n  /// @param _amount - Amount to authorize\r\n  function _authorizePayment(address _to, uint128 _amount) private {\r\n    totalAuthorizedForPayment += _amount;\r\n    uint128 _currentlyAuthorized = authorizedUserPayment[_to];\r\n    authorizedUserPayment[_to] = _currentlyAuthorized + _amount;\r\n  }\r\n\r\n  /// @dev Computes owner's cut of a contest's entry fees.\r\n  /// @param _amount - Amount owner is getting cut of\r\n  function _computeCut(uint128 _amount) internal view returns (uint128) {\r\n      // NOTE: We don't use SafeMath (or similar) in this function because\r\n      //  all of our entry functions carefully cap the maximum values for\r\n      //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n      //  statement in the CSportsContest constructor). The result of this\r\n      //  function is always guaranteed to be <= _amount.\r\n      return uint128(_amount * ownerCut / 10000);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_teamIds\",\"type\":\"uint32[]\"},{\"name\":\"_scores\",\"type\":\"int32[]\"},{\"name\":\"_places\",\"type\":\"uint32[]\"},{\"name\":\"_startingPlaceOffset\",\"type\":\"uint32\"},{\"name\":\"_totalWinners\",\"type\":\"uint32\"}],\"name\":\"scoreTeams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_teamId\",\"type\":\"uint32\"}],\"name\":\"getWinningPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDevelopment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"prepareToScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"cancelContest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContestContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedFundsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_payingStartingIndex\",\"type\":\"uint32\"},{\"name\":\"_numToPay\",\"type\":\"uint256\"},{\"name\":\"_isFirstPlace\",\"type\":\"bool\"},{\"name\":\"_prevTies\",\"type\":\"uint32\"},{\"name\":\"_nextTies\",\"type\":\"uint32\"}],\"name\":\"payWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_tokenIds\",\"type\":\"uint32[]\"}],\"name\":\"enterContest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedUserPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"closeContest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSIONER_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"},{\"name\":\"_cfo\",\"type\":\"address\"},{\"name\":\"_coo\",\"type\":\"address\"},{\"name\":\"_commish\",\"type\":\"address\"}],\"name\":\"setCLevelAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"numWinnersToPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"teamIdToContestId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAuthorizedForPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommissioner\",\"type\":\"address\"}],\"name\":\"setCommissioner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"getContestTeamCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_scoringOracleAddress\",\"type\":\"address\"},{\"name\":\"_gameSetId\",\"type\":\"uint32\"},{\"name\":\"_startTime\",\"type\":\"uint64\"},{\"name\":\"_endTime\",\"type\":\"uint64\"},{\"name\":\"_entryFee\",\"type\":\"uint128\"},{\"name\":\"_prizeAmount\",\"type\":\"uint128\"},{\"name\":\"_maxEntries\",\"type\":\"uint32\"},{\"name\":\"_minEntries\",\"type\":\"uint32\"},{\"name\":\"_payoutKey\",\"type\":\"uint8\"},{\"name\":\"_tokenIds\",\"type\":\"uint32[]\"}],\"name\":\"createContest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MARKETING_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_teamIds\",\"type\":\"uint32[]\"}],\"name\":\"releaseTeams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"prepareToPayWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contests\",\"outputs\":[{\"name\":\"scoringOracleAddress\",\"type\":\"address\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"gameSetId\",\"type\":\"uint32\"},{\"name\":\"numWinners\",\"type\":\"uint32\"},{\"name\":\"winnersToPay\",\"type\":\"uint32\"},{\"name\":\"startTime\",\"type\":\"uint64\"},{\"name\":\"endTime\",\"type\":\"uint64\"},{\"name\":\"entryFee\",\"type\":\"uint128\"},{\"name\":\"prizeAmount\",\"type\":\"uint128\"},{\"name\":\"remainingPrizeAmount\",\"type\":\"uint128\"},{\"name\":\"maxMinEntries\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"payoutKey\",\"type\":\"uint8\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSIONER_AUCTION_FLOOR_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_teamIndex\",\"type\":\"uint32\"}],\"name\":\"getContestTeam\",\"outputs\":[{\"name\":\"teamId\",\"type\":\"uint32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"score\",\"type\":\"int256\"},{\"name\":\"place\",\"type\":\"uint256\"},{\"name\":\"holdsEntryFee\",\"type\":\"bool\"},{\"name\":\"ownsPlayerTokens\",\"type\":\"bool\"},{\"name\":\"count\",\"type\":\"uint32\"},{\"name\":\"playerTokenIds\",\"type\":\"uint32[50]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferApprovedFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeamContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAuthorizedForPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"}],\"name\":\"getContest\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"scoringOracleAddress\",\"type\":\"address\"},{\"name\":\"gameSetId\",\"type\":\"uint32\"},{\"name\":\"maxEntries\",\"type\":\"uint32\"},{\"name\":\"startTime\",\"type\":\"uint64\"},{\"name\":\"endTime\",\"type\":\"uint64\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"entryFee\",\"type\":\"uint128\"},{\"name\":\"prizeAmount\",\"type\":\"uint128\"},{\"name\":\"minEntries\",\"type\":\"uint32\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"payoutKey\",\"type\":\"uint8\"},{\"name\":\"entryCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamId\",\"type\":\"uint32\"}],\"name\":\"exitContest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_teamId\",\"type\":\"uint32\"},{\"name\":\"_indices\",\"type\":\"uint8[]\"},{\"name\":\"_tokenIds\",\"type\":\"uint32[]\"}],\"name\":\"updateContestTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contestId\",\"type\":\"uint32\"},{\"name\":\"_teamId\",\"type\":\"uint32\"}],\"name\":\"getIndexForTeamId\",\"outputs\":[{\"name\":\"idx\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint256\"}],\"name\":\"ContestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint256\"}],\"name\":\"ContestCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"ContestEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"ContestExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint32\"}],\"name\":\"ContestClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ContestTeamWinningsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"teamId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ContestTeamRefundPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contestId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ContestCreatorEntryFeesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ContestApprovedFundsDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"CSportsContest","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://c3e866273823bfef96959a578b37bf8fddb3ca39bb059bff8f53b917c313ef4b"}]}