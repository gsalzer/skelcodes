{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract DigitalPrintImage {\r\n\tstruct ImageMetadata {\r\n        uint finalSeed;\r\n        bytes32[] potentialAssets;\r\n        uint timestamp;\r\n        address creator;\r\n        string ipfsHash;\r\n        string extraData;\r\n    }\r\n\r\n    mapping(uint => ImageMetadata) public imageMetadata;\r\n\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction getImageMetadata(uint _imageId) public view\r\n    \treturns(address, string, uint, string, uint, bytes32[]);\r\n}\r\n\r\ncontract AssetManager {\r\n\tstruct AssetPack {\r\n        bytes32 packCover;\r\n        uint[] assetIds;\r\n        address creator;\r\n        uint price;\r\n        string ipfsHash;\r\n    }\r\n\r\n    uint public numberOfAssetPacks;\r\n    AssetPack[] public assetPacks;\r\n\r\n\tfunction pickUniquePacks(uint [] assetIds) public view returns (uint[]);\r\n}\r\n\r\ncontract Functions {\r\n\tfunction pickRandomAssets(uint _finalSeed, bytes32[] _potentialAssets) public pure returns(uint[] finalPicked);\r\n}\r\n\r\ncontract CryptographicsGetter {\r\n\tAssetManager public manager;\r\n\tDigitalPrintImage public dpm;\r\n\tFunctions public functions;\r\n\r\n\tconstructor (address _manager, address _dpm, address _functions) public {\r\n\r\n\t\tmanager = AssetManager(_manager);\r\n\t\tdpm = DigitalPrintImage(_dpm);\r\n\t\tfunctions = Functions(_functions);\r\n\t}\r\n\r\n\tfunction getImagesUsingAssetPack(uint _assetPackId) public view returns(uint[] ids) {\r\n\t\tuint count = 0;\r\n\t\tuint totalSupply = dpm.totalSupply();\r\n\t\tuint finalSeed;\r\n\t\tbytes32[] memory potentialAssets;\r\n\t\tuint[] memory assetIds;\r\n\t\tuint[] memory assetPackIds;\r\n\r\n\t\tfor (uint i=0; i<totalSupply; i++) {\r\n\t\t\t(,,finalSeed,,,potentialAssets) = dpm.getImageMetadata(i);\r\n\t\t\tassetIds = functions.pickRandomAssets(finalSeed, potentialAssets);\r\n\t\t\tassetPackIds = manager.pickUniquePacks(assetIds);\r\n\t\t\t\r\n\t\t\tfor (uint j=0; j<assetPackIds.length; j++) {\r\n\t\t\t\tif (assetPackIds[j] == _assetPackId) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tids = new uint[](count);\r\n\t\r\n\t\tcount = 0;\r\n\t\tfor (i=0; i<totalSupply; i++) {\r\n\t\t\t(,,finalSeed,,,potentialAssets) = dpm.getImageMetadata(i);\r\n\t\t\tassetIds = functions.pickRandomAssets(finalSeed, potentialAssets);\r\n\t\t\tassetPackIds = manager.pickUniquePacks(assetIds);\r\n\r\n\t\t\tfor (j=0; j<assetPackIds.length; j++) {\r\n\t\t\t\tif (assetPackIds[j] == _assetPackId) {\r\n\t\t\t\t\tids[count] = i;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getImagesCreatedByAddress(address _creator) public view returns(uint[] ids) {\r\n\t\tuint count = 0;\r\n\t\tuint totalSupply = dpm.totalSupply();\r\n\t\taddress creator;\r\n\r\n\t\tfor (uint i=0; i<totalSupply; i++) {\r\n\t\t\t(,,creator,,) = dpm.imageMetadata(i);\r\n\t\t\t\r\n\t\t\tif (creator == _creator){\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tids = new uint[](count);\r\n\r\n\t\tcount = 0;\r\n\t\tfor (i=0; i<totalSupply; i++) {\r\n\t\t\t(,,creator,,) = dpm.imageMetadata(i);\r\n\t\t\t\r\n\t\t\tif (creator == _creator){\r\n\t\t\t\tids[count] = i;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getAllCreators() public view returns(address[] creators) {\r\n\t\tuint totalSupply = dpm.totalSupply();\r\n\t\tuint totalAssetPacks = manager.numberOfAssetPacks();\r\n\t\tuint count = 0;\r\n\t\tbool exists = false;\r\n\t\taddress creator;\r\n\r\n\t\taddress[] memory allCreators = new address[](totalSupply+totalAssetPacks);\r\n\r\n\t\tfor (uint i=0; i<totalSupply; i++) {\r\n\t\t\t(,,creator,,) = dpm.imageMetadata(i);\r\n\t\t\texists = false;\r\n\r\n\t\t\tfor (uint j=0; j<count; j++) {\r\n\t\t\t\tif (allCreators[j] == creator) {\r\n\t\t\t\t\texists = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!exists) {\r\n\t\t\t\tallCreators[count] = creator;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i=0; i<totalAssetPacks; i++) {\r\n\t\t\t(,creator,,) = manager.assetPacks(i);\r\n\t\t\texists = false;\r\n\r\n\t\t\tfor (j=0; j<count; j++) {\r\n\t\t\t\tif (allCreators[j] == creator) {\r\n\t\t\t\t\texists = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!exists) {\r\n\t\t\t\tallCreators[count] = creator;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcreators = new address[](count);\r\n\r\n\t\tfor (i=0; i<count; i++) {\r\n\t\t\tcreators[i] = allCreators[i];\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dpm\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"functions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetPackId\",\"type\":\"uint256\"}],\"name\":\"getImagesUsingAssetPack\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getImagesCreatedByAddress\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCreators\",\"outputs\":[{\"name\":\"creators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_dpm\",\"type\":\"address\"},{\"name\":\"_functions\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptographicsGetter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000080d774ffd99ad3321497064a2713bf2f89eeb5d6000000000000000000000000b80776700778e7415da08ef65fa389f75737fb95000000000000000000000000858e56589a5f49c6020ee86a14b3f84e26e0356c","Library":"","SwarmSource":"bzzr://73b48e0861363da94fb3f0cdbe1f5453dbc780147ecdde307751511e2f1d2933"}]}