{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n//**********************************************************************************\r\n//\tKITTYPILLAR CONTRACT\r\n//**********************************************************************************\r\n\r\ncontract KittyPillar {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\taddress public owner;\t\t\t\t\t\t\t\t//owner of this contract\r\n\taddress public kittyCoreAddress;\t\t\t\t\t//address of kittyCore\r\n\tKittyCoreInterface private kittyCore;\t\t\t\t//kittycore reference\r\n\t\r\n\t\r\n//**********************************************************************************\r\n//\tEvents\r\n//**********************************************************************************\r\n\tevent PlayerJoined\r\n    (\r\n        address playerAddr,\r\n        uint256 pId,\r\n        uint256 timeStamp\r\n    );\r\n\t\r\n\tevent KittyJoined\r\n    (\r\n        address ownerAddr,\r\n        uint256 kittyId,\r\n\t\tuint8 pillarIdx,\r\n        uint256 contribution,\r\n\t\tuint256 currentRound,\r\n        uint256 timeStamp\r\n    );\r\n\r\n\tevent RoundEnded\r\n\t(\t\t\r\n\t\tuint256 currentRId,\r\n\t\tuint256 pillarWon,\r\n\t\tuint256 timeStamp\r\n\t);\r\n\t\r\n\tevent Withdrawal\r\n\t(\r\n\t\taddress playerAddr,\r\n        uint256 pId,\r\n\t\tuint256 amount,\r\n        uint256 timeStamp\r\n\t);\r\n\t\r\n//**********************************************************************************\r\n//\tModifiers\r\n//**********************************************************************************\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\t\r\n//**********************************************************************************\r\n//\tConfigs\r\n//**********************************************************************************\r\n\t\r\n\tuint256 public contributionTarget_ = 100; //round target contributions\r\n\tbool public paused_ = false;\r\n\tuint256 public joinFee_ = 10000000000000000; //0.01 ether\r\n\tuint256 public totalDeveloperCut_ = 0;\r\n\tuint256 public minPower_ = 3; //minimum power of kitty\r\n\tuint256 public maxPower_ = 20; //maximum power of kitty\r\n\t\r\n//**********************************************************************************\r\n//\tData\r\n//**********************************************************************************\r\n\t//***************************\r\n\t// Round\r\n\t//***************************\r\n\tuint256 public currentRId_;\r\n\tmapping (uint256 => KittyPillarDataSets.Round) public round_;\t\t// (rId => data) round data\r\n\t\r\n\t//***************************\r\n\t// Player \r\n\t//***************************\r\n\tuint256 private currentPId_;\r\n\tmapping (address => uint256) public pIdByAddress_;          \t\t\t\t\t\t\t\t\t\t// (address => pId) returns player id by address\r\n\tmapping (uint8 => mapping (uint256 => KittyPillarDataSets.Pillar)) public pillarRounds_;\t\t\t// (pillarIdx => roundId -> Pillar) returns pillar's round information\r\n\tmapping (uint256 => KittyPillarDataSets.Player) public players_;\t\t\t\t\t\t\t\t\t\t// (pId => player) returns player information\t\r\n\tmapping (uint256 => mapping (uint256 => uint256[])) public playerRounds_;\t\t// (pId => roundId => uint256[]) returns player's round information\r\n\tmapping (uint256 => mapping (uint256 => KittyPillarDataSets.KittyRound)) public kittyRounds_;\t\t// (kittyId => roundId => KittyRound) returns kitty's round information\r\n\t\r\n\t\r\n//**********************************************************************************\r\n//\tFunctions\r\n//**********************************************************************************\t\r\n\tconstructor(address _kittyCoreAddress) public {\r\n\t\towner = msg.sender; //init owner\r\n\t\tkittyCoreAddress = _kittyCoreAddress;\r\n        kittyCore = KittyCoreInterface(kittyCoreAddress);\r\n\t\t\r\n\t\t//start round\r\n\t\tcurrentRId_ = 1;\r\n\t\tround_[currentRId_].pot = 0;\r\n\t\tround_[currentRId_].targetContributions = contributionTarget_;\r\n\t\tround_[currentRId_].timeStarted = now;\r\n\t\tround_[currentRId_].ended = false;\r\n\t}\r\n\t\r\n\tfunction getPillarRoundsKitties(uint8 _pillarIdx, uint256 _rId) external view returns (uint256[]) {\r\n\t\treturn pillarRounds_[_pillarIdx][_rId].kittyIds;\r\n\t}\r\n\t\r\n\tfunction getPlayerRoundsKitties(uint256 _pId, uint256 _rId) external view returns (uint256[]) {\r\n\t\treturn playerRounds_[_pId][_rId];\r\n\t}\r\n\t\r\n\tfunction joinPillarWithEarnings(uint256 _kittyId, uint8 _pillarIdx, uint256 _rId) external {\r\n\t\trequire(!paused_, \"game is paused\");\r\n\t\t\r\n\t\trequire((_pillarIdx>=0)&&(_pillarIdx<=2), \"there is no such pillar here\");\r\n\r\n        require(msg.sender == kittyCore.ownerOf(_kittyId), \"sender not owner of kitty\");\r\n\t\t\t\t\r\n\t\tuint256 _pId = pIdByAddress_[msg.sender];\r\n\t\trequire(_pId!=0, \"not an existing player\"); //needs to be an existing player\r\n\t\t\r\n\t\trequire(players_[_pId].totalEth >= joinFee_, \"insufficient tokens in pouch for join fee\");\r\n\t\t\r\n\t\trequire(kittyRounds_[_kittyId][currentRId_].contribution==0, \"kitty has already joined a pillar this round\");\r\n\t\t\r\n\t\trequire(_rId == currentRId_, \"round has ended, wait for next round\");\r\n\t\t\r\n\t\tplayers_[_pId].totalEth = players_[_pId].totalEth.sub(joinFee_); //deduct joinFee from winnings\r\n\t\t\r\n\t\tjoinPillarCore(_pId, _kittyId, _pillarIdx);\t\r\n\t}\r\n\t\r\n\t\r\n\tfunction joinPillar(uint256 _kittyId, uint8 _pillarIdx, uint256 _rId) external payable {\r\n\t\trequire(!paused_, \"game is paused\");\r\n\r\n        require(msg.value == joinFee_, \"incorrect join fee\");\r\n\t\t\r\n\t\trequire((_pillarIdx>=0)&&(_pillarIdx<=2), \"there is no such pillar here\");\r\n\t\t\r\n        require(msg.sender == kittyCore.ownerOf(_kittyId), \"sender not owner of kitty\");\r\n\t\t\r\n\t\trequire(kittyRounds_[_kittyId][currentRId_].contribution==0, \"kitty has already joined a pillar this round\");\r\n\t\t\r\n\t\trequire(_rId == currentRId_, \"round has ended, wait for next round\");\r\n\t\t\r\n\t\tuint256 _pId = pIdByAddress_[msg.sender];\r\n\t\t//add player if he/she doesn't exists in game\r\n        if (_pId == 0) {\r\n\t\t\tcurrentPId_ = currentPId_.add(1);\r\n\t\t\tpIdByAddress_[msg.sender] = currentPId_;\r\n\t\t\tplayers_[currentPId_].ownerAddr = msg.sender;\r\n\t\t\t_pId = currentPId_;\r\n\t\t\t\r\n\t\t\temit PlayerJoined\r\n\t\t\t(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_pId,\r\n\t\t\t\tnow\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tjoinPillarCore(_pId, _kittyId, _pillarIdx);\t\r\n\t}\r\n\t\r\n\tfunction joinPillarCore(uint256 _pId, uint256 _kittyId, uint8 _pillarIdx) private {\r\n\t\t//record kitty under player for this round\r\n\t\tplayerRounds_[_pId][currentRId_].push(_kittyId);\r\n\t\t\t\t\t\t\r\n\t\t//calculate kitty's power\r\n\t\tuint256 minPower = minPower_;\r\n\t\tif (pillarRounds_[_pillarIdx][currentRId_].totalContributions<(round_[currentRId_].targetContributions/2)) { //pillar under half, check other pillars\r\n\t\t\tuint8 i;\r\n\t\t\tfor (i=0; i<3; i++) {\r\n\t\t\t\tif (i!=_pillarIdx) {\r\n\t\t\t\t\tif (pillarRounds_[i][currentRId_].totalContributions >= (round_[currentRId_].targetContributions/2)) {\r\n\t\t\t\t\t\tminPower = maxPower_/2; //minimum power increases, so to help the low pillar grow faster\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\t\r\n\t\tuint256 genes;\r\n        ( , , , , , , , , , genes) = kittyCore.getKitty(_kittyId);\t\t\r\n\t\tuint256 _contribution = ((getKittyPower(genes) % maxPower_) + minPower); //from min to max power\r\n\t\t\r\n\t\t// add to kitty round\r\n\t\tuint256 joinedTime = now;\r\n\t\tkittyRounds_[_kittyId][currentRId_].pillar = _pillarIdx;\r\n\t\tkittyRounds_[_kittyId][currentRId_].contribution = _contribution;\r\n\t\tkittyRounds_[_kittyId][currentRId_].kittyOwnerPId = _pId;\r\n\t\tkittyRounds_[_kittyId][currentRId_].timeStamp = joinedTime;\r\n\t\t\r\n\t\t// update current round's info\r\n\t\tpillarRounds_[_pillarIdx][currentRId_].totalContributions = pillarRounds_[_pillarIdx][currentRId_].totalContributions.add(_contribution);\r\n\t\tpillarRounds_[_pillarIdx][currentRId_].kittyIds.push(_kittyId);\r\n\t\t\t\t\r\n\t\t//update current round pot\r\n\t\ttotalDeveloperCut_ = totalDeveloperCut_.add((msg.value/100).mul(4)); //4% developer fee\r\n\t\tround_[currentRId_].pot = round_[currentRId_].pot.add((msg.value/100).mul(96)); //update pot minus fee\r\n\t\t\r\n\t\temit KittyJoined\r\n\t\t(\r\n\t\t\tmsg.sender,\r\n\t\t\t_kittyId,\r\n\t\t\t_pillarIdx,\r\n\t\t\t_contribution,\r\n\t\t\tcurrentRId_,\r\n\t\t\tjoinedTime\r\n\t\t);\r\n\t\t\r\n\t\t//if meet target contribution, end round\r\n\t\tif (pillarRounds_[_pillarIdx][currentRId_].totalContributions >= round_[currentRId_].targetContributions) {\t\t\t\r\n\t\t\tendRound(_pillarIdx);\r\n\t\t}\t\r\n\t}\r\n\t\r\n\t\r\n\tfunction getKittyPower(uint256 kittyGene) private view returns(uint256) {\r\n\t\treturn (uint(keccak256(abi.encodePacked(kittyGene,\r\n\t\t\tblockhash(block.number - 1),\r\n\t\t\tblockhash(block.number - 2),\r\n\t\t\tblockhash(block.number - 4),\r\n\t\t\tblockhash(block.number - 7))\r\n\t\t)));\r\n\t}\r\n\t\r\n\t\r\n\tfunction endRound(uint8 _wonPillarIdx) private {\r\n\t\t\t\t\r\n\t\t//distribute pot\r\n\t\tuint256 numWinners = pillarRounds_[_wonPillarIdx][currentRId_].kittyIds.length;\r\n\t\t\t\t\t\t\r\n\t\t\r\n\t\tuint256 numFirstMovers = numWinners / 2; //half but rounded floor\r\n\t\t\r\n\t\t//perform round up if required\r\n\t\tif ((numFirstMovers * 2) < numWinners) {\r\n\t\t\tnumFirstMovers = numFirstMovers.add(1);\r\n\t\t}\r\n\t\t\r\n\t\tuint256 avgTokensPerWinner = round_[currentRId_].pot/numWinners;\r\n\t\t\r\n\t\t//first half (round up) of the pillar kitties get 20% extra off the pot to reward the precision, strength and valor!\r\n\t\tuint256 tokensPerFirstMovers = avgTokensPerWinner.add(avgTokensPerWinner.mul(2) / 10);\r\n\t\t\r\n\t\t//the rest of the pot is divided by the rest of the followers\r\n\t\tuint256 tokensPerFollowers = (round_[currentRId_].pot - (numFirstMovers.mul(tokensPerFirstMovers))) / (numWinners-numFirstMovers);\r\n\t\t\r\n\t\tuint256 totalEthCount = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\tfor(uint256 i = 0; i < numWinners; i++) {\r\n\t\t\tuint256 kittyId = pillarRounds_[_wonPillarIdx][currentRId_].kittyIds[i];\r\n\t\t\tif (i < numFirstMovers) {\r\n\t\t\t\tplayers_[kittyRounds_[kittyId][currentRId_].kittyOwnerPId].totalEth = players_[kittyRounds_[kittyId][currentRId_].kittyOwnerPId].totalEth.add(tokensPerFirstMovers);\r\n\t\t\t\ttotalEthCount = totalEthCount.add(tokensPerFirstMovers);\r\n\t\t\t} else {\r\n\t\t\t\tplayers_[kittyRounds_[kittyId][currentRId_].kittyOwnerPId].totalEth = players_[kittyRounds_[kittyId][currentRId_].kittyOwnerPId].totalEth.add(tokensPerFollowers);\r\n\t\t\t\ttotalEthCount = totalEthCount.add(tokensPerFollowers);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\t\t\r\n\t\t//set round param to end\r\n\t\tround_[currentRId_].pillarWon = _wonPillarIdx;\r\n\t\tround_[currentRId_].timeEnded = now;\r\n\t\tround_[currentRId_].ended = true;\r\n\r\n\t\temit RoundEnded(\r\n\t\t\tcurrentRId_,\r\n\t\t\t_wonPillarIdx,\r\n\t\t\tround_[currentRId_].timeEnded\r\n\t\t);\t\t\r\n\t\t\r\n\t\t//start next round\r\n\t\tcurrentRId_ = currentRId_.add(1);\r\n\t\tround_[currentRId_].pot = 0;\r\n\t\tround_[currentRId_].targetContributions = contributionTarget_;\r\n\t\tround_[currentRId_].timeStarted = now;\r\n\t\tround_[currentRId_].ended = false;\t\t\r\n\t}\r\n\t\r\n\tfunction withdrawWinnings() external {\r\n\t\tuint256 _pId = pIdByAddress_[msg.sender];\r\n\t\t//player doesn't exists in game\r\n\t\trequire(_pId != 0, \"player doesn't exist in game, don't disturb\");\r\n\t\trequire(players_[_pId].totalEth > 0, \"there is nothing to withdraw\");\r\n\t\t\r\n\t\tuint256 withdrawalSum = players_[_pId].totalEth;\r\n\t\tplayers_[_pId].totalEth = 0; //all is gone from contract to user wallet\r\n\t\t\r\n\t\tmsg.sender.transfer(withdrawalSum); //byebye ether\r\n\t\t\r\n\t\temit Withdrawal\r\n\t\t(\r\n\t\t\tmsg.sender,\r\n\t\t\t_pId,\r\n\t\t\twithdrawalSum,\r\n\t\t\tnow\r\n\t\t);\r\n\t}\r\n\r\n\r\n//**********************************************************************************\r\n//\tAdmin Functions\r\n//**********************************************************************************\t\r\n\r\n\r\n\tfunction setJoinFee(uint256 _joinFee) external onlyOwner {\r\n\t\tjoinFee_ = _joinFee;\r\n\t}\r\n\t\r\n\tfunction setPlayConfigs(uint256 _contributionTarget, uint256 _maxPower, uint256 _minPower) external onlyOwner {\r\n\t\trequire(_minPower.mul(2) <= _maxPower, \"min power cannot be more than half of max power\");\r\n\t\tcontributionTarget_ = _contributionTarget;\r\n\t\tmaxPower_ = _maxPower;\r\n\t\tminPower_ = _minPower;\r\n\t}\r\n\t\t\r\n\tfunction setKittyCoreAddress(address _kittyCoreAddress) external onlyOwner {\r\n\t\tkittyCoreAddress = _kittyCoreAddress;\r\n        kittyCore = KittyCoreInterface(kittyCoreAddress);\r\n\t}\r\n\t\r\n\t/**\r\n\t* @dev Current owner can transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) external onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\towner = newOwner;\r\n\t}\r\n\t\r\n\tfunction setPaused(bool _paused) external onlyOwner {\r\n\t\tpaused_ = _paused;\r\n\t}\r\n\t\r\n\tfunction withdrawDeveloperCut() external onlyOwner {\r\n\t\taddress thisAddress = this;\r\n\t\tuint256 balance = thisAddress.balance;\r\n\t\tuint256 withdrawalSum = totalDeveloperCut_;\r\n\r\n\t\tif (balance >= withdrawalSum) {\r\n\t\t\ttotalDeveloperCut_ = 0;\r\n\t\t\towner.transfer(withdrawalSum);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\n//**********************************************************************************\r\n//\tSTRUCTS\r\n//**********************************************************************************\r\nlibrary KittyPillarDataSets {\t\r\n\tstruct Round {\r\n\t\tuint256 pot;\t\t\t\t\t\t// total Eth in pot\r\n\t\tuint256 targetContributions;\t\t// target contribution to end game\r\n\t\tuint8 pillarWon;\t\t\t\t\t// idx of pillar which won this round\r\n\t\tuint256 timeStarted;\t\t\t\t\t// time round started\r\n\t\tuint256 timeEnded;\t\t\t\t\t// time round ended\r\n\t\tbool ended;\t\t\t\t\t\t\t// has round ended\r\n\t}\r\n\t\r\n\tstruct Pillar {\r\n\t\tuint256 totalContributions;\r\n\t\tuint256[] kittyIds;\r\n\t}\r\n\t\r\n\tstruct Player {\r\n        address ownerAddr; \t// player address\r\n\t\tuint256 totalEth;\t// total Eth won and not yet claimed\r\n    }\r\n\t\r\n\tstruct KittyRound {\r\n\t\tuint8 pillar;\r\n\t\tuint256 contribution;\r\n\t\tuint256 kittyOwnerPId;\r\n\t\tuint256 timeStamp;\r\n\t}\t\r\n}\r\n\t\r\n\r\n\r\n//**********************************************************************************\r\n//\tINTERFACES\r\n//**********************************************************************************\r\n\r\n//Cryptokitties interface\r\ninterface KittyCoreInterface {\r\n    function getKitty(uint _id) external returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    );\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n}\r\n\r\n\r\n\r\n\r\n//**********************************************************************************\r\n//\tLIBRARIES\r\n//**********************************************************************************\r\n\r\n/**\r\n * @title SafeMath from OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n * Changes:\r\n * - changed asserts to require with error log\r\n * - removed div\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n\trequire(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDeveloperCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"targetContributions\",\"type\":\"uint256\"},{\"name\":\"pillarWon\",\"type\":\"uint8\"},{\"name\":\"timeStarted\",\"type\":\"uint256\"},{\"name\":\"timeEnded\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players_\",\"outputs\":[{\"name\":\"ownerAddr\",\"type\":\"address\"},{\"name\":\"totalEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIdByAddress_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRId_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPower_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyRounds_\",\"outputs\":[{\"name\":\"pillar\",\"type\":\"uint8\"},{\"name\":\"contribution\",\"type\":\"uint256\"},{\"name\":\"kittyOwnerPId\",\"type\":\"uint256\"},{\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"name\":\"setKittyCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pillarRounds_\",\"outputs\":[{\"name\":\"totalContributions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeveloperCut_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPower_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pillarIdx\",\"type\":\"uint8\"},{\"name\":\"_rId\",\"type\":\"uint256\"}],\"name\":\"getPillarRoundsKitties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerRounds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pId\",\"type\":\"uint256\"},{\"name\":\"_rId\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundsKitties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_pillarIdx\",\"type\":\"uint8\"},{\"name\":\"_rId\",\"type\":\"uint256\"}],\"name\":\"joinPillar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_joinFee\",\"type\":\"uint256\"}],\"name\":\"setJoinFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributionTarget\",\"type\":\"uint256\"},{\"name\":\"_maxPower\",\"type\":\"uint256\"},{\"name\":\"_minPower\",\"type\":\"uint256\"}],\"name\":\"setPlayConfigs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionTarget_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_pillarIdx\",\"type\":\"uint8\"},{\"name\":\"_rId\",\"type\":\"uint256\"}],\"name\":\"joinPillarWithEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pillarIdx\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"KittyJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentRId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pillarWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"KittyPillar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d","Library":"","SwarmSource":"bzzr://232e5a88c583b84750d69597b72de470b7acc8cd5ab5a0fa682f4a21de795749"}]}