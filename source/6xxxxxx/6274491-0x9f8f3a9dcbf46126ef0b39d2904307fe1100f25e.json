{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = add(x, 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = add((x / z), z) / 2;\r\n        }\r\n    }\r\n\r\n    function sq(uint256 x) internal pure returns (uint256) {\r\n        return mul(x, x);\r\n    }\r\n\r\n    function pwr(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        if (y == 0) {\r\n            return 1;\r\n        }\r\n        uint256 z = x;\r\n        for (uint256 i=1; i < y; i++) {\r\n            z = mul(z,x);\r\n        }\r\n        return (z);\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n    function nameFilter(string _input) internal pure returns(bytes32) {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        if (_temp[0] == 0x30) {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        bool _hasNonNumber;\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b) {\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                if (_hasNonNumber == false) {\r\n                    _hasNonNumber = true;\r\n                }\r\n            } else {\r\n                require(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a), \"string contains invalid characters\");\r\n                if (_temp[i] == 0x20) {\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                }\r\n\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)) {\r\n                    _hasNonNumber = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary F3Ddatasets {\r\n    // compressedData key\r\n    // [76-33][32][31][30][29][28-18][17][16-6][5-3][2][1][0]\r\n    // 0 - new player (bool)\r\n    // 1 - joined round (bool)\r\n    // 2 - new  leader (bool)\r\n    // 3-5 - air drop tracker (uint 0-999)\r\n    // 6-16 - round end time\r\n    // 17 - winnerTeam\r\n    // 18 - 28 timestamp\r\n    // 29 - team\r\n    // 30 - 0 = reinvest (round), 1 = buy (round), 2 = buy (ico), 3 = reinvest (ico)\r\n    // 31 - airdrop happened bool\r\n    // 32 - airdrop tier\r\n    // 33 - airdrop amount won\r\n    // compressedIDs key\r\n    // [77-52][51-26][25-0]\r\n    // 0-25 - pID\r\n    // 26-51 - winPID\r\n    // 52-77 - rID\r\n    struct EventReturns {\r\n        uint256 compressedData;\r\n        uint256 compressedIDs;\r\n        address winnerAddr;         // winner address\r\n        bytes32 winnerName;         // winner name\r\n        uint256 amountWon;          // amount won\r\n        uint256 newPot;             // amount in new pot\r\n        uint256 genAmount;          // amount distributed to gen\r\n        uint256 potAmount;          // amount added to pot\r\n    }\r\n\r\n    struct Player {\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 win;    // winnings vault\r\n        uint256 gen;    // general vault\r\n        uint256 aff;    // affiliate vault\r\n        uint256 lrnd;   // last round played\r\n        uint256 laff;   // last affiliate id used\r\n    }\r\n\r\n    struct PlayerRounds {\r\n        uint256 eth;    // eth player has added to round (used for eth limiter)\r\n        uint256 keys;   // keys\r\n        uint256 mask;   // player mask\r\n        uint256 ico;    // ICO phase investment\r\n    }\r\n\r\n    struct Round {\r\n        uint256 plyr;   // pID of player in lead\r\n        uint256 team;   // tID of team in lead\r\n        uint256 end;    // time ends/ended\r\n        bool ended;     // has round end function been ran\r\n        uint256 strt;   // time round started\r\n        uint256 keys;   // keys\r\n        uint256 eth;    // total eth in\r\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\r\n        uint256 mask;   // global mask\r\n        uint256 ico;    // total eth sent in during ICO phase\r\n        uint256 icoGen; // total eth for gen during ICO phase\r\n        uint256 icoAvg; // average key price for ICO phase\r\n    }\r\n}\r\n\r\nlibrary F3DKeysCalcLong {\r\n    using SafeMath for *;\r\n\r\n    function keysRec(uint256 _curEth, uint256 _newEth) internal pure returns (uint256) {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys) internal pure returns (uint256) {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    function keys(uint256 _eth) internal pure returns(uint256) {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    function eth(uint256 _keys) internal pure returns(uint256) {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\ninterface PartnershipInterface {\r\n    function deposit() external payable returns(bool);\r\n}\r\n\r\ninterface PlayerBookInterface {\r\n    function getPlayerID(address _addr) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getNameFee() external view returns (uint256);\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\r\n}\r\n\r\ninterface ExternalSettingsInterface {\r\n    function getLongGap() external returns(uint256);\r\n    function getLongExtra() external returns(uint256);\r\n    function updateLongExtra(uint256 _pID) external;\r\n}\r\n\r\ncontract F3Devents {\r\n    event onNewName(\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onEndTx(\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        bytes32 playerName,\r\n        address playerAddress,\r\n        uint256 ethIn,\r\n        uint256 keysBought,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount,\r\n        uint256 potAmount,\r\n        uint256 airDropPot\r\n    );\r\n\r\n    event onWithdraw(\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onWithdrawAndDistribute(\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n\r\n    event onBuyAndDistribute(\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethIn,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n\r\n    event onReLoadAndDistribute(\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n\r\n    event onAffiliatePayout(\r\n        uint256 indexed affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not owner.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid address.\");\r\n\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract Fomo3DAsia is F3Devents, Ownable {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using F3DKeysCalcLong for uint256;\r\n\r\n    ExternalSettingsInterface constant private externalSettings = ExternalSettingsInterface(0xC77c0EF6B077D2F251C19B2DBA3ad8e0DF26aF31);\r\n    PartnershipInterface constant private partnership = PartnershipInterface(0x59Ff25C4E2550bc9E2115dbcD28b949d7670d134);\r\n\tPlayerBookInterface constant private playerBook = PlayerBookInterface(0x38926C81Bf68130fFfc6972F7b5DBc550272EB4e);\r\n\r\n    string constant public name = \"Fomo3D Asia (Released)\";\r\n    string constant public symbol = \"F3DA\";\r\n\r\n    uint256 private rndGap_ = externalSettings.getLongGap();\r\n\tuint256 private rndExtra_ = externalSettings.getLongExtra();\r\n    uint256 constant private rndInit_ = 1 hours;\r\n    uint256 constant private rndInc_ = 30 seconds;\r\n    uint256 constant private rndMax_ = 24 hours;\r\n\r\n\tuint256 public airDropPot_;\r\n    uint256 public airDropTracker_ = 0;\r\n\r\n    uint256 public rID_;\r\n\r\n    bool public activated_ = false;\r\n\r\n    mapping (address => uint256) public pIDxAddr_;\r\n    mapping (bytes32 => uint256) public pIDxName_;\r\n    mapping (uint256 => F3Ddatasets.Player) public plyr_;\r\n    mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;\r\n\r\n    mapping (uint256 => F3Ddatasets.Round) public round_;\r\n    mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_;\r\n\r\n    mapping (uint256 => uint256) public fees_;\r\n    mapping (uint256 => uint256) public potSplit_;\r\n\r\n    constructor() public {\r\n\t\t// 团队分配比例（0 = 鲸队; 1 = 熊队; 2 = 蛇队; 3 = 牛队）\r\n\r\n        fees_[0] = 30;   //50% 奖池, 15% 推荐人, 4% 社区基金, 1% 空投奖池\r\n        fees_[1] = 35;   //45% 奖池, 15% 推荐人, 4% 社区基金, 1% 空投奖池\r\n        fees_[2] = 50;   //30% 奖池, 15% 推荐人, 4% 社区基金, 1% 空投奖池\r\n        fees_[3] = 45;   //35% 奖池, 15% 推荐人, 4% 社区基金, 1% 空投奖池\r\n\r\n        potSplit_[0] = 30;  //58% 中奖者, 10% 下一轮奖池, 2% 社区基金\r\n        potSplit_[1] = 25;  //58% 中奖者, 15% 下一轮奖池, 2% 社区基金\r\n        potSplit_[2] = 10;  //58% 中奖者, 30% 下一轮奖池, 2% 社区基金\r\n        potSplit_[3] = 15;  //58% 中奖者, 25% 下一轮奖池, 2% 社区基金\r\n\t}\r\n\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet. check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {\r\n            _codeLength := extcodesize(_addr)\r\n        }\r\n\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n    function() public payable isActivated isHuman isWithinLimits(msg.value) {\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        buyCore(_pID, plyr_[_pID].laff, 2, _eventData_);\r\n    }\r\n\r\n    function buyXid(uint256 _affCode, uint256 _team) public payable isActivated isHuman isWithinLimits(msg.value) {\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        if (_affCode == 0 || _affCode == _pID) {\r\n            _affCode = plyr_[_pID].laff;\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        buyCore(_pID, _affCode, _team, _eventData_);\r\n    }\r\n\r\n    function buyXaddr(address _affCode, uint256 _team) public payable isActivated isHuman isWithinLimits(msg.value) {\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender) {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    function buyXname(bytes32 _affCode, uint256 _team) public payable isActivated isHuman isWithinLimits(msg.value) {\r\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == \"\" || _affCode == plyr_[_pID].name) {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    function reLoadXid(uint256 _affCode, uint256 _team, uint256 _eth) public isActivated isHuman isWithinLimits(_eth) {\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        if (_affCode == 0 || _affCode == _pID) {\r\n            _affCode = plyr_[_pID].laff;\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        reLoadCore(_pID, _affCode, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function reLoadXaddr(address _affCode, uint256 _team, uint256 _eth) public isActivated isHuman isWithinLimits(_eth) {\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender) {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function reLoadXname(bytes32 _affCode, uint256 _team, uint256 _eth) public isActivated isHuman isWithinLimits(_eth) {\r\n        F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == \"\" || _affCode == plyr_[_pID].name) {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxName_[_affCode];\r\n            if (_affID != plyr_[_pID].laff) {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        _team = verifyTeam(_team);\r\n\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function withdraw() public isActivated isHuman {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _eth;\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        uint256 _rID = rID_;\r\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0) {\r\n            F3Ddatasets.EventReturns memory _eventData_;\r\n\r\n\t\t\tround_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            _eth = withdrawEarnings(_pID);\r\n            if (_eth > 0) {\r\n                plyr_[_pID].addr.transfer(_eth);\r\n            }\r\n\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            emit F3Devents.onWithdrawAndDistribute(\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eth,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.genAmount\r\n            );\r\n        } else {\r\n            _eth = withdrawEarnings(_pID);\r\n            if (_eth > 0) {\r\n                plyr_[_pID].addr.transfer(_eth);\r\n            }\r\n\r\n            emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\r\n        }\r\n    }\r\n\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all) public payable isHuman {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = playerBook.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, block.timestamp);\r\n    }\r\n\r\n    function registerNameXaddr(string _nameString, address _affCode, bool _all) public payable isHuman {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = playerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, block.timestamp);\r\n    }\r\n\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all) public payable isHuman {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = playerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, block.timestamp);\r\n    }\r\n\r\n    function getBuyPrice() public view returns(uint256) {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _rID = rID_;\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            return (round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000);\r\n        }\r\n        return 75000000000000;\r\n    }\r\n\r\n    function getTimeLeft() public view returns(uint256) {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _rID = rID_;\r\n        if (_now < round_[_rID].end) {\r\n            if (_now > round_[_rID].strt + rndGap_) {\r\n                return (round_[_rID].end).sub(_now);\r\n            }\r\n            return (round_[_rID].strt + rndGap_).sub(_now);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getPlayerVaults(uint256 _pID) public view returns(uint256 ,uint256, uint256) {\r\n        uint256 _rID = rID_;\r\n        if (block.timestamp > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0) {\r\n            if (round_[_rID].plyr == _pID) {\r\n                return (\r\n                    (plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),\r\n                    (plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)),\r\n                    plyr_[_pID].aff\r\n                );\r\n            }\r\n            return (\r\n                plyr_[_pID].win,\r\n                (plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)),\r\n                plyr_[_pID].aff\r\n            );\r\n        }\r\n        return (\r\n            plyr_[_pID].win,\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\r\n            plyr_[_pID].aff\r\n        );\r\n    }\r\n\r\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID) private view returns(uint256) {\r\n        return (((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team])) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000));\r\n    }\r\n\r\n    function getCurrentRoundInfo() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256) {\r\n        uint256 _rID = rID_;\r\n\r\n        return (\r\n            round_[_rID].ico,                               // 0\r\n            _rID,                                           // 1\r\n            round_[_rID].keys,                              // 2\r\n            round_[_rID].end,                               // 3\r\n            round_[_rID].strt,                              // 4\r\n            round_[_rID].pot,                               // 5\r\n            (round_[_rID].team + (round_[_rID].plyr * 10)), // 6\r\n            plyr_[round_[_rID].plyr].addr,                  // 7\r\n            plyr_[round_[_rID].plyr].name,                  // 8\r\n            rndTmEth_[_rID][0],                             // 9\r\n            rndTmEth_[_rID][1],                             // 10\r\n            rndTmEth_[_rID][2],                             // 11\r\n            rndTmEth_[_rID][3],                             // 12\r\n            airDropTracker_ + (airDropPot_ * 1000)          // 13\r\n        );\r\n    }\r\n\r\n    function getPlayerInfoByAddress(address _addr) public view returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256) {\r\n        if (_addr == address(0)) {\r\n            _addr == msg.sender;\r\n        }\r\n\r\n        uint256 _rID = rID_;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return (\r\n            _pID,                                                                // 0\r\n            plyr_[_pID].name,                                                    // 1\r\n            plyrRnds_[_pID][_rID].keys,                                          // 2\r\n            plyr_[_pID].win,                                                     // 3\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)), // 4\r\n            plyr_[_pID].aff,                                                     // 5\r\n            plyrRnds_[_pID][_rID].eth                                            // 6\r\n        );\r\n    }\r\n\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_) private {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _rID = rID_;\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            core(_rID, _pID, msg.value, _affID, _team, _eventData_);\r\n        } else {\r\n            if (_now > round_[_rID].end && round_[_rID].ended == false) {\r\n\t\t\t    round_[_rID].ended = true;\r\n                _eventData_ = endRound(_eventData_);\r\n\r\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n                emit F3Devents.onBuyAndDistribute (\r\n                    msg.sender,\r\n                    plyr_[_pID].name,\r\n                    msg.value,\r\n                    _eventData_.compressedData,\r\n                    _eventData_.compressedIDs,\r\n                    _eventData_.winnerAddr,\r\n                    _eventData_.winnerName,\r\n                    _eventData_.amountWon,\r\n                    _eventData_.newPot,\r\n                    _eventData_.genAmount\r\n                );\r\n            }\r\n\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _team, uint256 _eth, F3Ddatasets.EventReturns memory _eventData_) private {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _rID = rID_;\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\r\n\r\n            core(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            emit F3Devents.onReLoadAndDistribute (\r\n                msg.sender,\r\n                plyr_[_pID].name,\r\n                _eventData_.compressedData,\r\n                _eventData_.compressedIDs,\r\n                _eventData_.winnerAddr,\r\n                _eventData_.winnerName,\r\n                _eventData_.amountWon,\r\n                _eventData_.newPot,\r\n                _eventData_.genAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_) private {\r\n        externalSettings.updateLongExtra(_pID);\r\n\r\n        if (plyrRnds_[_pID][_rID].keys == 0) {\r\n            _eventData_ = managePlayer(_pID, _eventData_);\r\n        }\r\n\r\n        if (round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000) {\r\n            uint256 _availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth);\r\n            uint256 _refund = _eth.sub(_availableLimit);\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\r\n            _eth = _availableLimit;\r\n        }\r\n\r\n        if (_eth > 1000000000) {\r\n            uint256 _keys = (round_[_rID].eth).keysRec(_eth);\r\n            if (_keys >= 1000000000000000000) {\r\n                updateTimer(_keys, _rID);\r\n\r\n                if (round_[_rID].plyr != _pID) {\r\n                    round_[_rID].plyr = _pID;\r\n                }\r\n                if (round_[_rID].team != _team) {\r\n                    round_[_rID].team = _team;\r\n                }\r\n\r\n                _eventData_.compressedData = _eventData_.compressedData + 100;\r\n            }\r\n\r\n            if (_eth >= 100000000000000000) {\r\n                airDropTracker_++;\r\n                if (airdrop() == true) {\r\n                    uint256 _prize;\r\n                    if (_eth >= 10000000000000000000) {\r\n                        _prize = ((airDropPot_).mul(75)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        _eventData_.compressedData += 300000000000000000000000000000000;\r\n                    } else if (_eth >= 1000000000000000000 && _eth < 10000000000000000000) {\r\n                        _prize = ((airDropPot_).mul(50)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        _eventData_.compressedData += 200000000000000000000000000000000;\r\n                    } else if (_eth >= 100000000000000000 && _eth < 1000000000000000000) {\r\n                        _prize = ((airDropPot_).mul(25)) / 100;\r\n                        plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                        airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                        _eventData_.compressedData += 300000000000000000000000000000000;\r\n                    }\r\n\r\n                    _eventData_.compressedData += 10000000000000000000000000000000;\r\n                    _eventData_.compressedData += _prize * 1000000000000000000000000000000000;\r\n\r\n                    airDropTracker_ = 0;\r\n                }\r\n            }\r\n\r\n            _eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000);\r\n\r\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\r\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n\r\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\r\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team]);\r\n\r\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, _eventData_);\r\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _team, _keys, _eventData_);\r\n\r\n\t\t    endTx(_pID, _team, _eth, _keys, _eventData_);\r\n        }\r\n    }\r\n\r\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast) private view returns(uint256) {\r\n        return ((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask));\r\n    }\r\n\r\n    function calcKeysReceived(uint256 _rID, uint256 _eth) public view returns(uint256) {\r\n        uint256 _now = block.timestamp;\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            return (round_[_rID].eth).keysRec(_eth);\r\n        }\r\n        return (_eth).keys();\r\n    }\r\n\r\n    function iWantXKeys(uint256 _keys) public view returns(uint256) {\r\n        uint256 _now = block.timestamp;\r\n        uint256 _rID = rID_;\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n            return ( (round_[_rID].keys.add(_keys)).ethRec(_keys) );\r\n        }\r\n        return ( (_keys).eth() );\r\n    }\r\n\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff) external {\r\n        require (msg.sender == address(playerBook), \"your not playerNames contract... hmmm..\");\r\n        if (pIDxAddr_[_addr] != _pID) {\r\n            pIDxAddr_[_addr] = _pID;\r\n        }\r\n        if (pIDxName_[_name] != _pID) {\r\n            pIDxName_[_name] = _pID;\r\n        }\r\n        if (plyr_[_pID].addr != _addr) {\r\n            plyr_[_pID].addr = _addr;\r\n        }\r\n        if (plyr_[_pID].name != _name) {\r\n            plyr_[_pID].name = _name;\r\n        }\r\n        if (plyr_[_pID].laff != _laff) {\r\n            plyr_[_pID].laff = _laff;\r\n        }\r\n        if (plyrNames_[_pID][_name] == false) {\r\n            plyrNames_[_pID][_name] = true;\r\n        }\r\n    }\r\n\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name) external {\r\n        require (msg.sender == address(playerBook), \"your not playerNames contract... hmmm..\");\r\n        if(plyrNames_[_pID][_name] == false) {\r\n            plyrNames_[_pID][_name] = true;\r\n        }\r\n    }\r\n\r\n    function determinePID(F3Ddatasets.EventReturns memory _eventData_) private returns (F3Ddatasets.EventReturns) {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        if (_pID == 0) {\r\n            _pID = playerBook.getPlayerID(msg.sender);\r\n            bytes32 _name = playerBook.getPlayerName(_pID);\r\n            uint256 _laff = playerBook.getPlayerLAff(_pID);\r\n\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\") {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID) {\r\n                plyr_[_pID].laff = _laff;\r\n            }\r\n\r\n            _eventData_.compressedData = _eventData_.compressedData + 1;\r\n        }\r\n\r\n        return (_eventData_);\r\n    }\r\n\r\n    function verifyTeam(uint256 _team) private pure returns (uint256) {\r\n        if (_team < 0 || _team > 3) {\r\n            return 2;\r\n        }\r\n        return _team;\r\n    }\r\n\r\n    function managePlayer(uint256 _pID, F3Ddatasets.EventReturns memory _eventData_) private returns (F3Ddatasets.EventReturns) {\r\n        if (plyr_[_pID].lrnd != 0) {\r\n            updateGenVault(_pID, plyr_[_pID].lrnd);\r\n        }\r\n        plyr_[_pID].lrnd = rID_;\r\n\r\n        _eventData_.compressedData = _eventData_.compressedData + 10;\r\n\r\n        return _eventData_;\r\n    }\r\n\r\n    function endRound(F3Ddatasets.EventReturns memory _eventData_) private returns (F3Ddatasets.EventReturns) {\r\n        uint256 _rID = rID_;\r\n\r\n        uint256 _winPID = round_[_rID].plyr;\r\n        uint256 _winTID = round_[_rID].team;\r\n\r\n        uint256 _pot = round_[_rID].pot;\r\n\r\n        // 中奖者拿走 58%\r\n        uint256 _win = (_pot.mul(58)) / 100;\r\n\r\n        // 提取社区基金 2%\r\n        uint256 _com = (_pot / 50);\r\n\r\n        // 所在团队分红\r\n        uint256 _gen = (_pot.mul(potSplit_[_winTID])) / 100;\r\n\r\n        // 进入下一轮奖池\r\n        uint256 _res = _pot.sub(_win).sub(_com).sub(_gen);\r\n\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\r\n        if (_dust > 0) {\r\n            _gen = _gen.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\r\n\r\n        partnership.deposit.value(_com)();\r\n\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\r\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\r\n        _eventData_.winnerName = plyr_[_winPID].name;\r\n        _eventData_.amountWon = _win;\r\n        _eventData_.genAmount = _gen;\r\n        _eventData_.newPot = _res;\r\n\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].strt = block.timestamp;\r\n        round_[_rID].end = block.timestamp.add(rndInit_).add(rndGap_);\r\n        round_[_rID].pot = _res;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    function updateGenVault(uint256 _pID, uint256 _rIDlast) private {\r\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\r\n        if (_earnings > 0) {\r\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\r\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\r\n        }\r\n    }\r\n\r\n    function updateTimer(uint256 _keys, uint256 _rID) private {\r\n        uint256 _now = block.timestamp;\r\n\r\n        uint256 _newTime;\r\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0) {\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\r\n        } else {\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\r\n        }\r\n\r\n        if (_newTime < (rndMax_).add(_now)) {\r\n            round_[_rID].end = _newTime;\r\n        } else {\r\n            round_[_rID].end = rndMax_.add(_now);\r\n        }\r\n    }\r\n\r\n    function airdrop() private view returns(bool) {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            (block.timestamp).add(\r\n                block.difficulty\r\n            ).add(\r\n                uint256(keccak256(abi.encodePacked(block.coinbase))) / block.timestamp\r\n            ).add(\r\n                block.gaslimit\r\n            ).add(\r\n                (uint256(keccak256(abi.encodePacked(msg.sender)))) / block.timestamp\r\n            ).add(\r\n                block.number\r\n            )\r\n        )));\r\n\r\n        if ((seed - ((seed / 1000) * 1000)) < airDropTracker_) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, F3Ddatasets.EventReturns memory _eventData_) private returns(F3Ddatasets.EventReturns) {\r\n        // 社区基金 4%\r\n        uint256 _com = _eth / 25;\r\n        partnership.deposit.value(_com)();\r\n\r\n        // 直接推荐人 5%\r\n        uint256 _firstAff = _eth / 20;\r\n\r\n        if (_affID == _pID || plyr_[_affID].name == \"\") {\r\n            _affID = 1;\r\n        }\r\n        plyr_[_affID].aff = _firstAff.add(plyr_[_affID].aff);\r\n        emit F3Devents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _firstAff, block.timestamp);\r\n\r\n        // 二级推荐人 10%\r\n        uint256 _secondAff = _eth / 10;\r\n\r\n        uint256 _secondAffID = plyr_[_affID].laff;\r\n        if (_secondAffID == plyr_[_secondAffID].laff && plyr_[_secondAffID].name == \"\") {\r\n            _secondAffID = 1;\r\n        }\r\n        plyr_[_secondAffID].aff = _secondAff.add(plyr_[_secondAffID].aff);\r\n        emit F3Devents.onAffiliatePayout(_secondAffID, plyr_[_secondAffID].addr, plyr_[_secondAffID].name, _rID, _affID, _secondAff, block.timestamp);\r\n\r\n        return _eventData_;\r\n    }\r\n\r\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_) private returns(F3Ddatasets.EventReturns) {\r\n        // 团队分红\r\n        uint256 _gen = (_eth.mul(fees_[_team])) / 100;\r\n\r\n        // 空投奖池 1%\r\n        uint256 _air = _eth / 100;\r\n        airDropPot_ = airDropPot_.add(_air);\r\n\r\n        // 奖池\r\n        uint256 _pot = _eth.sub(_gen.add(_eth / 5));\r\n\r\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\r\n        if (_dust > 0) {\r\n            _gen = _gen.sub(_dust);\r\n        }\r\n\r\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\r\n\r\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\r\n        _eventData_.potAmount = _pot;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys) private returns(uint256) {\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\r\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\r\n\r\n        return (_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\r\n    }\r\n\r\n    function withdrawEarnings(uint256 _pID) private returns(uint256) {\r\n        updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n        if (_earnings > 0) {\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].gen = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n    function endTx(uint256 _pID, uint256 _team, uint256 _eth, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_) private {\r\n        _eventData_.compressedData = _eventData_.compressedData + (block.timestamp * 1000000000000000000) + (_team * 100000000000000000000000000000);\r\n        _eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000);\r\n\r\n        emit F3Devents.onEndTx(\r\n            _eventData_.compressedData,\r\n            _eventData_.compressedIDs,\r\n            plyr_[_pID].name,\r\n            msg.sender,\r\n            _eth,\r\n            _keys,\r\n            _eventData_.winnerAddr,\r\n            _eventData_.winnerName,\r\n            _eventData_.amountWon,\r\n            _eventData_.newPot,\r\n            _eventData_.genAmount,\r\n            _eventData_.potAmount,\r\n            airDropPot_\r\n        );\r\n    }\r\n\r\n    function activate() public onlyOwner {\r\n        require(activated_ == false, \"fomo3d already activated\");\r\n\r\n        activated_ = true;\r\n\r\n\t\trID_ = 1;\r\n        round_[1].strt = block.timestamp + rndExtra_ - rndGap_;\r\n        round_[1].end = block.timestamp + rndInit_ + rndExtra_;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"},{\"name\":\"icoGen\",\"type\":\"uint256\"},{\"name\":\"icoAvg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_laff\",\"type\":\"uint256\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTmEth_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"receivePlayerNameList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ico\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potSplit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcKeysReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"airDropPot\",\"type\":\"uint256\"}],\"name\":\"onEndTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onBuyAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"compressedData\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"compressedIDs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onReLoadAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffiliatePayout\",\"type\":\"event\"}]","ContractName":"Fomo3DAsia","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf5d953652524a912a78a5029a1123ad842b87400852a54f645e2f0261f804f1"}]}