{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Enlist {\r\n  struct Record {\r\n    address investor;\r\n    bytes32 _type;\r\n  }\r\n\r\n  Record[] records;\r\n\r\n  function setRecord (\r\n    address _investor,\r\n    bytes32 _type\r\n  ) internal {\r\n    records.push(Record(_investor, _type));\r\n  }\r\n\r\n  function getRecordCount () constant\r\n  public\r\n  returns (uint) {\r\n    return records.length;\r\n  }\r\n\r\n  function getRecord (uint index) view\r\n  public\r\n  returns (address, bytes32) {\r\n    return (\r\n      records[index].investor,\r\n      records[index]._type\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/* CONSTANTS:\r\n *    20\r\n */\r\ncontract JinVestingRule {\r\n  struct Rule {\r\n    bytes32 name;\r\n    bytes32 cliffStr;\r\n    uint256 cliff;\r\n    uint256 baseRatio; /* 第一個月解鎖 */\r\n    uint256 incrRatio; /* 第二個月開始每月解鎖 */\r\n  }\r\n\r\n  uint public period;\r\n  uint public ruleCount;\r\n  Rule[20+1] public rules;\r\n  mapping(bytes32 => uint) ruleNumbering;\r\n\r\n  constructor () public {\r\n    uint j = 0;\r\n    /* skip index j==0 */\r\n    rules[++j] = Rule('PRESALE1' , '2018-12-01', 1543622400,  20, 10); /* 私人配售 */\r\n    rules[++j] = Rule('PRESALE2' , '2019-02-01', 1548979200,  20, 10);\r\n    rules[++j] = Rule('PRESALE3' , '2019-04-01', 1554076800,  20, 10);\r\n    rules[++j] = Rule('PRESALE4' , '2019-06-01', 1559347200,  20, 10);\r\n    rules[++j] = Rule('PRESALE5' , '2019-08-01', 1564617600,  20, 10);\r\n    rules[++j] = Rule('CROWDSALE', '2019-09-01', 1567296000, 100,  0); /* 公開預售 */\r\n    rules[++j] = Rule('STARTUP'  , '2020-01-01', 1577836800,  10, 10); /* 創始團隊 */\r\n    rules[++j] = Rule('TECHTEAM' , '2019-09-01', 1567296000,  10, 10); /* 技術平台 */\r\n    ruleCount = j;\r\n    for (uint i = 1; i <= ruleCount; i++) {\r\n      ruleNumbering[rules[i].name] = i;\r\n    }\r\n    period = 30 days;\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n modifier validateRuleName(bytes32 key) {\r\n   require(ruleNumbering[key] != 0);\r\n   _;\r\n }\r\n\r\n modifier validateRuleIndex(uint i) {\r\n   require(1 <= i && i <= ruleCount);\r\n   _;\r\n }\r\n\r\n  function getRule (bytes32 key)\r\n  public view\r\n  validateRuleName(key)\r\n  returns (\r\n    string str_name,\r\n    string str_cliffStr,\r\n    uint256 cliff,\r\n    uint256 baseRatio,\r\n    uint256 incrRatio\r\n  ) {\r\n    return (\r\n      bytes32ToString(rules[ruleNumbering[key]].name),\r\n      bytes32ToString(rules[ruleNumbering[key]].cliffStr),\r\n      rules[ruleNumbering[key]].cliff,\r\n      rules[ruleNumbering[key]].baseRatio,\r\n      rules[ruleNumbering[key]].incrRatio\r\n    );\r\n  }\r\n\r\n  function getRuleIndexByName (bytes32 key)\r\n  public view\r\n  validateRuleName(key)\r\n  returns (uint) {\r\n    return ruleNumbering[key];\r\n  }\r\n\r\n  /* ref\r\n   * https://ethereum.stackexchange.com/questions/29295/how-to-convert-a-bytes-to-string-in-solidity?rq=1\r\n   */\r\n  function bytes32ToString(bytes32 x)\r\n  public pure\r\n  returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n        bytesString[charCount] = char;\r\n        charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n    return _a >= _b ? _a : _b;\r\n  }\r\n\r\n  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n    return _a < _b ? _a : _b;\r\n  }\r\n\r\n  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a >= _b ? _a : _b;\r\n  }\r\n\r\n  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a < _b ? _a : _b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract JinToken is\r\n  StandardToken,\r\n  DetailedERC20,\r\n  Ownable,\r\n  JinVestingRule,\r\n  Enlist {\r\n  using SafeMath for uint;\r\n  using Math for uint;\r\n\r\n  uint public INITIAL_SUPPLY;\r\n\r\n  mapping (address => mapping (bytes32 => uint)) private lockedAmount;\r\n  mapping (address => mapping (bytes32 => uint)) private alreadyClaim;\r\n\r\n  // How many token units a buyer gets per microether.\r\n  // The rate is the conversion between\r\n  //    microeather and\r\n  //    the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with 5 decimals called KIM\r\n  // 1 microether will give you 1 unit, or 0.00001 KIM.\r\n  uint public rate;  // Crowdsale\r\n\r\n  constructor (\r\n    string _name,     // \"jinyitong\"\r\n    string _symbol,   // \"JIN\", \"KIN\", \"BGC\"\r\n    uint8 _decimals,  // 5\r\n    address _startup,\r\n    address _angelfund,\r\n    address _techteam\r\n  )\r\n  DetailedERC20(\r\n    _name,\r\n    _symbol,\r\n    _decimals\r\n  )\r\n  JinVestingRule()\r\n  public {\r\n    rate = 30;\r\n    INITIAL_SUPPLY = 3.14e8;                 // 三億一千四百萬 (314000000)\r\n    totalSupply_ = INITIAL_SUPPLY.mul(10 ** uint(decimals)); // BasicToken\r\n    balances[msg.sender] = totalSupply_;                     // BasicToken\r\n\r\n    /* initial transferToLock */\r\n    uint jins = 0;\r\n\r\n    jins = totalSupply_.div(100).mul(20);\r\n    _transferToLock(_startup, jins, 'STARTUP');\r\n\r\n    jins = totalSupply_.div(100).mul(15);\r\n    transfer(_angelfund, jins); // _transferToLock(_angelfund, jins, 'ANGELFUND');\r\n\r\n    jins = totalSupply_.div(100).mul(5);\r\n    _transferToLock(_techteam, jins, 'TECHTEAM');\r\n  }\r\n\r\n  event TransferToLock (\r\n    address indexed to,\r\n    uint value,\r\n    string lockingType,\r\n    uint totalLocked\r\n  );\r\n\r\n  event DoubleClaim (\r\n    address indexed user,\r\n    bytes32 _type,\r\n    address sender\r\n  );\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner); // Ownable\r\n    _;\r\n  }\r\n\r\n  /* Crowdsale */\r\n  function ()\r\n  external\r\n  payable {\r\n\r\n    address user = msg.sender;\r\n    uint jins = _getTokenAmount(msg.value);\r\n\r\n    require(jins >= 0);\r\n\r\n    _transferToLock(user, jins, 'CROWDSALE');\r\n  }\r\n\r\n  function _getTokenAmount(uint weiAmount) internal view returns (uint) {\r\n    uint _microAmount = weiAmount.div(10 ** 12);\r\n    return _microAmount.mul(rate);\r\n  }\r\n\r\n  function setCrowdsaleRate(uint _rate) public onlyOwner() returns (bool) {\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n\r\n  function transferToLock (\r\n    address user,\r\n    uint amount,\r\n    bytes32 _type\r\n  ) public\r\n  onlyOwner()\r\n  validateRuleName(_type)\r\n  returns (bool) {\r\n    _transferToLock(user, amount, _type);\r\n    return true;\r\n  }\r\n\r\n  function _transferToLock (\r\n    address _to,\r\n    uint _value,\r\n    bytes32 _type\r\n  ) internal\r\n  returns (bool) {\r\n    address _from = owner;\r\n\r\n    require(_value > 0);\r\n    require(_value <= balances[_from]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    lockedAmount[_to][_type] = lockedAmount[_to][_type].add(_value);\r\n\r\n    emit TransferToLock(_to, _value, bytes32ToString(_type), lockedAmount[_to][_type]);\r\n\r\n    setRecord(_to, _type);\r\n\r\n    return true;\r\n  }\r\n\r\n  function claimToken (\r\n    address user,\r\n    bytes32 _type\r\n  ) public\r\n  validateRuleName(_type)\r\n  returns (bool) {\r\n    require(lockedAmount[user][_type] > 0);\r\n    uint approved = approvedRatio(_type);\r\n    uint availableToClaim =\r\n      lockedAmount[user][_type].mul(approved).div(100);\r\n    uint amountToClaim = availableToClaim.sub(alreadyClaim[user][_type]);\r\n\r\n    if (amountToClaim > 0) {\r\n      balances[user] = balances[user].add(amountToClaim);\r\n      alreadyClaim[user][_type] = availableToClaim;\r\n    } else if (amountToClaim == 0) {\r\n      emit DoubleClaim(\r\n        user,\r\n        _type,\r\n        msg.sender\r\n      );\r\n    } else {\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function approvedRatio (\r\n    bytes32 _type\r\n  ) internal view returns (uint) {\r\n      uint _now = getTime();\r\n      uint cliff = rules[ruleNumbering[_type]].cliff;\r\n\r\n      require(_now >= cliff);\r\n\r\n      uint baseRatio = rules[ruleNumbering[_type]].baseRatio;\r\n      uint incrRatio = rules[ruleNumbering[_type]].incrRatio;\r\n\r\n      return Math.min256(\r\n        100,\r\n        _now\r\n        .sub( cliff )\r\n        .div( period ) // a month\r\n        .mul( incrRatio )\r\n        .add( baseRatio )\r\n      );\r\n  }\r\n\r\n  function getLockedAvailable (\r\n    address user,\r\n    bytes32 _type\r\n  ) public view\r\n  validateRuleName(_type)\r\n  returns (uint) {\r\n    uint record;\r\n\r\n    record = lockedAmount[user][_type].sub(alreadyClaim[user][_type]);\r\n\r\n    return record;\r\n  }\r\n\r\n  function getTime () public view returns (uint) {\r\n    return block.timestamp; // now\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rules\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"cliffStr\",\"type\":\"bytes32\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"baseRatio\",\"type\":\"uint256\"},{\"name\":\"incrRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getRuleIndexByName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"bytes32\"}],\"name\":\"transferToLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ruleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"bytes32\"}],\"name\":\"claimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getRule\",\"outputs\":[{\"name\":\"str_name\",\"type\":\"string\"},{\"name\":\"str_cliffStr\",\"type\":\"string\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"baseRatio\",\"type\":\"uint256\"},{\"name\":\"incrRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"bytes32\"}],\"name\":\"getLockedAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_startup\",\"type\":\"address\"},{\"name\":\"_angelfund\",\"type\":\"address\"},{\"name\":\"_techteam\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockingType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"name\":\"TransferToLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DoubleClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"JinToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000cb55fe290031267fc623fed5ed5b4dd4f3fa465300000000000000000000000066fa6317012dba95650a9ae1bfea281905ab0d8c0000000000000000000000005a4c1003774bf5cb9b6121f9561432c3b1e018b900000000000000000000000000000000000000000000000000000000000000094a494e5949544f4e47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034247430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://cc0ae08858cd4962b69152cad6b80e03133989227775c84f389dda6e30383d15"}]}