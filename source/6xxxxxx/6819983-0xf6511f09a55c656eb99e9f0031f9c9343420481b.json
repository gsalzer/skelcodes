{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Raffle {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public balances;\r\n\r\n    address public owner;\r\n    address public winner;\r\n  \r\n    address[] public entrants;\r\n    uint256 public numEntrants;\r\n    uint256 public entryPrice;\r\n    uint256 public deadline;\r\n    uint256 public threshold;\r\n    uint256 public percentageTaken;\r\n    \r\n    event PlayerEntered(address participant,uint256 amount,uint256 totalParticipants);\r\n    event Winner(address winner,uint256 amount);\r\n    \r\n    // @param _entryPrice - entry price for each participant in wei i.e. 10^-18 eth.\r\n    // @param _deadline - block number at which you want the crowdsale to end\r\n    // @param _percentageToken - for example, to take 33% of the total use 3, only use integers\r\n    constructor(uint256 _entryPrice, uint256 _deadline, uint256 _percentageTaken,uint256 _thresold) public {\r\n        entryPrice = _entryPrice;\r\n        deadline = _deadline;\r\n        percentageTaken = _percentageTaken;\r\n        threshold = _thresold;\r\n        owner = msg.sender;\r\n    }    \r\n\r\n    modifier thresholdReached() {\r\n        require(numEntrants >= threshold, \"Below Thresold participant\");\r\n        _;\r\n    }\r\n\r\n    modifier belowThreshold() {\r\n        require(numEntrants <= threshold, \"Above Thresold participant\");\r\n        _;\r\n    }\r\n\r\n    modifier deadlinePassed() {\r\n        require(now >= deadline, \"Deadline is not Passed\");\r\n        _;\r\n    }\r\n\r\n    modifier deadlineNotPassed() {\r\n        require(now <= deadline,\"Deadline is Passed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not Owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier pickingWinner() {\r\n        require(winner == 0x0, \"Winner is already picked\");\r\n        _;\r\n    }\r\n    \r\n    function() public payable {\r\n        enterRaffle();\r\n    }\r\n\r\n    function enterRaffle() public payable deadlineNotPassed {\r\n        require(msg.value == entryPrice);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        numEntrants = numEntrants.add(1);\r\n        entrants.push(msg.sender);\r\n        emit PlayerEntered(msg.sender, msg.value, numEntrants);\r\n    }\r\n\r\n    function withdrawFunds(uint amount) public deadlinePassed belowThreshold {\r\n        require(balances[msg.sender] >= amount, \"You do not have enough balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        (msg.sender).transfer(amount);\r\n    }\r\n\r\n    function determineWinner() public onlyOwner deadlinePassed thresholdReached pickingWinner {\r\n        \r\n        uint256 blockSeed = uint256(blockhash(block.number - 1)).div(2);\r\n        uint256 coinbaseSeed = uint256(block.coinbase).div(2);\r\n        uint256 winnerIndex = blockSeed.add(coinbaseSeed).mod(numEntrants);\r\n        winner = entrants[winnerIndex];\r\n        uint256 payout = address(this).balance;\r\n        payout = payout.div(percentageTaken);\r\n        winner.transfer(payout);\r\n        owner.transfer(address(this).balance);\r\n        emit Winner(winner, payout);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageTaken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"determineWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numEntrants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entrants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_entryPrice\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_percentageTaken\",\"type\":\"uint256\"},{\"name\":\"_thresold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"name\":\"PlayerEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"Raffle","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000005c2172c4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000007d0","Library":"","SwarmSource":"bzzr://edbe06c46932f93933f37da897d2e9a8529614b520e4cc6c6a39d4e7204fe24c"}]}