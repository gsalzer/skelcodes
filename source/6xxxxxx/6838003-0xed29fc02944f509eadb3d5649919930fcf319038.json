{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title McFLY.aero Flight smart contract ver 0.0.3\r\n * @author Copyright (c) 2018 McFly.aero\r\n * @author Dmitriy Khizhinskiy\r\n * @author \"MIT\"\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract McFlyToken  {\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n}\r\n\r\ncontract McFlight is Ownable {\r\n\r\n    address public McFLYtokenAddress = 0x17e2c574cF092950eF89FB4939C97DB2086e796f;\r\n    McFlyToken token_McFLY = McFlyToken(McFLYtokenAddress);\r\n\r\n    address GridMaster_Contract_ID;\r\n\r\n    event FlightStart(uint256 F_ID, uint256 _st, uint256 tokens);\r\n    event FlightEnd(uint256 F_ID, uint256 _end, uint256 uHash, uint256 _mins);\r\n\r\n    struct Flight {\r\n        uint256 Flight_start_time;\r\n        uint256 Flight_end_time;\r\n        uint256 McFLY_tokens_reserved;\r\n        uint256 Universa_Hash;\r\n        address Car_ID;\r\n        address Pad_Owner_Departure_ID;\r\n        address Pad_Owner_Arrival_ID;\r\n        address Charging_Owner_ID;\r\n        address Pilot_ID;\r\n        address ATM_ID;\r\n        address City_Management_ID;\r\n        address Insurance_ID;\r\n        address Catering_ID;\r\n        address App_ID;\r\n    }\r\n    mapping(uint256 => Flight) public flights;\r\n\r\n    struct FlightFee {\r\n        uint type_of_pay;\r\n        uint256 value;\r\n    }\r\n    mapping(address => FlightFee) public flightFees;\r\n\r\n    constructor () public {\r\n        GridMaster_Contract_ID = address(this);\r\n    }\r\n    \r\n    function Start_Flight(\r\n        uint256 _Flight_ID,\r\n        uint256 _Flight_start_time,\r\n        uint256 _McFLY_tokens_reserved,\r\n        address _Car_ID,\r\n        address _Pad_Owner_Departure_ID,\r\n        address _Pad_Owner_Arrival_ID,\r\n        address _Charging_Owner_ID,\r\n        address _Pilot_ID,\r\n        address _ATM_ID,\r\n        address _City_Management_ID,\r\n        address _Insurance_ID,\r\n        address _Catering_ID,\r\n        address _App_ID\r\n        ) public onlyOwner \r\n        {\r\n            require(_Flight_ID != 0);\r\n\r\n            require(_McFLY_tokens_reserved != 0);\r\n            require(_Car_ID != address(0));\r\n            require(_Pad_Owner_Departure_ID != address(0));\r\n            require(_Pad_Owner_Arrival_ID != address(0));\r\n            require(_Charging_Owner_ID != address(0));\r\n            require(_Pilot_ID != address(0));\r\n            require(_ATM_ID != address(0));\r\n            require(_City_Management_ID != address(0));\r\n            require(_Insurance_ID != address(0));\r\n            require(_Catering_ID != address(0));\r\n            require(_App_ID != address(0));\r\n\r\n            flights[_Flight_ID].Flight_start_time = _Flight_start_time;\r\n            flights[_Flight_ID].McFLY_tokens_reserved = _McFLY_tokens_reserved;\r\n            flights[_Flight_ID].Car_ID = _Car_ID;\r\n            flights[_Flight_ID].Pad_Owner_Departure_ID = _Pad_Owner_Departure_ID;\r\n            flights[_Flight_ID].Pad_Owner_Arrival_ID = _Pad_Owner_Arrival_ID;\r\n            flights[_Flight_ID].Charging_Owner_ID = _Charging_Owner_ID;\r\n            flights[_Flight_ID].Pilot_ID = _Pilot_ID;\r\n            flights[_Flight_ID].ATM_ID = _ATM_ID;\r\n            flights[_Flight_ID].City_Management_ID = _City_Management_ID;\r\n            flights[_Flight_ID].Insurance_ID = _Insurance_ID;\r\n            flights[_Flight_ID].Catering_ID = _Catering_ID;\r\n            flights[_Flight_ID].App_ID = _App_ID;\r\n            \r\n            emit FlightStart(_Flight_ID, _Flight_start_time, _McFLY_tokens_reserved);\r\n    }\r\n\r\n\r\n    function Set_Flight_Fees(\r\n        uint256 _Flight_ID,\r\n        uint256 _Car_Fee,\r\n        uint256 _Pad_Owner_Departure_Fee,\r\n        uint256 _Pad_Owner_Arrival_Fee,\r\n        uint256 _Charging_Owner_Fee,\r\n        uint256 _Pilot_Fee,\r\n        uint256 _ATM_Fee,\r\n        uint256 _City_Management_Fee,\r\n        uint256 _Insurance_Fee,\r\n        uint256 _Catering_Fee,\r\n        uint256 _App_Fee\r\n        ) public onlyOwner \r\n        {\r\n            flightFees[flights[_Flight_ID].Car_ID].value = _Car_Fee;\r\n            flightFees[flights[_Flight_ID].Pad_Owner_Departure_ID].value = _Pad_Owner_Departure_Fee;\r\n            flightFees[flights[_Flight_ID].Pad_Owner_Arrival_ID].value = _Pad_Owner_Arrival_Fee;\r\n            flightFees[flights[_Flight_ID].Charging_Owner_ID].value = _Charging_Owner_Fee;\r\n            flightFees[flights[_Flight_ID].Pilot_ID].value = _Pilot_Fee;\r\n            flightFees[flights[_Flight_ID].ATM_ID].value = _ATM_Fee;\r\n            flightFees[flights[_Flight_ID].City_Management_ID].value = _City_Management_Fee;\r\n            flightFees[flights[_Flight_ID].Insurance_ID].value = _Insurance_Fee;\r\n            flightFees[flights[_Flight_ID].Catering_ID].value = _Catering_Fee;\r\n            flightFees[flights[_Flight_ID].App_ID].value = _App_Fee;\r\n    }\r\n\r\n\r\n    function Finish_Flight(uint256 _Flight_ID, uint256 _Flight_end_time, uint256 _Universa_Hash, uint256 _totalMins) public onlyOwner {\r\n        require(_Flight_ID != 0);\r\n\r\n        flights[_Flight_ID].Flight_end_time = _Flight_end_time;\r\n        flights[_Flight_ID].Universa_Hash = _Universa_Hash;\r\n\r\n        token_McFLY.transfer(flights[_Flight_ID].Car_ID, flightFees[flights[_Flight_ID].Car_ID].value * _totalMins);\r\n        token_McFLY.transfer(flights[_Flight_ID].Pad_Owner_Departure_ID, flightFees[flights[_Flight_ID].Pad_Owner_Departure_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].Pad_Owner_Arrival_ID, flightFees[flights[_Flight_ID].Pad_Owner_Arrival_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].Charging_Owner_ID, flightFees[flights[_Flight_ID].Charging_Owner_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].Pilot_ID, flightFees[flights[_Flight_ID].Pilot_ID].value * _totalMins);\r\n        token_McFLY.transfer(flights[_Flight_ID].ATM_ID, flightFees[flights[_Flight_ID].ATM_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].City_Management_ID, flightFees[flights[_Flight_ID].City_Management_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].Insurance_ID, flightFees[flights[_Flight_ID].Insurance_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].Catering_ID, flightFees[flights[_Flight_ID].Catering_ID].value);\r\n        token_McFLY.transfer(flights[_Flight_ID].App_ID, flightFees[flights[_Flight_ID].App_ID].value);\r\n\r\n        emit FlightEnd(_Flight_ID, _Flight_end_time, _Universa_Hash, _totalMins);\r\n    }\r\n\r\n\r\n    function DeleteMe() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"DeleteMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flights\",\"outputs\":[{\"name\":\"Flight_start_time\",\"type\":\"uint256\"},{\"name\":\"Flight_end_time\",\"type\":\"uint256\"},{\"name\":\"McFLY_tokens_reserved\",\"type\":\"uint256\"},{\"name\":\"Universa_Hash\",\"type\":\"uint256\"},{\"name\":\"Car_ID\",\"type\":\"address\"},{\"name\":\"Pad_Owner_Departure_ID\",\"type\":\"address\"},{\"name\":\"Pad_Owner_Arrival_ID\",\"type\":\"address\"},{\"name\":\"Charging_Owner_ID\",\"type\":\"address\"},{\"name\":\"Pilot_ID\",\"type\":\"address\"},{\"name\":\"ATM_ID\",\"type\":\"address\"},{\"name\":\"City_Management_ID\",\"type\":\"address\"},{\"name\":\"Insurance_ID\",\"type\":\"address\"},{\"name\":\"Catering_ID\",\"type\":\"address\"},{\"name\":\"App_ID\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Flight_ID\",\"type\":\"uint256\"},{\"name\":\"_Car_Fee\",\"type\":\"uint256\"},{\"name\":\"_Pad_Owner_Departure_Fee\",\"type\":\"uint256\"},{\"name\":\"_Pad_Owner_Arrival_Fee\",\"type\":\"uint256\"},{\"name\":\"_Charging_Owner_Fee\",\"type\":\"uint256\"},{\"name\":\"_Pilot_Fee\",\"type\":\"uint256\"},{\"name\":\"_ATM_Fee\",\"type\":\"uint256\"},{\"name\":\"_City_Management_Fee\",\"type\":\"uint256\"},{\"name\":\"_Insurance_Fee\",\"type\":\"uint256\"},{\"name\":\"_Catering_Fee\",\"type\":\"uint256\"},{\"name\":\"_App_Fee\",\"type\":\"uint256\"}],\"name\":\"Set_Flight_Fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"flightFees\",\"outputs\":[{\"name\":\"type_of_pay\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"McFLYtokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Flight_ID\",\"type\":\"uint256\"},{\"name\":\"_Flight_start_time\",\"type\":\"uint256\"},{\"name\":\"_McFLY_tokens_reserved\",\"type\":\"uint256\"},{\"name\":\"_Car_ID\",\"type\":\"address\"},{\"name\":\"_Pad_Owner_Departure_ID\",\"type\":\"address\"},{\"name\":\"_Pad_Owner_Arrival_ID\",\"type\":\"address\"},{\"name\":\"_Charging_Owner_ID\",\"type\":\"address\"},{\"name\":\"_Pilot_ID\",\"type\":\"address\"},{\"name\":\"_ATM_ID\",\"type\":\"address\"},{\"name\":\"_City_Management_ID\",\"type\":\"address\"},{\"name\":\"_Insurance_ID\",\"type\":\"address\"},{\"name\":\"_Catering_ID\",\"type\":\"address\"},{\"name\":\"_App_ID\",\"type\":\"address\"}],\"name\":\"Start_Flight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Flight_ID\",\"type\":\"uint256\"},{\"name\":\"_Flight_end_time\",\"type\":\"uint256\"},{\"name\":\"_Universa_Hash\",\"type\":\"uint256\"},{\"name\":\"_totalMins\",\"type\":\"uint256\"}],\"name\":\"Finish_Flight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"F_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_st\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"FlightStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"F_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_end\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"uHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_mins\",\"type\":\"uint256\"}],\"name\":\"FlightEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"McFlight","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6cea796f7ae00b0ef8e3eea45e7c1af8d124d0cbcab416749d41c463b061bc7c"}]}