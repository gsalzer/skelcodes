{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Button {\r\n  event Pressed(address indexed presser, uint256 endBlock);\r\n  event Winner(address winner, uint256 winnings);\r\n  event Donation(address donator, uint256 amount);\r\n\r\n  address public factory = msg.sender;\r\n\r\n  uint64 public countdown;\r\n  uint64 public countdownDecrement;\r\n  uint64 public cooloffIncrement;\r\n  uint64 public pressFee;\r\n  uint64 public signupFee; // basis points * contract value\r\n\r\n  address public lastPresser;\r\n  uint64 public endBlock;\r\n\r\n  struct Presser {\r\n    uint64 numPresses;\r\n    uint64 cooloffEnd;\r\n  }\r\n\r\n  mapping (address => Presser) public pressers;\r\n\r\n  // Signup fee collection.\r\n  address public owner;\r\n  uint256 public rake;\r\n\r\n  constructor (\r\n    uint64 _countdown, \r\n    uint64 _countdownDecrement, \r\n    uint64 _cooloffIncrement, \r\n    uint64 _pressFee, \r\n    uint64 _signupFee, \r\n    address _sender\r\n  ) public payable {\r\n    countdown = _countdown;\r\n    countdownDecrement = _countdownDecrement;\r\n    cooloffIncrement = _cooloffIncrement;\r\n    pressFee = _pressFee;\r\n    signupFee = _signupFee;\r\n    lastPresser = _sender;\r\n\r\n    owner = _sender;\r\n    endBlock = uint64(block.number + countdown);\r\n  }\r\n\r\n  function getInfo() public view returns(\r\n    uint64, // Countdown\r\n    uint64, // CountdownDecrement\r\n    uint64, // CooloffIncrement\r\n    uint64, // PressFee\r\n    uint64, // SignupFee\r\n    address,// LastPresser\r\n    uint64, // EndBlock\r\n    uint64, // NumPresses\r\n    uint64, // CooloffEnd\r\n    uint256 // Pot\r\n  ) {\r\n    Presser p = pressers[msg.sender];\r\n    return (\r\n      countdown, \r\n      countdownDecrement, \r\n      cooloffIncrement, \r\n      pressFee, \r\n      signupFee, \r\n      lastPresser, \r\n      endBlock, \r\n      p.numPresses,\r\n      p.cooloffEnd,\r\n      address(this).balance-rake\r\n    );\r\n  }\r\n\r\n  function press() public payable {\r\n    require(block.number <= endBlock);\r\n\r\n    Presser storage p = pressers[msg.sender];\r\n    require(p.cooloffEnd < block.number);\r\n\r\n    uint256 change = msg.value-pressFee;\r\n    if (p.numPresses == 0) {\r\n      // balance - value will never be negative.\r\n      uint128 npf = _newPresserFee(address(this).balance - rake - msg.value);\r\n      change -= npf;\r\n      rake += npf;\r\n    }\r\n    // Breaks when pressFee+newPresserFee > 2^256\r\n    require(change <= msg.value);\r\n\r\n    lastPresser = msg.sender;\r\n    uint64 finalCountdown = countdown - (p.numPresses*countdownDecrement);\r\n    if (finalCountdown < 10 || finalCountdown > countdown) {\r\n      finalCountdown = 10;\r\n    }\r\n    endBlock = uint64(block.number + finalCountdown);\r\n\r\n    p.numPresses++;\r\n    p.cooloffEnd = uint64(block.number + (p.numPresses*cooloffIncrement));\r\n\r\n    if (change > 0) {\r\n      // Re-entrancy protected by p.cooloffEnd guard.\r\n      msg.sender.transfer(change);\r\n    }\r\n\r\n    emit Pressed(msg.sender, endBlock);\r\n  }\r\n\r\n  function close() public {\r\n    require(block.number > endBlock);\r\n\r\n    ButtonFactory f = ButtonFactory(factory);\r\n\r\n    if (!owner.send(3*rake/4)){\r\n      // Owner can't accept their portion of the rake, so send it to the factory.\r\n      f.announceWinner.value(rake)(lastPresser, address(this).balance);\r\n    } else {\r\n      f.announceWinner.value(rake/4)(lastPresser, address(this).balance);\r\n    }\r\n\r\n    emit Winner(lastPresser, address(this).balance);\r\n    selfdestruct(lastPresser);\r\n  }\r\n\r\n  // Breaks when balance = 10^20 ether.\r\n  function newPresserFee() public view returns (uint128) {\r\n    return _newPresserFee(address(this).balance-rake);\r\n  }\r\n\r\n  // Caller must assure that _balance < max_uint128.\r\n  function _newPresserFee(uint256 _balance) private view returns (uint128) {\r\n    return uint128((_balance * signupFee) / 10000);\r\n  }\r\n\r\n  // Up the stakes...\r\n  function() payable public {\r\n    emit Donation(msg.sender, msg.value);\r\n  }\r\n}\r\n\r\n// Hey, my name is Joe...\r\ncontract ButtonFactory {\r\n  event NewButton(address indexed buttonAddr, address indexed creator, uint64 countdown, uint64 countdownDec, uint64 cooloffInc, uint64 pressFee, uint64 signupFee);\r\n  event ButtonWinner(address indexed buttonAddr, address indexed winner, uint256 pot);\r\n\r\n  address public owner = msg.sender;\r\n  uint256 public creationFee;\r\n\r\n  mapping (address => bool) buttons;\r\n\r\n  function setCreationFee(uint256 _fee) public {\r\n    require(msg.sender == owner);\r\n    creationFee = _fee;\r\n  }\r\n\r\n  function createButton(\r\n    uint64 _countdown, \r\n    uint64 _countdownDecrement, \r\n    uint64 _cooloffIncrement, \r\n    uint64 _pressFee, \r\n    uint64 _signupFee\r\n  ) public payable returns (address) {\r\n    uint256 cf = ((_countdown / 1441) + 1) * creationFee;\r\n    require(msg.value >= cf);\r\n    address newButton = new Button(_countdown, _countdownDecrement, _cooloffIncrement, _pressFee, _signupFee, msg.sender);\r\n    buttons[newButton] = true;\r\n\r\n    emit NewButton(newButton, msg.sender, _countdown, _countdownDecrement, _cooloffIncrement, _pressFee, _signupFee);\r\n    return newButton;\r\n  }\r\n\r\n  function announceWinner(address _winner, uint256 _pot) public payable {\r\n    require(buttons[msg.sender]);\r\n    delete buttons[msg.sender];\r\n    emit ButtonWinner(msg.sender, _winner, _pot);\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(msg.sender == owner);\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_pot\",\"type\":\"uint256\"}],\"name\":\"announceWinner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countdown\",\"type\":\"uint64\"},{\"name\":\"_countdownDecrement\",\"type\":\"uint64\"},{\"name\":\"_cooloffIncrement\",\"type\":\"uint64\"},{\"name\":\"_pressFee\",\"type\":\"uint64\"},{\"name\":\"_signupFee\",\"type\":\"uint64\"}],\"name\":\"createButton\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buttonAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"countdown\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"countdownDec\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"cooloffInc\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"pressFee\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"signupFee\",\"type\":\"uint64\"}],\"name\":\"NewButton\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buttonAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"ButtonWinner\",\"type\":\"event\"}]","ContractName":"ButtonFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d3121f54fff203606f60590dcc3eaef3a808f0f9d6a72bbc9bf1b6490ff070d"}]}