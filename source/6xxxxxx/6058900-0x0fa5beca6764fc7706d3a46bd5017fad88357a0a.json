{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/// @title A contract for enforcing a treasure hunt\r\n/// @author John Fitzpatrick\r\n/// @author Sam Pullman\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract TreasureHunt is Ownable {\r\n    \r\n    /// Cost of verifying a single location\r\n    uint public cost;\r\n\r\n    /// Balance of the treausure hunt reward pool\r\n    uint public pot;\r\n\r\n    /// @notice Balance of administrator's fee\r\n    uint public ownersBalance;\r\n\r\n    /// Marks the time of victory\r\n    uint public timeOfWin;\r\n\r\n    /// Address of the winner\r\n    address public winner;\r\n\r\n    /// True during the grace period (when the winner can collect the pot)\r\n    bool public grace;\r\n\r\n    /// List of unique location keys\r\n    uint[] public locations;\r\n\r\n    /// Container for submitted location info\r\n    struct KeyLog {\r\n        /// Location key XOR'd with a user password\r\n        uint encryptKey;\r\n        /// Block number of submission\r\n        uint block;\r\n    }\r\n\r\n    /// Record of each hunter's progress\r\n    mapping(address => mapping(uint => KeyLog)) public hunters;\r\n    \r\n    /// @notice Triggered when a hunter has won and the hunt is over\r\n    /// @param winner The address of the victor\r\n    event WonEvent(address winner);\r\n\r\n    /// @notice Number of locations in the hunt\r\n    /// @dev Useful for testing, since public arrays don't expose length\r\n    /// @return length of locations array\r\n    function locationsLength() public view returns (uint) {\r\n        return locations.length;\r\n    }\r\n\r\n    /// @notice Admin function for updating all locations\r\n    /// @param _locations Array of location keys\r\n    function setAllLocations(uint[] _locations) onlyOwner public {\r\n        locations = _locations;\r\n    }\r\n\r\n    /// @notice Admin function to update the location at `index`\r\n    /// @dev Throws if index is >= locations.length\r\n    /// @param index The index of the location to update\r\n    /// @param _location The new location\r\n    function setLocation(uint index, uint _location) onlyOwner public {\r\n        require(index < locations.length);\r\n        locations[index] = _location;\r\n    }\r\n\r\n    /// @notice Admin function to add a location\r\n    /// @param _location The new location\r\n    function addLocation(uint _location) onlyOwner public {\r\n        locations.push(_location);\r\n    }\r\n\r\n    /// @notice Admin function to set the price of submitting a location\r\n    /// @param _cost The new cost\r\n    function setCost(uint _cost) onlyOwner public {\r\n        cost = _cost;\r\n    }\r\n\r\n    /// @notice Submit a location key XOR'd with a password for later verification\r\n    /// @notice The message value must be greater than `cost`\r\n    /// @param encryptKey A location key encrypted with a user password\r\n    /// @param locationNumber The index of the location\r\n    function submitLocation(uint encryptKey, uint8 locationNumber) public payable {\r\n\r\n        require(encryptKey != 0);\r\n        require(locationNumber < locations.length);\r\n\r\n        if (!grace) {\r\n            require(msg.value >= cost);\r\n            uint contribution = cost - cost / 10; // avoid integer rounding issues\r\n            ownersBalance += cost - contribution;\r\n            pot += contribution;\r\n        }\r\n        hunters[msg.sender][locationNumber] = KeyLog(encryptKey, block.number);\r\n    }\r\n\r\n    /// @notice Sets the message sender as the winner if they have completed the hunt\r\n    /// @dev Location order should be enforced offline, checks here are to ward against cheaters\r\n    /// @param decryptKeys Array of user passwords corresponding to original submissions \r\n    function checkWin(uint[] decryptKeys) public {\r\n        require(!grace);\r\n        require(decryptKeys.length == locations.length);\r\n\r\n        uint lastBlock = 0;\r\n        bool won = true;\r\n        for (uint i; i < locations.length; i++) {\r\n            \r\n            // Make sure locations were visited in order\r\n            require(hunters[msg.sender][i].block > lastBlock);\r\n            lastBlock = hunters[msg.sender][i].block;\r\n\r\n            // Skip removed locations\r\n            if (locations[i] != 0) {\r\n                uint storedVal = uint(keccak256(abi.encodePacked(hunters[msg.sender][i].encryptKey ^ decryptKeys[i])));\r\n                \r\n                won = won && (locations[i] == storedVal);\r\n            }\r\n        }\r\n\r\n        require(won);\r\n\r\n        if (won) {\r\n            timeOfWin = now;\r\n            winner = msg.sender;\r\n            grace = true;\r\n            emit WonEvent(winner);\r\n        }\r\n    }\r\n\r\n    /// @notice Donate the message value to the pot\r\n    function increasePot() public payable {\r\n        pot += msg.value;\r\n    }\r\n\r\n    /// @notice Funds sent to the contract are added to the pot\r\n    function() public payable {\r\n        increasePot();\r\n    }\r\n    \r\n    /// @notice Reset the hunt if the grace period is over\r\n    function resetWinner() public {\r\n        require(grace);\r\n        require(now > timeOfWin + 30 days);\r\n        grace = false;\r\n        winner = 0;\r\n        ownersBalance = 0;\r\n        pot = address(this).balance;\r\n    }\r\n\r\n    /// @notice Withdrawal function for winner and admin\r\n    function withdraw() public returns (bool) {\r\n        uint amount;\r\n        if (msg.sender == owner) {\r\n            amount = ownersBalance;\r\n            ownersBalance = 0;\r\n        } else if (msg.sender == winner) {\r\n            amount = pot;\r\n            pot = 0;\r\n        }\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /// @notice Admin failsafe for destroying the contract\r\n    function kill() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"encryptKey\",\"type\":\"uint256\"},{\"name\":\"locationNumber\",\"type\":\"uint8\"}],\"name\":\"submitLocation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grace\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locations\",\"type\":\"uint256[]\"}],\"name\":\"setAllLocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locationsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_location\",\"type\":\"uint256\"}],\"name\":\"addLocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hunters\",\"outputs\":[{\"name\":\"encryptKey\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"_location\",\"type\":\"uint256\"}],\"name\":\"setLocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"decryptKeys\",\"type\":\"uint256[]\"}],\"name\":\"checkWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increasePot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WonEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TreasureHunt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6823edc6e90b19f94af28341a7c6f2f7d28759a394ffeb8da51c04c72242cca9"}]}