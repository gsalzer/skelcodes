{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n}\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 {\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public multisig;\r\n\r\n    ERC20 public token;\r\n\r\n    uint rate;\r\n    uint priceETH;\r\n\r\n    mapping (address => bool) whitelist;\r\n\r\n    event Purchased(address indexed _addr, uint _amount);\r\n\r\n    function getRateCentUsd() public view returns(uint) {\r\n        if (block.timestamp >= 1539550800 && block.timestamp < 1541019600) {\r\n            return(70);\r\n        }\r\n        if (block.timestamp >= 1541019600 && block.timestamp < 1545685200) {\r\n            return(100);\r\n        }\r\n    }\r\n\r\n    function setPriceETH(uint _newPriceETH) external onlyOwner {\r\n        setRate(_newPriceETH);\r\n    }\r\n\r\n    function setRate(uint _priceETH) internal {\r\n        require(_priceETH != 0);\r\n        priceETH = _priceETH;\r\n        rate = getRateCentUsd().mul(1 ether).div(100).div(_priceETH);\r\n    }\r\n\r\n    function addToWhitelist(address _newMember) external onlyOwner {\r\n        require(_newMember != address(0));\r\n        whitelist[_newMember] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _member) external onlyOwner {\r\n        require(_member != address(0));\r\n        whitelist[_member] = false;\r\n    }\r\n\r\n    function addListToWhitelist(address[] _addresses) external onlyOwner {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeListFromWhitelist(address[] _addresses) external onlyOwner {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function getPriceETH() public view returns(uint) {\r\n        return priceETH;\r\n    }\r\n\r\n    constructor(address _DNT, address _multisig, uint _priceETH) public {\r\n        require(_DNT != 0 && _priceETH != 0);\r\n        token = ERC20(_DNT);\r\n        multisig = _multisig;\r\n        setRate(_priceETH);\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(whitelist[msg.sender]);\r\n        require(block.timestamp >= 1539550800 && block.timestamp < 1545685200);\r\n        require(msg.value >= 1 ether * 100 / priceETH);\r\n\r\n        uint256 amount = msg.value.div(rate);\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (amount > balance) {\r\n            uint256 cash = balance.mul(rate);\r\n            uint256 cashBack = msg.value.sub(cash);\r\n            multisig.transfer(cash);\r\n            msg.sender.transfer(cashBack);\r\n            token.transfer(msg.sender, balance);\r\n            emit Purchased(msg.sender, balance);\r\n            return;\r\n        }\r\n\r\n        multisig.transfer(msg.value);\r\n        token.transfer(msg.sender, amount);\r\n        emit Purchased(msg.sender, amount);\r\n    }\r\n\r\n    function finalizeICO(address _owner) external onlyOwner {\r\n        require(_owner != address(0));\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(_owner, balance);\r\n    }\r\n\r\n    function getMyBalanceDNT() external view returns(uint256) {\r\n        return token.balanceOf(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPriceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addListToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalanceDNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeListFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateCentUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"finalizeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_DNT\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_priceETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002c57090c2f563ddc1341bdc17040c158cfa6fb55000000000000000000000000507c5d74a09a4e419cc020d5dc7cf0680354ba7900000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://e01512011ec2dc7402f3553c699676c570dfbf9d34a5049595cabd6c1888d33a"}]}