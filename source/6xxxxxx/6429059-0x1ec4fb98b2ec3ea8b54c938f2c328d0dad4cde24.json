{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title Role based access control mixin for MUST Platform\r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\n/// @dev Ignore DRY approach to achieve readability\r\ncontract RBACMixin {\r\n  /// @notice Constant string message to throw on lack of access\r\n  string constant FORBIDDEN = \"Haven't enough right to access\";\r\n  /// @notice Public map of owners\r\n  mapping (address => bool) public owners;\r\n  /// @notice Public map of minters\r\n  mapping (address => bool) public minters;\r\n\r\n  /// @notice The event indicates the addition of a new owner\r\n  /// @param who is address of added owner\r\n  event AddOwner(address indexed who);\r\n  /// @notice The event indicates the deletion of an owner\r\n  /// @param who is address of deleted owner\r\n  event DeleteOwner(address indexed who);\r\n\r\n  /// @notice The event indicates the addition of a new minter\r\n  /// @param who is address of added minter\r\n  event AddMinter(address indexed who);\r\n  /// @notice The event indicates the deletion of a minter\r\n  /// @param who is address of deleted minter\r\n  event DeleteMinter(address indexed who);\r\n\r\n  constructor () public {\r\n    _setOwner(msg.sender, true);\r\n  }\r\n\r\n  /// @notice The functional modifier rejects the interaction of senders who are not owners\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Look up for the owner role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of owner role\r\n  function isOwner(address _who) public view returns (bool) {\r\n    return owners[_who];\r\n  }\r\n\r\n  /// @notice Look up for the minter role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of minter role\r\n  function isMinter(address _who) public view returns (bool) {\r\n    return minters[_who];\r\n  }\r\n\r\n  /// @notice Adds the owner role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function addOwner(address _who) public onlyOwner returns (bool) {\r\n    _setOwner(_who, true);\r\n  }\r\n\r\n  /// @notice Deletes the owner role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to delete role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function deleteOwner(address _who) public onlyOwner returns (bool) {\r\n    _setOwner(_who, false);\r\n  }\r\n\r\n  /// @notice Adds the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function addMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, true);\r\n  }\r\n\r\n  /// @notice Deletes the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to delete role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, false);\r\n  }\r\n\r\n  /// @notice Changes the owner role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setOwner(address _who, bool _flag) private returns (bool) {\r\n    require(owners[_who] != _flag);\r\n    owners[_who] = _flag;\r\n    if (_flag) {\r\n      emit AddOwner(_who);\r\n    } else {\r\n      emit DeleteOwner(_who);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /// @notice Changes the minter role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setMinter(address _who, bool _flag) private returns (bool) {\r\n    require(minters[_who] != _flag);\r\n    minters[_who] = _flag;\r\n    if (_flag) {\r\n      emit AddMinter(_who);\r\n    } else {\r\n      emit DeleteMinter(_who);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\ninterface IMintableToken {\r\n  function mint(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\n\r\n/// @title Very simplified implementation of Token Bucket Algorithm to secure token minting\r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\n/// @notice Works with tokens implemented Mintable interface\r\n/// @dev Transfer ownership/minting role to contract and execute mint over TokenBucket proxy to secure\r\ncontract TokenBucket is RBACMixin, IMintableToken {\r\n  using SafeMath for uint;\r\n  \r\n  /// @notice Limit maximum amount of available for minting tokens when bucket is full\r\n  /// @dev Should be enough to mint tokens with proper speed but less enough to prevent overminting in case of losing pkey\r\n  uint256 public size;\r\n  /// @notice Bucket refill rate\r\n  /// @dev Tokens per second (based on block.timestamp). Amount without decimals (in smallest part of token)\r\n  uint256 public rate;\r\n  /// @notice Stored time of latest minting\r\n  /// @dev Each successful call of minting function will update field with call timestamp\r\n  uint256 public lastMintTime;\r\n  /// @notice Left tokens in bucket on time of latest minting\r\n  uint256 public leftOnLastMint;\r\n\r\n  /// @notice Reference of Mintable token\r\n  /// @dev Setup in contructor phase and never change in future\r\n  IMintableToken public token;\r\n\r\n  /// @notice Token Bucket leak event fires on each minting\r\n  /// @param to is address of target tokens holder\r\n  /// @param left is amount of tokens available in bucket after leak\r\n  event Leak(address indexed to, uint256 left);\r\n\r\n  /// @param _token is address of Mintable token\r\n  /// @param _size initial size of token bucket\r\n  /// @param _rate initial refill rate (tokens/sec)\r\n  constructor (address _token, uint256 _size, uint256 _rate) public {\r\n    token = IMintableToken(_token);\r\n    size = _size;\r\n    rate = _rate;\r\n    leftOnLastMint = _size;\r\n  }\r\n\r\n  /// @notice Change size of bucket\r\n  /// @dev Require owner role to call\r\n  /// @param _size is new size of bucket\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function setSize(uint256 _size) public onlyOwner returns (bool) {\r\n    size = _size;\r\n    return true;\r\n  }\r\n\r\n  /// @notice Change refill rate of bucket\r\n  /// @dev Require owner role to call\r\n  /// @param _rate is new refill rate of bucket\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function setRate(uint256 _rate) public onlyOwner returns (bool) {\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n\r\n  /// @notice Change size and refill rate of bucket\r\n  /// @dev Require owner role to call\r\n  /// @param _size is new size of bucket\r\n  /// @param _rate is new refill rate of bucket\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function setSizeAndRate(uint256 _size, uint256 _rate) public onlyOwner returns (bool) {\r\n    return setSize(_size) && setRate(_rate);\r\n  }\r\n\r\n  /// @notice Function to mint tokens\r\n  /// @param _to The address that will receive the minted tokens.\r\n  /// @param _amount The amount of tokens to mint.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function mint(address _to, uint256 _amount) public onlyMinter returns (bool) {\r\n    uint256 available = availableTokens();\r\n    require(_amount <= available);\r\n    leftOnLastMint = available.sub(_amount);\r\n    lastMintTime = now; // solium-disable-line security/no-block-members\r\n    require(token.mint(_to, _amount));\r\n    return true;\r\n  }\r\n\r\n  /// @notice Function to calculate and get available in bucket tokens\r\n  /// @return An amount of available tokens in bucket\r\n  function availableTokens() public view returns (uint) {\r\n     // solium-disable-next-line security/no-block-members\r\n    uint256 timeAfterMint = now.sub(lastMintTime);\r\n    uint256 refillAmount = rate.mul(timeAfterMint).add(leftOnLastMint);\r\n    return size < refillAmount ? size : refillAmount;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setSize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setSizeAndRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftOnLastMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMintTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"deleteMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Leak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DeleteOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AddMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DeleteMinter\",\"type\":\"event\"}]","ContractName":"TokenBucket","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002928fd99b11a412a6b6724ed391943bae3fe1b2b00000000000000000000000000000000000000000000000000001b48eb57e000000000000000000000000000000000000000000000000000000000746a528800","Library":"","SwarmSource":"bzzr://adaf5d7207c5cdae67be612bc2a29d350ce7e4efb9575dbbc610d2cd5e75766d"}]}