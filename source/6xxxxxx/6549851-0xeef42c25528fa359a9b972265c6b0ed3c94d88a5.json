{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* ---How to use:\r\n*  1. Send from ETH wallet to the smart contract address\r\n*     any amount ETH.\r\n*  2. Claim your profit by sending 0 ether transaction (1 time per hour)\r\n*  3. If you earn more than 200%, you can withdraw only one finish time\r\n*/\r\ncontract SmartX2 {\r\n\r\n    using SafeMath for uint;\r\n    mapping(address => uint) public balance;\r\n    mapping(address => uint) public time;\r\n    mapping(address => uint) public percentWithdraw;\r\n    mapping(address => uint) public allPercentWithdraw;\r\n    uint public stepTime = 1 hours;\r\n    uint public countOfInvestors = 0;\r\n    address public ownerAddress = 0x3970a0DEd4b3AD777a8Fd57193e6E806103540cd;\r\n    uint projectPercent = 10;\r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n\r\n    modifier userExist() {\r\n        require(balance[msg.sender] > 0, \"Address not found\");\r\n        _;\r\n    }\r\n\r\n    modifier checkTime() {\r\n        require(now >= time[msg.sender].add(stepTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    function collectPercent() userExist checkTime internal {\r\n        if (balance[msg.sender].mul(2) <= allPercentWithdraw[msg.sender]) {\r\n            balance[msg.sender] = 0;\r\n            time[msg.sender] = 0;\r\n            percentWithdraw[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\r\n            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\r\n            msg.sender.transfer(payout);\r\n            emit Withdraw(msg.sender, payout);\r\n        }\r\n    }\r\n\r\n    function percentRate() public view returns(uint) {\r\n        uint contractBalance = address(this).balance;\r\n\r\n        if (contractBalance < 1000 ether) {\r\n            return (60);\r\n        }\r\n        if (contractBalance >= 1000 ether && contractBalance < 2500 ether) {\r\n            return (72);\r\n        }\r\n        if (contractBalance >= 2500 ether && contractBalance < 5000 ether) {\r\n            return (84);\r\n        }\r\n        if (contractBalance >= 5000 ether) {\r\n            return (90);\r\n        }\r\n    }\r\n\r\n    function payoutAmount() public view returns(uint256) {\r\n        uint256 percent = percentRate();\r\n        uint256 different = now.sub(time[msg.sender]).div(stepTime);\r\n        uint256 rate = balance[msg.sender].mul(percent).div(1000);\r\n        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\r\n\r\n        return withdrawalAmount;\r\n    }\r\n\r\n    function deposit() private {\r\n        if (msg.value > 0) {\r\n            if (balance[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            if (balance[msg.sender] > 0 && now > time[msg.sender].add(stepTime)) {\r\n                collectPercent();\r\n                percentWithdraw[msg.sender] = 0;\r\n            }\r\n            balance[msg.sender] = balance[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n\r\n            ownerAddress.transfer(msg.value.mul(projectPercent).div(100));\r\n            emit Invest(msg.sender, msg.value);\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allPercentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"SmartX2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e6454533e68a02bbe78f55ff3c6b7f10adb9754be6c0f9ed9df412ed97f41eb0"}]}