{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract TokenInterface {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint256);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n}\r\n\r\ncontract AltTokenInterface {\r\n    function name() public view returns (bytes32);\r\n    function symbol() public view returns (bytes32);\r\n    function decimals() public view returns (uint256);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n}\r\n\r\ncontract Utils {\r\n    function contractuallyOf(address _address) public view returns(bool) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_address)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function tokenOf(address _contract, address _owner) public view returns(\r\n        bool contractually,\r\n        bool tokenized,\r\n        string name,\r\n        string symbol,\r\n        uint256 decimals,\r\n        uint256 totalSupply,\r\n        uint256 balance\r\n    ) {\r\n        contractually = contractuallyOf(_contract);\r\n        if (contractually) {\r\n            TokenInterface token = TokenInterface(_contract);\r\n            name = token.name();\r\n            symbol = token.symbol();\r\n            decimals = token.decimals();\r\n            totalSupply = token.totalSupply();\r\n            balance = token.balanceOf(_owner);\r\n            \r\n            if (bytes(name).length > 0 && bytes(symbol).length > 0) {\r\n                tokenized = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function altTokenOf(address _contract, address _owner) public view returns(\r\n        bool contractually,\r\n        bool tokenized,\r\n        string name,\r\n        string symbol,\r\n        uint256 decimals,\r\n        uint256 totalSupply,\r\n        uint256 balance\r\n    ) {\r\n        contractually = contractuallyOf(_contract);\r\n        if (contractually) {\r\n            AltTokenInterface token = AltTokenInterface(_contract);\r\n            decimals = token.decimals();\r\n            totalSupply = token.totalSupply();\r\n            balance = token.balanceOf(_owner);\r\n\r\n            bytes32 _name = token.name();\r\n            bytes32 _symbol = token.symbol();\r\n\r\n            if (_name.length > 0 && _symbol.length > 0) {\r\n                tokenized = true;\r\n            }\r\n            \r\n            name = bytes32ToString(_name);\r\n            symbol = bytes32ToString(_symbol);\r\n        }\r\n    }\r\n    \r\n    function balanceOf(address[] _contracts, address _owner) public view returns(uint256[]) {\r\n        uint8 count = uint8(_contracts.length);\r\n        if (count > 0) {\r\n            uint256[] memory balances = new uint256[](count);\r\n            for (uint8 i = 0; i < count; i++) {\r\n                TokenInterface token = TokenInterface(_contracts[i]);\r\n                balances[i] = token.balanceOf(_owner);\r\n            }\r\n            return balances;\r\n        }\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function recover(bytes32 _hash, bytes _sig) public pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (_sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            v := byte(0, mload(add(_sig, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            // solium-disable-next-line arg-overflow\r\n            return ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 _input) internal constant returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(_input) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contracts\",\"type\":\"address[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"altTokenOf\",\"outputs\":[{\"name\":\"contractually\",\"type\":\"bool\"},{\"name\":\"tokenized\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"contractually\",\"type\":\"bool\"},{\"name\":\"tokenized\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contractuallyOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Utils","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f4202e026b9b07775940e42d44552b3dc488bd2211a0360ec5d8647e72323bc3"}]}