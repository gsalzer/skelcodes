{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// File: contracts/ERC677Receiver.sol\r\n\r\ncontract ERC677Receiver {\r\n  function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC677.sol\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    function transferAndCall(address, uint, bytes) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/IBurnableMintableERC677Token.sol\r\n\r\ncontract IBurnableMintableERC677Token is ERC677 {\r\n    function mint(address, uint256) public returns (bool);\r\n    function burn(uint256 _value) public;\r\n    function claimTokens(address _token, address _to) public;\r\n}\r\n\r\n// File: contracts/IBridgeValidators.sol\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function owner() public view returns(address);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\nlibrary Message {\r\n    // function uintToString(uint256 inputValue) internal pure returns (string) {\r\n    //     // figure out the length of the resulting string\r\n    //     uint256 length = 0;\r\n    //     uint256 currentValue = inputValue;\r\n    //     do {\r\n    //         length++;\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     // allocate enough memory\r\n    //     bytes memory result = new bytes(length);\r\n    //     // construct the string backwards\r\n    //     uint256 i = length - 1;\r\n    //     currentValue = inputValue;\r\n    //     do {\r\n    //         result[i--] = byte(48 + currentValue % 10);\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     return string(result);\r\n    // }\r\n\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 116: 32 bytes :: uint256 - home gas price\r\n\r\n    // bytes 1 to 32 are 0 because message length is stored as little endian.\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 zero bytes followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns(address recipient, uint256 amount, bytes32 txHash)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns(bool) {\r\n        return _msg.length == 116;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        return ecrecover(hashMessage(message), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        // message is always 116 length\r\n        string memory msgLength = \"116\";\r\n        return keccak256(prefix, msgLength, message);\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IBridgeValidators _validatorContract) internal view {\r\n        require(isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/U_BasicBridge.sol\r\n\r\ncontract BasicBridge is EternalStorage {\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n    function validatorContract() public view returns(IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[keccak256(\"validatorContract\")]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(validatorContract().owner() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function setGasPrice(uint256 _gasPrice) public onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[keccak256(\"gasPrice\")] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"gasPrice\")];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) public onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[keccak256(\"requiredBlockConfirmations\")] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"requiredBlockConfirmations\")];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/U_ForeignBridge.sol\r\n\r\ncontract ForeignBridge is ERC677Receiver, BasicBridge {\r\n    using SafeMath for uint256;\r\n    /// triggered when relay of deposit from HomeBridge is complete\r\n    event Deposit(address recipient, uint value, bytes32 transactionHash);\r\n\r\n    /// Event created on money withdraw.\r\n    event Withdraw(address recipient, uint256 value, uint256 homeGasPrice);\r\n\r\n    /// Collected signatures which should be relayed to home chain.\r\n    event CollectedSignatures(address authorityResponsibleForRelay, bytes32 messageHash, uint256 NumberOfCollectedSignatures);\r\n\r\n    event GasConsumptionLimitsUpdated(uint256 gasLimitDepositRelay, uint256 gasLimitWithdrawConfirm);\r\n\r\n    event SignedForDeposit(address indexed signer, bytes32 transactionHash);\r\n    event SignedForWithdraw(address indexed signer, bytes32 messageHash);\r\n    event DailyLimit(uint256 newLimit);\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        address _erc677token,\r\n        uint256 _foreignDailyLimit,\r\n        uint256 _maxPerTx,\r\n        uint256 _minPerTx,\r\n        uint256 _foreignGasPrice,\r\n        uint256 _requiredBlockConfirmations\r\n    ) public returns(bool) {\r\n        require(!isInitialized());\r\n        require(_validatorContract != address(0));\r\n        require(_minPerTx > 0 && _maxPerTx > _minPerTx && _foreignDailyLimit > _maxPerTx);\r\n        require(_foreignGasPrice > 0);\r\n        addressStorage[keccak256(\"validatorContract\")] = _validatorContract;\r\n        setErc677token(_erc677token);\r\n        uintStorage[keccak256(\"foreignDailyLimit\")] = _foreignDailyLimit;\r\n        uintStorage[keccak256(\"deployedAtBlock\")] = block.number;\r\n        uintStorage[keccak256(\"maxPerTx\")] = _maxPerTx;\r\n        uintStorage[keccak256(\"minPerTx\")] = _minPerTx;\r\n        uintStorage[keccak256(\"gasPrice\")] = _foreignGasPrice;\r\n        uintStorage[keccak256(\"requiredBlockConfirmations\")] = _requiredBlockConfirmations;\r\n        setInitialize(true);\r\n        return isInitialized();\r\n    }\r\n\r\n    function onTokenTransfer(address _from, uint256 _value, bytes /*_data*/) external returns(bool) {\r\n        require(msg.sender == address(erc677token()));\r\n        require(withinLimit(_value));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_value));\r\n        erc677token().burn(_value);\r\n        emit Withdraw(_from, _value, gasPriceForCompensationAtHomeSide());\r\n        return true;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < foreignDailyLimit());\r\n        uintStorage[keccak256(\"maxPerTx\")] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx < foreignDailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[keccak256(\"minPerTx\")] = _minPerTx;\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) external onlyOwner {\r\n        require(_to != address(0));\r\n        if (_token == address(0)) {\r\n            _to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        require(token.transfer(_to, balance));\r\n    }\r\n\r\n    function claimTokensFromErc677(address _token, address _to) external onlyOwner {\r\n        erc677token().claimTokens(_token, _to);\r\n    }\r\n\r\n    function minPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"minPerTx\")];\r\n    }\r\n\r\n    function maxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"maxPerTx\")];\r\n    }\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(\"totalSpentPerDay\", _day)];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"deployedAtBlock\")];\r\n    }\r\n\r\n    function gasLimitDepositRelay() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"gasLimitDepositRelay\")];\r\n    }\r\n\r\n    function gasLimitWithdrawConfirm() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"gasLimitWithdrawConfirm\")];\r\n    }\r\n\r\n    function foreignDailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"foreignDailyLimit\")];\r\n    }\r\n\r\n    function erc677token() public view returns(IBurnableMintableERC677Token) {\r\n        return IBurnableMintableERC677Token(addressStorage[keccak256(\"erc677token\")]);\r\n    }\r\n\r\n    function setGasLimits(uint256 _gasLimitDepositRelay, uint256 _gasLimitWithdrawConfirm) external onlyOwner {\r\n        uintStorage[keccak256(\"gasLimitDepositRelay\")] = _gasLimitDepositRelay;\r\n        uintStorage[keccak256(\"gasLimitWithdrawConfirm\")] = _gasLimitWithdrawConfirm;\r\n        emit GasConsumptionLimitsUpdated(gasLimitDepositRelay(), gasLimitWithdrawConfirm());\r\n    }\r\n\r\n    function deposit(address recipient, uint256 value, bytes32 transactionHash) external onlyValidator {\r\n        bytes32 hashMsg = keccak256(recipient, value, transactionHash);\r\n        bytes32 hashSender = keccak256(msg.sender, hashMsg);\r\n        // Duplicated deposits\r\n        require(!depositsSigned(hashSender));\r\n        setDepositsSigned(hashSender, true);\r\n\r\n        uint256 signed = numDepositsSigned(hashMsg);\r\n        require(!isAlreadyProcessed(signed));\r\n        // the check above assumes that the case when the value could be overflew will not happen in the addition operation below\r\n        signed = signed + 1;\r\n\r\n        setNumDepositsSigned(hashMsg, signed);\r\n\r\n        emit SignedForDeposit(msg.sender, transactionHash);\r\n\r\n        if (signed >= validatorContract().requiredSignatures()) {\r\n            // If the bridge contract does not own enough tokens to transfer\r\n            // it will couse funds lock on the home side of the bridge\r\n            setNumDepositsSigned(hashMsg, markAsProcessed(signed));\r\n            erc677token().mint(recipient, value);\r\n            emit Deposit(recipient, value, transactionHash);\r\n        }\r\n    }\r\n\r\n    /// Should be used as sync tool\r\n    ///\r\n    /// Message is a message that should be relayed to main chain once authorities sign it.\r\n    ///\r\n    /// for withdraw message contains:\r\n    /// withdrawal recipient (bytes20)\r\n    /// withdrawal value (uint)\r\n    /// foreign transaction hash (bytes32) // to avoid transaction duplication\r\n    function submitSignature(bytes signature, bytes message) external onlyValidator {\r\n        // ensure that `signature` is really `message` signed by `msg.sender`\r\n        require(Message.isMessageValid(message));\r\n        require(msg.sender == Message.recoverAddressFromSignedMessage(signature, message));\r\n        bytes32 hashMsg = keccak256(message);\r\n        bytes32 hashSender = keccak256(msg.sender, hashMsg);\r\n\r\n        uint256 signed = numMessagesSigned(hashMsg);\r\n        require(!isAlreadyProcessed(signed));\r\n        // the check above assumes that the case when the value could be overflew will not happen in the addition operation below\r\n        signed = signed + 1;\r\n        if (signed > 1) {\r\n            // Duplicated signatures\r\n            require(!messagesSigned(hashSender));\r\n        } else {\r\n            setMessages(hashMsg, message);\r\n        }\r\n        setMessagesSigned(hashSender, true);\r\n\r\n        bytes32 signIdx = keccak256(hashMsg, (signed-1));\r\n        setSignatures(signIdx, signature);\r\n\r\n        setNumMessagesSigned(hashMsg, signed);\r\n\r\n        emit SignedForWithdraw(msg.sender, hashMsg);\r\n\r\n        uint256 reqSigs = validatorContract().requiredSignatures();\r\n        if (signed >= reqSigs) {\r\n            setNumMessagesSigned(hashMsg, markAsProcessed(signed));\r\n            emit CollectedSignatures(msg.sender, hashMsg, reqSigs);\r\n        }\r\n    }\r\n\r\n    function gasPriceForCompensationAtHomeSide() public pure returns(uint256) {\r\n        return 1000000000 wei;\r\n    }\r\n\r\n    function isAlreadyProcessed(uint256 _number) public pure returns(bool) {\r\n        return _number & 2**255 == 2**255;\r\n    }\r\n\r\n    function signature(bytes32 _hash, uint256 _index) public view returns (bytes) {\r\n        bytes32 signIdx = keccak256(_hash, _index);\r\n        return signatures(signIdx);\r\n    }\r\n\r\n    /// Get message\r\n    function message(bytes32 _hash) public view returns (bytes) {\r\n        return messages(_hash);\r\n    }\r\n\r\n    function getCurrentDay() public view returns(uint256) {\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setForeignDailyLimit(uint256 _foreignDailyLimit) public onlyOwner {\r\n        uintStorage[keccak256(\"foreignDailyLimit\")] = _foreignDailyLimit;\r\n        emit DailyLimit(_foreignDailyLimit);\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return foreignDailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(\"isInitialized\")];\r\n    }\r\n\r\n    function messages(bytes32 _hash) private view returns(bytes) {\r\n        return bytesStorage[keccak256(\"messages\", _hash)];\r\n    }\r\n\r\n    function setMessages(bytes32 _hash, bytes _message) private {\r\n        bytesStorage[keccak256(\"messages\", _hash)] = _message;\r\n    }\r\n\r\n    function signatures(bytes32 _hash) private view returns(bytes) {\r\n        return bytesStorage[keccak256(\"signatures\", _hash)];\r\n    }\r\n\r\n    function setSignatures(bytes32 _hash, bytes _signature) private {\r\n        bytesStorage[keccak256(\"signatures\", _hash)] = _signature;\r\n    }\r\n\r\n    function messagesSigned(bytes32 _message) public view returns(bool) {\r\n        return boolStorage[keccak256(\"messagesSigned\", _message)];\r\n    }\r\n\r\n    function depositsSigned(bytes32 _deposit) public view returns(bool) {\r\n        return boolStorage[keccak256(\"depositsSigned\", _deposit)];\r\n    }\r\n\r\n    function markAsProcessed(uint256 _v) private pure returns(uint256) {\r\n        return _v | 2 ** 255;\r\n    }\r\n\r\n    function numMessagesSigned(bytes32 _message) private view returns(uint256) {\r\n        return uintStorage[keccak256(\"numMessagesSigned\", _message)];\r\n    }\r\n\r\n    function numDepositsSigned(bytes32 _deposit) private view returns(uint256) {\r\n        return uintStorage[keccak256(\"numDepositsSigned\", _deposit)];\r\n    }\r\n\r\n    function setMessagesSigned(bytes32 _hash, bool _status) private {\r\n        boolStorage[keccak256(\"messagesSigned\", _hash)] = _status;\r\n    }\r\n\r\n    function setDepositsSigned(bytes32 _deposit, bool _status) private {\r\n        boolStorage[keccak256(\"depositsSigned\", _deposit)] = _status;\r\n    }\r\n\r\n    function setNumMessagesSigned(bytes32 _message, uint256 _number) private {\r\n        uintStorage[keccak256(\"numMessagesSigned\", _message)] = _number;\r\n    }\r\n\r\n    function setNumDepositsSigned(bytes32 _deposit, uint256 _number) private {\r\n        uintStorage[keccak256(\"numDepositsSigned\", _deposit)] = _number;\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) private {\r\n        uintStorage[keccak256(\"totalSpentPerDay\", _day)] = _value;\r\n    }\r\n\r\n    function setErc677token(address _token) private {\r\n        require(_token != address(0));\r\n        addressStorage[keccak256(\"erc677token\")] = _token;\r\n    }\r\n\r\n    function setInitialize(bool _status) private {\r\n        boolStorage[keccak256(\"isInitialized\")] = _status;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"signature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc677token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasLimitDepositRelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"submitSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"bytes32\"}],\"name\":\"depositsSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimitDepositRelay\",\"type\":\"uint256\"},{\"name\":\"_gasLimitWithdrawConfirm\",\"type\":\"uint256\"}],\"name\":\"setGasLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foreignDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"messagesSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokensFromErc677\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceForCompensationAtHomeSide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasLimitWithdrawConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignDailyLimit\",\"type\":\"uint256\"}],\"name\":\"setForeignDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_erc677token\",\"type\":\"address\"},{\"name\":\"_foreignDailyLimit\",\"type\":\"uint256\"},{\"name\":\"_maxPerTx\",\"type\":\"uint256\"},{\"name\":\"_minPerTx\",\"type\":\"uint256\"},{\"name\":\"_foreignGasPrice\",\"type\":\"uint256\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"isAlreadyProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"homeGasPrice\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityResponsibleForRelay\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"NumberOfCollectedSignatures\",\"type\":\"uint256\"}],\"name\":\"CollectedSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasLimitDepositRelay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasLimitWithdrawConfirm\",\"type\":\"uint256\"}],\"name\":\"GasConsumptionLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"SignedForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"SignedForWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"}]","ContractName":"ForeignBridge","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://611b18237ee195e79f4961583591199ed1e7272ea8365f3f9bcf47cb85d2a107"}]}