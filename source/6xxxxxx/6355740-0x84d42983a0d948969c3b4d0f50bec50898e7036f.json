{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n\r\nlibrary Percent {\r\n  // Solidity automatically throws when dividing by 0\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) return 0; // solium-disable-line lbrace\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n}\r\n\r\ncontract InvestorsStorage {\r\n  function investorFullInfo(address addr) public view returns(uint, uint, uint, uint);\r\n  function investorBaseInfo(address addr) public view returns(uint, uint, uint);\r\n  function investorShortInfo(address addr) public view returns(uint, uint);\r\n  function keyFromIndex(uint i) public view returns (address);\r\n  function size() public view returns (uint);\r\n  function iterStart() public pure returns (uint);\r\n}\r\n\r\ncontract Revolution {\r\n  function dividendsPercent() public view returns(uint numerator, uint denominator);\r\n  function latestPayout() public view returns(uint timestamp) ;\r\n}\r\n\r\ncontract RevolutionInfo {\r\n  using Percent for Percent.percent;\r\n  address private owner;\r\n  Revolution public revolution;\r\n  InvestorsStorage public investorsStorage;\r\n  Percent.percent public dividendsPercent;\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"access denied\");\r\n    _;\r\n  }\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  \r\n  function info() public view returns(uint totalInvl, uint debt, uint dailyWithdraw) {\r\n    uint i = investorsStorage.iterStart();\r\n    uint size = investorsStorage.size();\r\n    address addr;\r\n    uint inv;\r\n    uint time;\r\n    uint ref;\r\n    uint latestPayout = revolution.latestPayout();\r\n    \r\n    for (i; i < size; i++) {\r\n      addr = investorsStorage.keyFromIndex(i);\r\n      (inv, time, ref) = investorsStorage.investorBaseInfo(addr);\r\n      if (time == 0) {\r\n        time = latestPayout;\r\n      }\r\n      totalInvl += inv;\r\n      debt += ((now - time) / 24 hours) * dividendsPercent.mul(inv) + ref;\r\n    }\r\n    dailyWithdraw = dividendsPercent.mul(totalInvl);\r\n  }\r\n  \r\n  function setRevolution(address addr) public onlyOwner {\r\n    revolution = Revolution(addr);\r\n    (uint num, uint den) = revolution.dividendsPercent();\r\n    dividendsPercent = Percent.percent(num, den);\r\n  }\r\n  \r\n  function setInvestorsStorage(address addr) public onlyOwner{\r\n    investorsStorage = InvestorsStorage(addr);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"revolution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"name\":\"totalInvl\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"dailyWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setInvestorsStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPercent\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRevolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RevolutionInfo","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fef6ceb451dffbe1bb8d9916e3936c4457fadd2929eacfa8b2b2a6bc32d96989"}]}