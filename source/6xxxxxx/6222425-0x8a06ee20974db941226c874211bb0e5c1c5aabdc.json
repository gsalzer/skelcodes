{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract OptionToken {\r\n\r\n    address public owner;\r\n// 以下是基于ERC20生成代币逻辑\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    \r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    event Burn(address indexed from, uint value);\r\n    \r\n    constructor (\r\n        uint initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint(tokenDecimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        owner = msg.sender;\r\n        decimals = tokenDecimals;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool) {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(add(balanceOf[_to],_value) >= balanceOf[_to]);\r\n        uint previousBalances = add(balanceOf[_from],balanceOf[_to]);\r\n        balanceOf[_from] = sub(balanceOf[_from],_value);\r\n        balanceOf[_to] = add(balanceOf[_to],_value);\r\n        emit Transfer(_from, _to, _value);\r\n        assert(add(balanceOf[_from],balanceOf[_to]) == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender],_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = sub(balanceOf[msg.sender],_value);\r\n        totalSupply = sub(totalSupply,_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] = sub(balanceOf[_from],_value);\r\n        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender],_value);\r\n        totalSupply = sub(totalSupply,_value);\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n// 以上是基于ERC20生成代币逻辑\r\n\r\n\r\n// 以下是公共判断及基本方法\r\n    // 判断是否为owner地址\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    // 更改owner地址\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        if (newOwner != address(0))\r\n            owner = newOwner;\r\n    }\r\n    // 摧毁该智能合约\r\n    function selfdestruct() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    bool public status = true;// 判断该合约状态\r\n\r\n    modifier checkStatus() {\r\n        require(status == true);\r\n        _;\r\n    }\r\n\r\n    function unlockContract() external onlyOwner {\r\n        require(!status);\r\n        status = true;\r\n    }\r\n\r\n    function lockContract() external onlyOwner {\r\n        require(status);\r\n        status = false;\r\n    }\r\n\r\n    mapping (address => uint) whitelist;// 白名单列表\r\n\r\n    function addWhiteList (address _user, uint _amount) public onlyOwner checkStatus {\r\n        whitelist[_user] = _amount;\r\n    }\r\n\r\n    function removeWhiteList (address _user) public onlyOwner checkStatus {\r\n        delete whitelist[_user];\r\n    }\r\n\r\n    function isAllowTransfer(address _user) public view returns (bool) {\r\n        return whitelist[_user] == 0 ? false : true;\r\n    }\r\n\r\n    function getAllowAmount(address _user) public view returns (uint) {\r\n        return whitelist[_user];\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n// 以上是公共判断及基本方法\r\n\r\n// 以下是授予公共模块\r\n\r\n    event issueEvent(bytes32 issueKey);\r\n\r\n    struct IssueStruct {\r\n        // 授予数量\r\n        uint issueAmount;\r\n        // 授予日期\r\n        uint32 issueDate;\r\n        // 成熟起算日\r\n        uint32 vestingStartDate;\r\n    }\r\n    \r\n    mapping (address => mapping (bytes32 => IssueStruct)) public issueList;\r\n\r\n\r\n    // 授予\r\n    function issue ( \r\n        address _issueAddress, uint _issueAmount,\r\n        uint32 _issueDate,uint32 _vestingStartDate \r\n    ) \r\n        external \r\n        checkStatus \r\n        onlyOwner \r\n        returns (bool)\r\n    {\r\n        require(_issueAddress != 0x0);\r\n        require(_issueDate != 0);\r\n        require(_vestingStartDate != 0);\r\n        \r\n        uint nowTime = block.timestamp;\r\n        bytes32 issueKey = sha256(_issueAddress, _issueAmount, _issueDate, _vestingStartDate, nowTime);\r\n        // 授予\r\n        issueList[_issueAddress][issueKey] = IssueStruct({\r\n            issueAmount: _issueAmount,\r\n            issueDate: _issueDate,\r\n            vestingStartDate: _vestingStartDate\r\n        });\r\n\r\n        emit issueEvent(issueKey);\r\n        return true;\r\n    }\r\n\r\n    // 根据address、key 查看授予详情\r\n    function showIssueDetail ( address _issueAddress, bytes32 _issueKey ) \r\n        public \r\n        view \r\n        returns ( uint, uint32, uint32 ) \r\n    {\r\n        require(hasIssue(_issueAddress, _issueKey));\r\n        IssueStruct storage issueDetail = issueList[_issueAddress][_issueKey];\r\n        return ( \r\n            issueDetail.issueAmount, issueDetail.issueDate, \r\n            issueDetail.vestingStartDate\r\n        );\r\n    }\r\n\r\n    // 通过address 和 key 判断是否有该授予纪录\r\n    function hasIssue ( address _issueAddress, bytes32 _issueKey )\r\n        internal \r\n        view \r\n        returns (bool)\r\n    {\r\n        if (issueList[_issueAddress][_issueKey].issueAmount != 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n// 以上是授予模块\r\n\r\n// 以下是成熟列表展示模块\r\n    function reveiveToken ( address _issueAddress, uint amount ) \r\n        external\r\n        onlyOwner\r\n        checkStatus\r\n    {\r\n        _transfer(owner, _issueAddress, amount);\r\n    }\r\n// 以上是成熟列表展示模块\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issueAddress\",\"type\":\"address\"},{\"name\":\"_issueAmount\",\"type\":\"uint256\"},{\"name\":\"_issueDate\",\"type\":\"uint32\"},{\"name\":\"_vestingStartDate\",\"type\":\"uint32\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfdestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issueAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reveiveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isAllowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"issueList\",\"outputs\":[{\"name\":\"issueAmount\",\"type\":\"uint256\"},{\"name\":\"issueDate\",\"type\":\"uint32\"},{\"name\":\"vestingStartDate\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllowAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_issueAddress\",\"type\":\"address\"},{\"name\":\"_issueKey\",\"type\":\"bytes32\"}],\"name\":\"showIssueDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueKey\",\"type\":\"bytes32\"}],\"name\":\"issueEvent\",\"type\":\"event\"}]","ContractName":"OptionToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000ea60000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000d4b75616e675175616e536875690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b51530000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://8ce1186d04c46fdaf52f3c7a455029c6bf5dc3089f8e108bb324c134f1100347"}]}