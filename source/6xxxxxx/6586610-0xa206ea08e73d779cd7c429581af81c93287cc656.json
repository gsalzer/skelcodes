{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract hurra {\r\n    /* This creates an array with all licenses */\r\n    mapping (address => uint256) public licensesOf;  // all customer that have or had have a license\r\n\r\n    address owner;\t\t\t\t\t\t\t\t\t\t// Creator of this contract\r\n\r\n    /* Initializes contract with maximum number of licenses to the creator of the contract */\r\n    constructor  (uint256 maxLicenses ) public {\r\n\t\t\r\n        licensesOf[msg.sender] = maxLicenses;              // Initial give the creator all licenses\r\n        owner = msg.sender;                                 // creator is owner\r\n    }\r\n\r\n    /* Transfer license to customer account */\r\n\t/* Later, this function can be only called by creator of contract */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(msg.sender == owner);                        // only oner is allowed to call this function\r\n        require(licensesOf[msg.sender] >= _value);           // Check if the sender has enough\r\n        require(licensesOf[_to] + _value >= licensesOf[_to]); // Check for overflows\r\n        licensesOf[msg.sender] -= _value;                    // Subtract from owner\r\n        licensesOf[_to] += _value;                           // Add the same to the recipient\r\n        return true;\r\n    }\r\n\t\r\n    /* Burn license from customer account */\r\n\t/* Later, this function can be only called by creator of contract */\r\n    function burn(address _from, uint256 _value) public returns (bool success) {\r\n \t\trequire(msg.sender == owner);                        // only oner is allowed to call this function\r\n        require(licensesOf[_from] >= _value);           // Check if the sender has enough\r\n        require(licensesOf[msg.sender] + _value >= licensesOf[_from]); // Check for overflows\r\n        licensesOf[msg.sender] += _value;                    // add to owner\r\n        licensesOf[_from] -= _value;                           // subtract from customer\r\n        return true;\r\n    }\r\n\t\r\n\tfunction deleteThisContract() public {\r\n\t\trequire(msg.sender == owner);                        // only oner is allowed to call this function\r\n\t\tselfdestruct(msg.sender);\t\t\t\t\t\t\t\t// destroy contract and send ether back to owner\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// no action allowed after this\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"licensesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteThisContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"maxLicenses\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"hurra","CompilerVersion":"v0.4.25-nightly.2018.6.6+commit.59b35fa5","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a","Library":"","SwarmSource":"bzzr://4446c51323d3cf3ba19d5375c2f34c660fbe6c1b5ddd0902d6257e24f3c59edd"}]}