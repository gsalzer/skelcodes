{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract IGTToken is StandardToken {\r\n    string public constant name = \"IGT Token\";\r\n    string public constant symbol = \"IGTT\";\r\n    uint32 public constant decimals = 18;\r\n    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\r\n    address public CrowdsaleAddress;\r\n    uint256 public soldTokens;\r\n    bool public lockTransfers = true;\r\n\r\n    function getSoldTokens() public view returns (uint256) {\r\n        return soldTokens;\r\n    }\r\n\r\n\r\n  \r\n  \r\n    constructor(address _CrowdsaleAddress) public {\r\n    \r\n        CrowdsaleAddress = _CrowdsaleAddress;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;      \r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        require(msg.sender == CrowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n    function setSoldTokens(uint256 _value) public onlyOwner {\r\n        soldTokens = _value;\r\n    }\r\n\r\n    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\r\n        require (balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\r\n        emit Transfer(_from, CrowdsaleAddress, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n     // Override\r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited\");\r\n        }\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n     // Override\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited\");\r\n        }\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n\r\n    function lockTransfer(bool _lock) public onlyOwner {\r\n        lockTransfers = _lock;\r\n    }\r\n\r\n    function() external payable {\r\n        // The token contract don`t receive ether\r\n        revert();\r\n    }  \r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    address candidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == owner || msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        candidate = _newOwner;\r\n    }\r\n\r\n    function setManager(address _newManager) public onlyOwner {\r\n        manager = _newManager;\r\n    }\r\n\r\n\r\n    function confirmOwnership() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract TeamAddress {\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    } \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint; \r\n    address myAddress = this;\r\n    uint256 public startICODate;\r\n    IGTToken public token = new IGTToken(myAddress);\r\n    uint public additionalBonus = 0;\r\n    uint public endTimeAddBonus = 0;\r\n    event LogStateSwitch(State newState);\r\n    event ChangeToCoin(address indexed from, uint256 value);\r\n\r\n    enum State { \r\n        PreTune, \r\n        CrowdSale, \r\n        Migrate \r\n    }\r\n    State public currentState = State.PreTune;\r\n\r\n    TeamAddress public teamAddress = new TeamAddress();\r\n\r\n    constructor() public {\r\n        startICODate = uint256(now);\r\n        //uint sendTokens = 5250000;\r\n        giveTokens(address(teamAddress), 5250000);\r\n        // Stage CrowdSale is enable\r\n        nextState();    \r\n    }\r\n\r\n    function nextState() internal {\r\n        currentState = State(uint(currentState) + 1);\r\n    }\r\n\r\n    function returnTokensFromTeamAddress(uint256 _value) public onlyOwner {\r\n        // the function take tokens from teamAddress to contract\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        uint256 value = _value;\r\n        require (value >= 1);\r\n        value = value.mul(1 ether);\r\n        token.acceptTokens(address(teamAddress), value);    \r\n    } \r\n    \r\n    function lockExternalTransfer() public onlyOwner {\r\n        token.lockTransfer(true);\r\n    }\r\n\r\n    function unlockExternalTransfer() public onlyOwner {\r\n        token.lockTransfer(false);\r\n    }\r\n\r\n    function setMigrateStage() public onlyOwner {\r\n        require(currentState == State.CrowdSale);\r\n        require(token.balanceOf(address(teamAddress)) == 0);\r\n        nextState();\r\n    }\r\n\r\n    function changeToCoin(address _address, uint256 _value) public restricted {\r\n        require(currentState == State.Migrate);\r\n        token.acceptTokens(_address, _value);\r\n        emit ChangeToCoin(_address, _value);\r\n    }\r\n\r\n    function setAddBonus (uint _value, uint _endTimeBonus) public onlyOwner {\r\n        additionalBonus = _value;\r\n        endTimeAddBonus = _endTimeBonus;\r\n    }\r\n\r\n    function calcBonus () public view returns(uint256) {\r\n        // 2m - 12%\r\n        // 4m - 8%\r\n        // 6m - 6%\r\n        // 8m - 4%\r\n        // 10m - 2%\r\n        // 12.6m - 0%\r\n        uint256 amountToken = token.getSoldTokens();\r\n        uint256 actualBonus = 0;\r\n        \r\n        if (amountToken < 2240000 * (1 ether)){ \r\n            actualBonus = 12;    \r\n        }\r\n        if (amountToken >= 2240000 * (1 ether) && amountToken < 4400000 * (1 ether)){\r\n            actualBonus = 8;\r\n        }\r\n        if (amountToken >= 4400000 * (1 ether) && amountToken < 6520000 * (1 ether)){\r\n            actualBonus = 6;\r\n        }\r\n        if (amountToken >= 6520000 * (1 ether) && amountToken < 8600000 * (1 ether)){\r\n            actualBonus = 4;\r\n        }\r\n        if (amountToken >= 8600000 * (1 ether) && amountToken < 10640000 * (1 ether)){\r\n            actualBonus = 2;\r\n        }\r\n        if (now < endTimeAddBonus){\r\n            actualBonus = actualBonus.add(additionalBonus);\r\n        }\r\n        return actualBonus;\r\n    }\r\n\r\n    function giveTokens(address _newInvestor, uint256 _value) public restricted {\r\n        // the function give tokens to new investors\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        require(currentState != State.Migrate);\r\n        require (_newInvestor != address(0));\r\n        require (_value >= 1);\r\n\r\n        uint256 mySoldTokens = token.getSoldTokens();\r\n        uint256 value = _value;\r\n        value = value.mul(1 ether);\r\n\r\n        if (currentState != State.PreTune){\r\n            uint256 myBonus = calcBonus();\r\n            // Add Bonus\r\n            if (myBonus > 0){\r\n                value = value + value.mul(myBonus).div(100);            \r\n            }\r\n            mySoldTokens = mySoldTokens.add(value);\r\n            token.setSoldTokens(mySoldTokens);\r\n        }\r\n        token.transfer(_newInvestor, value);\r\n        \r\n    }  \r\n    \r\n\r\n\r\n    function() external payable {\r\n        // The contract don`t receive ether\r\n        revert();\r\n    }    \r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_endTimeBonus\",\"type\":\"uint256\"}],\"name\":\"setAddBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockExternalTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"giveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"returnTokensFromTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeAddBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockExternalTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICODate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMigrateStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeToCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeToCoin\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ae68289377946144b16297efbf3bc181c1cc2da5bc1cbd0f386fa73ac3d1119"}]}