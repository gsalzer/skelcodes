{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/CoinPledge.sol\r\n\r\n/// @title CoinPledge\r\n/// @author Igor Yalovoy\r\n/// @notice Reach your goals and have fun with friends\r\n/// @dev All function calls are currently implement without side effects\r\n/// @web: ylv.io\r\n/// @email: to@ylv.io\r\n/// @gitHub: https://github.com/ylv-io/coinpledge/tree/master\r\n/// @twitter: https://twitter.com/ylv_io\r\n\r\n// Proofs:\r\n// Public commitment as a motivator for weight loss (https://onlinelibrary.wiley.com/doi/pdf/10.1002/mar.20316)\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract CoinPledge is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint constant daysToResolve = 7 days;\r\n  uint constant bonusPercentage = 50;\r\n  uint constant serviceFeePercentage = 10;\r\n  uint constant minBonus = 1 finney;\r\n\r\n  struct Challenge {\r\n    address user;\r\n    string name;\r\n    uint value;\r\n    address mentor;\r\n    uint startDate;\r\n    uint time;\r\n    uint mentorFee;\r\n\r\n    bool successed;\r\n    bool resolved;\r\n  }\r\n\r\n  struct User {\r\n    address addr;\r\n    string name;\r\n  }\r\n\r\n  // Events\r\n  event NewChallenge(\r\n    uint indexed challengeId,\r\n    address indexed user,\r\n    string name,\r\n    uint value,\r\n    address indexed mentor,\r\n    uint startDate,\r\n    uint time,\r\n    uint mentorFee\r\n  );\r\n\r\n  event ChallengeResolved(\r\n    uint indexed challengeId,\r\n    address indexed user,\r\n    address indexed mentor,\r\n    bool decision\r\n  );\r\n\r\n  event BonusFundChanged(\r\n    address indexed user,\r\n    uint value\r\n  );\r\n\r\n  event NewUsername(\r\n    address indexed addr,\r\n    string name\r\n  );\r\n\r\n\r\n  event Donation(\r\n    string name,\r\n    string url,\r\n    uint value,\r\n    uint timestamp\r\n  );\r\n\r\n  /// @notice indicated is game over or not\r\n  bool public isGameOver;\r\n\r\n  /// @notice All Challenges\r\n  Challenge[] public challenges;\r\n\r\n  mapping(uint => address) public challengeToUser;\r\n  mapping(address => uint) public userToChallengeCount;\r\n\r\n  mapping(uint => address) public challengeToMentor;\r\n  mapping(address => uint) public mentorToChallengeCount;\r\n\r\n  /// @notice All Users\r\n  mapping(address => User) public users;\r\n  address[] public allUsers;\r\n  mapping(string => address) private usernameToAddress;\r\n  \r\n  /// @notice User's bonuses\r\n  mapping(address => uint) public bonusFund;\r\n\r\n  /// @notice Can access only if game is not over\r\n  modifier gameIsNotOver() {\r\n    require(!isGameOver, \"Game should be not over\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Can access only if game is over\r\n  modifier gameIsOver() {\r\n    require(isGameOver, \"Game should be over\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Get Bonus Fund For User\r\n  function getBonusFund(address user)\r\n  external\r\n  view\r\n  returns(uint) {\r\n    return bonusFund[user];\r\n  }\r\n\r\n  /// @notice Get Users Lenght\r\n  function getUsersCount()\r\n  external\r\n  view\r\n  returns(uint) {\r\n    return allUsers.length;\r\n  }\r\n\r\n  /// @notice Get Challenges For User\r\n  function getChallengesForUser(address user)\r\n  external\r\n  view\r\n  returns(uint[]) {\r\n    require(userToChallengeCount[user] > 0, \"Has zero challenges\");\r\n\r\n    uint[] memory result = new uint[](userToChallengeCount[user]);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < challenges.length; i++) {\r\n      if (challengeToUser[i] == user)\r\n      {\r\n        result[counter] = i;\r\n        counter++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /// @notice Get Challenges For Mentor\r\n  function getChallengesForMentor(address mentor)\r\n  external\r\n  view\r\n  returns(uint[]) {\r\n    require(mentorToChallengeCount[mentor] > 0, \"Has zero challenges\");\r\n\r\n    uint[] memory result = new uint[](mentorToChallengeCount[mentor]);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < challenges.length; i++) {\r\n      if (challengeToMentor[i] == mentor)\r\n      {\r\n        result[counter] = i;\r\n        counter++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  /// @notice Ends game\r\n  function gameOver()\r\n  external\r\n  gameIsNotOver\r\n  onlyOwner {\r\n    isGameOver = true;\r\n  }\r\n\r\n  /// @notice Set Username\r\n  function setUsername(string name)\r\n  external\r\n  gameIsNotOver {\r\n    require(bytes(name).length > 2, \"Provide a name longer than 2 chars\");\r\n    require(bytes(name).length <= 32, \"Provide a name shorter than 33 chars\");\r\n    require(users[msg.sender].addr == address(0x0), \"You already have a name\");\r\n    require(usernameToAddress[name] == address(0x0), \"Name already taken\");\r\n\r\n    users[msg.sender] = User(msg.sender, name);\r\n    usernameToAddress[name] = msg.sender;\r\n    allUsers.push(msg.sender);\r\n\r\n    emit NewUsername(msg.sender, name);\r\n  }\r\n\r\n  /// @notice Creates Challenge\r\n  function createChallenge(string name, string mentor, uint time, uint mentorFee)\r\n  external\r\n  payable\r\n  gameIsNotOver\r\n  returns (uint retId) {\r\n    require(msg.value >= 0.01 ether, \"Has to stake more than 0.01 ether\");\r\n    require(mentorFee >= 0 ether, \"Can't be negative\");\r\n    require(mentorFee <= msg.value, \"Can't be bigger than stake\");\r\n    require(bytes(mentor).length > 0, \"Has to be a mentor\");\r\n    require(usernameToAddress[mentor] != address(0x0), \"Mentor has to be registered\");\r\n    require(time > 0, \"Time has to be greater than zero\");\r\n\r\n    address mentorAddr = usernameToAddress[mentor];\r\n\r\n    require(msg.sender != mentorAddr, \"Can't be mentor to yourself\");\r\n\r\n    uint startDate = block.timestamp;\r\n    uint id = challenges.push(Challenge(msg.sender, name, msg.value, mentorAddr, startDate, time, mentorFee, false, false)) - 1;\r\n\r\n    challengeToUser[id] = msg.sender;\r\n    userToChallengeCount[msg.sender]++;\r\n\r\n    challengeToMentor[id] = mentorAddr;\r\n    mentorToChallengeCount[mentorAddr]++;\r\n\r\n    emit NewChallenge(id, msg.sender, name, msg.value, mentorAddr, startDate, time, mentorFee);\r\n\r\n    return id;\r\n  }\r\n\r\n  /// @notice Resolves Challenge\r\n  function resolveChallenge(uint challengeId, bool decision)\r\n  external\r\n  gameIsNotOver {\r\n    Challenge storage challenge = challenges[challengeId];\r\n    \r\n    require(challenge.resolved == false, \"Challenge already resolved.\");\r\n\r\n    // if more time passed than endDate + daysToResolve, then user can resolve himself\r\n    if(block.timestamp < (challenge.startDate + challenge.time + daysToResolve))\r\n      require(challenge.mentor == msg.sender, \"You are not the mentor for this challenge.\");\r\n    else require((challenge.user == msg.sender) || (challenge.mentor == msg.sender), \"You are not the user or mentor for this challenge.\");\r\n\r\n    uint mentorFee;\r\n    uint serviceFee;\r\n    \r\n    address user = challengeToUser[challengeId];\r\n    address mentor = challengeToMentor[challengeId];\r\n\r\n    // write decision\r\n    challenge.successed = decision;\r\n    challenge.resolved = true;\r\n\r\n    uint remainingValue = challenge.value;\r\n\r\n    // mentor & service fee\r\n    if(challenge.mentorFee > 0) {\r\n      serviceFee = challenge.mentorFee.div(100).mul(serviceFeePercentage);\r\n      mentorFee = challenge.mentorFee.div(100).mul(100 - serviceFeePercentage);\r\n    }\r\n    \r\n    if(challenge.mentorFee > 0)\r\n      remainingValue = challenge.value.sub(challenge.mentorFee);\r\n\r\n    uint valueToPay;\r\n\r\n    if(decision) {\r\n      // value to pay back to user\r\n      valueToPay = remainingValue;\r\n      // credit bouns if any\r\n      uint currentBonus = bonusFund[user];\r\n      if(currentBonus > 0)\r\n      {\r\n        uint bonusValue = bonusFund[user].div(100).mul(bonusPercentage);\r\n        if(currentBonus <= minBonus)\r\n          bonusValue = currentBonus;\r\n        bonusFund[user] -= bonusValue;\r\n        emit BonusFundChanged(user, bonusFund[user]);\r\n\r\n        valueToPay += bonusValue;\r\n      }\r\n    }\r\n    else {\r\n      bonusFund[user] += remainingValue;\r\n      emit BonusFundChanged(user, bonusFund[user]);\r\n    }\r\n\r\n    // pay back to the challenger\r\n    if(valueToPay > 0)\r\n      user.transfer(valueToPay);\r\n\r\n    if(mentorFee > 0)\r\n      mentor.transfer(mentorFee);\r\n\r\n    if(serviceFee > 0)\r\n      owner().transfer(serviceFee);\r\n\r\n    emit ChallengeResolved(challengeId, user, mentor, decision);\r\n  }\r\n\r\n  function withdraw()\r\n  external\r\n  gameIsOver {\r\n    require(bonusFund[msg.sender] > 0, \"You do not have any funds\");\r\n\r\n    uint funds = bonusFund[msg.sender];\r\n    bonusFund[msg.sender] = 0;\r\n    msg.sender.transfer(funds);\r\n  }\r\n\r\n  function donate(string name, string url)\r\n  external\r\n  payable\r\n  gameIsNotOver {\r\n    owner().transfer(msg.value);\r\n    emit Donation(name, url, msg.value, block.timestamp);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBonusFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getChallengesForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mentor\",\"type\":\"address\"}],\"name\":\"getChallengesForMentor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToChallengeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"mentor\",\"type\":\"address\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"mentorFee\",\"type\":\"uint256\"},{\"name\":\"successed\",\"type\":\"bool\"},{\"name\":\"resolved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mentorToChallengeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"challengeId\",\"type\":\"uint256\"},{\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeToMentor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mentor\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"mentorFee\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"name\":\"retId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"mentor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mentorFee\",\"type\":\"uint256\"}],\"name\":\"NewChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"mentor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BonusFundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoinPledge","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17911e5a7377b958c15e00a1e3a3d925c08a7c03b1326e18869f65463f7ac8d4"}]}