{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 balance = _token.balanceOf(this);\r\n        _token.transfer(_to, _value);\r\n        require(_token.balanceOf(this) == balance.sub(_value), \"checkedTransfer: Final balance didn't match\");\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 toBalance = _token.balanceOf(_to);\r\n        _token.transferFrom(_from, _to, _value);\r\n        require(_token.balanceOf(_to) == toBalance.add(_value), \"checkedTransfer: Final balance didn't match\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/ext/ERC1003Token.sol\r\n\r\ncontract ERC1003Caller is Ownable {\r\n    function makeCall(address _target, bytes _data) external payable onlyOwner returns (bool) {\r\n        // solium-disable-next-line security/no-call-value\r\n        return _target.call.value(msg.value)(_data);\r\n    }\r\n}\r\n\r\ncontract ERC1003Token is ERC20 {\r\n    ERC1003Caller public caller_ = new ERC1003Caller();\r\n    address[] internal sendersStack_;\r\n\r\n    function approveAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n        sendersStack_.push(msg.sender);\r\n        approve(_to, _value);\r\n        require(caller_.makeCall.value(msg.value)(_to, _data));\r\n        sendersStack_.length -= 1;\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\r\n        transfer(_to, _value);\r\n        require(caller_.makeCall.value(msg.value)(_to, _data));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        address from = (_from != address(caller_)) ? _from : sendersStack_[sendersStack_.length - 1];\r\n        return super.transferFrom(from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    function tokensCount() public view returns(uint256);\r\n    function tokens(uint256 _index) public view returns(ERC20);\r\n    function allTokens() public view returns(ERC20[]);\r\n    function allDecimals() public view returns(uint8[]);\r\n    function allBalances() public view returns(uint256[]);\r\n    function allTokensDecimalsBalances() public view returns(ERC20[], uint8[], uint256[]);\r\n\r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n\r\n    function denyBundling() public;\r\n    function allowBundling() public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BasicMultiToken.sol\r\n\r\ncontract BasicMultiToken is Ownable, StandardToken, DetailedERC20, ERC1003Token, IBasicMultiToken {\r\n    using CheckedERC20 for ERC20;\r\n\r\n    ERC20[] public tokens;\r\n    uint internal inLendingMode;\r\n    bool public bundlingDenied;\r\n\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event BundlingDenied(bool denied);\r\n\r\n    modifier notInLendingMode {\r\n        require(inLendingMode == 0, \"Operation can't be performed while lending\");\r\n        _;\r\n    }\r\n\r\n    modifier bundlingEnabled {\r\n        require(!bundlingDenied, \"Operation can't be performed because bundling is denied\");\r\n        _;\r\n    }\r\n\r\n    constructor() public DetailedERC20(\"\", \"\", 0) {\r\n    }\r\n\r\n    function init(ERC20[] _tokens, string _name, string _symbol, uint8 _decimals) public {\r\n        require(decimals == 0, \"init: contract was already initialized\");\r\n        require(_decimals > 0, \"init: _decimals should not be zero\");\r\n        require(bytes(_name).length > 0, \"init: _name should not be empty\");\r\n        require(bytes(_symbol).length > 0, \"init: _symbol should not be empty\");\r\n        require(_tokens.length >= 2, \"Contract do not support less than 2 inner tokens\");\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        tokens = _tokens;\r\n    }\r\n\r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public bundlingEnabled notInLendingMode {\r\n        require(totalSupply_ == 0, \"bundleFirstTokens: This method can be used with zero total supply only\");\r\n        _bundle(_beneficiary, _amount, _tokenAmounts);\r\n    }\r\n\r\n    function bundle(address _beneficiary, uint256 _amount) public bundlingEnabled notInLendingMode {\r\n        require(totalSupply_ != 0, \"This method can be used with non zero total supply only\");\r\n        uint256[] memory tokenAmounts = new uint256[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            tokenAmounts[i] = tokens[i].balanceOf(this).mul(_amount).div(totalSupply_);\r\n        }\r\n        _bundle(_beneficiary, _amount, tokenAmounts);\r\n    }\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public notInLendingMode {\r\n        unbundleSome(_beneficiary, _value, tokens);\r\n    }\r\n\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public notInLendingMode {\r\n        require(_tokens.length > 0, \"Array of tokens can't be empty\");\r\n\r\n        uint256 totalSupply = totalSupply_;\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply.sub(_value);\r\n        emit Unbundle(msg.sender, _beneficiary, _value);\r\n        emit Transfer(msg.sender, 0, _value);\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            for (uint j = 0; j < i; j++) {\r\n                require(_tokens[i] != _tokens[j], \"unbundleSome: should not unbundle same token multiple times\");\r\n            }\r\n            uint256 tokenAmount = _tokens[i].balanceOf(this).mul(_value).div(totalSupply);\r\n            _tokens[i].checkedTransfer(_beneficiary, tokenAmount);\r\n        }\r\n    }\r\n\r\n    // Admin methods\r\n\r\n    function denyBundling() public onlyOwner {\r\n        require(!bundlingDenied);\r\n        bundlingDenied = true;\r\n        emit BundlingDenied(true);\r\n    }\r\n\r\n    function allowBundling() public onlyOwner {\r\n        require(bundlingDenied);\r\n        bundlingDenied = false;\r\n        emit BundlingDenied(false);\r\n    }\r\n\r\n    // Internal methods\r\n\r\n    function _bundle(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) internal {\r\n        require(_amount != 0, \"Bundling amount should be non-zero\");\r\n        require(tokens.length == _tokenAmounts.length, \"Lenghts of tokens and _tokenAmounts array should be equal\");\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            require(_tokenAmounts[i] != 0, \"Token amount should be non-zero\");\r\n            tokens[i].checkedTransferFrom(msg.sender, this, _tokenAmounts[i]); // Can't use require because not all ERC20 tokens return bool\r\n        }\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\r\n        emit Bundle(msg.sender, _beneficiary, _amount);\r\n        emit Transfer(0, _beneficiary, _amount);\r\n    }\r\n\r\n    // Instant Loans\r\n\r\n    function lend(address _to, ERC20 _token, uint256 _amount, address _target, bytes _data) public payable {\r\n        uint256 prevBalance = _token.balanceOf(this);\r\n        _token.transfer(_to, _amount);\r\n        inLendingMode += 1;\r\n        require(caller_.makeCall.value(msg.value)(_target, _data), \"lend: arbitrary call failed\");\r\n        inLendingMode -= 1;\r\n        require(_token.balanceOf(this) >= prevBalance, \"lend: lended token must be refilled\");\r\n    }\r\n\r\n    // Public Getters\r\n\r\n    function tokensCount() public view returns(uint) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function tokens(uint _index) public view returns(ERC20) {\r\n        return tokens[_index];\r\n    }\r\n\r\n    function allTokens() public view returns(ERC20[] _tokens) {\r\n        _tokens = tokens;\r\n    }\r\n\r\n    function allBalances() public view returns(uint256[] _balances) {\r\n        _balances = new uint256[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _balances[i] = tokens[i].balanceOf(this);\r\n        }\r\n    }\r\n\r\n    function allDecimals() public view returns(uint8[] _decimals) {\r\n        _decimals = new uint8[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _decimals[i] = DetailedERC20(tokens[i]).decimals();\r\n        }\r\n    }\r\n\r\n    function allTokensDecimalsBalances() public view returns(ERC20[] _tokens, uint8[] _decimals, uint256[] _balances) {\r\n        _tokens = allTokens();\r\n        _decimals = allDecimals();\r\n        _balances = allBalances();\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IMultiToken.sol\r\n\r\ncontract IMultiToken is IBasicMultiToken {\r\n    event Update();\r\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\r\n\r\n    function allWeights() public view returns(uint256[] _weights);\r\n    function allTokensDecimalsBalancesWeights() public view returns(ERC20[] _tokens, uint8[] _decimals, uint256[] _balances, uint256[] _weights);\r\n\r\n    function denyChanges() public;\r\n}\r\n\r\n// File: contracts/MultiToken.sol\r\n\r\ncontract MultiToken is IMultiToken, BasicMultiToken {\r\n    using CheckedERC20 for ERC20;\r\n\r\n    uint256 internal minimalWeight;\r\n    mapping(address => uint256) public weights;\r\n    bool public changesDenied;\r\n\r\n    event ChangesDenied();\r\n\r\n    modifier changesEnabled {\r\n        require(!changesDenied, \"Operation can't be performed because changes are denied\");\r\n        _;\r\n    }\r\n\r\n    function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 _decimals) public {\r\n        super.init(_tokens, _name, _symbol, _decimals);\r\n        require(_weights.length == tokens.length, \"Lenghts of _tokens and _weights array should be equal\");\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            require(_weights[i] != 0, \"The _weights array should not contains zeros\");\r\n            require(weights[tokens[i]] == 0, \"The _tokens array have duplicates\");\r\n            weights[tokens[i]] = _weights[i];\r\n            if (minimalWeight == 0 || minimalWeight < _weights[i]) {\r\n                minimalWeight = _weights[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function init2(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 _decimals) public {\r\n        init(_tokens, _weights, _name, _symbol, _decimals);\r\n    }\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns(uint256 returnAmount) {\r\n        if (weights[_fromToken] > 0 && weights[_toToken] > 0 && _fromToken != _toToken) {\r\n            uint256 fromBalance = ERC20(_fromToken).balanceOf(this);\r\n            uint256 toBalance = ERC20(_toToken).balanceOf(this);\r\n            returnAmount = _amount.mul(toBalance).mul(weights[_fromToken]).div(\r\n                _amount.mul(weights[_fromToken]).div(minimalWeight).add(fromBalance)\r\n            );\r\n        }\r\n    }\r\n\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public changesEnabled notInLendingMode returns(uint256 returnAmount) {\r\n        returnAmount = getReturn(_fromToken, _toToken, _amount);\r\n        require(returnAmount > 0, \"The return amount is zero\");\r\n        require(returnAmount >= _minReturn, \"The return amount is less than _minReturn value\");\r\n\r\n        ERC20(_fromToken).checkedTransferFrom(msg.sender, this, _amount);\r\n        ERC20(_toToken).checkedTransfer(msg.sender, returnAmount);\r\n\r\n        emit Change(_fromToken, _toToken, msg.sender, _amount, returnAmount);\r\n    }\r\n\r\n    // Admin methods\r\n\r\n    function denyChanges() public onlyOwner {\r\n        require(!changesDenied);\r\n        changesDenied = true;\r\n        emit ChangesDenied();\r\n    }\r\n\r\n    // Public Getters\r\n\r\n    function allWeights() public view returns(uint256[] _weights) {\r\n        _weights = new uint256[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _weights[i] = weights[tokens[i]];\r\n        }\r\n    }\r\n\r\n    function allTokensDecimalsBalancesWeights() public view returns(ERC20[] _tokens, uint8[] _decimals, uint256[] _balances, uint256[] _weights) {\r\n        (_tokens, _decimals, _balances) = allTokensDecimalsBalances();\r\n        _weights = allWeights();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/FeeMultiToken.sol\r\n\r\ncontract FeeMultiToken is Ownable, MultiToken {\r\n    using CheckedERC20 for ERC20;\r\n\r\n    uint256 public constant TOTAL_PERCRENTS = 1000000;\r\n    uint256 public lendFee;\r\n    uint256 public changeFee;\r\n    uint256 public refferalFee;\r\n\r\n    function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 /*_decimals*/) public {\r\n        super.init(_tokens, _weights, _name, _symbol, 18);\r\n    }\r\n\r\n    function setLendFee(uint256 _lendFee) public onlyOwner {\r\n        require(_lendFee <= 30000, \"setLendFee: fee should be not greater than 3%\");\r\n        lendFee = _lendFee;\r\n    }\r\n\r\n    function setChangeFee(uint256 _changeFee) public onlyOwner {\r\n        require(_changeFee <= 30000, \"setChangeFee: fee should be not greater than 3%\");\r\n        changeFee = _changeFee;\r\n    }\r\n\r\n    function setRefferalFee(uint256 _refferalFee) public onlyOwner {\r\n        require(_refferalFee <= 500000, \"setChangeFee: fee should be not greater than 50% of changeFee\");\r\n        refferalFee = _refferalFee;\r\n    }\r\n\r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns(uint256 returnAmount) {\r\n        returnAmount = super.getReturn(_fromToken, _toToken, _amount).mul(TOTAL_PERCRENTS.sub(changeFee)).div(TOTAL_PERCRENTS);\r\n    }\r\n\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns(uint256 returnAmount) {\r\n        returnAmount = changeWithRef(_fromToken, _toToken, _amount, _minReturn, 0);\r\n    }\r\n\r\n    function changeWithRef(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn, address _ref) public returns(uint256 returnAmount) {\r\n        returnAmount = super.change(_fromToken, _toToken, _amount, _minReturn);\r\n        uint256 refferalAmount = returnAmount\r\n            .mul(changeFee).div(TOTAL_PERCRENTS.sub(changeFee))\r\n            .mul(refferalFee).div(TOTAL_PERCRENTS);\r\n\r\n        ERC20(_toToken).checkedTransfer(_ref, refferalAmount);\r\n    }\r\n\r\n    function lend(address _to, ERC20 _token, uint256 _amount, address _target, bytes _data) public payable {\r\n        uint256 prevBalance = _token.balanceOf(this);\r\n        super.lend(_to, _token, _amount, _target, _data);\r\n        require(_token.balanceOf(this) >= prevBalance.mul(TOTAL_PERCRENTS.add(lendFee)).div(TOTAL_PERCRENTS), \"lend: tokens must be returned with lend fee\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"changeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changesDenied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"changeWithRef\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refferalFee\",\"type\":\"uint256\"}],\"name\":\"setRefferalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"init2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"bundleFirstTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTokensDecimalsBalances\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allBalances\",\"outputs\":[{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bundlingDenied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTokensDecimalsBalancesWeights\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unbundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"unbundleSome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_changeFee\",\"type\":\"uint256\"}],\"name\":\"setChangeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allWeights\",\"outputs\":[{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"caller_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"denyBundling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refferalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lendFee\",\"type\":\"uint256\"}],\"name\":\"setLendFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"denyChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_PERCRENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allDecimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChangesDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unbundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"denied\",\"type\":\"bool\"}],\"name\":\"BundlingDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_changer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_return\",\"type\":\"uint256\"}],\"name\":\"Change\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FeeMultiToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa81554fef7cb7c630499b4dc782143253759cd3620365817a6e6c576d9dedcf"}]}