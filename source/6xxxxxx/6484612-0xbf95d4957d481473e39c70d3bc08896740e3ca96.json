{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/upgradeability/ImplementationStorage.sol\r\n\r\n/**\r\n * @title ImplementationStorage\r\n * @dev This contract stores proxy implementation address.\r\n */\r\ncontract ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"cvc.proxy.implementation\", and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    */\r\n    constructor() public {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"cvc.proxy.implementation\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return Address of the current implementation\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeability/CvcProxy.sol\r\n\r\n/**\r\n * @title CvcProxy\r\n * @dev Transparent proxy with upgradeability functions and authorization control.\r\n */\r\ncontract CvcProxy is ImplementationStorage {\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     * @param implementation Address of the new implementation.\r\n     */\r\n    event Upgraded(address implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the administration has been transferred.\r\n     * @param previousAdmin Address of the previous admin.\r\n     * @param newAdmin Address of the new admin.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"cvc.proxy.admin\", and is validated in the constructor.\r\n     */\r\n    bytes32 private constant ADMIN_SLOT = 0x2bbac3e52eee27be250d682577104e2abe776c40160cd3167b24633933100433;\r\n\r\n    /**\r\n     * @dev Modifier to check whether the `msg.sender` is the admin.\r\n     * It executes the function if called by admin. Otherwise, it will delegate the call to the implementation.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == currentAdmin()) {\r\n            _;\r\n        } else {\r\n            delegate(implementation());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * It sets the `msg.sender` as the proxy admin.\r\n     */\r\n    constructor() public {\r\n        assert(ADMIN_SLOT == keccak256(\"cvc.proxy.admin\"));\r\n        setAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function.\r\n     */\r\n    function() external payable {\r\n        require(msg.sender != currentAdmin(), \"Message sender is not contract admin\");\r\n        delegate(implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     * Only the current admin can call this function.\r\n     * @param _newAdmin Address to transfer proxy administration to.\r\n     */\r\n    function changeAdmin(address _newAdmin) external ifAdmin {\r\n        require(_newAdmin != address(0), \"Cannot change contract admin to zero address\");\r\n        emit AdminChanged(currentAdmin(), _newAdmin);\r\n        setAdmin(_newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n     * @param _implementation the address of the new implementation to be set.\r\n     */\r\n    function upgradeTo(address _implementation) external ifAdmin {\r\n        upgradeImplementation(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade and call the new implementation\r\n     * to initialize whatever is needed through a low level call.\r\n     * @param _implementation the address of the new implementation to be set.\r\n     * @param _data the msg.data to bet sent in the low level call. This parameter may include the function\r\n     * signature of the implementation to be called with the needed payload.\r\n     */\r\n    function upgradeToAndCall(address _implementation, bytes _data) external payable ifAdmin {\r\n        upgradeImplementation(_implementation);\r\n        //solium-disable-next-line security/no-call-value\r\n        require(address(this).call.value(msg.value)(_data), \"Upgrade error: initialization method call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Address of the proxy admin.\r\n     * @return address\r\n     */\r\n    function admin() external view ifAdmin returns (address) {\r\n        return currentAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the implementation address.\r\n     * @param _newImplementation the address of the new implementation to be set\r\n     */\r\n    function upgradeImplementation(address _newImplementation) private {\r\n        address currentImplementation = implementation();\r\n        require(currentImplementation != _newImplementation, \"Upgrade error: proxy contract already uses specified implementation\");\r\n        setImplementation(_newImplementation);\r\n        emit Upgraded(_newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn't return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param _implementation Address to delegate.\r\n     */\r\n    function delegate(address _implementation) private {\r\n        assembly {\r\n            // Copy msg.data.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call current implementation passing proxy calldata.\r\n            let result := delegatecall(gas, _implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            // Propagate result (delegatecall returns 0 on error).\r\n            switch result\r\n            case 0 {revert(0, returndatasize)}\r\n            default {return (0, returndatasize)}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return The admin slot.\r\n     */\r\n    function currentAdmin() private view returns (address proxyAdmin) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            proxyAdmin := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy admin.\r\n     * @param _newAdmin Address of the new proxy admin.\r\n     */\r\n    function setAdmin(address _newAdmin) private {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            sstore(slot, _newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation address of the proxy.\r\n     * @param _newImplementation Address of the new implementation.\r\n     */\r\n    function setImplementation(address _newImplementation) private {\r\n        require(\r\n            AddressUtils.isContract(_newImplementation),\r\n            \"Cannot set new implementation: no contract code at contract address\"\r\n        );\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(slot, _newImplementation)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeability/CvcMigrator.sol\r\n\r\n/**\r\n* @title CvcMigrator\r\n* @dev This is a system contract which provides transactional upgrade functionality.\r\n* It allows the ability to add 'upgrade transactions' for multiple proxy contracts and execute all of them in single transaction.\r\n*/\r\ncontract CvcMigrator is Ownable {\r\n\r\n    /**\r\n    * @dev The ProxyCreated event is emitted when new instance of CvcProxy contract is deployed.\r\n    * @param proxyAddress New proxy contract instance address.\r\n    */\r\n    event ProxyCreated(address indexed proxyAddress);\r\n\r\n    struct Migration {\r\n        address proxy;\r\n        address implementation;\r\n        bytes data;\r\n    }\r\n\r\n    /// List of registered upgrades.\r\n    Migration[] public migrations;\r\n\r\n    /**\r\n    * @dev Store migration record for the next migration\r\n    * @param _proxy Proxy address\r\n    * @param _implementation Implementation address\r\n    * @param _data Pass-through to proxy's updateToAndCall\r\n    */\r\n    function addUpgrade(address _proxy, address _implementation, bytes _data) external onlyOwner {\r\n        require(AddressUtils.isContract(_implementation), \"Migrator error: no contract code at new implementation address\");\r\n        require(CvcProxy(_proxy).implementation() != _implementation, \"Migrator error: proxy contract already uses specified implementation\");\r\n        migrations.push(Migration(_proxy, _implementation, _data));\r\n    }\r\n\r\n    /**\r\n    * @dev Applies stored upgrades to proxies. Flushes the list of migration records\r\n    */\r\n    function migrate() external onlyOwner {\r\n        for (uint256 i = 0; i < migrations.length; i++) {\r\n            Migration storage migration = migrations[i];\r\n            if (migration.data.length > 0) {\r\n                CvcProxy(migration.proxy).upgradeToAndCall(migration.implementation, migration.data);\r\n            } else {\r\n                CvcProxy(migration.proxy).upgradeTo(migration.implementation);\r\n            }\r\n        }\r\n        delete migrations;\r\n    }\r\n\r\n    /**\r\n    * @dev Flushes the migration list without applying them. Can be used in case wrong migration added to the list.\r\n    */\r\n    function reset() external onlyOwner {\r\n        delete migrations;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership from the migrator to a new address\r\n    * @param _target Proxy address\r\n    * @param _newOwner New proxy owner address\r\n    */\r\n    function changeProxyAdmin(address _target, address _newOwner) external onlyOwner {\r\n        CvcProxy(_target).changeAdmin(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Proxy factory\r\n    * @return CvcProxy\r\n    */\r\n    function createProxy() external onlyOwner returns (CvcProxy) {\r\n        CvcProxy proxy = new CvcProxy();\r\n        // We emit event here to retrieve contract address later in the tx receipt\r\n        emit ProxyCreated(address(proxy));\r\n        return proxy;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns migration record by index. Will become obsolete as soon as migrations() will be usable via web3.js\r\n    * @param _index 0-based index\r\n    * @return address Proxy address\r\n    * @return address Implementation address\r\n    * @return bytes Pass-through to proxy's updateToAndCall\r\n    */\r\n    function getMigration(uint256 _index) external view returns (address, address, bytes) {\r\n        return (migrations[_index].proxy, migrations[_index].implementation, migrations[_index].data);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns current stored migration count\r\n    * @return uint256 Count\r\n    */\r\n    function getMigrationCount() external view returns (uint256) {\r\n        return migrations.length;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"migrations\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMigrationCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CvcMigrator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://626b45ad8da326509f1708491e4fca6cd13a5ede4f8aa22264d0b86194059c6c"}]}