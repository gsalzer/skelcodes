{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract TokenInterface {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\ncontract ICO is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public website = \"www.propvesta.com\";\r\n    uint256 public rate;\r\n    uint256 public tokensSold;\r\n    address public fundsWallet = 0x304f970BaA307238A6a4F47caa9e0d82F082e3AD;\r\n    \r\n    TokenInterface public constant PROV = TokenInterface(0x409Ec1FCd524480b3CaDf4331aF21A2cB3Db68c9);\r\n    \r\n    function ICO() public {\r\n        rate = 20000000;\r\n    }\r\n    \r\n    function changeRate(uint256 _newRate) public onlyOwner {\r\n        require(_newRate > 0 && rate != _newRate);\r\n        rate = _newRate;\r\n    }\r\n    \r\n    function changeFundsWallet(address _fundsWallet) public onlyOwner returns(bool) {\r\n        fundsWallet = _fundsWallet;\r\n        return true;\r\n    }\r\n    \r\n    event TokenPurchase(address indexed investor, uint256 tokensPurchased);\r\n    \r\n    function buyTokens(address _investor) public payable {\r\n        require(msg.value >= 1e16);\r\n        uint256 exchangeRate = rate;\r\n        uint256 bonus = 0;\r\n        uint256 investment = msg.value;\r\n        uint256 remainder = 0;\r\n        if(investment >= 1e18 && investment < 2e18) {\r\n            bonus = 30;\r\n        } else if(investment >= 2e18 && investment < 3e18) {\r\n            bonus = 35;\r\n        } else if(investment >= 3e18 && investment < 4e18) {\r\n            bonus = 40;\r\n        } else if(investment >= 4e18 && investment < 5e18) {\r\n            bonus = 45;\r\n        } else if(investment >= 5e18) {\r\n            bonus = 50;\r\n        }\r\n        exchangeRate = rate.mul(bonus).div(100).add(rate);\r\n        uint256 toTransfer = 0;\r\n        if(investment > 10e18) {\r\n            uint256 bonusCap = 10e18;\r\n            toTransfer = bonusCap.mul(exchangeRate);\r\n            remainder = investment.sub(bonusCap);\r\n            toTransfer = toTransfer.add(remainder.mul(rate));\r\n        } else {\r\n            toTransfer = investment.mul(exchangeRate);\r\n        }\r\n        PROV.transfer(_investor, toTransfer);\r\n        TokenPurchase(_investor, toTransfer);\r\n        tokensSold = tokensSold.add(toTransfer);\r\n        fundsWallet.transfer(investment);\r\n    }\r\n    \r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    function getTokensSold() public view returns(uint256) {\r\n        return tokensSold;\r\n    }\r\n    \r\n    event TokensWithdrawn(uint256 totalPROV);\r\n    \r\n    function withdrawPROV(uint256 _value) public onlyOwner {\r\n        PROV.transfer(fundsWallet, _value);\r\n        TokensWithdrawn(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROV\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"}],\"name\":\"changeFundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawPROV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalPROV\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f6890a34430c7c63cc4a5d599849d3df57443629e468128004ba9bd3993d1de"}]}