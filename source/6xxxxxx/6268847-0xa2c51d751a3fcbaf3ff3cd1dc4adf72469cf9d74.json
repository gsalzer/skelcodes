{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ninterface EtheremonAdventureItem {\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function getItemInfo(uint _tokenId) constant external returns(uint classId, uint value);\r\n    function spawnItem(uint _classId, uint _value, address _owner) external returns(uint);\r\n}\r\n\r\ncontract EtheremonAdventureData {\r\n    \r\n    function addLandRevenue(uint _siteId, uint _emontAmount, uint _etherAmount) external;\r\n    function addTokenClaim(uint _tokenId, uint _emontAmount, uint _etherAmount) external;\r\n    \r\n    // public function\r\n    function getLandRevenue(uint _classId) constant public returns(uint _emontAmount, uint _etherAmount);\r\n    function getTokenClaim(uint _tokenId) constant public returns(uint _emontAmount, uint _etherAmount);\r\n}\r\n\r\ncontract EtheremonAdventureRevenue is BasicAccessControl {\r\n    using SafeMath for uint;\r\n    \r\n    struct PairData {\r\n        uint d1;\r\n        uint d2;\r\n    }\r\n    \r\n    address public tokenContract;\r\n    address public adventureDataContract;\r\n    address public adventureItemContract;\r\n\r\n    modifier requireTokenContract {\r\n        require(tokenContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireAdventureDataContract {\r\n        require(adventureDataContract != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier requireAdventureItemContract {\r\n        require(adventureItemContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    \r\n    function setConfig(address _tokenContract, address _adventureDataContract, address _adventureItemContract) onlyModerators public {\r\n        tokenContract = _tokenContract;\r\n        adventureDataContract = _adventureDataContract;\r\n        adventureItemContract = _adventureItemContract;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public {\r\n        // it is used in case we need to upgrade the smartcontract\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawToken(address _sendTo, uint _amount) onlyOwner requireTokenContract external {\r\n        ERC20Interface token = ERC20Interface(tokenContract);\r\n        if (_amount > token.balanceOf(address(this))) {\r\n            revert();\r\n        }\r\n        token.transfer(_sendTo, _amount);\r\n    }\r\n    // public\r\n    \r\n    function () payable public {\r\n    }\r\n    \r\n\r\n    function getEarning(uint _tokenId) constant public returns(uint _emontAmount, uint _ethAmount) {\r\n        PairData memory tokenInfo;\r\n        PairData memory currentRevenue;\r\n        PairData memory claimedRevenue;\r\n        (tokenInfo.d1, tokenInfo.d2) = EtheremonAdventureItem(adventureItemContract).getItemInfo(_tokenId);\r\n        EtheremonAdventureData data = EtheremonAdventureData(adventureDataContract);\r\n        (currentRevenue.d1, currentRevenue.d2) = data.getLandRevenue(tokenInfo.d1);\r\n        (claimedRevenue.d1, claimedRevenue.d2) = data.getTokenClaim(_tokenId);\r\n        \r\n        _emontAmount = ((currentRevenue.d1.mul(9)).div(100)).sub(claimedRevenue.d1);\r\n        _ethAmount = ((currentRevenue.d2.mul(9)).div(100)).sub(claimedRevenue.d2);\r\n    }\r\n    \r\n    function claimEarning(uint _tokenId) isActive requireTokenContract requireAdventureDataContract requireAdventureItemContract public {\r\n        EtheremonAdventureItem item = EtheremonAdventureItem(adventureItemContract);\r\n        EtheremonAdventureData data = EtheremonAdventureData(adventureDataContract);\r\n        if (item.ownerOf(_tokenId) != msg.sender) revert();\r\n        PairData memory tokenInfo;\r\n        PairData memory currentRevenue;\r\n        PairData memory claimedRevenue;\r\n        PairData memory pendingRevenue;\r\n        (tokenInfo.d1, tokenInfo.d2) = item.getItemInfo(_tokenId);\r\n        (currentRevenue.d1, currentRevenue.d2) = data.getLandRevenue(tokenInfo.d1);\r\n        (claimedRevenue.d1, claimedRevenue.d2) = data.getTokenClaim(_tokenId);\r\n        \r\n        pendingRevenue.d1 = ((currentRevenue.d1.mul(9)).div(100)).sub(claimedRevenue.d1);\r\n        pendingRevenue.d2 = ((currentRevenue.d2.mul(9)).div(100)).sub(claimedRevenue.d2);\r\n        \r\n        if (pendingRevenue.d1 == 0 && pendingRevenue.d2 == 0) revert();\r\n        data.addTokenClaim(_tokenId, pendingRevenue.d1, pendingRevenue.d2);\r\n        \r\n        if (pendingRevenue.d1 > 0) {\r\n            ERC20Interface(tokenContract).transfer(msg.sender, pendingRevenue.d1);\r\n        }\r\n        \r\n        if (pendingRevenue.d2 > 0) {\r\n            msg.sender.transfer(pendingRevenue.d2);\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"adventureItemContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_adventureDataContract\",\"type\":\"address\"},{\"name\":\"_adventureItemContract\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEarning\",\"outputs\":[{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtheremonAdventureRevenue","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://852f2c472c41154945208457258ad7ca4988f28a046af3c8b6908edb38f78bf6"}]}