{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Plus50 {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    mapping (address=>uint) public holding;\r\n    mapping (address=>uint) public percentage;\r\n    mapping (address=>uint) public time_stamp;\r\n    \r\n    address public marketing_wallet = 0x82770c9dE54e316a9eba378516A3314Bc17FAcbe;\r\n    uint public marketing_percent = 8;\r\n    \r\n    uint public max_contribution = 0.5 ether;\r\n    uint public max_percentage = 150; //150%\r\n    uint public referral_percent = 2; //2%\r\n    uint public hourly_percentage = 3125; //0.3125 % per hours\r\n    uint public payment_delay = 1 hours;\r\n    uint public count_investors = 0;\r\n    \r\n    function bytesToAddress(bytes _data) internal pure returns(address referrer) {\r\n        assembly {\r\n            referrer := mload(add(_data,0x14))\r\n        }\r\n        \r\n        return referrer;\r\n    }\r\n    \r\n    function elapsedTime()public view returns(uint) {\r\n        return now.sub(time_stamp[msg.sender]).div(payment_delay);\r\n    }\r\n    \r\n    function getBonus(uint _value)public pure  returns(uint) {\r\n        uint bonus = 0;\r\n        if(_value >= 10 ether && _value < 25 ether){\r\n            bonus = _value.mul(5).div(1000);\r\n        }else if(_value >= 25 ether && _value < 50 ether){\r\n            bonus = _value.mul(75).div(10000);\r\n        }else if(_value == 50 ether){\r\n            bonus = _value.mul(1).div(100);\r\n        }\r\n        \r\n        return bonus;\r\n    }\r\n    \r\n    function deposit() internal {\r\n        uint sum_hold = holding[msg.sender].add(msg.value);\r\n        \r\n        require(sum_hold <= max_contribution, 'Maximum Deposit 50 ether');\r\n        \r\n        if(holding[msg.sender] > 0 && elapsedTime() > 0){\r\n            pickUpCharges();\r\n        }\r\n        if (msg.data.length == 20) {\r\n            address referral = bytesToAddress(bytes(msg.data));\r\n            if(referral != msg.sender){\r\n                referral.transfer(msg.value.mul(referral_percent).div(100));\r\n            }\r\n            \r\n        }\r\n        if(holding[msg.sender] == 0){\r\n            count_investors+=1;\r\n        }\r\n        marketing_wallet.transfer(msg.value.mul(marketing_percent).div(100));\r\n        holding[msg.sender]+= msg.value.add(getBonus(msg.value));\r\n        time_stamp[msg.sender] = now;\r\n    }\r\n    \r\n    function pickUpCharges() internal {\r\n        uint hours_passed = elapsedTime();\r\n        \r\n        require(hours_passed > 0, 'You can receive payment 1 time per hour');\r\n        \r\n        uint value = (holding[msg.sender].mul(hourly_percentage).div(1000000)).mul(hours_passed);\r\n        uint total_percent = percentage[msg.sender].add(value);\r\n        uint max_percent = holding[msg.sender].mul(max_percentage).div(100);\r\n        if(total_percent > max_percent){\r\n            uint rest = total_percent - max_percent;\r\n            holding[msg.sender] = 0;\r\n            time_stamp[msg.sender] = 0;\r\n            percentage[msg.sender] = 0;\r\n            msg.sender.transfer(total_percent.sub(rest));\r\n        }else{\r\n            percentage[msg.sender] += value;\r\n            time_stamp[msg.sender] = now;\r\n            msg.sender.transfer(value);\r\n        }\r\n    }\r\n    \r\n    function reinvest()internal {\r\n        uint hours_passed = elapsedTime();\r\n        require(holding[msg.sender] > 0  && hours_passed > 0);\r\n        uint value = (holding[msg.sender].mul(hourly_percentage).div(1000000)).mul(hours_passed);\r\n        marketing_wallet.transfer(value.mul(marketing_percent).div(100));\r\n        holding[msg.sender] += value;\r\n        time_stamp[msg.sender] = now;\r\n    }\r\n\r\n    function() external payable {\r\n        if(msg.value > 0){\r\n            if(msg.value == 0.0000000001 ether){\r\n                reinvest();\r\n            }else{\r\n                deposit();\r\n            }\r\n        }else if(msg.value == 0){\r\n            require(holding[msg.sender] > 0);\r\n            pickUpCharges();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"max_contribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time_stamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count_investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hourly_percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing_percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referral_percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payment_delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Plus50","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://624669edbaf88fbb3acdcf924dfbcb28305170f032440d1f5e9ea74750e7e0bf"}]}