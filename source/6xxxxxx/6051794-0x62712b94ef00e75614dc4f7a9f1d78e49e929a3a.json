{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary IterableMapping\r\n{\r\n    struct itmap\r\n    {\r\n        mapping(address => IndexValue) data;\r\n        KeyFlag[] keys;\r\n        uint size;\r\n        \r\n    }\r\n    struct IndexValue { uint keyIndex; uint256 value; }\r\n    struct KeyFlag { address key; bool deleted; }\r\n    function insert(itmap storage self, address key, uint256 value) returns (bool replaced)\r\n    {\r\n        uint keyIndex = self.data[key].keyIndex;\r\n        self.data[key].value = value;\r\n        if (keyIndex > 0)\r\n            return true;\r\n        else\r\n        {\r\n            keyIndex = self.keys.length++;\r\n            self.data[key].keyIndex = keyIndex + 1;\r\n            self.keys[keyIndex].key = key;\r\n            self.size++;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function remove(itmap storage self, address key) returns (bool success)\r\n    {\r\n        uint keyIndex = self.data[key].keyIndex;\r\n        if (keyIndex == 0)\r\n            return false;\r\n        delete self.data[key];\r\n        self.keys[keyIndex - 1].deleted = true;\r\n        self.size --;\r\n    }\r\n    \r\n    function contains(itmap storage self, address key) returns (bool)\r\n    {\r\n        return self.data[key].keyIndex > 0;\r\n    }\r\n    \r\n    function iterate_start(itmap storage self) returns (uint keyIndex)\r\n    {\r\n        return iterate_next(self, uint(-1));\r\n    }\r\n    \r\n    function iterate_valid(itmap storage self, uint keyIndex) returns (bool)\r\n    {\r\n        return keyIndex < self.keys.length;\r\n    }\r\n    \r\n    function iterate_next(itmap storage self, uint keyIndex) returns (uint r_keyIndex)\r\n    {\r\n        keyIndex++;\r\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)\r\n            keyIndex++;\r\n        return keyIndex;\r\n    }\r\n    function iterate_get(itmap storage self, uint keyIndex) returns (address key, uint256 value)\r\n    {\r\n        key = self.keys[keyIndex].key;\r\n        value = self.data[key].value;\r\n    }\r\n}\r\n\r\n\r\ncontract EXLINKCOIN is ERC20Interface {\r\n\t\r\n\r\n\tfunction totalSupply()public constant returns (uint) {\r\n\t\treturn totalEXLCSupply;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address tokenOwner)public constant returns (uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\r\n\tfunction transfer(address to, uint tokens)public returns (bool success) {\r\n\t\tif (balances[msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\r\n            if(lockedUsers[msg.sender].lockedTokens > 0){\r\n                TryUnLockBalance(msg.sender);\r\n                if(balances[msg.sender] - tokens < lockedUsers[msg.sender].lockedTokens)\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n\t\t\tbalances[msg.sender] -= tokens;\r\n\t\t\tbalances[to] += tokens;\r\n\t\t\temit Transfer(msg.sender, to, tokens);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens)public returns (bool success) {\r\n\t\tif (balances[from] >= tokens && allowed[from].data[to].value >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {\r\n            if(lockedUsers[from].lockedTokens > 0)\r\n            {\r\n                TryUnLockBalance(from);\r\n                if(balances[from] - tokens < lockedUsers[from].lockedTokens)\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n\t\t\tbalances[from] -= tokens;\r\n\t\t\tallowed[from].data[msg.sender].value -= tokens;\r\n\t\t\tbalances[to] += tokens;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tfunction approve(address spender, uint tokens)public returns (bool success) {\r\n\t    IterableMapping.insert(allowed[msg.sender], spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction allowance(address tokenOwner, address spender)public constant returns (uint remaining) {\r\n\t\treturn allowed[tokenOwner].data[spender].value;\r\n\t}\r\n\t\r\n\t\t\r\n    string public name = \"EXLINK COIN\";\r\n    string public symbol = \"EXLC\";\r\n    uint8 public decimals = 18;\r\n\tuint256 private totalEXLCSupply = 10000000000000000000000000000;\r\n\tuint256 private _totalBalance = totalEXLCSupply;\r\n\t\r\n\tstruct LockUser{\r\n\t    uint256 lockedTokens;\r\n\t    uint lockedTime;\r\n\t    uint lockedIdx;\r\n\t}\r\n\t\r\n\t\r\n\taddress public owner = 0x0;\r\n\taddress public auther_user = 0x0;\r\n\taddress public operater = 0x0;\r\n\t\r\n    mapping (address => uint256) balances;\r\n    mapping(address => IterableMapping.itmap) allowed;\r\n\r\n\tmapping(address => LockUser) lockedUsers;\r\n\t\r\n\t\r\n \tuint  constant    private ONE_DAY_TIME_LEN = 86400;\r\n \tuint  constant    private ONE_YEAR_TIME_LEN = 31536000;\r\n\tuint32 private constant MAX_UINT32 = 0xFFFFFFFF;\r\n\t\r\n\r\n\tuint256   public creatorsTotalBalance =    1130000000000000000000000000; \r\n\tuint256   public jiGouTotalBalance =       1000000000000000000000000000;\r\n\tuint256   public icoTotalBalance =         1000000000000000000000000000;\r\n\tuint256   public mineTotalBalance =        2000000000000000000000000000;\r\n\tuint256   public marketorsTotalBalance =   685000000000000000000000000;\r\n\tuint256   public businessersTotalBalance = 685000000000000000000000000;\r\n\tuint256   public taskTotalBalance =        3500000000000000000000000000;\r\n\r\n\tuint256   public mineBalance = 0;\r\n\t\r\n\tbool public isIcoStart = false;\t\r\n\tbool public isIcoFinished = false;\r\n\tuint256 public icoPrice = 500000000000000000000000;\r\n\r\n\t\r\n\t\r\n\tuint256[] public mineBalanceArry = new uint256[](30); \r\n\tuint      public lastUnlockMineBalanceTime = 0;\r\n\tuint public dayIdx = 0;\r\n\t\r\n\tevent SendTo(uint32 indexed _idx, uint8 indexed _type, address _from, address _to, uint256 _value);\r\n\t\r\n\tuint32 sendToIdx = 0;\r\n\t\r\n\tfunction safeToNextIdx() internal{\r\n        if (sendToIdx >= MAX_UINT32){\r\n\t\t\tsendToIdx = 1;\r\n\t\t}\r\n        else\r\n        {\r\n\t\t\tsendToIdx += 1;\r\n\t\t}\r\n    }\r\n\r\n    constructor() public {\r\n\t\towner = msg.sender;\r\n\t\tmineBalanceArry[0] = 1000000000000000000000000;\r\n\t\tfor(uint i=1; i<30; i++){\r\n\t\t\tmineBalanceArry[i] = mineBalanceArry[i-1] * 99 / 100;\r\n\t\t}\r\n\t\tmineBalance = taskTotalBalance;\r\n\t\tbalances[owner] = mineBalance;\r\n\t\tlastUnlockMineBalanceTime = block.timestamp;\r\n    }\r\n\t\r\n\t\r\n\tfunction StartIco() public {\r\n\t\tif ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoStart) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tisIcoStart = true;\r\n\t\tisIcoFinished = false;\t\t\r\n\t}\r\n\t\r\n\tfunction StopIco() public {\r\n\t\tif ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoFinished) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tbalances[owner] += icoTotalBalance;\r\n\t\ticoTotalBalance = 0;\r\n\t\t\r\n\t\tisIcoStart = false;\r\n\t\tisIcoFinished = true;\r\n\t}\r\n\t\r\n\tfunction () public payable\r\n    {\r\n\t\tuint256 coin;\r\n\t\t\r\n\t\t\tif(isIcoFinished || !isIcoStart)\r\n\t\t\t{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tcoin = msg.value * icoPrice / 1 ether;\r\n\t\t\tif(coin > icoTotalBalance)\r\n\t\t\t{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\r\n\t\t\ticoTotalBalance -= coin;\r\n\t\t\t_totalBalance -= coin;\r\n\t\t\tbalances[msg.sender] += coin;\r\n\t\t\t\r\n\t\t\temit Transfer(operater, msg.sender, coin);\r\n\t\t\t\r\n\t\t\tsafeToNextIdx();\r\n\t\t\temit SendTo(sendToIdx, 2, 0x0, msg.sender, coin);\r\n\t\t\r\n    }\r\n\r\n\t\r\n\tfunction TryUnLockBalance(address target) public {\r\n\t    if(target == 0x0)\r\n\t    {\r\n\t        revert();\r\n\t    }\r\n\t    LockUser storage user = lockedUsers[target];\r\n\t    if(user.lockedIdx > 0 && user.lockedTokens > 0)\r\n\t    {\r\n\t        if(block.timestamp >= user.lockedTime)\r\n\t        {\r\n\t            if(user.lockedIdx == 1)\r\n\t            {\r\n\t                user.lockedIdx = 0;\r\n\t                user.lockedTokens = 0;\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t                uint256 append = user.lockedTokens/user.lockedIdx;\r\n\t                user.lockedTokens -= append;\r\n        \t\t\tuser.lockedIdx--;\r\n        \t\t\tuser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\r\n        \t\t\tlockedUsers[target] = user;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction QueryUnlockTime(address target) public constant returns (uint time) {\r\n\t    if(target == 0x0)\r\n\t    {\r\n\t        revert();\r\n\t    }\r\n\t    LockUser storage user = lockedUsers[target];\r\n\t    if(user.lockedIdx > 0 && user.lockedTokens > 0)\r\n\t    {\r\n\t        return user.lockedTime;\r\n\t    }\r\n\t    return 0x0;\r\n\t}\r\n\t\r\n\r\n\tfunction miningEveryDay() public{\r\n\t\tif (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\tuint day = uint((block.timestamp - lastUnlockMineBalanceTime) / ONE_DAY_TIME_LEN);\r\n\t\tif(day > 0){\r\n\t\t\tint max_while = 30;\r\n\t\t\tuint256 val;\r\n\t\t\twhile(day > 0 && max_while > 0 && mineTotalBalance > 0){\r\n\t\t\t\tmax_while--;\r\n\t\t\t\tday -= 1;\r\n\t\t\t\tdayIdx += 1;\r\n\t\t\t\tval = mineBalanceArry[(dayIdx/365) % 30];\r\n\t\t\t\tif(mineTotalBalance >= val)\r\n\t\t\t\t{\r\n\t\t\t\t\tmineBalance += val;\r\n\t\t\t\t\tmineTotalBalance -= val;\r\n\t\t\t\t\tbalances[owner] += val;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmineBalance += mineTotalBalance;\r\n\t\t\t\t\tmineTotalBalance = 0;\r\n\t\t\t\t\tbalances[owner] += mineTotalBalance;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlastUnlockMineBalanceTime = block.timestamp;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tfunction sendMinerByOwner(address _to, uint256 _value) public {\r\n\t\r\n\t\tif (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(_value > mineBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tmineBalance -= _value;\r\n\t\tbalances[owner] -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\t_totalBalance -= _value;\r\n\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 3, owner, _to, _value);\r\n\t}\r\n\r\n\tfunction sendICOByOwner(address _to, uint256 _value) public {\r\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\tif(!isIcoFinished && isIcoStart)\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\t\t\r\n\r\n\t\tif(_value > icoTotalBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n\t\ticoTotalBalance -= _value;\r\n\t\t_totalBalance -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 6, 0x0, _to, _value);\r\n\t\r\n\t}\r\n\t\r\n\tfunction sendCreatorByOwner(address _to, uint256 _value) public {\r\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_value > creatorsTotalBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tcreatorsTotalBalance -= _value;\r\n\t\t_totalBalance -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\tLockUser storage lockUser = lockedUsers[_to];\r\n\t\tlockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\r\n\t\tlockUser.lockedTokens += _value;\r\n\t\tlockUser.lockedIdx = 2;\r\n\r\n        lockedUsers[_to] = lockUser;\r\n\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 4, 0x0, _to, _value);\r\n\t}\r\n\r\n\tfunction sendJigouByOwner(address _to, uint256 _value) public {\r\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_value > jiGouTotalBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tjiGouTotalBalance -= _value;\r\n\t\t_totalBalance -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\tLockUser storage lockUser = lockedUsers[_to];\r\n\t\tlockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;\r\n\t\tlockUser.lockedTokens += _value;\r\n\t\tlockUser.lockedIdx = 1;\r\n\r\n        lockedUsers[_to] = lockUser;\r\n\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 4, 0x0, _to, _value);\r\n\t}\r\n\t\r\n\tfunction sendMarketByOwner(address _to, uint256 _value) public {\r\n\t\r\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_value > marketorsTotalBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tmarketorsTotalBalance -= _value;\r\n\t\t_totalBalance -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 7, 0x0, _to, _value);\r\n\t}\r\n\t\r\n\r\n\tfunction sendBussinessByOwner(address _to, uint256 _value) public {\r\n\t\r\n\t\tif (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_to == 0x0){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\tif(_value > businessersTotalBalance){\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tbusinessersTotalBalance -= _value;\r\n\t\t_totalBalance -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\t\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\tsafeToNextIdx();\r\n\t\temit SendTo(sendToIdx, 5, 0x0, _to, _value);\r\n\t}\r\n\t\r\n\tfunction Save() public {\r\n\t\tif (msg.sender != owner) {\r\n\t\t    revert();\r\n\t\t}\r\n\t\towner.transfer(address(this).balance);\r\n    }\r\n\t\r\n\t\r\n\tfunction changeAutherOwner(address newOwner) public {\r\n\t\tif ((msg.sender != owner && msg.sender != auther_user) || newOwner == 0x0) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    if(msg.sender != owner)\r\n\t\t    {\r\n\t\t        balances[msg.sender] = balances[owner];\r\n\t\t        for (var i = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], i); i = IterableMapping.iterate_next(allowed[owner], i))\r\n                {\r\n                    var (key, value) = IterableMapping.iterate_get(allowed[owner], i);\r\n                    IterableMapping.insert(allowed[msg.sender], key, value);\r\n                }\r\n\t\t\t    balances[owner] = 0;\r\n\t\t\t    for (var j = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], j); j = IterableMapping.iterate_next(allowed[owner], j))\r\n                {\r\n                    var (key2, value2) = IterableMapping.iterate_get(allowed[owner], j);\r\n                    IterableMapping.remove(allowed[owner], key2);\r\n                }\r\n\t\t    }\r\n\t\t\t\r\n\t\t\tauther_user = newOwner;\r\n\t\t\towner = msg.sender;\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction destruct() public {\r\n\t\tif (msg.sender != owner) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tselfdestruct(owner);\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction setOperater(address op) public {\r\n\t\tif ((msg.sender != owner && msg.sender != auther_user && msg.sender != operater) || op == 0x0) \r\n\t\t{\r\n\t\t    revert();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\toperater = op;\r\n\t\t}\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dayIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TryUnLockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMarketByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUnlockMineBalanceTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketorsTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mineBalanceArry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendMinerByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBussinessByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeAutherOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"op\",\"type\":\"address\"}],\"name\":\"setOperater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"QueryUnlockTime\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jiGouTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningEveryDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCreatorByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessersTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auther_user\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorsTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Save\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taskTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendJigouByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendICOByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_idx\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SendTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EXLINKCOIN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"IterableMapping:c65967a6E9553fa67B1453dE6A3af197265aeEf2","SwarmSource":"bzzr://fbce5b36a71eefb0ca9d62eb309dba50f06c908273e4f804635f64b564cf96c2"}]}