{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal _totalSupply;\r\n    mapping(address => uint256) internal _balanceOf;\r\n    mapping (address => mapping (address => uint256)) internal _allowance;\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0), \"Address cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySufficientBalance(address from, uint256 value) {\r\n        require(value <= _balanceOf[from], \"Insufficient balance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySufficientAllowance(address owner, address spender, uint256 value) {\r\n        require(value <= _allowance[owner][spender], \"Insufficient allowance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Transfers token to the specified address\r\n      * @param to The address to transfer to.\r\n      * @param value The amount to be transferred.\r\n      */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        onlyValidAddress(to)\r\n        onlySufficientBalance(msg.sender, value)\r\n        returns (bool)\r\n    {\r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\r\n        _balanceOf[to] = _balanceOf[to].add(value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        onlyValidAddress(to)\r\n        onlySufficientBalance(from, value)\r\n        onlySufficientAllowance(from, msg.sender, value)\r\n        returns (bool)\r\n    {\r\n        _balanceOf[from] = _balanceOf[from].sub(value);\r\n        _balanceOf[to] = _balanceOf[to].add(value);\r\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        onlyValidAddress(spender)\r\n        returns (bool)\r\n    {\r\n        _allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when _allowance[spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        onlyValidAddress(spender)\r\n        returns (bool)\r\n    {\r\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\r\n\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when _allowance[spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        onlyValidAddress(spender)\r\n        onlySufficientAllowance(msg.sender, spender, subtractedValue)\r\n        returns (bool)\r\n    {\r\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].sub(subtractedValue);\r\n\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowance[owner][spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Can only be called by the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0), \"Address cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n        onlyValidAddress(newOwner)\r\n    {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Standard token with minting\r\n * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    bool public mintingFinished;\r\n    uint256 public cap;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    modifier onlyMinting() {\r\n        require(!mintingFinished, \"Minting is already finished\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotExceedingCap(uint256 amount) {\r\n        require(_totalSupply.add(amount) <= cap, \"Total supply must not exceed cap\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _cap) public {\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates new tokens for the given address\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        onlyMinting\r\n        onlyValidAddress(to)\r\n        onlyNotExceedingCap(amount)\r\n        returns (bool)\r\n    {\r\n        mintImpl(to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates new tokens for the given addresses\r\n     * @param addresses The array of addresses that will receive the minted tokens.\r\n     * @param amounts The array of amounts of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintMany(address[] addresses, uint256[] amounts)\r\n        public\r\n        onlyOwner\r\n        onlyMinting\r\n        onlyNotExceedingCap(sum(amounts))\r\n        returns (bool)\r\n    {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"Addresses array must be the same size as amounts array\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            require(addresses[i] != address(0), \"Address cannot be zero\");\r\n            mintImpl(addresses[i], amounts[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stops minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting()\r\n        public\r\n        onlyOwner\r\n        onlyMinting\r\n        returns (bool)\r\n    {\r\n        mintingFinished = true;\r\n\r\n        emit MintFinished();\r\n\r\n        return true;\r\n    }\r\n\r\n    function mintImpl(address to, uint256 amount) private {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balanceOf[to] = _balanceOf[to].add(amount);\r\n\r\n        emit Mint(to, amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function sum(uint256[] arr) private pure returns (uint256) {\r\n        uint256 aggr = 0;\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            aggr = aggr.add(arr[i]);\r\n        }\r\n        return aggr;\r\n    }\r\n}\r\n\r\n\r\ncontract PhotochainToken is MintableToken {\r\n    string public name = \"PhotochainToken\";\r\n    string public symbol = \"PHT\";\r\n    uint256 public decimals = 18;\r\n    uint256 public cap = 120 * 10**6 * 10**decimals;\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    constructor() public MintableToken(cap) {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintMany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PhotochainToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec8b6a5f66de845c3ea4e19b7a6e2c8294d2f447631a0fec2d4f4a2e5e0b71b4"}]}