{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Followine Token (WINE). More info www.followine.io\r\n */\r\n\r\n contract Ownable {\r\n   address public owner;\r\n \r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n   /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n   constructor() internal {\r\n     owner = msg.sender;\r\n   }\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n   modifier onlyOwner() {\r\n     require(msg.sender == owner);\r\n     _;\r\n   }\r\n \r\n   /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n   function transferOwnership(address newOwner) onlyOwner public {\r\n     require(newOwner != address(0));\r\n     emit OwnershipTransferred(owner, newOwner);\r\n     owner = newOwner;\r\n   }\r\n }\r\n\r\n contract Authorizable is Ownable {\r\n   mapping(address => bool) public authorized;\r\n   mapping(address => bool) public blocked;\r\n\r\n   event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n   /**\r\n    * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\r\n    * account.\r\n    */\r\n   constructor() public {\r\n \tauthorized[msg.sender] = true;\r\n   }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the authorized.\r\n    */\r\n   modifier onlyAuthorized() {\r\n     require(authorized[msg.sender]);\r\n     _;\r\n   }\r\n\r\n  /**\r\n    * @dev Allows the current owner to set an authorization.\r\n    * @param addressAuthorized The address to change authorization.\r\n    */\r\n   function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\r\n     emit AuthorizationSet(addressAuthorized, authorization);\r\n     authorized[addressAuthorized] = authorization;\r\n   }\r\n\r\n   function setBlocked(address addressAuthorized, bool authorization) onlyOwner public {\r\n     blocked[addressAuthorized] = authorization;\r\n   }\r\n\r\n }\r\n\r\ncontract Startable is Ownable, Authorizable {\r\n  event Start();\r\n  event StopV();\r\n\r\n  bool public started = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is started.\r\n   */\r\n  modifier whenStarted() {\r\n\trequire( (started || authorized[msg.sender]) && !blocked[msg.sender] );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to start, go to normal state\r\n   */\r\n  function start() onlyOwner public {\r\n    started = true;\r\n    emit Start();\r\n  }\r\n\r\n  function stop() onlyOwner public {\r\n    started = false;\r\n    emit StopV();\r\n  }\r\n\r\n}\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token from an address to another specified address\r\n  * @param _sender The address to transfer from.\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transferFunction(address _sender, address _to, uint256 _value) internal returns (bool) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_value <= balances[_sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[_sender] = balances[_sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address (BasicToken transfer method)\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\treturn transferFunction(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract StartToken is Startable, StandardToken {\r\n    struct Pay{\r\n        uint256 date;\r\n        uint256 value;\r\n        uint256 category;\r\n    }\r\n\r\n    mapping( address => Pay[] ) log;\r\n\r\n    mapping( address => uint256) transferredCoin;\r\n\r\n\r\n  function addLog(address id, uint256 _x, uint256 _y, uint256 _z) internal {\r\n        log[id].push(Pay(_x,_y,_z));\r\n  }\r\n\r\n  function addTransferredCoin(address id, uint256 _x) private {\r\n        transferredCoin[id] = transferredCoin[id] + _x;\r\n  }\r\n\r\n  function getFreeCoin(address field) private view returns (uint256){\r\n        uint arrayLength = log[field].length;\r\n        uint256 totalValue = 0;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            uint256 date = log[field][i].date;\r\n            uint256 value = log[field][i].value;\r\n            uint256 category = log[field][i].category;\r\n            // category = 1 acquisto private sale\r\n            // category = 2 acquisto pre-ico\r\n            // category = 3 acquisto ico\r\n            // category = 4 acquisto bounty\r\n            // category = 5 acquisto airdrop\r\n            // category = 6 acquisto team\r\n            // category = 7 acquisto advisor\r\n            // category = 8 fondi bloccati per le aziende\r\n            if( category == 1 || category == 2 ){\r\n                if( (date + 750 days) <= now ){\r\n                    totalValue += value;\r\n                }else if( (date + 510 days) <= now ){\r\n                    totalValue += value.mul(60).div(100);\r\n                }else if( (date + 390 days) <= now ){\r\n                    totalValue += value.mul(30).div(100);\r\n                }\r\n            }\r\n            if( category == 3 ){\r\n                if( (date + 690 days) <= now ){\r\n                    totalValue += value;\r\n                }else if( (date + 480 days) <= now ){\r\n                    totalValue += value.mul(60).div(100);\r\n                }else if( (date + 300 days) <= now ){\r\n                    totalValue += value.mul(30).div(100);\r\n                }\r\n            }\r\n            if( category == 4 || category == 5 ){\r\n                if( (date + 720 days) <= now ){\r\n                    totalValue += value;\r\n                }else if( (date + 540 days) <= now ){\r\n                    totalValue += value.mul(75).div(100);\r\n                }else if( (date + 360 days) <= now ){\r\n                    totalValue += value.mul(50).div(100);\r\n                }\r\n            }\r\n            if( category == 6 ){\r\n                if( (date + 1020 days) <= now ){\r\n                    totalValue += value;\r\n                }else if( (date + 810 days) <= now ){\r\n                    totalValue += value.mul(70).div(100);\r\n                }else if( (date + 630 days) <= now ){\r\n                    totalValue += value.mul(40).div(100);\r\n                }else if( (date + 450 days) <= now ){\r\n                    totalValue += value.mul(20).div(100);\r\n                }\r\n            }\r\n            if( category == 7 ){\r\n                if( (date + 810 days) <= now ){\r\n                    totalValue += value;\r\n                }else if( (date + 600 days) <= now ){\r\n                    totalValue += value.mul(80).div(100);\r\n                }else if( (date + 420 days) <= now ){\r\n                    totalValue += value.mul(40).div(100);\r\n                }\r\n            }\r\n            if( category == 8 ){\r\n                uint256 numOfMonths = now.sub(date).div(60).div(60).div(24).div(30).div(6);\r\n                if( numOfMonths > 20 ){\r\n                    numOfMonths = 20;\r\n                }\r\n                uint256 perc = 5;\r\n                totalValue += value.mul((perc.mul(numOfMonths))).div(100);\r\n            }\r\n            if( category == 0 ){\r\n                totalValue += value;\r\n            }\r\n        }\r\n        totalValue = totalValue - transferredCoin[field];\r\n        return totalValue;\r\n  }\r\n\r\n  function deleteCoin(address field,uint256 val) internal {\r\n        uint arrayLength = log[field].length;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            uint256 value = log[field][i].value;\r\n            if( value >= val ){\r\n                log[field][i].value = value - val;\r\n                break;\r\n            }else{\r\n                val = val - value;\r\n                log[field][i].value = 0;\r\n            }\r\n        }\r\n  }\r\n\r\n  function getMyFreeCoin(address _addr) public constant returns(uint256) {\r\n      return getFreeCoin(_addr);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public whenStarted returns (bool) {\r\n        if( getFreeCoin(msg.sender) >= _value ){\r\n            if( super.transfer(_to, _value) ){\r\n                addLog(_to,now,_value,0);\r\n                addTransferredCoin(msg.sender,_value);\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n  }\r\n\r\n\r\n  function transferCustom(address _to, uint256 _value, uint256 _cat) onlyOwner whenStarted public returns(bool success) {\r\n\t    addLog(_to,now,_value,_cat);\r\n\t    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenStarted returns (bool) {\r\n        if( getFreeCoin(_from) >= _value ){\r\n            if( super.transferFrom(_from, _to, _value) ){\r\n                addLog(_to,now,_value,0);\r\n                addTransferredCoin(_from,_value);\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenStarted returns (bool) {\r\n      if( getFreeCoin(msg.sender) >= _value ){\r\n          return super.approve(_spender, _value);\r\n      }else{\r\n          revert();\r\n      }\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenStarted returns (bool success) {\r\n      if( getFreeCoin(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue) ){\r\n          return super.increaseApproval(_spender, _addedValue);\r\n      }\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenStarted returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n}\r\n\r\ncontract HumanStandardToken is StandardToken, StartToken {\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        approve(_spender, _value);\r\n        require(_spender.call(bytes4(keccak256(\"receiveApproval(address,uint256,bytes)\")), msg.sender, _value, _extraData));\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnToken is StandardToken, StartToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Function to burn tokens.\r\n     * @param _burner The address of token holder.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burnFunction(address _burner, uint256 _value) internal returns (bool) {\r\n        require(_value > 0);\r\n\t\trequire(_value <= balances[_burner]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_burner] = balances[_burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_burner, _value);\r\n        if( _burner != tx.origin ){\r\n            deleteCoin(_burner,_value);\r\n        }\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n\tfunction burn(uint256 _value) public returns(bool) {\r\n        return burnFunction(msg.sender, _value);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Burns tokens from one address\r\n\t* @param _from address The address which you want to burn tokens from\r\n\t* @param _value uint256 the amount of tokens to be burned\r\n\t*/\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool) {\r\n\t\trequire(_value <= allowed[_from][msg.sender]); // check if it has the budget allowed\r\n\t\tburnFunction(_from, _value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract OriginToken is Authorizable, BasicToken, BurnToken {\r\n\r\n    /**\r\n     * @dev transfer token from tx.orgin to a specified address (onlyAuthorized contract)\r\n     */\r\n    function originTransfer(address _to, uint256 _value) onlyAuthorized public returns (bool) {\r\n\t    return transferFunction(tx.origin, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from tx.orgin. (onlyAuthorized contract)\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n\tfunction originBurn(uint256 _value) onlyAuthorized public returns(bool) {\r\n        return burnFunction(tx.origin, _value);\r\n    }\r\n}\r\n\r\ncontract InterfaceProposal {\r\n\tuint256 public proposalNumber;\r\n  \tstring public proposal;\r\n  \tbool public ongoingProposal;\r\n  \tbool public investorWithdraw;\r\n  \tmapping (uint256 => proposals) registry;\r\n\r\n  \tevent TapRaise(address,uint256,uint256,string);\r\n\tevent CustomVote(address,uint256,uint256,string);\r\n  \tevent Destruct(address,uint256,uint256,string);\r\n\r\n  \tstruct proposals {\r\n\t\taddress proposalSetter;\r\n   \t\tuint256 votingStart;\r\n   \t\tuint256 votingEnd;\r\n   \t\tstring proposalName;\r\n\t\tbool proposalResult;\r\n\t\tuint256 proposalType;\r\n\t}\r\n\r\n\tfunction _setRaiseProposal() internal;\r\n\tfunction _setCustomVote(string _custom, uint256 _tt) internal;\r\n  \tfunction _setDestructProposal() internal;\r\n   \tfunction _startProposal(string _proposal, uint256 _proposalType) internal;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract VoterInterface {\r\n  \tuint256 public TotalAgreeVotes;\r\n  \tuint256 public TotalDisagreeVotes;\r\n  \tmapping (uint256 => mapping(address => bool)) VoteCast;\r\n\r\n  \tfunction _Vote(bool _vote) internal;\r\n  \tfunction _tallyVotes() internal returns (bool);\r\n}\r\n\r\ncontract proposal is InterfaceProposal, BasicToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmodifier noCurrentProposal {\r\n    \trequire(!ongoingProposal);\r\n      \trequire(balanceOf(msg.sender) >= 1000000); //1000 token\r\n      \t_;\r\n  \t}\r\n  \tmodifier currentProposal {\r\n      \trequire(ongoingProposal);\r\n      \trequire(registry[proposalNumber].votingEnd > block.timestamp);\r\n\t    _;\r\n  \t}\r\n\t// Proposal to raise Tap\r\n  \tfunction _setRaiseProposal() internal noCurrentProposal {\r\n\t\t_startProposal(\"Raise\",2);\r\n      \temit TapRaise(msg.sender, registry[proposalNumber].votingStart, registry[proposalNumber].votingEnd,\"Vote To Raise Tap\");\r\n  \t}\r\n\r\n\tfunction _setCustomVote(string _custom, uint256 _tt) internal noCurrentProposal {\r\n\t\t_startProposal(_custom,_tt);\r\n      \temit CustomVote(msg.sender, registry[proposalNumber].votingStart, registry[proposalNumber].votingEnd,_custom);\r\n  \t}\r\n\r\n\t// Proposal to destroy the DAICO\r\n  \tfunction _setDestructProposal() internal noCurrentProposal {\r\n\t\t_startProposal(\"Destruct\",1);\r\n      \temit Destruct(msg.sender, registry[proposalNumber].votingStart, registry[proposalNumber].votingEnd,\"Vote To destruct DAICO and return funds\");\r\n  \t}\r\n\r\n   \tfunction _startProposal(string _proposal, uint256 _proposalType) internal {\r\n    \tongoingProposal = true;\r\n      \tproposalNumber = proposalNumber.add(1);\r\n      \tregistry[proposalNumber].votingStart = block.timestamp;\r\n\t\tregistry[proposalNumber].proposalSetter = msg.sender;\r\n\t\tregistry[proposalNumber].proposalName = _proposal;\r\n      \tregistry[proposalNumber].votingEnd = block.timestamp.add(1296000);\r\n\t\tregistry[proposalNumber].proposalType = _proposalType;\r\n      \tproposal = _proposal;\r\n  \t}\r\n\r\n}\r\n\r\ncontract Voter is VoterInterface , proposal {\r\n\r\n\tmodifier alreadyVoted {\r\n        require(!VoteCast[proposalNumber][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function _Vote(bool _vote) internal alreadyVoted {\r\n\t\tVoteCast[proposalNumber][msg.sender] = true;\r\n\r\n\t\tif (_vote) {\r\n        \tTotalAgreeVotes += 1;\r\n       \t}else{\r\n        \tTotalDisagreeVotes += 1;\r\n       \t}\r\n\t}\r\n   \tfunction _tallyVotes() internal returns(bool) {\r\n       \tif( TotalAgreeVotes > TotalDisagreeVotes ) {\r\n           return true;\r\n       \t}else{\r\n           return false;\r\n       \t}\r\n\t}\r\n}\r\n\r\ncontract FiatContract {\r\n    function ETH(uint _id) public constant returns (uint256);\r\n  \tfunction EUR(uint _id) public constant returns (uint256);\r\n  \tfunction updatedAt(uint _id) public constant returns (uint);\r\n}\r\n\r\ncontract WINE is StandardToken, StartToken, HumanStandardToken, BurnToken, OriginToken, Voter {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tevent Withdraw(uint256 amountWei, uint256 timestamp);\r\n\r\n\tstruct refund {\r\n\t\tuint256 date;\r\n\t\tuint256 etherReceived;\r\n\t\tuint256 token;\r\n\t\tuint256 refunded;\r\n        uint256 euro;\r\n\t}\r\n\r\n    struct burnoutStruct {\r\n        address add;\r\n\t\tuint256 date;\r\n\t\tstring email;\r\n\t\tuint256 token;\r\n\t}\r\n\r\n    uint8 public decimals = 3;\r\n\r\n    string public name = \"WineCoin\";\r\n\r\n    string public symbol = \"WINE\";\r\n\r\n    uint256 public initialSupply;\r\n\r\n\tmapping (address => uint256) icoLog;\r\n\tmapping (address => refund[]) refundLog;\r\n    burnoutStruct[] internal burnoutLog;\r\n\r\n\tuint256 internal firstSale = 5000000 * 10 ** uint(decimals);\r\n\tuint256 internal preICO = 10000000 * 10 ** uint(decimals);\r\n\tuint256 internal ICO = 120000000 * 10 ** uint(decimals);\r\n\tuint256 internal ICOFinal = 0;\r\n\tuint256 internal maxICOToken = 5000000 * 10 ** uint(decimals);\r\n\r\n\tuint256 internal firstSaleStart = 1543662000;\r\n\tuint256 internal firstSaleEnd = 1546300799;\r\n\r\n\tuint256 internal preICOStart = 1546300800;\r\n\tuint256 internal preICOEnd = 1548979199;\r\n\r\n\tuint256 internal ICOStep1 = 1548979200;\r\n    uint256 internal ICOStep1E = 1549583999;\r\n\tuint256 internal ICOStep2 = 1549584000;\r\n    uint256 internal ICOStep2E = 1550188799;\r\n\tuint256 internal ICOStep3 = 1550188800;\r\n    uint256 internal ICOStep3E = 1550793599;\r\n\tuint256 internal ICOStep4 = 1550793600;\r\n    uint256 internal ICOStep4E = 1551311999;\r\n\tuint256 internal ICOStepEnd = 1551312000;\r\n\tuint256 internal ICOEnd = 1553817599;\r\n\r\n\tuint256 internal tap = 192901234567901; // 500 ether al mese (wei/sec)\r\n\tuint256 internal tempTap = 0;\r\n\tuint256 internal constant secondWithdrawTime = 1567296000;\r\n\tuint256 internal lastWithdrawTime = secondWithdrawTime;\r\n\tuint256 internal firstWithdrawA = 0;\r\n\taddress internal teamWallet = 0xb14F4c380BFF211222c18F026F3b1395F8e36F2F;\r\n\tuint256 internal softCap = 1000000; // un milione di euro\r\n    uint256 internal hardCap = 12000000; // dodici milioni di euro\r\n    uint256 internal withdrawPrice = 0;\r\n    uint256 internal investorToken = 0;\r\n    bool internal burnoutActive = false;\r\n    mapping (address => uint256) investorLogToken;\r\n    uint256 public totalEarned = 0; // totale ricevuto in euro\r\n    uint256 public totalBitcoinReceived = 0;\r\n\r\n    FiatContract internal price;\r\n\r\n    modifier isValidTokenHolder {\r\n    \trequire(balanceOf(msg.sender) > 1000 * 10 ** uint(decimals)); //1000 token\r\n      \trequire(VoteCast[proposalNumber][msg.sender] == false);\r\n      \t_;\r\n  \t}\r\n\r\n    constructor() public {\r\n        totalSupply = 250000000 * 10 ** uint(decimals);\r\n\r\n        initialSupply = totalSupply;\r\n\r\n        balances[msg.sender] = totalSupply;\r\n\r\n        price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\r\n    }\r\n\r\n    function TokenToSend(uint256 received, uint256 cost) internal returns (uint256) {\r\n        uint256 ethCent = price.EUR(0);\r\n        uint256 tokenToSendT = (received * 10 ** uint(decimals)).div(ethCent.mul(cost));\r\n        uint256 tokenToSendTC = received.div(ethCent.mul(cost));\r\n        require( tokenToSendTC.mul(cost).div(100) >= 90 );\r\n        require( totalEarned.add(tokenToSendTC.mul(cost).div(100)) <= hardCap );\r\n        totalEarned = totalEarned.add(tokenToSendTC.mul(cost).div(100));\r\n        return tokenToSendT;\r\n    }\r\n\r\n\tfunction addLogRefund(address id, uint256 _x, uint256 _y, uint256 _z, uint256 _p) internal {\r\n        refundLog[id].push(refund(_x,_y,_z,0,_p));\r\n    }\r\n\r\n    function addLogBurnout(address id, uint256 _x, string _y, uint256 _z) internal {\r\n        burnoutLog.push(burnoutStruct(id,_x,_y,_z));\r\n    }\r\n\r\n    function() public payable {\r\n\t\tuint256 am = msg.value;\r\n\t\tif( now >= firstSaleStart && now <= firstSaleEnd ){\r\n\t        uint256 token = TokenToSend(am,3);\r\n\t\t\tif( token <= firstSale ){\r\n\t\t        addLog(msg.sender,now,token,1);\r\n\t\t        transferFunction(owner,msg.sender, token);\r\n\t\t\t\tfirstSale = firstSale.sub(token);\r\n                investorToken = investorToken.add(token);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token);\r\n                uint256 tm = token / 10 ** uint256(decimals);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token, tm.mul(3).div(100) );\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= preICOStart && now <= preICOEnd ){\r\n\t        uint256 token1 = TokenToSend(am,4);\r\n\t\t\tif( token1 <= preICO ){\r\n\t\t        addLog(msg.sender,now,token1,2);\r\n\t\t        transferFunction(owner,msg.sender, token1);\r\n                investorToken = investorToken.add(token1);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token1);\r\n\t\t\t\tpreICO = preICO.sub(token1);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token1, (token1 / 10 ** uint(decimals)).mul(4).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= ICOStep1 && now <= ICOStep1E ){\r\n\t        uint256 token2 = TokenToSend(am,5);\r\n\t\t\tif( ( icoLog[msg.sender].add(token2) ) <= maxICOToken && token2 <= ICO ){\r\n\t\t\t\ticoLog[msg.sender] = icoLog[msg.sender].add(token2);\r\n\t\t        addLog(msg.sender,now,token2,3);\r\n\t\t        transferFunction(owner,msg.sender, token2);\r\n                investorToken = investorToken.add(token2);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token2);\r\n\t\t\t\tICO = ICO.sub(token2);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token2, (token2 / 10 ** uint(decimals)).mul(5).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= ICOStep2 && now <= ICOStep2E ){\r\n\t        uint256 token3 = TokenToSend(am,6);\r\n\t\t\tif( ( icoLog[msg.sender].add(token3) ) <= maxICOToken && token3 <= ICO ){\r\n\t\t\t\ticoLog[msg.sender] = icoLog[msg.sender].add(token3);\r\n\t\t        addLog(msg.sender,now,token3,3);\r\n\t\t        transferFunction(owner,msg.sender, token3);\r\n                investorToken = investorToken.add(token3);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token3);\r\n\t\t\t\tICO = ICO.sub(token3);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token3, (token3 / 10 ** uint(decimals)).mul(6).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= ICOStep3 && now <= ICOStep3E ){\r\n\t        uint256 token4 = TokenToSend(am,7);\r\n\t\t\tif( ( icoLog[msg.sender].add(token4) ) <= maxICOToken && token4 <= ICO ){\r\n\t\t\t\ticoLog[msg.sender] = icoLog[msg.sender].add(token4);\r\n\t\t        addLog(msg.sender,now,token4,3);\r\n\t\t        transferFunction(owner,msg.sender, token4);\r\n                investorToken = investorToken.add(token4);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token4);\r\n\t\t\t\tICO = ICO.sub(token4);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token4, (token4 / 10 ** uint(decimals)).mul(7).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= ICOStep4 && now <= ICOStep4E ){\r\n\t        uint256 token5 = TokenToSend(am,8);\r\n\t\t\tif( ( icoLog[msg.sender].add(token5) ) <= maxICOToken && token5 <= ICO ){\r\n\t\t\t\ticoLog[msg.sender] = icoLog[msg.sender].add(token5);\r\n\t\t        addLog(msg.sender,now,token5,3);\r\n\t\t        transferFunction(owner,msg.sender, token5);\r\n                investorToken = investorToken.add(token5);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token5);\r\n\t\t\t\tICO = ICO.sub(token5);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token5, (token5 / 10 ** uint(decimals)).mul(8).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else if( now >= ICOStepEnd && now <= ICOEnd ){\r\n\t        uint256 token6 = TokenToSend(am,10);\r\n            if( ICOFinal <= 0 ){\r\n                ICOFinal = firstSale.add(preICO).add(ICO);\r\n                firstSale = 0;\r\n                preICO = 0;\r\n                ICO = 0;\r\n            }\r\n\t\t\tif( ( icoLog[msg.sender].add(token6) ) <= maxICOToken && token6 <= ICOFinal ){\r\n\t\t\t\ticoLog[msg.sender] = icoLog[msg.sender].add(token6);\r\n\t\t        addLog(msg.sender,now,token6,3);\r\n\t\t        transferFunction(owner,msg.sender, token6);\r\n\t\t\t\tICOFinal = ICOFinal.sub(token6);\r\n                investorToken = investorToken.add(token6);\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].add(token6);\r\n\t\t\t\taddLogRefund(msg.sender, now, am, token6, (token6 / 10 ** uint(decimals)).mul(10).div(100));\r\n\t\t\t}else{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\trevert();\r\n\t\t}\r\n    }\r\n\r\n\tfunction firstWithdraw() public onlyOwner {\r\n        require(!investorWithdraw);\r\n        require(firstWithdrawA == 0);\r\n\t\trequire(now >= ICOEnd);\r\n        require(totalEarned >= softCap);\r\n        uint256 softCapInEther = ((price.EUR(0)).mul(100)).mul(softCap);\r\n        uint256 amount = softCapInEther.div(2);\r\n        if( amount > address(this).balance ){\r\n            amount = address(this).balance;\r\n        }\r\n        firstWithdrawA = 1;\r\n        teamWallet.transfer(amount);\r\n        uint256 amBlocked = 62500000 * 10 ** uint(decimals);\r\n        amBlocked = amBlocked.add(ICOFinal);\r\n        ICOFinal = 0;\r\n        addLog(teamWallet,now,amBlocked,8);\r\n        transferFunction(owner,teamWallet,amBlocked);\r\n        emit Withdraw(amount, now);\r\n    }\r\n\r\n\tfunction calcTapAmount() internal view returns(uint256) {\r\n        uint256 amount = now.sub(lastWithdrawTime).mul(tap);\r\n        if(address(this).balance < amount) {\r\n            amount = address(this).balance;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n\tfunction withdraw() public onlyOwner {\r\n        require(!investorWithdraw);\r\n        require(firstWithdrawA == 1);\r\n\t\trequire(now >= secondWithdrawTime);\r\n        uint256 amount = calcTapAmount();\r\n        lastWithdrawTime = now;\r\n        teamWallet.transfer(amount);\r\n        emit Withdraw(amount, now);\r\n    }\r\n\r\n\tfunction _modTapProposal(uint256 _tap) public {\r\n        require(now >= ICOEnd);\r\n        TotalAgreeVotes = 0;\r\n\t  \tTotalDisagreeVotes = 0;\r\n    \t_setRaiseProposal();\r\n    \ttempTap = _tap;\r\n\t}\r\n\tfunction Armageddon() public {\r\n        require(now >= ICOEnd);\r\n        TotalAgreeVotes = 0;\r\n\t  \tTotalDisagreeVotes = 0;\r\n    \t_setDestructProposal();\r\n\t}\r\n\tfunction _customProposal(string _proposal,uint256 _typeProposal) public onlyOwner { // impostare il _typeProposal a 3 per la funzione burnout, impostare a zero per le altre proposte\r\n        require(now >= ICOEnd);\r\n        TotalAgreeVotes = 0;\r\n\t  \tTotalDisagreeVotes = 0;\r\n    \t_setCustomVote(_proposal,_typeProposal);\r\n\t}\r\n\r\n\tfunction _ProposalVote(bool _vote) public currentProposal isValidTokenHolder {\r\n    \t_Vote(_vote);\r\n\t}\r\n\r\n\tfunction _tallyingVotes() public {\r\n    \trequire(now > registry[proposalNumber].votingEnd);\r\n    \tbool result = _tallyVotes();\r\n        registry[proposalNumber].proposalResult = result;\r\n    \t_afterVoteAction(result);\r\n\t}\r\n\r\n\tfunction _afterVoteAction(bool result) internal {\r\n    \tif(result && registry[proposalNumber].proposalType == 2 ) {\r\n        \ttap = tempTap;\r\n            tempTap = 0;\r\n          \tongoingProposal = false;\r\n    \t}else if (result && registry[proposalNumber].proposalType == 1 ) {\r\n        \tinvestorWithdraw = true;\r\n            withdrawPrice = address(this).balance / investorToken;\r\n        \tongoingProposal = false;\r\n    \t}else if (result && registry[proposalNumber].proposalType == 3 ) {\r\n\t\t\tburnoutActive = true;\r\n        \tongoingProposal = false;\r\n    \t}else{\r\n        \tongoingProposal = false;\r\n    \t}\r\n\t}\r\n\r\n    function burnout(string email) public {\r\n        require(burnoutActive);\r\n        uint256 val = balanceOf(msg.sender);\r\n        burn(val);\r\n        addLogBurnout(msg.sender, now, email, val);\r\n    }\r\n\r\n    function getBurnout(uint256 id) public onlyOwner constant returns (string __email, uint256 __val, address __add, uint256 __date) {\r\n        return (burnoutLog[id].email, burnoutLog[id].token, burnoutLog[id].add, burnoutLog[id].date);\r\n    }\r\n\r\n    function refundEther(uint _amountP) public {\r\n        require(balanceOf(msg.sender) >= _amountP);\r\n        if( investorWithdraw == true ){\r\n            if( investorLogToken[msg.sender] >= _amountP ){\r\n                investorLogToken[msg.sender] = investorLogToken[msg.sender].sub(_amountP);\r\n                burn(_amountP);\r\n                uint256 revenue = _amountP * withdrawPrice;\r\n                msg.sender.transfer(revenue);\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            uint256 refundable = 0;\r\n            uint256 arrayLength = refundLog[msg.sender].length;\r\n            for (uint256 e=0; e<arrayLength; e++){\r\n                if( now <= (refundLog[msg.sender][e].date).add(1296000) ){\r\n                    if( refundLog[msg.sender][e].refunded == 0 ){\r\n                        refundable = refundable.add(refundLog[msg.sender][e].token);\r\n                    }\r\n                }\r\n            }\r\n            if( refundable >= _amountP ){\r\n                balances[owner] += _amountP;\r\n                balances[msg.sender] -= _amountP;\r\n                uint256 amountPrev = _amountP;\r\n                for (uint256 i=0; i<arrayLength; i++){\r\n                    if( now <= (refundLog[msg.sender][i].date).add(1296000) ){\r\n                        if( refundLog[msg.sender][i].refunded == 0 ){\r\n                            if( refundLog[msg.sender][i].token > amountPrev ){\r\n                                uint256 ethTT = refundLog[msg.sender][i].token / 10 ** uint(decimals);\r\n                                uint256 ethT = (refundLog[msg.sender][i].etherReceived).div(ethTT * 10 ** uint(decimals));\r\n                                msg.sender.transfer(ethT.mul(amountPrev).sub(1 wei));\r\n                                refundLog[msg.sender][i].etherReceived = (refundLog[msg.sender][i].etherReceived).sub(ethT.mul(amountPrev).sub(1 wei));\r\n                                refundLog[msg.sender][i].token = (refundLog[msg.sender][i].token).sub(amountPrev);\r\n                                investorLogToken[msg.sender] = investorLogToken[msg.sender].sub(amountPrev);\r\n                                amountPrev = 0;\r\n                                break;\r\n                            }else{\r\n                                msg.sender.transfer(refundLog[msg.sender][i].etherReceived);\r\n                                refundLog[msg.sender][i].refunded = 1;\r\n                                amountPrev = amountPrev.sub(refundLog[msg.sender][i].token);\r\n                                totalEarned = totalEarned.sub(refundLog[msg.sender][i].euro);\r\n                                investorLogToken[msg.sender] = investorLogToken[msg.sender].sub(amountPrev);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                emit Transfer(msg.sender, this, _amountP);\r\n            }else{\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    function addBitcoin(uint256 btc, uint256 eur) public onlyOwner {\r\n        totalBitcoinReceived = totalBitcoinReceived.add(btc);\r\n        totalEarned = totalEarned.add(eur);\r\n    }\r\n\r\n    function removeBitcoin(uint256 btc, uint256 eur) public onlyOwner {\r\n        totalBitcoinReceived = totalBitcoinReceived.sub(btc);\r\n        totalEarned = totalEarned.sub(eur);\r\n    }\r\n\r\n    function historyOfProposal(uint256 _id) public constant returns (string _name, bool _result) {\r\n        return (registry[_id].proposalName, registry[_id].proposalResult);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"setBlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"_ProposalVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"originTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"btc\",\"type\":\"uint256\"},{\"name\":\"eur\",\"type\":\"uint256\"}],\"name\":\"removeBitcoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ongoingProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"originBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMyFreeCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBurnout\",\"outputs\":[{\"name\":\"__email\",\"type\":\"string\"},{\"name\":\"__val\",\"type\":\"uint256\"},{\"name\":\"__add\",\"type\":\"address\"},{\"name\":\"__date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBitcoinReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalAgreeVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalDisagreeVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"string\"},{\"name\":\"_typeProposal\",\"type\":\"uint256\"}],\"name\":\"_customProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_cat\",\"type\":\"uint256\"}],\"name\":\"transferCustom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_tallyingVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"btc\",\"type\":\"uint256\"},{\"name\":\"eur\",\"type\":\"uint256\"}],\"name\":\"addBitcoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tap\",\"type\":\"uint256\"}],\"name\":\"_modTapProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"historyOfProposal\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"firstWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Armageddon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"email\",\"type\":\"string\"}],\"name\":\"burnout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountP\",\"type\":\"uint256\"}],\"name\":\"refundEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"TapRaise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"CustomVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"Destruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressAuthorized\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"AuthorizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WINE","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ad9c238110bfbd9c54e5cbaa1856d9d7b149bab222fb1bc8f9091b384837049"}]}