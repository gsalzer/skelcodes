{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n// File: contracts/MonethaUsersClaimStorage.sol\r\n\r\n/**\r\n *  @title MonethaUsersClaimStorage\r\n *\r\n *  MonethaUsersClaimStorage is a storage contract. \r\n *  It will be used by MonethaUsersClaimHandler to update and delete user claim. \r\n */\r\ncontract MonethaUsersClaimStorage is Contactable {\r\n\r\n    string constant VERSION = \"0.1\";\r\n    \r\n    // claimedTokens stores tokens claimed by the user.\r\n    mapping (address => uint256) public claimedTokens;\r\n\r\n    event UpdatedClaim(address indexed _userAddress, uint256 _claimedTokens, bool _isDeleted);\r\n    event DeletedClaim(address indexed _userAddress, uint256 _unclaimedTokens, bool _isDeleted);\r\n\r\n    /**\r\n     *  updateUserClaim updates user claim status and adds token to his wallet\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _tokens corresponds to user's token that is to be claimed.\r\n     */\r\n    function updateUserClaim(address _userAddress, uint256 _tokens)\r\n        external onlyOwner returns (bool)\r\n    {\r\n        claimedTokens[_userAddress] = claimedTokens[_userAddress] + _tokens;\r\n\r\n        emit UpdatedClaim(_userAddress, _tokens, false);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  updateUserClaimInBulk updates multiple users claim status and adds token to their wallet\r\n     */\r\n    function updateUserClaimInBulk(address[] _userAddresses, uint256[] _tokens)\r\n        external onlyOwner returns (bool)\r\n    {\r\n        require(_userAddresses.length == _tokens.length);\r\n\r\n        for (uint16 i = 0; i < _userAddresses.length; i++) {\r\n            claimedTokens[_userAddresses[i]] = claimedTokens[_userAddresses[i]] + _tokens[i];\r\n\r\n            emit UpdatedClaim(_userAddresses[i], _tokens[i], false);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  deleteUserClaim deletes user account\r\n     *  @param _userAddress corresponds to address of user's wallet\r\n     */\r\n    function deleteUserClaim(address _userAddress)\r\n        external onlyOwner returns (bool)\r\n    {\r\n        delete claimedTokens[_userAddress];\r\n\r\n        emit DeletedClaim(_userAddress, 0, true);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  deleteUserClaimInBulk deletes user account in bulk\r\n     */\r\n    function deleteUserClaimInBulk(address[] _userAddresses)\r\n        external onlyOwner returns (bool)\r\n    {\r\n        for (uint16 i = 0; i < _userAddresses.length; i++) {\r\n            delete claimedTokens[_userAddresses[i]];\r\n\r\n            emit DeletedClaim(_userAddresses[i], 0, true);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"}],\"name\":\"deleteUserClaimInBulk\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"updateUserClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteUserClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"updateUserClaimInBulk\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_claimedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isDeleted\",\"type\":\"bool\"}],\"name\":\"UpdatedClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unclaimedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isDeleted\",\"type\":\"bool\"}],\"name\":\"DeletedClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaUsersClaimStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28f88dc946c702ac908091c0e21dc3b1c93ca702ff82421b27a22c2f81eb792c"}]}