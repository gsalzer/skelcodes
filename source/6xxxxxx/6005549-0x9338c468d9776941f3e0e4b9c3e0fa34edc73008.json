{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n  function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x - y;\r\n    assert(z <= x);\r\n    return z;\r\n  }\r\n\r\n  function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x + y;\r\n    assert(z >= x);\r\n    return z;\r\n  }\r\n\t\r\n  function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x / y;\r\n    return z;\r\n  }\r\n\t\r\n  function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x * y;\r\n    assert(x == 0 || z / x == y);\r\n    return z;\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x <= y ? x : y;\r\n    return z;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    uint256 z = x >= y ? x : y;\r\n    return z;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Standard ERC223 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/223\r\n * @dev https://github.com/Dexaran/ERC223-token-standard\r\n */\r\ncontract StandardToken is ERC223, SafeMath{\r\n\t\r\n  mapping(address => uint) balances;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  uint256 public totalSupply;\r\n  \r\n  bool public stopped = false;\r\n  \r\n  modifier isRunning {\r\n    assert(!stopped);\r\n    _;\r\n  }\r\n\r\n  // Function to access name of token .\r\n  function name() public view returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() public view returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() public view returns (uint _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n  \r\n  \r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n  \r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n  \r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title YouGive contract token\r\n * @dev \r\n */\r\ncontract YouGive is StandardToken, Ownable {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  \r\n  /* Name and symbol were updated */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n  \r\n  /**\r\n   * @dev Construct the token.\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _name Token name \r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _addressFounder token distribution address\r\n   */\r\n  function YouGive(uint256 _initialSupply, uint _decimals, string _name, string _symbol, address _addressFounder) public {\r\n    \r\n    totalSupply = _initialSupply;\r\n    decimals = _decimals;\r\n    name = _name;\r\n    symbol = _symbol;\r\n    \r\n    balances[_addressFounder] = totalSupply;\r\n    bytes memory empty;\r\n    emit Transfer(0x0, _addressFounder, balances[_addressFounder], empty);\r\n  }\r\n  \r\n  function stop() public onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  function start() public onlyOwner {\r\n    stopped = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol, uint256 totalSupply_) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    totalSupply = totalSupply_;\r\n    emit UpdatedTokenInformation(name, symbol);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_addressFounder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"YouGive","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000066720b3000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007b6b023e887ea4621433b46f2c2e87932459595a0000000000000000000000000000000000000000000000000000000000000007596f75476976650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035947540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2b270ce553c2f727b83fd82410aaffeb80d5db956b4f9b6aec891af69a5c47e1"}]}