{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n\r\n    https://zethr.io https://zethr.io https://zethr.io https://zethr.io https://zethr.io\r\n\r\n\r\n                          ███████╗███████╗████████╗██╗  ██╗██████╗\r\n                          ╚══███╔╝██╔════╝╚══██╔══╝██║  ██║██╔══██╗\r\n                            ███╔╝ █████╗     ██║   ███████║██████╔╝\r\n                           ███╔╝  ██╔══╝     ██║   ██╔══██║██╔══██╗\r\n                          ███████╗███████╗   ██║   ██║  ██║██║  ██║\r\n                          ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝\r\n\r\n\r\n.------..------.     .------..------..------.     .------..------..------..------..------.\r\n|B.--. ||E.--. |.-.  |T.--. ||H.--. ||E.--. |.-.  |H.--. ||O.--. ||U.--. ||S.--. ||E.--. |\r\n| :(): || (\\/) (( )) | :/\\: || :/\\: || (\\/) (( )) | :/\\: || :/\\: || (\\/) || :/\\: || (\\/) |\r\n| ()() || :\\/: |'-.-.| (__) || (__) || :\\/: |'-.-.| (__) || :\\/: || :\\/: || :\\/: || :\\/: |\r\n| '--'B|| '--'E| (( )) '--'T|| '--'H|| '--'E| (( )) '--'H|| '--'O|| '--'U|| '--'S|| '--'E|\r\n`------'`------'  '-'`------'`------'`------'  '-'`------'`------'`------'`------'`------'\r\n\r\nAn interactive, variable-dividend rate contract with an ICO-capped price floor and collectibles.\r\n\r\nBankroll contract, containing tokens purchased from all dividend-card profit and ICO dividends.\r\nActs as token repository for games on the Zethr platform.\r\n\r\n\r\nCredits\r\n=======\r\n\r\nAnalysis:\r\n    blurr\r\n    Randall\r\n\r\nContract Developers:\r\n    Etherguy\r\n    klob\r\n    Norsefire\r\n\r\nFront-End Design:\r\n    cryptodude\r\n    oguzhanox\r\n    TropicalRogue\r\n\r\n**/\r\n\r\ncontract ZTHInterface {\r\n        function buyAndSetDivPercentage(address _referredBy, uint8 _divChoice, string providedUnhashedPass) public payable returns (uint);\r\n        function balanceOf(address who) public view returns (uint);\r\n        function transfer(address _to, uint _value)     public returns (bool);\r\n        function transferFrom(address _from, address _toAddress, uint _amountOfTokens) public returns (bool);\r\n        function exit() public;\r\n        function sell(uint amountOfTokens) public;\r\n        function withdraw(address _recipient) public;\r\n}\r\n\r\ncontract ERC223Receiving {\r\n    function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract ZethrBankroll is ERC223Receiving {\r\n    using SafeMath for uint;\r\n\r\n    /*=================================\r\n    =              EVENTS            =\r\n    =================================*/\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event WhiteListAddition(address indexed contractAddress);\r\n    event WhiteListRemoval(address indexed contractAddress);\r\n    event RequirementChange(uint required);\r\n    event DevWithdraw(uint amountTotal, uint amountPerPerson);\r\n    event EtherLogged(uint amountReceived, address sender);\r\n    event BankrollInvest(uint amountReceived);\r\n    event DailyTokenAdmin(address gameContract);\r\n    event DailyTokensSent(address gameContract, uint tokens);\r\n    event DailyTokensReceived(address gameContract, uint tokens);\r\n\r\n    /*=================================\r\n    =        WITHDRAWAL CONSTANTS     =\r\n    =================================*/\r\n\r\n    uint constant public MAX_OWNER_COUNT = 10;\r\n    uint constant public MAX_WITHDRAW_PCT_DAILY = 15;\r\n    uint constant public MAX_WITHDRAW_PCT_TX = 5;\r\n    uint constant internal resetTimer = 1 days;\r\n\r\n    /*=================================\r\n    =          ZTH INTERFACE          =\r\n    =================================*/\r\n\r\n    address internal zethrAddress;\r\n    ZTHInterface public ZTHTKN;\r\n\r\n    /*=================================\r\n    =             VARIABLES           =\r\n    =================================*/\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    mapping (address => bool) public isWhitelisted;\r\n    mapping (address => uint) public dailyTokensPerContract;\r\n    address internal divCardAddress;\r\n    address[] public owners;\r\n    address[] public whiteListedContracts;\r\n    uint public required;\r\n    uint public transactionCount;\r\n    uint internal dailyResetTime;\r\n    uint internal dailyTknLimit;\r\n    uint internal tknsDispensedToday;\r\n    bool internal reEntered = false;\r\n\r\n    /*=================================\r\n    =         CUSTOM CONSTRUCTS       =\r\n    =================================*/\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n    }\r\n\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier contractIsNotWhiteListed(address contractAddress) {\r\n        if (isWhitelisted[contractAddress])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier contractIsWhiteListed(address contractAddress) {\r\n        if (!isWhitelisted[contractAddress])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier isAnOwner() {\r\n        address caller = msg.sender;\r\n        if (!isOwner[caller])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].destination == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (   ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /*=================================\r\n    =          LIST OF OWNERS         =\r\n    =================================*/\r\n\r\n    /*\r\n        This list is for reference/identification purposes only, and comprises the eight core Zethr developers.\r\n        For game contracts to be listed, they must be approved by a majority (i.e. currently five) of the owners.\r\n        Contracts can be delisted in an emergency by a single owner.\r\n\r\n        0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae // Norsefire\r\n        0x11e52c75998fe2E7928B191bfc5B25937Ca16741 // klob\r\n        0x20C945800de43394F70D789874a4daC9cFA57451 // Etherguy\r\n        0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB // blurr\r\n        0x8537aa2911b193e5B377938A723D805bb0865670 // oguzhanox\r\n        0x9D221b2100CbE5F05a0d2048E2556a6Df6f9a6C3 // Randall\r\n        0x71009e9E4e5e68e77ECc7ef2f2E95cbD98c6E696 // cryptodude\r\n        0xDa83156106c4dba7A26E9bF2Ca91E273350aa551 // TropicalRogue\r\n    */\r\n\r\n\r\n    /*=================================\r\n    =         PUBLIC FUNCTIONS        =\r\n    =================================*/\r\n\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor (address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0)\r\n                revert();\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n\r\n        dailyResetTime = now - (1 days);\r\n    }\r\n\r\n    /** Testing only.\r\n    function exitAll()\r\n        public\r\n    {\r\n        uint tokenBalance = ZTHTKN.balanceOf(address(this));\r\n        ZTHTKN.sell(tokenBalance - 1e18);\r\n        ZTHTKN.sell(1e18);\r\n        ZTHTKN.withdraw(address(0x0));\r\n    }\r\n    **/\r\n\r\n    function addZethrAddresses(address _zethr, address _divcards)\r\n        public\r\n        isAnOwner\r\n    {\r\n        zethrAddress   = _zethr;\r\n        divCardAddress = _divcards;\r\n        ZTHTKN = ZTHInterface(zethrAddress);\r\n    }\r\n\r\n    /// @dev Fallback function allows Ether to be deposited.\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n\r\n    }\r\n\r\n    uint NonICOBuyins;\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n    {\r\n        NonICOBuyins = NonICOBuyins.add(msg.value);\r\n    }\r\n\r\n    /// @dev Function to buy tokens with contract eth balance.\r\n    function buyTokens()\r\n        public\r\n        payable\r\n        isAnOwner\r\n    {\r\n        uint savings = address(this).balance;\r\n        if (savings > 0.01 ether) {\r\n            ZTHTKN.buyAndSetDivPercentage.value(savings)(address(0x0), 33, \"\");\r\n            emit BankrollInvest(savings);\r\n        }\r\n        else {\r\n            emit EtherLogged(msg.value, msg.sender);\r\n        }\r\n    }\r\n\r\n\t\tfunction tokenFallback(address /*_from*/, uint /*_amountOfTokens*/, bytes /*_data*/) public returns (bool) {\r\n\t\t\t// Nothing, for now. Just receives tokens.\r\n\t\t}\t\r\n\r\n    /// @dev Calculates if an amount of tokens exceeds the aggregate daily limit of 15% of contract\r\n    ///        balance or 5% of the contract balance on its own.\r\n    function permissibleTokenWithdrawal(uint _toWithdraw)\r\n        public\r\n        returns(bool)\r\n    {\r\n        uint currentTime     = now;\r\n        uint tokenBalance    = ZTHTKN.balanceOf(address(this));\r\n        uint maxPerTx        = (tokenBalance.mul(MAX_WITHDRAW_PCT_TX)).div(100);\r\n\r\n        require (_toWithdraw <= maxPerTx);\r\n\r\n        if (currentTime - dailyResetTime >= resetTimer)\r\n            {\r\n                dailyResetTime     = currentTime;\r\n                dailyTknLimit      = (tokenBalance.mul(MAX_WITHDRAW_PCT_DAILY)).div(100);\r\n                tknsDispensedToday = _toWithdraw;\r\n                return true;\r\n            }\r\n        else\r\n            {\r\n                if (tknsDispensedToday.add(_toWithdraw) <= dailyTknLimit)\r\n                    {\r\n                        tknsDispensedToday += _toWithdraw;\r\n                        return true;\r\n                    }\r\n                else { return false; }\r\n            }\r\n    }\r\n\r\n    /// @dev Allows us to set the daily Token Limit\r\n    function setDailyTokenLimit(uint limit)\r\n      public\r\n      isAnOwner\r\n    {\r\n      dailyTknLimit = limit;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        validRequirement(owners.length, required)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txToExecute = transactions[transactionId];\r\n            txToExecute.executed = true;\r\n            if (txToExecute.destination.call.value(txToExecute.value)(txToExecute.data))\r\n                emit Execution(transactionId);\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                txToExecute.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*=================================\r\n    =        OPERATOR FUNCTIONS       =\r\n    =================================*/\r\n\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n\r\n    // Additions for Bankroll\r\n    function whiteListContract(address contractAddress)\r\n        public\r\n        isAnOwner\r\n        contractIsNotWhiteListed(contractAddress)\r\n        notNull(contractAddress)\r\n    {\r\n        isWhitelisted[contractAddress] = true;\r\n        whiteListedContracts.push(contractAddress);\r\n        // We set the daily tokens for a particular contract in a separate call.\r\n        dailyTokensPerContract[contractAddress] = 0;\r\n        emit WhiteListAddition(contractAddress);\r\n    }\r\n\r\n    // Remove a whitelisted contract. This is an exception to the norm in that\r\n    // it can be invoked directly by any owner, in the event that a game is found\r\n    // to be bugged or otherwise faulty, so it can be shut down as an emergency measure.\r\n    // Iterates through the whitelisted contracts to find contractAddress,\r\n    //  then swaps it with the last address in the list - then decrements length\r\n    function deWhiteListContract(address contractAddress)\r\n        public\r\n        isAnOwner\r\n        contractIsWhiteListed(contractAddress)\r\n    {\r\n        isWhitelisted[contractAddress] = false;\r\n        for (uint i=0; i < whiteListedContracts.length - 1; i++)\r\n            if (whiteListedContracts[i] == contractAddress) {\r\n                whiteListedContracts[i] = owners[whiteListedContracts.length - 1];\r\n                break;\r\n            }\r\n\r\n        whiteListedContracts.length -= 1;\r\n\r\n        emit WhiteListRemoval(contractAddress);\r\n    }\r\n\r\n     function contractTokenWithdraw(uint amount, address target) public\r\n        contractIsWhiteListed(msg.sender)\r\n    {\r\n        require(isWhitelisted[msg.sender]);\r\n        require(ZTHTKN.transfer(target, amount));\r\n    }\r\n\r\n    // Alters the amount of tokens allocated to a game contract on a daily basis.\r\n    function alterTokenGrant(address _contract, uint _newAmount)\r\n        public\r\n        isAnOwner\r\n        contractIsWhiteListed(_contract)\r\n    {\r\n        dailyTokensPerContract[_contract] = _newAmount;\r\n    }\r\n\r\n    function queryTokenGrant(address _contract)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return dailyTokensPerContract[_contract];\r\n    }\r\n\r\n    // Function to be run by an owner (ideally on a cron job) which performs daily\r\n    // token collection and dispersal for all whitelisted contracts.\r\n    function dailyAccounting()\r\n        public\r\n        isAnOwner\r\n    {\r\n        for (uint i=0; i < whiteListedContracts.length; i++)\r\n            {\r\n                address _contract = whiteListedContracts[i];\r\n                if ( dailyTokensPerContract[_contract] > 0 )\r\n                    {\r\n                        allocateTokens(_contract);\r\n                        emit DailyTokenAdmin(_contract);\r\n                    }\r\n            }\r\n    }\r\n\r\n    // In the event that we want to manually take tokens back from a whitelisted contract,\r\n    // we can do so.\r\n    function retrieveTokens(address _contract, uint _amount)\r\n        public\r\n        isAnOwner\r\n        contractIsWhiteListed(_contract)\r\n    {\r\n        require(ZTHTKN.transferFrom(_contract, address(this), _amount));\r\n    }\r\n\r\n    // Dispenses daily amount of ZTH to whitelisted contract, or retrieves the excess.\r\n    // Block withdraws greater than MAX_WITHDRAW_PCT_TX of Zethr token balance.\r\n    // (May require occasional adjusting of the daily token allocation for contracts.)\r\n    function allocateTokens(address _contract)\r\n        public\r\n        isAnOwner\r\n        contractIsWhiteListed(_contract)\r\n    {\r\n        uint dailyAmount = dailyTokensPerContract[_contract];\r\n        uint zthPresent  = ZTHTKN.balanceOf(_contract);\r\n\r\n        // Make sure that tokens aren't sent to a contract which is in the black.\r\n        if (zthPresent <= dailyAmount)\r\n        {\r\n            // We need to send tokens over, make sure it's a permitted amount, and then send.\r\n            uint toDispense  = dailyAmount.sub(zthPresent);\r\n\r\n            // Make sure amount is <= tokenbalance*MAX_WITHDRAW_PCT_TX\r\n            require(permissibleTokenWithdrawal(toDispense));\r\n\r\n            require(ZTHTKN.transfer(_contract, toDispense));\r\n            emit DailyTokensSent(_contract, toDispense);\r\n        } else\r\n        {\r\n            // The contract in question has made a profit: retrieve the excess tokens.\r\n            uint toRetrieve = zthPresent.sub(dailyAmount);\r\n            require(ZTHTKN.transferFrom(_contract, address(this), toRetrieve));\r\n            emit DailyTokensReceived(_contract, toRetrieve);\r\n\r\n        }\r\n        emit DailyTokenAdmin(_contract);\r\n    }\r\n\r\n    // Dev withdrawal of tokens - splits equally among all owners of contract\r\n    function devTokenWithdraw(uint amount) public\r\n        onlyWallet\r\n    {\r\n        require(permissibleTokenWithdrawal(amount));\r\n\r\n        uint amountPerPerson = SafeMath.div(amount, owners.length);\r\n\r\n        for (uint i=0; i<owners.length; i++) {\r\n            ZTHTKN.transfer(owners[i], amountPerPerson);\r\n        }\r\n\r\n        emit DevWithdraw(amount, amountPerPerson);\r\n    }\r\n\r\n    // Change the dividend card address. Can't see why this would ever need\r\n    // to be invoked, but better safe than sorry.\r\n    function changeDivCardAddress(address _newDivCardAddress)\r\n        public\r\n        isAnOwner\r\n    {\r\n        divCardAddress = _newDivCardAddress;\r\n    }\r\n\r\n    // Receive Ether (from Zethr itself or any other source) and purchase tokens at the 33% dividend rate.\r\n    // If the amount is less than 0.01 Ether, the Ether is stored by the contract until the balance\r\n    // exceeds that limit and then purchases all it can.\r\n    function receiveDividends() public payable {\r\n      if (!reEntered) {\r\n        uint ActualBalance = (address(this).balance.sub(NonICOBuyins));\r\n        if (ActualBalance > 0.01 ether) {\r\n          reEntered = true;\r\n          ZTHTKN.buyAndSetDivPercentage.value(ActualBalance)(address(0x0), 33, \"\");\r\n          emit BankrollInvest(ActualBalance);\r\n          reEntered = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Use all available balance to buy in\r\n    function buyInWithAllBalanced() public payable isAnOwner {\r\n      if (!reEntered) {\r\n        uint balance = address(this).balance;\r\n        require (balance > 0.01 ether);\r\n        ZTHTKN.buyAndSetDivPercentage.value(balance)(address(0x0), 33, \"\"); \r\n      }\r\n    }\r\n\r\n    /*=================================\r\n    =            UTILITIES            =\r\n    =================================*/\r\n\r\n    // Convert an hexadecimal character to their value\r\n    function fromHexChar(uint c) public pure returns (uint) {\r\n        if (byte(c) >= byte('0') && byte(c) <= byte('9')) {\r\n            return c - uint(byte('0'));\r\n        }\r\n        if (byte(c) >= byte('a') && byte(c) <= byte('f')) {\r\n            return 10 + c - uint(byte('a'));\r\n        }\r\n        if (byte(c) >= byte('A') && byte(c) <= byte('F')) {\r\n            return 10 + c - uint(byte('A'));\r\n        }\r\n    }\r\n\r\n    // Convert an hexadecimal string to raw bytes\r\n    function fromHex(string s) public pure returns (bytes) {\r\n        bytes memory ss = bytes(s);\r\n        require(ss.length%2 == 0); // length must be even\r\n        bytes memory r = new bytes(ss.length/2);\r\n        for (uint i=0; i<ss.length/2; ++i) {\r\n            r[i] = byte(fromHexChar(uint(ss[2*i])) * 16 +\r\n                    fromHexChar(uint(ss[2*i+1])));\r\n        }\r\n        return r;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZTHTKN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"queryTokenGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WITHDRAW_PCT_DAILY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WITHDRAW_PCT_TX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dailyAccounting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyTokensPerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDivCardAddress\",\"type\":\"address\"}],\"name\":\"changeDivCardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toWithdraw\",\"type\":\"uint256\"}],\"name\":\"permissibleTokenWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zethr\",\"type\":\"address\"},{\"name\":\"_divcards\",\"type\":\"address\"}],\"name\":\"addZethrAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"whiteListContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDailyTokenLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deWhiteListContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devTokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyInWithAllBalanced\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"contractTokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"alterTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"WhiteListAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"WhiteListRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountPerPerson\",\"type\":\"uint256\"}],\"name\":\"DevWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EtherLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"BankrollInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"}],\"name\":\"DailyTokenAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"DailyTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"DailyTokensReceived\",\"type\":\"event\"}]","ContractName":"ZethrBankroll","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011e52c75998fe2e7928b191bfc5b25937ca16741","Library":"","SwarmSource":"bzzr://6769aba1ac72ea42fd60f681cc778470f23980b2d63e0b45e58438193b1ce51f"}]}