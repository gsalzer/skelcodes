{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b != 0);\r\n        c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract GGEToken is ERC20Interface{\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Events\r\n    // ------------------------------------------------------------------------\r\n    //typeNo ACL 2, BL 3, TransConL 5, TransL 8\r\n    event ListLog(address addr, uint8 indexed typeNo, bool active);\r\n    event Trans(address indexed fromAddr, address indexed toAddr, uint256 transAmount, uint64 time);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event Deposit(address indexed sender, uint value);\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals = 8;\r\n    uint256 public initialSupply = 10000000 * (10 ** uint256(decimals));\r\n    uint256 public _totalSupply;\r\n    bool public transContractLocked;\r\n    bool public transLock;\r\n    address public owner;\r\n    address private ownerContract = address(0x0);\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) public allowContractList;\r\n    mapping(address => bool) public blackList;\r\n    \r\n    constructor() public {\r\n        symbol = \"GGE\";\r\n        name = \"GramGold Eco Coin\";\r\n        owner = msg.sender;\r\n        _totalSupply = initialSupply;\r\n        balances[owner] = _totalSupply;\r\n        balances[msg.sender] = initialSupply;\r\n        transContractLocked = true;\r\n        transLock = false;\r\n        emit Transfer(address(0x0), owner, initialSupply);\r\n    }\r\n    \r\n    /**\r\n    * @dev Allow current contract owner transfer ownership to other address\r\n    */\r\n    function AssignGGEOwner(address _ownerContract) \r\n    public \r\n    onlyOwner \r\n    notNull(_ownerContract) \r\n    {\r\n        uint256 remainTokens = balances[owner];\r\n        ownerContract = _ownerContract;\r\n        balances[owner] = 0;\r\n\r\n        balances[ownerContract] = balances[ownerContract].add(remainTokens);\r\n        emit Transfer(owner, ownerContract, remainTokens);\r\n        emit OwnershipTransferred(owner, ownerContract);\r\n        owner = ownerContract;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the address is a wallet or a contract\r\n    */\r\n    function isContract(address _addr) \r\n    private \r\n    view \r\n    returns (bool) \r\n    {\r\n        if(allowContractList[_addr] || !transContractLocked){\r\n            return false;\r\n        }\r\n\r\n        uint256 codeLength = 0;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_addr)\r\n        }\r\n        \r\n        return (codeLength > 0);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer _value from msg.sender to receiver\r\n    */\r\n    function transfer(address _to, uint256 _value) \r\n    public \r\n    notNull(_to) \r\n    returns (bool success) \r\n    {\r\n        require(!transLock);\r\n        require(balances[msg.sender] >= _value);\r\n        success = _transfer(msg.sender, _to, _value);\r\n        require(success);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Trans(msg.sender, _to, _value, uint64(now));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer _value from contract owner to receiver\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n    public \r\n    notNull(_to) \r\n    returns (bool success) \r\n    {\r\n        require(!transLock);\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        success = _transfer(_from, _to, _value);\r\n        require(success);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Trans(_from, _to, _value, uint64(now));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev both transfer and transferfrom are dispatched here\r\n    * Check blackList\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value) \r\n    internal \r\n    notNull(_from) \r\n    notNull(_to) \r\n    returns (bool) \r\n    {\r\n        require(!transLock);\r\n        require(!blackList[_from]);\r\n        require(!blackList[_to]);       \r\n        require(!isContract(_to));\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) \r\n    public \r\n    returns (bool success) \r\n    {\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n            return false;\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _tokenOwner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _tokenOwner, address _spender) \r\n    public \r\n    view \r\n    returns (uint256 remaining) \r\n    {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n    \r\n    function() \r\n    payable\r\n    {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Reject all ERC223 compatible tokens\r\n    * @param from_ address The address that is transferring the tokens\r\n    * @param value_ uint256 the amount of the specified token\r\n    * @param data_ Bytes The data passed from the caller.\r\n    */\r\n    function tokenFallback(address from_, uint256 value_, bytes data_) \r\n    external \r\n    {\r\n        from_;\r\n        value_;\r\n        data_;\r\n        revert();\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Modifiers\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0x0));\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // onlyOwner API\r\n    // ------------------------------------------------------------------------\r\n    function addBlacklist(address _addr) public notNull(_addr) onlyOwner {\r\n        blackList[_addr] = true; \r\n        emit ListLog(_addr, 3, true);\r\n    }\r\n    \r\n    function delBlackList(address _addr) public notNull(_addr) onlyOwner {\r\n        delete blackList[_addr];                \r\n        emit ListLog(_addr, 3, false);\r\n    }\r\n\r\n    function setTransContractLocked(bool _lock) \r\n    public \r\n    onlyOwner \r\n    {\r\n        transContractLocked = _lock;                  \r\n        emit ListLog(address(0x0), 5, _lock); \r\n    }\r\n\r\n    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens) \r\n    public \r\n    onlyOwner \r\n    returns (bool success) \r\n    {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n\r\n    function reclaimEther(address _addr) \r\n    external \r\n    onlyOwner \r\n    {\r\n        assert(_addr.send(this.balance));\r\n    }\r\n\r\n    function transLock(bool _lock) \r\n    public \r\n    onlyOwner \r\n    {\r\n        transLock = _lock;\r\n        emit ListLog(msg.sender, 8, true);\r\n    }\r\n  \r\n    function mintToken(address _targetAddr, uint256 _mintedAmount) \r\n    public \r\n    onlyOwner \r\n    {\r\n        require(_totalSupply.add(_mintedAmount) <= initialSupply);\r\n        balances[_targetAddr] = balances[_targetAddr].add(_mintedAmount);\r\n        _totalSupply = _totalSupply.add(_mintedAmount);\r\n        \r\n        emit Transfer(address(0x0), _targetAddr, _mintedAmount);\r\n    }\r\n \r\n    function burnToken(uint256 _burnedAmount) \r\n    public \r\n    onlyOwner \r\n    {\r\n        require(balances[owner] >= _burnedAmount);\r\n        \r\n        balances[owner] = balances[owner].sub(_burnedAmount);\r\n        _totalSupply = _totalSupply.sub(_burnedAmount);\r\n        \r\n        emit Transfer(owner, address(0x0), _burnedAmount);\r\n    }\r\n\r\n    function addAllowContractList(address _addr) \r\n    public \r\n    notNull(_addr) \r\n    onlyOwner \r\n    {\r\n        allowContractList[_addr] = true; \r\n        emit ListLog(_addr, 2, true);\r\n    }\r\n  \r\n    function delAllowContractList(address _addr) \r\n    public \r\n    notNull(_addr) \r\n    onlyOwner \r\n    {\r\n        delete allowContractList[_addr];\r\n        emit ListLog(_addr, 2, false);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) \r\n    public \r\n    notNull(_spender) \r\n    onlyOwner returns (bool) \r\n    {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n   }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n    public \r\n    notNull(_spender) \r\n    onlyOwner returns (bool) \r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) { \r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        } \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function batchDistributeToken(address[] _addr, uint256[] _value)\r\n    public\r\n    onlyOwner returns (bool){\r\n        require(_addr.length == _value.length);\r\n        for(uint256 i = 0; i < _addr.length; i++){\r\n            balances[owner] = balances[owner].sub(_value[i]);\r\n            balances[_addr[i]] = balances[_addr[i]].add(_value[i]);\r\n            emit Transfer(owner, _addr[i], _value[i]);\r\n        }   \r\n    }\r\n\r\n    function changeName(string _name, string _symbol) \r\n    public\r\n    onlyOwner\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Public view API\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _tokenOwner) \r\n    public \r\n    view \r\n    returns (uint256 balance) \r\n    {\r\n        return balances[_tokenOwner];\r\n    }\r\n    \r\n    function totalSupply() \r\n    public \r\n    view \r\n    returns (uint256) \r\n    {\r\n        return _totalSupply.sub(balances[address(0x0)]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delAllowContractList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerContract\",\"type\":\"address\"}],\"name\":\"AssignGGEOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowContractList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAllowContractList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setTransContractLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchDistributeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetAddr\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"transLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transContractLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"typeNo\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ListLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"Trans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GGEToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52f0566f928f53483cd44f72e2576739d7f94ce7919a640ea6bb53f7c443b2c5"}]}