{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if the account is the owner of the contract.\r\n   */\r\n  function isOwner(address account) public view returns(bool) {\r\n    return account == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner)\r\n    internal\r\n  {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool private _paused;\r\n\r\n  constructor() public {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause()\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n  {\r\n    _paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause()\r\n    public\r\n    onlyOwner\r\n    whenPaused\r\n  {\r\n    _paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\n// File: contracts/Operable.sol\r\n\r\n/**\r\n * @title Operable\r\n * @dev Base contract that allows the owner to enforce access control over certain\r\n * operations by adding or removing operator addresses.\r\n */\r\ncontract Operable is Pausable {\r\n  event OperatorAdded(address indexed account);\r\n  event OperatorRemoved(address indexed account);\r\n\r\n  mapping (address => bool) private _operators;\r\n\r\n  constructor() public {\r\n    _addOperator(msg.sender);\r\n  }\r\n\r\n  modifier onlyOperator() {\r\n    require(isOperator(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isOperator(address account)\r\n    public\r\n    view\r\n    returns (bool) \r\n  {\r\n    require(account != address(0));\r\n    return _operators[account];\r\n  }\r\n\r\n  function addOperator(address account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _addOperator(account);\r\n  }\r\n\r\n  function removeOperator(address account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _removeOperator(account);\r\n  }\r\n\r\n  function _addOperator(address account)\r\n    internal\r\n  {\r\n    require(account != address(0));\r\n    _operators[account] = true;\r\n    emit OperatorAdded(account);\r\n  }\r\n\r\n  function _removeOperator(address account)\r\n    internal\r\n  {\r\n    require(account != address(0));\r\n    _operators[account] = false;\r\n    emit OperatorRemoved(account);\r\n  }\r\n}\r\n\r\n// File: contracts/TimestampNotary.sol\r\n\r\ncontract TimestampNotary is Operable {\r\n  struct Time {\r\n    uint32 declared;\r\n    uint32 recorded;\r\n  }\r\n  mapping (bytes32 => Time) _hashTime;\r\n\r\n  event Timestamp(\r\n    bytes32 indexed hash,\r\n    uint32 declaredTime,\r\n    uint32 recordedTime\r\n  );\r\n\r\n  /**\r\n   * @dev Allows an operator to timestamp a new hash value.\r\n   * @param hash bytes32 The hash value to be stamped in the contract storage\r\n   * @param declaredTime uint The timestamp associated with the given hash value\r\n   */\r\n  function addTimestamp(bytes32 hash, uint32 declaredTime)\r\n    public\r\n    onlyOperator\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    _addTimestamp(hash, declaredTime);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Registers the timestamp hash value in the contract storage, along with\r\n   * the current and declared timestamps.\r\n   * @param hash bytes32 The hash value to be registered\r\n   * @param declaredTime uint32 The declared timestamp of the hash value\r\n   */\r\n  function _addTimestamp(bytes32 hash, uint32 declaredTime) internal {\r\n    uint32 recordedTime = uint32(block.timestamp);\r\n    _hashTime[hash] = Time(declaredTime, recordedTime);\r\n    emit Timestamp(hash, declaredTime, recordedTime);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to verify the declared timestamp for any given hash.\r\n   */\r\n  function verifyDeclaredTime(bytes32 hash)\r\n    public\r\n    view\r\n    returns (uint32)\r\n  {\r\n    return _hashTime[hash].declared;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to verify the recorded timestamp for any given hash.\r\n   */\r\n  function verifyRecordedTime(bytes32 hash)\r\n    public\r\n    view\r\n    returns (uint32)\r\n  {\r\n    return _hashTime[hash].recorded;\r\n  }\r\n}\r\n\r\n// File: contracts/LinkedToken.sol\r\n\r\ncontract LinkedTokenAbstract {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address account) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract LinkedToken is Pausable {\r\n  address internal _token;\r\n  event TokenChanged(address indexed token);\r\n  \r\n  /**\r\n   * @dev Returns the address of the associated token contract.\r\n   */\r\n  function tokenAddress() public view returns (address) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to change the address of the associated token contract.\r\n   * @param token address The address of the new token contract\r\n   */\r\n  function setToken(address token) \r\n    public\r\n    onlyOwner\r\n    whenPaused\r\n    returns (bool)\r\n  {\r\n    _setToken(token);\r\n    emit TokenChanged(token);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the address of the associated token contract\r\n   * @param token address The address of the new token contract\r\n   */\r\n  function _setToken(address token) internal {\r\n    require(token != address(0));\r\n    _token = token;\r\n  }\r\n}\r\n\r\n// File: contracts/AssetNotary.sol\r\n\r\ncontract AssetNotary is TimestampNotary, LinkedToken {\r\n  using SafeMath for uint256;\r\n\r\n  bytes8[] private _assetList;\r\n  mapping (bytes8 => uint8) private _assetDecimals;\r\n  mapping (bytes8 => uint256) private _assetBalances;\r\n\r\n  event AssetBalanceUpdate(\r\n    bytes8 indexed assetId,\r\n    uint256 balance\r\n  );\r\n\r\n  function registerAsset(bytes8 assetId, uint8 decimals)\r\n    public\r\n    onlyOperator\r\n    returns (bool)\r\n  {\r\n    require(decimals > 0);\r\n    require(decimals <= 32);\r\n    _assetDecimals[assetId] = decimals;\r\n    _assetList.push(assetId);\r\n    return true;\r\n  }\r\n\r\n  function assetList()\r\n    public\r\n    view\r\n    returns (bytes8[])\r\n  {\r\n    return _assetList;\r\n  }\r\n\r\n  function getAssetId(string name)\r\n    public\r\n    pure\r\n    returns (bytes8)\r\n  {\r\n    return bytes8(keccak256(abi.encodePacked(name)));\r\n  }\r\n\r\n  function assetDecimals(bytes8 assetId)\r\n    public\r\n    view\r\n    returns (uint8)\r\n  {\r\n    return _assetDecimals[assetId];\r\n  }\r\n\r\n  function assetBalance(bytes8 assetId)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _assetBalances[assetId];\r\n  }\r\n\r\n  function updateAssetBalances(bytes8[] assets, uint256[] balances)\r\n    public\r\n    onlyOperator\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    uint assetsLength = assets.length;\r\n    require(assetsLength > 0);\r\n    require(assetsLength == balances.length);\r\n    \r\n    for (uint i=0; i<assetsLength; i++) {\r\n      require(_assetDecimals[assets[i]] > 0);\r\n      _assetBalances[assets[i]] = balances[i];\r\n      emit AssetBalanceUpdate(assets[i], balances[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function verifyUserBalance(address user, string assetName)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    LinkedTokenAbstract token = LinkedTokenAbstract(_token);\r\n    uint256 totalShares = token.totalSupply();\r\n    require(totalShares > 0);\r\n    uint256 userShares = token.balanceOf(user);\r\n    bytes8 assetId = getAssetId(assetName);\r\n    return _assetBalances[assetId].mul(userShares) / totalShares;\r\n  }\r\n}\r\n\r\n// File: contracts/XFTNotary.sol\r\n\r\ncontract XFTNotary is AssetNotary {\r\n  string public constant name = 'XFT Asset Notary';\r\n  string public constant version = '0.1';\r\n  \r\n  /*\r\n   * @dev Links the Notary contract with the Token contract.\r\n   */\r\n  constructor(address token) public {\r\n    _setToken(token);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAssetId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"}],\"name\":\"assetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"bytes8\"}],\"name\":\"assetDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyDeclaredTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assets\",\"type\":\"bytes8[]\"},{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"updateAssetBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"verifyRecordedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"declaredTime\",\"type\":\"uint32\"}],\"name\":\"addTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"assetName\",\"type\":\"string\"}],\"name\":\"verifyUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"assetId\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"AssetBalanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"declaredTime\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"recordedTime\",\"type\":\"uint32\"}],\"name\":\"Timestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XFTNotary","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d4c2a5c4be6ec37a84a78382c6c7368651d8b443","Library":"","SwarmSource":"bzzr://12a13f60a17112ce1d581b9e4e73670db1ab6f84b1dd32577c97aac2ce4bbfe6"}]}