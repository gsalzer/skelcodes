{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Build your own empire on Blockchain\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoEngineerInterface {\r\n    uint256 public prizePool = 0;\r\n    address public gameSponsor;\r\n    struct BoostData {\r\n        address owner;\r\n        uint256 boostRate;\r\n        uint256 basePrice;\r\n    }\r\n    mapping(uint256 => BoostData) public boostData;\r\n    function getPlayerData(address /*_addr*/) \r\n    public \r\n    pure \r\n    returns(\r\n        uint256 /*_engineerRoundNumber*/, \r\n        uint256 /*_virusNumber*/, \r\n        uint256 /*_virusDefence*/, \r\n        uint256 /*_research*/, \r\n        uint256 /*_researchPerDay*/, \r\n        uint256 /*_lastUpdateTime*/, \r\n        uint256[8] /*_engineersCount*/, \r\n        uint256 /*_nextTimeAtk*/,\r\n        uint256 /*_endTimeUnequalledDef*/\r\n    ) {}\r\n    function fallback() public payable {}\r\n    function addVirus(address /*_addr*/, uint256 /*_value*/) public pure {}\r\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public pure {} \r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\r\n}\r\ncontract CryptoMiningWarInterface {\r\n    uint256 public deadline; \r\n    uint256 public roundNumber = 0;\r\n    mapping(address => PlayerData) public players;\r\n    struct PlayerData {\r\n        uint256 roundNumber;\r\n        mapping(uint256 => uint256) minerCount;\r\n        uint256 hashrate;\r\n        uint256 crystals;\r\n        uint256 lastUpdateTime;\r\n        uint256 referral_count;\r\n        uint256 noQuest;\r\n    }\r\n    function getPlayerData(address /*addr*/) public pure\r\n    returns (\r\n        uint256 /*crystals*/, \r\n        uint256 /*lastupdate*/, \r\n        uint256 /*hashratePerDay*/, \r\n        uint256[8] /*miners*/, \r\n        uint256 /*hasBoost*/, \r\n        uint256 /*referral_count*/, \r\n        uint256 /*playerBalance*/, \r\n        uint256 /*noQuest*/ \r\n        ) {}\r\n    function getBoosterData(uint256 /*idx*/) public pure returns (address /*owner*/,uint256 /*boostRate*/, uint256 /*startingLevel*/, \r\n        uint256 /*startingTime*/, uint256 /*currentPrice*/, uint256 /*halfLife*/) {}\r\n    function addHashrate( address /*_addr*/, uint256 /*_value*/ ) public pure {}\r\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\r\n}\r\ncontract CryptoAirdropGameInterface {\r\n    mapping(address => PlayerData) public players;\r\n    struct PlayerData {\r\n        uint256 currentMiniGameId;\r\n        uint256 lastMiniGameId; \r\n        uint256 win;\r\n        uint256 share;\r\n        uint256 totalJoin;\r\n        uint256 miningWarRoundNumber;\r\n    }\r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\r\n}\r\ncontract CryptoDepositInterface {\r\n    uint256 public round = 0;\r\n    mapping(address => Player) public players;\r\n    struct Player {\r\n        uint256 currentRound;\r\n        uint256 lastRound;\r\n        uint256 reward;\r\n        uint256 share; // your crystals share in current round \r\n    }\r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\r\n}\r\ncontract CryptoBossWannaCryInterface {\r\n    mapping(address => PlayerData) public players;\r\n    struct PlayerData {\r\n        uint256 currentBossRoundNumber;\r\n        uint256 lastBossRoundNumber;\r\n        uint256 win;\r\n        uint256 share;\r\n        uint256 dame; \r\n        uint256 nextTimeAtk;\r\n    }\r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/ ) {}\r\n}\r\ncontract CryptoBeginnerQuest {\r\n    using SafeMath for uint256;\r\n\r\n    address private administrator;\r\n    // mini game\r\n    CryptoEngineerInterface     public Engineer;\r\n    CryptoDepositInterface      public Deposit;\r\n    CryptoMiningWarInterface    public MiningWar;\r\n    CryptoAirdropGameInterface  public AirdropGame;\r\n    CryptoBossWannaCryInterface public BossWannaCry;\r\n    \r\n    // mining war info\r\n    uint256 private miningWarDeadline;\r\n    uint256 private miningWarRound;\r\n\r\n    /** \r\n    * @dev player information\r\n    */\r\n    mapping(address => Player)           private players;\r\n    // quest information\r\n    mapping(address => MinerQuest)       private minerQuests;\r\n    mapping(address => EngineerQuest)    private engineerQuests;\r\n    mapping(address => DepositQuest)     private depositQuests;\r\n    mapping(address => JoinAirdropQuest) private joinAirdropQuests;\r\n    mapping(address => AtkBossQuest)     private atkBossQuests;\r\n    mapping(address => AtkPlayerQuest)   private atkPlayerQuests;\r\n    mapping(address => BoosterQuest)     private boosterQuests;\r\n    mapping(address => RedbullQuest)     private redbullQuests;\r\n   \r\n    struct Player {\r\n        uint256 miningWarRound;\r\n        uint256 currentQuest;\r\n    }\r\n    struct MinerQuest {\r\n        bool ended;\r\n    }\r\n    struct EngineerQuest {\r\n        bool ended;\r\n    }\r\n    struct DepositQuest {\r\n        uint256 currentDepositRound;\r\n        uint256 share; // current deposit of player\r\n        bool ended;\r\n    }\r\n    struct JoinAirdropQuest {\r\n        uint256 airdropGameId;    // current airdrop game id\r\n        uint256 totalJoinAirdrop; // total join the airdrop game\r\n        bool ended;\r\n    }\r\n    struct AtkBossQuest {\r\n        uint256 dameBossWannaCry; // current dame boss\r\n        uint256 levelBossWannaCry; // current boss player atk\r\n        bool ended;\r\n    }\r\n    struct AtkPlayerQuest {\r\n        uint256 nextTimeAtkPlayer; // \r\n        bool ended;\r\n    }\r\n    struct BoosterQuest {\r\n        bool ended;\r\n    }\r\n    struct RedbullQuest {\r\n        bool ended;\r\n    }\r\n\r\n    event ConfirmQuest(address player, uint256 questType, uint256 reward, uint256 typeReward); // 1 : crystals, 2: hashrate, 3: virus\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // init contract interface  \r\n        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\r\n        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\r\n        setAirdropGameInterface(0x5b813a2f4b58183d270975ab60700740af00a3c9);\r\n        setBossWannaCryInterface(0x54e96d609b183196de657fc7380032a96f27f384);\r\n        setDepositInterface(0xd67f271c2d3112d86d6991bfdfc8f9f27286bc4b);\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    // ---------------------------------------------------------------------------------------\r\n    // SET INTERFACE CONTRACT\r\n    // ---------------------------------------------------------------------------------------\r\n    \r\n    function setMiningWarInterface(address _addr) public isAdministrator\r\n    {\r\n        MiningWar = CryptoMiningWarInterface(_addr);\r\n    }\r\n    function setEngineerInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\r\n        \r\n        require(engineerInterface.isContractMiniGame() == true);\r\n\r\n        Engineer = engineerInterface;\r\n    }\r\n    function setAirdropGameInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoAirdropGameInterface airdropGameInterface = CryptoAirdropGameInterface(_addr);\r\n        \r\n        require(airdropGameInterface.isContractMiniGame() == true);\r\n\r\n        AirdropGame = airdropGameInterface;\r\n    }\r\n    function setBossWannaCryInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoBossWannaCryInterface bossWannaCryInterface = CryptoBossWannaCryInterface(_addr);\r\n        \r\n        require(bossWannaCryInterface.isContractMiniGame() == true);\r\n\r\n        BossWannaCry = bossWannaCryInterface;\r\n    }\r\n    function setDepositInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoDepositInterface depositInterface = CryptoDepositInterface(_addr);\r\n        \r\n        require(depositInterface.isContractMiniGame() == true);\r\n\r\n        Deposit = depositInterface;\r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n        _isContractMiniGame = true;\r\n    }\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 _miningWarRoundNumber, uint256 _miningWarDeadline ) public\r\n    {\r\n        miningWarDeadline = _miningWarDeadline;\r\n        miningWarRound    = _miningWarRoundNumber;\r\n    }\r\n    /**\r\n    * @dev start the mini game\r\n    */\r\n    function setupGame() public \r\n    {\r\n        require(msg.sender == administrator);\r\n        require(miningWarDeadline == 0);\r\n        miningWarDeadline = getMiningWarDealine();\r\n        miningWarRound    = getMiningWarRound();\r\n    }\r\n    function confirmQuest() public \r\n    {\r\n        if (miningWarRound != players[msg.sender].miningWarRound) {\r\n            players[msg.sender].currentQuest = 0;\r\n            players[msg.sender].miningWarRound = miningWarRound;\r\n        }    \r\n        bool _isFinish;\r\n        bool _ended;\r\n        (_isFinish, _ended) = checkQuest(msg.sender);\r\n        require(miningWarDeadline > now);\r\n        require(_isFinish == true);\r\n        require(_ended == false);\r\n\r\n        if (players[msg.sender].currentQuest == 0) confirmGetFreeQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 1) confirmMinerQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 2) confirmEngineerQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 3) confirmDepositQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 4) confirmJoinAirdropQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 5) confirmAtkBossQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 6) confirmAtkPlayerQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 7) confirmBoosterQuest(msg.sender);\r\n        if (players[msg.sender].currentQuest == 8) confirmRedbullQuest(msg.sender);\r\n\r\n        if (players[msg.sender].currentQuest <= 7) addQuest(msg.sender);\r\n    }\r\n    function checkQuest(address _addr) public view returns(bool _isFinish, bool _ended) \r\n    {\r\n        if (players[_addr].currentQuest == 0) (_isFinish, _ended) = checkGetFreeQuest(_addr);\r\n        if (players[_addr].currentQuest == 1) (_isFinish, _ended) = checkMinerQuest(_addr);\r\n        if (players[_addr].currentQuest == 2) (_isFinish, _ended) = checkEngineerQuest(_addr);\r\n        if (players[_addr].currentQuest == 3) (_isFinish, _ended) = checkDepositQuest(_addr);\r\n        if (players[_addr].currentQuest == 4) (_isFinish, _ended) = checkJoinAirdropQuest(_addr);\r\n        if (players[_addr].currentQuest == 5) (_isFinish, _ended) = checkAtkBossQuest(_addr);\r\n        if (players[_addr].currentQuest == 6) (_isFinish, _ended) = checkAtkPlayerQuest(_addr);\r\n        if (players[_addr].currentQuest == 7) (_isFinish, _ended) = checkBoosterQuest(_addr);\r\n        if (players[_addr].currentQuest == 8) (_isFinish, _ended) = checkRedbullQuest(_addr);\r\n    }\r\n    \r\n    function getData(address _addr) \r\n    public\r\n    view\r\n    returns(\r\n        uint256 _miningWarRound,\r\n        uint256 _currentQuest,\r\n        bool _isFinish,\r\n        bool _endedQuest\r\n    ) {\r\n        Player memory p          = players[_addr];\r\n        _miningWarRound          = p.miningWarRound;\r\n        _currentQuest            = p.currentQuest;\r\n        if (_miningWarRound != miningWarRound) _currentQuest = 0;\r\n        (_isFinish, _endedQuest) = checkQuest(_addr);\r\n    }\r\n    // ---------------------------------------------------------------------------------------------------------------------------------\r\n    // INTERNAL \r\n    // ---------------------------------------------------------------------------------------------------------------------------------\r\n    function addQuest(address _addr) private\r\n    {\r\n        Player storage p      = players[_addr];\r\n        p.currentQuest += 1;\r\n\r\n        if (p.currentQuest == 1) addMinerQuest(_addr); \r\n        if (p.currentQuest == 2) addEngineerQuest(_addr); \r\n        if (p.currentQuest == 3) addDepositQuest(_addr); \r\n        if (p.currentQuest == 4) addJoinAirdropQuest(_addr); \r\n        if (p.currentQuest == 5) addAtkBossQuest(_addr); \r\n        if (p.currentQuest == 6) addAtkPlayerQuest(_addr); \r\n        if (p.currentQuest == 7) addBoosterQuest(_addr); \r\n        if (p.currentQuest == 8) addRedbullQuest(_addr); \r\n    }\r\n    // ---------------------------------------------------------------------------------------------------------------------------------\r\n    // CONFIRM QUEST INTERNAL \r\n    // ---------------------------------------------------------------------------------------------------------------------------------\r\n    function confirmGetFreeQuest(address _addr) private\r\n    {\r\n        MiningWar.addCrystal(_addr, 100);\r\n\r\n        emit ConfirmQuest(_addr, 1, 100, 1);\r\n    }\r\n    function confirmMinerQuest(address _addr) private\r\n    {\r\n        MinerQuest storage pQ = minerQuests[_addr];\r\n        pQ.ended = true;\r\n        MiningWar.addCrystal(_addr, 100);\r\n\r\n        emit ConfirmQuest(_addr, 2, 100, 1);\r\n    }\r\n    function confirmEngineerQuest(address _addr) private\r\n    {\r\n        EngineerQuest storage pQ = engineerQuests[_addr];\r\n        pQ.ended = true;\r\n        MiningWar.addCrystal(_addr, 400);\r\n\r\n        emit ConfirmQuest(_addr, 3, 400, 1);\r\n    }\r\n    function confirmDepositQuest(address _addr) private\r\n    {\r\n        DepositQuest storage pQ = depositQuests[_addr];\r\n        pQ.ended = true;\r\n        MiningWar.addHashrate(_addr, 200);\r\n\r\n        emit ConfirmQuest(_addr, 4, 200, 2);\r\n    }\r\n    function confirmJoinAirdropQuest(address _addr) private\r\n    {\r\n        JoinAirdropQuest storage pQ = joinAirdropQuests[_addr];\r\n        pQ.ended = true;\r\n        Engineer.addVirus(_addr, 10);\r\n\r\n        emit ConfirmQuest(_addr, 5, 10, 3);\r\n    }\r\n    function confirmAtkBossQuest(address _addr) private\r\n    {\r\n        AtkBossQuest storage pQ = atkBossQuests[_addr];\r\n        pQ.ended = true;\r\n        Engineer.addVirus(_addr, 10);\r\n\r\n        emit ConfirmQuest(_addr, 6, 10, 3);\r\n    }\r\n    function confirmAtkPlayerQuest(address _addr) private\r\n    {\r\n        AtkPlayerQuest storage pQ = atkPlayerQuests[_addr];\r\n        pQ.ended = true;\r\n        MiningWar.addCrystal(_addr, 10000);\r\n\r\n        emit ConfirmQuest(_addr, 7, 10000, 1);\r\n    }   \r\n    function confirmBoosterQuest(address _addr) private\r\n    {\r\n        BoosterQuest storage pQ = boosterQuests[_addr];\r\n        pQ.ended = true;\r\n        Engineer.addVirus(_addr, 100);\r\n\r\n        emit ConfirmQuest(_addr, 8, 100, 3);\r\n    }\r\n    function confirmRedbullQuest(address _addr) private\r\n    {\r\n        RedbullQuest storage pQ = redbullQuests[_addr];\r\n        pQ.ended = true;\r\n        Engineer.addVirus(_addr, 100);\r\n\r\n        emit ConfirmQuest(_addr, 9, 100, 3);\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // ADD QUEST INTERNAL\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function addMinerQuest(address _addr) private\r\n    {\r\n         MinerQuest storage pQ = minerQuests[_addr];\r\n         pQ.ended = false;\r\n    }\r\n    function addEngineerQuest(address _addr) private\r\n    {\r\n         EngineerQuest storage pQ = engineerQuests[_addr];\r\n         pQ.ended = false;\r\n    }\r\n    function addDepositQuest(address _addr) private\r\n    {\r\n        DepositQuest storage pQ = depositQuests[_addr];\r\n        uint256 currentDepositRound;\r\n        uint256 share;\r\n        (currentDepositRound, share) = getPlayerDepositData(_addr);\r\n        pQ.currentDepositRound       = currentDepositRound;\r\n        pQ.share                     = share;\r\n        pQ.ended = false;\r\n    }\r\n    function addJoinAirdropQuest(address _addr) private\r\n    {\r\n        uint256 airdropGameId;    // current airdrop game id\r\n        uint256 totalJoinAirdrop;\r\n        (airdropGameId , totalJoinAirdrop) = getPlayerAirdropGameData(_addr);\r\n        JoinAirdropQuest storage pQ = joinAirdropQuests[_addr];\r\n\r\n        pQ.airdropGameId    = airdropGameId;\r\n        pQ.totalJoinAirdrop = totalJoinAirdrop;\r\n        pQ.ended = false;\r\n    }\r\n    function addAtkBossQuest(address _addr) private\r\n    {\r\n        uint256 dameBossWannaCry; // current dame boss\r\n        uint256 levelBossWannaCry;\r\n        (levelBossWannaCry, dameBossWannaCry) = getPlayerBossWannaCryData(_addr);\r\n\r\n        AtkBossQuest storage pQ = atkBossQuests[_addr];\r\n        pQ.levelBossWannaCry = levelBossWannaCry;\r\n        pQ.dameBossWannaCry  = dameBossWannaCry;\r\n        pQ.ended = false;\r\n    }\r\n    function addAtkPlayerQuest(address _addr) private\r\n    {\r\n        AtkPlayerQuest storage pQ = atkPlayerQuests[_addr];\r\n        pQ.nextTimeAtkPlayer = getNextTimeAtkPlayer(_addr);\r\n        pQ.ended = false;\r\n    }   \r\n    function addBoosterQuest(address _addr) private\r\n    {\r\n        BoosterQuest storage pQ = boosterQuests[_addr];\r\n        pQ.ended = false;\r\n    }\r\n    function addRedbullQuest(address _addr) private\r\n    {\r\n        RedbullQuest storage pQ = redbullQuests[_addr];\r\n        pQ.ended = false;\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // CHECK QUEST INTERNAL\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function checkGetFreeQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        if (players[_addr].currentQuest > 0) _ended = true;\r\n        if (miningWarRound == getMiningWarRoundOfPlayer(_addr)) _isFinish = true;\r\n    }\r\n    function checkMinerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        MinerQuest memory pQ = minerQuests[_addr];\r\n        _ended = pQ.ended;\r\n        if (getMinerLv1(_addr) >= 10) _isFinish = true;\r\n    }\r\n    function checkEngineerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        EngineerQuest memory pQ = engineerQuests[_addr];\r\n        _ended = pQ.ended;\r\n        if (getEngineerLv1(_addr) >= 10) _isFinish = true;\r\n    }\r\n    function checkDepositQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        DepositQuest memory pQ = depositQuests[_addr];\r\n        _ended = pQ.ended;\r\n        uint256 currentDepositRound;\r\n        uint256 share;\r\n        (currentDepositRound, share) = getPlayerDepositData(_addr);\r\n        if ((currentDepositRound != pQ.currentDepositRound) || (share > pQ.share)) _isFinish = true;\r\n    }\r\n    function checkJoinAirdropQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        JoinAirdropQuest memory pQ = joinAirdropQuests[_addr];\r\n        _ended = pQ.ended;\r\n        uint256 airdropGameId;    // current airdrop game id\r\n        uint256 totalJoinAirdrop;\r\n        (airdropGameId , totalJoinAirdrop) = getPlayerAirdropGameData(_addr);\r\n        if (\r\n            (pQ.airdropGameId != airdropGameId) ||\r\n            (pQ.airdropGameId == airdropGameId && totalJoinAirdrop > pQ.totalJoinAirdrop)\r\n            ) {\r\n            _isFinish = true;\r\n        }\r\n    }\r\n    function checkAtkBossQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        AtkBossQuest memory pQ = atkBossQuests[_addr];\r\n        _ended = pQ.ended;\r\n        uint256 dameBossWannaCry; // current dame boss\r\n        uint256 levelBossWannaCry;\r\n        (levelBossWannaCry, dameBossWannaCry) = getPlayerBossWannaCryData(_addr);\r\n        if (\r\n            (pQ.levelBossWannaCry != levelBossWannaCry) ||\r\n            (pQ.levelBossWannaCry == levelBossWannaCry && dameBossWannaCry > pQ.dameBossWannaCry)\r\n            ) {\r\n            _isFinish = true;\r\n        }\r\n    }\r\n    function checkAtkPlayerQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        AtkPlayerQuest memory pQ = atkPlayerQuests[_addr];\r\n        _ended = pQ.ended;\r\n        uint256 nextTimeAtkPlayer = getNextTimeAtkPlayer(_addr);\r\n        if (nextTimeAtkPlayer > pQ.nextTimeAtkPlayer) _isFinish = true;\r\n    }   \r\n    function checkBoosterQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        BoosterQuest memory pQ = boosterQuests[_addr];\r\n        _ended = pQ.ended;\r\n        address[5] memory boosters = getBoosters();\r\n        for(uint256 idx = 0; idx < 5; idx++) {\r\n            if (boosters[idx] == _addr) _isFinish = true;\r\n        }\r\n\r\n    }\r\n    function checkRedbullQuest(address _addr) private view returns(bool _isFinish, bool _ended)\r\n    {\r\n        RedbullQuest memory pQ = redbullQuests[_addr];\r\n        _ended = pQ.ended;\r\n        address[5] memory redbulls = getRedbulls();\r\n        for(uint256 idx = 0; idx < 5; idx++) {\r\n            if (redbulls[idx] == _addr) _isFinish = true;\r\n        }\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // INTERFACE FUNCTION INTERNAL\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // Mining War\r\n    function getMiningWarDealine () private view returns(uint256)\r\n    {\r\n        return MiningWar.deadline();\r\n    }\r\n    function getMiningWarRound() private view returns(uint256)\r\n    {\r\n        return MiningWar.roundNumber();\r\n    }\r\n    function getBoosters() public view returns(address[5] _boosters)\r\n    {\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            address owner;\r\n            (owner, , , , , ) = MiningWar.getBoosterData(idx);\r\n            _boosters[idx] = owner;\r\n        }\r\n    }\r\n    function getMinerLv1(address _addr) private view returns(uint256 _total)\r\n    {\r\n        uint256[8] memory _minersCount;\r\n        (, , , _minersCount, , , , ) = MiningWar.getPlayerData(_addr);\r\n        _total = _minersCount[0];\r\n    }\r\n    function getMiningWarRoundOfPlayer(address _addr) private view returns(uint256 _roundNumber) \r\n    {\r\n        (_roundNumber, , , , , ) = MiningWar.players(_addr);\r\n    }\r\n    // ENGINEER\r\n    function getRedbulls() public view returns(address[5] _redbulls)\r\n    {\r\n        for (uint256 idx = 0; idx < 5; idx++) {\r\n            address owner;\r\n            (owner, , ) = Engineer.boostData(idx);\r\n            _redbulls[idx] = owner;\r\n        }\r\n    }\r\n    function getNextTimeAtkPlayer(address _addr) private view returns(uint256 _nextTimeAtk)\r\n    {\r\n        (, , , , , , , _nextTimeAtk,) = Engineer.getPlayerData(_addr);\r\n    }\r\n    function getEngineerLv1(address _addr) private view returns(uint256 _total)\r\n    {\r\n        uint256[8] memory _engineersCount;\r\n        (, , , , , , _engineersCount, ,) = Engineer.getPlayerData(_addr);\r\n        _total = _engineersCount[0];\r\n    }\r\n    // AIRDROP GAME\r\n    function getPlayerAirdropGameData(address _addr) private view returns(uint256 _currentGameId, uint256 _totalJoin)\r\n    {\r\n        (_currentGameId, , , , _totalJoin, ) = AirdropGame.players(_addr);\r\n    }\r\n    // BOSS WANNACRY\r\n    function getPlayerBossWannaCryData(address _addr) private view returns(uint256 _currentBossRoundNumber, uint256 _dame)\r\n    {\r\n        (_currentBossRoundNumber, , , , _dame, ) = BossWannaCry.players(_addr);\r\n    }\r\n    // DEPOSIT\r\n    function getPlayerDepositData(address _addr) private view returns(uint256 _currentRound, uint256 _share)\r\n    {\r\n        (_currentRound, , , _share ) = Deposit.players(_addr);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirdropGameInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_miningWarRound\",\"type\":\"uint256\"},{\"name\":\"_currentQuest\",\"type\":\"uint256\"},{\"name\":\"_isFinish\",\"type\":\"bool\"},{\"name\":\"_endedQuest\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRedbulls\",\"outputs\":[{\"name\":\"_redbulls\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setupGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBoosters\",\"outputs\":[{\"name\":\"_boosters\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirdropGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmQuest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miningWarRoundNumber\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkQuest\",\"outputs\":[{\"name\":\"_isFinish\",\"type\":\"bool\"},{\"name\":\"_ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BossWannaCry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBossWannaCryInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDepositInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"questType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typeReward\",\"type\":\"uint256\"}],\"name\":\"ConfirmQuest\",\"type\":\"event\"}]","ContractName":"CryptoBeginnerQuest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f732757ad26108dd180e5d2bd96221df5ad745bb48e5099f8b5ed6509d4f14c9"}]}