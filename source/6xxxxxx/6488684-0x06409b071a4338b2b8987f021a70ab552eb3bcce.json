{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\nVersion 1.0.14\r\nThis contract accepts ETH, and distributes tokens.\r\nDBLK Airdrop Multiplier\r\n */\r\n\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\ncontract SpecialTransferContract {\r\n    IERC20Token public tokenContract;  // the address of the token\r\n    address public owner;               // address of this contracts owner\r\n    uint256 public tokensDistributed;          // tally of the number of tokens distributed\r\n    uint256 public acceptableEthAmountInWei; //exact eth amount in wei this contract will accept\r\n    uint256 public tokensPerContributor;    // number of tokens to distribute to each contributor\r\n    uint256 public contributionsMade; // tally of all contributions \r\n    bytes32 contractOwner; // contract owner address, used during deploy\r\n\r\n    event Contribution(address buyer, uint256 amount); //log contributions\r\n\r\n    constructor(bytes32 _contractOwner, IERC20Token _tokenContract) public {\r\n        owner = msg.sender;\r\n        contractOwner = _contractOwner;\r\n        tokenContract = _tokenContract; \r\n    }    \r\n\r\n    \r\n    function ConfigurableParameters(uint256 _tokensPerContributor, uint256 _acceptableEthAmountInWei) public {\r\n        require(msg.sender == owner); //only owner can change these\r\n        tokensPerContributor = _tokensPerContributor;\r\n        acceptableEthAmountInWei = _acceptableEthAmountInWei;\r\n    }\r\n    \r\n    \r\n    function () payable public {\r\n    // skip this function if owner calls the contract    \r\n    require(msg.sender != owner);   \r\n\r\n   //call the acceptContribution function to transfer tokens for eth\r\n    acceptContribution();\r\n    emit Contribution(msg.sender, tokensPerContributor); // create event\r\n    owner.transfer(msg.value); // send received Eth to owner\r\n    }\r\n    \r\n    \r\n    function acceptContribution() public payable {\r\n        // ensure contract holds enough tokens to send\r\n        require(tokenContract.balanceOf(this) >= tokensPerContributor);\r\n        \r\n        // verify purchase amount is correct (eg.0.1ETH (100000000000000000)\r\n        require(msg.value == acceptableEthAmountInWei);\r\n\r\n        // keep a tally of distributions and tokens\r\n        tokensDistributed += tokensPerContributor;\r\n        contributionsMade += 1;\r\n\r\n        require(tokenContract.transfer(msg.sender, tokensPerContributor));\r\n    }\r\n\r\n    function endSale() public {\r\n        require(msg.sender == owner);\r\n\r\n        // Send unsold tokens back to the owner.\r\n        require(tokenContract.transfer(owner, tokenContract.balanceOf(this)));\r\n\r\n        // Send any remaining Eth from contract to the owner.\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptContribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionsMade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerContributor\",\"type\":\"uint256\"},{\"name\":\"_acceptableEthAmountInWei\",\"type\":\"uint256\"}],\"name\":\"ConfigurableParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptableEthAmountInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractOwner\",\"type\":\"bytes32\"},{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"SpecialTransferContract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"a03c9a06f82a06218e0daa071d6d52826a5758c6000000000000000000000000000000000000000000000000526ccc90191a9472299323816bd2c784c0a1bcde","Library":"","SwarmSource":"bzzr://4b8fb4bdef9584c7e6810afa6f01d62687847a6632e6901d8c7e925295134041"}]}