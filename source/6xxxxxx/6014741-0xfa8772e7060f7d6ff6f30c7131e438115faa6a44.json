{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n \r\n//Never Mind :P\r\n/* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract NVTReceiver {\r\n    function NVTFallback(address _from, uint _value, uint _code);\r\n}\r\n\r\ncontract BasicToken {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    if(!isContract(_to)){\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;}\r\n    else{\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    NVTReceiver receiver = NVTReceiver(_to);\r\n    receiver.NVTFallback(msg.sender, _value, 0);\r\n    Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n  }\r\n  function transfer(address _to, uint _value, uint _code) public returns (bool) {\r\n      require(isContract(_to));\r\n      require(_value <= balances[msg.sender]);\r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n      balances[_to] = balanceOf(_to).add(_value);\r\n      NVTReceiver receiver = NVTReceiver(_to);\r\n      receiver.NVTFallback(msg.sender, _value, _code);\r\n      Transfer(msg.sender, _to, _value);\r\n    \r\n      return true;\r\n    \r\n    }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\nfunction isContract(address _addr) private returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n        length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n\r\n\r\n  //function that is called when transaction target is a contract\r\n  //Only used for recycling NVTs\r\n  function transferToContract(address _to, uint _value, uint _code) public returns (bool success) {\r\n    require(isContract(_to));\r\n    require(_value <= balances[msg.sender]);\r\n  \r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    NVTReceiver receiver = NVTReceiver(_to);\r\n    receiver.NVTFallback(msg.sender, _value, _code);\r\n    Transfer(msg.sender, _to, _value);\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NVT is BasicToken, Ownable {\r\n\r\n  string public constant name = \"NiceVotingToken\";\r\n  string public constant symbol = \"NVT\";\r\n  uint8 public constant decimals = 2;\r\n\r\n  uint256 public constant TOTAL_SUPPLY = 100 * 10 ** 10; //10 billion tokens\r\n  uint256 public RELEASE_TIME ;\r\n  uint256 public TOKEN_FOR_SALE = 40 * 10 ** 10;\r\n  uint256 public TOKEN_FOR_TEAM = 10 * 10 ** 10;\r\n  uint256 public TOKEN_FOR_COMUNITY = 20 * 10 ** 10;\r\n  uint256 public TOKEN_FOR_INVESTER = 25 * 10 ** 10;\r\n\r\n\r\n  uint256 public price = 10 ** 12; //1:10000\r\n  bool public halted = false;\r\n\r\n  /**\r\n  * @dev Constructor that gives msg.sender all of existing tokens.\r\n  */\r\n  function NVT() public {\r\n    totalSupply_ = 5 * 10 ** 10; // 5 percent for early market promotion\r\n    balances[msg.sender] = 5 * 10 ** 10;\r\n    Transfer(0x0, msg.sender, 5 * 10 ** 10);\r\n    RELEASE_TIME = now;\r\n  }\r\n\r\n  //Rember 18 zeros for decimals of eth(wei), and 2 zeros for NVT. So add 16 zeros with * 10 ** 16\r\n  //price can only go higher\r\n  function setPrice(uint _newprice) onlyOwner{\r\n    require(_newprice > price);\r\n    price=_newprice; \r\n  }\r\n\r\n  //Incoming payment for purchase\r\n  function () public payable{\r\n    require(halted == false);\r\n    uint amout = msg.value.div(price);\r\n    require(amout <= TOKEN_FOR_SALE);\r\n    TOKEN_FOR_SALE = TOKEN_FOR_SALE.sub(amout);\r\n    balances[msg.sender] = balanceOf(msg.sender).add(amout);\r\n    totalSupply_=totalSupply_.add(amout);\r\n    Transfer(0x0, msg.sender, amout);\r\n  }\r\n\r\n  function getTokenForTeam (address _to, uint _amout) onlyOwner returns(bool){\r\n    TOKEN_FOR_TEAM = TOKEN_FOR_TEAM.sub(_amout);\r\n    totalSupply_=totalSupply_.add(_amout);\r\n    balances[_to] = balanceOf(_to).add(_amout);\r\n    Transfer(0x0, _to, _amout);\r\n    return true;\r\n  }\r\n\r\n\r\n  function getTokenForInvester (address _to, uint _amout) onlyOwner returns(bool){\r\n    TOKEN_FOR_INVESTER = TOKEN_FOR_INVESTER.sub(_amout);\r\n    totalSupply_=totalSupply_.add(_amout);\r\n    balances[_to] = balanceOf(_to).add(_amout);\r\n    Transfer(0x0, _to, _amout);\r\n    return true;\r\n  }\r\n\r\n\r\n  function getTokenForCommunity (address _to, uint _amout) onlyOwner{\r\n    require(_amout <= TOKEN_FOR_COMUNITY);\r\n    TOKEN_FOR_COMUNITY = TOKEN_FOR_COMUNITY.sub(_amout);\r\n    totalSupply_=totalSupply_.add(_amout);\r\n    balances[_to] = balanceOf(_to).add(_amout);\r\n    Transfer(0x0, _to, _amout);\r\n  }\r\n  \r\n\r\n  function getFunding (address _to, uint _amout) onlyOwner{\r\n    _to.transfer(_amout);\r\n  }\r\n\r\n\r\n  function getAllFunding() onlyOwner{\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n\r\n  /* stop ICO*/\r\n  function halt() onlyOwner{\r\n    halted = true;\r\n  }\r\n  function unhalt() onlyOwner{\r\n    halted = false;\r\n  }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amout\",\"type\":\"uint256\"}],\"name\":\"getTokenForCommunity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amout\",\"type\":\"uint256\"}],\"name\":\"getTokenForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amout\",\"type\":\"uint256\"}],\"name\":\"getTokenForInvester\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newprice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"transferToContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_INVESTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOR_COMUNITY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amout\",\"type\":\"uint256\"}],\"name\":\"getFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NVT","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://efa63b1b158dd85903b22231d4293663e146f13ef8ad2786014fb06b97e2f99e"}]}