{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract EggPreSale {\r\n    mapping(address => uint256) userEthIn_;\r\n    mapping(uint256 => transaction) transactions_;\r\n    uint256 weiRaised_;\r\n    uint256 usdRaised_ = 0;\r\n    \r\n    // wallet is offical wallet to receive the fund.\r\n    address public wallet_;\r\n    \r\n    // owner is the trading bot of egg presale.\r\n    address public owner_;\r\n    \r\n    // store the egg coin that will be sold\r\n    address public eggCoinFundWallet_;\r\n    \r\n    uint256 public maxTransactionId_ = 0;\r\n    \r\n    // 1 USD to 25 Egg.\r\n    uint256 public exchangeRate_ = 25;\r\n    \r\n    \r\n    \r\n    ERC20Interface eggCoin_;\r\n    \r\n    // The user who can join egg presale.\r\n    mapping(address => bool) whiteList_;\r\n    \r\n    // The officer who can manage whitelist.\r\n    mapping(address => bool) whiteListManager_;\r\n    \r\n    constructor(\r\n        address _wallet,\r\n        address _eggCoinFundWallet,\r\n        ERC20Interface _eggCoin\r\n    )\r\n        public\r\n    {\r\n        owner_ = msg.sender;\r\n        whiteListManager_[owner_] = true;\r\n        whiteList_[owner_] = true;\r\n\r\n        wallet_ = _wallet;\r\n        eggCoinFundWallet_ = _eggCoinFundWallet;\r\n        eggCoin_ = _eggCoin;\r\n    }\r\n    \r\n    /**\r\n     *    __                 _       \r\n     *   /__\\_   _____ _ __ | |_ ___ \r\n     *  /_\\ \\ \\ / / _ \\ '_ \\| __/ __|\r\n     * //__  \\ V /  __/ | | | |_\\__ \\\r\n     * \\__/   \\_/ \\___|_| |_|\\__|___/                       \r\n     */\r\n    \r\n    event EthIn(\r\n        uint256 transactionId,\r\n        uint256 ethIn,\r\n        address indexed buyer\r\n    );\r\n    \r\n    event EggDistribute(\r\n        uint256 transactionId,\r\n        uint256 eggAmount,\r\n        address indexed receiver\r\n    );\r\n    \r\n    event addToWhiteList(\r\n        address indexed buyer\r\n    );\r\n    \r\n    event removeFromWhiteList(\r\n        address indexed buyer\r\n    );\r\n    \r\n     /**\r\n     *                   _ _  __ _           \r\n     *   /\\/\\   ___   __| (_)/ _(_) ___ _ __ \r\n     *  /    \\ / _ \\ / _` | | |_| |/ _ \\ '__|\r\n     * / /\\/\\ \\ (_) | (_| | |  _| |  __/ |   \r\n     * \\/    \\/\\___/ \\__,_|_|_| |_|\\___|_|                                  \r\n     */\r\n    \r\n    modifier onlyOwner(\r\n        address _address\r\n    )\r\n    {\r\n        require(_address == owner_, \"This actions is not allowed because of permission.\");\r\n        _;\r\n    }\r\n    \r\n    modifier investmentFilter(\r\n        uint256 _ethIn\r\n    )\r\n    {\r\n        require(_ethIn >= 1000000000000000000, \"The minimum ETH must over 1 ETH.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhiteListed(\r\n        address _address    \r\n    )\r\n    {\r\n        require(whiteList_[_address] == true, \"Hmm... You should be added to whitelist first.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhiteListManager(\r\n        address _address\r\n    )\r\n    {\r\n        require(whiteListManager_[_address] == true, \"Oh!!! Are you hacker?\");\r\n        _;\r\n    }\r\n   \r\n    modifier onlyNotSoldOut()\r\n    {\r\n        require(eggCoin_.allowance(eggCoinFundWallet_, this) > 0, \"The eggs has been sold out.\");\r\n        _;\r\n    }\r\n\r\n    function()\r\n        payable\r\n        public\r\n        onlyNotSoldOut\r\n        onlyWhiteListed(msg.sender)\r\n        investmentFilter(msg.value)\r\n    {\r\n        // get how much ETH user send into contract.\r\n        uint256 _ethIn = msg.value;\r\n        \r\n        maxTransactionId_ = maxTransactionId_ + 1;\r\n        uint256 _transactionId = maxTransactionId_;\r\n        \r\n        transactions_[_transactionId].ethIn = _ethIn;\r\n        transactions_[_transactionId].buyer = msg.sender;\r\n        transactions_[_transactionId].eggDistributed = false;\r\n        transactions_[_transactionId].blockNumber = block.number;\r\n        \r\n        emit EthIn(\r\n            _transactionId,\r\n            _ethIn,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    function distributeEgg(\r\n        uint256 _transactionId,\r\n        uint256 _ethToUsdRate\r\n    )\r\n        public\r\n        onlyOwner(msg.sender)\r\n    {\r\n        // avoid double distributing\r\n        bool _eggDistributed = transactions_[_transactionId].eggDistributed;\r\n        require(_eggDistributed == false, \"Egg has been distributed\");\r\n        \r\n        uint256 _userEthIn = transactions_[_transactionId].ethIn;\r\n        \r\n        uint256 _exchageRate = exchangeRate_;\r\n        \r\n        \r\n        uint256 _fee = calculateFee(_ethToUsdRate);\r\n        _userEthIn = _userEthIn - _fee;\r\n        \r\n        address _buyer = transactions_[_transactionId].buyer;\r\n        \r\n        uint256 _eggInContract = eggCoin_.allowance(eggCoinFundWallet_, this);\r\n        \r\n        uint256 _eggToDistribute = ((_ethToUsdRate * _userEthIn) * _exchageRate) / 1000;\r\n        \r\n        if(_eggInContract < _eggToDistribute) {\r\n            \r\n            uint256 _refundEgg = _eggToDistribute - _eggInContract;\r\n            // origin statement: refund = refundEgg * 1000 / _exchageRate / _ethToUsdRate;\r\n            // the parameter: _ethToUsdRate = 25\r\n            uint256 _refund = ((_refundEgg * 40) / _ethToUsdRate);\r\n            _userEthIn = _userEthIn - _refund;\r\n            \r\n            transactions_[_transactionId].ethIn = _userEthIn;\r\n            _buyer.transfer(_refund);\r\n            \r\n            _eggToDistribute = _eggInContract;\r\n        }\r\n        \r\n        // origin statement: _ethToUsdRate * (_userEthIn + _fee) / 1000 / 1000000000000000000;\r\n        \r\n        uint256 _usdSendIn = (_ethToUsdRate * (_userEthIn + _fee)) / 1000000000000000000000;\r\n        usdRaised_ = _usdSendIn + usdRaised_;\r\n        weiRaised_ = weiRaised_ + _userEthIn;\r\n        \r\n        // egg to buyer\r\n        eggCoin_.transferFrom(eggCoinFundWallet_, _buyer, _eggToDistribute);\r\n        \r\n        transactions_[_transactionId].eggReceived = _eggToDistribute;\r\n        transactions_[_transactionId].exchangeRate = _ethToUsdRate;\r\n        \r\n        // send pre sale funding to official wallet\r\n        wallet_.transfer(_userEthIn);\r\n        \r\n        // egg distribution fee to owner.\r\n        owner_.transfer(_fee);\r\n        \r\n        transactions_[_transactionId].eggDistributed = true;\r\n        \r\n        emit EggDistribute(\r\n            _transactionId,\r\n            _eggToDistribute,\r\n            _buyer\r\n        );\r\n    }\r\n    \r\n    function calculateFee(\r\n        uint256 _ethToUsdRate\r\n    )\r\n        pure\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // confiscating 0.03 USD from user as fee.\r\n        uint256 _fee = 30000000000000000000 / (_ethToUsdRate);\r\n        return _fee;\r\n    }\r\n    \r\n    function getTransaction(\r\n        uint256 transactionId    \r\n    )\r\n        view\r\n        public\r\n        returns(\r\n            uint256,\r\n            address,\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 _transactionId = transactionId;\r\n        return (\r\n            transactions_[_transactionId].ethIn,\r\n            transactions_[_transactionId].buyer,\r\n            transactions_[_transactionId].eggDistributed,\r\n            transactions_[_transactionId].blockNumber,\r\n            transactions_[_transactionId].exchangeRate\r\n        );\r\n    }\r\n    \r\n    function getWeiRaised()\r\n        view\r\n        public\r\n        returns\r\n        (uint256)\r\n    {\r\n        return weiRaised_;\r\n    }\r\n    \r\n    function getUsdRaised()\r\n        view\r\n        public\r\n        returns\r\n        (uint256)\r\n    {\r\n        return usdRaised_;\r\n    }\r\n   \r\n    /**\r\n     *    ___                                            _       \r\n     *   /___\\__      ___ __   ___ _ __       ___  _ __ | |_   _ \r\n     *  //  //\\ \\ /\\ / / '_ \\ / _ \\ '__|____ / _ \\| '_ \\| | | | |\r\n     * / \\_//  \\ V  V /| | | |  __/ | |_____| (_) | | | | | |_| |\r\n     * \\___/    \\_/\\_/ |_| |_|\\___|_|        \\___/|_| |_|_|\\__, |\r\n     *                                                     |___/ \r\n     * */\r\n     \r\n    function addWhiteListManager(\r\n        address _address\r\n    ) \r\n        onlyOwner(msg.sender)\r\n        public\r\n    {\r\n        whiteListManager_[_address] = true;\r\n    }\r\n    \r\n    function removeWhiteListManager(\r\n        address _address\r\n    )\r\n        onlyOwner(msg.sender)\r\n        public\r\n    {\r\n        whiteListManager_[_address] = false;\r\n    }\r\n    \r\n    /**\r\n     *  __    __ _     _ _         __ _     _                                                       _       \r\n     * / / /\\ \\ \\ |__ (_) |_ ___  / /(_)___| |_  /\\/\\   __ _ _ __   __ _  ___ _ __       ___  _ __ | |_   _ \r\n     * \\ \\/  \\/ / '_ \\| | __/ _ \\/ / | / __| __|/    \\ / _` | '_ \\ / _` |/ _ \\ '__|____ / _ \\| '_ \\| | | | |\r\n     *  \\  /\\  /| | | | | ||  __/ /__| \\__ \\ |_/ /\\/\\ \\ (_| | | | | (_| |  __/ | |_____| (_) | | | | | |_| |\r\n     *   \\/  \\/ |_| |_|_|\\__\\___\\____/_|___/\\__\\/    \\/\\__,_|_| |_|\\__, |\\___|_|        \\___/|_| |_|_|\\__, |\r\n     *                                                             |___/                              |___/ \r\n     * */\r\n    \r\n    function addBuyerToWhiteList(\r\n        address _address\r\n    )\r\n        onlyWhiteListManager(msg.sender)\r\n        public\r\n    {\r\n        whiteList_[_address] = true;\r\n        emit addToWhiteList(_address);\r\n    }\r\n    \r\n    function removeBuyerFromWhiteList(\r\n        address _address\r\n    )\r\n        onlyWhiteListManager(msg.sender)\r\n        public\r\n    {\r\n        whiteList_[_address] = false;\r\n        emit removeFromWhiteList(_address);\r\n    }\r\n     \r\n    /**\r\n     *  __ _                   _                  \r\n     * / _\\ |_ _ __ _   _  ___| |_ _   _ _ __ ___ \r\n     * \\ \\| __| '__| | | |/ __| __| | | | '__/ _ \\\r\n     * _\\ \\ |_| |  | |_| | (__| |_| |_| | | |  __/\r\n     * \\__/\\__|_|   \\__,_|\\___|\\__|\\__,_|_|  \\___|\r\n     */\r\n     \r\n    struct transaction\r\n    {\r\n        uint256 ethIn;\r\n        uint256 eggReceived;\r\n        address buyer;\r\n        bool eggDistributed;\r\n        uint256 blockNumber;\r\n        uint256 exchangeRate;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeBuyerFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTransactionId_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eggCoinFundWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhiteListManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhiteListManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"name\":\"_ethToUsdRate\",\"type\":\"uint256\"}],\"name\":\"distributeEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addBuyerToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_eggCoinFundWallet\",\"type\":\"address\"},{\"name\":\"_eggCoin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"EthIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eggAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EggDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"type\":\"event\"}]","ContractName":"EggPreSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009acb901a2657bb3bd6f00308b3bbe9226706b2bf00000000000000000000000006537cd3c4e65ca1d1f30507497edfbec5f0c404000000000000000000000000b70afe42c8f1b9e78c99b5fb44631b43858f74b1","Library":"","SwarmSource":"bzzr://7b5864d8fec0aa0d28ba09d49905bbce24e97ee1fc0eef89fba19764759e49b3"}]}