{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n// File: contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/SafeDestructible.sol\r\n\r\n/**\r\n * @title SafeDestructible\r\n * Base contract that can be destroyed by owner.\r\n * Can be destructed if there are no funds on contract balance.\r\n */\r\ncontract SafeDestructible is Ownable {\r\n    function destroy() onlyOwner public {\r\n        require(this.balance == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n* @title ERC20 interface\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function decimals() public view returns(uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n        \r\n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/MerchantWallet.sol\r\n\r\n/**\r\n *  @title MerchantWallet\r\n *  Serves as a public Merchant profile with merchant profile info,\r\n *      payment settings and latest reputation value.\r\n *  Also MerchantWallet accepts payments for orders.\r\n */\r\n\r\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\r\n\r\n    string constant VERSION = \"0.5\";\r\n\r\n    /// Address of merchant's account, that can withdraw from wallet\r\n    address public merchantAccount;\r\n\r\n    /// Address of merchant's fund address.\r\n    address public merchantFundAddress;\r\n\r\n    /// Unique Merchant identifier hash\r\n    bytes32 public merchantIdHash;\r\n\r\n    /// profileMap stores general information about the merchant\r\n    mapping (string=>string) profileMap;\r\n\r\n    /// paymentSettingsMap stores payment and order settings for the merchant\r\n    mapping (string=>string) paymentSettingsMap;\r\n\r\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\r\n    mapping (string=>uint32) compositeReputationMap;\r\n\r\n    /// number of last digits in compositeReputation for fractional part\r\n    uint8 public constant REPUTATION_DECIMALS = 4;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\r\n     */\r\n    modifier onlyMerchant() {\r\n        require(msg.sender == merchantAccount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Fund Address should always be Externally Owned Account and not a contract.\r\n     */\r\n    modifier isEOA(address _fundAddress) {\r\n        uint256 _codeLength;\r\n        assembly {_codeLength := extcodesize(_fundAddress)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\r\n     */\r\n    modifier onlyMerchantOrMonetha() {\r\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\r\n     *  @param _merchantId Merchant identifier\r\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\r\n     */\r\n    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\r\n        require(_merchantAccount != 0x0);\r\n        require(bytes(_merchantId).length > 0);\r\n\r\n        merchantAccount = _merchantAccount;\r\n        merchantIdHash = keccak256(_merchantId);\r\n\r\n        merchantFundAddress = _fundAddress;\r\n    }\r\n\r\n    /**\r\n     *  Accept payment from MonethaGateway\r\n     */\r\n    function () external payable {\r\n    }\r\n\r\n    /**\r\n     *  @return profile info by string key\r\n     */\r\n    function profile(string key) external constant returns (string) {\r\n        return profileMap[key];\r\n    }\r\n\r\n    /**\r\n     *  @return payment setting by string key\r\n     */\r\n    function paymentSettings(string key) external constant returns (string) {\r\n        return paymentSettingsMap[key];\r\n    }\r\n\r\n    /**\r\n     *  @return composite reputation value by string key\r\n     */\r\n    function compositeReputation(string key) external constant returns (uint32) {\r\n        return compositeReputationMap[key];\r\n    }\r\n\r\n    /**\r\n     *  Set profile info by string key\r\n     */\r\n    function setProfile(\r\n        string profileKey,\r\n        string profileValue,\r\n        string repKey,\r\n        uint32 repValue\r\n    )\r\n        external onlyOwner\r\n    {\r\n        profileMap[profileKey] = profileValue;\r\n\r\n        if (bytes(repKey).length != 0) {\r\n            compositeReputationMap[repKey] = repValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Set payment setting by string key\r\n     */\r\n    function setPaymentSettings(string key, string value) external onlyOwner {\r\n        paymentSettingsMap[key] = value;\r\n    }\r\n\r\n    /**\r\n     *  Set composite reputation value by string key\r\n     */\r\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\r\n        compositeReputationMap[key] = value;\r\n    }\r\n\r\n    /**\r\n     *  Allows withdrawal of funds to beneficiary address\r\n     */\r\n    function doWithdrawal(address beneficiary, uint amount) private {\r\n        require(beneficiary != 0x0);\r\n        beneficiary.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to withdraw funds to beneficiary address\r\n     */\r\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\r\n        doWithdrawal(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to withdraw funds to it's own account\r\n     */\r\n    function withdraw(uint amount) external onlyMerchant {\r\n        withdrawTo(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\r\n     */\r\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\r\n        doWithdrawal(depositAccount, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\r\n     */\r\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\r\n        require (address(this).balance >= min_amount);\r\n        doWithdrawal(depositAccount, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\r\n     */\r\n    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\r\n        require(_tokenAddress != address(0));\r\n        \r\n        uint balance = ERC20(_tokenAddress).balanceOf(address(this));\r\n        \r\n        require(balance >= _minAmount);\r\n        \r\n        ERC20(_tokenAddress).transfer(_depositAccount, balance);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to change it's account address\r\n     */\r\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\r\n        merchantAccount = newAccount;\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to change it's fund address.\r\n     */\r\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\r\n        merchantFundAddress = newFundAddress;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"depositAccount\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositAccount\",\"type\":\"address\"},{\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllToExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"paymentSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"profileKey\",\"type\":\"string\"},{\"name\":\"profileValue\",\"type\":\"string\"},{\"name\":\"repKey\",\"type\":\"string\"},{\"name\":\"repValue\",\"type\":\"uint32\"}],\"name\":\"setProfile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"changeMerchantAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"compositeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_depositAccount\",\"type\":\"address\"},{\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllTokensToExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setCompositeReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setPaymentSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"profile\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantIdHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPUTATION_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundAddress\",\"type\":\"address\"}],\"name\":\"changeFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_merchantAccount\",\"type\":\"address\"},{\"name\":\"_merchantId\",\"type\":\"string\"},{\"name\":\"_fundAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MerchantWallet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004f7630a026a9508a1f5678769a1145cce039ae630000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000194c6561746865722048616e646d6164652050726f647563747300000000000000","Library":"","SwarmSource":"bzzr://ea0a5e65aa3be1e56e12a15c8d3eb72b10964abf24a5b040757fc4083764f4f6"}]}