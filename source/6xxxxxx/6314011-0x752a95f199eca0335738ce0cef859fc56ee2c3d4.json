{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n\r\n    ____  _______   ________   __________  _   ____________  ____  __ \r\n   / __ \\/ ____/ | / /_  __/  / ____/ __ \\/ | / /_  __/ __ \\/ __ \\/ / \r\n  / /_/ / __/ /  |/ / / /    / /   / / / /  |/ / / / / /_/ / / / / /  \r\n / _, _/ /___/ /|  / / /    / /___/ /_/ / /|  / / / / _, _/ /_/ / /___\r\n/_/ |_/_____/_/ |_/ /_/     \\____/\\____/_/ |_/ /_/ /_/ |_|\\____/_____/\r\n                                                                      \r\nwebsite:    https://rentcontrol.tk\r\n\r\ndiscord:    https://discord.gg/X78kgWp\r\n\r\nBuy Property.   Collect Rent.\r\n\r\nRent Control is a strategy game where you buy property levels and collect rent from other owners.\r\n\r\nGame begins with 20 property levels.    Level 1 is the best and most valuable.    When you own a property level, you collect rent from the purchases of every other level.\r\nDifferent levels have different rates of rent.    Level 1 collects 10% of all rent distributions from each purchase.\r\nOnce you buy a property level it is then available for purchase at a price 10% higher than what you paid.    So you will earn rent while you won the property AND you will have a capital gain\r\nwhen someone buys the level from you.\r\n\r\nProperty owner receives 50% of the gain from a sale.\r\n\r\n30% of gains are distributed to other property owners based on their rates of rent.\r\n\r\n20% of gains are distributed to dev.\r\n\r\nMasternodes recieve 5% of any distributions from buyers using the link.\r\n\r\n*/\r\n\r\ncontract RENTCONTROL {\r\n    /*=================================\r\n    =        MODIFIERS        =\r\n    =================================*/\r\n   \r\n\r\n\r\n    modifier onlyOwner(){\r\n        \r\n        require(msg.sender == dev);\r\n        _;\r\n    }\r\n    \r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onLevelPurchase(\r\n        address customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 level,\r\n        uint256 newPrice\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    // ERC20\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 level\r\n    );\r\n\r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"RENT CONTROL\";\r\n    string public symbol = \"LEVEL\";\r\n\r\n    uint8 constant public devDivRate = 20;\r\n    uint8 constant public ownerDivRate = 50;\r\n    uint8 constant public distDivRate = 30;\r\n\r\n    uint8 constant public referralRate = 5; \r\n\r\n    uint8 constant public decimals = 18;\r\n  \r\n    uint public totalLevelValue = 2465e16;\r\n\r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    \r\n    mapping(uint => address) internal levelOwner;\r\n    mapping(uint => uint) public levelPrice;\r\n    mapping(uint => uint) internal levelPreviousPrice;\r\n    mapping(address => uint) internal ownerAccounts;\r\n    mapping(uint => uint) internal totalLevelDivs;\r\n    mapping(uint => string) internal levelName;\r\n\r\n    uint levelPriceIncrement = 110;\r\n    uint totalDivsProduced = 0;\r\n\r\n    uint public maxLevels = 200;\r\n    \r\n    uint public initialPrice = 5e16;   //0.05 ETH\r\n\r\n    uint public nextAvailableLevel;\r\n\r\n    bool allowReferral = false;\r\n\r\n    bool allowAutoNewLevel = false;\r\n   \r\n    address dev;\r\n\r\n    \r\n    \r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    function RENTCONTROL()\r\n        public\r\n    {\r\n        dev = msg.sender;\r\n        nextAvailableLevel = 21;\r\n\r\n        levelOwner[1] = dev;\r\n        levelPrice[1] = 5e18;\r\n        levelPreviousPrice[1] = levelPrice[1];\r\n\r\n        levelOwner[2] = dev;\r\n        levelPrice[2] = 4e18;\r\n        levelPreviousPrice[2] = levelPrice[2];\r\n\r\n        levelOwner[3] = dev;\r\n        levelPrice[3] = 3e18;\r\n        levelPreviousPrice[3] = levelPrice[3];\r\n\r\n        levelOwner[4] = dev;\r\n        levelPrice[4] = 25e17;\r\n        levelPreviousPrice[4] = levelPrice[4];\r\n\r\n        levelOwner[5] = dev;\r\n        levelPrice[5] = 20e17;\r\n        levelPreviousPrice[5] = levelPrice[5];\r\n\r\n        levelOwner[6] = dev;\r\n        levelPrice[6] = 15e17;\r\n        levelPreviousPrice[6] = levelPrice[6];\r\n\r\n        levelOwner[7] = dev;\r\n        levelPrice[7] = 125e16;\r\n        levelPreviousPrice[7] = levelPrice[7];\r\n\r\n        levelOwner[8] = dev;\r\n        levelPrice[8] = 100e16;\r\n        levelPreviousPrice[8] = levelPrice[8];\r\n\r\n        levelOwner[9] = dev;\r\n        levelPrice[9] = 80e16;\r\n        levelPreviousPrice[9] = levelPrice[9];\r\n\r\n        levelOwner[10] = dev;\r\n        levelPrice[10] = 70e16;\r\n        levelPreviousPrice[10] = levelPrice[10];\r\n\r\n        levelOwner[11] = dev;\r\n        levelPrice[11] = 60e16;\r\n        levelPreviousPrice[11] = levelPrice[11];\r\n\r\n        levelOwner[12] = dev;\r\n        levelPrice[12] = 50e16;\r\n        levelPreviousPrice[12] = levelPrice[12];\r\n\r\n        levelOwner[13] = dev;\r\n        levelPrice[13] = 40e16;\r\n        levelPreviousPrice[13] = levelPrice[13];\r\n\r\n        levelOwner[14] = dev;\r\n        levelPrice[14] = 35e16;\r\n        levelPreviousPrice[14] = levelPrice[14];\r\n\r\n        levelOwner[15] = dev;\r\n        levelPrice[15] = 30e16;\r\n        levelPreviousPrice[15] = levelPrice[15];\r\n\r\n        levelOwner[16] = dev;\r\n        levelPrice[16] = 25e16;\r\n        levelPreviousPrice[16] = levelPrice[16];\r\n\r\n        levelOwner[17] = dev;\r\n        levelPrice[17] = 20e16;\r\n        levelPreviousPrice[17] = levelPrice[17];\r\n\r\n        levelOwner[18] = dev;\r\n        levelPrice[18] = 15e16;\r\n        levelPreviousPrice[18] = levelPrice[18];\r\n\r\n        levelOwner[19] = dev;\r\n        levelPrice[19] = 10e16;\r\n        levelPreviousPrice[19] = levelPrice[19];\r\n\r\n        levelOwner[20] = dev;\r\n        levelPrice[20] = 5e16;\r\n        levelPreviousPrice[20] = levelPrice[20];\r\n\r\n\r\n    }\r\n\r\n    function addTotalLevelValue(uint _new, uint _old)\r\n    internal\r\n    {\r\n        uint newPrice = SafeMath.div(SafeMath.mul(_new,levelPriceIncrement),100);\r\n        totalLevelValue = SafeMath.add(totalLevelValue, SafeMath.sub(newPrice,_old));\r\n    }\r\n    \r\n    function buy(uint _level, address _referrer)\r\n        public\r\n        payable\r\n\r\n    {\r\n        require(_level <= nextAvailableLevel);\r\n        require(msg.value >= levelPrice[_level]);\r\n        addTotalLevelValue(msg.value, levelPreviousPrice[_level]);\r\n\r\n        if (levelOwner[_level] == dev){   \r\n\r\n            require(msg.value >= levelPrice[_level]);\r\n           // uint _price = msg.value;\r\n\r\n            if ((allowAutoNewLevel) && (_level == nextAvailableLevel - 1) && nextAvailableLevel < maxLevels) {\r\n                levelOwner[nextAvailableLevel] = dev;\r\n                levelPrice[nextAvailableLevel] = initialPrice;\r\n                nextAvailableLevel = nextAvailableLevel + 1;\r\n                \r\n            }\r\n\r\n            \r\n\r\n            ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],msg.value);\r\n\r\n            levelOwner[_level] = msg.sender;\r\n\r\n            //Increment the Level Price\r\n            levelPreviousPrice[_level] = msg.value;\r\n            levelPrice[_level] = SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100);\r\n            //levelName[_level] = _name;     //Give your level an optional name\r\n\r\n\r\n        } else {      \r\n\r\n            require(msg.sender != levelOwner[_level]);\r\n\r\n           // uint _price = msg.value;\r\n\r\n            uint _newPrice = SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100);\r\n\r\n             //Determine the total dividends\r\n            uint _baseDividends = msg.value - levelPreviousPrice[_level];\r\n            totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\r\n\r\n            uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\r\n            uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),100);\r\n\r\n            totalLevelDivs[_level] = SafeMath.add(totalLevelDivs[_level],_ownerDividends);\r\n            _ownerDividends = SafeMath.add(_ownerDividends,levelPreviousPrice[_level]);\r\n            \r\n            uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),100);\r\n\r\n            if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\r\n                \r\n                uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),100);\r\n                _distDividends = SafeMath.sub(_distDividends,_referralDividends);\r\n                ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\r\n            }\r\n            \r\n\r\n\r\n            //distribute dividends to accounts\r\n            address _previousOwner = levelOwner[_level];\r\n            address _newOwner = msg.sender;\r\n\r\n            ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\r\n            ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],_devDividends);\r\n\r\n            distributeRent(nextAvailableLevel, _distDividends);\r\n\r\n            //Increment the Level Price\r\n            levelPreviousPrice[_level] = msg.value;\r\n            levelPrice[_level] = _newPrice;\r\n            levelOwner[_level] = _newOwner;\r\n            //levelName[_level] = _name;   //Give your level an optional name\r\n\r\n        }\r\n\r\n        emit onLevelPurchase(msg.sender, msg.value, _level, SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100));\r\n     \r\n    }\r\n\r\n    function distributeRent(uint _levels, uint _distDividends) {\r\n\r\n        uint _distFactor = 10;\r\n        uint counter = 1;\r\n\r\n        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev], _distDividends);\r\n\r\n        while (counter < nextAvailableLevel) { \r\n                \r\n            uint _distAmountLocal = SafeMath.div(_distDividends,_distFactor);\r\n            ownerAccounts[levelOwner[counter]] = SafeMath.add(ownerAccounts[levelOwner[counter]],_distAmountLocal);\r\n            totalLevelDivs[counter] = SafeMath.add(totalLevelDivs[counter],_distAmountLocal);\r\n            counter = counter + 1;\r\n            ownerAccounts[dev] = SafeMath.sub(ownerAccounts[dev], _distAmountLocal);\r\n            _distFactor = SafeMath.div(SafeMath.mul(_distFactor, 112),100);\r\n        } \r\n\r\n    }\r\n\r\n\r\n    function withdraw()\r\n    \r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(ownerAccounts[_customerAddress] > 0);\r\n        uint _dividends = ownerAccounts[_customerAddress];\r\n        ownerAccounts[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        // fire event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function withdrawPart(uint _amount)\r\n    \r\n        public\r\n        onlyOwner()\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(ownerAccounts[_customerAddress] > 0);\r\n        require(_amount <= ownerAccounts[_customerAddress]);\r\n        ownerAccounts[_customerAddress] = SafeMath.sub(ownerAccounts[_customerAddress],_amount);\r\n        _customerAddress.transfer(_amount);\r\n        // fire event\r\n        onWithdraw(_customerAddress, _amount);\r\n    }\r\n\r\n\r\n    \r\n\r\n     // Fallback function: just send funds back\r\n\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        revert();\r\n    }\r\n    \r\n    /**\r\n     * Transfer Level to another address\r\n     */\r\n    function transfer(address _to, uint _level )\r\n       \r\n        public\r\n    {\r\n        require(levelOwner[nextAvailableLevel] == msg.sender);\r\n\r\n        levelOwner[nextAvailableLevel] = _to;\r\n\r\n        emit Transfer(msg.sender, _to, _level);\r\n\r\n    }\r\n    \r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setInitialPrice(uint _price)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        initialPrice = _price;\r\n    }\r\n\r\n    function setMaxLevels(uint _level)  \r\n        onlyOwner()\r\n        public\r\n    {\r\n        maxLevels = _level;\r\n    }\r\n\r\n    function setLevelPrice(uint _level, uint _price)   //Allow the changing of a level price owner if the dev owns it\r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(levelOwner[_level] == dev);\r\n        levelPrice[_level] = _price;\r\n    }\r\n    \r\n    function addNewLevel(uint _price) \r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(nextAvailableLevel < maxLevels);\r\n        levelPrice[nextAvailableLevel] = _price;\r\n        levelOwner[nextAvailableLevel] = dev;\r\n        totalLevelDivs[nextAvailableLevel] = 0;\r\n        nextAvailableLevel = nextAvailableLevel + 1;\r\n    }\r\n\r\n    function setAllowReferral(bool _allowReferral)   \r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowReferral = _allowReferral;\r\n    }\r\n\r\n    function setAutoNewlevel(bool _autoNewLevel)   \r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowAutoNewLevel = _autoNewLevel;\r\n    }\r\n\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n\r\n\r\n    function getMyBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return ownerAccounts[msg.sender];\r\n    }\r\n\r\n    function getOwnerBalance(address _levelOwner)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(msg.sender == dev);\r\n        return ownerAccounts[_levelOwner];\r\n    }\r\n    \r\n    function getlevelPrice(uint _level)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_level <= nextAvailableLevel);\r\n        return levelPrice[_level];\r\n    }\r\n\r\n    function getlevelOwner(uint _level)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(_level <= nextAvailableLevel);\r\n        return levelOwner[_level];\r\n    }\r\n\r\n    function gettotalLevelDivs(uint _level)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_level <= nextAvailableLevel);\r\n        return totalLevelDivs[_level];\r\n    }\r\n\r\n    function getTotalDivsProduced()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n     \r\n        return totalDivsProduced;\r\n    }\r\n\r\n    function getTotalLevelValue()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n      \r\n        return totalLevelValue;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address (this).balance;\r\n    }\r\n\r\n    function getNextAvailableLevel()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return nextAvailableLevel;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getlevelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"gettotalLevelDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getlevelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAvailableLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLevels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLevelValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowReferral\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setMaxLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_levelOwner\",\"type\":\"address\"}],\"name\":\"getOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextAvailableLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_levels\",\"type\":\"uint256\"},{\"name\":\"_distDividends\",\"type\":\"uint256\"}],\"name\":\"distributeRent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivsProduced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autoNewLevel\",\"type\":\"bool\"}],\"name\":\"setAutoNewlevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalLevelValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setLevelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onLevelPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RENTCONTROL","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://797198464bd385f8001bd62b797ae6d06f0a505180ea261f8c74518818089f3e"}]}