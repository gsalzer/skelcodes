{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Token {\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n}\r\n\r\ncontract FactoryData is Ownable {\r\n    using SafeMath for uint256;\r\n    struct CP {\r\n        string refNumber;\r\n        string name;\r\n        mapping(address => bool) factories;\r\n    }\r\n\r\n    uint256 blocksquareFee = 20;\r\n    uint256 networkReserveFundFee = 50;\r\n    uint256 cpFee = 15;\r\n    uint256 firstBuyersFee = 15;\r\n\r\n    /* Mappings */\r\n    mapping(address => mapping(address => bool)) whitelisted;\r\n    mapping(string => address) countryFactory;\r\n    mapping(address => bool) memberOfBS;\r\n    mapping(address => uint256) requiredBST;\r\n    mapping(address => CP) CPs;\r\n    mapping(address => address) noFeeTransfersAccounts;\r\n    mapping(address => bool) prestigeAddress;\r\n    Token BST;\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract.\r\n    **/\r\n    constructor() public {\r\n        memberOfBS[msg.sender] = true;\r\n        owner = msg.sender;\r\n        BST = Token(0x509A38b7a1cC0dcd83Aa9d06214663D9eC7c7F4a);\r\n    }\r\n\r\n    /**\r\n    * Add factory\r\n    *\r\n    * Owner can add factory for country\r\n    *\r\n    * @param _country Name of country\r\n    * @param _factory Address of factory\r\n    **/\r\n    function addFactory(string _country, address _factory) public onlyOwner {\r\n        countryFactory[_country] = _factory;\r\n    }\r\n\r\n    /**\r\n    * @dev add member to blocksquare group\r\n    * @param _member Address of member to add\r\n    **/\r\n    function addMemberToBS(address _member) public onlyOwner {\r\n        memberOfBS[_member] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev add new certified partner\r\n    * @param _cp Wallet address of certified partner\r\n    * @param _refNumber Reference number of certified partner\r\n    * @param _name Name of certified partner\r\n    **/\r\n    function createCP(address _cp, string _refNumber, string _name) public onlyOwner {\r\n        CP memory cp = CP(_refNumber, _name);\r\n        CPs[_cp] = cp;\r\n    }\r\n\r\n    /**\r\n    * @dev add allowance to create buildings in country to certified partner\r\n    * @param _cp Wallet address of certified partner\r\n    * @param _factory Factory address\r\n    **/\r\n    function addFactoryToCP(address _cp, address _factory) public onlyOwner {\r\n        CP storage cp = CPs[_cp];\r\n        cp.factories[_factory] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev remove allowance to create buildings in country from certified partner\r\n    * @param _cp Wallet address of certified partner\r\n    * @param _factory Factory address\r\n    **/\r\n    function removeCP(address _cp, address _factory) public onlyOwner {\r\n        CP storage cp = CPs[_cp];\r\n        cp.factories[_factory] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev connect two addresses so that they can send BSPT without fee\r\n    * @param _from First address\r\n    * @param _to Second address\r\n    **/\r\n    function addNoFeeAddress(address[] _from, address[] _to) public onlyOwner {\r\n        require(_from.length == _to.length);\r\n        for (uint256 i = 0; i < _from.length; i++) {\r\n            noFeeTransfersAccounts[_from[i]] = _to[i];\r\n            noFeeTransfersAccounts[_to[i]] = _from[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev change BTS requirement for buying BSPT\r\n    * @param _factory Address of factory\r\n    * @param _amount Amount of required tokens\r\n    **/\r\n    function changeBSTRequirement(address _factory, uint256 _amount) public onlyOwner {\r\n        requiredBST[_factory] = _amount * 10 ** 18;\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to whitelist for factory\r\n    * @param _factory Address of factory\r\n    * @param _addresses Array of addresses to whitelist\r\n    **/\r\n    function addToWhitelist(address _factory, address[] _addresses) public onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            whitelisted[_factory][_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove address from whitelist\r\n    * @param _factory Address of factory\r\n    * @param _user Address of user\r\n    **/\r\n    function removeFromWhitelist(address _factory, address _user) public onlyOwner {\r\n        whitelisted[_factory][_user] = false;\r\n    }\r\n\r\n    function changeFees(uint256 _network, uint256 _blocksquare, uint256 _cp, uint256 _firstBuyers) public onlyOwner {\r\n        require(_network.add(_blocksquare).add(_cp).add(_firstBuyers) == 100);\r\n        blocksquareFee = _network;\r\n        networkReserveFundFee = _blocksquare;\r\n        cpFee = _cp;\r\n        firstBuyersFee = _firstBuyers;\r\n    }\r\n\r\n    function changePrestige(address _owner) public onlyOwner {\r\n        prestigeAddress[_owner] = !prestigeAddress[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev check if address is whitelisted for factory\r\n    * @param _factory Address of factory\r\n    * @param _user Address of user\r\n    * @return True if user is whitelisted for given factory, false instead\r\n    **/\r\n    function isWhitelisted(address _factory, address _user) public constant returns (bool) {\r\n        return whitelisted[_factory][_user];\r\n    }\r\n\r\n    /**\r\n    * @dev get factory address for given country\r\n    * @param _country Name of country\r\n    * @return Address of factory\r\n    **/\r\n    function getFactoryForCountry(string _country) public constant returns (address) {\r\n        return countryFactory[_country];\r\n    }\r\n\r\n    /**\r\n    * @dev check if address is member of Blocksquare\r\n    * @param _member Address of member\r\n    * @return True if member is member of Blocksquare, false instead\r\n    **/\r\n    function isBS(address _member) public constant returns (bool) {\r\n        return memberOfBS[_member];\r\n    }\r\n\r\n    /**\r\n    * @dev check if address has enough BST to buy BSPT\r\n    * @param _factory Address of factory\r\n    * @param _address Address of BST owner\r\n    * @return True if address has enough BST, false instead\r\n    **/\r\n    function hasEnoughBST(address _factory, address _address) constant public returns (bool) {\r\n        return BST.balanceOf(_address) >= requiredBST[_factory];\r\n    }\r\n\r\n    /**\r\n    * @dev amount of BST required to buy BSPT\r\n    * @param _factory Address of factory\r\n    * @return Amount of BST required\r\n    **/\r\n    function amountOfBSTRequired(address _factory) constant public returns (uint256) {\r\n        return requiredBST[_factory];\r\n    }\r\n\r\n    /**\r\n    * @dev check if certified partner can create new building in factory\r\n    * @param _cp Wallet address of certified partner\r\n    * @param _factory Factory address\r\n    * @return True if certified partner can create buildings, false instead\r\n    **/\r\n    function canCPCreateInFactory(address _cp, address _factory) constant public returns (bool) {\r\n        return CPs[_cp].factories[_factory];\r\n    }\r\n\r\n    /**\r\n    * @dev get info about certified partner\r\n    * @param _cp Wallet address of certified partner\r\n    * @return Certified partner's reference number and name\r\n    **/\r\n    function getCP(address _cp) constant public returns (string, string) {\r\n        return (CPs[_cp].refNumber, CPs[_cp].name);\r\n    }\r\n\r\n    /**\r\n    * @dev check if two address can send BSPT without fee;\r\n    * @param _from From address\r\n    * @param _to To address\r\n    * @return True if addresses can send BSPT without fee between them, false instead\r\n    **/\r\n    function canMakeNoFeeTransfer(address _from, address _to) constant public returns (bool) {\r\n        return noFeeTransfersAccounts[_from] == _to;\r\n    }\r\n\r\n    function getNetworkFee() public constant returns (uint256) {\r\n        return networkReserveFundFee;\r\n    }\r\n\r\n    function getBlocksquareFee() public constant returns (uint256) {\r\n        return blocksquareFee;\r\n    }\r\n\r\n    function getCPFee() public constant returns (uint256) {\r\n        return cpFee;\r\n    }\r\n\r\n    function getFirstBuyersFee() public constant returns (uint256) {\r\n        return firstBuyersFee;\r\n    }\r\n\r\n    function hasPrestige(address _owner) public constant returns(bool) {\r\n        return prestigeAddress[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasPrestige\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"amountOfBSTRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstBuyersFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_country\",\"type\":\"string\"}],\"name\":\"getFactoryForCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_network\",\"type\":\"uint256\"},{\"name\":\"_blocksquare\",\"type\":\"uint256\"},{\"name\":\"_cp\",\"type\":\"uint256\"},{\"name\":\"_firstBuyers\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isBS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cp\",\"type\":\"address\"}],\"name\":\"getCP\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cp\",\"type\":\"address\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeCP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksquareFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"addMemberToBS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasEnoughBST\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cp\",\"type\":\"address\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"canCPCreateInFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"canMakeNoFeeTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"addNoFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changePrestige\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cp\",\"type\":\"address\"},{\"name\":\"_refNumber\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createCP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeBSTRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cp\",\"type\":\"address\"},{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactoryToCP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNetworkFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FactoryData","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://109d13bd7e84fae9bb426b848927a7ca10c989286571518524aa5b2235404edb"}]}