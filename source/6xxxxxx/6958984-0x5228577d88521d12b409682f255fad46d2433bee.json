{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\ncontract Operations {\r\n    function copyBytesNToBytes(bytes32 source, bytes memory destination, uint[1] memory pointer) internal pure {\r\n        for (uint i=0; i < 32; i++) {\r\n            if (source[i] == 0)\r\n                break;\r\n            else {\r\n                destination[pointer[0]]=source[i];\r\n                pointer[0]++;\r\n            }\r\n        }\r\n    }\r\n    function copyBytesToBytes(bytes memory source, bytes memory destination, uint[1] memory pointer) internal pure {\r\n        for (uint i=0; i < source.length; i++) {\r\n            if (source[i] == 0)\r\n                break;\r\n            destination[pointer[0]]=source[i];\r\n            pointer[0]++;\r\n        }\r\n    }\r\n    function uintToBytesN(uint v) internal pure returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        }\r\n        else {\r\n            while (v > 0) {\r\n//                ret = bytes32(uint(ret) / (2 ** 8));\r\n//                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                ret = bytes32(uint(ret) >> 8);\r\n                ret |= bytes32(((v % 10) + 48) << (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    function stringToBytes32(string memory str) internal pure returns(bytes32) {\r\n        bytes32 bStrN;\r\n        assembly {\r\n            bStrN := mload(add(str, 32))\r\n        }\r\n        return(bStrN);\r\n    }\r\n}\r\n\r\ncontract DataRegister is Operations {\r\n    bytes32 Institute; \r\n    address owner;\r\n    mapping(bytes10 => bytes) Instructor;\r\n    mapping(uint => bytes10) InstructorUIds;\r\n    uint public InstructorCount = 0;\r\n    struct course {\r\n        bytes CourseName;\r\n        bytes10 StartDate;\r\n        bytes10 EndDate;\r\n        uint Hours;\r\n    }\r\n    struct courseInstructor {\r\n        uint CourseId;\r\n        uint InstructorId;\r\n    }\r\n    courseInstructor[] CourseInstructor;\r\n    mapping(bytes10 => course) Course;\r\n    mapping(uint => bytes10) CourseUIds;\r\n    uint CourseCount = 0;\r\n    mapping(bytes10 => bytes) Student;\r\n    mapping(uint => bytes10) StudentUIds;\r\n    uint StudentCount = 0;\r\n    struct certificate {\r\n        uint CourseId;\r\n        uint StudentId;\r\n        uint CertificateType;\r\n        bytes10 Result;\r\n        bool Enabled;\r\n    }\r\n    mapping(bytes10 => certificate) Certificate;\r\n    uint CertificateCount = 0;\r\n    mapping(uint => bytes10) CertificateUIds;\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    modifier notEmpty(string memory str) {\r\n        bytes memory bStr = bytes(str);\r\n        require(bStr.length > 0);\r\n        _;\r\n    }\r\n    modifier isPositive(uint number) {\r\n        require(number > 0);\r\n        _;\r\n    }\r\n    modifier haveInstructor(uint InstructorId) {\r\n        require(Instructor[InstructorUIds[InstructorId]].length > 0);\r\n        _;\r\n    }\r\n    modifier haveCourse(uint CourseId) {\r\n        require(CourseUIds[CourseId].length > 0);\r\n        _;\r\n    }\r\n    modifier haveStudent(uint StudentId) {\r\n        require(Student[StudentUIds[StudentId]].length > 0);\r\n        _;\r\n    }\r\n    modifier uniqueCertificateUId(string memory certificateUId) {\r\n        require(Certificate[bytes10(stringToBytes32(certificateUId))].CourseId == 0);\r\n        _;\r\n    }\r\n    modifier uniqueInstructorUId(string memory _instructorUId) {\r\n        require(Instructor[bytes10(stringToBytes32(_instructorUId))].length == 0);\r\n        _;\r\n    }\r\n    modifier uniqueCourseUId(string memory _courseUId) {\r\n        require(Course[bytes10(stringToBytes32(_courseUId))].CourseName.length == 0);\r\n        _;\r\n    }\r\n    modifier uniqueStudentUId(string memory _studentUId) {\r\n        require(Student[bytes10(stringToBytes32(_studentUId))].length == 0);\r\n        _;\r\n    }\r\n    modifier notRepeat(uint CourseId, uint InstructorId) {\r\n        bool found = false;\r\n        for (uint i = 0; i < CourseInstructor.length; i++) {\r\n            if (CourseInstructor[i].CourseId == CourseId && CourseInstructor[i].InstructorId == InstructorId) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        require(! found);\r\n        _;\r\n    }\r\n    function RegisterInstructor(\r\n        string memory NationalId, \r\n        string memory instructor\r\n        ) public onlyOwner notEmpty(NationalId) notEmpty(instructor) uniqueInstructorUId(NationalId) returns(bool) {\r\n            bytes10 _instructorUId = bytes10(stringToBytes32(NationalId));\r\n            InstructorCount++;\r\n            Instructor[_instructorUId] = bytes(instructor);\r\n            InstructorUIds[InstructorCount]=_instructorUId;\r\n            return(true);\r\n    }\r\n    function RegisterCourse(\r\n        string memory CourseUId,\r\n        string memory CourseName,\r\n        string memory StartDate,\r\n        string memory EndDate,\r\n        uint Hours,\r\n        uint InstructorId\r\n        ) public onlyOwner notEmpty(CourseUId) notEmpty(CourseName) \r\n            isPositive(Hours) haveInstructor(InstructorId) uniqueCourseUId(CourseUId) {\r\n            course memory _course = setCourseElements(CourseName, StartDate, EndDate, Hours);\r\n            CourseCount++;\r\n            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));\r\n            CourseUIds[CourseCount] = _courseUId;\r\n            Course[_courseUId] = _course;\r\n            courseInstructor memory _courseInstructor;\r\n            _courseInstructor.CourseId = CourseCount;\r\n            _courseInstructor.InstructorId = InstructorId;\r\n            CourseInstructor.push(_courseInstructor);\r\n    }\r\n    function AddCourseInstructor(\r\n        uint CourseId,\r\n        uint InstructorId\r\n        ) public onlyOwner haveCourse(CourseId) notRepeat(CourseId, InstructorId) haveInstructor(InstructorId) {\r\n            courseInstructor memory _courseInstructor;\r\n            _courseInstructor.CourseId = CourseId;\r\n            _courseInstructor.InstructorId = InstructorId;\r\n            CourseInstructor.push(_courseInstructor);\r\n        }\r\n    function setCourseElements(\r\n        string memory CourseName, \r\n        string memory StartDate, \r\n        string memory EndDate,\r\n        uint Hours\r\n        ) internal pure returns(course memory) {\r\n        course memory _course;\r\n        _course.CourseName = bytes(CourseName);\r\n        _course.StartDate = bytes10(stringToBytes32(StartDate));\r\n        _course.EndDate = bytes10(stringToBytes32(EndDate));\r\n        _course.Hours = Hours;\r\n        return(_course);\r\n    }\r\n    function RegisterStudent(\r\n        string memory NationalId,\r\n        string memory Name\r\n        ) public onlyOwner notEmpty(Name) notEmpty(NationalId) uniqueStudentUId(NationalId) returns(bool) {\r\n            StudentCount++;\r\n            StudentUIds[StudentCount] = bytes10(stringToBytes32(NationalId));\r\n            Student[StudentUIds[StudentCount]]=bytes(Name);\r\n        return(true);\r\n    }\r\n    function RegisterCertificate(\r\n        string memory CertificateUId,\r\n        uint CourseId,\r\n        uint StudentId,\r\n        uint CertificateType,\r\n        string memory Result\r\n        ) public onlyOwner haveStudent(StudentId) haveCourse(CourseId) \r\n        uniqueCertificateUId(CertificateUId) isPositive(CertificateType) returns(bool) {\r\n            certificate memory _certificate;\r\n            _certificate.CourseId = CourseId;\r\n            _certificate.StudentId = StudentId;\r\n            _certificate.CertificateType = CertificateType;\r\n            _certificate.Result = bytes10(stringToBytes32(Result));\r\n            _certificate.Enabled = true;\r\n            bytes10 cert_uid = bytes10(stringToBytes32(CertificateUId));\r\n            CertificateCount++;\r\n            Certificate[cert_uid] = _certificate;\r\n            CertificateUIds[CertificateCount] = cert_uid;\r\n            return(true);\r\n    }\r\n    function EnableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        require(_certificate.Result != '');\r\n        require(! _certificate.Enabled);\r\n        Certificate[_certificateId].Enabled = true;\r\n        return(true);\r\n    }\r\n    function DisableCertificate(string memory CertificateId) public onlyOwner notEmpty(CertificateId) returns(bool) {\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        require(_certificate.Result != '');\r\n        require(_certificate.Enabled);\r\n        Certificate[_certificateId].Enabled = false;\r\n        return(true);\r\n    }\r\n}\r\n\r\ncontract CryptoClassCertificate is DataRegister {\r\n    constructor(string memory _Institute) public notEmpty(_Institute) {\r\n        owner = msg.sender;\r\n        Institute = stringToBytes32(_Institute);\r\n    }\r\n    function GetInstitute() public view returns(string  memory) {\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        bytes memory institute=new bytes(48);\r\n        copyBytesToBytes('{\"Institute\":\"', institute, pointer);\r\n        copyBytesNToBytes(Institute, institute, pointer);\r\n        copyBytesToBytes('\"}', institute, pointer);\r\n        return(string(institute));\r\n    }\r\n    function GetInstructors() public view onlyOwner returns(string memory) {\r\n        uint len = 70;\r\n        uint i;\r\n        for (i=1 ; i <= InstructorCount ; i++) \r\n            len += 100 + Instructor[InstructorUIds[i]].length;\r\n        bytes memory instructors = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{ \"Instructors\":[', instructors, pointer);\r\n        for (i=1 ; i <= InstructorCount ; i++) {\r\n            if (i > 1) \r\n                copyBytesNToBytes(',', instructors, pointer);\r\n            copyBytesNToBytes('{\"National Id\":\"', instructors, pointer);\r\n            copyBytesNToBytes(InstructorUIds[i], instructors, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', instructors, pointer);\r\n            copyBytesToBytes(Instructor[InstructorUIds[i]], instructors, pointer);\r\n            copyBytesNToBytes('\"}', instructors, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', instructors, pointer);\r\n        return(string(instructors));\r\n    }\r\n    function GetInstructor(string memory InstructorNationalId) public view notEmpty(InstructorNationalId) returns(string memory) {\r\n        bytes10 _instructorUId = bytes10(stringToBytes32(InstructorNationalId));\r\n        require(Instructor[_instructorUId].length > 0);\r\n        uint len = 100 + Instructor[_instructorUId].length;\r\n        bytes memory _instructor = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{ \"Instructor\":{\"NationalId\":\"', _instructor, pointer);\r\n        copyBytesNToBytes(_instructorUId, _instructor, pointer);\r\n        copyBytesNToBytes('\",\"Name\":\"', _instructor, pointer);\r\n        copyBytesToBytes(Instructor[_instructorUId], _instructor, pointer);\r\n        copyBytesNToBytes('\"}}', _instructor, pointer);\r\n        return(string(_instructor));\r\n    }\r\n    function GetInstructorCourses(string memory InstructorNationalId) public view notEmpty(InstructorNationalId) returns(string memory) {\r\n        bytes10 _instructorNationalId = bytes10(stringToBytes32(InstructorNationalId));\r\n        require(Instructor[_instructorNationalId].length > 0);\r\n        uint _instructorId = 0;\r\n        uint i;\r\n        for (i = 1; i <= InstructorCount; i++)\r\n            if (InstructorUIds[i] == _instructorNationalId) {\r\n                _instructorId = i;\r\n                break;\r\n            }\r\n        uint len = 50;\r\n        course memory _course;\r\n        for (i=0; i< CourseInstructor.length; i++) {\r\n            if (CourseInstructor[i].InstructorId == _instructorId) { \r\n                _course = Course[CourseUIds[CourseInstructor[i].CourseId]];\r\n                len += 200 + Institute.length + _course.CourseName.length + Instructor[InstructorUIds[_instructorId]].length;\r\n            }\r\n        }\r\n        bytes memory courseInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Courses\":[', courseInfo, pointer);\r\n        bool first = true;\r\n        for (i=0; i< CourseInstructor.length; i++) {\r\n            if (CourseInstructor[i].InstructorId == _instructorId) { \r\n                _course = Course[CourseUIds[CourseInstructor[i].CourseId]];\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    copyBytesNToBytes(',', courseInfo, pointer);\r\n                copyBytesNToBytes('{\"Course Id\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(CourseUIds[CourseInstructor[i].CourseId], courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"Course Name\":\"', courseInfo, pointer);\r\n                copyBytesToBytes(_course.CourseName, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"Start Date\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"End Date\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\r\n                copyBytesNToBytes('\",\"Duration\":\"', courseInfo, pointer);\r\n                copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\r\n                copyBytesNToBytes(' Hours\"}', courseInfo, pointer);\r\n            }\r\n        }\r\n        copyBytesNToBytes(']}', courseInfo, pointer);\r\n        return(string(courseInfo));\r\n    }\r\n    function CourseIdByUId(bytes10 CourseUId) private view returns(uint CourseId) {\r\n        CourseId = 0;\r\n        for (uint i=1; i<=CourseCount;i++)\r\n            if (CourseUIds[i] == CourseUId) {\r\n                CourseId = i;\r\n                break;\r\n            }\r\n        require(CourseId > 0);\r\n    }\r\n    function GetCourseInfo(string memory CourseUId) public view notEmpty(CourseUId) returns(string memory) {\r\n        bytes10 _courseUId=bytes10(stringToBytes32(CourseUId));\r\n        course memory _course;\r\n        _course = Course[_courseUId];\r\n        require(_course.CourseName.length > 0);\r\n        uint len = 200;\r\n        bytes memory instructorsList = CourseInstructorDescription(_courseUId);\r\n        len += instructorsList.length + Institute.length + _course.CourseName.length;\r\n        bytes memory courseInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Course\":', courseInfo, pointer);\r\n        copyBytesNToBytes('{\"Issuer\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(Institute, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"Course Id\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_courseUId, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"Course Name\":\"', courseInfo, pointer);\r\n        copyBytesToBytes(_course.CourseName, courseInfo, pointer);\r\n        copyBytesNToBytes('\",', courseInfo, pointer);\r\n        copyBytesToBytes(instructorsList, courseInfo, pointer);\r\n        copyBytesNToBytes(',\"Start Date\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_course.StartDate, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"End Date\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes(_course.EndDate, courseInfo, pointer);\r\n        copyBytesNToBytes('\",\"Duration\":\"', courseInfo, pointer);\r\n        copyBytesNToBytes( uintToBytesN(_course.Hours), courseInfo, pointer);\r\n        copyBytesNToBytes(' Hours\"}}', courseInfo, pointer);\r\n        return(string(courseInfo));\r\n    }\r\n    function GetCourses() public view returns(string memory) {\r\n        uint len = 50;\r\n        uint i;\r\n        course memory _course;\r\n        for (i=1 ; i <= CourseCount ; i++) {\r\n            _course = Course[CourseUIds[i]];\r\n            len += 200 + _course.CourseName.length;\r\n        }\r\n        bytes memory courses = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        bytes32 hrs;\r\n        copyBytesNToBytes('{\"Courses\":[', courses, pointer);\r\n        for (i=1 ; i <= CourseCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', courses, pointer);\r\n            _course = Course[CourseUIds[i]];\r\n            copyBytesNToBytes('{\"Id\":\"', courses, pointer);\r\n            copyBytesNToBytes(CourseUIds[i], courses, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', courses, pointer);\r\n            copyBytesToBytes(_course.CourseName, courses, pointer);\r\n            copyBytesNToBytes('\",\"Start Date\":\"', courses, pointer);\r\n            copyBytesNToBytes(_course.StartDate, courses, pointer);\r\n            copyBytesNToBytes('\",\"End Date\":\"', courses, pointer);\r\n            copyBytesNToBytes(_course.EndDate, courses, pointer);\r\n            copyBytesNToBytes('\",\"Duration\":\"', courses, pointer);\r\n            hrs = uintToBytesN(_course.Hours);\r\n            copyBytesNToBytes(hrs, courses, pointer);\r\n            copyBytesNToBytes(' Hours\"}', courses, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', courses, pointer);\r\n        return(string(courses));\r\n    }\r\n    function GetStudentInfo(string memory NationalId) public view notEmpty(NationalId) returns(string memory) {\r\n        bytes10 _nationalId=bytes10(stringToBytes32(NationalId));\r\n        bytes memory _student = Student[_nationalId];\r\n        require(_student.length > 0);\r\n        uint len = 150 + Institute.length + _student.length;\r\n        bytes memory studentInfo = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Student\":', studentInfo, pointer);\r\n        copyBytesNToBytes('{\"Issuer\":\"', studentInfo, pointer);\r\n        copyBytesNToBytes(Institute, studentInfo, pointer);\r\n        copyBytesNToBytes('\",\"National Id\":\"', studentInfo, pointer);\r\n        copyBytesNToBytes(_nationalId, studentInfo, pointer);\r\n        copyBytesNToBytes('\",\"Name\":\"', studentInfo, pointer);\r\n        copyBytesToBytes(_student, studentInfo, pointer);\r\n        copyBytesNToBytes('\"}}', studentInfo, pointer);\r\n        return(string(studentInfo));\r\n    }\r\n    function GetStudents() public view onlyOwner returns(string memory) {\r\n        uint len = 50;\r\n        uint i;\r\n        for (i=1 ; i <= StudentCount ; i++) \r\n            len += 50 + Student[StudentUIds[i]].length;\r\n        bytes memory students = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Students\":[', students, pointer);\r\n        for (i=1 ; i <= StudentCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', students, pointer);\r\n            bytes memory _student = Student[StudentUIds[i]];\r\n            copyBytesNToBytes('{\"National Id\":\"', students, pointer);\r\n            copyBytesNToBytes(StudentUIds[i], students, pointer);\r\n            copyBytesNToBytes('\",\"Name\":\"', students, pointer);\r\n            copyBytesToBytes(_student, students, pointer);\r\n            copyBytesNToBytes('\"}', students, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', students, pointer);\r\n        return(string(students));\r\n    }\r\n    function GetCertificates() public view onlyOwner returns(string memory) {\r\n        uint len = 50;\r\n        uint i;\r\n        len += CertificateCount * 60;\r\n        bytes memory certificates = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Certificates\":[', certificates, pointer);\r\n        for (i = 1 ; i <= CertificateCount ; i++) {\r\n            if (i > 1)\r\n                copyBytesNToBytes(',', certificates, pointer);\r\n            copyBytesNToBytes('{\"Certificate Id\":\"', certificates, pointer);\r\n            copyBytesNToBytes(CertificateUIds[i], certificates, pointer);\r\n            copyBytesNToBytes('\",\"Active\":', certificates, pointer);\r\n            if (Certificate[CertificateUIds[i]].Enabled)\r\n                copyBytesNToBytes('true}', certificates, pointer);\r\n            else\r\n                copyBytesNToBytes('false}', certificates, pointer);\r\n        }\r\n        copyBytesNToBytes(']}', certificates, pointer);\r\n        return(string(certificates));\r\n    }\r\n    function GetStudentCertificates(string memory NationalId) public view notEmpty(NationalId) returns(string memory) {\r\n        uint len = 50;\r\n        uint i;\r\n        bytes10 _nationalId=bytes10(stringToBytes32(NationalId));\r\n        require(Student[_nationalId].length > 0);\r\n        for (i = 1 ; i <= CertificateCount ; i++) {\r\n            if (StudentUIds[Certificate[CertificateUIds[i]].StudentId] == _nationalId && \r\n                Certificate[CertificateUIds[i]].Enabled) {\r\n                len += 100 + Course[CourseUIds[Certificate[CertificateUIds[i]].CourseId]].CourseName.length;\r\n            }\r\n        }\r\n        bytes memory certificates = new bytes(len);\r\n        uint[1] memory pointer;\r\n        pointer[0]=0;\r\n        copyBytesNToBytes('{\"Certificates\":[', certificates, pointer);\r\n        bool first=true;\r\n        for (i = 1 ; i <= CertificateCount ; i++) {\r\n            if (StudentUIds[Certificate[CertificateUIds[i]].StudentId] == _nationalId && \r\n                Certificate[CertificateUIds[i]].Enabled) {\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    copyBytesNToBytes(',', certificates, pointer);\r\n                copyBytesNToBytes('{\"Certificate Id\":\"', certificates, pointer);\r\n                copyBytesNToBytes(CertificateUIds[i], certificates, pointer);\r\n                copyBytesNToBytes('\",\"Course Name\":\"', certificates, pointer);\r\n                copyBytesToBytes(Course[CourseUIds[Certificate[CertificateUIds[i]].CourseId]].CourseName, certificates, pointer);\r\n                copyBytesNToBytes('\"}', certificates, pointer);\r\n            }\r\n        }\r\n        copyBytesNToBytes(']}', certificates, pointer);\r\n        return(string(certificates));\r\n    }\r\n    function GetCertificate(string memory CertificateId) public view notEmpty(CertificateId) returns(string memory) {\r\n        bytes10 _certificateId = bytes10(stringToBytes32(CertificateId));\r\n        require(Certificate[_certificateId].Enabled);\r\n        certificate memory _certificate = Certificate[_certificateId];\r\n        course memory _course = Course[CourseUIds[_certificate.CourseId]];\r\n        bytes memory _student = Student[StudentUIds[_certificate.StudentId]];\r\n        bytes memory certSpec;\r\n        bytes memory instructorsList = CourseInstructorDescription(CourseUIds[_certificate.CourseId]);\r\n        uint len = 500;\r\n        len += _course.CourseName.length + instructorsList.length;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        certSpec = new bytes(len);\r\n        require(_certificate.StudentId > 0);\r\n        require(_certificate.Enabled);\r\n        copyBytesNToBytes('{\"Certificate\":{\"Issuer\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(Institute, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Certificate Id\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certificateId, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Name\":\"', certSpec, pointer);\r\n        copyBytesToBytes(_student, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"National Id\":\"', certSpec, pointer);\r\n        copyBytesNToBytes( StudentUIds[_certificate.StudentId], certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Course Id\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(CourseUIds[_certificate.CourseId], certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Course Name\":\"', certSpec, pointer);\r\n        copyBytesToBytes(_course.CourseName, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Start Date\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_course.StartDate, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"End Date\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_course.EndDate, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Duration\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(uintToBytesN(_course.Hours), certSpec, pointer);\r\n        copyBytesNToBytes(' Hours\",', certSpec, pointer);\r\n        copyBytesToBytes(instructorsList, certSpec, pointer);\r\n        bytes10 _certType = CertificateTypeDescription(_certificate.CertificateType);\r\n        copyBytesNToBytes(',\"Course Type\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certType, certSpec, pointer);\r\n        copyBytesNToBytes('\",\"Result\":\"', certSpec, pointer);\r\n        copyBytesNToBytes(_certificate.Result, certSpec, pointer);\r\n        copyBytesNToBytes('\"}}', certSpec, pointer);\r\n        return(string(certSpec));\r\n    }\r\n    function CertificateTypeDescription(uint Type) pure internal returns(bytes10) {\r\n        if (Type == 1) \r\n            return('Attendance');\r\n        else if (Type == 2)\r\n            return('Online');\r\n        else if (Type == 3)\r\n            return('Video');\r\n        else if (Type == 4)\r\n            return('ELearning');\r\n        else\r\n            return(bytes10(uintToBytesN(Type)));\r\n    }\r\n    function GetAdminStats() public view onlyOwner returns(string memory) {\r\n        bytes memory stat;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        stat = new bytes(400);\r\n        copyBytesNToBytes('{\"Instructors\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(InstructorCount), stat, pointer);\r\n        copyBytesNToBytes(',\"Courses\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(CourseCount), stat, pointer);\r\n        copyBytesNToBytes(',\"Students\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(StudentCount), stat, pointer);\r\n        copyBytesNToBytes(',\"Certificates\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(CertificateCount), stat, pointer);\r\n        copyBytesNToBytes('}', stat, pointer);\r\n        return(string(stat));\r\n    }\r\n    function GetStats() public view returns(string memory) {\r\n        bytes memory stat;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        stat = new bytes(200);\r\n        copyBytesNToBytes('{\"Instructors\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(InstructorCount), stat, pointer);\r\n        copyBytesNToBytes(',\"Courses\":', stat, pointer);\r\n        copyBytesNToBytes(uintToBytesN(CourseCount), stat, pointer);\r\n        copyBytesNToBytes('}', stat, pointer);\r\n        return(string(stat));\r\n    }\r\n    function GetCourseStudents(string memory InstructorUId, string memory CourseUId) public view notEmpty(CourseUId) returns(string memory) {\r\n        bytes10 _instructorUId = bytes10(stringToBytes32(InstructorUId));\r\n        bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));\r\n        uint i;\r\n        uint _instructorId = 0;\r\n\r\n        for (i = 1;  i<= InstructorCount; i++)\r\n            if (InstructorUIds[i] == _instructorUId) {\r\n                _instructorId = i;\r\n                break;\r\n            }\r\n//        require(_instructorId != 0);\r\n        uint _courseId = 0;\r\n\r\n        for (i = 1;  i<= CourseCount; i++)\r\n            if (CourseUIds[i] == _courseUId) {\r\n                _courseId = i;\r\n                break;\r\n            }\r\n\r\n        require(_courseId != 0);\r\n        bool found = false;\r\n        for (i = 0; i < CourseInstructor.length; i++)\r\n            if (CourseInstructor[i].InstructorId == _instructorId && CourseInstructor[i].CourseId == _courseId) {\r\n                found = true;\r\n                break;\r\n            }\r\n        require(found || (msg.sender == owner));\r\n        course memory _course = Course[_courseUId];\r\n        bytes memory students;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        bytes memory studentsList = CourseStudentDescription(_courseId);\r\n        bytes memory instructorsList = CourseInstructorDescription(CourseUIds[_courseId]);\r\n        uint len = 150 + studentsList.length + instructorsList.length + Institute.length + _course.CourseName.length;\r\n        students = new bytes(len);\r\n        copyBytesNToBytes('{\"Course\":{\"Issuer\":\"', students, pointer);\r\n        copyBytesNToBytes(Institute, students, pointer);\r\n        copyBytesNToBytes('\",\"Course Id\":\"', students, pointer);\r\n        copyBytesNToBytes(_courseUId, students, pointer);\r\n        copyBytesNToBytes('\",\"Course Name\":\"', students, pointer);\r\n        copyBytesToBytes(_course.CourseName, students, pointer);\r\n        copyBytesNToBytes('\",', students, pointer);\r\n        copyBytesToBytes(instructorsList, students, pointer);\r\n        copyBytesNToBytes(',\"Start Date\":\"', students, pointer);\r\n        copyBytesNToBytes(_course.StartDate, students, pointer);\r\n        copyBytesNToBytes('\",\"End Date\":\"', students, pointer);\r\n        copyBytesNToBytes(_course.EndDate, students, pointer);\r\n        copyBytesNToBytes('\",\"Duration\":\"', students, pointer);\r\n        copyBytesNToBytes( uintToBytesN(_course.Hours), students, pointer);\r\n        copyBytesNToBytes(' Hours\",', students, pointer);\r\n        copyBytesToBytes(studentsList, students, pointer);\r\n        copyBytesNToBytes('}}', students, pointer);\r\n        return(string(students));\r\n    }\r\n    function CourseStudentDescription(uint CourseId) internal view returns(bytes memory) {\r\n        bytes memory students;\r\n        uint[1] memory pointer;\r\n        pointer[0] = 0;\r\n        uint i;\r\n        bytes10 _studentId;\r\n        uint len = 20;\r\n        for (i = 1; i <= CertificateCount; i++)\r\n            if (Certificate[CertificateUIds[i]].CourseId == CourseId) {\r\n                _studentId = StudentUIds[Certificate[CertificateUIds[i]].StudentId];\r\n                len += 60 + Student[_studentId].length;\r\n            }\r\n        students = new bytes(len);\r\n        copyBytesNToBytes('\"Students\":[', students, pointer);\r\n        bool first = true;\r\n        for (i = 1; i <= CertificateCount; i++) {\r\n            if (Certificate[CertificateUIds[i]].CourseId == CourseId) {\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    copyBytesNToBytes(',', students, pointer);\r\n                _studentId = StudentUIds[Certificate[CertificateUIds[i]].StudentId];\r\n                copyBytesNToBytes('{\"National Id\":\"', students, pointer);\r\n                copyBytesNToBytes(_studentId, students, pointer);\r\n                copyBytesNToBytes('\",\"Name\":\"', students, pointer);\r\n                copyBytesToBytes(Student[_studentId], students, pointer);\r\n                copyBytesNToBytes('\"}', students, pointer);\r\n            }\r\n        }\r\n        copyBytesNToBytes(']', students, pointer);\r\n        return(students);\r\n   }\r\n   function CourseInstructorDescription(bytes10 CourseUId) internal view returns(bytes memory) {\r\n        bytes memory instructors;\r\n        uint[1] memory pointer;\r\n        uint len=100;\r\n        uint i;\r\n        uint courseInstructorCount = 0;\r\n        for (i=0; i< CourseInstructor.length; i++)\r\n            if (CourseUIds[CourseInstructor[i].CourseId] == CourseUId)\r\n                courseInstructorCount++;\r\n        uint[] memory courseInstructors = new uint[](courseInstructorCount); \r\n        courseInstructorCount = 0;\r\n        for (i=0; i< CourseInstructor.length; i++)\r\n            if (CourseUIds[CourseInstructor[i].CourseId] == CourseUId) {\r\n                courseInstructors[courseInstructorCount] = CourseInstructor[i].InstructorId;\r\n                courseInstructorCount++;\r\n                len += Instructor[InstructorUIds[CourseInstructor[i].InstructorId]].length + 20;\r\n            }\r\n        instructors = new bytes(len);\r\n        if (courseInstructorCount == 1) {\r\n            copyBytesNToBytes('\"Instructor\":\"', instructors, pointer);\r\n            copyBytesToBytes(Instructor[InstructorUIds[courseInstructors[0]]], instructors, pointer);\r\n            copyBytesNToBytes('\"', instructors, pointer);\r\n        }\r\n        else {\r\n            copyBytesNToBytes('\"Instructors\":[', instructors, pointer);\r\n            for (i=0; i<courseInstructorCount; i++){\r\n                if (i > 0)\r\n                    copyBytesNToBytes(',', instructors, pointer);\r\n                copyBytesNToBytes('\"', instructors, pointer);\r\n                copyBytesToBytes(Instructor[InstructorUIds[courseInstructors[i]]], instructors, pointer);\r\n                copyBytesNToBytes('\"', instructors, pointer);\r\n            }\r\n            copyBytesNToBytes(']', instructors, pointer);\r\n        }\r\n        return(instructors);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetStats\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"InstructorUId\",\"type\":\"string\"},{\"name\":\"CourseUId\",\"type\":\"string\"}],\"name\":\"GetCourseStudents\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetInstitute\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"NationalId\",\"type\":\"string\"}],\"name\":\"GetStudentCertificates\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"GetCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"EnableCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"InstructorNationalId\",\"type\":\"string\"}],\"name\":\"GetInstructorCourses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateId\",\"type\":\"string\"}],\"name\":\"DisableCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NationalId\",\"type\":\"string\"},{\"name\":\"instructor\",\"type\":\"string\"}],\"name\":\"RegisterInstructor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CourseId\",\"type\":\"uint256\"},{\"name\":\"InstructorId\",\"type\":\"uint256\"}],\"name\":\"AddCourseInstructor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCertificates\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetInstructors\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InstructorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NationalId\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"}],\"name\":\"RegisterStudent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"CourseUId\",\"type\":\"string\"}],\"name\":\"GetCourseInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"InstructorNationalId\",\"type\":\"string\"}],\"name\":\"GetInstructor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCourses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CourseUId\",\"type\":\"string\"},{\"name\":\"CourseName\",\"type\":\"string\"},{\"name\":\"StartDate\",\"type\":\"string\"},{\"name\":\"EndDate\",\"type\":\"string\"},{\"name\":\"Hours\",\"type\":\"uint256\"},{\"name\":\"InstructorId\",\"type\":\"uint256\"}],\"name\":\"RegisterCourse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"NationalId\",\"type\":\"string\"}],\"name\":\"GetStudentInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAdminStats\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetStudents\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"CertificateUId\",\"type\":\"string\"},{\"name\":\"CourseId\",\"type\":\"uint256\"},{\"name\":\"StudentId\",\"type\":\"uint256\"},{\"name\":\"CertificateType\",\"type\":\"uint256\"},{\"name\":\"Result\",\"type\":\"string\"}],\"name\":\"RegisterCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Institute\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoClassCertificate","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b43727970746f436c617373000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7165eb599e01f828af9ebeb6ce56fb82a597a70e851a8787d71126f899ea82a4"}]}