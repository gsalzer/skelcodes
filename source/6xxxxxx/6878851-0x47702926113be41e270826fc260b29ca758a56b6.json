{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n  Реализация смарт контракта по типу 6 друзей\r\n*/\r\n\r\ncontract SixFriends {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address public ownerAddress; //Адресс владельца\r\n    uint private percentMarketing = 8; //Проценты на маркетинг\r\n    uint private percentAdministrator = 2; //Проценты администрации\r\n\r\n    uint public c_total_hexagons; //Количество гексагонов всего\r\n    mapping(address =>  uint256) public Bills; //Баланс для вывода\r\n\r\n    uint256 public BillsTotal; //суммарная проведенная сумма\r\n\r\n    struct Node {\r\n        uint256 usd;\r\n        bool cfw;\r\n        uint256 min; //Стоимость входа\r\n        uint c_hexagons; //Количество гексагонов\r\n        mapping(address => bytes32[]) Addresses; //Адресс => уникальные ссылки\r\n        mapping(address => uint256[6]) Statistics; //Адресс => статистика по рефералам\r\n        mapping(bytes32 => address[6]) Hexagons; //Уникальная ссылка (keccak256) => 6 кошельков\r\n    }\r\n\r\n    mapping (uint256 => Node) public Nodes; //все типы\r\n\r\n    //Проверяет что сумма перевода достаточна\r\n    modifier enoughMoney(uint256 tp) {\r\n        require (msg.value >= Nodes[0].min, \"Insufficient funds\");\r\n        _;\r\n    }\r\n\r\n    //Проверяет что тот кто перевел владелец кошелька\r\n    modifier onlyOwner {\r\n        require (msg.sender == ownerAddress, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    //Ранее создан\r\n    modifier allReadyCreate(uint256 tp) {\r\n        require (Nodes[tp].cfw == false);\r\n        _;\r\n    }\r\n\r\n    //Проверяю что человек запросивший являетя владельцем баланса\r\n    modifier recipientOwner(address recipient) {\r\n        require (Bills[recipient] > 0);\r\n        require (msg.sender == recipient);\r\n        _;\r\n    }\r\n\r\n    //Функция для оплаты\r\n    function pay(bytes32 ref, uint256 tp) public payable enoughMoney(tp) {\r\n\r\n        if (Nodes[tp].Hexagons[ref][0] == 0) ref = Nodes[tp].Addresses[ownerAddress][0]; //Если ref не найдена то берется первое значение\r\n\r\n        createHexagons(ref, tp); //Передаю текущую ref, добавляю новые 6 друзей\r\n\r\n        uint256 marketing_pay = ((msg.value / 100) * (percentMarketing + percentAdministrator));\r\n        uint256 friend_pay = msg.value - marketing_pay;\r\n\r\n        //Перевожу деньги на счета клиентов\r\n        for(uint256 i = 0; i < 6; i++)\r\n            Bills[Nodes[tp].Hexagons[ref][i]] += friend_pay.div(6);\r\n\r\n        //Перевожу коммисию на маркетинг\r\n        Bills[ownerAddress] += marketing_pay;\r\n\r\n        //Суммирую всего выплат\r\n        BillsTotal += msg.value;\r\n    }\r\n\r\n    function getHexagons(bytes32 ref, uint256 tp) public view returns (address, address, address, address, address, address)\r\n    {\r\n        return (Nodes[tp].Hexagons[ref][0], Nodes[tp].Hexagons[ref][1], Nodes[tp].Hexagons[ref][2], Nodes[tp].Hexagons[ref][3], Nodes[tp].Hexagons[ref][4], Nodes[tp].Hexagons[ref][0]);\r\n    }\r\n\r\n    //Запросить деньги и обнулить счет\r\n    function getMoney(address recipient) public recipientOwner(recipient) {\r\n        recipient.transfer(Bills[recipient]);\r\n        Bills[recipient] = 0;\r\n    }\r\n\r\n    //Передаю переданную рефку и добавляю новый гексагон\r\n    function createHexagons(bytes32 ref, uint256 tp) internal {\r\n\r\n        Nodes[tp].c_hexagons++; //Увеличиваю счетчик гексагонов и транзакций\r\n        c_total_hexagons++; //Увеличиваю счетчик гексагонов и транзакций\r\n\r\n        bytes32 new_ref = createRef(Nodes[tp].c_hexagons);\r\n\r\n        //Прохожу по переданной рефке и создаю кошельки\r\n        for(uint8 i = 0; i < 5; i++)\r\n        {\r\n            Nodes[tp].Hexagons[new_ref][i] = Nodes[tp].Hexagons[ref][i + 1]; //Добавляю новый гексагон\r\n            Nodes[tp].Statistics[Nodes[tp].Hexagons[ref][i]][5 - i]++; //Добавляю статистку\r\n        }\r\n\r\n        Nodes[tp].Statistics[Nodes[tp].Hexagons[ref][i]][0]++; //Добавляю статистку\r\n\r\n        Nodes[tp].Hexagons[new_ref][5] = msg.sender;\r\n        Nodes[tp].Addresses[msg.sender].push(new_ref); //Добавляю рефку\r\n    }\r\n\r\n    //Создаю новый гексагон с указанием его стоимости и порядкового номера\r\n    function createFirstWallets(uint256 usd, uint256 tp) public onlyOwner allReadyCreate(tp) {\r\n\r\n        bytes32 new_ref = createRef(1);\r\n\r\n        Nodes[tp].Hexagons[new_ref] = [ownerAddress, ownerAddress, ownerAddress, ownerAddress, ownerAddress, ownerAddress];\r\n        Nodes[tp].Addresses[ownerAddress].push(new_ref);\r\n\r\n        Nodes[tp].c_hexagons = 1; //Количество гексагонов\r\n        Nodes[tp].usd = usd; //Сколько стоит членский взнос в эту ноду в долларах\r\n        Nodes[tp].cfw = true; //Нода помечается как созданная\r\n\r\n        c_total_hexagons++;\r\n    }\r\n\r\n    //Создаю реферальную ссылку на основе номера блока и типа контракта\r\n    function createRef(uint hx) internal pure returns (bytes32) {\r\n        uint256 _unixTimestamp;\r\n        uint256 _timeExpired;\r\n        return keccak256(abi.encodePacked(hx, _unixTimestamp, _timeExpired));\r\n    }\r\n\r\n    //Получаю количество ссылок для адреса\r\n    function countAddressRef(address adr, uint256 tp) public view returns (uint count) {\r\n        count = Nodes[tp].Addresses[adr].length;\r\n    }\r\n\r\n    //Получаю ссылку\r\n    function getAddress(address adr, uint256 i, uint256 tp) public view returns(bytes32) {\r\n        return Nodes[tp].Addresses[adr][i];\r\n    }\r\n\r\n    //Возвращение статистики\r\n    function getStatistics(address adr, uint256 tp) public view returns(uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (Nodes[tp].Statistics[adr][0], Nodes[tp].Statistics[adr][1], Nodes[tp].Statistics[adr][2], Nodes[tp].Statistics[adr][3], Nodes[tp].Statistics[adr][4], Nodes[tp].Statistics[adr][5]);\r\n    }\r\n\r\n    //Устанавливаю стоимость входа\r\n    function setMin(uint value, uint256 tp) public onlyOwner {\r\n        Nodes[tp].min = value;\r\n    }\r\n\r\n    //Получение минимальной стоимости\r\n    function getMin(uint256 tp) public view returns (uint256) {\r\n        return Nodes[tp].min;\r\n    }\r\n\r\n    //Получаю тотал денег\r\n    function getBillsTotal() public view returns (uint256) {\r\n        return BillsTotal;\r\n    }\r\n\r\n    constructor() public {\r\n        ownerAddress = msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_total_hexagons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Bills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"getMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usd\",\"type\":\"uint256\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"createFirstWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BillsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"getStatistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Nodes\",\"outputs\":[{\"name\":\"usd\",\"type\":\"uint256\"},{\"name\":\"cfw\",\"type\":\"bool\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"c_hexagons\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBillsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"bytes32\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"countAddressRef\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ref\",\"type\":\"bytes32\"},{\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"getHexagons\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SixFriends","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4afd7b298c2dbea57d5604cb064ea36ae4edc4a8c5842e356ba29fa3b9e9611b"}]}