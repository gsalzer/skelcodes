{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor() public {\r\n        totalSupply = 12000000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = \"DCETHER\";                                   // Set the name for display purposes\r\n        symbol = \"DCETH\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract  DCETHER is owned, TokenERC20 {\r\n    \r\n    uint public sale_step;\r\n    \r\n    address dcether_corp;\r\n    address public Coin_manager;\r\n\r\n    mapping (address => address) public followup;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() TokenERC20()  public \r\n    {\r\n        sale_step = 0;  // 0 : No sale, 1 : Presale, 2 : Crowdsale, 3 : Normalsale \r\n        dcether_corp = msg.sender;\r\n        Coin_manager = 0x0;\r\n    }\r\n    \r\n    function SetCoinManager(address manager) onlyOwner public\r\n    {\r\n        require(manager != 0x0);\r\n        \r\n        uint amount = balanceOf[dcether_corp];\r\n        \r\n        Coin_manager = manager;\r\n        balanceOf[Coin_manager] += amount;\r\n        balanceOf[dcether_corp] = 0;\r\n        Transfer(dcether_corp, Coin_manager, amount);               // execute an event reflecting the change\r\n    }\r\n    \r\n    function SetSaleStep(uint256 step) onlyOwner public\r\n    {\r\n        sale_step = step;\r\n    }\r\n\r\n    function () payable public\r\n    {\r\n        require(sale_step!=0);\r\n\r\n        uint nowprice = 10000;   // Token Price per ETher\r\n        address follower_1st = 0x0; // 1st follower\r\n        address follower_2nd = 0x0; // 2nd follower\r\n        \r\n        uint amount = 0;    // Total token buyed\r\n        uint amount_1st = 0;    // Bonus token for 1st follower\r\n        uint amount_2nd = 0;    // Bonus token for 2nd follower\r\n        uint all_amount = 0;\r\n\r\n        amount = msg.value * nowprice;  \r\n        \r\n        follower_1st = followup[msg.sender];\r\n        \r\n        if ( follower_1st != 0x0 )\r\n        {\r\n            amount_1st = amount;    // 100% bonus give to 1st follower\r\n            if ( balanceOf[follower_1st] < amount_1st ) // if he has smaller than bonus\r\n                amount_1st = balanceOf[follower_1st];   // cannot get bonus all\r\n                \r\n            follower_2nd = followup[follower_1st];\r\n            \r\n            if ( follower_2nd != 0x0 )\r\n            {\r\n                amount_2nd = amount / 2;    // 50% bonus give to 2nd follower\r\n                \r\n                if ( balanceOf[follower_2nd] < amount_2nd ) // if he has smaller than bonus\r\n                amount_2nd = balanceOf[follower_2nd];   // cannot get bonus all\r\n            }\r\n        }\r\n        \r\n        all_amount = amount + amount_1st + amount_2nd;\r\n            \r\n        address manager = Coin_manager;\r\n        \r\n        if ( manager == 0x0 )\r\n            manager = dcether_corp;\r\n        \r\n        require(balanceOf[manager]>=all_amount);\r\n        \r\n        require(balanceOf[msg.sender] + amount > balanceOf[msg.sender]);\r\n        balanceOf[manager] -= amount;\r\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n        require(manager.send(msg.value));\r\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n\r\n        if ( amount_1st > 0 )   // first follower give bonus\r\n        {\r\n            require(balanceOf[follower_1st] + amount_1st > balanceOf[follower_1st]);\r\n            \r\n            balanceOf[manager] -= amount_1st;\r\n            balanceOf[follower_1st] += amount_1st;                  // adds the amount to buyer's balance\r\n            \r\n            Transfer(this, follower_1st, amount_1st);               // execute an event reflecting the change\r\n        }\r\n\r\n        if ( amount_2nd > 0 )   // second follower give bonus\r\n        {\r\n            require(balanceOf[follower_2nd] + amount_2nd > balanceOf[follower_2nd]);\r\n            \r\n            balanceOf[manager] -= amount_2nd;\r\n            balanceOf[follower_2nd] += amount_2nd;                  // adds the amount to buyer's balance\r\n            \r\n            Transfer(this, follower_2nd, amount_2nd);               // execute an event reflecting the change\r\n        }\r\n    }\r\n\r\n    function BuyFromFollower(address follow_who) payable public\r\n    {\r\n        require(sale_step!=0);\r\n\r\n        uint nowprice = 10000;   // Token Price per ETher\r\n        address follower_1st = 0x0; // 1st follower\r\n        address follower_2nd = 0x0; // 2nd follower\r\n        \r\n        uint amount = 0;    // Total token buyed\r\n        uint amount_1st = 0;    // Bonus token for 1st follower\r\n        uint amount_2nd = 0;    // Bonus token for 2nd follower\r\n        uint all_amount = 0;\r\n\r\n        amount = msg.value * nowprice;  \r\n        \r\n        follower_1st = follow_who;\r\n        followup[msg.sender] = follower_1st;\r\n        \r\n        if ( follower_1st != 0x0 )\r\n        {\r\n            amount_1st = amount;    // 100% bonus give to 1st follower\r\n            if ( balanceOf[follower_1st] < amount_1st ) // if he has smaller than bonus\r\n                amount_1st = balanceOf[follower_1st];   // cannot get bonus all\r\n                \r\n            follower_2nd = followup[follower_1st];\r\n            \r\n            if ( follower_2nd != 0x0 )\r\n            {\r\n                amount_2nd = amount / 2;    // 50% bonus give to 2nd follower\r\n                \r\n                if ( balanceOf[follower_2nd] < amount_2nd ) // if he has smaller than bonus\r\n                amount_2nd = balanceOf[follower_2nd];   // cannot get bonus all\r\n            }\r\n        }\r\n        \r\n        all_amount = amount + amount_1st + amount_2nd;\r\n            \r\n        address manager = Coin_manager;\r\n        \r\n        if ( manager == 0x0 )\r\n            manager = dcether_corp;\r\n        \r\n        require(balanceOf[manager]>=all_amount);\r\n        \r\n        require(balanceOf[msg.sender] + amount > balanceOf[msg.sender]);\r\n        balanceOf[manager] -= amount;\r\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n        require(manager.send(msg.value));\r\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n\r\n        if ( amount_1st > 0 )   // first follower give bonus\r\n        {\r\n            require(balanceOf[follower_1st] + amount_1st > balanceOf[follower_1st]);\r\n            \r\n            balanceOf[manager] -= amount_1st;\r\n            balanceOf[follower_1st] += amount_1st;                  // adds the amount to buyer's balance\r\n            \r\n            Transfer(this, follower_1st, amount_1st);               // execute an event reflecting the change\r\n        }\r\n\r\n        if ( amount_2nd > 0 )   // second follower give bonus\r\n        {\r\n            require(balanceOf[follower_2nd] + amount_2nd > balanceOf[follower_2nd]);\r\n            \r\n            balanceOf[manager] -= amount_2nd;\r\n            balanceOf[follower_2nd] += amount_2nd;                  // adds the amount to buyer's balance\r\n            \r\n            Transfer(this, follower_2nd, amount_2nd);               // execute an event reflecting the change\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Owner can move ChalletValue from backers to another forcely\r\n     *\r\n     * @param _from The address of backers who send ChalletValue\r\n     * @param _to The address of backers who receive ChalletValue\r\n     * @param amount How many ChalletValue will buy back from him\r\n     */\r\n    function ForceCoinTransfer(address _from, address _to, uint amount) onlyOwner public\r\n    {\r\n        uint coin_amount = amount * 10 ** uint256(decimals);\r\n\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= coin_amount);         // checks if the sender has enough to sell\r\n\r\n        balanceOf[_from] -= coin_amount;                  // subtracts the amount from seller's balance\r\n        balanceOf[_to] += coin_amount;                  // subtracts the amount from seller's balance\r\n        Transfer(_from, _to, coin_amount);               // executes an event reflecting on the change\r\n    }\r\n\r\n    /**\r\n     * Owner will buy back ChalletValue from backers\r\n     *\r\n     * @param _from The address of backers who have ChalletValue\r\n     * @param coin_amount How many ChalletValue will buy back from him\r\n     */\r\n    function DestroyCoin(address _from, uint256 coin_amount) onlyOwner public \r\n    {\r\n        uint256 amount = coin_amount * 10 ** uint256(decimals);\r\n\r\n        require(balanceOf[_from] >= amount);         // checks if the sender has enough to sell\r\n        balanceOf[_from] -= amount;                  // subtracts the amount from seller's balance\r\n        Transfer(_from, this, amount);               // executes an event reflecting on the change\r\n    }    \r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"SetSaleStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetCoinManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"followup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"follow_who\",\"type\":\"address\"}],\"name\":\"BuyFromFollower\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Coin_manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForceCoinTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"DestroyCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DCETHER","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c60820f549d6103f11f3c50cce432716f9b8259e1ffc34fa46f5d2a3db32b45f"}]}