{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-12\r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract SlotMachine is Ownable {\r\n    event LogDeposit(address indexed depositor, uint256 value);\r\n    \r\n    function withdraw(uint amount) external onlyOwner {\r\n        require(amount != 0, \"Withdraw amount can't be zero\");\r\n        require(address(this).balance >= amount, \"Withdraw amount can't be more than contract balance.\");\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Fallback function\r\n    function () external payable {\r\n        emit LogDeposit(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ncontract SlotMachineSpinner is SlotMachine {\r\n    using SafeMath for uint256;\r\n\r\n    address private webAddress = 0x72cc1C4dE56D1cB8c1c35161798Ca289EA150741;\r\n    uint public minimumWager = 0.001 ether;\r\n    uint public maximumWager = 0.1 ether;\r\n    uint8 public maximumMultiplier = 60;\r\n\r\n    uint[6] private firstSlotProbabilities = [uint(385), 1538, 4231, 6154, 8077, 10000];\r\n    uint[6] private secondSlotProbabilities = [uint(400), 800, 2800, 5200, 7600, 10000];\r\n    uint[6] private thirdSlotProbabilities = [uint(400), 800, 2800, 5200, 7600, 10000];\r\n\r\n    event LogSpinResult(\r\n        address indexed spinner, \r\n        uint256 wager, \r\n        bool isWin, \r\n        string firstSymbol, \r\n        string secondSymbol, \r\n        string thirdSymbol, \r\n        uint8 multiplier, \r\n        uint256 rewardAmount\r\n    );\r\n\r\n    modifier mustSignWithECDSA(bytes32 hash, uint8 _v, bytes32 _r, bytes32 _s) {\r\n        require(ecrecover(hash, _v, _r, _s) == webAddress, \"public key & private key mismatch\");\r\n        _;\r\n    }\r\n\r\n    // External function\r\n    function spin(bytes32 hash, uint8 _v, bytes32 _r, bytes32 _s)\r\n        external\r\n        payable\r\n        mustSignWithECDSA(hash, _v, _r, _s)\r\n    {\r\n        // Conditions\r\n        require(msg.value >= minimumWager, \"wager must be greater than or equal minimumWager.\");\r\n        require(msg.value <= maximumWager, \"wager must be lower than or equal maximumWager.\");\r\n        require(\r\n            address(this).balance >= msg.value * maximumMultiplier, \r\n            \"contract balance must greater than wager * maximumMultiplier.\"\r\n        );\r\n        require(msg.sender == tx.origin, 'only EOA can call this contract');\r\n\r\n        \r\n        //Interaction\r\n        string memory firstSymbol;\r\n        string memory secondSymbol;\r\n        string memory thirdSymbol;\r\n        uint rewardAmount = 0;\r\n        uint8 multiplier = 0;\r\n        uint8 cherryCount = 0;\r\n        bool isWin = false;\r\n\r\n        (firstSymbol, secondSymbol, thirdSymbol) = _findThreeSymbols(_s);\r\n        \r\n        if (_isWin(firstSymbol, secondSymbol, thirdSymbol)) {\r\n            // Normal win\r\n            isWin = true;\r\n            (rewardAmount, multiplier) = _calculateRewardAmount(msg.value, firstSymbol);\r\n            _sendReward(rewardAmount);\r\n        } else {\r\n            cherryCount = _countCherry(firstSymbol, secondSymbol, thirdSymbol);\r\n            if (cherryCount > 0) {\r\n                // Cherry win\r\n                isWin = true;\r\n                (rewardAmount, multiplier) = _calculateRewardAmountForCherry(msg.value, cherryCount);\r\n                _sendCherryReward(rewardAmount);\r\n            }\r\n        }\r\n\r\n        emit LogSpinResult(msg.sender, msg.value, isWin, firstSymbol, secondSymbol, thirdSymbol, multiplier, rewardAmount);\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Private function\r\n    function _calculateRewardAmount(uint256 wager, string symbol) private pure returns (uint256, uint8) {\r\n        uint8 multiplier = _findMultiplier(symbol);\r\n        uint256 rewardAmount = wager.mul(multiplier);\r\n\r\n        return (rewardAmount, multiplier);\r\n    }\r\n\r\n    function _calculateRewardAmountForCherry(uint256 wager, uint8 cherryCount) private pure returns (uint256, uint8) {\r\n        uint8 multiplier = _findCherryMultiplier(cherryCount);\r\n        uint256 rewardAmount = wager.mul(multiplier);\r\n\r\n        return (rewardAmount, multiplier);\r\n    }\r\n\r\n    function _sendReward(uint256 rewardAmount) private {\r\n        require(address(this).balance >= rewardAmount, \"Contract not have enough balance to payout. [Normal]\");\r\n\r\n        msg.sender.transfer(rewardAmount);\r\n    }\r\n\r\n    function _sendCherryReward(uint256 rewardAmount) private {\r\n        require(address(this).balance >= rewardAmount, \"Contract not have enough balance to payout. [Cherry]\");\r\n\r\n        msg.sender.transfer(rewardAmount);\r\n    }\r\n\r\n    function _generateRandomNumber(bytes32 signature) private pure returns (uint, uint, uint) {\r\n        uint modulus = 10001;\r\n        uint firstRandomNumber = uint(signature) % modulus;\r\n        uint secondRandomNumber = (uint(signature) / 10000) % modulus;\r\n        uint thirdRandomNumber = (uint(signature) / 1000000) % modulus;\r\n\r\n        return (firstRandomNumber, secondRandomNumber, thirdRandomNumber);\r\n    }\r\n\r\n    function _findSymbolInSlot(uint randomNumber, uint[6] probabilities) private pure returns (string) {\r\n        if (randomNumber <= probabilities[0]) {\r\n            return \"bar\";\r\n        }\r\n\r\n        if (randomNumber <= probabilities[1]) {\r\n            return \"seven\";\r\n        }\r\n\r\n        if (randomNumber <= probabilities[2]) {\r\n            return \"cherry\";\r\n        }\r\n\r\n        if (randomNumber <= probabilities[3]) {\r\n            return \"orange\";\r\n        }\r\n\r\n        if (randomNumber <= probabilities[4]) {\r\n            return \"grape\";\r\n        }\r\n\r\n        if (randomNumber <= probabilities[5]) {\r\n            return \"bell\";\r\n        }\r\n    }\r\n    \r\n    function _findThreeSymbols(bytes32 _s) private view returns (string, string, string) {\r\n        uint firstRandomNumber;\r\n        uint secondRandomNumber;\r\n        uint thirdRandomNumber;\r\n        \r\n        bytes32 entropy = _combineEntropy(_s);\r\n        \r\n        (firstRandomNumber, secondRandomNumber, thirdRandomNumber) = _generateRandomNumber(entropy);\r\n\r\n        string memory firstSymbol = _findSymbolInSlot(firstRandomNumber, firstSlotProbabilities);\r\n        string memory secondSymbol = _findSymbolInSlot(secondRandomNumber, secondSlotProbabilities);\r\n        string memory thirdSymbol = _findSymbolInSlot(thirdRandomNumber, thirdSlotProbabilities);\r\n\r\n        return (firstSymbol, secondSymbol, thirdSymbol);\r\n    }\r\n\r\n\r\n    function _combineEntropy(bytes32 _s) private view returns (bytes32) {\r\n        bytes32 entropy = keccak256(\r\n            abi.encodePacked(\r\n                _s,\r\n                block.timestamp, \r\n                block.number, \r\n                blockhash(block.number - 1), \r\n                block.difficulty, \r\n                block.gaslimit, \r\n                gasleft(),\r\n                tx.gasprice,\r\n                msg.sender\r\n            )\r\n        );\r\n        return entropy;\r\n    }\r\n\r\n    function _findMultiplier(string symbol) private pure returns (uint8) {\r\n        if (_compareString(symbol, \"bar\")) {\r\n            return 60;\r\n        }\r\n\r\n        if (_compareString(symbol, \"seven\")) {\r\n            return 40;\r\n        }\r\n\r\n        if (_compareString(symbol, \"cherry\")) {\r\n            return 20;\r\n        }\r\n\r\n        if (_compareString(symbol, \"orange\")) {\r\n            return 5;\r\n        }\r\n\r\n        if (_compareString(symbol, \"grape\")) {\r\n            return 5;\r\n        }\r\n\r\n        if (_compareString(symbol, \"bell\")) {\r\n            return 5;\r\n        }\r\n    }\r\n\r\n    function _findCherryMultiplier(uint8 cherryCount) private pure returns (uint8) {\r\n        if (cherryCount == 1) {\r\n            return 1;    \r\n        }\r\n\r\n        if (cherryCount == 2) {\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    function _compareString(string first, string second) private pure returns (bool) {\r\n        return keccak256(abi.encodePacked(first)) == keccak256(abi.encodePacked(second));\r\n    }\r\n\r\n    function _isCherry(string symbol) private pure returns (bool) {\r\n        return _compareString(symbol, \"cherry\");\r\n    }\r\n\r\n    function _isWin(string firstSymbol, string secondSymbol, string thirdSymbol) private pure returns (bool) {\r\n        return (_compareString(firstSymbol, secondSymbol) && _compareString(firstSymbol, thirdSymbol));\r\n    }\r\n\r\n    function _countCherry(string firstSymbol, string secondSymbol, string thirdSymbol) private pure returns (uint8) {\r\n        uint8 cherryCount = 0;\r\n        \r\n        if (_isCherry(firstSymbol)) {\r\n            cherryCount++;\r\n        }\r\n\r\n        if (_isCherry(secondSymbol)) {\r\n            cherryCount++;\r\n        }\r\n\r\n        if (_isCherry(thirdSymbol)) {\r\n            cherryCount++;\r\n        }\r\n        \r\n        return cherryCount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximumMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"spin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumWager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumWager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spinner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWin\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"firstSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"secondSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"thirdSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"multiplier\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"LogSpinResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SlotMachineSpinner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e55f3fd67cd7e1ab1f41aa6dae7d55e7cedf5553a621720f2ca6b61ab828617a"}]}