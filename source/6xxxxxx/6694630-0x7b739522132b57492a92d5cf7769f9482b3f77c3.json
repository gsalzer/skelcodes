{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n// File: contracts\\DecentralizedExchanges2.sol\r\n\r\ncontract SpecialERC20 {\r\n    function transfer(address to, uint256 value) public;\r\n}\r\n\r\ncontract DecentralizedExchanges is Pausable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for ERC20;\r\n\r\n    string public name = \"DecentralizedExchanges\";\r\n\r\n    event Order(bytes32 hash);\r\n    event Trade(bytes32 hash, address seller, address token, uint amount, address purchaser, uint eth);\r\n    event Cancel(bytes32 hash, uint amount, bool isSell);\r\n\r\n    struct OrderInfo {\r\n        bool isSell;\r\n        bool isSpecialERC20;\r\n        uint eth;\r\n        uint amount;\r\n        uint expires;\r\n        uint nonce;\r\n        uint createdAt;\r\n        uint fill;\r\n        address token;\r\n        address[] limitUser;\r\n        address owner;\r\n    }\r\n\r\n    mapping (bytes32 => OrderInfo) public orderInfos;\r\n    mapping (address => bytes32[]) public userOrders;\r\n    mapping (address => bool) public tokenWhiteList;\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    function enableToken(address[] addr, bool[] enable) public onlyOwner() {\r\n        require(addr.length == enable.length);\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            tokenWhiteList[addr[i]] = enable[i];\r\n        }\r\n    }\r\n\r\n    function tokenIsEnable(address addr) public view returns (bool) {\r\n        return tokenWhiteList[addr];\r\n    }\r\n\r\n    function getOrderInfo(bytes32 hash) public view returns (bool, uint, address, uint, uint, uint, address[], uint, address, uint, bool) {\r\n        OrderInfo storage info = orderInfos[hash];\r\n        return (info.isSell, info.eth, info.token, info.amount, info.expires, info.nonce, info.limitUser, info.createdAt, info.owner, info.fill, info.isSpecialERC20);\r\n    }\r\n\r\n\r\n    // 创建买单,用eth买token\r\n    function createPurchaseOrder(bool isSpecialERC20, uint eth, address token, uint amount, uint expires, address[] seller, uint nonce) payable public isHuman() whenNotPaused(){\r\n        require(msg.value >= eth);\r\n        require(tokenWhiteList[token]);\r\n\r\n        bytes32 hash = sha256(abi.encodePacked(this, eth, token, amount, expires, seller, nonce, msg.sender, now));\r\n        orderInfos[hash] = OrderInfo(false, isSpecialERC20, eth, amount, expires, nonce, now, 0, token, seller, msg.sender);\r\n        for (uint i = 0; i < userOrders[msg.sender].length; i++) {\r\n            require(userOrders[msg.sender][i] != hash);\r\n        }\r\n        userOrders[msg.sender].push(hash);\r\n        emit Order(hash);\r\n    }\r\n\r\n    // 创建卖单,卖token得eth\r\n    function createSellOrder(bool isSpecialERC20, address token, uint amount, uint eth, uint expires, address[] purchaser, uint nonce) public isHuman() whenNotPaused() {\r\n        require(tokenWhiteList[token]);\r\n\r\n        ERC20(token).safeTransferFrom(msg.sender, this, amount);\r\n        bytes32 hash = sha256(abi.encodePacked(this, eth, token, amount, expires, purchaser, nonce, msg.sender, now));\r\n        orderInfos[hash] = OrderInfo(true, isSpecialERC20, eth, amount, expires, nonce, now, 0, token, purchaser, msg.sender);\r\n        for (uint i = 0; i < userOrders[msg.sender].length; i++) {\r\n            require(userOrders[msg.sender][i] != hash);\r\n        }\r\n        userOrders[msg.sender].push(hash);\r\n        emit Order(hash);\r\n    }\r\n\r\n    function cancelOrder(bytes32 hash) public isHuman() {\r\n        OrderInfo storage info = orderInfos[hash];\r\n        require(info.owner == msg.sender);\r\n        if (info.isSell) {\r\n            if (info.fill < info.amount) {\r\n                uint amount = info.amount;\r\n                uint remain = amount.sub(info.fill);\r\n                info.fill = info.amount;\r\n                if (info.isSpecialERC20) {\r\n                    SpecialERC20(info.token).transfer(msg.sender, remain);\r\n                } else {\r\n                    ERC20(info.token).transfer(msg.sender, remain);\r\n                }\r\n                emit Cancel(hash, remain, info.isSell);\r\n            } else {\r\n                emit Cancel(hash, 0, info.isSell);\r\n            }\r\n        } else {\r\n            if (info.fill < info.eth) {\r\n                uint eth = info.eth;\r\n                remain = eth.sub(info.fill);\r\n                info.fill = info.eth;\r\n                msg.sender.transfer(eth);\r\n                emit Cancel(hash, remain, info.isSell);\r\n            } else {\r\n                emit Cancel(hash, 0, info.isSell);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 卖token,针对创建的买单\r\n    function sell(bytes32 hash, uint amount) public isHuman() whenNotPaused(){\r\n        OrderInfo storage info = orderInfos[hash];\r\n        bool find = false;\r\n        if (info.limitUser.length > 0) {\r\n            for (uint i = 0; i < info.limitUser.length; i++) {\r\n                if (info.limitUser[i] == msg.sender) {\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(find);\r\n        }\r\n\r\n        // 确保订单还有剩余eth\r\n        require(info.fill < info.eth);\r\n        require(info.expires >= now);\r\n        require(info.isSell == false); // 只能针对挂的买单操作\r\n\r\n        uint remain = info.eth.sub(info.fill);\r\n\r\n        uint remainAmount = remain.mul(info.amount).div(info.eth);\r\n        \r\n        uint tradeAmount = remainAmount < amount ? remainAmount : amount;\r\n        // token从卖家转到合约\r\n        ERC20(info.token).safeTransferFrom(msg.sender, this, tradeAmount);\r\n\r\n        uint total = info.eth.mul(tradeAmount).div(info.amount);\r\n        require(total > 0);\r\n\r\n        info.fill = info.fill.add(total);\r\n        \r\n        msg.sender.transfer(total);\r\n        \r\n        // token从合约转到买家\r\n        if (info.isSpecialERC20) {\r\n            SpecialERC20(info.token).transfer(info.owner, tradeAmount);\r\n        } else {\r\n            ERC20(info.token).transfer(info.owner, tradeAmount);\r\n        }\r\n\r\n\r\n        emit Trade(hash, msg.sender, info.token, tradeAmount, info.owner, total);\r\n    }\r\n\r\n    // 买token,针对创建的卖单\r\n    function purchase(bytes32 hash, uint amount) payable public isHuman() whenNotPaused() {\r\n        OrderInfo storage info = orderInfos[hash];\r\n        bool find = false;\r\n        if (info.limitUser.length > 0) {\r\n            for (uint i = 0; i < info.limitUser.length; i++) {\r\n                if (info.limitUser[i] == msg.sender) {\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(find);\r\n        }\r\n\r\n        // 确保订单还有剩余token\r\n        require(info.fill < info.amount);\r\n        require(info.expires >= now);\r\n        require(info.isSell); // 只能针对挂卖单操作\r\n\r\n        uint remainAmount = info.amount.sub(info.fill);\r\n\r\n        uint tradeAmount = remainAmount < amount ? remainAmount : amount;\r\n\r\n        uint total = info.eth.mul(tradeAmount).div(info.amount);\r\n        require(total > 0);\r\n\r\n        require(msg.value >= total);\r\n        if (msg.value > total) { // 多余的eth转回去\r\n            msg.sender.transfer(msg.value.sub(total));\r\n        }\r\n\r\n        info.fill = info.fill.add(tradeAmount);\r\n\r\n        info.owner.transfer(total);\r\n\r\n        if (info.isSpecialERC20) {\r\n            SpecialERC20(info.token).transfer(msg.sender, tradeAmount);\r\n        } else {\r\n            ERC20(info.token).transfer(msg.sender, tradeAmount);\r\n        }\r\n\r\n        emit Trade(hash, info.owner, info.token, tradeAmount, msg.sender, total);\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderInfos\",\"outputs\":[{\"name\":\"isSell\",\"type\":\"bool\"},{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"fill\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"purchaser\",\"type\":\"address[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address[]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createPurchaseOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"enable\",\"type\":\"bool[]\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"tokenIsEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isSell\",\"type\":\"bool\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DecentralizedExchanges","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea2331a02b11572a78a9cd69e06a096e468b2c87676bb5bd9169fe105ac2875a"}]}