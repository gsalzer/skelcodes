{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n \r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary FrozenChecker {\r\n  using SafeMath for uint256;\r\n  \r\n  /**\r\n   * Rule for each address\r\n   */\r\n  struct Rule {\r\n    uint256 timeT;\r\n    uint8 initPercent;\r\n    uint256[] periods;\r\n    uint8[] percents;\r\n  }\r\n  \r\n  function check(Rule storage self, uint256 totalFrozenValue) internal view returns(uint256) {\r\n    if (totalFrozenValue == uint256(0)) {\r\n      return 0;\r\n    }\r\n    if (self.timeT == uint256(0) || self.timeT > now) {\r\n      return totalFrozenValue.sub(totalFrozenValue.mul(self.initPercent).div(100));\r\n    }\r\n    for (uint256 i = 0; i < self.periods.length.sub(1); i = i.add(1)) {\r\n      if (now >= self.timeT.add(self.periods[i]) && now < self.timeT.add(self.periods[i.add(1)])) {\r\n        return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[i]).div(100));\r\n      }\r\n    }\r\n    if (now >= self.timeT.add(self.periods[self.periods.length.sub(1)])) {\r\n      return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[self.periods.length.sub(1)]).div(100));\r\n    }\r\n  }\r\n}\r\n\r\nlibrary FrozenValidator {\r\n    \r\n  using SafeMath for uint256;\r\n  using FrozenChecker for FrozenChecker.Rule;\r\n\r\n  struct Validator {\r\n    mapping(address => IndexValue) data;\r\n    KeyFlag[] keys;\r\n    uint256 size;\r\n  }\r\n\r\n  struct IndexValue {\r\n    uint256 keyIndex; \r\n    FrozenChecker.Rule rule;\r\n    mapping (address => uint256) frozenBalances;\r\n  }\r\n\r\n  struct KeyFlag { \r\n    address key; \r\n    bool deleted; \r\n  }\r\n\r\n  function addRule(Validator storage self, address key, uint8 initPercent, uint256[] periods, uint8[] percents) internal returns (bool replaced) {\r\n    require(key != address(0));\r\n    require(periods.length == percents.length);\r\n    require(periods.length > 0);\r\n    require(periods[0] == uint256(0));\r\n    require(initPercent <= percents[0]);\r\n    for (uint256 i = 1; i < periods.length; i = i.add(1)) {\r\n      require(periods[i.sub(1)] < periods[i]);\r\n      require(percents[i.sub(1)] <= percents[i]);\r\n    }\r\n    require(percents[percents.length.sub(1)] == 100);\r\n    FrozenChecker.Rule memory rule = FrozenChecker.Rule(0, initPercent, periods, percents);\r\n    uint256 keyIndex = self.data[key].keyIndex;\r\n    self.data[key].rule = rule;\r\n    if (keyIndex > 0) {\r\n      return false;\r\n    } else {\r\n      keyIndex = self.keys.length++;\r\n      self.data[key].keyIndex = keyIndex.add(1);\r\n      self.keys[keyIndex].key = key;\r\n      self.size++;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function removeRule(Validator storage self, address key) internal returns (bool success) {\r\n    uint256 keyIndex = self.data[key].keyIndex;\r\n    if (keyIndex == 0) {\r\n      return false;\r\n    }\r\n    delete self.data[key];\r\n    self.keys[keyIndex.sub(1)].deleted = true;\r\n    self.size--;\r\n    return true;\r\n  }\r\n\r\n  function containRule(Validator storage self, address key) internal view returns (bool) {\r\n    return self.data[key].keyIndex > 0;\r\n  }\r\n\r\n  function addTimeT(Validator storage self, address addr, uint256 timeT) internal returns (bool) {\r\n    require(timeT > now);\r\n    self.data[addr].rule.timeT = timeT;\r\n    return true;\r\n  }\r\n\r\n  function addFrozenBalance(Validator storage self, address from, address to, uint256 value) internal returns (uint256) {\r\n    self.data[from].frozenBalances[to] = self.data[from].frozenBalances[to].add(value);\r\n    return self.data[from].frozenBalances[to];\r\n  }\r\n\r\n  function validate(Validator storage self, address addr) internal returns (uint256) {\r\n    uint256 frozenTotal = 0;\r\n    for (uint256 i = iterateStart(self); iterateValid(self, i); i = iterateNext(self, i)) {\r\n      address ruleaddr = iterateGet(self, i);\r\n      FrozenChecker.Rule storage rule = self.data[ruleaddr].rule;\r\n      frozenTotal = frozenTotal.add(rule.check(self.data[ruleaddr].frozenBalances[addr]));\r\n    }\r\n    return frozenTotal;\r\n  }\r\n\r\n  function iterateStart(Validator storage self) internal view returns (uint256 keyIndex) {\r\n    return iterateNext(self, uint256(-1));\r\n  }\r\n\r\n  function iterateValid(Validator storage self, uint256 keyIndex) internal view returns (bool) {\r\n    return keyIndex < self.keys.length;\r\n  }\r\n\r\n  function iterateNext(Validator storage self, uint256 keyIndex) internal view returns (uint256) {\r\n    keyIndex++;\r\n    while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) {\r\n      keyIndex++;\r\n    }\r\n    return keyIndex;\r\n  }\r\n\r\n  function iterateGet(Validator storage self, uint256 keyIndex) internal view returns (address) {\r\n    return self.keys[keyIndex].key;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event PausePublic(bool newState);\r\n  event PauseOwnerAdmin(bool newState);\r\n\r\n  bool public pausedPublic = true;\r\n  bool public pausedOwnerAdmin = false;\r\n\r\n  address public admin;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable based on pause states.\r\n   */\r\n  modifier whenNotPaused() {\r\n    if(pausedPublic) {\r\n      if(!pausedOwnerAdmin) {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n      } else {\r\n        revert();\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to set new pause flags\r\n   * pausedPublic can't be false while pausedOwnerAdmin is true\r\n   */\r\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\r\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\r\n\r\n    pausedPublic = newPausedPublic;\r\n    pausedOwnerAdmin = newPausedOwnerAdmin;\r\n\r\n    PausePublic(newPausedPublic);\r\n    PauseOwnerAdmin(newPausedOwnerAdmin);\r\n  }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract SEROToken is Pausable {\r\n  using SafeMath for uint256;\r\n  using FrozenValidator for FrozenValidator.Validator;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 9;\r\n  uint256 public totalSupply;\r\n  \r\n  // Create array of all balances\r\n  mapping (address => uint256) internal balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  \r\n  // Create array of freeze account\r\n  mapping (address => bool) frozenAccount;       // Indefinite frozen account\r\n  mapping (address => uint256) frozenTimestamp;  // Timelimit frozen account\r\n  \r\n  // Freeze account using rule\r\n  FrozenValidator.Validator validator;\r\n  \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n  \r\n  constructor(string tokenName, string tokenSymbol, uint256 totalTokenSupply ) public {\r\n     \r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n    totalSupply = totalTokenSupply * 10 ** uint256(decimals);\r\n    admin = msg.sender;\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(0x0, msg.sender, totalSupply);\r\n  }\r\n  \r\n  \r\n  // Change admin\r\n  function changeAdmin(address newAdmin) public onlyOwner returns (bool)  {\r\n    // require(msg.sender == admin);\r\n    require(newAdmin != address(0));\r\n    // uint256 balAdmin = balances[admin];\r\n    // balances[newAdmin] = balances[newAdmin].add(balAdmin);\r\n    // balances[admin] = 0;\r\n    admin = newAdmin;\r\n    emit AdminTransferred(admin, newAdmin);\r\n    return true;\r\n  }\r\n  \r\n  // Get account frozen timestamp\r\n  function getFrozenTimestamp(address _target) public view returns (uint256) {\r\n    return frozenTimestamp[_target];\r\n  }\r\n  \r\n  // Check if the account is freezed indefinitely \r\n  function getFrozenAccount(address _target) public view returns (bool) {\r\n    return frozenAccount[_target];\r\n  }\r\n  \r\n  // Indefinite freeze account or unfreeze account(set _freeze to true)\r\n  function freeze(address _target, bool _freeze) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    require(_target != admin);\r\n    frozenAccount[_target] = _freeze;\r\n    return true;\r\n  }\r\n  \r\n  // Timelimit freeze account or unfreeze account(set _timestamp to 0x0)\r\n  function freezeWithTimestamp(address _target, uint256 _timestamp) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    require(_target != admin);\r\n    frozenTimestamp[_target] = _timestamp;\r\n    return true;\r\n  }\r\n  \r\n  // Batch indefinite freeze account or unfreeze account\r\n  function multiFreeze(address[] _targets, bool[] _freezes) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    require(_targets.length == _freezes.length);\r\n    uint256 len = _targets.length;\r\n    require(len > 0);\r\n    for (uint256 i = 0; i < len; i = i.add(1)) {\r\n      address _target = _targets[i];\r\n      require(_target != admin);\r\n      bool _freeze = _freezes[i];\r\n      frozenAccount[_target] = _freeze;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  // Batch timelimit freeze account or unfreeze account\r\n  function multiFreezeWithTimestamp(address[] _targets, uint256[] _timestamps) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    require(_targets.length == _timestamps.length);\r\n    uint256 len = _targets.length;\r\n    require(len > 0);\r\n    for (uint256 i = 0; i < len; i = i.add(1)) {\r\n      address _target = _targets[i];\r\n      require(_target != admin);\r\n      uint256 _timestamp = _timestamps[i];\r\n      frozenTimestamp[_target] = _timestamp;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  /* Freeze or unfreeze account using rules */\r\n  \r\n  function addRule(address addr, uint8 initPercent, uint256[] periods, uint8[] percents) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    return validator.addRule(addr, initPercent, periods, percents);\r\n  }\r\n\r\n  function addTimeT(address addr, uint256 timeT) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    return validator.addTimeT(addr, timeT);\r\n  }\r\n  \r\n  function removeRule(address addr) public returns (bool) {\r\n    require(msg.sender == admin);\r\n    return validator.removeRule(addr);\r\n  }\r\n  \r\n  function validate(address addr) public view returns (uint256) {\r\n    require(msg.sender == admin);\r\n    return validator.validate(addr);\r\n  }\r\n\r\n    \r\n  function queryRule(address addr) public view returns (uint256,uint8,uint256[],uint8[]) {\r\n    require(msg.sender == admin);\r\n    return (validator.data[addr].rule.timeT,validator.data[addr].rule.initPercent,validator.data[addr].rule.periods,validator.data[addr].rule.percents);\r\n  }\r\n  \r\n  /* ERC20 interface */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    _transfer(_to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function _transfer(address _to, uint256 _value) internal whenNotPaused {\r\n    require(_to != 0x0);\r\n    require(!frozenAccount[msg.sender]);\r\n    require(now > frozenTimestamp[msg.sender]);\r\n    require(balances[msg.sender].sub(_value) >= validator.validate(msg.sender));\r\n\r\n    if (validator.containRule(msg.sender) && msg.sender != _to) {\r\n        validator.addFrozenBalance(msg.sender, _to, _value);\r\n    }\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n  }\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != 0x0);\r\n    require(!frozenAccount[_from]);\r\n    require(now > frozenTimestamp[_from]);\r\n    require(_value <= balances[_from].sub(validator.validate(_from)));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    if (validator.containRule(_from) && _from != _to) {\r\n      validator.addFrozenBalance(_from, _to, _value);\r\n    }\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function multiTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {\r\n    require(!frozenAccount[msg.sender]);\r\n    require(now > frozenTimestamp[msg.sender]);\r\n    require(_tos.length == _values.length);\r\n    uint256 len = _tos.length;\r\n    require(len > 0);\r\n    uint256 amount = 0;\r\n    for (uint256 i = 0; i < len; i = i.add(1)) {\r\n      amount = amount.add(_values[i]);\r\n    }\r\n    require(amount <= balances[msg.sender].sub(validator.validate(msg.sender)));\r\n    for (uint256 j = 0; j < len; j = j.add(1)) {\r\n      address _to = _tos[j];\r\n      require(_to != 0x0);\r\n      if (validator.containRule(msg.sender) && msg.sender != _to) {\r\n        validator.addFrozenBalance(msg.sender, _to, _values[j]);\r\n      }\r\n      balances[_to] = balances[_to].add(_values[j]);\r\n      balances[msg.sender] = balances[msg.sender].sub(_values[j]);\r\n      emit Transfer(msg.sender, _to, _values[j]);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  \r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public whenNotPaused returns (bool success) {\r\n\r\n    require(_spender != 0x0);\r\n    require(!frozenAccount[msg.sender]);\r\n    require(now > frozenTimestamp[msg.sender]);\r\n    require(_value <= balances[msg.sender].sub(validator.validate(msg.sender)));\r\n\r\n    if (validator.containRule(msg.sender) && msg.sender != _spender) {\r\n      validator.addFrozenBalance(msg.sender, _spender, _value);\r\n    }\r\n\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner]; //.sub(validator.validate(_owner));\r\n  }\r\n  \r\n  function kill() public {\r\n    require(msg.sender == admin);\r\n    selfdestruct(admin);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryRule\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedOwnerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"initPercent\",\"type\":\"uint8\"},{\"name\":\"periods\",\"type\":\"uint256[]\"},{\"name\":\"percents\",\"type\":\"uint8[]\"}],\"name\":\"addRule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"timeT\",\"type\":\"uint256\"}],\"name\":\"addTimeT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPausedPublic\",\"type\":\"bool\"},{\"name\":\"newPausedOwnerAdmin\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeRule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PausePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PauseOwnerAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SEROToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000095345524f546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045345524f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2c383ac2912097d988e6fe7b5d2cb5273ab42361d2e8411e82eae98323c9dfd2"}]}