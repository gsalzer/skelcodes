{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n}\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n    function lock(address _victim, uint256 _value, uint256 _periodSec) public;\r\n    function unlock(address _luckier) external;\r\n    function transferOwnership(address _newOwner) public;\r\n}\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    address public multisig;\r\n    address public tokenHolder;\r\n    ERC20 public token;\r\n    uint256 rate;\r\n    uint256 rateInUsd;\r\n    uint256 priceETH;\r\n    uint256 startIco;\r\n    uint256 periodIco;\r\n    uint256 periodPreIco;\r\n    uint256 indCap;\r\n    mapping (address => uint256) tokens;\r\n    address[] addresses;\r\n    uint256 index;\r\n    event Purchased(address _buyer, uint256 _amount);\r\n    constructor(address _AS, address _multisig, address _tokenHolder, uint256 _priceETH, uint256 _startIcoUNIX, uint256 _periodPreIcoSEC, uint256 _periodIcoSEC) public {\r\n        require(_AS != 0 && _priceETH != 0);\r\n        token = ERC20(_AS);\r\n        multisig = _multisig;\r\n        tokenHolder = _tokenHolder;\r\n        startIco = _startIcoUNIX;\r\n        periodPreIco = _periodPreIcoSEC;\r\n        periodIco = _periodIcoSEC;\r\n        rateInUsd = 10;\r\n        setRate(_priceETH);\r\n    }\r\n    function setIndCap(uint256 _indCapETH) public onlyOwner {\r\n        indCap = _indCapETH;\r\n    }\r\n    function setPriceETH(uint256 _newPriceETH) external onlyOwner {\r\n        setRate(_newPriceETH);\r\n    }\r\n    function setRate(uint256 _priceETH) internal {\r\n        require(_priceETH != 0);\r\n        priceETH = _priceETH;\r\n        rate = rateInUsd.mul(1 ether).div(100).div(_priceETH);\r\n    }\r\n    function transferTokenOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n    function _lock(address _address, uint256 _value, uint256 _period) internal {\r\n        token.lock(_address, _value, _period);\r\n    }\r\n    function lock(address _address, uint256 _value, uint256 _period) external onlyOwner {\r\n        _lock(_address, _value, _period);\r\n    }\r\n    function unlock(address _address) external onlyOwner {\r\n        token.unlock(_address);\r\n    }\r\n    function unlockList() external onlyOwner {\r\n        for (uint256 i = index; i < addresses.length; i++) {\r\n            token.unlock(addresses[i]);\r\n            if (gasleft() < 70000) {\r\n                index = i + 1;\r\n                return;\r\n            }\r\n        }\r\n        index = 0;\r\n    }\r\n    function extendPeriodPreICO(uint256 _days) external onlyOwner {\r\n        periodIco = periodPreIco.add(_days.mul(1 days));\r\n    }\r\n    function extendPeriodICO(uint256 _days) external onlyOwner {\r\n        periodIco = periodIco.add(_days.mul(1 days));\r\n    }\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n    function buyTokens() public payable {\r\n        require(block.timestamp > startIco && block.timestamp < startIco.add(periodIco));\r\n        if (indCap > 0) {\r\n            require(msg.value <= indCap.mul(1 ether));\r\n        }\r\n        uint256 totalAmount = msg.value.mul(10**8).div(rate).add(msg.value.mul(10**8).mul(getBonuses()).div(100).div(rate));\r\n        uint256 balance = token.allowance(tokenHolder, address(this));\r\n        require(balance > 0);\r\n        if (totalAmount > balance) {\r\n            uint256 cash = balance.mul(rate).mul(100).div(100 + getBonuses()).div(10**8);\r\n            uint256 cashBack = msg.value.sub(cash);\r\n            totalAmount = balance;\r\n            msg.sender.transfer(cashBack);\r\n        }\r\n        multisig.transfer(msg.value + cash);\r\n        token.transferFrom(tokenHolder, msg.sender, totalAmount);\r\n        if (tokens[msg.sender] == 0) {\r\n            addresses.push(msg.sender);\r\n        }\r\n        tokens[msg.sender] = tokens[msg.sender].add(totalAmount);\r\n        _lock(msg.sender, tokens[msg.sender], startIco.add(periodIco).sub(block.timestamp));\r\n        emit Purchased(msg.sender, totalAmount);\r\n    }\r\n    function getBonuses() internal view returns(uint256) {\r\n        if (block.timestamp < startIco.add(periodPreIco)) {\r\n            return 20;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    function getIndCapInETH() public view returns(uint) {\r\n        return indCap;\r\n    }\r\n    function getPriceETH() public view returns(uint) {\r\n        return priceETH;\r\n    }\r\n    function tokenBalanceOf(address _address) external view returns(uint256) {\r\n        return token.balanceOf(_address);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPriceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"extendPeriodPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndCapInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indCapETH\",\"type\":\"uint256\"}],\"name\":\"setIndCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"extendPeriodICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_AS\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_priceETH\",\"type\":\"uint256\"},{\"name\":\"_startIcoUNIX\",\"type\":\"uint256\"},{\"name\":\"_periodPreIcoSEC\",\"type\":\"uint256\"},{\"name\":\"_periodIcoSEC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e719fd211b6c809496f2d6a92b8c94819b148b59000000000000000000000000e1e93195733b9413022954c3b5ac809dedded0bb0000000000000000000000000badf935df10a2a0da37043fb57f0c677418000900000000000000000000000000000000000000000000000000000000000000ce000000000000000000000000000000000000000000000000000000005bed6dd000000000000000000000000000000000000000000000000000000000003d3faf00000000000000000000000000000000000000000000000000000000008b0830","Library":"","SwarmSource":"bzzr://42ed1a6d5f4d4ca720843c4004dce2de412bbca80a742b2d3b27654c32bdd894"}]}