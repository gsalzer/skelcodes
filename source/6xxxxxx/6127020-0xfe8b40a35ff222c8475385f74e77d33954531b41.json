{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                     ___           ___           ___                    __      \r\n//       ___          /  /\\         /  /\\         /  /\\                  |  |\\    \r\n//      /__/\\        /  /::\\       /  /::\\       /  /::|                 |  |:|   \r\n//      \\  \\:\\      /  /:/\\:\\     /  /:/\\:\\     /  /:|:|                 |  |:|   \r\n//       \\__\\:\\    /  /::\\ \\:\\   /  /::\\ \\:\\   /  /:/|:|__               |__|:|__ \r\n//       /  /::\\  /__/:/\\:\\ \\:\\ /__/:/\\:\\_\\:\\ /__/:/_|::::\\          ____/__/::::\\\r\n//      /  /:/\\:\\ \\  \\:\\ \\:\\_\\/ \\__\\/  \\:\\/:/ \\__\\/  /~~/:/          \\__\\::::/~~~~\r\n//     /  /:/__\\/  \\  \\:\\ \\:\\        \\__\\::/        /  /:/              |~~|:|    \r\n//    /__/:/        \\  \\:\\_\\/        /  /:/        /  /:/               |  |:|    \r\n//    \\__\\/          \\  \\:\\         /__/:/        /__/:/                |__|:|    \r\n//                    \\__\\/         \\__\\/         \\__\\/                  \\__\\|    \r\n//  ______   ______   ______   _____    _    _   ______  ______  _____ \r\n// | |  | \\ | |  | \\ / |  | \\ | | \\ \\  | |  | | | |     | |     | | \\ \\ \r\n// | |__|_/ | |__| | | |  | | | |  | | | |  | | | |     | |---- | |  | |\r\n// |_|      |_|  \\_\\ \\_|__|_/ |_|_/_/  \\_|__|_| |_|____ |_|____ |_|_/_/ \r\n// \r\n// TEAM X All Rights Received. http://teamx.club \r\n// This product is protected under license.  Any unauthorized copy, modification, or use without \r\n// express written consent from the creators is prohibited.\r\n// Any cooperation Please email: service@teamx.club\r\n// ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n//=========================================================...\r\n// |\\/| _ . _   /~` _  _ _|_ _ _  __|_  .\r\n// |  |(_||| |  \\_,(_)| | | | (_|(_ |   . Main Contract\r\n//=========================================================    \r\ncontract XToken is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    mapping(address => uint256) balances;\r\n\r\n    string public name = \"XToken\";\r\n    string public symbol = \"XT\";\r\n    uint8 public decimals = 18;\r\n    uint256 private fee_ = 5; // 5% fee to buy and sell\r\n\r\n    uint256 public totalSupply = 100000000 * (1 ether);\r\n    uint256 public tokenMarketPool = 0; // no shares\r\n    uint256 public poolPrice = 1 finney;\r\n\r\n\r\n    //=========================================================...\r\n    //  _ _  _  __|_ _   __|_ _  _\r\n    // (_(_)| |_\\ | ||_|(_ | (_)| \r\n    //=========================================================\r\n    constructor () public {\r\n        balances[msg.sender] = 30000000 * (1 ether); // keeps 30%\r\n        tokenMarketPool = totalSupply.sub(balances[msg.sender]);\r\n    }\r\n\r\n    //=========================================================...\r\n    //  _    |_ |. _   |`    _  __|_. _  _  _  .\r\n    // |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  . public functions\r\n    //=|=======================================================\r\n    function () public payable {\r\n        if (!isContract(msg.sender)) {\r\n            revert(\"Can not Send Eth directly to this token\");\r\n        }\r\n    }\r\n\r\n    function buy() public payable {\r\n        uint256 ethAmount = msg.value;\r\n        uint256 taxed = ethAmount.sub(ethAmount.mul(fee_).div(100));\r\n        uint256 tokenAmount = taxed.mul(1 ether).div(poolPrice);\r\n\r\n        require(tokenMarketPool >= tokenAmount, \"No enough token in market pool\");\r\n        tokenMarketPool = tokenMarketPool.sub(tokenAmount);\r\n        balances[msg.sender] = balanceOf(msg.sender).add(tokenAmount);\r\n    }\r\n\r\n    function sell(uint256 tokenAmount) public {\r\n        require(balanceOf(msg.sender) >= tokenAmount, \"No enough token\");\r\n        uint256 sellPrice = getSellPrice();\r\n        uint256 soldEth = tokenAmount.mul(sellPrice).div(1 ether);\r\n\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(tokenAmount);\r\n        tokenMarketPool = tokenMarketPool.add(tokenAmount);\r\n        uint256 gotEth = soldEth.sub(soldEth.mul(fee_).div(100));\r\n        msg.sender.transfer(gotEth);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        if (isContract(_to)) {\r\n            require(balanceOf(msg.sender) >= _value, \"no enough token\");\r\n            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n            balances[_to] = balanceOf(_to).add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    //=========================================================...\r\n    //   . _      |`    _  __|_. _  _  _  .\r\n    // \\/|(/_VV  ~|~|_|| |(_ | |(_)| |_\\  . view functions\r\n    //=========================================================\r\n    function getShareToken() public view returns (uint256) {\r\n        return totalSupply.sub(tokenMarketPool);\r\n    }\r\n\r\n    function getSellPrice() public view returns (uint256) {\r\n        return address(this).balance.mul(1 ether).div(getShareToken());\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //=========================================================...\r\n    //  _  _.   _ _|_ _    |`    _  __|_. _  _  _  .\r\n    // |_)| |\\/(_| | (/_  ~|~|_|| |(_ | |(_)| |_\\  . private functions\r\n    //=|=======================================================\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        require (balanceOf(msg.sender) >= _value, \"No Enough Token\");\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        require (balanceOf(msg.sender) >= _value, \"No Enough Token\");\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n}\r\n\r\n//=========================================================...\r\n// . _ _|_ _  _|` _  _ _ \r\n// || | | (/_|~|~(_|(_(/_\r\n//=========================================================\r\ninterface ContractReceiver {\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external;\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShareToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMarketPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"XToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9eca017f1c5a5c806ad372d5ee1c14ef3f3faf46e599027c09a721d054f571eb"}]}