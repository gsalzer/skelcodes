{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/GodMode.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @title God Mode\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev This contract provides a basic interface for God\r\n///  in a contract as well as the ability for God to pause\r\n///  the contract\r\ncontract GodMode {\r\n    /// @dev Is the contract paused?\r\n    bool public isPaused;\r\n\r\n    /// @dev God's address\r\n    address public god;\r\n\r\n    /// @dev Only God can run this function\r\n    modifier onlyGod()\r\n    {\r\n        require(god == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev This function can only be run while the contract\r\n    ///  is not paused\r\n    modifier notPaused()\r\n    {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    /// @dev This event is fired when the contract is paused\r\n    event GodPaused();\r\n\r\n    /// @dev This event is fired when the contract is unpaused\r\n    event GodUnpaused();\r\n\r\n    constructor() public\r\n    {\r\n        // Make the creator of the contract God\r\n        god = msg.sender;\r\n    }\r\n\r\n    /// @dev God can change the address of God\r\n    /// @param _newGod The new address for God\r\n    function godChangeGod(address _newGod) public onlyGod\r\n    {\r\n        god = _newGod;\r\n    }\r\n\r\n    /// @dev God can pause the game\r\n    function godPause() public onlyGod\r\n    {\r\n        isPaused = true;\r\n\r\n        emit GodPaused();\r\n    }\r\n\r\n    /// @dev God can unpause the game\r\n    function godUnpause() public onlyGod\r\n    {\r\n        isPaused = false;\r\n\r\n        emit GodUnpaused();\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth: Resources Interface Referencer\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Provides functionality to reference the resource interface contract\r\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\r\n    /// @dev The interface contract's address\r\n    address public interfaceContract;\r\n\r\n    /// @dev Only the interface contract can run this function\r\n    modifier onlyInterfaceContract()\r\n    {\r\n        require(interfaceContract == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @dev God can set the realty contract\r\n    /// @param _interfaceContract The new address\r\n    function godSetInterfaceContract(address _interfaceContract)\r\n        public\r\n        onlyGod\r\n    {\r\n        interfaceContract = _interfaceContract;\r\n    }\r\n}\r\n\r\n// File: contracts/KingOfEthResource.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title ERC20Interface\r\n/// @dev ERC20 token interface contract\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns(uint);\r\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\r\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\r\n    function transfer(address _to, uint _tokens) public returns(bool success);\r\n    function approve(address _spender, uint _tokens) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/// @title King of Eth: Resource\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev Common contract implementation for resources\r\ncontract KingOfEthResource is\r\n      ERC20Interface\r\n    , GodMode\r\n    , KingOfEthResourcesInterfaceReferencer\r\n{\r\n    /// @dev Current resource supply\r\n    uint public resourceSupply;\r\n\r\n    /// @dev ERC20 token's decimals\r\n    uint8 public constant decimals = 0;\r\n\r\n    /// @dev mapping of addresses to holdings\r\n    mapping (address => uint) holdings;\r\n\r\n    /// @dev mapping of addresses to amount of tokens frozen\r\n    mapping (address => uint) frozenHoldings;\r\n\r\n    /// @dev mapping of addresses to mapping of allowances for an address\r\n    mapping (address => mapping (address => uint)) allowances;\r\n\r\n    /// @dev ERC20 total supply\r\n    /// @return The current total supply of the resource\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return resourceSupply;\r\n    }\r\n\r\n    /// @dev ERC20 balance of address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The balance of the address\r\n    function balanceOf(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return holdings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev Total resources frozen for an address\r\n    /// @param _tokenOwner The address to look up\r\n    /// @return The frozen balance of the address\r\n    function frozenTokens(address _tokenOwner)\r\n        public\r\n        constant\r\n        returns(uint balance)\r\n    {\r\n        return frozenHoldings[_tokenOwner];\r\n    }\r\n\r\n    /// @dev The allowance for a spender on an account\r\n    /// @param _tokenOwner The account that allows withdrawels\r\n    /// @param _spender The account that is allowed to withdraw\r\n    /// @return The amount remaining in the allowance\r\n    function allowance(address _tokenOwner, address _spender)\r\n        public\r\n        constant\r\n        returns(uint remaining)\r\n    {\r\n        return allowances[_tokenOwner][_spender];\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens required\r\n    modifier hasAvailableTokens(address _owner, uint _tokens)\r\n    {\r\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Only run if player has at least some amount of tokens frozen\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens required\r\n    modifier hasFrozenTokens(address _owner, uint _tokens)\r\n    {\r\n        require(frozenHoldings[_owner] >= _tokens);\r\n        _;\r\n    }\r\n\r\n    /// @dev Set up the exact same state in each resource\r\n    constructor() public\r\n    {\r\n        // God gets 200 to put on exchange\r\n        holdings[msg.sender] = 200;\r\n\r\n        resourceSupply = 200;\r\n    }\r\n\r\n    /// @dev The resources interface can burn tokens for building\r\n    ///  roads or houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceBurnTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        holdings[_owner] -= _tokens;\r\n\r\n        resourceSupply -= _tokens;\r\n\r\n        // Pretend the tokens were sent to 0x0\r\n        emit Transfer(_owner, 0x0, _tokens);\r\n    }\r\n\r\n    /// @dev The resources interface contract can mint tokens for houses\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to burn\r\n    function interfaceMintTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        holdings[_owner] += _tokens;\r\n\r\n        resourceSupply += _tokens;\r\n\r\n        // Pretend the tokens were sent from the interface contract\r\n        emit Transfer(interfaceContract, _owner, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can freeze tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to freeze\r\n    function interfaceFreezeTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasAvailableTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] += _tokens;\r\n    }\r\n\r\n    /// @dev The interface can thaw tokens\r\n    /// @param _owner The owner of the tokens\r\n    /// @param _tokens The amount of tokens to thaw\r\n    function interfaceThawTokens(address _owner, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_owner, _tokens)\r\n    {\r\n        frozenHoldings[_owner] -= _tokens;\r\n    }\r\n\r\n    /// @dev The interface can transfer tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function interfaceTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n    {\r\n        assert(holdings[_from] >= _tokens);\r\n\r\n        holdings[_from] -= _tokens;\r\n        holdings[_to]   += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev The interface can transfer frozend tokens\r\n    /// @param _from The owner of the tokens\r\n    /// @param _to The new owner of the tokens\r\n    /// @param _tokens The amount of frozen tokens to transfer\r\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\r\n        public\r\n        onlyInterfaceContract\r\n        hasFrozenTokens(_from, _tokens)\r\n    {\r\n        // Make sure to deduct the tokens from both the total and frozen amounts\r\n        holdings[_from]       -= _tokens;\r\n        frozenHoldings[_from] -= _tokens;\r\n        holdings[_to]         += _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    /// @dev ERC20 transfer\r\n    /// @param _to The address to transfer to\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transfer(address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(msg.sender, _tokens)\r\n        returns(bool success)\r\n    {\r\n        holdings[_to]        += _tokens;\r\n        holdings[msg.sender] -= _tokens;\r\n\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 approve\r\n    /// @param _spender The address to approve\r\n    /// @param _tokens The amount of tokens to approve\r\n    function approve(address _spender, uint _tokens)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        allowances[msg.sender][_spender] = _tokens;\r\n\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev ERC20 transfer from\r\n    /// @param _from The address providing the allowance\r\n    /// @param _to The address using the allowance\r\n    /// @param _tokens The amount of tokens to transfer\r\n    function transferFrom(address _from, address _to, uint _tokens)\r\n        public\r\n        hasAvailableTokens(_from, _tokens)\r\n        returns(bool success)\r\n    {\r\n        require(allowances[_from][_to] >= _tokens);\r\n\r\n        holdings[_to]          += _tokens;\r\n        holdings[_from]        -= _tokens;\r\n        allowances[_from][_to] -= _tokens;\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/resources/KingOfEthResourceBronze.sol\r\n\r\n/****************************************************\r\n *\r\n * Copyright 2018 BurzNest LLC. All rights reserved.\r\n *\r\n * The contents of this file are provided for review\r\n * and educational purposes ONLY. You MAY NOT use,\r\n * copy, distribute, or modify this software without\r\n * explicit written permission from BurzNest LLC.\r\n *\r\n ****************************************************/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title King of Eth Resource: Bronze\r\n/// @author Anthony Burzillo <burz@burznest.com>\r\n/// @dev ERC20 contract for the bronze resource\r\ncontract KingOfEthResourceBronze is KingOfEthResource {\r\n    /// @dev The ERC20 token name\r\n    string public constant name = \"King of Eth Resource: Bronze\";\r\n\r\n    /// @dev The ERC20 token symbol\r\n    string public constant symbol = \"KEBR\";\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceBurnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceFrozenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGod\",\"type\":\"address\"}],\"name\":\"godChangeGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interfaceContract\",\"type\":\"address\"}],\"name\":\"godSetInterfaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interfaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"godUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceMintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceFreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"interfaceThawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"god\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"frozenTokens\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resourceSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GodUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KingOfEthResourceBronze","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4afb9026e84caf8d99e68a4996a180086d23174c6b57da7ad533fc2400966be1"}]}