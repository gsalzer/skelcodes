{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ERC721 {\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view   returns (address owner);\r\n    // ownerof\r\n    // deploy:  public ->external\r\n    // test : external -> public\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n\r\n}\r\n\r\ncontract PonyAbilityInterface {\r\n\r\n    function isPonyAbility() external pure returns (bool);\r\n\r\n    function getBasicAbility(bytes22 _genes) external pure returns(uint8, uint8, uint8, uint8, uint8);\r\n\r\n   function getMaxAbilitySpeed(\r\n        uint _matronDerbyAttendCount,\r\n        uint _matronRanking,\r\n        uint _matronWinningCount,\r\n        bytes22 _childGenes        \r\n      ) external view returns (uint);\r\n\r\n    function getMaxAbilityStamina(\r\n        uint _sireDerbyAttendCount,\r\n        uint _sireRanking,\r\n        uint _sireWinningCount,\r\n        bytes22 _childGenes\r\n    ) external view returns (uint);\r\n    \r\n    function getMaxAbilityStart(\r\n        uint _matronRanking,\r\n        uint _matronWinningCount,\r\n        uint _sireDerbyAttendCount,\r\n        bytes22 _childGenes\r\n        ) external view returns (uint);\r\n    \r\n        \r\n    function getMaxAbilityBurst(\r\n        uint _matronDerbyAttendCount,\r\n        uint _sireWinningCount,\r\n        uint _sireRanking,\r\n        bytes22 _childGenes\r\n    ) external view returns (uint);\r\n\r\n    function getMaxAbilityTemperament(\r\n        uint _matronDerbyAttendCount,\r\n        uint _matronWinningCount,\r\n        uint _sireDerbyAttendCount,\r\n        uint _sireWinningCount,\r\n        bytes22 _childGenes\r\n    ) external view returns (uint);\r\n\r\n  }\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    //@dev 컨트렉트가 멈추었을때 발생하는 이벤트\r\n    event Pause();\r\n    //@dev 컨트렉트가 시작되었을 때 발생하는 이벤트\r\n    event Unpause();\r\n\r\n    //@dev Contract의 운영을 관리(시작, 중지)하는 변수로서\r\n    //paused true가 되지 않으면  컨트렉트의 대부분 동작들이 작동하지 않음\r\n    bool public paused = false;\r\n\r\n\r\n    //@dev paused가 멈추지 않았을 때 기능을 수행하도록 해주는 modifier\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    //@dev paused가 멈춰을 때 기능을 수행하도록 해주는 modifier\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    //@dev owner 권한을 가진 사용자와 paused가 falsed일 때 수행 가능\r\n    //paused를 true로 설정\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n\r\n    //@dev owner 권한을 가진 사용자와 paused가 true일때\r\n    //paused를 false로 설정\r\n    function unPause() public onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PonyAccessControl {\r\n\r\n    event ContractUpgrade(address newContract);\r\n\r\n    //@dev CFO,COO 역활을 수행하는 계정의 주소\r\n    address public cfoAddress;\r\n    address public cooAddress;    \r\n    address public derbyAddress; // derby update 전용\r\n    address public rewardAddress; // reward send 전용    \r\n\r\n    //@dev Contract의 운영을 관리(시작, 중지)하는 변수로서\r\n    //paused true가 되지 않으면  컨트렉트의 대부분 동작들이 작동하지 않음\r\n    bool public paused = false;\r\n\r\n    //@dev CFO 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    //@dev COO 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }      \r\n\r\n    //@dev derby 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\r\n    modifier onlyDerbyAdress() {\r\n        require(msg.sender == derbyAddress);\r\n        _;\r\n    }\r\n\r\n    //@dev reward 주소로 지정된 사용자만이 기능을 수행할 수 있도록해주는 modifier\r\n    modifier onlyRewardAdress() {\r\n        require(msg.sender == rewardAddress);\r\n        _;\r\n    }           \r\n\r\n    //@dev COO, CFO, derby, reward 주소로 지정된 사용자들 만이 기능을 수행할 수 있도록해주는 modifier\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == cfoAddress ||            \r\n            msg.sender == derbyAddress ||\r\n            msg.sender == rewardAddress            \r\n        );\r\n        _;\r\n    }\r\n\r\n    //@dev CFO 권한을 가진 사용자만 수행 가능,새로운 CF0 계정을 지정\r\n    function setCFO(address _newCFO) external onlyCFO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    //@dev CFO 권한을 가진 사용자만 수행 가능,새로운 COO 계정을 지정\r\n    function setCOO(address _newCOO) external onlyCFO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }    \r\n\r\n    //@dev COO 권한을 가진 사용자만 수행 가능,새로운 Derby 계정을 지정\r\n    function setDerbyAdress(address _newDerby) external onlyCOO {\r\n        require(_newDerby != address(0));\r\n\r\n        derbyAddress = _newDerby;\r\n    }\r\n\r\n    //@dev COO 권한을 가진 사용자만 수행 가능,새로운 Reward 계정을 지정\r\n    function setRewardAdress(address _newReward) external onlyCOO {\r\n        require(_newReward != address(0));\r\n\r\n        rewardAddress = _newReward;\r\n    }    \r\n\r\n    //@dev paused가 멈추지 않았을 때 기능을 수행하도록 해주는 modifier\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    //@dev paused가 멈춰을 때 기능을 수행하도록 해주는 modifier\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    //@dev COO 권한을 가진 사용자와 paused가 falsed일 때 수행 가능\r\n    //paused를 true로 설정\r\n    function pause() external onlyCOO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    //@dev COO 권한을 가진 사용자와 paused가 true일때\r\n    //paused를 false로 설정\r\n    function unPause() public onlyCOO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract PonyBase is PonyAccessControl {\r\n\r\n    //@dev 새로운 Pony가 생성되었을 때 발생하는 이벤트 (giveBirth 메소드 호출 시 발생)\r\n    event Birth(address owner, uint256 ponyId, uint256 matronId, uint256 sireId, bytes22 genes);\r\n    //@dev 포니의 소유권 이전이 발생하였을 때 발생하는 이벤트 (출생 포함)\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    //@dev 당근구매시 발생하는 이벤트\r\n    event carrotPurchased(address buyer, uint256 receivedValue, uint256 carrotCount);\r\n\r\n    //@dev 랭킹보상이 지급되면 발생하는 이벤트\r\n    event RewardSendSuccessful(address from, address to, uint value);    \r\n\r\n\r\n    struct Pony {\r\n        // 포니의 탄생 시간\r\n        uint64 birthTime;\r\n        // 새로운 쿨다운 적용되었을때, cooldown이 끝나는 block의 번호\r\n        uint64 cooldownEndBlock;\r\n        // 모의 아이디\r\n        uint32 matronId;\r\n        // 부의 아이디\r\n        uint32 sireId;        \r\n        // 나이\r\n        uint8 age;\r\n        // 개월 수\r\n        uint8 month;\r\n        // 은퇴 나이\r\n        uint8 retiredAge;        \r\n        // 경마 참여 횟수\r\n        uint8 derbyAttendCount;\r\n        // 랭킹\r\n        uint32 rankingScore;\r\n        // 유전자 정보\r\n        bytes22 genes;\r\n    }\r\n\r\n    struct DerbyPersonalResult {\r\n        //1등\r\n        uint16 first;\r\n        //2등\r\n        uint16 second;\r\n        //3등\r\n        uint16 third;\r\n\r\n        uint16 lucky;\r\n\r\n    }\r\n\r\n    struct Ability {\r\n        //속도\r\n        uint8 speed;\r\n        //스테미너\r\n        uint8 stamina;\r\n        //스타트\r\n        uint8 start;\r\n        //폭발력\r\n        uint8 burst;\r\n        //기질\r\n        uint8 temperament;\r\n        //속도\r\n\r\n        //최대 속도\r\n        uint8 maxSpeed;\r\n        //최대 스테미너\r\n        uint8 maxStamina;\r\n        //최대 시작\r\n        uint8 maxStart;\r\n        //최대 폭발력\r\n        uint8 maxBurst;\r\n        //최대 기질\r\n        uint8 maxTemperament;\r\n    }\r\n\r\n    struct Gen0Stat {\r\n        //은퇴나이\r\n        uint8 retiredAge;\r\n        //최대 속도\r\n        uint8 maxSpeed;\r\n        //최대 스테미너\r\n        uint8 maxStamina;\r\n        //최대 시작\r\n        uint8 maxStart;\r\n        //최대 폭발력\r\n        uint8 maxBurst;\r\n        //최대 기질\r\n        uint8 maxTemperament;\r\n    }    \r\n\r\n    //@dev 교배가 발생할때의 다음 교배까지 필요한 시간을 가진 배열\r\n    uint32[15] public cooldowns = [\r\n        uint32(2 minutes),\r\n        uint32(5 minutes),\r\n        uint32(10 minutes),\r\n        uint32(30 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(24 hours),\r\n        uint32(48 hours),\r\n        uint32(5 days),\r\n        uint32(7 days),\r\n        uint32(10 days),\r\n        uint32(15 days)\r\n    ];\r\n\r\n\r\n    // 능력치 정보를 가지고 있는 배열\r\n    Ability[] ability;\r\n\r\n    // Gen0생성포니의 은퇴나이 Max능력치 정보\r\n    Gen0Stat public gen0Stat; \r\n\r\n    // 모든 포니의 정보를 가지고 있는 배열\r\n    Pony[] ponies;\r\n\r\n    // 그랑프로 우승 정보를 가지고 있는 배열\r\n    DerbyPersonalResult[] grandPrix;\r\n    // 일반 경기 우승 정보를 가지고 있는 배열\r\n    DerbyPersonalResult[] league;\r\n\r\n    //포니 아이디에 대한 소유권를 가진 주소들에 대한 테이블\r\n    mapping(uint256 => address) public ponyIndexToOwner;\r\n    //주소에 해당하는 소유자가 가지고 있는 포니의 개수를 가진 m테이블\r\n    mapping(address => uint256) ownershipTokenCount;\r\n    //포니 아이디에 대한 소유권 이전을 허용한 주소 정보를 가진 테이블\r\n    mapping(uint256 => address) public ponyIndexToApproved;    \r\n\r\n    //@dev 시간 기반의 Pony의 경매를 담당하는 SaleClockAuction의 주소\r\n    SaleClockAuction public saleAuction;\r\n    //@dev 교배 기반의 Pony의 경매를 담당하는 SiringClockAuction의 주소\r\n    SiringClockAuction public siringAuction;\r\n\r\n    //@dev 교배 시 능력치를 계산하는 컨트렉트의 주소\r\n    PonyAbilityInterface public ponyAbility;\r\n\r\n    //@dev 교배 시 유전자 정보를 생성하는 컨트렉트의 주소\r\n    GeneScienceInterface public geneScience;\r\n\r\n\r\n    // 새로운 블록이 생성되기까지 소유되는 시간\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    //@dev 포니의 소유권을 이전해는 internal Method\r\n    //@param _from 보내는 지갑 주소\r\n    //@param _to 받는 지갑 주소\r\n    //@param _tokenId Pony의 아이디\r\n    function _transfer(address _from, address _to, uint256 _tokenId)\r\n    internal\r\n    {\r\n        ownershipTokenCount[_to]++;\r\n        ponyIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;            \r\n            delete ponyIndexToApproved[_tokenId];\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    //@dev 신규 포니를 생성하는 internal Method\r\n    //@param _matronId  종마의 암컷의 id\r\n    //@param _sireId 종마의 수컷의 id\r\n    //@param _coolDownIndex  포니의 cooldown Index 값\r\n    //@param _genes 포니의 유전자 정보\r\n    //@param _derbyMaxCount 경마 최대 참여 개수\r\n    //@param _owner 포니의 소유자\r\n    //@param _maxSpeed 최대 능력치\r\n    //@param _maxStamina 최대 스테미너\r\n    //@param _maxStart 최대 스타트\r\n    //@param _maxBurst 최대 폭발력\r\n    //@param _maxTemperament 최대 기질\r\n    function _createPony(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        bytes22 _genes,\r\n        uint256 _retiredAge,\r\n        address _owner,\r\n        uint[5] _ability,\r\n        uint[5] _maxAbility\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_retiredAge == uint256(uint32(_retiredAge)));\r\n\r\n        Pony memory _pony = Pony({\r\n            birthTime : uint64(now),\r\n            cooldownEndBlock : 0,\r\n            matronId : uint32(_matronId),\r\n            sireId : uint32(_sireId),            \r\n            age : 0,\r\n            month : 0,\r\n            retiredAge : uint8(_retiredAge),\r\n            rankingScore : 0,\r\n            genes : _genes,\r\n            derbyAttendCount : 0\r\n            });\r\n\r\n\r\n        Ability memory _newAbility = Ability({\r\n            speed : uint8(_ability[0]),\r\n            stamina : uint8(_ability[1]),\r\n            start : uint8(_ability[2]),\r\n            burst : uint8(_ability[3]),\r\n            temperament : uint8(_ability[4]),\r\n            maxSpeed : uint8(_maxAbility[0]),\r\n            maxStamina : uint8(_maxAbility[1]),\r\n            maxStart : uint8(_maxAbility[2]),\r\n            maxBurst : uint8(_maxAbility[3]),\r\n            maxTemperament : uint8(_maxAbility[4])\r\n            });\r\n       \r\n\r\n        uint256 newPonyId = ponies.push(_pony) - 1;\r\n        uint newAbilityId = ability.push(_newAbility) - 1;\r\n        require(newPonyId == uint256(uint32(newPonyId)));\r\n        require(newAbilityId == uint256(uint32(newAbilityId)));\r\n        require(newPonyId == newAbilityId);\r\n        \r\n        _leagueGrandprixInit();\r\n\r\n        emit Birth(\r\n            _owner,\r\n            newPonyId,\r\n            uint256(_pony.matronId),\r\n            uint256(_pony.sireId),\r\n            _pony.genes\r\n        );\r\n        _transfer(0, _owner, newPonyId);\r\n\r\n        return newPonyId;\r\n    }\r\n    //@Dev league 및 grandprix 구조체 초기화\r\n    function _leagueGrandprixInit() internal{\r\n        \r\n        DerbyPersonalResult memory _league = DerbyPersonalResult({\r\n            first : 0,\r\n            second : 0,\r\n            third : 0,\r\n            lucky : 0\r\n            });\r\n\r\n        DerbyPersonalResult memory _grandPrix = DerbyPersonalResult({\r\n            first : 0,\r\n            second : 0,\r\n            third : 0,\r\n            lucky : 0\r\n            });\r\n\r\n        league.push(_league);\r\n        grandPrix.push(_grandPrix);\r\n    }\r\n\r\n    //@dev 블록체인에서 새로운 블록이 생성되는데 소요되는 평균 시간을 지정\r\n    //@param _secs 블록 생성 시간\r\n    //modifier : COO 만 실행 가능\r\n    function setSecondsPerBlock(uint256 _secs)\r\n    external\r\n    onlyCOO\r\n    {\r\n        require(_secs < cooldowns[0]);\r\n        secondsPerBlock = _secs;\r\n    }\r\n}\r\n\r\ncontract PonyOwnership is PonyBase, ERC721 {\r\n\r\n    //@dev PonyId에 해당하는 포니가 from부터 to로 이전되었을 때 발생하는 이벤트\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    //@dev PonyId에 해당하는 포니의 소유권 이전을 승인하였을 때 발생하는 이벤트 (onwer -> approved)\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    string public constant name = \"GoPony\";\r\n    string public constant symbol = \"GP\";\r\n\r\n/*    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n    bytes4(keccak256('supportsInterface(bytes4)'));*/\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        return (_interfaceID == InterfaceSignature_ERC721);\r\n    }\r\n\r\n    /*    \r\n    function setMetadataAddress(address _contractAddress)\r\n    public\r\n    onlyCOO\r\n    {\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n    }\r\n    */\r\n\r\n    //@dev 요청한 주소가 PonyId를 소유하고 있는지 확인하는 Internal Method\r\n    //@Param _calimant 요청자의 주소\r\n    //@param _tokenId 포니의 아이디\r\n    function _owns(address _claimant, uint256 _tokenId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ponyIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    //@dev 요청한 주소로 PonyId를 소유권 이전을 승인하였는지 확인하는 internal Method\r\n    //@Param _calimant 요청자의 주소\r\n    //@param _tokenId 포니의 아이디\r\n    function _approvedFor(address _claimant, uint256 _tokenId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ponyIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    //@dev  PonyId의 소유권 이전을 승인하는 Internal Method\r\n    //@param _tokenId 포니의 아이디\r\n    //@Param _approved 이전할 소유자의 주소\r\n    function _approve(uint256 _tokenId, address _approved)\r\n    internal\r\n    {\r\n        ponyIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    //@dev  주소의 소유자가 가진 Pony의 개수를 리턴\r\n    //@Param _owner 소유자의 주소\r\n    function balanceOf(address _owner)\r\n    public\r\n    view\r\n    returns (uint256 count)\r\n    {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    //@dev 소유권을 이전하는 Method\r\n    //@Param _owner 소유자의 주소\r\n    //@param _tokenId 포니의 아이디\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_to != address(saleAuction));\r\n        require(_to != address(siringAuction));\r\n        require(_owns(msg.sender, _tokenId));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    //@dev  PonyId의 소유권 이전을 승인하는 Method\r\n    //@param _tokenId 포니의 아이디\r\n    //@Param _approved 이전할 소유자의 주소\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        _approve(_tokenId, _to);\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    //@dev  이전 소유자로부터 포니의 소유권을 이전 받아옴\r\n    //@Param _from 이전 소유자 주소\r\n    //@Param _to 신규 소유자 주소\r\n    //@param _tokenId 포니의 아이디\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    //@dev 존재하는 모든 포니의 개수를 가져옴\r\n    function totalSupply()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return ponies.length - 1;\r\n    }\r\n\r\n    //@dev 포니 아이디에 대한 소유자 정보를 가져옴\r\n    //@param _tokenId  포니의 아이디\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = ponyIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    //@dev 소유자의 모든 포니 아이디를 가져옴\r\n    //@param _owner 포니의 소유자\r\n    function tokensOfOwner(address _owner)\r\n    external\r\n    view\r\n    returns (uint256[] ownerTokens)\r\n    {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalPonies = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 ponyId;\r\n\r\n            for (ponyId = 1; ponyId <= totalPonies; ponyId++) {\r\n                if (ponyIndexToOwner[ponyId] == _owner) {\r\n                    result[resultIndex] = ponyId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract PonyBreeding is PonyOwnership {\r\n\r\n\r\n    //@dev 포니가 임신되면 발생하는 이벤트\r\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 matronCooldownEndBlock, uint256 sireCooldownEndBlock);\r\n\r\n    //교배가 이루어지는데 필요한 비용\r\n    uint256 public autoBirthFee = 4 finney;\r\n\r\n    //@dev 유전자 정보를 생성하는 컨트렉트의 주소를 지정하는 method\r\n    //modifier COO\r\n    function setGeneScienceAddress(address _address)\r\n    external\r\n    onlyCOO\r\n    {\r\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\r\n\r\n        require(candidateContract.isGeneScience());\r\n\r\n        geneScience = candidateContract;\r\n    }\r\n\r\n    //@dev 유전자 정보를 생성하는 컨트렉트의 주소를 지정하는 method\r\n    //modifier COO\r\n    function setPonyAbilityAddress(address _address)\r\n    external\r\n    onlyCOO\r\n    {\r\n        PonyAbilityInterface candidateContract = PonyAbilityInterface(_address);\r\n\r\n        require(candidateContract.isPonyAbility());\r\n\r\n        ponyAbility = candidateContract;\r\n    }\r\n\r\n\r\n\r\n    //@dev 교배가 가능한지 확인하는 internal method\r\n    //@param _pony 포니 정보\r\n    function _isReadyToBreed(Pony _pony)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return (_pony.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    //@dev 셀프 교배 확인용\r\n    //@param _sireId  교배할 암놈의 아이디\r\n    //@param _matronId 교배할 숫놈의 아이디\r\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        address matronOwner = ponyIndexToOwner[_matronId];\r\n        address sireOwner = ponyIndexToOwner[_sireId];\r\n\r\n        return (matronOwner == sireOwner);\r\n    }\r\n\r\n\r\n    //@dev 포니에 대해서 쿨다운을 적용하는 internal method\r\n    //@param _pony 포니 정보\r\n    function _triggerCooldown(Pony storage _pony)\r\n    internal\r\n    {\r\n        if (_pony.age < 14) {\r\n            _pony.cooldownEndBlock = uint64((cooldowns[_pony.age] / secondsPerBlock) + block.number);\r\n        } else {\r\n            _pony.cooldownEndBlock = uint64((cooldowns[14] / secondsPerBlock) + block.number);\r\n        }\r\n\r\n    }\r\n    //@dev 포니 교배에 따라 나이를 6개월 증가시키는 internal method\r\n    //@param _pony 포니 정보\r\n    function _triggerAgeSixMonth(Pony storage _pony)\r\n    internal\r\n    {\r\n        uint8 sumMonth = _pony.month + 6;\r\n        if (sumMonth >= 12) {\r\n            _pony.age = _pony.age + 1;\r\n            _pony.month = sumMonth - 12;\r\n        } else {\r\n            _pony.month = sumMonth;\r\n        }\r\n    }\r\n    //@dev 포니 교배에 따라 나이를 1개월 증가시키는 internal method\r\n    //@param _pony 포니 정보\r\n    function _triggerAgeOneMonth(Pony storage _pony)\r\n    internal\r\n    {\r\n        uint8 sumMonth = _pony.month + 1;\r\n        if (sumMonth >= 12) {\r\n            _pony.age = _pony.age + 1;\r\n            _pony.month = sumMonth - 12;\r\n        } else {\r\n            _pony.month = sumMonth;\r\n        }\r\n    }    \r\n\r\n    //@dev 포니가 교배할때 수수료를 지정\r\n    //@param val  수수료율\r\n    //@modifier COO\r\n    function setAutoBirthFee(uint256 val)\r\n    external\r\n    onlyCOO {\r\n        autoBirthFee = val;\r\n    }    \r\n\r\n    //@dev 교배가 가능한지 확인\r\n    //@param _ponyId 포니의 아이디\r\n    function isReadyToBreed(uint256 _ponyId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_ponyId > 0);\r\n        Pony storage pony = ponies[_ponyId];\r\n        return _isReadyToBreed(pony);\r\n    }    \r\n\r\n    //@dev 교배가 가능한지 확인하는 method\r\n    //@param _matron 암놈의 정보\r\n    //@param _matronId 모의 아이디\r\n    //@param _sire 숫놈의 정보\r\n    //@param _sireId 부의 아이디\r\n    function _isValidMatingPair(\r\n        Pony storage _matron,\r\n        uint256 _matronId,\r\n        Pony storage _sire,\r\n        uint256 _sireId\r\n    )\r\n    private\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //@dev 경매를 통해서 교배가 가능한지 확인하는 internal method\r\n    //@param _matronId 암놈의 아이디\r\n    //@param _sireId 숫놈의 아이디\r\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        Pony storage matron = ponies[_matronId];\r\n        Pony storage sire = ponies[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    //@dev 교배가 가능한지 확인하는 method\r\n    //@param _matronId 암놈의 아이디\r\n    //@param _sireId 숫놈의 아이디\r\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        Pony storage matron = ponies[_matronId];\r\n        Pony storage sire = ponies[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\r\n        _isSiringPermitted(_sireId, _matronId);\r\n    }\r\n\r\n    //@dev 교배하는 method\r\n    //@param _matronId 암놈의 아이디\r\n    //@param _sireId 숫놈의 아이디\r\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\r\n        Pony storage sire = ponies[_sireId];\r\n        Pony storage matron = ponies[_matronId];        \r\n\r\n        _triggerCooldown(sire);\r\n        _triggerCooldown(matron);\r\n        _triggerAgeSixMonth(sire);\r\n        _triggerAgeSixMonth(matron);               \r\n\r\n        emit Pregnant(ponyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock, sire.cooldownEndBlock);\r\n        _giveBirth(_matronId, _sireId);\r\n    }\r\n\r\n    //@dev 소유하고 있는 암놈과 숫놈을 이용하여 교배를 시키는 method\r\n    //@param _matronId 암놈의 아이디\r\n    //@param _sireId 숫놈의 아이디\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        require(msg.value >= autoBirthFee);\r\n\r\n        require(_owns(msg.sender, _matronId));\r\n\r\n        require(_isSiringPermitted(_sireId, _matronId));\r\n\r\n        Pony storage matron = ponies[_matronId];\r\n\r\n        require(_isReadyToBreed(matron));\r\n\r\n        Pony storage sire = ponies[_sireId];\r\n\r\n        require(_isReadyToBreed(sire));\r\n\r\n        require(_isValidMatingPair(\r\n                matron,\r\n                _matronId,\r\n                sire,\r\n                _sireId\r\n            ));\r\n\r\n        _breedWith(_matronId, _sireId);\r\n    }\r\n\r\n    //@dev 포니를 출생시키는 method\r\n    //@param _matronId 암놈의 아이디 (임신한)\r\n    function _giveBirth(uint256 _matronId, uint256 _sireId)\r\n    internal    \r\n    returns (uint256)\r\n    {\r\n        Pony storage matron = ponies[_matronId];\r\n        require(matron.birthTime != 0);\r\n        \r\n        Pony storage sire = ponies[_sireId];\r\n\r\n        bytes22 childGenes;\r\n        uint retiredAge;\r\n        (childGenes, retiredAge) = geneScience.createNewGen(matron.genes, sire.genes);\r\n\r\n        address owner = ponyIndexToOwner[_matronId];\r\n\r\n        uint[5] memory ability;\r\n        uint[5] memory maxAbility;\r\n\r\n        (ability[0], ability[1], ability[2], ability[3], ability[4]) = ponyAbility.getBasicAbility(childGenes);\r\n\r\n        maxAbility = _getMaxAbility(_matronId, _sireId, matron.derbyAttendCount, matron.rankingScore, sire.derbyAttendCount, sire.rankingScore, childGenes);\r\n\r\n        uint256 ponyId = _createPony(_matronId, _sireId, childGenes, retiredAge, owner, ability, maxAbility);                \r\n\r\n        return ponyId;\r\n    }\r\n\r\n\r\n    //@dev 소유하고 있는 암놈과 숫놈을 이용하여 교배를 시키는 method\r\n    //@param _matronId 암놈의 아이디\r\n    //@param _sireId 숫놈의 아이디\r\n    //@param _matronDerbyAttendCount 모의 경마 참여 횟수\r\n    //@param _matronRanking 모의 랭킹 점수\r\n    //@param _sireDerbyAttendCount 부의 경마 참여 횟수\r\n    //@param _sireRanking 부의 랭킹 점수\r\n    //@param childGenes 부모유전자로 생성된 자식유전자\r\n    //@return   maxAbility[0]: 최대 속도, maxAbility[1]: 최대 스태미나, maxAbility[2]: 최대 폭발력, -> maxAbility[3]: 최대 start, maxAbility[4]: 최대 기질\r\n    function _getMaxAbility(uint _matronId, uint _sireId, uint _matronDerbyAttendCount, uint _matronRanking, uint _sireDerbyAttendCount, uint _sireRanking, bytes22 _childGenes)\r\n    internal\r\n    view\r\n    returns (uint[5] )\r\n    {\r\n\r\n        uint[5] memory maxAbility;\r\n\r\n        DerbyPersonalResult memory matronGrandPrix = grandPrix[_matronId];\r\n        DerbyPersonalResult memory sireGrandPrix = grandPrix[_sireId];\r\n\r\n        DerbyPersonalResult memory matronLeague = league[_matronId];\r\n        DerbyPersonalResult memory sireLeague = league[_sireId];\r\n\r\n        uint matronWinningCount = matronGrandPrix.first+matronGrandPrix.second+matronGrandPrix.third+ matronLeague.first+matronLeague.second+matronLeague.third;\r\n        uint sireWinningCount = sireGrandPrix.first+sireGrandPrix.second+sireGrandPrix.third+sireLeague.first+sireLeague.second+sireLeague.third;\r\n\r\n        maxAbility[0] = ponyAbility.getMaxAbilitySpeed(_matronDerbyAttendCount, _matronRanking, matronWinningCount, _childGenes);\r\n        maxAbility[1] = ponyAbility.getMaxAbilityStamina(_sireDerbyAttendCount, _sireRanking, sireWinningCount, _childGenes);\r\n        maxAbility[2] = ponyAbility.getMaxAbilityStart(_sireDerbyAttendCount, _matronRanking, matronWinningCount, _childGenes);\r\n        maxAbility[3] = ponyAbility.getMaxAbilityBurst(_matronDerbyAttendCount, _sireRanking, sireWinningCount, _childGenes);\r\n        maxAbility[4] = ponyAbility.getMaxAbilityTemperament(_matronDerbyAttendCount, matronWinningCount,_sireDerbyAttendCount, sireWinningCount, _childGenes);\r\n\r\n        return maxAbility;\r\n    }\r\n}\r\n\r\ncontract PonyAuction is PonyBreeding {\r\n\r\n    //@dev SaleAuction의 주소를 지정\r\n    //@param _address SaleAuction의 주소\r\n    //modifier COO\r\n    function setSaleAuctionAddress(address _address) external onlyCOO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n        require(candidateContract.isSaleClockAuction());\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    //@dev SaleAuction의 주소를 지정\r\n    //@param _address SiringAuction의 주소\r\n    //modifier COO\r\n    function setSiringAuctionAddress(address _address) external onlyCOO {\r\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\r\n        require(candidateContract.isSiringClockAuction());\r\n        siringAuction = candidateContract;\r\n    }\r\n\r\n    //@dev  판매용 경매 생성\r\n    //@param _ponyId 포니의 아이디\r\n    //@param _startingPrice 경매의 시작 가격\r\n    //@param _endingPrice  경매의 종료 가격\r\n    //@param _duration 경매 기간\r\n    function createSaleAuction(\r\n        uint _ponyId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _ponyId));\r\n        require(isReadyToBreed(_ponyId));\r\n        _approve(_ponyId, saleAuction);\r\n        saleAuction.createAuction(\r\n            _ponyId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    //@dev 교배용 경매 생성\r\n    //@param _ponyId 포니의 아이디\r\n    //@param _startingPrice 경매의 시작 가격\r\n    //@param _endingPrice  경매의 종료 가격\r\n    //@param _duration 경매 기간\r\n    function createSiringAuction(\r\n        uint _ponyId,\r\n        uint _startingPrice,\r\n        uint _endingPrice,\r\n        uint _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _ponyId));\r\n        require(isReadyToBreed(_ponyId));\r\n        _approve(_ponyId, siringAuction);\r\n        siringAuction.createAuction(\r\n            _ponyId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n\r\n    //@dev 교배 경매에 참여\r\n    //@param _sireId 경매에 등록한 숫놈 Id\r\n    //@param _matronId 교배한 암놈의 Id\r\n    function bidOnSiringAuction(\r\n        uint _sireId,\r\n        uint _matronId\r\n    )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _matronId));\r\n        require(isReadyToBreed(_matronId));\r\n        require(_canBreedWithViaAuction(_matronId, _sireId));\r\n\r\n        uint currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= currentPrice + autoBirthFee);\r\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\r\n        _breedWith(uint32(_matronId), uint32(_sireId));\r\n    }\r\n\r\n    //@dev ether를 PonyCore로 출금\r\n    //modifier CLevel\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n        siringAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\ncontract PonyMinting is PonyAuction {\r\n\r\n\r\n    //@dev 프로모션용 포니의 최대 생성 개수\r\n    //uint256 public constant PROMO_CREATION_LIMIT = 10000;\r\n    //@dev GEN0용 포니의 최대 생성 개수\r\n    //uint256 public constant GEN0_CREATION_LIMIT = 40000;\r\n\r\n    //@dev GEN0포니의 최소 시작 가격\r\n    uint256 public GEN0_MINIMUM_STARTING_PRICE = 40 finney;\r\n\r\n    //@dev GEN0포니의 최대 시작 가격\r\n    uint256 public GEN0_MAXIMUM_STARTING_PRICE = 100 finney;\r\n\r\n    //@dev 다음Gen0판매시작가격 상승율 ( 10000 => 100 % )\r\n    uint256 public nextGen0PriceRate = 1000;\r\n\r\n    //@dev GEN0용 포니의 경매 기간\r\n    uint256 public gen0AuctionDuration = 30 days;\r\n\r\n    //@dev 생성된 프로모션용 포니 카운트 개수\r\n    uint256 public promoCreatedCount;\r\n    //@dev 생성된 GEN0용 포니 카운트 개수\r\n    uint256 public gen0CreatedCount;\r\n\r\n    //@dev 주어진 유전자 정보와 coolDownIndex로 포니를 생성하고, 지정된 주소로 자동할당\r\n    //@param _genes  유전자 정보\r\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\r\n    //@param _owner Pony를 소유할 사용자의 주소\r\n    //@param _maxSpeed 최대 능력치\r\n    //@param _maxStamina 최대 스테미너\r\n    //@param _maxStart 최대 스타트\r\n    //@param _maxBurst 최대 폭발력\r\n    //@param _maxTemperament 최대 기질\r\n    //@modifier COO\r\n    function createPromoPony(bytes22 _genes, uint256 _retiredAge, address _owner, uint _maxSpeed, uint _maxStamina, uint _maxStart, uint _maxBurst, uint _maxTemperament) external onlyCOO {\r\n        address ponyOwner = _owner;\r\n        if (ponyOwner == address(0)) {\r\n            ponyOwner = cooAddress;\r\n        }\r\n        //require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        promoCreatedCount++;\r\n\r\n        uint[5] memory ability;\r\n        uint[5] memory maxAbility;\r\n        maxAbility[0] =_maxSpeed;\r\n        maxAbility[1] =_maxStamina;\r\n        maxAbility[2] =_maxStart;\r\n        maxAbility[3] =_maxBurst;\r\n        maxAbility[4] =_maxTemperament;\r\n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\r\n        _createPony(0, 0, _genes, _retiredAge, ponyOwner,ability,maxAbility);\r\n    }\r\n\r\n    //@dev 주어진 유전자 정보와 cooldownIndex 이용하여 GEN0용 포니를 생성\r\n    //@param _genes  유전자 정보\r\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\r\n    //@param _maxSpeed 최대 능력치\r\n    //@param _maxStamina 최대 스테미너\r\n    //@param _maxStart 최대 스타트\r\n    //@param _maxBurst 최대 폭발력\r\n    //@param _maxTemperament 최대 기질\r\n    //@modifier COO\r\n    function createGen0Auction(bytes22 _genes) public onlyCOO {\r\n        //require(gen0CreatedCount < GEN0_CREATION_LIMIT);\r\n\r\n        uint[5] memory ability;\r\n        uint[5] memory maxAbility;\r\n        maxAbility[0] = gen0Stat.maxSpeed;\r\n        maxAbility[1] = gen0Stat.maxStamina;\r\n        maxAbility[2] = gen0Stat.maxStart;\r\n        maxAbility[3] = gen0Stat.maxBurst;\r\n        maxAbility[4] = gen0Stat.maxTemperament;\r\n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\r\n        \r\n        uint256 ponyId = _createPony(0, 0, _genes, gen0Stat.retiredAge, address(this),ability,maxAbility);\r\n        _approve(ponyId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            ponyId,\r\n            _computeNextGen0Price(),\r\n            10 finney,\r\n            gen0AuctionDuration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    //@dev 주어진 유전자 정보와 cooldownIndex 이용하여 GEN0용 포니를 생성\r\n    //@param _genes  유전자 정보\r\n    //@param _coolDownIndex  genes에 해당하는 cooldown Index 값\r\n    //@param _maxSpeed 최대 능력치\r\n    //@param _maxStamina 최대 스테미너\r\n    //@param _maxStart 최대 스타트\r\n    //@param _maxBurst 최대 폭발력\r\n    //@param _maxTemperament 최대 기질\r\n    //@param _startPrice 경매 시작가격\r\n    //@modifier COO\r\n    function createCustomGen0Auction(bytes22 _genes, uint256 _retiredAge, uint _maxSpeed, uint _maxStamina, uint _maxStart, uint _maxBurst, uint _maxTemperament, uint _startPrice, uint _endPrice) external onlyCOO {\r\n        require(10 finney < _startPrice);\r\n        require(10 finney < _endPrice);\r\n\r\n        uint[5] memory ability;\r\n        uint[5] memory maxAbility;\r\n        maxAbility[0]=_maxSpeed;\r\n        maxAbility[1]=_maxStamina;\r\n        maxAbility[2]=_maxStart;\r\n        maxAbility[3]=_maxBurst;\r\n        maxAbility[4]=_maxTemperament;\r\n        (ability[0],ability[1],ability[2],ability[3],ability[4]) = ponyAbility.getBasicAbility(_genes);\r\n        \r\n        uint256 ponyId = _createPony(0, 0, _genes, _retiredAge, address(this),ability,maxAbility);\r\n        _approve(ponyId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            ponyId,\r\n            _startPrice,\r\n            _endPrice,\r\n            gen0AuctionDuration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    /*\r\n    function createGen0Auctions(bytes22[] _genes) external onlyCOO {\r\n        for ( uint i = 0; i < _genes.length; i++) {\r\n            createGen0Auction(_genes[i]);\r\n        }\r\n    }\r\n    */\r\n\r\n    //@dev 새로운 Gen0의 가격 산정하는 internal Method\r\n    //(최근에 판매된 gen0 5개의 평균가격)*1.5+0.0.1\r\n    function _computeNextGen0Price()\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\r\n        require(avePrice == uint256(uint128(avePrice)));\r\n\r\n        uint256 nextPrice = avePrice + (avePrice * nextGen0PriceRate / 10000);\r\n\r\n        if (nextPrice < GEN0_MINIMUM_STARTING_PRICE) {\r\n            nextPrice = GEN0_MINIMUM_STARTING_PRICE;\r\n        }else if (nextPrice > GEN0_MAXIMUM_STARTING_PRICE) {\r\n            nextPrice = GEN0_MAXIMUM_STARTING_PRICE;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n    \r\n    function setAuctionDuration(uint256 _duration)\r\n    external\r\n    onlyCOO\r\n    {\r\n        gen0AuctionDuration=_duration * 1 days;\r\n    }\r\n\r\n    //Gen0 Pony Max능력치 Setting\r\n    function setGen0Stat(uint256[6] _gen0Stat) \r\n    public \r\n    onlyCOO\r\n    {\r\n        gen0Stat = Gen0Stat({\r\n            retiredAge : uint8(_gen0Stat[0]),\r\n            maxSpeed : uint8(_gen0Stat[1]),\r\n            maxStamina : uint8(_gen0Stat[2]),\r\n            maxStart : uint8(_gen0Stat[3]),\r\n            maxBurst : uint8(_gen0Stat[4]),\r\n            maxTemperament : uint8(_gen0Stat[5])\r\n        });\r\n    }\r\n\r\n    //@dev 최소시작판매가격을 변경\r\n    //@param _minPrice 최소시작판매가격\r\n    function setMinStartingPrice(uint256 _minPrice)\r\n    public\r\n    onlyCOO\r\n    {\r\n        GEN0_MINIMUM_STARTING_PRICE = _minPrice;\r\n    }\r\n\r\n    //@dev 최대시작판매가격을 변경\r\n    //@param _maxPrice 최대시작판매가격\r\n    function setMaxStartingPrice(uint256 _maxPrice)\r\n    public\r\n    onlyCOO\r\n    {\r\n        GEN0_MAXIMUM_STARTING_PRICE = _maxPrice;\r\n    }    \r\n\r\n    //@dev setNextGen0Price 상승율을 변경\r\n    //@param _increaseRate 가격상승율\r\n    function setNextGen0PriceRate(uint256 _increaseRate)\r\n    public\r\n    onlyCOO\r\n    {\r\n        require(_increaseRate <= 10000);\r\n        nextGen0PriceRate = _increaseRate;\r\n    }\r\n    \r\n}\r\n\r\ncontract PonyDerby is PonyMinting {\r\n\r\n    //@dev 포니 아이디에 대한 경마 참석이 가능한지 확인하는 external Method\r\n    //@param _pony 포니 정보\r\n    function isAttendDerby(uint256 _id)\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        Pony memory _pony = ponies[_id];\r\n        return (_pony.cooldownEndBlock <= uint64(block.number)) && (_pony.age < _pony.retiredAge);\r\n    }\r\n\r\n\r\n    //@dev 은퇴한 포니 인가를 조회하는 메소드\r\n    //@param _pony 포니 정보\r\n    //@returns 은퇴 : true, 은퇴하지 않은 경우 false\r\n    function isPonyRetired(uint256 _id)\r\n    external\r\n    view\r\n    returns (\r\n        bool isRetired\r\n\r\n    ) {\r\n        Pony storage pony = ponies[_id];\r\n        if (pony.age >= pony.retiredAge) {\r\n            isRetired = true;\r\n        } else {\r\n            isRetired = false;\r\n        }\r\n    }\r\n\r\n    //@dev 배열로 경기 결과를 설정하는 기능\r\n    //modifier Derby\r\n    //@param []_id  경마에 참가한 포니 아이디들에 대한 정보를 가지고 있는 배열\r\n    //@param []_derbyType  경마 타입 (1:일반 대회, 2:그랑프리(이벤트)\r\n    //@param []_lucky  lucky여부를  가지고 있는 배열  lucky=1을 전달\r\n    //@param _rewardAbility 보상 능력치 0 :speed, 1:stamina, 2: burst, 3: speed, 4: temperament\r\n\r\n    function setDerbyResults(uint[] _id, uint8 _derbyType, uint8[] _ranking, uint8[] _score, uint8[] _lucky, uint8[] _rewardAbility)\r\n    public\r\n    onlyDerbyAdress\r\n    {\r\n        require(_id.length == _score.length);\r\n        require(_id.length <= 100);\r\n        require(_rewardAbility.length%5==0 && _rewardAbility.length>=5);\r\n        \r\n        uint8[] memory rewardAbility = new uint8[](5);\r\n        for (uint i = 0; i < _id.length; i++) {\r\n            rewardAbility[0] = _rewardAbility[i*5];\r\n            rewardAbility[1] = _rewardAbility[i*5+1];\r\n            rewardAbility[2] = _rewardAbility[i*5+2];\r\n            rewardAbility[3] = _rewardAbility[i*5+3];\r\n            rewardAbility[4] = _rewardAbility[i*5+4];            \r\n            setDerbyResult(_id[i], _derbyType, _ranking[i], _score[i], _lucky[i], rewardAbility);\r\n        }\r\n\r\n    }\r\n\r\n    //@dev 경기 결과를 설정하는 기능\r\n    //modifier Derby\r\n    //@param id  경마에 참가한 포니 아이디들에 대한 정보를 가지고 있는 변수\r\n    //@param derbyType  경마 타입 (1:일반 대회, 2:그랑프리(이벤트)\r\n    //@param ranking  랭킹정보들을 가지고 있는 변수\r\n    //@param score  랭킹 점수를 가지고 있는 변수\r\n    //@param rewardAbility 보상 능력치 0 :speed, 1:stamina, 2: burst, 3: speed, 4: temperament\r\n    //@param lucky  lucky여부를  가지고 있는 변수  lucky=1을 전달\r\n\r\n    function setDerbyResult(uint _id, uint8 _derbyType, uint8 _ranking, uint8 _score, uint8 _lucky,  uint8[] _rewardAbility)\r\n    public\r\n    onlyDerbyAdress\r\n    {\r\n        require(_rewardAbility.length ==5);\r\n        \r\n        Pony storage pony = ponies[_id];\r\n        _triggerAgeOneMonth(pony);\r\n\r\n        uint32 scoreSum = pony.rankingScore + uint32(_score);\r\n        pony.derbyAttendCount = pony.derbyAttendCount + 1;\r\n\r\n        if (scoreSum > 0) {\r\n            pony.rankingScore = scoreSum;\r\n        } else {\r\n            pony.rankingScore = 0;\r\n        }\r\n        if (_derbyType == 1) {\r\n            _setLeagueDerbyResult(_id, _ranking, _lucky);\r\n        } else if (_derbyType == 2) {\r\n            _setGrandPrixDerbyResult(_id, _ranking, _lucky);\r\n        }\r\n\r\n        Ability storage _ability = ability[_id];\r\n\r\n        uint8 speed;\r\n        uint8 stamina;\r\n        uint8 start;\r\n        uint8 burst;\r\n        uint8 temperament;\r\n        \r\n        speed= _ability.speed+_rewardAbility[0];    \r\n        if (speed > _ability.maxSpeed) {\r\n            _ability.speed = _ability.maxSpeed;\r\n        } else {\r\n            _ability.speed = speed;\r\n        }\r\n\r\n        stamina= _ability.stamina+_rewardAbility[1];\r\n        if (stamina > _ability.maxStamina) {\r\n            _ability.stamina = _ability.maxStamina;\r\n        } else {\r\n            _ability.stamina = stamina;\r\n        }\r\n\r\n        start= _ability.start+_rewardAbility[2];\r\n        if (start > _ability.maxStart) {\r\n            _ability.start = _ability.maxStart;\r\n        } else {\r\n            _ability.start = start;\r\n        }\r\n\r\n        burst= _ability.burst+_rewardAbility[3];\r\n        if (burst > _ability.maxBurst) {\r\n            _ability.burst = _ability.maxBurst;\r\n        } else {\r\n            _ability.burst = burst;\r\n        }\r\n        \r\n        temperament= _ability.temperament+_rewardAbility[4];\r\n        if (temperament > _ability.maxTemperament) {\r\n            _ability.temperament = _ability.maxTemperament;\r\n        } else {\r\n            _ability.temperament =temperament;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //@dev 포니별 일반경기 리그 결과를 기록\r\n    //@param _id 포니 번호\r\n    //@param _derbyNum  경마 번호\r\n    //@param _ranking  경기 순위\r\n    //@param _lucky  행운의 번호 여부\r\n    function _setLeagueDerbyResult(uint _id, uint _ranking, uint _lucky)\r\n    internal\r\n    {\r\n        DerbyPersonalResult storage _league = league[_id];\r\n        if (_ranking == 1) {\r\n            _league.first = _league.first + 1;\r\n        } else if (_ranking == 2) {\r\n            _league.second = _league.second + 1;\r\n        } else if (_ranking == 3) {\r\n            _league.third = _league.third + 1;\r\n        } \r\n        \r\n        if (_lucky == 1) {\r\n            _league.lucky = _league.lucky + 1;\r\n        }\r\n    }\r\n\r\n    //@dev 포니별 그랑프리(이벤트)경마 리그 결과를 기록\r\n    //@param _id 포니 번호\r\n    //@param _derbyNum  경마 번호\r\n    //@param _ranking  경기 순위\r\n    //@param _lucky  행운의 번호 여부\r\n    function _setGrandPrixDerbyResult(uint _id, uint _ranking, uint _lucky)\r\n    internal\r\n    {\r\n        DerbyPersonalResult storage _grandPrix = grandPrix[_id];\r\n        if (_ranking == 1) {\r\n            _grandPrix.first = _grandPrix.first + 1;\r\n        } else if (_ranking == 2) {\r\n            _grandPrix.second = _grandPrix.second + 1;\r\n        } else if (_ranking == 3) {\r\n            _grandPrix.third = _grandPrix.third + 1;\r\n        } \r\n        if (_lucky == 1) {\r\n            _grandPrix.lucky = _grandPrix.lucky + 1;\r\n        }\r\n\r\n    }\r\n    //@dev 포니별 경마 기록을 리턴\r\n    //@param id 포니 아이디\r\n    //@return grandPrixCount 그랑프리 우승 카운트 (0: 1, 1:2, 2:3, 3: lucky)\r\n    //@return leagueCount  리그 우승 카운트 (0: 1, 1:2, 2:3,  3: lucky)\r\n    function getDerbyWinningCount(uint _id)\r\n    public\r\n    view\r\n    returns (\r\n        uint grandPrix1st,\r\n        uint grandPrix2st,\r\n        uint grandPrix3st,\r\n        uint grandLucky,\r\n        uint league1st,\r\n        uint league2st,\r\n        uint league3st,\r\n        uint leagueLucky\r\n    ){\r\n        DerbyPersonalResult memory _grandPrix = grandPrix[_id];\r\n        grandPrix1st = uint256(_grandPrix.first);\r\n        grandPrix2st = uint256(_grandPrix.second);\r\n        grandPrix3st= uint256(_grandPrix.third);\r\n        grandLucky = uint256(_grandPrix.lucky);\r\n\r\n        DerbyPersonalResult memory _league = league[_id];\r\n        league1st = uint256(_league.first);\r\n        league2st= uint256(_league.second);\r\n        league3st = uint256(_league.third);\r\n        leagueLucky = uint256(_league.lucky);\r\n    }\r\n\r\n    //@dev 포니별 능력치 정보를 가져옴\r\n    //@param id 포니 아이디\r\n    //@return speed 속도\r\n    //@return stamina  스태미나\r\n    //@return start  스타트\r\n    //@return burst 폭발력\r\n    //@return temperament  기질\r\n    //@return maxSpeed 쵀대 스피드\r\n    //@return maxStamina  최대 스태미나\r\n    //@return maxBurst  최대 폭발력\r\n    //@return maxStart  최대 스타트\r\n    //@return maxTemperament  최대 기질\r\n\r\n    function getAbility(uint _id)\r\n    public\r\n    view\r\n    returns (\r\n        uint8 speed,\r\n        uint8 stamina,\r\n        uint8 start,\r\n        uint8 burst,\r\n        uint8 temperament,\r\n        uint8 maxSpeed,\r\n        uint8 maxStamina,\r\n        uint8 maxBurst,\r\n        uint8 maxStart,\r\n        uint8 maxTemperament\r\n\r\n    ){\r\n        Ability memory _ability = ability[_id];\r\n        speed = _ability.speed;\r\n        stamina = _ability.stamina;\r\n        start = _ability.start;\r\n        burst = _ability.burst;\r\n        temperament = _ability.temperament;\r\n        maxSpeed = _ability.maxSpeed;\r\n        maxStamina = _ability.maxStamina;\r\n        maxBurst = _ability.maxBurst;\r\n        maxStart = _ability.maxStart;\r\n        maxTemperament = _ability.maxTemperament;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract PonyCore is PonyDerby {\r\n\r\n    address public newContractAddress;\r\n\r\n    //@dev PonyCore의 생성자 (최초 한번만 실행됨)\r\n    constructor() public payable {\r\n        paused = true;\r\n        cfoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    //@param gensis gensis에 대한 유전자 코드\r\n    function genesisPonyInit(bytes22 _gensis, uint[5] _ability, uint[5] _maxAbility, uint[6] _gen0Stat) external onlyCOO whenPaused {\r\n        require(ponies.length==0);\r\n        _createPony(0, 0, _gensis, 100, address(0),_ability,_maxAbility);\r\n        setGen0Stat(_gen0Stat);\r\n    }\r\n\r\n    function setNewAddress(address _v2Address)\r\n    external\r\n    onlyCOO whenPaused\r\n    {\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        /*\r\n        require(\r\n            msg.sender == address(saleAuction) ||\r\n            msg.sender == address(siringAuction)\r\n        );\r\n        */\r\n    }\r\n\r\n    //@ 포니의 아이디에 해당하는 포니의 정보를 가져옴\r\n    //@param _id 포니의 아이디\r\n    function getPony(uint256 _id)\r\n    external\r\n    view\r\n    returns (        \r\n        bool isReady,\r\n        uint256 cooldownEndBlock,        \r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        bytes22 genes,\r\n        uint256 age,\r\n        uint256 month,\r\n        uint256 retiredAge,\r\n        uint256 rankingScore,\r\n        uint256 derbyAttendCount\r\n\r\n    ) {\r\n        Pony storage pony = ponies[_id];        \r\n        isReady = (pony.cooldownEndBlock <= block.number);\r\n        cooldownEndBlock = pony.cooldownEndBlock;        \r\n        birthTime = uint256(pony.birthTime);\r\n        matronId = uint256(pony.matronId);\r\n        sireId = uint256(pony.sireId);\r\n        genes =  pony.genes;\r\n        age = uint256(pony.age);\r\n        month = uint256(pony.month);\r\n        retiredAge = uint256(pony.retiredAge);\r\n        rankingScore = uint256(pony.rankingScore);\r\n        derbyAttendCount = uint256(pony.derbyAttendCount);\r\n\r\n    }\r\n\r\n    //@dev 컨트렉트를 작동시키는 method\r\n    //(SaleAuction, SiringAuction, GeneScience 지정되어 있어야하며, newContractAddress가 지정 되어 있지 않아야 함)\r\n    //modifier COO\r\n    function unPause()\r\n    public\r\n    onlyCOO\r\n    whenPaused\r\n    {\r\n        require(saleAuction != address(0));\r\n        require(siringAuction != address(0));\r\n        require(geneScience != address(0));\r\n        require(ponyAbility != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        super.unPause();\r\n    }\r\n\r\n    //@dev 잔액을 인출하는 Method\r\n    //modifier CFO\r\n    function withdrawBalance(uint256 _value)\r\n    external\r\n    onlyCLevel\r\n    {\r\n        uint256 balance = this.balance;\r\n        require(balance >= _value);        \r\n        cfoAddress.transfer(_value);\r\n    }\r\n\r\n    function buyCarrot(uint256 carrotCount) // 검증에 필요한값을 파라미터로 받아서 이벤트를 발생시키자\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        emit carrotPurchased(msg.sender, msg.value, carrotCount);\r\n    }\r\n\r\n    event RewardSendSuccessful(address from, address to, uint value);\r\n\r\n    function sendRankingReward(address[] _recipients, uint256[] _rewards)\r\n    external\r\n    payable\r\n    onlyRewardAdress\r\n    {\r\n        for(uint i = 0; i < _recipients.length; i++){\r\n            _recipients[i].transfer(_rewards[i]);\r\n            emit RewardSendSuccessful(this, _recipients[i], _rewards[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ClockAuctionBase {\r\n\r\n    //@dev 옥션이 생성되었을 때 발생하는 이벤트\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    //@dev 옥션이 성공하였을 때 발생하는 이벤트\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    //@dev 옥션이 취소하였을 때 발생하는 이벤트\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    //@dev 옥션 정보를 가지고 있는 구조체\r\n    struct Auction {\r\n        //seller의 주소\r\n        address seller;\r\n        // 경매 시작 가격\r\n        uint128 startingPrice;\r\n        // 경매 종료 가격\r\n        uint128 endingPrice;\r\n        // 경매 기간\r\n        uint64 duration;\r\n        // 경매 시작 시점\r\n        uint64 startedAt;\r\n    }\r\n\r\n    //@dev ERC721 PonyCore의 주소\r\n    ERC721 public nonFungibleContract;\r\n\r\n    //@dev 수수료율\r\n    uint256 public ownerCut;\r\n\r\n    //@dev Pony Id에 해당하는 옥션 정보를 가지고 있는 테이블\r\n    mapping(uint256 => Auction) tokenIdToAuction;\r\n\r\n    //@dev 요청한 주소가 토큰 아이디(포니)를 소유하고 있는지 확인하기 위한 internal Method\r\n    //@param _claimant  요청한 주소\r\n    //@param _tokenId  포니 아이디\r\n    function _owns(address _claimant, uint256 _tokenId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n\r\n    //@dev PonyCore Contract에 id에 해당하는 pony를 escrow 시키는 internal method\r\n    //@param _owner  소유자 주소\r\n    //@param _tokenId  포니 아이디\r\n    function _escrow(address _owner, uint256 _tokenId)\r\n    internal\r\n    {\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    //@dev 입력한 주소로 pony의 소유권을 이전시키는 internal method\r\n    //@param _receiver  포니를 소요할 주소\r\n    //@param _tokenId  포니 아이디\r\n    function _transfer(address _receiver, uint256 _tokenId)\r\n    internal\r\n    {\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    //@dev 경매에 등록시키는 internal method\r\n    //@param _tokenId  포니 아이디\r\n    //@param _auction  옥션 정보\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    //@dev 경매를 취소시키는 internal method\r\n    //@param _tokenId  포니 아이디\r\n    //@param _seller  판매자의 주소\r\n    function _cancelAuction(uint256 _tokenId, address _seller)\r\n    internal\r\n    {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    //@dev 경매를 참여시키는 internal method\r\n    //@param _tokenId  포니 아이디\r\n    //@param _bidAmount 경매 가격 (최종)\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        require(_isOnAuction(auction));\r\n\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        address seller = auction.seller;\r\n\r\n        _removeAuction(_tokenId);\r\n\r\n        if (price > 0) {\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        uint256 bidExcess = _bidAmount - price;\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    //@dev 경매에서 제거 시키는 internal method\r\n    //@param _tokenId  포니 아이디\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    //@dev 경매가 진행중인지 확인하는 internal method\r\n    //@param _auction 경매 정보\r\n    function _isOnAuction(Auction storage _auction)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    //@dev 현재 경매 가격을 리턴하는 internal method\r\n    //@param _auction 경매 정보\r\n    function _currentPrice(Auction storage _auction)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    //@dev 현재 경매 가격을 계산하는 internal method\r\n    //@param _startingPrice 경매 시작 가격\r\n    //@param _endingPrice 경매 종료 가격\r\n    //@param _duration 경매 기간\r\n    //@param _secondsPassed  경과 시간\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n    //@dev 현재 가격을 기준으로 수수료를 적용하여 가격을 리턴하는 internal method\r\n    //@param _price 현재 가격\r\n    function _computeCut(uint256 _price)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    //@dev ERC721 Interface를 준수하고 있는지 체크하기 위해서 필요한 변수\r\n    bytes4 constant InterfaceSignature_ERC721 =bytes4(0x9a20483d);\r\n\r\n    //@dev ClockAuction의 생성자\r\n    //@param _nftAddr PonyCore의 주소\r\n    //@param _cut 수수료 율\r\n    constructor(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    //@dev contract에서 잔고를 인출하기 위해서 사용\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        nftAddress.send(this.balance);\r\n    }\r\n\r\n    //@dev  판매용 경매 생성\r\n    //@param _tokenId 포니의 아이디\r\n    //@param _startingPrice 경매의 시작 가격\r\n    //@param _endingPrice  경매의 종료 가격\r\n    //@param _duration 경매 기간\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    //@dev 경매에 참여\r\n    //@param _tokenId 포니의 아이디\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    //@dev 경매를 취소\r\n    //@param _tokenId 포니의 아이디\r\n    function cancelAuction(uint256 _tokenId)\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    //@dev 컨트랙트가 멈출 경우 포니아이디에 대해 경매를 취소하는 기능\r\n    //@param _tokenId 포니의 아이디\r\n    //modifier Owner\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n    whenPaused\r\n    onlyOwner\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    //@dev 옥션의 정보를 가져옴\r\n    //@param _tokenId 포니의 아이디\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n        auction.seller,\r\n        auction.startingPrice,\r\n        auction.endingPrice,\r\n        auction.duration,\r\n        auction.startedAt\r\n        );\r\n    }\r\n\r\n    //@dev 현재의 가격을 가져옴\r\n    //@param _tokenId 포니의 아이디\r\n    function getCurrentPrice(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n}\r\n\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    //@dev SaleClockAuction인지 확인해주기 위해서 사용하는 값\r\n    bool public isSaleClockAuction = true;\r\n\r\n    //@dev GEN0의 판매 개수\r\n    uint256 public gen0SaleCount;\r\n    //@dev GEN0의 최종 판매 갯수\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    //@dev SaleClockAuction 생성자\r\n    //@param _nftAddr PonyCore의 주소\r\n    //@param _cut 수수료 율\r\n    constructor(address _nftAddr, uint256 _cut) public\r\n    ClockAuction(_nftAddr, _cut) {}\r\n\r\n    //@dev  판매용 경매 생성\r\n    //@param _tokenId 포니의 아이디\r\n    //@param _startingPrice 경매의 시작 가격\r\n    //@param _endingPrice  경매의 종료 가격\r\n    //@param _duration 경매 기간\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    //@dev 경매에 참여\r\n    //@param _tokenId 포니의 아이디\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    {\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        uint256 price = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        if (seller == address(nonFungibleContract)) {\r\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\r\n            gen0SaleCount++;\r\n        }\r\n    }\r\n\r\n    //@dev 포니 가격을 리턴 (최근 판매된 다섯개의 평균 가격)\r\n    function averageGen0SalePrice()\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            sum += lastGen0SalePrices[i];\r\n        }\r\n        return sum / 5;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract SiringClockAuction is ClockAuction {\r\n\r\n    //@dev SiringClockAuction인지 확인해주기 위해서 사용하는 값\r\n    bool public isSiringClockAuction = true;\r\n\r\n    //@dev SiringClockAuction의 생성자\r\n    //@param _nftAddr PonyCore의 주소\r\n    //@param _cut 수수료 율\r\n    constructor(address _nftAddr, uint256 _cut) public\r\n    ClockAuction(_nftAddr, _cut) {}\r\n\r\n    //@dev 경매를 생성\r\n    //@param _tokenId 포니의 아이디\r\n    //@param _startingPrice 경매의 시작 가격\r\n    //@param _endingPrice  경매의 종료 가격\r\n    //@param _duration 경매 기간\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external\r\n    {\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    //@dev 경매에 참여\r\n    //@param _tokenId 포니의 아이디\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        _bid(_tokenId, msg.value);\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n}\r\n\r\ncontract GeneScienceInterface {\r\n    function isGeneScience() public pure returns (bool);\r\n    function createNewGen(bytes22 genes1, bytes22 genes22) external returns (bytes22, uint);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDerbyWinningCount\",\"outputs\":[{\"name\":\"grandPrix1st\",\"type\":\"uint256\"},{\"name\":\"grandPrix2st\",\"type\":\"uint256\"},{\"name\":\"grandPrix3st\",\"type\":\"uint256\"},{\"name\":\"grandLucky\",\"type\":\"uint256\"},{\"name\":\"league1st\",\"type\":\"uint256\"},{\"name\":\"league2st\",\"type\":\"uint256\"},{\"name\":\"league3st\",\"type\":\"uint256\"},{\"name\":\"leagueLucky\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDerby\",\"type\":\"address\"}],\"name\":\"setDerbyAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_increaseRate\",\"type\":\"uint256\"}],\"name\":\"setNextGen0PriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_MINIMUM_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPony\",\"outputs\":[{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"bytes22\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"retiredAge\",\"type\":\"uint256\"},{\"name\":\"rankingScore\",\"type\":\"uint256\"},{\"name\":\"derbyAttendCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPonyAbilityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReward\",\"type\":\"address\"}],\"name\":\"setRewardAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256[]\"},{\"name\":\"_derbyType\",\"type\":\"uint8\"},{\"name\":\"_ranking\",\"type\":\"uint8[]\"},{\"name\":\"_score\",\"type\":\"uint8[]\"},{\"name\":\"_lucky\",\"type\":\"uint8[]\"},{\"name\":\"_rewardAbility\",\"type\":\"uint8[]\"}],\"name\":\"setDerbyResults\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"},{\"name\":\"_retiredAge\",\"type\":\"uint256\"},{\"name\":\"_maxSpeed\",\"type\":\"uint256\"},{\"name\":\"_maxStamina\",\"type\":\"uint256\"},{\"name\":\"_maxStart\",\"type\":\"uint256\"},{\"name\":\"_maxBurst\",\"type\":\"uint256\"},{\"name\":\"_maxTemperament\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"createCustomGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"carrotCount\",\"type\":\"uint256\"}],\"name\":\"buyCarrot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_derbyType\",\"type\":\"uint8\"},{\"name\":\"_ranking\",\"type\":\"uint8\"},{\"name\":\"_score\",\"type\":\"uint8\"},{\"name\":\"_lucky\",\"type\":\"uint8\"},{\"name\":\"_rewardAbility\",\"type\":\"uint8[]\"}],\"name\":\"setDerbyResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"setMinStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"},{\"name\":\"_retiredAge\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_maxSpeed\",\"type\":\"uint256\"},{\"name\":\"_maxStamina\",\"type\":\"uint256\"},{\"name\":\"_maxStart\",\"type\":\"uint256\"},{\"name\":\"_maxBurst\",\"type\":\"uint256\"},{\"name\":\"_maxTemperament\",\"type\":\"uint256\"}],\"name\":\"createPromoPony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"sendRankingReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPonyRetired\",\"outputs\":[{\"name\":\"isRetired\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isAttendDerby\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ponyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"bytes22\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"derbyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_MAXIMUM_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0Stat\",\"outputs\":[{\"name\":\"retiredAge\",\"type\":\"uint8\"},{\"name\":\"maxSpeed\",\"type\":\"uint8\"},{\"name\":\"maxStamina\",\"type\":\"uint8\"},{\"name\":\"maxStart\",\"type\":\"uint8\"},{\"name\":\"maxBurst\",\"type\":\"uint8\"},{\"name\":\"maxTemperament\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextGen0PriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gensis\",\"type\":\"bytes22\"},{\"name\":\"_ability\",\"type\":\"uint256[5]\"},{\"name\":\"_maxAbility\",\"type\":\"uint256[5]\"},{\"name\":\"_gen0Stat\",\"type\":\"uint256[6]\"}],\"name\":\"genesisPonyInit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ponyId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAbility\",\"outputs\":[{\"name\":\"speed\",\"type\":\"uint8\"},{\"name\":\"stamina\",\"type\":\"uint8\"},{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"burst\",\"type\":\"uint8\"},{\"name\":\"temperament\",\"type\":\"uint8\"},{\"name\":\"maxSpeed\",\"type\":\"uint8\"},{\"name\":\"maxStamina\",\"type\":\"uint8\"},{\"name\":\"maxBurst\",\"type\":\"uint8\"},{\"name\":\"maxStart\",\"type\":\"uint8\"},{\"name\":\"maxTemperament\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gen0Stat\",\"type\":\"uint256[6]\"}],\"name\":\"setGen0Stat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ponyAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0AuctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardSendSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronCooldownEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireCooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ponyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"bytes22\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receivedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"carrotCount\",\"type\":\"uint256\"}],\"name\":\"carrotPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"PonyCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d0f8cdd50cac81c3924053d8fe7ac571f8a55fdf29f134c5cd8f87edfbba24d"}]}