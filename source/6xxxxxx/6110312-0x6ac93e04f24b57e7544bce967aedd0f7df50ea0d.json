{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Win20ETH {\r\n\r\n\r\n    struct Comissions{\r\n        uint total;\r\n        uint referal;\r\n        uint nextJackpot;\r\n    }\r\n\r\n    uint adminComission;\r\n\r\n    Comissions comission;\r\n\r\n    uint ticketPrice;\r\n    uint blockOffset;\r\n    uint jackpot;\r\n\r\n    address owner;\r\n    mapping(address => uint) referalProfits;\r\n    address[] referals;\r\n\r\n    mapping(uint => Game) games;\r\n\r\n\tevent PurchaseError(address oldOwner, uint amount);\r\n\r\n\tstruct Game{\r\n\t    uint blockId;\r\n\t    address[] gamers;\r\n\t    mapping(address=>bool) pays;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets owner and default lottery params\r\n\t */\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tupdateParams(0.005 ether, 1, 10, 5, 1);\r\n\t\tadminComission =0;\r\n\r\n\t}\r\n\tfunction withdrawAdmin() public onlyOwner{\r\n\t    require(adminComission>0);\r\n\t    uint t = adminComission;\r\n\t    adminComission = 0;\r\n\t    owner.transfer(t);\r\n\r\n\r\n\t}\r\n\tfunction updateParams(\r\n\t\tuint _ticketPrice,\r\n\t\tuint _blockOffset,\r\n\t\tuint _total,\r\n\t\tuint _refPercent,\r\n\t\tuint _nextJackpotPercent\r\n\r\n\t) public onlyOwner {\r\n\t\tticketPrice = _ticketPrice;\r\n\t\tcomission.total = _total;\r\n\t\tcomission.referal = _refPercent;\r\n\t\tcomission.nextJackpot =  _nextJackpotPercent;\r\n\t\tblockOffset = _blockOffset;\r\n\r\n\t}\r\n\r\n\r\n\r\n    function buyTicketWithRef(address _ref) public payable{\r\n       require(msg.value == ticketPrice);\r\n       bool found = false;\r\n       for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\r\n        \t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\r\n        \t        found = true;\r\n        \t        break;\r\n        \t      }\r\n        \t    }\r\n        \t    require(found == false);\r\n\t    jackpot+=msg.value;\r\n\t    games[block.number+blockOffset].gamers.push(msg.sender);\r\n\t    games[block.number+blockOffset].pays[msg.sender] = false;\r\n\t    if( _ref != address(0) && comission.referal>0){\r\n\t        referalProfits[_ref]+= msg.value*comission.referal/100;\r\n\t        bool _found = false;\r\n\t        for(i = 0;i<referals.length;i++){\r\n\t            if( referals[i] == _ref){\r\n\t                _found=true;\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        if(!_found){\r\n\t            referals.push(_ref);\r\n\t        }\r\n\t    }\r\n    }\r\n\tfunction buyTicket() public payable {\r\n\r\n\t    require(msg.value == ticketPrice);\r\n\t    bool found = false;\r\n\t    for(uint i=0; i< games[block.number+blockOffset].gamers.length;i++){\r\n\t      if( msg.sender == games[block.number+blockOffset].gamers[i]){\r\n\t        found = true;\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t    require(found == false);\r\n\t    jackpot+=msg.value;\r\n\t    games[block.number+blockOffset].gamers.push(msg.sender);\r\n\t    games[block.number+blockOffset].pays[msg.sender] = false;\r\n\r\n\r\n\t}\r\n\r\n\r\n\tfunction getLotteryAtIndex(uint _index) public view returns(\r\n\t\taddress[] _gamers,\r\n\t\tuint _jackpot\r\n\t) {\r\n        _gamers = games[_index].gamers;\r\n        _jackpot = jackpot;\r\n\t}\r\n    function _checkWin( uint _blockIndex, address candidate) internal view returns(uint) {\r\n            uint32 blockHash = uint32(blockhash(_blockIndex));\r\n            uint32 hit = blockHash ^ uint32(candidate);\r\n            bool hit1 = (hit & 0xF == 0)?true:false;\r\n            bool hit2 = (hit1 && ((hit & 0xF0)==0))?true:false;\r\n            bool hit3 = (hit2 && ((hit & 0xF00)==0))?true:false;\r\n            bool _found  = false;\r\n\r\n            for(uint i=0;i<games[_blockIndex].gamers.length;i++){\r\n                if(games[_blockIndex].gamers[i] == candidate) {\r\n                    _found = true;\r\n                }\r\n            }\r\n            if(!_found) return 0;\r\n            uint amount = 0;\r\n            if ( hit1 ) amount = 2*ticketPrice;\r\n            if ( hit2 ) amount = 4*ticketPrice;\r\n            if ( hit3 ) amount = jackpot;\r\n            return amount;\r\n\r\n\r\n    }\r\n    function checkWin( uint _blockIndex, address candidate) public view returns(\r\n        uint amount\r\n        ){\r\n            amount = _checkWin(_blockIndex, candidate);\r\n        }\r\n\r\n\r\n\r\n\r\n\tfunction withdrawForWinner(uint _blockIndex) public {\r\n\t    require((block.number - 100) < _blockIndex );\r\n\t\trequire(games[_blockIndex].gamers.length > 0);\r\n\t\trequire(games[_blockIndex].pays[msg.sender]==false);\r\n\r\n\t\tuint amount =  _checkWin(_blockIndex, msg.sender) ;\r\n\t\trequire(amount>0);\r\n\r\n\t\taddress winner = msg.sender;\r\n\t\tif( amount > jackpot) amount=jackpot;\r\n\t\tif( amount == jackpot) amount = amount*99/100;\r\n\t\t\r\n\t\tgames[_blockIndex].pays[msg.sender] = true;\r\n\r\n\t\tuint winnerSum = amount*(100-comission.total)/100;\r\n\t\tuint techSum = amount-winnerSum;\r\n\r\n\t\twinner.transfer( winnerSum );\r\n\t\tfor(uint i=0;i<referals.length;i++){\r\n\t\t    if( referalProfits[referals[i]]>0 && referalProfits[referals[i]]<techSum){\r\n\t\t        referals[i].transfer( referalProfits[referals[i]]);\r\n\t\t        techSum -= referalProfits[referals[i]];\r\n\t\t        referalProfits[referals[i]] = 0;\r\n\t\t }\r\n\t\t}\r\n\t\tif( techSum > 0){\r\n\t\t  owner.transfer(techSum);\r\n\t\t}\r\n\t\tjackpot = jackpot-amount;\r\n\r\n\r\n\r\n\r\n\t}\r\n\tfunction getJackpot() public view returns(uint){\r\n\t    return jackpot;\r\n\t}\r\n\tfunction getAdminComission() public view returns(uint){\r\n\t    return adminComission;\r\n\t}\r\n\r\n    function balanceOf(address _user) public view returns(uint) {\r\n\t\treturn referalProfits[_user];\r\n    }\r\n\r\n\t/**\r\n\t * @dev Disallow users to send ether directly to the contract\r\n\t */\r\n\tfunction() public payable {\r\n\t    if( msg.sender != owner){\r\n\t        revert();\r\n\t    }\r\n\t    jackpot += msg.value;\r\n\t}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buyTicketWithRef\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockIndex\",\"type\":\"uint256\"},{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"checkWin\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminComission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"name\":\"_blockOffset\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint256\"},{\"name\":\"_refPercent\",\"type\":\"uint256\"},{\"name\":\"_nextJackpotPercent\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLotteryAtIndex\",\"outputs\":[{\"name\":\"_gamers\",\"type\":\"address[]\"},{\"name\":\"_jackpot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawForWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseError\",\"type\":\"event\"}]","ContractName":"Win20ETH","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35216bbf9c71f40800c95b844fa46799c0b685a2709bf1d4a330bd693a686bf7"}]}