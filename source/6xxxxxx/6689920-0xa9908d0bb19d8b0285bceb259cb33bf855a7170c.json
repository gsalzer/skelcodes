{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n* I'am advertisement contract , DO NOT send any ether here\r\n* \r\n* EtherGlod Site: https://etherGold.me\r\n* \r\n* EtherGlod Contract:0x4a9a5083135d0c80cce8e0f424336567e616ef64\r\n* \r\n-------------------------------------------------------------------------------\r\n * What's is EtherGold\r\n *  - 1% advertisement and PR expenses FEE\r\n *  - You can refund anytime\r\n *  - GAIN 2% ~ 3% (up on your deposited value) PER 24 HOURS (every 5900 blocks)\r\n *  - 0 ~ 1 ether     2% \r\n *  - 1 ~ 10 ether    2.5%\r\n *  - over 10 ether   3% \r\n * \r\n * Multi-level Referral Bonus\r\n *  - 5% for Direct \r\n *  - 3% for Second Level\r\n *  - 1% for Third Level\r\n * \r\n * How to use:\r\n *  1. Send any amount of ether to make an investment\r\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time\r\n *  OR\r\n *  2c. view on website: https://EtherGold.Me\r\n * \r\n * How to refund:\r\n *  - Send 0.002 ether to refund\r\n *  - 1% refund fee\r\n *  - refundValue = (depositedValue - withdrewValue - refundFee) * 99%\r\n *  \r\n *\r\n * RECOMMENDED GAS LIMIT: 70000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * Contract reviewed and approved by pros! \r\n* \r\n**/\r\ncontract ERC20AdToken {\r\n    using SafeMath for uint;\r\n    using Zero for *;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping(address => address) public adtransfers;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(string _symbol, string _name) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        balanceOf[this] = 10000000000;\r\n        totalSupply = 10000000000;\r\n        emit Transfer(address(0), this, 10000000000);\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        //This method do not send anything. It is only notify blockchain that Advertise Token Transfered\r\n        //You can call this method for advertise this contract and invite new investors and gain 1% from each first investments.\r\n        if(!adtransfers[to].notZero()){\r\n            adtransfers[to] = msg.sender;\r\n            emit Transfer(this, to, tokens);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function massAdvertiseTransfer(address[] addresses, uint tokens) public returns (bool success) {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if(!adtransfers[addresses[i]].notZero()){\r\n                adtransfers[addresses[i]] = msg.sender;\r\n                emit Transfer(this, addresses[i], tokens);\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary Percent {\r\n  // Solidity automatically throws when dividing by 0\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) return 0;\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n}\r\n\r\nlibrary Zero {\r\n  function requireNotZero(uint a) internal pure {\r\n    require(a != 0, \"require not zero\");\r\n  }\r\n\r\n  function requireNotZero(address addr) internal pure {\r\n    require(addr != address(0), \"require not zero address\");\r\n  }\r\n\r\n  function notZero(address addr) internal pure returns(bool) {\r\n    return !(addr == address(0));\r\n  }\r\n\r\n  function isZero(address addr) internal pure returns(bool) {\r\n    return addr == address(0);\r\n  }\r\n}\r\n\r\nlibrary ToAddress {\r\n  function toAddr(uint source) internal pure returns(address) {\r\n    return address(source);\r\n  }\r\n\r\n  function toAddr(bytes source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"massAdvertiseTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adtransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC20AdToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000234561726e203325206461696c792e2068747470733a2f2f6574686572476f6c642e6d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005853656e6420796f75722045544820746f207468697320636f6e747261637420616e64206561726e2033252065766572792064617920666f72204c6976652d6c6f6e672e2068747470733a2f2f6574686572476f6c642e6d650000000000000000","Library":"","SwarmSource":"bzzr://e4087ddac1a785d98ac6961e1a5660a65bde8bf0df8e0301e99d59751186d07c"}]}