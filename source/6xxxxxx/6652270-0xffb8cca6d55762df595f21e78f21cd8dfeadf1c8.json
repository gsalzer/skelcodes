{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n*\r\n*  _____                  __          __   ______ _____ ______ \r\n* |  __ \\                / _|        / _| |  ____|_   _|  ____|\r\n* | |__) | __ ___   ___ | |_    ___ | |_  | |__    | | | |__   \r\n* |  ___/ '__/ _ \\ / _ \\|  _|  / _ \\|  _| |  __|   | | |  __|  \r\n* | |   | | | (_) | (_) | |   | (_) | |   | |____ _| |_| |     \r\n* |_|   |_|  \\___/ \\___/|_|    \\___/|_|   |______|_____|_|     \r\n*                                                              \r\n*            Proof of EIF   -  ZERO DEV FEES!\r\n*\r\n* [✓] 5% EIF fee - 5% goes to EasyInvestForever (excluding the shared divs below)\r\n* [✓] 48%-8% Withdraw fee goes to Token Holders as divs \r\n*     (fee starts at 48% and reduces down to 8% over 30 day period to discourage early dumps)\r\n* [✓] 15% Deposit fee of which at least 5% goes to Token Holders as divs \r\n*      (up to 10% to any referrers - referrers are sticky for better referral earnings)\r\n* [✓] 0% Token transfer fee enabling third party trading\r\n* [✓] Multi-level STICKY Referral System - 10% from total purchase\r\n*  *  [✓]  1st level 50% (5% from total purchase)\r\n*  *  [✓]  2nd level 30% (3% from total purchase)\r\n*  *  [✓]  3rd level 20% (2% from total purchase)\r\n*/\r\n\r\n\r\n/**\r\n * Definition of contract accepting Proof of EIF (EIF) tokens\r\n * Games or any other innovative platforms can reuse this contract to support Proof Of EIF (EIF) tokens\r\n */\r\ncontract AcceptsEIF {\r\n    ProofofEIF public tokenContract;\r\n\r\n    constructor(address _tokenContract) public {\r\n        tokenContract = ProofofEIF(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\n\r\ncontract ProofofEIF {\r\n\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n    modifier onlyBagholders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStronghands {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    modifier notGasbag() {\r\n      require(tx.gasprice <= 200000000000); // max 200 gwei\r\n      _;\r\n    }\r\n\r\n    modifier notContract() {\r\n      require (msg.sender == tx.origin);\r\n\r\n      _;\r\n    }\r\n    \r\n    \r\n       /// @dev Limit ambassador mine and prevent deposits before startTime\r\n    modifier antiEarlyWhale {\r\n        if (isPremine()) { //max 1ETH purchase premineLimit per ambassador\r\n          require(ambassadors_[msg.sender] && msg.value <= premineLimit);\r\n        // stop them purchasing a second time\r\n          ambassadors_[msg.sender]=false;\r\n        }\r\n        else require (isStarted());\r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // -> a few more things such as add ambassadors, administrators, reset more things\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }    \r\n    \r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n    // ambassadors list (promoters who will get the contract started)\r\n    mapping(address => bool) public ambassadors_;\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onReferralUse(\r\n        address indexed referrer,\r\n        uint8  indexed level,\r\n        uint256 ethereumCollected,\r\n        address indexed customerAddress,\r\n        uint256 timestamp\r\n    );\r\n\r\n\r\n\r\n    string public name = \"Proof of EIF\";\r\n    string public symbol = \"EIF\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal entryFee_ = 15;\r\n    \r\n    /// @dev 48% dividends for token selling\r\n    uint8 constant internal startExitFee_ = 48;\r\n\r\n    /// @dev 8% dividends for token selling after step\r\n    uint8 constant internal finalExitFee_ = 8;\r\n\r\n    /// @dev Exit fee falls over period of 30 days\r\n    uint256 constant internal exitFeeFallDuration_ = 30 days;\r\n    \r\n    /// @dev starting\r\n    uint256 public startTime = 0; //  January 1, 1970 12:00:00\r\n    mapping(address => uint256) internal bonusBalance_;\r\n    uint256 public depositCount_;\r\n    uint8 constant internal fundEIF_ = 5; // 5% goes to first EasyInvestForever contract\r\n    \r\n    /// @dev anti-early-whale\r\n    uint256 public maxEarlyStake = 2.5 ether;\r\n    uint256 public whaleBalanceLimit = 75 ether;\r\n    uint256 public premineLimit = 1 ether;\r\n    uint256 public ambassadorCount = 1;\r\n    \r\n    /// @dev PoEIF address\r\n    address public PoEIF;\r\n    \r\n    // Address to send the 5% EasyInvestForever Fee\r\n    address public giveEthFundAddress = 0x35027a992A3c232Dd7A350bb75004aD8567561B2;\r\n    uint256 public totalEthFundRecieved; // total ETH EasyInvestForever recieved from this contract\r\n    uint256 public totalEthFundCollected; // total ETH collected in this contract for EasyInvestForever\r\n    \r\n    \r\n    uint8 constant internal maxReferralFee_ = 10; // 10% from total sum (lev1 - 5%, lev2 - 3%, lev3 - 2%)\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    uint256 public stakingRequirement = 50e18;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    // Special Platform control from scam game contracts on PoEIF platform\r\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept PoEIF tokens\r\n\r\n    mapping(address => address) public stickyRef;\r\n    \r\n    /*=======================================\r\n    =            CONSTRUCTOR                =\r\n    =======================================*/\r\n\r\n   constructor () public {\r\n     PoEIF = msg.sender;\r\n     // initially set only contract creator as ambassador and administrator but can be changed later\r\n     ambassadors_[PoEIF] = true;\r\n     administrators[PoEIF] = true;\r\n   }    \r\n    \r\n\r\n    function buy(address _referredBy) notGasbag antiEarlyWhale public payable {\r\n        purchaseInternal(msg.value, _referredBy);\r\n    }\r\n\r\n    function() payable notGasbag antiEarlyWhale public {\r\n        purchaseInternal(msg.value, 0x0);\r\n    }\r\n    \r\n/**\r\n * Sends FUND money to the Easy Invest Forever Contract\r\n * Contract address can also be updated by admin if required in the future\r\n */\r\n \r\n     function updateFundAddress(address _newAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        giveEthFundAddress = _newAddress;\r\n    }\r\n    \r\n    function payFund() public {\r\n        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\r\n        require(ethToPay > 0);\r\n        totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\r\n        if(!giveEthFundAddress.call.value(ethToPay)()) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n /**\r\n  * Anyone can donate divs using this function to spread some love to all tokenholders without buying tokens\r\n  */\r\n    function donateDivs() payable public {\r\n        require(msg.value > 10000 wei && tokenSupply_ > 0);\r\n\r\n        uint256 _dividends = msg.value;\r\n        // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n        profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n    } \r\n\r\n    // @dev Function setting the start time of the system  - can also be reset when contract balance is under 10ETH\r\n    function setStartTime(uint256 _startTime) onlyAdministrator public {\r\n        if (address(this).balance < 10 ether ) {\r\n            startTime = _startTime; \r\n            // If not already in premine, set premine to start again - remove default ambassador afterwards for zero premine\r\n            if (!isPremine()) {depositCount_ = 0; ambassadorCount = 1; ambassadors_[PoEIF] = true;}\r\n        }\r\n    }\r\n    \r\n    // @dev Function for find if premine\r\n    function isPremine() public view returns (bool) {\r\n      return depositCount_ < ambassadorCount;\r\n    }\r\n\r\n    // @dev Function for find if started\r\n    function isStarted() public view returns (bool) {\r\n      return startTime!=0 && now > startTime;\r\n    }    \r\n\r\n    function reinvest() onlyStronghands public {\r\n        uint256 _dividends = myDividends(false);\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyStronghands public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n        \r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\r\n        // Take out dividends and then _fundPayout\r\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n\r\n        // Add ethereum to send to fund\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        require(!isPremine() && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n /**\r\n    * Transfer token to a specified address and forward the data to recipient\r\n    * ERC-677 standard\r\n    * https://github.com/ethereum/EIPs/issues/677\r\n    * @param _to    Receiver address.\r\n    * @param _value Amount of tokens that will be transferred.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\r\n      require(_to != address(0));\r\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by PoEIF platform\r\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\r\n\r\n      if (isContract(_to)) {\r\n        AcceptsEIF receiver = AcceptsEIF(_to);\r\n        require(receiver.tokenFallback(msg.sender, _value, _data));\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Additional check that the game address we are sending tokens to is a contract\r\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n     */\r\n     function isContract(address _addr) private constant returns (bool is_contract) {\r\n       // retrieve the size of the code on target address, this needs assembly\r\n       uint length;\r\n       assembly { length := extcodesize(_addr) }\r\n       return length > 0;\r\n     }\r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n    \r\n     /**\r\n     * Set new Early limits (only appropriate at start of new game).\r\n     */\r\n    function setEarlyLimits(uint256 _whaleBalanceLimit, uint256 _maxEarlyStake, uint256 _premineLimit)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        whaleBalanceLimit = _whaleBalanceLimit;\r\n        maxEarlyStake = _maxEarlyStake;\r\n        premineLimit = _premineLimit;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Add or remove game contract, which can accept PoEIF (EIF) tokens\r\n     */\r\n    function setCanAcceptTokens(address _address, bool _value)\r\n      onlyAdministrator()\r\n      public\r\n    {\r\n      canAcceptTokens_[_address] = _value;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n  /**\r\n   * @dev add an address to the ambassadors_ list (this can be done anytime until the premine finishes)\r\n   * @param addr address\r\n   * @return true if the address was added to the list, false if the address was already in the list\r\n   */\r\n  function addAmbassador(address addr) onlyAdministrator public returns(bool success) {\r\n    if (!ambassadors_[addr] && isPremine()) {\r\n      ambassadors_[addr] = true;\r\n      ambassadorCount += 1;\r\n      success = true;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev remove an address from the ambassadors_ list\r\n   * (only do this if they take too long to buy premine - they are removed automatically during premine purchase)\r\n   * @param addr address\r\n   * @return true if the address was removed from the list,\r\n   * false if the address wasn't in the list in the first place\r\n   */\r\n  function removeAmbassador(address addr) onlyAdministrator public returns(bool success) {\r\n    if (ambassadors_[addr]) {\r\n      ambassadors_[addr] = false;\r\n      ambassadorCount -= 1;\r\n      success = true;\r\n    }\r\n  }\r\n  \r\n    /**\r\n   * @dev add an address to the administrators list\r\n   * @param addr address\r\n   * @return true if the address was added to the list, false if the address was already in the list\r\n   */\r\n  function addAdministrator(address addr) onlyAdministrator public returns(bool success) {\r\n    if (!administrators[addr]) {\r\n      administrators[addr] = true;\r\n      success = true;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev remove an address from the administrators list\r\n   * @param addr address\r\n   * @return true if the address was removed from the list,\r\n   * false if the address wasn't in the list in the first place or not called by original administrator\r\n   */\r\n  function removeAdministrator(address addr) onlyAdministrator public returns(bool success) {\r\n    if (administrators[addr] && msg.sender==PoEIF) {\r\n      administrators[addr] = false;\r\n      success = true;\r\n    }\r\n  }\r\n\r\n\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\r\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\r\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\r\n\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundEIF_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundEIF_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    function exitFee() public view returns (uint8) {\r\n        if (startTime==0 || now < startTime){\r\n           return startExitFee_;\r\n        }\r\n        \r\n        uint256 secondsPassed = now - startTime;\r\n        if (secondsPassed >= exitFeeFallDuration_) {\r\n            return finalExitFee_;\r\n        }\r\n        uint8 totalChange = startExitFee_ - finalExitFee_;\r\n        uint8 currentChange = uint8(totalChange * secondsPassed / exitFeeFallDuration_);\r\n        uint8 currentFee = startExitFee_- currentChange;\r\n        return currentFee;\r\n    }\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\r\n    // Make sure we will send back excess if user sends more than early limits\r\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\r\n      internal\r\n      notContract() // no contracts allowed\r\n      returns(uint256) {\r\n\r\n      uint256 purchaseEthereum = _incomingEthereum;\r\n      uint256 excess;\r\n      if(purchaseEthereum > maxEarlyStake ) { // check if the transaction is over early limit of 2.5 ether\r\n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= whaleBalanceLimit) { // if so check the contract is less than 75 ether whaleBalanceLimit\r\n              purchaseEthereum = maxEarlyStake;\r\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\r\n          }\r\n      }\r\n    \r\n      if (excess > 0) {\r\n        msg.sender.transfer(excess);\r\n      }\r\n    \r\n      purchaseTokens(purchaseEthereum, _referredBy);\r\n    }\r\n\r\n    function handleReferrals(address _referredBy, uint _referralBonus, uint _undividedDividends) internal returns (uint){\r\n        uint _dividends = _undividedDividends;\r\n        address _level1Referrer = stickyRef[msg.sender];\r\n        \r\n        if (_level1Referrer == address(0x0)){\r\n            _level1Referrer = _referredBy;\r\n        }\r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _level1Referrer != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _level1Referrer != msg.sender &&\r\n\r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_level1Referrer] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            if (stickyRef[msg.sender] == address(0x0)){\r\n                stickyRef[msg.sender] = _level1Referrer;\r\n            }\r\n\r\n            // level 1 refs - 50%\r\n            uint256 ethereumCollected =  _referralBonus/2;\r\n            referralBalance_[_level1Referrer] = SafeMath.add(referralBalance_[_level1Referrer], ethereumCollected);\r\n            _dividends = SafeMath.sub(_dividends, ethereumCollected);\r\n            emit onReferralUse(_level1Referrer, 1, ethereumCollected, msg.sender, now);\r\n\r\n            address _level2Referrer = stickyRef[_level1Referrer];\r\n\r\n            if (_level2Referrer != address(0x0) && tokenBalanceLedger_[_level2Referrer] >= stakingRequirement){\r\n                // level 2 refs - 30%\r\n                ethereumCollected =  (_referralBonus*3)/10;\r\n                referralBalance_[_level2Referrer] = SafeMath.add(referralBalance_[_level2Referrer], ethereumCollected);\r\n                _dividends = SafeMath.sub(_dividends, ethereumCollected);\r\n                emit onReferralUse(_level2Referrer, 2, ethereumCollected, _level1Referrer, now);\r\n                address _level3Referrer = stickyRef[_level2Referrer];\r\n\r\n                if (_level3Referrer != address(0x0) && tokenBalanceLedger_[_level3Referrer] >= stakingRequirement){\r\n                    //level 3 refs - 20%\r\n                    ethereumCollected =  (_referralBonus*2)/10;\r\n                    referralBalance_[_level3Referrer] = SafeMath.add(referralBalance_[_level3Referrer], ethereumCollected);\r\n                    _dividends = SafeMath.sub(_dividends, ethereumCollected);\r\n                    emit onReferralUse(_level3Referrer, 3, ethereumCollected, _level2Referrer, now);\r\n                }\r\n            }\r\n        }\r\n        return _dividends;\r\n    }\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\r\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_incomingEthereum, maxReferralFee_), 100);\r\n        uint256 _dividends = handleReferrals(_referredBy, _referralBonus, _undividedDividends);\r\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundEIF_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\r\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\r\n        \r\n        \r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\r\n        // Keep track\r\n        depositCount_++;\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n            (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                (_tokenPriceInitial ** 2)\r\n                                +\r\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\r\n                                +\r\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\r\n                                +\r\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\r\n                            )\r\n                        ), _tokenPriceInitial\r\n                    )\r\n                ) / (tokenPriceIncremental_)\r\n            ) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n            (\r\n                SafeMath.sub(\r\n                    (\r\n                        (\r\n                            (\r\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n                            ) - tokenPriceIncremental_\r\n                        ) * (tokens_ - 1e18)\r\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n                )\r\n                / 1e18);\r\n\r\n        return _etherReceived;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambassadorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCanAcceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAmbassador\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stickyRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEarlyStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giveEthFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadors_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premineLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exitFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whaleBalanceLimit\",\"type\":\"uint256\"},{\"name\":\"_maxEarlyStake\",\"type\":\"uint256\"},{\"name\":\"_premineLimit\",\"type\":\"uint256\"}],\"name\":\"setEarlyLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoEIF\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleBalanceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFundRecieved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateDivs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPremine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAmbassador\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethereumCollected\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onReferralUse\",\"type\":\"event\"}]","ContractName":"ProofofEIF","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd5a5e19ecdc5d62a83df107d6f445176a7cbced3b812988c15bc324145c7e44"}]}