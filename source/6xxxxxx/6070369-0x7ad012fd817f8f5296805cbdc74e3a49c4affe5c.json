{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Interface of Price oracle\r\n * @dev Implements methods of price oracle used in the crowdsale\r\n * @author OnGrid Systems\r\n */\r\ncontract PriceOracleIface {\r\n  uint256 public ethPriceInCents;\r\n\r\n  function getUsdCentsFromWei(uint256 _wei) public view returns (uint256) {\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Interface of ERC-20 token\r\n * @dev Implements transfer methods and event used throughout crowdsale\r\n * @author OnGrid Systems\r\n */\r\ncontract TransferableTokenIface {\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n  }\r\n\r\n  function balanceOf(address who) public view returns (uint256) {\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title CrowdSale contract for Vera.jobs\r\n * @dev Keep the list of investors passed KYC, receive ethers to fallback,\r\n * calculate correspinding amount of tokens, add bonus (depending on the deposit size)\r\n * then transfers tokens to the investor's account\r\n * @author OnGrid Systems\r\n */\r\ncontract VeraCrowdsale is RBAC {\r\n  using SafeMath for uint256;\r\n\r\n  // Price of one token (1.00000...) in USD cents\r\n  uint256 public tokenPriceInCents = 200;\r\n\r\n  // Minimal amount of USD cents to invest. Transactions of less value will be reverted.\r\n  uint256 public minDepositInCents = 800000;\r\n\r\n  // Amount of USD cents raised. Continuously increments on each transaction.\r\n  // Note: may be irrelevant because the actual amount of harvested ethers depends on ETH/USD price at the moment.\r\n  uint256 public centsRaised;\r\n\r\n  // Amount of tokens distributed by this contract.\r\n  // Note: doesn't include previous phases of tokensale.\r\n  uint256 public tokensSold;\r\n\r\n  // Address of VERA ERC-20 token contract\r\n  TransferableTokenIface public token;\r\n\r\n  // Address of ETH price feed\r\n  PriceOracleIface public priceOracle;\r\n\r\n  // Wallet address collecting received ETH\r\n  address public wallet;\r\n\r\n  // constants defining roles for access control\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n  string public constant ROLE_BACKEND = \"backend\";\r\n  string public constant ROLE_KYC_VERIFIED_INVESTOR = \"kycVerified\";\r\n\r\n  // Value bonus configuration\r\n  struct AmountBonus {\r\n\r\n    // To understand which bonuses were applied bonus contains binary flag.\r\n    // If several bonuses applied ids get summarized in resulting event.\r\n    // Use values with a single 1-bit like 0x01, 0x02, 0x04, 0x08\r\n    uint256 id;\r\n\r\n    // amountFrom and amountTo define deposit value range.\r\n    // Bonus percentage applies if deposit amount in cents is within the boundaries\r\n    uint256 amountFrom;\r\n    uint256 amountTo;\r\n    uint256 bonusPercent;\r\n  }\r\n\r\n  // The list of available bonuses. Filled by the constructor on contract initialization\r\n  AmountBonus[] public amountBonuses;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param investor who received tokens\r\n   * @param ethPriceInCents ETH price at the moment of purchase\r\n   * @param valueInCents deposit calculated to USD cents\r\n   * @param bonusPercent total bonus percent (sum of all bonuses)\r\n   * @param bonusIds flags of all the bonuses applied to the purchase\r\n   */\r\n  event TokenPurchase(\r\n    address indexed investor,\r\n    uint256 ethPriceInCents,\r\n    uint256 valueInCents,\r\n    uint256 bonusPercent,\r\n    uint256 bonusIds\r\n  );\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts if called not by admin\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access of backend keys stored on\r\n   * investor's portal\r\n   * // reverts if called not by backend\r\n   */\r\n  modifier onlyBackend()\r\n  {\r\n    checkRole(msg.sender, ROLE_BACKEND);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier allowing calls from investors successfully passed KYC verification\r\n   * // reverts if called by investor who didn't pass KYC via investor's portal\r\n   */\r\n  modifier onlyKYCVerifiedInvestor()\r\n  {\r\n    checkRole(msg.sender, ROLE_KYC_VERIFIED_INVESTOR);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor initializing Crowdsale contract\r\n   * @param _token address of the token ERC-20 contract.\r\n   * @param _priceOracle ETH price feed\r\n   * @param _wallet address where received ETH get forwarded\r\n   */\r\n  constructor(\r\n    TransferableTokenIface _token,\r\n    PriceOracleIface _priceOracle,\r\n    address _wallet\r\n  )\r\n    public\r\n  {\r\n    require(_token != address(0), \"Need token contract address\");\r\n    require(_priceOracle != address(0), \"Need price oracle contract address\");\r\n    require(_wallet != address(0), \"Need wallet address\");\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n    token = _token;\r\n    priceOracle = _priceOracle;\r\n    wallet = _wallet;\r\n    // solium-disable-next-line arg-overflow\r\n    amountBonuses.push(AmountBonus(0x1, 800000, 1999999, 20));\r\n    // solium-disable-next-line arg-overflow\r\n    amountBonuses.push(AmountBonus(0x2, 2000000, 2**256 - 1, 30));\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function receiving ETH sent to the contract address\r\n   * sender must be KYC (Know Your Customer) verified investor.\r\n   */\r\n  function ()\r\n    external\r\n    payable\r\n    onlyKYCVerifiedInvestor\r\n  {\r\n    uint256 valueInCents = priceOracle.getUsdCentsFromWei(msg.value);\r\n    buyTokens(msg.sender, valueInCents);\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraws all remaining (not sold) tokens from the crowdsale contract\r\n   * @param _to address of tokens receiver\r\n   */\r\n  function withdrawTokens(address _to) public onlyAdmin {\r\n    uint256 amount = token.balanceOf(address(this));\r\n    require(amount > 0, \"no tokens on the contract\");\r\n    token.transfer(_to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Called when investor's portal (backend) receives non-ethereum payment\r\n   * @param _investor address of investor\r\n   * @param _cents received deposit amount in cents\r\n   */\r\n  function buyTokensViaBackend(address _investor, uint256 _cents)\r\n    public\r\n    onlyBackend\r\n  {\r\n    if (! RBAC.hasRole(_investor, ROLE_KYC_VERIFIED_INVESTOR)) {\r\n      addKycVerifiedInvestor(_investor);\r\n    }\r\n    buyTokens(_investor, _cents);\r\n  }\r\n\r\n  /**\r\n   * @dev Computes total bonuses amount by value\r\n   * @param _cents deposit amount in USD cents\r\n   * @return total bonus percent (sum of applied bonus percents), bonusIds (sum of applied bonus flags)\r\n   */\r\n  function computeBonuses(uint256 _cents)\r\n    public\r\n    view\r\n    returns (uint256, uint256)\r\n  {\r\n    uint256 bonusTotal;\r\n    uint256 bonusIds;\r\n    for (uint i = 0; i < amountBonuses.length; i++) {\r\n      if (_cents >= amountBonuses[i].amountFrom &&\r\n      _cents <= amountBonuses[i].amountTo) {\r\n        bonusTotal += amountBonuses[i].bonusPercent;\r\n        bonusIds += amountBonuses[i].id;\r\n      }\r\n    }\r\n    return (bonusTotal, bonusIds);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates amount of tokens by cents\r\n   * @param _cents deposit amount in USD cents\r\n   * @return amount of tokens investor receive for the deposit\r\n   */\r\n  function computeTokens(uint256 _cents) public view returns (uint256) {\r\n    uint256 tokens = _cents.mul(10 ** 18).div(tokenPriceInCents);\r\n    (uint256 bonusPercent, ) = computeBonuses(_cents);\r\n    uint256 bonusTokens = tokens.mul(bonusPercent).div(100);\r\n    if (_cents >= minDepositInCents) {\r\n      return tokens.add(bonusTokens);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add admin role to an address\r\n   * @param addr address\r\n   */\r\n  function addAdmin(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    addRole(addr, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke admin privileges from an address\r\n   * @param addr address\r\n   */\r\n  function delAdmin(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    removeRole(addr, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev Add backend privileges to an address\r\n   * @param addr address\r\n   */\r\n  function addBackend(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    addRole(addr, ROLE_BACKEND);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke backend privileges from an address\r\n   * @param addr address\r\n   */\r\n  function delBackend(address addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    removeRole(addr, ROLE_BACKEND);\r\n  }\r\n\r\n  /**\r\n   * @dev Mark investor's address as KYC-verified person\r\n   * @param addr address\r\n   */\r\n  function addKycVerifiedInvestor(address addr)\r\n    public\r\n    onlyBackend\r\n  {\r\n    addRole(addr, ROLE_KYC_VERIFIED_INVESTOR);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke KYC verification from the person\r\n   * @param addr address\r\n   */\r\n  function delKycVerifiedInvestor(address addr)\r\n    public\r\n    onlyBackend\r\n  {\r\n    removeRole(addr, ROLE_KYC_VERIFIED_INVESTOR);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates and applies bonuses and implements actual token transfer and events\r\n   * @param _investor address of the beneficiary receiving tokens\r\n   * @param _cents amount of deposit in cents\r\n   */\r\n  function buyTokens(address _investor, uint256 _cents) internal {\r\n    (uint256 bonusPercent, uint256 bonusIds) = computeBonuses(_cents);\r\n    uint256 tokens = computeTokens(_cents);\r\n    require(tokens > 0, \"value is not enough\");\r\n    token.transfer(_investor, tokens);\r\n    centsRaised = centsRaised.add(_cents);\r\n    tokensSold = tokensSold.add(tokens);\r\n    emit TokenPurchase(\r\n      _investor,\r\n      priceOracle.ethPriceInCents(),\r\n      _cents,\r\n      bonusPercent,\r\n      bonusIds\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_BACKEND\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_KYC_VERIFIED_INVESTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDepositInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addKycVerifiedInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"buyTokensViaBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"computeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountBonuses\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"name\":\"amountTo\",\"type\":\"uint256\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cents\",\"type\":\"uint256\"}],\"name\":\"computeBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delKycVerifiedInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_priceOracle\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethPriceInCents\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueInCents\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusIds\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"VeraCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f90f1648926005a8bb3ed8ec883164de7f7687430000000000000000000000005f243c098ca59501c153c1fa5e2a3bfd4d61bdf7000000000000000000000000ebd55d8a32a71f17ffd26258045c9d089c5fbb6d","Library":"","SwarmSource":"bzzr://923ecf893de42bb2b956fd59987e0ef353b4d588af0b22180b024a8d55ee7371"}]}