{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * MPSSaleConfig.sol\r\n * Configuration for the MPS token sale private phase.\r\n\r\n * More info about MPS : https://github.com/MtPelerin/MtPelerin-share-MPS\r\n\r\n * The unflattened code is available through this github tag:\r\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-1\r\n\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n\r\n * @notice All matters regarding the intellectual property of this code \r\n * @notice or software are subject to Swiss Law without reference to its \r\n * @notice conflicts of law rules.\r\n\r\n * @notice License for each contract is available in the respective file\r\n * @notice or in the LICENSE.md file.\r\n * @notice https://github.com/MtPelerin/\r\n\r\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\r\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// File: contracts/interface/ISaleConfig.sol\r\n\r\n/**\r\n * @title ISaleConfig interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n */\r\ncontract ISaleConfig {\r\n\r\n  struct Tokensale {\r\n    uint256 lotId;\r\n    uint256 tokenPriceCHFCent;\r\n  }\r\n\r\n  function tokenSupply() public pure returns (uint256);\r\n  function tokensaleLotSupplies() public view returns (uint256[]);\r\n\r\n  function tokenizedSharePercent() public pure returns (uint256); \r\n  function tokenPriceCHF() public pure returns (uint256);\r\n\r\n  function minimalCHFInvestment() public pure returns (uint256);\r\n  function maximalCHFInvestment() public pure returns (uint256);\r\n\r\n  function tokensalesCount() public view returns (uint256);\r\n  function lotId(uint256 _tokensaleId) public view returns (uint256);\r\n  function tokenPriceCHFCent(uint256 _tokensaleId)\r\n    public view returns (uint256);\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/mps/MPSSaleConfig.sol\r\n\r\n/**\r\n * @title MPSSaleConfig\r\n * @dev MPSSaleConfig contract\r\n * The contract configure the sale for the MPS token\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n *\r\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice Please refer to the top of this file for the license.\r\n */\r\ncontract MPSSaleConfig is ISaleConfig, Ownable {\r\n\r\n  // Token supply cap: 10M\r\n  uint256 constant public TOKEN_SUPPLY = 10 ** 7;\r\n \r\n  // 100% of Mt Pelerin's shares are tokenized\r\n  uint256 constant public TOKENSALE_LOT1_SHARE_PERCENT = 5;\r\n  uint256 constant public TOKENSALE_LOT2_SHARE_PERCENT = 95;\r\n  uint256 constant public TOKENIZED_SHARE_PERCENT\r\n  = TOKENSALE_LOT1_SHARE_PERCENT + TOKENSALE_LOT2_SHARE_PERCENT;\r\n\r\n  uint256 constant public TOKENSALE_LOT1_SUPPLY\r\n  = TOKEN_SUPPLY * TOKENSALE_LOT1_SHARE_PERCENT / 100;\r\n  uint256 constant public TOKENSALE_LOT2_SUPPLY\r\n  = TOKEN_SUPPLY * TOKENSALE_LOT2_SHARE_PERCENT / 100;\r\n\r\n  uint256[] private tokensaleLotSuppliesArray\r\n  = [ TOKENSALE_LOT1_SUPPLY, TOKENSALE_LOT2_SUPPLY ];\r\n\r\n  // Tokens amount per CHF Cents\r\n  uint256 constant public TOKEN_PRICE_CHF_CENT = 500;\r\n\r\n  // Minimal CHF Cents investment\r\n  uint256 constant public MINIMAL_CHF_CENT_INVESTMENT = 10 ** 4;\r\n\r\n  // Maximal CHF Cents investment\r\n  uint256 constant public MAXIMAL_CHF_CENT_INVESTMENT = 10 ** 10;\r\n\r\n  Tokensale[] public tokensales;\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor() public {\r\n    tokensales.push(Tokensale(\r\n      0,\r\n      TOKEN_PRICE_CHF_CENT * 80 / 100\r\n    ));\r\n\r\n    tokensales.push(Tokensale(\r\n      0,\r\n      TOKEN_PRICE_CHF_CENT\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function tokenSupply() public pure returns (uint256) {\r\n    return TOKEN_SUPPLY;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function tokensaleLotSupplies() public view returns (uint256[]) {\r\n    return tokensaleLotSuppliesArray;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function tokenizedSharePercent() public pure returns (uint256) {\r\n    return TOKENIZED_SHARE_PERCENT;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function tokenPriceCHF() public pure returns (uint256) {\r\n    return TOKEN_PRICE_CHF_CENT;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function minimalCHFInvestment() public pure returns (uint256) {\r\n    return MINIMAL_CHF_CENT_INVESTMENT;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function maximalCHFInvestment() public pure returns (uint256) {\r\n    return MAXIMAL_CHF_CENT_INVESTMENT;\r\n  }\r\n\r\n  /**\r\n   * @dev tokensale count\r\n   */\r\n  function tokensalesCount() public view returns (uint256) {\r\n    return tokensales.length;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function lotId(uint256 _tokensaleId) public view returns (uint256) {\r\n    return tokensales[_tokensaleId].lotId;\r\n  }\r\n\r\n  /**\r\n   * @dev getter need to be declared to comply with ISaleConfig interface\r\n   */\r\n  function tokenPriceCHFCent(uint256 _tokensaleId)\r\n    public view returns (uint256)\r\n  {\r\n    return tokensales[_tokensaleId].tokenPriceCHFCent;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MINIMAL_CHF_CENT_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENIZED_SHARE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensaleId\",\"type\":\"uint256\"}],\"name\":\"lotId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalCHFInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_LOT2_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensaleId\",\"type\":\"uint256\"}],\"name\":\"tokenPriceCHFCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMAL_CHF_CENT_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalCHFInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensalesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensaleLotSupplies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_CHF_CENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenizedSharePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensales\",\"outputs\":[{\"name\":\"lotId\",\"type\":\"uint256\"},{\"name\":\"tokenPriceCHFCent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_LOT1_SHARE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_LOT2_SHARE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_LOT1_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MPSSaleConfig","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13bded8618d7a009e8f186dff1572a384634c97fa51ed6bb66fb29fdfdb4e478"}]}