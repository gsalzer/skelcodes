{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n    * @return the address of the owner.\r\n    */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return true if `msg.sender` is the owner of the contract.\r\n    */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * @title AzbitTokenInterface\r\n * @dev ERC20 Token Interface for Azbit project\r\n */\r\ncontract AzbitTokenInterface is IERC20 {\r\n\r\n    function releaseDate() external view returns (uint256);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AzbitAirdrop\r\n * @dev Airdrop Smart Contract of Azbit project\r\n */\r\ncontract AzbitAirdrop is Ownable {\r\n\r\n    // ** PUBLIC STATE VARIABLES **\r\n\r\n    // Azbit token\r\n    AzbitTokenInterface public azbitToken;\r\n\r\n\r\n    // ** CONSTRUCTOR **\r\n\r\n    /**\r\n    * @dev Constructor of AzbitAirdrop Contract\r\n    * @param tokenAddress address of AzbitToken\r\n    */\r\n    constructor(\r\n        address tokenAddress\r\n    ) \r\n        public \r\n    {\r\n        _setToken(tokenAddress);\r\n    }\r\n\r\n\r\n    // ** ONLY OWNER FUNCTIONS **\r\n\r\n    /**\r\n    * @dev Send tokens to beneficiary by owner\r\n    * @param beneficiary The address for tokens withdrawal\r\n    * @param amount The token amount\r\n    */\r\n    function sendTokens(\r\n        address beneficiary,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _sendTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Send tokens to the array of beneficiaries  by owner\r\n    * @param beneficiaries The array of addresses for tokens withdrawal\r\n    * @param amounts The array of tokens amount\r\n    */\r\n    function sendTokensArray(\r\n        address[] beneficiaries, \r\n        uint256[] amounts\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(beneficiaries.length == amounts.length, \"array lengths have to be equal\");\r\n        require(beneficiaries.length > 0, \"array lengths have to be greater than zero\");\r\n\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            _sendTokens(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n    // ** PUBLIC VIEW FUNCTIONS **\r\n\r\n    /**\r\n    * @return total tokens of this contract.\r\n    */\r\n    function contractTokenBalance()\r\n        public \r\n        view \r\n        returns(uint256) \r\n    {\r\n        return azbitToken.balanceOf(this);\r\n    }\r\n\r\n\r\n    // ** PRIVATE HELPER FUNCTIONS **\r\n\r\n    // Helper: Set the address of Azbit Token\r\n    function _setToken(address tokenAddress) \r\n        internal \r\n    {\r\n        azbitToken = AzbitTokenInterface(tokenAddress);\r\n        require(contractTokenBalance() >= 0, \"The token being added is not ERC20 token\");\r\n    }\r\n\r\n    // Helper: send tokens to beneficiary\r\n    function _sendTokens(\r\n        address beneficiary, \r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        require(beneficiary != address(0), \"Address cannot be 0x0\");\r\n        require(amount > 0, \"Amount cannot be zero\");\r\n        require(amount <= contractTokenBalance(), \"not enough tokens on this contract\");\r\n\r\n        // transfer tokens\r\n        require(azbitToken.transfer(beneficiary, amount), \"tokens are not transferred\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendTokensArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"azbitToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AzbitAirdrop","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000eccab39acb2caf9adba72c1cb92fdc106b993e0b","Library":"","SwarmSource":"bzzr://6413ac8910286b790b154ace9df7dbb9c5406d87025deafd74c81aa5cb3d3603"}]}