{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract Lottery {\r\n\r\n  address owner;\r\n  address public beneficiary;\r\n  mapping(address => bool) public playersMap;\r\n  address[] public players;\r\n  uint public playerEther = 0.01 ether;\r\n  uint playerCountGoal;\r\n  bool public isLotteryClosed = false;\r\n  uint public rewards;\r\n\r\n  event GoalReached(address recipient, uint totalAmountRaised);\r\n  event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n  constructor() public {\r\n    // playerCountGoal will be in [1000, 1100]\r\n    playerCountGoal = 1000 + randomGen(block.number - 1, 101);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n    * Fallback function\r\n    *\r\n    * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n    */\r\n  function () public payable {\r\n    require(!isLotteryClosed && msg.value == playerEther, \"Lottery should not be closed and player should send exact ethers\");\r\n    require(!playersMap[msg.sender], \"player should not attend twice\");\r\n    players.push(msg.sender);\r\n    playersMap[msg.sender] = true;\r\n    \r\n    emit FundTransfer(msg.sender, msg.value, true);\r\n\r\n    checkGoalReached();\r\n  }\r\n\r\n  modifier afterGoalReached() { \r\n    if (players.length >= playerCountGoal) _; \r\n  }\r\n\r\n  function checkGoalReached() internal afterGoalReached {\r\n    require(!isLotteryClosed, \"lottery must be opened\");\r\n    isLotteryClosed = true;\r\n    uint playerCount = players.length;\r\n\r\n    // calculate the rewards\r\n    uint winnerIndex = randomGen(block.number - 2, playerCount);\r\n    beneficiary = players[winnerIndex];\r\n    rewards = playerEther * playerCount * 4 / 5;\r\n\r\n    emit GoalReached(beneficiary, rewards);\r\n  }\r\n\r\n  /* Generates a random number from 0 to 100 based on the last block hash */\r\n  function randomGen(uint seed, uint count) private view returns (uint randomNumber) {\r\n    return uint(keccak256(abi.encodePacked(block.number-3, seed))) % count;\r\n  }\r\n\r\n  function safeWithdrawal() public afterGoalReached {\r\n    require(isLotteryClosed, \"lottery must be closed\");\r\n    \r\n    if (beneficiary == msg.sender) {\r\n      beneficiary.transfer(rewards);\r\n      emit FundTransfer(beneficiary, rewards, false);\r\n    }\r\n\r\n    if (owner == msg.sender) {\r\n      uint fee = playerEther * players.length / 5;\r\n      owner.transfer(fee);\r\n      emit FundTransfer(owner, fee, false);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLotteryClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4748b31d6571c9acd0e52ad94850c3594cd78698c9ed3e00a6db67fd840e5dbf"}]}