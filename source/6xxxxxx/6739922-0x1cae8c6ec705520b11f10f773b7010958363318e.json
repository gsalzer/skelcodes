{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .24;\r\nlibrary MathForInterset {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n        return c;\r\n    }\r\n}\r\ncontract Hermes {\r\n    using MathForInterset\r\n    for uint;\r\n    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\r\n    uint public DAY_VALUE = 0;\r\n    uint public DAY_LIMIT = 200 ether;//first limit\r\n    uint public DEPOSIT_AMOUNT;\r\n    uint public PERCENT_FOR_MARKETING = 1500000000;\r\n    address[] public ADDRESSES;\r\n    mapping(address => Investor) public INVESTORS;\r\n    address public ADMIN_ADDR;\r\n    struct Investor {\r\n        uint id;\r\n        uint percentCount;\r\n        uint deposit;\r\n        uint date;\r\n        address referrer;\r\n        uint reinvestID;\r\n        uint actualValue;\r\n        uint stage;\r\n        uint startReinvestDate;\r\n        uint dayLimitValue;\r\n    }\r\n    event reinvest(address addr, uint active);\r\n    event payout(address addr, uint amount, string eventType);\r\n    constructor() public {\r\n        ADMIN_ADDR = msg.sender;\r\n    }\r\n\r\n    function Invest(address _referrer) private {\r\n        if (msg.value == 0 ether) {\r\n\r\n            if (msg.sender == ADMIN_ADDR) {\r\n                payAll();\r\n            } else {\r\n                paySelfByAddress(msg.sender);\r\n            }\r\n        } else {\r\n            if (INVESTORS[msg.sender].deposit == 0) {\r\n                require(DAY_VALUE + msg.value < DAY_LIMIT, \"DAY LIMIT!!!\");\r\n                require(INVESTORS[msg.sender].dayLimitValue + msg.value < DAY_LIMIT / 2, \"DAY LIMIT!!!\");\r\n                INVESTORS[msg.sender].dayLimitValue += msg.value;\r\n                DAY_VALUE += msg.value;\r\n                ADDRESSES.push(msg.sender);\r\n                uint id = ADDRESSES.length;\r\n                ADMIN_ADDR.transfer((msg.value.mul(PERCENT_FOR_MARKETING).div(10000000000)).mul(1));\r\n                DEPOSIT_AMOUNT += msg.value;\r\n                if (msg.value >= MINIMUM_INVEST) {\r\n                    if (INVESTORS[_referrer].deposit != 0) {\r\n                        if (INVESTORS[_referrer].deposit >= 3 ether) {\r\n                            uint value = (msg.value.mul(200000000).div(10000000000));\r\n                            msg.sender.transfer(value);\r\n                            value = (msg.value.mul(250000000).div(10000000000));\r\n                            _referrer.transfer(value);\r\n                            if (INVESTORS[_referrer].stage < 1) {\r\n\r\n                                INVESTORS[_referrer].stage = 1;\r\n                            }\r\n                        }\r\n                        address nextReferrer = _referrer;\r\n                        for (uint i = 0; i < 4; i++) {\r\n                            if (INVESTORS[nextReferrer].referrer == address(0x0)) {\r\n                                break;\r\n                            }\r\n                            if (INVESTORS[INVESTORS[nextReferrer].referrer].reinvestID != 3) {\r\n                                if (INVESTORS[INVESTORS[nextReferrer].referrer].deposit >= 3 ether) {\r\n                                    if (INVESTORS[INVESTORS[nextReferrer].referrer].stage <= 2) {\r\n                                        if (INVESTORS[INVESTORS[nextReferrer].referrer].stage <= i + 2) {\r\n                                            value = (msg.value.mul(100000000).div(10000000000));\r\n                                            INVESTORS[INVESTORS[nextReferrer].referrer].stage = i + 2;\r\n                                            INVESTORS[nextReferrer].referrer.transfer(value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (INVESTORS[INVESTORS[nextReferrer].referrer].deposit >= 5 ether) {\r\n                                    if (INVESTORS[INVESTORS[nextReferrer].referrer].stage < i + 2) {\r\n                                        INVESTORS[INVESTORS[nextReferrer].referrer].stage = i + 2;\r\n                                    }\r\n                                    if (i + 2 == 2) {\r\n                                        value = (msg.value.mul(150000000).div(10000000000));\r\n                                    }\r\n                                    if (i + 2 == 3) {\r\n                                        value = (msg.value.mul(75000000).div(10000000000));\r\n                                    }\r\n                                    if (i + 2 == 4) {\r\n                                        value = (msg.value.mul(50000000).div(10000000000));\r\n                                    }\r\n                                    if (i + 2 == 5) {\r\n                                        value = (msg.value.mul(25000000).div(10000000000));\r\n                                    }\r\n                                    INVESTORS[nextReferrer].referrer.transfer(value);\r\n                                }\r\n                            }\r\n                            nextReferrer = INVESTORS[nextReferrer].referrer;\r\n                            if (nextReferrer == address(0x0)) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        _referrer = address(0x0);\r\n                    }\r\n                } else {\r\n                    _referrer = address(0x0);\r\n                }\r\n                INVESTORS[msg.sender] = Investor(id, 0, msg.value, now, _referrer, 0, msg.value, 0, 0, msg.value);\r\n            } else {\r\n                require(DAY_VALUE + msg.value < DAY_LIMIT, \"DAY LIMIT!!!\");\r\n                require(INVESTORS[msg.sender].dayLimitValue + msg.value < DAY_LIMIT / 2, \"DAY LIMIT!!!\");\r\n                INVESTORS[msg.sender].dayLimitValue += msg.value;\r\n                DAY_VALUE += msg.value;\r\n                if (INVESTORS[msg.sender].reinvestID == 3) {\r\n                    INVESTORS[msg.sender].reinvestID = 0;\r\n                }\r\n                INVESTORS[msg.sender].deposit += msg.value;\r\n                INVESTORS[msg.sender].actualValue += msg.value;\r\n                DEPOSIT_AMOUNT += msg.value;\r\n                ADMIN_ADDR.transfer((msg.value.mul(PERCENT_FOR_MARKETING).div(10000000000)).mul(1));\r\n                if (msg.value == 0.000012 ether) {\r\n                    require(INVESTORS[msg.sender].reinvestID == 0, \"REINVEST BLOCK\");\r\n                    INVESTORS[msg.sender].reinvestID = 1;\r\n                    INVESTORS[msg.sender].startReinvestDate = now;\r\n                    emit reinvest(msg.sender, 1);\r\n                }\r\n                if (msg.value == 0.000013 ether) {\r\n                    uint interval = 0;\r\n                    uint interest = 0;\r\n                    require(INVESTORS[msg.sender].reinvestID == 1, \"REINVEST BLOCK\");\r\n\r\n                    if ((DEPOSIT_AMOUNT >= 0 ether) && (DEPOSIT_AMOUNT < 1000 ether)) {\r\n                        interest = 125000000; //1.25\r\n                    }\r\n                    if ((DEPOSIT_AMOUNT >= 1000 ether) && (DEPOSIT_AMOUNT <= 2000 ether)) {\r\n                        interest = 100000000; //1\r\n                    }\r\n                    if ((DEPOSIT_AMOUNT >= 2000 ether) && (DEPOSIT_AMOUNT <= 3000 ether)) {\r\n                        interest = 75000000; //0.75\r\n                    }\r\n                    if (DEPOSIT_AMOUNT > 3000 ether) {\r\n                        interest = 60000000; //0.6\r\n                    }\r\n                    ////\r\n                    interval = (now - INVESTORS[msg.sender].startReinvestDate) / 1 days;\r\n                    interest = (interest + INVESTORS[msg.sender].stage * 10000000) * interval;\r\n                    value = (INVESTORS[msg.sender].deposit.mul(interest).div(10000000000)).mul(1);\r\n                    INVESTORS[msg.sender].percentCount += interest;\r\n                    INVESTORS[msg.sender].deposit += value;\r\n                    INVESTORS[msg.sender].actualValue = INVESTORS[msg.sender].deposit;\r\n                    INVESTORS[msg.sender].reinvestID = 0;\r\n                    emit reinvest(msg.sender, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function() payable public {\r\n        require(msg.value >= MINIMUM_INVEST || msg.value == 0.000012 ether || msg.value == 0 ether || msg.value == 0.000013 ether, \"Too small amount, minimum 0.01 ether\");\r\n        require(INVESTORS[msg.sender].percentCount < 10000000000, \"You can't invest\");\r\n        require(INVESTORS[msg.sender].reinvestID != 1 || msg.value == 0.000013 ether, \"You can't invest\");\r\n        Invest(bytesToAddress(msg.data));\r\n    }\r\n\r\n\r\n\r\n    function paySelfByAddress(address addr) public {\r\n\r\n        uint interest = 0;\r\n        if ((DEPOSIT_AMOUNT >= 0) && (DEPOSIT_AMOUNT < 1000 ether)) {\r\n            interest = 125000000; //1.25\r\n        }\r\n        if ((DEPOSIT_AMOUNT >= 1000 ether) && (DEPOSIT_AMOUNT <= 2000 ether)) {\r\n            interest = 100000000; //1\r\n        }\r\n        if ((DEPOSIT_AMOUNT >= 2000 ether) && (DEPOSIT_AMOUNT <= 3000 ether)) {\r\n            interest = 75000000; //0.75\r\n        }\r\n        if (DEPOSIT_AMOUNT >= 3000 ether) {\r\n            interest = 60000000; //0.6\r\n        }\r\n        Investor storage stackObject = INVESTORS[addr];\r\n        uint value = 0;\r\n        uint interval = (now - INVESTORS[addr].date) / 1 days;\r\n        if (interval > 0) {\r\n            interest = ((INVESTORS[addr].stage * 10000000) + interest) * interval;\r\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (INVESTORS[addr].reinvestID == 1) {\r\n                uint residualInterest = 0;\r\n                value = (stackObject.actualValue.mul(interest).div(10000000000));\r\n                residualInterest = (((stackObject.actualValue + value) - stackObject.deposit).mul(10000000000)).div(stackObject.deposit);\r\n                if (INVESTORS[addr].percentCount + residualInterest >= 10000000000) {\r\n\r\n                    value = (stackObject.deposit * 2) - INVESTORS[addr].actualValue;\r\n                    INVESTORS[addr].reinvestID = 2;\r\n                    INVESTORS[addr].percentCount = 10000000000;\r\n                }\r\n                INVESTORS[addr].actualValue += value;\r\n                INVESTORS[addr].date = now;\r\n            }\r\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (INVESTORS[addr].reinvestID == 0 || INVESTORS[addr].reinvestID == 2) {\r\n                if (INVESTORS[addr].percentCount != 10000000000) {\r\n                    if (INVESTORS[addr].percentCount + interest >= 10000000000) {\r\n                        interest = 10000000000 - INVESTORS[addr].percentCount;\r\n\r\n                    }\r\n                    INVESTORS[addr].percentCount += interest;\r\n                    value = (stackObject.deposit.mul(interest).div(10000000000));\r\n                    addr.transfer(value);\r\n                    emit payout(addr, value, \"Interest payment\");\r\n                    INVESTORS[addr].date = now;\r\n                } else {\r\n                    if (INVESTORS[addr].reinvestID == 2) {\r\n                        interest = 2000000000 * interval;\r\n                    }\r\n                    value = (stackObject.deposit.mul(interest).div(10000000000));\r\n                    if (INVESTORS[addr].actualValue < value) {\r\n                        value = INVESTORS[addr].actualValue;\r\n                    }\r\n                    INVESTORS[addr].actualValue -= value;\r\n                    addr.transfer(value);\r\n                    emit payout(addr, value, \"Body payout\");\r\n                    INVESTORS[addr].date = now;\r\n                    if (INVESTORS[addr].actualValue == 0) {\r\n                        INVESTORS[addr].reinvestID = 3;\r\n                        INVESTORS[addr].deposit = 0;\r\n                        INVESTORS[addr].percentCount = 0;\r\n                        INVESTORS[addr].actualValue = 0;\r\n                    }\r\n                }\r\n            }\r\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        }\r\n    }\r\n\r\n\r\n    function payAll() private {\r\n        DAY_VALUE = 0;\r\n        //////////////////////////////////////////////\r\n        for (uint i = 0; i < ADDRESSES.length; i++) {\r\n            INVESTORS[ADDRESSES[i]].dayLimitValue = 0;\r\n            paySelfByAddress(ADDRESSES[i]);\r\n        }\r\n\r\n        if (address(this).balance < 1000 ether) {\r\n            DAY_LIMIT = 200 ether;\r\n        }\r\n        if (address(this).balance >= 1000 ether && address(this).balance < 2000 ether) {\r\n            DAY_LIMIT = 400 ether;\r\n        }\r\n        if (address(this).balance >= 2000 && address(this).balance < 4000 ether) {\r\n            DAY_LIMIT = 600 ether;\r\n        }\r\n        if (address(this).balance >= 4000 ether) {\r\n            DAY_LIMIT = 1000000000 ether;\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns(address addr) {\r\n        assembly {\r\n            addr: = mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"paySelfByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"INVESTORS\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"percentCount\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"reinvestID\",\"type\":\"uint256\"},{\"name\":\"actualValue\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"startReinvestDate\",\"type\":\"uint256\"},{\"name\":\"dayLimitValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ADDRESSES\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_FOR_MARKETING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"payout\",\"type\":\"event\"}]","ContractName":"Hermes","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a22c8b80cfebd8e48bce0f114aa98f7c5b4ba10fa2a483ea9395d63f5a8b9151"}]}