{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address _who) public constant returns (uint);\r\n  function allowance(address _owner, address _spender) public constant returns (uint);\r\n\r\n  function transfer(address _to, uint _value) public returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\r\n  function approve(address _spender, uint _value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract Haltable is Ownable {\r\n\r\n    // @dev To Halt in Emergency Condition\r\n    bool public halted = false;\r\n    //empty contructor\r\n    function Haltable() public {}\r\n\r\n    // @dev Use this as function modifier that should not execute if contract state Halted\r\n    modifier stopIfHalted {\r\n      require(!halted);\r\n      _;\r\n    }\r\n\r\n    // @dev Use this as function modifier that should execute only if contract state Halted\r\n    modifier runIfHalted{\r\n      require(halted);\r\n      _;\r\n    }\r\n\r\n    // @dev called by only owner in case of any emergecy situation\r\n    function halt() onlyOwner stopIfHalted public {\r\n        halted = true;\r\n    }\r\n    // @dev called by only owner to stop the emergency situation\r\n    function unHalt() onlyOwner runIfHalted public {\r\n        halted = false;\r\n    }\r\n}\r\n\r\ncontract EEZOToken is ERC20,SafeMath,Haltable {\r\n\r\n    //flag to determine if address is for real contract or not\r\n    bool public isEEZOToken = false;\r\n\r\n    //Token related information\r\n    string public constant name = \"Element Zero\";\r\n    string public constant symbol = \"EEZO\";\r\n    uint256 public constant decimals = 18; // decimal places\r\n\r\n    //Address of Pre-ICO contract\r\n    address public preIcoContract;\r\n    //Address of ICO contract\r\n    address public icoContract;\r\n\r\n    //mapping of token balances\r\n    mapping (address => uint256) balances;\r\n    //mapping of allowed address for each address with tranfer limit\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    //mapping of allowed address for each address with burnable limit\r\n    mapping (address => mapping (address => uint256)) allowedToBurn;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address owner,uint256 _value);\r\n    event ApproveBurner(address owner, address canBurn, uint256 value);\r\n    event BurnFrom(address _from,uint256 _value);\r\n\r\n    function EEZOToken() public {\r\n        totalSupply = 24000000 ether;\r\n        balances[msg.sender] = totalSupply;\r\n        isEEZOToken = true;\r\n        emit Transfer(address(0), msg.sender,totalSupply);\r\n    }\r\n\r\n    //Owner can Set Pre-ICO contract address\r\n    //@ param _preIcoContract address of Pre-ICO contract.\r\n    function setPreIcoContract(address _preIcoContract) public onlyOwner {\r\n        require(_preIcoContract != 0);\r\n        preIcoContract = _preIcoContract;\r\n    }\r\n\r\n    //Owner can Set ICO contract address\r\n    //@ param _icoContract address of ICO contract.\r\n    function setIcoContract(address _icoContract) public onlyOwner {\r\n        require(_icoContract != 0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    // @param _who The address of the investor to check balance\r\n    // @return balance tokens of investor address\r\n    function balanceOf(address _who) public constant returns (uint) {\r\n        return balances[_who];\r\n    }\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens allowed to spent\r\n    function allowanceToBurn(address _owner, address _spender) public constant returns (uint) {\r\n        return allowedToBurn[_owner][_spender];\r\n    }\r\n\r\n    //  Transfer `value` EEZO tokens from sender's account\r\n    // `msg.sender` to provided account address `to`.\r\n    // @param _to The address of the recipient\r\n    // @param _value The number of EEZO tokens to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool ok) {\r\n        //validate receiver address and value.Not allow 0 value\r\n        require(_to != 0 && _value > 0);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        //Check sender have enough balance\r\n        require(senderBalance >= _value);\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[msg.sender] = senderBalance;\r\n        balances[_to] = safeAdd(balances[_to],_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Transfer `value` EEZO tokens from sender 'from'\r\n    // to provided account address `to`.\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The number of EEZO to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\r\n        //validate _from,_to address and _value(Not allow with 0)\r\n        require(_from != 0 && _to != 0 && _value > 0);\r\n        //Check amount is approved by the owner for spender to spent and owner have enough balances\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = safeSub(balances[_from],_value);\r\n        balances[_to] = safeAdd(balances[_to],_value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  `msg.sender` approves `spender` to spend `value` tokens\r\n    // @param spender The address of the account able to transfer the tokens\r\n    // @param value The amount of wei to be approved for transfer\r\n    // @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool ok) {\r\n        //validate _spender address\r\n        require(_spender != 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Mint `amount` EEZO tokens\r\n    // `msg.sender` to provided account and amount.\r\n    // @param _account The address of the mint token recipient\r\n    // @param _amount The number of EEZO tokens to mint\r\n    // @return Whether the Mint was successful or not\r\n    function mint(address _account, uint256 _amount) public stopIfHalted returns (bool ok) {\r\n        require(msg.sender == owner || msg.sender == preIcoContract || msg.sender == icoContract);\r\n        require(_account != 0);\r\n        totalSupply = safeAdd(totalSupply,_amount);\r\n        balances[_account] = safeAdd(balances[_account],_amount);\r\n        emit Mint(_account, _amount);\r\n        emit Transfer(address(0), _account, _amount);\r\n        return true;\r\n    }\r\n\r\n    //  `msg.sender` approves `_canBurn` to burn `value` tokens\r\n    // @param _canBurn The address of the account able to burn the tokens\r\n    // @param _value The amount of wei to be approved for burn\r\n    // @return Whether the approval was successful or not\r\n    function approveForBurn(address _canBurn, uint _value) public returns (bool ok) {\r\n        //validate _spender address\r\n        require(_canBurn != 0);\r\n        allowedToBurn[msg.sender][_canBurn] = _value;\r\n        ApproveBurner(msg.sender, _canBurn, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Burn `value` EEZO tokens from sender's account\r\n    // `msg.sender` to provided _value.\r\n    // @param _value The number of EEZO tokens to destroy\r\n    // @return Whether the Burn was successful or not\r\n    function burn(uint _value) public returns (bool ok) {\r\n        //validate receiver address and value.Now allow 0 value\r\n        require(_value > 0);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        require(senderBalance >= _value);\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[msg.sender] = senderBalance;\r\n        totalSupply = safeSub(totalSupply,_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Burn `value` EEZO tokens from sender 'from'\r\n    // to provided account address `to`.\r\n    // @param from The address of the burner\r\n    // @param to The address of the token holder from token to burn\r\n    // @param value The number of EEZO to burn\r\n    // @return Whether the transfer was successful or not\r\n    function burnFrom(address _from, uint _value) public returns (bool ok) {\r\n        //validate _from,_to address and _value(Now allow with 0)\r\n        require(_from != 0 && _value > 0);\r\n        //Check amount is approved by the owner to burn and owner have enough balances\r\n        require(allowedToBurn[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = safeSub(balances[_from],_value);\r\n        totalSupply = safeSub(totalSupply,_value);\r\n        allowedToBurn[_from][msg.sender] = safeSub(allowedToBurn[_from][msg.sender],_value);\r\n        BurnFrom(_from, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_preIcoContract\",\"type\":\"address\"}],\"name\":\"setPreIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_canBurn\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveForBurn\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEEZOToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceToBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"canBurn\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApproveBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EEZOToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://384cd88739d7eddbcc9d61b9012ae0b39cc0525eded35e83adb1f3ac8108db42"}]}