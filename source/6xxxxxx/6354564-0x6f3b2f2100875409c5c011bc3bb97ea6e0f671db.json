{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ToknTalkToken {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    address public mintSigner = msg.sender;\r\n    string public constant name = \"https://tokntalk.club\";\r\n    string public constant symbol = \"TTT\";\r\n    uint public constant decimals = 0;\r\n    uint public totalSupply = 0;\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    mapping (address => uint) public mintedBy;\r\n\r\n    function transfer(address to, uint amount) external returns (bool) {\r\n        require(to != address(this));\r\n        require(to != 0);\r\n        uint balanceOfMsgSender = balanceOf[msg.sender];\r\n        require(balanceOfMsgSender >= amount);\r\n        balanceOf[msg.sender] = balanceOfMsgSender - amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) external returns (bool) {\r\n        require(to != address(this));\r\n        require(to != 0);\r\n        uint allowanceMsgSender = allowance[from][msg.sender];\r\n        require(allowanceMsgSender >= amount);\r\n        if (allowanceMsgSender != MAX_UINT) {\r\n            allowance[from][msg.sender] = allowanceMsgSender - amount;\r\n        }\r\n        uint balanceOfFrom = balanceOf[from];\r\n        require(balanceOfFrom >= amount);\r\n        balanceOf[from] = balanceOfFrom - amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function mintUsingSignature(uint max, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes memory maxString = toString(max);\r\n        bytes memory messageLengthString = toString(124 + maxString.length);\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n\",\r\n            messageLengthString,\r\n            \"I approve address 0x\",\r\n            toHexString(msg.sender),\r\n            \" to mint token 0x\",\r\n            toHexString(this),\r\n            \" up to \",\r\n            maxString\r\n        ));\r\n        require(ecrecover(hash, v, r, s) == mintSigner);\r\n        uint mintedByMsgSender = mintedBy[msg.sender];\r\n        require(max >= mintedByMsgSender);\r\n        uint minting = max - mintedByMsgSender;\r\n        totalSupply += minting;\r\n        balanceOf[msg.sender] += minting;\r\n        mintedBy[msg.sender] = max;\r\n        emit Transfer(0, msg.sender, minting);\r\n    }\r\n\r\n    function toString(uint value) private pure returns (bytes) {\r\n        uint tmp = value;\r\n        uint lengthOfValue;\r\n        do {\r\n            lengthOfValue++;\r\n            tmp /= 10;\r\n        } while (tmp != 0);\r\n        bytes memory valueString = new bytes(lengthOfValue);\r\n        while (lengthOfValue != 0) {\r\n            valueString[--lengthOfValue] = bytes1(48 + value % 10);\r\n            value /= 10;\r\n        }\r\n        return valueString;\r\n    }\r\n\r\n    function toHexString(address addr) private pure returns (bytes) {\r\n        uint addrUint = uint(addr);\r\n        uint lengthOfAddr = 40;\r\n        bytes memory addrString = new bytes(lengthOfAddr);\r\n        while (addrUint != 0) {\r\n            addrString[--lengthOfAddr] = bytes1((addrUint % 16 < 10 ? 0x30 : 0x57) + addrUint % 16);\r\n            addrUint /= 16;\r\n        }\r\n        return addrString;\r\n    }\r\n\r\n    function setMintSigner(address newMintSigner) external {\r\n        require(msg.sender == mintSigner);\r\n        mintSigner = newMintSigner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMintSigner\",\"type\":\"address\"}],\"name\":\"setMintSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintUsingSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ToknTalkToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c5438b0fdf74f9181ae562eb41c14f74e598826c3a3ca298369d41b7d8b7e37"}]}