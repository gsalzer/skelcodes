{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InstantListingV2.sol\r\n\r\ncontract InstantListingV2 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Proposal {\r\n        address tokenAddress;\r\n        string projectName;\r\n        string websiteUrl;\r\n        string logoUrl;\r\n        string whitepaperUrl;\r\n        string legalDocumentUrl;\r\n        uint256 icoStartDate;\r\n        uint256 icoEndDate;\r\n        uint256 icoRate; // If 4000 COB = 1 ETH, then icoRate = 4000.\r\n        uint256 totalRaised;\r\n    }\r\n\r\n    struct ProposalInfo {\r\n        uint256 totalContributions;\r\n        address sender;\r\n        uint256 round;\r\n    }\r\n\r\n    // Round number\r\n    uint256 public round;\r\n\r\n    // The address of beneficiary.\r\n    address public beneficiary;\r\n\r\n    // Proposals.\r\n    mapping(uint256 => mapping(address => Proposal)) public proposals;\r\n\r\n    // Mapping of tokenAddress to ProposalInfo\r\n    mapping(address => ProposalInfo) public proposalInfos;\r\n\r\n    // Contribution of each round.\r\n    mapping(uint256 => uint256) public roundContribution;\r\n\r\n    // A mapping from token contract address to the last refundable unix\r\n    // timestamp, 0 means not refundable.\r\n    mapping(address => uint256) public refundable;\r\n\r\n    // Configs.\r\n    uint256 public startTime;\r\n    uint256 public hardCap;\r\n    uint256 public duration;\r\n\r\n    // Events.\r\n    event TokenListed(uint256 indexed _round, address _tokenAddress);\r\n    event TokenListingCancelled(address _tokenAddress);\r\n    event RoundFinalized(uint256 _round);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function getCurrentTimestamp() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    function initialize(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function reset(\r\n        uint256 _startTime,\r\n        uint256 _duration,\r\n        uint256 _hardCap)\r\n        onlyOwner public {\r\n        require(getCurrentTimestamp() >= startTime + duration);\r\n\r\n        // Transfer all balance except for latest round,\r\n        // which is reserved for refund.\r\n        if (round > 0) {\r\n            beneficiary.transfer(address(this).balance - roundContribution[round]);\r\n        }\r\n\r\n        startTime = _startTime;\r\n        duration = _duration;\r\n        hardCap = _hardCap;\r\n\r\n        emit RoundFinalized(round);\r\n        round += 1;\r\n    }\r\n\r\n    function propose(\r\n        address _tokenAddress,\r\n        string _projectName,\r\n        string _websiteUrl,\r\n        string _logoUrl,\r\n        string _whitepaperUrl,\r\n        string _legalDocumentUrl,\r\n        uint256 _icoStartDate,\r\n        uint256 _icoEndDate,\r\n        uint256 _icoRate,\r\n        uint256 _totalRaised) public payable {\r\n\r\n        require(proposalInfos[_tokenAddress].totalContributions == 0);\r\n        require(getCurrentTimestamp() < startTime + duration);\r\n        require(msg.value >= hardCap);\r\n\r\n        proposals[round][_tokenAddress] = Proposal({\r\n            tokenAddress: _tokenAddress,\r\n            projectName: _projectName,\r\n            websiteUrl: _websiteUrl,\r\n            logoUrl: _logoUrl,\r\n            whitepaperUrl: _whitepaperUrl,\r\n            legalDocumentUrl: _legalDocumentUrl,\r\n            icoStartDate: _icoStartDate,\r\n            icoEndDate: _icoEndDate,\r\n            icoRate: _icoRate,\r\n            totalRaised: _totalRaised\r\n        });\r\n\r\n        proposalInfos[_tokenAddress] = ProposalInfo({\r\n            totalContributions: msg.value,\r\n            sender: msg.sender,\r\n            round: round\r\n        });\r\n\r\n        roundContribution[round] = roundContribution[round].add(msg.value);\r\n        emit TokenListed(round, _tokenAddress);\r\n    }\r\n\r\n    function setRefundable(address _tokenAddress, uint256 endTime)\r\n        onlyOwner public {\r\n        refundable[_tokenAddress] = endTime;\r\n    }\r\n\r\n    function refund(address _tokenAddress) public {\r\n        require(refundable[_tokenAddress] > 0 &&\r\n                getCurrentTimestamp() < refundable[_tokenAddress]);\r\n\r\n        uint256 value = proposalInfos[_tokenAddress].totalContributions;\r\n        proposalInfos[_tokenAddress].totalContributions = 0;\r\n        roundContribution[proposalInfos[_tokenAddress].round] =\r\n            roundContribution[proposalInfos[_tokenAddress].round].sub(value);\r\n        proposalInfos[_tokenAddress].sender.transfer(value);\r\n\r\n        emit TokenListingCancelled(_tokenAddress);\r\n    }\r\n\r\n    function getContributions(address _tokenAddress)\r\n        view public returns (uint256) {\r\n        return proposalInfos[_tokenAddress].totalContributions;\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        selfdestruct(beneficiary);\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_projectName\",\"type\":\"string\"},{\"name\":\"_websiteUrl\",\"type\":\"string\"},{\"name\":\"_logoUrl\",\"type\":\"string\"},{\"name\":\"_whitepaperUrl\",\"type\":\"string\"},{\"name\":\"_legalDocumentUrl\",\"type\":\"string\"},{\"name\":\"_icoStartDate\",\"type\":\"uint256\"},{\"name\":\"_icoEndDate\",\"type\":\"uint256\"},{\"name\":\"_icoRate\",\"type\":\"uint256\"},{\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"projectName\",\"type\":\"string\"},{\"name\":\"websiteUrl\",\"type\":\"string\"},{\"name\":\"logoUrl\",\"type\":\"string\"},{\"name\":\"whitepaperUrl\",\"type\":\"string\"},{\"name\":\"legalDocumentUrl\",\"type\":\"string\"},{\"name\":\"icoStartDate\",\"type\":\"uint256\"},{\"name\":\"icoEndDate\",\"type\":\"uint256\"},{\"name\":\"icoRate\",\"type\":\"uint256\"},{\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalInfos\",\"outputs\":[{\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setRefundable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"RoundFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InstantListingV2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9fd84e17f6b8b5450bea6d9d25f7db373e8c541163a0f460aa6c42d782958d6"}]}