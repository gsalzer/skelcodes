{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis software code is prohibited for copying and distribution. \r\nThe violation of this requirement will be punished by law. \r\n\r\nContact e-mail: thebigbangonline@protonmail.com\r\n\r\nProject site: http://thebigbang.online/\r\n\r\nCalling the methods of this smart contract you accept the rules of the \"The Big Bang\" game, described by this program code.\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public manager;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n  }\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }  \r\n  \r\n  modifier onlyOwnerOrManager() {\r\n     require((msg.sender == owner)||(msg.sender == manager));\r\n      _;\r\n  }  \r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n  \r\n  function setManager(address _manager) public onlyOwner {\r\n      require(_manager != address(0));\r\n      manager = _manager;\r\n  }  \r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract TheBigBangOnline is Ownable {\r\n        \r\n    using SafeMath for uint256;\r\n    \r\n    bool contractProtection = true;\r\n    \r\n    modifier notFromContract() {\r\n      uint32 size;\r\n      address investor = msg.sender;\r\n      assembly {\r\n        size := extcodesize(investor)\r\n      }\r\n      if ((size > 0) && (contractProtection == true)){\r\n          revert(\"call from contract\");\r\n      }        \r\n        _;\r\n    }     \r\n    \r\n    event payEventLog(address indexed _address, uint value, uint periodCount, uint percent, uint time);\r\n    event payRefEventLog(address indexed _addressFrom, address indexed _addressTo, uint value, uint percent, uint time);\r\n    event payJackpotLog(address indexed _address, uint value, uint totalValue, uint userValue, uint time);    \r\n    \r\n    uint public period = 24 hours;\r\n    uint public startTime = 1537142400; //  Mon, 17 Sep 2018 00:00:00 UTC\r\n    \r\n    uint public basicDayPercent = 300; //3%\r\n    uint public bonusDayPercent = 330; //3.3%\r\n    \r\n    uint public referrerLevel1Percent = 250; //2.5%\r\n    uint public referrerLevel2Percent = 500; //5%\r\n    uint public referrerLevel3Percent = 1000; //10%    \r\n    \r\n    uint public referrerLevel2Ether = 1 ether;\r\n    uint public referrerLevel3Ether = 10 ether;\r\n    \r\n    uint public minBetLevel1_2 = 0.01  ether;\r\n    uint public minBetLevel3 = 0.02  ether;\r\n    uint public minBetLevel4 = 0.05  ether;  //If more than 100 ETH in Jackpot Bank  \r\n    \r\n    uint public referrerAndOwnerPercent = 2000; //20%    \r\n    \r\n    uint public currBetID = 1;\r\n    \r\n    \r\n    struct BetStruct {\r\n        uint value;\r\n        uint refValue;\r\n        uint firstBetTime;\r\n        uint lastBetTime;\r\n        uint lastPaymentTime;\r\n        uint nextPayAfterTime;\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n    }\r\n    \r\n    mapping (address => BetStruct) public betsDatabase;\r\n    mapping (uint => address) public addressList;\r\n    \r\n    // Jackpot\r\n    uint public jackpotLevel2Amount = 1 ether;\r\n    uint public jackpotLevel3Amount = 10 ether;\r\n    uint public jackpotLevel4Amount = 100 ether;    \r\n    uint public jackpotPercent = 1000; //10%\r\n    uint public jackpotBank = 0;\r\n    uint public jackpotMaxTime = 24 hours;\r\n    uint public jackpotTime = startTime + jackpotMaxTime;  \r\n    uint public increaseJackpotTimeAfterBetLevel1 = 5 minutes; \r\n    uint public increaseJackpotTimeAfterBetLevel2_3 = 1 minutes;  \r\n    uint public increaseJackpotTimeAfterBetLevel4 = 30 seconds;  //If more than 100 ETH in Jackpot Bank \r\n    \r\n    uint public gameRound = 1;   \r\n    uint public currJackpotBetID = 0;\r\n    \r\n    struct BetStructForJackpot {\r\n        uint value;\r\n        address user;\r\n    }\r\n    mapping (uint => BetStructForJackpot) public betForJackpot;    \r\n    \r\n    \r\n     \r\n    \r\n    constructor() public {\r\n    \r\n    }\r\n\r\n\r\n function setContractProtection(bool _contractProtection) public onlyOwner {\r\n      contractProtection = _contractProtection;\r\n }\r\n \r\n function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n    assembly {\r\n        addr := mload(add(bys, 20))\r\n    }\r\n } \r\n\r\n function allBalance() public constant returns (uint) {\r\n     return address(this).balance;\r\n }    \r\n  \r\n function addToJackpot() public payable onlyOwnerOrManager {\r\n     jackpotBank += msg.value;\r\n }\r\n\r\n    \r\n function createBet(uint _referrerID) public payable notFromContract {\r\n     \r\n        if( (_referrerID >= currBetID)){  \r\n            revert(\"Incorrect _referrerID\");\r\n        }\r\n\r\n        if(  (msg.value < minBetLevel1_2)||(msg.value < minBetLevel3 && jackpotBank >= jackpotLevel3Amount)||(msg.value < minBetLevel4 && jackpotBank >= jackpotLevel4Amount)  ){\r\n            \r\n                revert(\"Amount beyond acceptable limits\");\r\n        }\r\n            \r\n            if(betsDatabase[msg.sender].isExist){ \r\n                \r\n                if( (betsDatabase[msg.sender].nextPayAfterTime < now) && (gameRound==1) ){\r\n                    payRewardForAddress(msg.sender);    \r\n                }            \r\n                betsDatabase[msg.sender].value += msg.value;\r\n                betsDatabase[msg.sender].lastBetTime = now;\r\n                \r\n                \r\n            } else {\r\n                BetStruct memory betStruct;\r\n                \r\n                uint nextPayAfterTime = startTime+((now.sub(startTime)).div(period)).mul(period)+period;\r\n    \r\n                betStruct = BetStruct({ \r\n                    value : msg.value,\r\n                    refValue : 0,\r\n                    firstBetTime : now,\r\n                    lastBetTime : now,\r\n                    lastPaymentTime : 0,\r\n                    nextPayAfterTime: nextPayAfterTime,\r\n                    isExist : true,\r\n                    id : currBetID,\r\n                    referrerID : _referrerID\r\n                });\r\n            \r\n                betsDatabase[msg.sender] = betStruct;\r\n                addressList[currBetID] = msg.sender;\r\n                \r\n                currBetID++;\r\n            }\r\n            \r\n            if(now > jackpotTime){\r\n                getJackpot();\r\n            }            \r\n            \r\n            currJackpotBetID++;\r\n            \r\n            BetStructForJackpot memory betStructForJackpot;\r\n            betStructForJackpot.user = msg.sender;\r\n            betStructForJackpot.value = msg.value;\r\n            \r\n            betForJackpot[currJackpotBetID] = betStructForJackpot;\r\n            \r\n            if(jackpotBank >= jackpotLevel4Amount){\r\n                jackpotTime += increaseJackpotTimeAfterBetLevel4;\r\n            }else if(jackpotBank >= jackpotLevel2Amount){\r\n                jackpotTime += increaseJackpotTimeAfterBetLevel2_3;\r\n            }else {\r\n                jackpotTime += increaseJackpotTimeAfterBetLevel1;\r\n            }\r\n            \r\n            \r\n            if( jackpotTime > now + jackpotMaxTime ) {\r\n                jackpotTime = now + jackpotMaxTime;\r\n            } \r\n            \r\n            if(gameRound==1){\r\n                jackpotBank += msg.value.mul(jackpotPercent).div(10000);\r\n            }\r\n            else {\r\n                jackpotBank += msg.value.mul(10000-referrerAndOwnerPercent).div(10000);\r\n            }\r\n    \r\n            if(betsDatabase[msg.sender].referrerID!=0){\r\n                betsDatabase[addressList[betsDatabase[msg.sender].referrerID]].refValue += msg.value;\r\n                \r\n                uint currReferrerPercent;\r\n                uint currReferrerValue = betsDatabase[addressList[betsDatabase[msg.sender].referrerID]].value.add(betsDatabase[addressList[betsDatabase[msg.sender].referrerID]].refValue);\r\n                \r\n                if (currReferrerValue >= referrerLevel3Ether){\r\n                    currReferrerPercent = referrerLevel3Percent;\r\n                } else if (currReferrerValue >= referrerLevel2Ether) {\r\n                   currReferrerPercent = referrerLevel2Percent; \r\n                } else {\r\n                    currReferrerPercent = referrerLevel1Percent;\r\n                }\r\n                \r\n                uint refToPay = msg.value.mul(currReferrerPercent).div(10000);\r\n                \r\n                addressList[betsDatabase[msg.sender].referrerID].transfer( refToPay );\r\n                owner.transfer(msg.value.mul(referrerAndOwnerPercent - currReferrerPercent).div(10000));\r\n                \r\n                emit payRefEventLog(msg.sender, addressList[betsDatabase[msg.sender].referrerID], refToPay, currReferrerPercent, now);\r\n            } else {\r\n                owner.transfer(msg.value.mul(referrerAndOwnerPercent).div(10000));\r\n            }\r\n  }\r\n    \r\n  function () public payable notFromContract {\r\n      \r\n      if(msg.value == 0){\r\n            payRewardForAddress(msg.sender);         \r\n      }else{\r\n      \r\n            uint refId = 1;\r\n            address referrer = bytesToAddress(msg.data);\r\n            \r\n            if (betsDatabase[referrer].isExist){\r\n                refId = betsDatabase[referrer].id;\r\n            }\r\n    \r\n          \r\n            createBet(refId);\r\n      }\r\n  } \r\n  \r\n  \r\n  function getReward() public notFromContract {\r\n        payRewardForAddress(msg.sender);\r\n  }\r\n  \r\n  function getRewardForAddress(address _address) public onlyOwnerOrManager {\r\n        payRewardForAddress(_address);\r\n  }  \r\n  \r\n  function payRewardForAddress(address _address) internal  {\r\n        if(gameRound!=1){\r\n             revert(\"The first round end\");    \r\n        }        \r\n      \r\n        if(!betsDatabase[_address].isExist){\r\n             revert(\"Address are not an investor\");    \r\n        }\r\n        \r\n        if(betsDatabase[_address].nextPayAfterTime >= now){\r\n             revert(\"The payout time has not yet come\");    \r\n        }\r\n\r\n        uint periodCount = now.sub(betsDatabase[_address].nextPayAfterTime).div(period).add(1);\r\n        uint percent = basicDayPercent;\r\n        \r\n        if(betsDatabase[_address].referrerID>0){\r\n            percent = bonusDayPercent;\r\n        }\r\n        \r\n        uint toPay = periodCount.mul(betsDatabase[_address].value).div(10000).mul(percent);\r\n        \r\n        betsDatabase[_address].lastPaymentTime = now;\r\n        betsDatabase[_address].nextPayAfterTime += periodCount.mul(period); \r\n        \r\n        if(toPay.add(jackpotBank) >= address(this).balance.sub(msg.value) ){\r\n            toPay = address(this).balance.sub(jackpotBank).sub(msg.value);\r\n            gameRound = 2;\r\n        }\r\n        \r\n        _address.transfer(toPay);\r\n        \r\n        emit payEventLog(_address, toPay, periodCount, percent, now);\r\n  }\r\n  \r\n  function getJackpot() public notFromContract {\r\n        if(now <= jackpotTime){\r\n            revert(\"Jackpot did not come\");  \r\n        }\r\n        \r\n        jackpotTime = now + jackpotMaxTime;\r\n        \r\n        if(currJackpotBetID > 5){\r\n            uint toPay = jackpotBank;\r\n            jackpotBank = 0;            \r\n            \r\n            if(toPay>address(this).balance){\r\n               toPay = address(this).balance; \r\n            }\r\n            \r\n            uint totalValue = betForJackpot[currJackpotBetID].value + betForJackpot[currJackpotBetID - 1].value + betForJackpot[currJackpotBetID - 2].value + betForJackpot[currJackpotBetID - 3].value + betForJackpot[currJackpotBetID - 4].value;\r\n            \r\n            betForJackpot[currJackpotBetID].user.transfer(toPay.mul(betForJackpot[currJackpotBetID].value).div(totalValue) );\r\n            emit payJackpotLog(betForJackpot[currJackpotBetID].user, toPay.mul(betForJackpot[currJackpotBetID].value).div(totalValue), totalValue, betForJackpot[currJackpotBetID].value, now);\r\n            \r\n            betForJackpot[currJackpotBetID-1].user.transfer(toPay.mul(betForJackpot[currJackpotBetID-1].value).div(totalValue) );\r\n            emit payJackpotLog(betForJackpot[currJackpotBetID-1].user, toPay.mul(betForJackpot[currJackpotBetID-1].value).div(totalValue), totalValue, betForJackpot[currJackpotBetID-1].value, now);\r\n            \r\n            betForJackpot[currJackpotBetID-2].user.transfer(toPay.mul(betForJackpot[currJackpotBetID-2].value).div(totalValue) );\r\n            emit payJackpotLog(betForJackpot[currJackpotBetID-2].user, toPay.mul(betForJackpot[currJackpotBetID-2].value).div(totalValue), totalValue, betForJackpot[currJackpotBetID-2].value, now);\r\n            \r\n            betForJackpot[currJackpotBetID-3].user.transfer(toPay.mul(betForJackpot[currJackpotBetID-3].value).div(totalValue) );\r\n            emit payJackpotLog(betForJackpot[currJackpotBetID-3].user, toPay.mul(betForJackpot[currJackpotBetID-3].value).div(totalValue), totalValue, betForJackpot[currJackpotBetID-3].value, now);\r\n            \r\n            betForJackpot[currJackpotBetID-4].user.transfer(toPay.mul(betForJackpot[currJackpotBetID-4].value).div(totalValue) );\r\n            emit payJackpotLog(betForJackpot[currJackpotBetID-4].user, toPay.mul(betForJackpot[currJackpotBetID-4].value).div(totalValue), totalValue, betForJackpot[currJackpotBetID-4].value, now);\r\n        }\r\n  }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"referrerLevel2Ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetLevel1_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusDayPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseJackpotTimeAfterBetLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLevel3Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToJackpot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerLevel3Ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betForJackpot\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotMaxTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basicDayPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseJackpotTimeAfterBetLevel2_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetLevel3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currBetID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRewardForAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"createBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerLevel2Percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increaseJackpotTimeAfterBetLevel4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetLevel4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLevel4Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerLevel1Percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betsDatabase\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"refValue\",\"type\":\"uint256\"},{\"name\":\"firstBetTime\",\"type\":\"uint256\"},{\"name\":\"lastBetTime\",\"type\":\"uint256\"},{\"name\":\"lastPaymentTime\",\"type\":\"uint256\"},{\"name\":\"nextPayAfterTime\",\"type\":\"uint256\"},{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currJackpotBetID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerAndOwnerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLevel2Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerLevel3Percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractProtection\",\"type\":\"bool\"}],\"name\":\"setContractProtection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"periodCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"payEventLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addressFrom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_addressTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"payRefEventLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"payJackpotLog\",\"type\":\"event\"}]","ContractName":"TheBigBangOnline","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca7256955baa8ccbc4f5389bfb5ec3fa60acb43c5395526131719416481354f3"}]}