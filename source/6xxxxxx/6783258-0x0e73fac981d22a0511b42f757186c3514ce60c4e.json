{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Htlc {\r\n\r\n    // ENUMS\r\n\r\n    enum State { Created, Refunded, Redeemed }\r\n\r\n    // TYPES\r\n\r\n    struct Channel { // Locks ETH in a channel by secret (redeemChannel) or time (refundChannels).\r\n        address initiator; // Initiated this channel.\r\n        address beneficiary; // Beneficiary of this channel.\r\n        uint amount; // If zero then channel not active anymore.\r\n        uint commission; // Commission amount to be paid to multisig authority.\r\n        uint createdAt; // Channel creation timestamp in seconds.\r\n        uint expiresAt; // Channel expiration timestamp in seconds.\r\n        bytes32 hashedSecret; // sha256(secret), hashed secret of channel initiator.\r\n        State state; // The state in which this channel is in.\r\n    }\r\n\r\n    // FIELDS\r\n\r\n    uint constant MAX_BATCH_ITERATIONS = 20; // Assuming 8mn gaslimit and >0.4mn gas usage for most expensive batch function\r\n    mapping (bytes32 => Channel) public channels; // Mapping of channel hashes to channel structs.\r\n    mapping (bytes32 => bool) public isAntecedentHashedSecret; // Mapping of secrets to whether they have been used already or not.\r\n    address public EXCHANGE_OPERATOR; // Can change the COMMISSION_RECIPIENT address.\r\n    bool public IS_EXCHANGE_OPERATIONAL; // Can change the COMMISSION_RECIPIENT address.\r\n    address public COMMISSION_RECIPIENT; // Recipient of exchange commissions.\r\n\r\n    // EVENTS\r\n\r\n    event ChannelCreated(bytes32 channelId);\r\n    event ChannelRedeemed(bytes32 channelId);\r\n    event ChannelRefunded(bytes32 channelId);\r\n\r\n    // MODIFIER\r\n\r\n    modifier only_exchange_operator {\r\n        require(msg.sender == EXCHANGE_OPERATOR, \"PERMISSION_DENIED\");\r\n        _;\r\n    }\r\n\r\n    // METHODS\r\n\r\n    // PRIVATE METHODS\r\n\r\n    /**\r\n    @notice Sets up a Channel to initiate or participate in.\r\n    @dev Whether right amount has been sent is handled at higher level functions.\r\n    */\r\n    function _setupChannel(address beneficiary, uint amount, uint commission, uint expiresAt, bytes32 hashedSecret)\r\n        private\r\n        returns (bytes32 channelId)\r\n    {\r\n        require(IS_EXCHANGE_OPERATIONAL, \"EXCHANGE_NOT_OPERATIONAL\");\r\n        require(now <= expiresAt, \"TIMELOCK_TOO_EARLY\");\r\n        require(amount > 0, \"AMOUNT_IS_ZERO\");\r\n        require(!isAntecedentHashedSecret[hashedSecret], \"SECRET_CAN_BE_DISCOVERED\");\r\n        isAntecedentHashedSecret[hashedSecret] = true;\r\n        // Create channel identifier\r\n        channelId = createChannelId(\r\n            msg.sender,\r\n            beneficiary,\r\n            amount,\r\n            commission,\r\n            now,\r\n            expiresAt,\r\n            hashedSecret\r\n        );\r\n        // Create channel\r\n        Channel storage channel = channels[channelId];\r\n        channel.initiator = msg.sender;\r\n        channel.beneficiary = beneficiary;\r\n        channel.amount = amount;\r\n        channel.commission = commission;\r\n        channel.createdAt = now;\r\n        channel.expiresAt = expiresAt;\r\n        channel.hashedSecret = hashedSecret;\r\n        channel.state = State.Created;\r\n        // Transfer commission to commission recipient\r\n        COMMISSION_RECIPIENT.transfer(commission);\r\n        emit ChannelCreated(channelId);\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n    @notice Constructor function.\r\n    */\r\n    function Htlc(\r\n        address ofExchangeOperator,\r\n        address ofCommissionRecipient\r\n    )\r\n        public\r\n    {\r\n        EXCHANGE_OPERATOR = ofExchangeOperator;\r\n        IS_EXCHANGE_OPERATIONAL = true;\r\n        COMMISSION_RECIPIENT = ofCommissionRecipient;\r\n    }\r\n\r\n    /**\r\n    @notice Changes the exchange operator.\r\n    */\r\n    function changeExchangeOperator(address newExchangeOperator)\r\n        public\r\n        only_exchange_operator\r\n    {\r\n        EXCHANGE_OPERATOR = newExchangeOperator;\r\n    }\r\n\r\n    /**\r\n    @notice Changes the operational status of the exchange.\r\n    */\r\n    function changeExchangeStatus(bool newExchangeState)\r\n        public\r\n        only_exchange_operator\r\n    {\r\n        IS_EXCHANGE_OPERATIONAL = newExchangeState;\r\n    }\r\n\r\n    /**\r\n    @notice Changes the recipient of the commission.\r\n    */\r\n    function changeCommissionRecipient(address newCommissionRecipient)\r\n        public\r\n        only_exchange_operator\r\n    {\r\n        COMMISSION_RECIPIENT = newCommissionRecipient;\r\n    }\r\n\r\n    /**\r\n    @notice Hashes the channel specific values to create a unique identifier.\r\n    @dev Helper function to create channelIds\r\n    */\r\n    function createChannelId(\r\n        address initiator,\r\n        address beneficiary,\r\n        uint amount,\r\n        uint commission,\r\n        uint createdAt,\r\n        uint expiresAt,\r\n        bytes32 hashedSecret\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes32 channelId)\r\n    {\r\n        channelId = keccak256(abi.encodePacked(\r\n            initiator,\r\n            beneficiary,\r\n            amount,\r\n            commission,\r\n            createdAt,\r\n            expiresAt,\r\n            hashedSecret\r\n        ));\r\n    }\r\n\r\n    /**\r\n    @notice Creates a Channel to initiate or participate in.\r\n    @dev If too little commission sent, channel wont be displayed in exchange frontend.\r\n    @dev Does check if right amount (msg.value) has been sent.\r\n    @param beneficiary Beneficiary of this channels amount.\r\n    @param amount Amount to be stored in this channel.\r\n    @param commission Commission amount to be paid to commission recipient.\r\n    @param expiresAt Channel expiration timestamp in seconds.\r\n    @param hashedSecret sha256(secret), hashed secret of channel initiator\r\n    @return channelId Unique channel identifier\r\n    */\r\n    function createChannel(\r\n        address beneficiary,\r\n        uint amount,\r\n        uint commission,\r\n        uint expiresAt,\r\n        bytes32 hashedSecret\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes32 channelId)\r\n    {\r\n        // Require accurate msg.value sent\r\n        require(amount + commission >= amount, \"UINT256_OVERFLOW\");\r\n        require(msg.value == amount + commission, \"INACCURATE_MSG_VALUE_SENT\");\r\n        // Setup channel\r\n        _setupChannel(\r\n            beneficiary,\r\n            amount,\r\n            commission,\r\n            expiresAt,\r\n            hashedSecret\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice Creates a batch of channels\r\n    */\r\n    function batchCreateChannel(\r\n        address[] beneficiaries,\r\n        uint[] amounts,\r\n        uint[] commissions,\r\n        uint[] expiresAts,\r\n        bytes32[] hashedSecrets\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes32[] channelId)\r\n    {\r\n        require(beneficiaries.length <= MAX_BATCH_ITERATIONS, \"TOO_MANY_CHANNELS\");\r\n        // Require accurate msg.value sent\r\n        uint valueToBeSent;\r\n        for (uint i = 0; i < beneficiaries.length; ++i) {\r\n            require(amounts[i] + commissions[i] >= amounts[i], \"UINT256_OVERFLOW\");\r\n            require(valueToBeSent + amounts[i] + commissions[i] >= valueToBeSent, \"UINT256_OVERFLOW\");\r\n            valueToBeSent += amounts[i] + commissions[i];\r\n        }\r\n        require(msg.value == valueToBeSent, \"INACCURATE_MSG_VALUE_SENT\");\r\n        // Setup channel\r\n        for (i = 0; i < beneficiaries.length; ++i)\r\n            _setupChannel(\r\n                beneficiaries[i],\r\n                amounts[i],\r\n                commissions[i],\r\n                expiresAts[i],\r\n                hashedSecrets[i]\r\n            );\r\n    }\r\n\r\n    /**\r\n    @notice Redeem ETH to channel beneficiary and and set channel state as redeemed.\r\n    */\r\n    function redeemChannel(bytes32 channelId, bytes32 secret)\r\n        public\r\n    {\r\n        // Require secret to open channels hashlock\r\n        require(sha256(abi.encodePacked(secret)) == channels[channelId].hashedSecret, \"WRONG_SECRET\");\r\n        require(channels[channelId].state == State.Created, \"WRONG_STATE\");\r\n        uint amount = channels[channelId].amount;\r\n        address beneficiary = channels[channelId].beneficiary;\r\n        channels[channelId].state = State.Redeemed;\r\n        // Execute channel\r\n        beneficiary.transfer(amount);\r\n        emit ChannelRedeemed(channelId);\r\n    }\r\n\r\n    /**\r\n    @notice Redeems a batch of channels.\r\n    */\r\n    function batchRedeemChannel(bytes32[] channelIds, bytes32[] secrets)\r\n        public\r\n    {\r\n        require(channelIds.length <= MAX_BATCH_ITERATIONS, \"TOO_MANY_CHANNELS\");\r\n        for (uint i = 0; i < channelIds.length; ++i)\r\n            redeemChannel(channelIds[i], secrets[i]);\r\n    }\r\n\r\n    /**\r\n    @notice Refund ETH to the channel initiator and set channel state as refuned.\r\n    */\r\n    function refundChannel(bytes32 channelId)\r\n        public\r\n    {\r\n        // Require enough time has passed to open channels timelock.\r\n        require(now >= channels[channelId].expiresAt, \"TOO_EARLY\");\r\n        require(channels[channelId].state == State.Created, \"WRONG_STATE\");\r\n        uint amount = channels[channelId].amount;\r\n        address initiator = channels[channelId].initiator;\r\n        channels[channelId].state = State.Refunded;\r\n        // Refund channel\r\n        initiator.transfer(amount);\r\n        emit ChannelRefunded(channelId);\r\n    }\r\n\r\n    /**\r\n    @notice Refunds a batch of channels.\r\n    */\r\n    function batchRefundChannel(bytes32[] channelIds)\r\n        public\r\n    {\r\n        require(channelIds.length <= MAX_BATCH_ITERATIONS, \"TOO_MANY_CHANNELS\");\r\n        for (uint i = 0; i < channelIds.length; ++i)\r\n            refundChannel(channelIds[i]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"name\":\"hashedSecret\",\"type\":\"bytes32\"}],\"name\":\"createChannel\",\"outputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_RECIPIENT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_OPERATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeState\",\"type\":\"bool\"}],\"name\":\"changeExchangeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelIds\",\"type\":\"bytes32[]\"},{\"name\":\"secrets\",\"type\":\"bytes32[]\"}],\"name\":\"batchRedeemChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommissionRecipient\",\"type\":\"address\"}],\"name\":\"changeCommissionRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"commissions\",\"type\":\"uint256[]\"},{\"name\":\"expiresAts\",\"type\":\"uint256[]\"},{\"name\":\"hashedSecrets\",\"type\":\"bytes32[]\"}],\"name\":\"batchCreateChannel\",\"outputs\":[{\"name\":\"channelId\",\"type\":\"bytes32[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"name\":\"initiator\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"name\":\"hashedSecret\",\"type\":\"bytes32\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelIds\",\"type\":\"bytes32[]\"}],\"name\":\"batchRefundChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"initiator\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"name\":\"hashedSecret\",\"type\":\"bytes32\"}],\"name\":\"createChannelId\",\"outputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"refundChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeOperator\",\"type\":\"address\"}],\"name\":\"changeExchangeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IS_EXCHANGE_OPERATIONAL\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\"},{\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"redeemChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isAntecedentHashedSecret\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ofExchangeOperator\",\"type\":\"address\"},{\"name\":\"ofCommissionRecipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ChannelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ChannelRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ChannelRefunded\",\"type\":\"event\"}]","ContractName":"Htlc","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f458378fbf3fdd1ce4b27593935321452bf23d7000000000000000000000000fad230837722d72ce834237d20d2404ee7605739","Library":"","SwarmSource":"bzzr://58525b2a951c2a88f1e8d6a34dc8040bbba658cecc1948db838bfea3261f9429"}]}