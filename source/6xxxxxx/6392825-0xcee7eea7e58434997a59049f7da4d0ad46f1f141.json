{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20\r\n * @dev The ERC20 interface has an standard functions and event\r\n * for erc20 compatible token on Ethereum blockchain.\r\n */\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function transferFrom(address _from, address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function approve(address _spender, uint _value) external; // Some ERC20 doesn't have return\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/**\r\n * @title KULAP Trading Proxy\r\n * @dev The KULAP trading proxy interface has an standard functions and event\r\n * for other smart contract to implement to join KULAP Dex as Market Maker. \r\n */\r\ninterface KULAPTradingProxy {\r\n    // Trade event\r\n    /// @dev when new trade occure (and success), this event will be boardcast. \r\n    /// @param src Source token\r\n    /// @param srcAmount amount of source tokens\r\n    /// @param dest   Destination token\r\n    /// @return amount of actual destination tokens\r\n    event Trade( ERC20 src, uint256 srcAmount, ERC20 dest, uint256 destAmount);\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param src Source token\r\n    /// @param dest   Destination token\r\n    /// @param srcAmount amount of source tokens\r\n    /// @return amount of actual destination tokens\r\n    function trade(\r\n        ERC20 src,\r\n        ERC20 dest,\r\n        uint256 srcAmount\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256);\r\n    \r\n    /// @dev provite current rate between source and destination token \r\n    ///      for given source amount\r\n    /// @param src Source token\r\n    /// @param dest   Destination token\r\n    /// @param srcAmount amount of source tokens\r\n    /// @return current reserve and rate\r\n    function rate(\r\n        ERC20 src, \r\n        ERC20 dest, \r\n        uint256 srcAmount\r\n    ) \r\n        external \r\n        view \r\n        returns(uint256, uint256);\r\n}\r\n\r\ncontract KulapDex is Ownable {\r\n    event Trade(\r\n        // Source\r\n        address indexed _srcAsset,\r\n        uint256         _srcAmount,\r\n\r\n        // Destination\r\n        address indexed _destAsset,\r\n        uint256         _destAmount,\r\n\r\n        // User\r\n        address indexed _trader, \r\n\r\n        // System\r\n        uint256          fee\r\n    );\r\n\r\n    using SafeMath for uint256;\r\n    ERC20 public etherERC20 = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    // address public dexWallet = 0x7ff0F1919424F0D2B6A109E3139ae0f1d836D468; // To receive fee of the KULAP Dex network\r\n\r\n    // list of trading proxies\r\n    KULAPTradingProxy[] public tradingProxies;\r\n\r\n    function _tradeEtherToToken(\r\n        uint256 tradingProxyIndex, \r\n        uint256 srcAmount, \r\n        ERC20 dest\r\n        ) \r\n        private \r\n        returns(uint256)  {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        // Trade to proxy\r\n        uint256 destAmount = tradingProxy.trade.value(srcAmount)(\r\n            etherERC20,\r\n            dest,\r\n            srcAmount\r\n        );\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\r\n    function () public payable {\r\n\r\n    }\r\n\r\n    function _tradeTokenToEther(\r\n        uint256 tradingProxyIndex,\r\n        ERC20 src,\r\n        uint256 srcAmount\r\n        ) \r\n        private \r\n        returns(uint256)  {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        // Approve to TradingProxy\r\n        src.approve(tradingProxy, srcAmount);\r\n\r\n        // Trande to proxy\r\n        uint256 destAmount = tradingProxy.trade(\r\n            src, \r\n            etherERC20,\r\n            srcAmount\r\n        );\r\n        \r\n        return destAmount;\r\n    }\r\n\r\n    function _tradeTokenToToken(\r\n        uint256 tradingProxyIndex,\r\n        ERC20 src,\r\n        uint256 srcAmount,\r\n        ERC20 dest\r\n        ) \r\n        private \r\n        returns(uint256)  {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        // Approve to TradingProxy\r\n        src.approve(tradingProxy, srcAmount);\r\n\r\n        // Trande to proxy\r\n        uint256 destAmount = tradingProxy.trade(\r\n            src, \r\n            dest,\r\n            srcAmount\r\n        );\r\n        \r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 0.5 ETH -> EOS\r\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    //\r\n    // Ex2: trade 30 EOS -> ETH\r\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    function _trade(\r\n        uint256             _tradingProxyIndex, \r\n        ERC20               _src, \r\n        uint256             _srcAmount, \r\n        ERC20               _dest, \r\n        uint256             _minDestAmount\r\n    ) private returns(uint256)  {\r\n        // Destination amount\r\n        uint256 destAmount;\r\n\r\n        // Record src/dest asset for later consistency check.\r\n        uint256 srcAmountBefore;\r\n        uint256 destAmountBefore;\r\n        // Source\r\n        if (etherERC20 == _src) {\r\n            srcAmountBefore = address(this).balance;\r\n        } else {\r\n            srcAmountBefore = _src.balanceOf(this);\r\n        }\r\n        // Dest\r\n        if (etherERC20 == _dest) {\r\n            destAmountBefore = address(this).balance;\r\n        } else {\r\n            destAmountBefore = _dest.balanceOf(this);\r\n        }\r\n\r\n        // Trade ETH -> Token\r\n        if (etherERC20 == _src) {\r\n            destAmount = _tradeEtherToToken(_tradingProxyIndex, _srcAmount, _dest);\r\n        \r\n        // Trade Token -> ETH\r\n        } else if (etherERC20 == _dest) {\r\n            destAmount = _tradeTokenToEther(_tradingProxyIndex, _src, _srcAmount);\r\n\r\n        // Trade Token -> Token\r\n        } else {\r\n            destAmount = _tradeTokenToToken(_tradingProxyIndex, _src, _srcAmount, _dest);\r\n        }\r\n\r\n        // Recheck if src/dest amount correct\r\n        // Source\r\n        if (etherERC20 == _src) {\r\n            require(address(this).balance == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\r\n        } else {\r\n            require(_src.balanceOf(this) == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\r\n        }\r\n        // Dest\r\n        if (etherERC20 == _dest) {\r\n            require(address(this).balance == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\r\n        } else {\r\n            require(_dest.balanceOf(this) == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= _minDestAmount, \"destination amount is too low.\");\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 0.5 ETH -> EOS\r\n    // 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    //\r\n    // Ex2: trade 30 EOS -> ETH\r\n    // 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    function trade(uint256 tradingProxyIndex, ERC20 src, uint256 srcAmount, ERC20 dest, uint256 minDestAmount) payable public returns(uint256)  {\r\n        uint256 destAmount;\r\n\r\n        // Prepare source's asset\r\n        if (etherERC20 != src) {\r\n            // Transfer token to This address\r\n            src.transferFrom(msg.sender, address(this), srcAmount);\r\n        }\r\n\r\n        // Trade with proxy\r\n        destAmount = _trade(tradingProxyIndex, src, srcAmount, dest, 1);\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n\r\n        // Send back ether to sender\r\n        if (etherERC20 == dest) {\r\n            // Send back ether to sender\r\n            // Throws on failure\r\n            msg.sender.transfer(destAmount);\r\n        \r\n        // Send back token to sender\r\n        } else {\r\n            // Some ERC20 Smart contract not return Bool, so we can't check here\r\n            // require(dest.transfer(msg.sender, destAmount));\r\n            dest.transfer(msg.sender, destAmount);\r\n        }\r\n\r\n        emit Trade(src, srcAmount, dest, destAmount, msg.sender, 0);\r\n        \r\n\r\n        return destAmount;\r\n    }\r\n\r\n    // Ex1: trade 50 OMG -> ETH -> EOS\r\n    // Step1: trade 50 OMG -> ETH\r\n    // Step2: trade xx ETH -> EOS\r\n    // \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"30000000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"1\", [\"0x0000000000000000000000000000000000000000\", \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x0000000000000000000000000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\"]\r\n    //\r\n    // Ex2: trade 50 OMG -> ETH -> DAI\r\n    // Step1: trade 50 OMG -> ETH\r\n    // Step2: trade xx ETH -> DAI\r\n    // \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"30000000000000000000\", \"0x45ad02b30930cad22ff7921c111d22943c6c822f\", \"1\", [\"0x0000000000000000000000000000000000000000\", \"0x5b9a857e0C3F2acc5b94f6693536d3Adf5D6e6Be\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x0000000000000000000000000000000000000001\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"0x45ad02b30930cad22ff7921c111d22943c6c822f\"]\r\n    function tradeRoutes(\r\n        ERC20 src,\r\n        uint256 srcAmount,\r\n        ERC20 dest,\r\n        uint256 minDestAmount,\r\n        address[] _tradingPaths)\r\n\r\n        public payable returns(uint256)  {\r\n        uint256 destAmount;\r\n\r\n        if (etherERC20 != src) {\r\n            // Transfer token to This address\r\n            src.transferFrom(msg.sender, address(this), srcAmount);\r\n        }\r\n\r\n        uint256 pathSrcAmount = srcAmount;\r\n        for (uint i = 0; i < _tradingPaths.length; i += 3) {\r\n            uint256 tradingProxyIndex =         uint256(_tradingPaths[i]);\r\n            ERC20 pathSrc =                     ERC20(_tradingPaths[i+1]);\r\n            ERC20 pathDest =                    ERC20(_tradingPaths[i+2]);\r\n\r\n            destAmount = _trade(tradingProxyIndex, pathSrc, pathSrcAmount, pathDest, 1);\r\n            pathSrcAmount = destAmount;\r\n        }\r\n\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n\r\n        // Trade Any -> ETH\r\n        if (etherERC20 == dest) {\r\n            // Send back ether to sender\r\n            // Throws on failure\r\n            msg.sender.transfer(destAmount);\r\n        \r\n        // Trade Any -> Token\r\n        } else {\r\n            // Send back token to sender\r\n            // Some ERC20 Smart contract not return Bool, so we can't check here\r\n            // require(dest.transfer(msg.sender, destAmount));\r\n            dest.transfer(msg.sender, destAmount);\r\n        }\r\n\r\n        emit Trade(src, srcAmount, dest, destAmount, msg.sender, 0);\r\n\r\n        return destAmount;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\r\n    /// @param tradingProxyIndex index of trading proxy\r\n    /// @param src Source token\r\n    /// @param dest Destination token\r\n    /// @param srcAmount Srouce amount\r\n    /* solhint-disable code-complexity */\r\n    function rate(uint256 tradingProxyIndex, ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint, uint) {\r\n        // Load trading proxy\r\n        KULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex];\r\n\r\n        return tradingProxy.rate(src, dest, srcAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for adding new trading proxy\r\n    * @param _proxyAddress The address of trading proxy.\r\n    * @return index of this proxy.\r\n    */\r\n    function addTradingProxy(\r\n        KULAPTradingProxy _proxyAddress\r\n    ) public onlyOwner returns (uint256) {\r\n\r\n        tradingProxies.push(_proxyAddress);\r\n\r\n        return tradingProxies.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"minDestAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"name\":\"_tradingPaths\",\"type\":\"address[]\"}],\"name\":\"tradeRoutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingProxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"addTradingProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_srcAsset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_destAsset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_destAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"}]","ContractName":"KulapDex","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04141c457de6afe8c4f3769ff5c1ec4c605635ff42473d608a6f2ca73b8ea5aa"}]}