{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() public { owner = msg.sender;  }\r\n \r\n  modifier onlyOwner() {     \r\n      address sender =  msg.sender;\r\n      address _owner = owner;\r\n      require(msg.sender == _owner);    \r\n      _;  \r\n  }\r\n  \r\n  function transferOwnership(address newOwner) onlyOwner public { \r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  \r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   \r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title BrickToken\r\n * @dev Brick ERC20 Token that can be minted.\r\n * It is meant to be used in Brick crowdsale contract.\r\n */\r\ncontract BrickToken is MintableToken {\r\n\r\n    string public constant name = \"The Brick\"; \r\n    string public constant symbol = \"BRK\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function getTotalSupply() view public returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Brick Crowdsale\r\n * @dev This is Brick's crowdsale contract.\r\n */\r\ncontract BrickCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public limitDateSale; // end date in units\r\n    uint256 public currentTime;\r\n    \r\n    bool public isSoftCapHit = false;\r\n    bool public isStarted = false;\r\n    bool public isFinalized = false;\r\n    // Token rates as per rounds\r\n    uint256 icoPvtRate  = 40; \r\n    uint256 icoPreRate  = 50;\r\n    uint256 ico1Rate    = 65;\r\n    uint256 ico2Rate    = 75;\r\n    uint256 ico3Rate    = 90;\r\n    // Tokens in each round\r\n    uint256 public pvtTokens        = (40000) * (10**18);\r\n    uint256 public preSaleTokens    = (6000000) * (10**18);\r\n    uint256 public ico1Tokens       = (8000000) * (10**18);\r\n    uint256 public ico2Tokens       = (8000000) * (10**18);\r\n    uint256 public ico3Tokens       = (8000000) * (10**18);\r\n    uint256 public totalTokens      = (40000000)* (10**18); // 40 million\r\n    \r\n      // address where funds are collected\r\n    address public advisoryEthWallet        = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be;\r\n    address public infraEthWallet           = 0x536D36a05F6592aa29BB0beE30cda706B1272521;\r\n    address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1;\r\n    address public operationsEthWallet      = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967;\r\n   // address where token will go \r\n     address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; // wallet where remaining tokens will go\r\n     \r\n   struct ContributorData {\r\n        uint256 contributionAmount;\r\n        uint256 tokensIssued;\r\n    }\r\n   \r\n    mapping(address => ContributorData) public contributorList;\r\n    mapping(uint => address) contributorIndexes;\r\n    uint nextContributorIndex;\r\n\r\n    constructor() public {}\r\n    \r\n   function init( uint256 _tokensForCrowdsale, uint256 _etherInUSD, address _tokenAddress, uint256 _softCapInEthers, uint256 _hardCapInEthers, \r\n        uint _saleDurationInDays, uint bonus) onlyOwner public {\r\n        \r\n       // setTotalTokens(_totalTokens);\r\n        currentTime = now;\r\n        setTokensForCrowdSale(_tokensForCrowdsale);\r\n        setRate(_etherInUSD);\r\n        setTokenAddress(_tokenAddress);\r\n        setSoftCap(_softCapInEthers);\r\n        setHardCap(_hardCapInEthers);\r\n        setSaleDuration(_saleDurationInDays);\r\n        setSaleBonus(bonus);\r\n        start();\r\n        // starting the crowdsale\r\n   }\r\n   \r\n    /**\r\n    * @dev Must be called to start the crowdsale\r\n    */\r\n    function start() onlyOwner public {\r\n        require(!isStarted);\r\n        require(!hasStarted());\r\n        require(tokenAddress != address(0));\r\n        require(saleDuration != 0);\r\n        require(totalTokens != 0);\r\n        require(tokensForCrowdSale != 0);\r\n        require(softCap != 0);\r\n        require(hardCap != 0);\r\n        \r\n        starting();\r\n        emit BrickStarted();\r\n        \r\n        isStarted = true;\r\n        // endPvtSale();\r\n    }\r\n \r\n    function splitTokens() internal {   \r\n        token.mint(techDevelopmentEthWallet, totalTokens.mul(3).div(100));          //wallet for tech development\r\n        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(3).div(100);\r\n        token.mint(operationsEthWallet, totalTokens.mul(7).div(100));                //wallet for operations wallet\r\n        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(7).div(100);\r\n        \r\n    }\r\n    \r\n       \r\n   uint256 public tokensForCrowdSale = 0;\r\n   function setTokensForCrowdSale(uint256 _tokensForCrowdsale) onlyOwner public {\r\n       tokensForCrowdSale = _tokensForCrowdsale.mul(10 ** 18);  \r\n   }\r\n \r\n   \r\n    uint256 public rate=0;\r\n    uint256 public etherInUSD;\r\n    function setRate(uint256 _etherInUSD) internal {\r\n        etherInUSD = _etherInUSD;\r\n        rate = getCurrentRateInCents().mul(10**18).div(100).div(_etherInUSD);\r\n    }\r\n    \r\n    function setRate(uint256 rateInCents, uint256 _etherInUSD) public onlyOwner {\r\n        etherInUSD = _etherInUSD;\r\n        rate = rateInCents.mul(10**18).div(100).div(_etherInUSD);\r\n    }\r\n    \r\n    function updateRateInWei() internal { // this method requires that you must have called etherInUSD earliar, must not be called except when round is ending.\r\n        require(etherInUSD != 0);\r\n        rate = getCurrentRateInCents().mul(10**18).div(100).div(etherInUSD);\r\n    }\r\n    \r\n    function getCurrentRateInCents() public view returns (uint256)\r\n    {\r\n        if(currentRound == 1) {\r\n            return icoPvtRate;\r\n        } else if(currentRound == 2) {\r\n            return icoPreRate;\r\n        } else if(currentRound == 3) {\r\n            return ico1Rate;\r\n        } else if(currentRound == 4) {\r\n            return  ico2Rate;\r\n        } else if(currentRound == 5) {\r\n            return ico3Rate;\r\n        } else {\r\n            return ico3Rate;\r\n        }\r\n    }\r\n    // The token being sold\r\n    BrickToken public token;\r\n    address tokenAddress = 0x0; \r\n    function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n        tokenAddress = _tokenAddress; // to check if token address is provided at start\r\n        token = BrickToken(_tokenAddress);\r\n    }\r\n    \r\n \r\n    function setPvtTokens (uint256 _pvtTokens)onlyOwner public {\r\n        require(!icoPvtEnded);\r\n        pvtTokens = (_pvtTokens).mul(10 ** 18);\r\n    }\r\n    function setPreSaleTokens (uint256 _preSaleTokens)onlyOwner public {\r\n        require(!icoPreEnded);\r\n        preSaleTokens = (_preSaleTokens).mul(10 ** 18);\r\n    }\r\n    function setIco1Tokens (uint256 _ico1Tokens)onlyOwner public {\r\n        require(!ico1Ended);\r\n        ico1Tokens = (_ico1Tokens).mul(10 ** 18);\r\n    }\r\n    function setIco2Tokens (uint256 _ico2Tokens)onlyOwner public {\r\n        require(!ico2Ended);\r\n        ico2Tokens = (_ico2Tokens).mul(10 ** 18);\r\n    }\r\n    function setIco3Tokens (uint256 _ico3Tokens)onlyOwner public {\r\n        require(!ico3Ended);\r\n        ico3Tokens = (_ico3Tokens).mul(10 ** 18);\r\n    }\r\n    \r\n   uint256 public softCap = 0;\r\n   function setSoftCap(uint256 _softCap) onlyOwner public {\r\n       softCap = _softCap.mul(10 ** 18); \r\n    }\r\n   \r\n   uint256 public hardCap = 0; \r\n   function setHardCap(uint256 _hardCap) onlyOwner public {\r\n       hardCap = _hardCap.mul(10 ** 18); \r\n   }\r\n  \r\n    // sale period (includes holidays)\r\n    uint public saleDuration = 0; // in days ex: 60.\r\n    function setSaleDuration(uint _saleDurationInDays) onlyOwner public {\r\n        saleDuration = _saleDurationInDays;\r\n        limitDateSale = startTime.add(saleDuration * 1 days);\r\n        endTime = limitDateSale;\r\n    }\r\n  \r\n    uint public saleBonus = 0; // ex. 10\r\n    function setSaleBonus(uint bonus) public onlyOwner{\r\n        saleBonus = bonus;\r\n    }\r\n    \r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyPhaseTokens(msg.sender);\r\n    }\r\n   \r\n   function transferTokenOwnership(address _address) onlyOwner public {\r\n       token.transferOwnership(_address);\r\n   }\r\n    \r\n    function releaseTokens(address _contributerAddress, uint256 tokensOfContributor) internal {\r\n       token.mint(_contributerAddress, tokensOfContributor);\r\n    }\r\n    \r\n    function currentTokenSupply() public view returns(uint256){\r\n        return token.getTotalSupply();\r\n    }\r\n    \r\n   function buyPhaseTokens(address beneficiary) public payable \r\n   { \r\n        assert(!ico3Ended);\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        // calculate token amount to be created\r\n        uint256 tokens = computeTokens(weiAmount); //converts the wei to token amount\r\n        require(isWithinTokenAllocLimit(tokens));\r\n       \r\n        if(int(pvtTokens - tokensIssuedTillNow) > 0) { //phase1 80\r\n            require(int (tokens) < (int(pvtTokens -  tokensIssuedTillNow)));\r\n            buyTokens(tokens,weiAmount,beneficiary);\r\n        } else if (int (preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase 2  80\r\n            require(int(tokens) < (int(preSaleTokens + pvtTokens - tokensIssuedTillNow)));\r\n            buyTokens(tokens,weiAmount,beneficiary);\r\n        } else if(int(ico1Tokens + preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase3\r\n            require(int(tokens) < (int(ico1Tokens + preSaleTokens + pvtTokens -tokensIssuedTillNow)));\r\n            buyTokens(tokens,weiAmount,beneficiary);\r\n        } else if(int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow)) > 0) {  //phase4\r\n            require(int(tokens) < (int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow))));\r\n            buyTokens(tokens,weiAmount,beneficiary);\r\n        }  else if(!ico3Ended && (int(tokensForCrowdSale - (tokensIssuedTillNow)) > 0)) { // 500 -400\r\n            require(int(tokens) < (int(tokensForCrowdSale - (tokensIssuedTillNow))));\r\n            buyTokens(tokens,weiAmount,beneficiary);\r\n        }\r\n   }\r\n   uint256 public tokensIssuedTillNow=0;\r\n   function buyTokens(uint256 tokens, uint256 weiAmount ,address beneficiary) internal {\r\n       \r\n        // update state - Add to eth raised\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        if (contributorList[beneficiary].contributionAmount == 0) { // if its a new contributor, add him and increase index\r\n            contributorIndexes[nextContributorIndex] = beneficiary;\r\n            nextContributorIndex += 1;\r\n        }\r\n        \r\n        contributorList[beneficiary].contributionAmount += weiAmount;\r\n        contributorList[beneficiary].tokensIssued += tokens;\r\n        tokensIssuedTillNow = tokensIssuedTillNow + tokens;\r\n        releaseTokens(beneficiary, tokens); // releaseTokens\r\n        forwardFunds(); // forwardFunds\r\n        emit BrickTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n   \r\n  \r\n      /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event BrickTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n    function investorCount() constant public returns(uint) {\r\n        return nextContributorIndex;\r\n    }\r\n    \r\n    function hasStarted() public constant returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n    function isWithinSaleTimeLimit() internal view returns (bool) {\r\n        return now <= limitDateSale;\r\n    }\r\n\r\n    function isWithinSaleLimit(uint256 _tokens) internal view returns (bool) {\r\n        return token.getTotalSupply().add(_tokens) <= tokensForCrowdSale;\r\n    }\r\n    \r\n    function computeTokens(uint256 weiAmount) view internal returns (uint256) {\r\n       return weiAmount.mul(10 ** 18).div(rate);\r\n    }\r\n    \r\n    function isWithinTokenAllocLimit(uint256 _tokens) view internal returns (bool) {\r\n        return (isWithinSaleTimeLimit() && isWithinSaleLimit(_tokens));\r\n    }\r\n\r\n    // overriding BrckBaseCrowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= hardCap;\r\n        bool withinPeriod = now >= startTime && now <= endTime; \r\n        bool nonZeroPurchase = msg.value != 0; \r\n        return (withinPeriod && nonZeroPurchase) && withinCap && isWithinSaleTimeLimit();\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised >= hardCap;\r\n        return (endTime != 0 && now > endTime) || capReached;\r\n    }\r\n\r\n  \r\n\r\n  event BrickStarted();\r\n  event BrickFinalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        // require(hasEnded());\r\n        \r\n        finalization();\r\n        emit BrickFinalized();\r\n        \r\n        isFinalized = true;\r\n    }\r\n\r\n    function starting() internal {\r\n        startTime = now;\r\n        limitDateSale = startTime.add(saleDuration * 1 days);\r\n        endTime = limitDateSale;\r\n    }\r\n\r\n    function finalization() internal {\r\n         splitTokens();\r\n\r\n        token.mint(wallet, totalTokens.sub(tokensIssuedTillNow));\r\n        if(address(this).balance > 0){ // if any funds are left in contract.\r\n            processFundsIfAny();\r\n        }\r\n    }\r\n    \r\n     // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        \r\n        require(advisoryEthWallet != address(0));\r\n        require(infraEthWallet != address(0));\r\n        require(techDevelopmentEthWallet != address(0));\r\n        require(operationsEthWallet != address(0));\r\n        \r\n        operationsEthWallet.transfer(msg.value.mul(60).div(100));\r\n        advisoryEthWallet.transfer(msg.value.mul(5).div(100));\r\n        infraEthWallet.transfer(msg.value.mul(10).div(100));\r\n        techDevelopmentEthWallet.transfer(msg.value.mul(25).div(100));\r\n    }\r\n    \r\n     // send ether to the fund collection wallet\r\n    function processFundsIfAny() internal {\r\n        \r\n        require(advisoryEthWallet != address(0));\r\n        require(infraEthWallet != address(0));\r\n        require(techDevelopmentEthWallet != address(0));\r\n        require(operationsEthWallet != address(0));\r\n        \r\n        operationsEthWallet.transfer(address(this).balance.mul(60).div(100));\r\n        advisoryEthWallet.transfer(address(this).balance.mul(5).div(100));\r\n        infraEthWallet.transfer(address(this).balance.mul(10).div(100));\r\n        techDevelopmentEthWallet.transfer(address(this).balance.mul(25).div(100));\r\n    }\r\n    \r\n    //functions to manually end round sales\r\n    \r\n    uint256 public currentRound = 1;\r\n    bool public icoPvtEnded = false;\r\n     bool public icoPreEnded = false;\r\n      bool public ico1Ended = false;\r\n       bool public ico2Ended = false;\r\n        bool public ico3Ended = false;\r\n    \r\n    function endPvtSale() onlyOwner public       //ending private sale\r\n    {\r\n        require(!icoPvtEnded);\r\n        pvtTokens = tokensIssuedTillNow;\r\n        currentRound = 2;\r\n        updateRateInWei();\r\n        icoPvtEnded = true;\r\n        \r\n    }\r\n     function endPreSale() onlyOwner public      //ending pre-sale\r\n    {\r\n        require(!icoPreEnded && icoPvtEnded);\r\n        preSaleTokens = tokensIssuedTillNow - pvtTokens; \r\n        currentRound = 3;\r\n        updateRateInWei();\r\n        icoPreEnded = true;\r\n    }\r\n     function endIcoSaleRound1() onlyOwner public   //ending IcoSaleRound1\r\n    {\r\n        require(!ico1Ended && icoPreEnded);\r\n       ico1Tokens = tokensIssuedTillNow - preSaleTokens - pvtTokens; \r\n       currentRound = 4;\r\n       updateRateInWei();\r\n       ico1Ended = true;\r\n    }\r\n     function endIcoSaleRound2() onlyOwner public   //ending IcoSaleRound2\r\n    {\r\n       require(!ico2Ended && ico1Ended);\r\n       ico2Tokens = tokensIssuedTillNow - ico1Tokens - preSaleTokens - pvtTokens;\r\n       currentRound = 5;\r\n       updateRateInWei();\r\n       ico2Ended=true;\r\n    }\r\n     function endIcoSaleRound3() onlyOwner public  //ending IcoSaleRound3\r\n     {\r\n        require(!ico3Ended && ico2Ended);\r\n        ico3Tokens = tokensIssuedTillNow - ico2Tokens - ico1Tokens - preSaleTokens - pvtTokens;\r\n        updateRateInWei();\r\n        ico3Ended = true;\r\n    }\r\n    \r\n    modifier afterDeadline() { if (hasEnded() || isFinalized) _; } // a modifier to tell token sale ended\r\n    \r\n    function selfDestroy(address _address) public onlyOwner { // this method will send all money to the following address after finalize\r\n        assert(isFinalized);\r\n        selfdestruct(_address);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BrickToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://791e3989136fe077d893b27844bd2920a9d1a7c7b12dcf0f320c7f0f97e53277"}]}