{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IVaultRecoverable {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        if (_token == ETH) {\r\n            vault.transfer(address(this).balance);\r\n        } else {\r\n            uint256 amount = ERC20(_token).balanceOf(this);\r\n            ERC20(_token).transfer(vault, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_EXECUTION_REVERTED = \"EVMRUN_EXECUTION_REVERTED\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n        require(address(executor).delegatecall(data), ERROR_EXECUTION_REVERTED);\r\n\r\n        bytes memory output = returnedDataDecoded();\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n    * @dev copies and returns last's call data. Needs to ABI decode first\r\n    */\r\n    function returnedDataDecoded() internal pure returns (bytes ret) {\r\n        assembly {\r\n            let size := returndatasize\r\n            switch size\r\n            case 0 {}\r\n            default {\r\n                ret := mload(0x40) // free mem ptr get\r\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\r\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {}\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\r\n// that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with _params and a new length, and _params becomes invalid from this point forward\r\n        bytes memory how;\r\n        uint256 byteLength = _params.length * 32;\r\n        assembly {\r\n            how := _params\r\n            mstore(how, byteLength)\r\n        }\r\n        return linkedKernel.hasPermission(_sender, address(this), _role, how);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n// File: @aragon/os/contracts/lib/math/SafeMath64.sol\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\r\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n// File: @aragon/os/contracts/common/DepositableStorage.sol\r\ncontract DepositableStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\r\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\r\n\r\n    function isDepositable() public view returns (bool) {\r\n        return DEPOSITABLE_POSITION.getStorageBool();\r\n    }\r\n\r\n    function setDepositable(bool _depositable) internal {\r\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\r\n    }\r\n}\r\n// File: @aragon/apps-vault/contracts/Vault.sol\r\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\r\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\r\n\r\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\r\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\r\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\r\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\r\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\r\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\r\n\r\n    event Transfer(address indexed token, address indexed to, uint256 amount);\r\n    event Deposit(address indexed token, address indexed sender, uint256 amount);\r\n\r\n    /**\r\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\r\n    *      intercepted by the Proxy (see aragonOS#281)\r\n    */\r\n    function () external payable isInitialized {\r\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\r\n        _deposit(ETH, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @notice Initialize Vault app\r\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\r\n    */\r\n    function initialize() external onlyInit {\r\n        initialized();\r\n        setDepositable(true);\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` `_token` to the vault\r\n    * @param _token Address of the token being transferred\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    function deposit(address _token, uint256 _value) external payable isInitialized {\r\n        _deposit(_token, _value);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\r\n    * @param _token Address of the token being transferred\r\n    * @param _to Address of the recipient of tokens\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    /* solium-disable-next-line function-order */\r\n    function transfer(address _token, address _to, uint256 _value)\r\n        external\r\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\r\n    {\r\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            require(_to.send(_value), ERROR_SEND_REVERTED);\r\n        } else {\r\n            require(ERC20(_token).transfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\r\n        }\r\n\r\n        emit Transfer(_token, _to, _value);\r\n    }\r\n\r\n    function balance(address _token) public view returns (uint256) {\r\n        if (_token == ETH) {\r\n            return address(this).balance;\r\n        } else {\r\n            return ERC20(_token).balanceOf(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Disable recovery escape hatch, as it could be used\r\n    *      maliciously to transfer funds away from the vault\r\n    */\r\n    function allowRecoverability(address) public view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function _deposit(address _token, uint256 _value) internal {\r\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\r\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            // Deposit is implicit in this case\r\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\r\n        } else {\r\n            require(ERC20(_token).transferFrom(msg.sender, this, _value), ERROR_TOKEN_TRANSFER_FROM_REVERTED);\r\n        }\r\n\r\n        emit Deposit(_token, msg.sender, _value);\r\n    }\r\n}\r\n// File: contracts/Finance.sol\r\n/*\r\n * SPDX-License-Identitifer:    GPL-3.0-or-later\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Finance is EtherTokenConstant, IsContract, AragonApp {\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n\r\n    bytes32 public constant CREATE_PAYMENTS_ROLE = keccak256(\"CREATE_PAYMENTS_ROLE\");\r\n    bytes32 public constant CHANGE_PERIOD_ROLE = keccak256(\"CHANGE_PERIOD_ROLE\");\r\n    bytes32 public constant CHANGE_BUDGETS_ROLE = keccak256(\"CHANGE_BUDGETS_ROLE\");\r\n    bytes32 public constant EXECUTE_PAYMENTS_ROLE = keccak256(\"EXECUTE_PAYMENTS_ROLE\");\r\n    bytes32 public constant MANAGE_PAYMENTS_ROLE = keccak256(\"MANAGE_PAYMENTS_ROLE\");\r\n\r\n    uint256 internal constant NO_PAYMENT = 0;\r\n    uint256 internal constant NO_TRANSACTION = 0;\r\n    uint256 internal constant MAX_PAYMENTS_PER_TX = 20;\r\n    uint256 internal constant MAX_UINT = uint256(-1);\r\n    uint64 internal constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_COMPLETE_TRANSITION = \"FINANCE_COMPLETE_TRANSITION\";\r\n    string private constant ERROR_NO_PAYMENT = \"FINANCE_NO_PAYMENT\";\r\n    string private constant ERROR_NO_TRANSACTION = \"FINANCE_NO_TRANSACTION\";\r\n    string private constant ERROR_NO_PERIOD = \"FINANCE_NO_PERIOD\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"FINANCE_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_INIT_PERIOD_TOO_SHORT = \"FINANCE_INIT_PERIOD_TOO_SHORT\";\r\n    string private constant ERROR_SET_PERIOD_TOO_SHORT = \"FINANCE_SET_PERIOD_TOO_SHORT\";\r\n    string private constant ERROR_NEW_PAYMENT_AMOUNT_ZERO = \"FINANCE_NEW_PAYMENT_AMOUNT_ZERO\";\r\n    string private constant ERROR_RECOVER_AMOUNT_ZERO = \"FINANCE_RECOVER_AMOUNT_ZERO\";\r\n    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = \"FINANCE_DEPOSIT_AMOUNT_ZERO\";\r\n    string private constant ERROR_BUDGET = \"FINANCE_BUDGET\";\r\n    string private constant ERROR_EXECUTE_PAYMENT_TIME = \"FINANCE_EXECUTE_PAYMENT_TIME\";\r\n    string private constant ERROR_RECEIVER_EXECUTE_PAYMENT_TIME = \"FINANCE_RCVR_EXEC_PAYMENT_TIME\";\r\n    string private constant ERROR_PAYMENT_RECEIVER = \"FINANCE_PAYMENT_RECEIVER\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"FINANCE_TKN_TRANSFER_FROM_REVERT\";\r\n    string private constant ERROR_VALUE_MISMATCH = \"FINANCE_VALUE_MISMATCH\";\r\n    string private constant ERROR_PAYMENT_INACTIVE = \"FINANCE_PAYMENT_INACTIVE\";\r\n    string private constant ERROR_REMAINING_BUDGET = \"FINANCE_REMAINING_BUDGET\";\r\n\r\n    // Order optimized for storage\r\n    struct Payment {\r\n        address token;\r\n        address receiver;\r\n        address createdBy;\r\n        bool inactive;\r\n        uint256 amount;\r\n        uint64 initialPaymentTime;\r\n        uint64 interval;\r\n        uint64 maxRepeats;\r\n        uint64 repeats;\r\n    }\r\n\r\n    // Order optimized for storage\r\n    struct Transaction {\r\n        address token;\r\n        address entity;\r\n        bool isIncoming;\r\n        uint256 amount;\r\n        uint256 paymentId;\r\n        uint64 paymentRepeatNumber;\r\n        uint64 date;\r\n        uint64 periodId;\r\n    }\r\n\r\n    struct TokenStatement {\r\n        uint256 expenses;\r\n        uint256 income;\r\n    }\r\n\r\n    struct Period {\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint256 firstTransactionId;\r\n        uint256 lastTransactionId;\r\n\r\n        mapping (address => TokenStatement) tokenStatement;\r\n    }\r\n\r\n    struct Settings {\r\n        uint64 periodDuration;\r\n        mapping (address => uint256) budgets;\r\n        mapping (address => bool) hasBudget;\r\n    }\r\n\r\n    Vault public vault;\r\n    Settings internal settings;\r\n\r\n    // We are mimicing arrays, we use mappings instead to make app upgrade more graceful\r\n    mapping (uint256 => Payment) internal payments;\r\n    // Payments start at index 1, to allow us to use payments[0] for transactions that are not\r\n    // linked to a recurring payment\r\n    uint256 public paymentsNextIndex;\r\n\r\n    mapping (uint256 => Transaction) internal transactions;\r\n    uint256 public transactionsNextIndex;\r\n\r\n    mapping (uint64 => Period) internal periods;\r\n    uint64 public periodsLength;\r\n\r\n    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\r\n    event SetBudget(address indexed token, uint256 amount, bool hasBudget);\r\n    event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxRepeats, string reference);\r\n    event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference);\r\n    event ChangePaymentState(uint256 indexed paymentId, bool inactive);\r\n    event ChangePeriodDuration(uint64 newDuration);\r\n    event PaymentFailure(uint256 paymentId);\r\n\r\n    // Modifier used by all methods that impact accounting to make sure accounting period\r\n    // is changed before the operation if needed\r\n    // NOTE: its use **MUST** be accompanied by an initialization check\r\n    modifier transitionsPeriod {\r\n        bool completeTransition = _tryTransitionAccountingPeriod(getMaxPeriodTransitions());\r\n        require(completeTransition, ERROR_COMPLETE_TRANSITION);\r\n        _;\r\n    }\r\n\r\n    modifier paymentExists(uint256 _paymentId) {\r\n        require(_paymentId > 0 && _paymentId < paymentsNextIndex, ERROR_NO_PAYMENT);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 _transactionId) {\r\n        require(_transactionId > 0 && _transactionId < transactionsNextIndex, ERROR_NO_TRANSACTION);\r\n        _;\r\n    }\r\n\r\n    modifier periodExists(uint64 _periodId) {\r\n        require(_periodId < periodsLength, ERROR_NO_PERIOD);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sends ETH to Vault. Sends all the available balance.\r\n     * @notice Deposit ETH to the Vault, to avoid locking them in this Finance app forever\r\n     */\r\n    function () external payable isInitialized transitionsPeriod {\r\n        _deposit(\r\n            ETH,\r\n            msg.value,\r\n            \"Ether transfer to Finance app\",\r\n            msg.sender,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`\r\n    * @param _vault Address of the vault Finance will rely on (non changeable)\r\n    * @param _periodDuration Duration in seconds of each period\r\n    */\r\n    function initialize(Vault _vault, uint64 _periodDuration) external onlyInit {\r\n        initialized();\r\n\r\n        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\r\n        vault = _vault;\r\n\r\n        require(_periodDuration >= 1 days, ERROR_INIT_PERIOD_TOO_SHORT);\r\n        settings.periodDuration = _periodDuration;\r\n\r\n        // Reserve the first recurring payment index as an unused index for transactions not linked to a payment\r\n        payments[0].inactive = true;\r\n        paymentsNextIndex = 1;\r\n\r\n        // Reserve the first transaction index as an unused index for periods with no transactions\r\n        transactionsNextIndex = 1;\r\n\r\n        // Start the first period\r\n        _newPeriod(getTimestamp64());\r\n    }\r\n\r\n    /**\r\n    * @dev Deposit for approved ERC20 tokens or ETH\r\n    * @notice Deposit `@tokenAmount(_token, _amount)`\r\n    * @param _token Address of deposited token\r\n    * @param _amount Amount of tokens sent\r\n    * @param _reference Reason for payment\r\n    */\r\n    function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {\r\n        _deposit(\r\n            _token,\r\n            _amount,\r\n            _reference,\r\n            msg.sender,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver``_maxRepeats > 0 ? ', executing ' + _maxRepeats + ' times at intervals of ' + @transformTime(_interval) : ''`\r\n    * @param _token Address of token for payment\r\n    * @param _receiver Address that will receive payment\r\n    * @param _amount Tokens that are payed every time the payment is due\r\n    * @param _initialPaymentTime Timestamp for when the first payment is done\r\n    * @param _interval Number of seconds that need to pass between payment transactions\r\n    * @param _maxRepeats Maximum instances a payment can be executed\r\n    * @param _reference String detailing payment reason\r\n    */\r\n    function newPayment(\r\n        address _token,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint64 _initialPaymentTime,\r\n        uint64 _interval,\r\n        uint64 _maxRepeats,\r\n        string _reference\r\n    )\r\n        external\r\n        authP(CREATE_PAYMENTS_ROLE, arr(_token, _receiver, _amount, _interval, _maxRepeats))\r\n        transitionsPeriod\r\n        returns (uint256 paymentId)\r\n    {\r\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\r\n\r\n        // Avoid saving payment data for 1 time immediate payments\r\n        if (_initialPaymentTime <= getTimestamp64() && _maxRepeats == 1) {\r\n            _makePaymentTransaction(\r\n                _token,\r\n                _receiver,\r\n                _amount,\r\n                NO_PAYMENT,   // unrelated to any payment id; it isn't created\r\n                0,   // also unrelated to any payment repeats\r\n                _reference\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Budget must allow at least one instance of this payment each period, or not be set at all\r\n        require(settings.budgets[_token] >= _amount || !settings.hasBudget[_token], ERROR_BUDGET);\r\n\r\n        paymentId = paymentsNextIndex++;\r\n        emit NewPayment(paymentId, _receiver, _maxRepeats, _reference);\r\n\r\n        Payment storage payment = payments[paymentId];\r\n        payment.token = _token;\r\n        payment.receiver = _receiver;\r\n        payment.amount = _amount;\r\n        payment.initialPaymentTime = _initialPaymentTime;\r\n        payment.interval = _interval;\r\n        payment.maxRepeats = _maxRepeats;\r\n        payment.createdBy = msg.sender;\r\n\r\n        if (nextPaymentTime(paymentId) <= getTimestamp64()) {\r\n            _executePayment(paymentId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\r\n    * @param _periodDuration Duration in seconds for accounting periods\r\n    */\r\n    function setPeriodDuration(uint64 _periodDuration)\r\n        external\r\n        authP(CHANGE_PERIOD_ROLE, arr(uint256(_periodDuration), uint256(settings.periodDuration)))\r\n        transitionsPeriod\r\n    {\r\n        require(_periodDuration >= 1 days, ERROR_SET_PERIOD_TOO_SHORT);\r\n        settings.periodDuration = _periodDuration;\r\n        emit ChangePeriodDuration(_periodDuration);\r\n    }\r\n\r\n    /**\r\n    * @notice Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately\r\n    * @param _token Address for token\r\n    * @param _amount New budget amount\r\n    */\r\n    function setBudget(\r\n        address _token,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, _amount, settings.budgets[_token], settings.hasBudget[_token] ? 1 : 0))\r\n        transitionsPeriod\r\n    {\r\n        settings.budgets[_token] = _amount;\r\n        if (!settings.hasBudget[_token]) {\r\n            settings.hasBudget[_token] = true;\r\n        }\r\n        emit SetBudget(_token, _amount, true);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove spending limit for `_token.symbol(): string`, effective immediately\r\n    * @param _token Address for token\r\n    */\r\n    function removeBudget(address _token)\r\n        external\r\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, uint256(0), settings.budgets[_token], settings.hasBudget[_token] ? 1 : 0))\r\n        transitionsPeriod\r\n    {\r\n        settings.budgets[_token] = 0;\r\n        settings.hasBudget[_token] = false;\r\n        emit SetBudget(_token, 0, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Executes any payment (requires role)\r\n    * @notice Execute pending payment #`_paymentId`\r\n    * @param _paymentId Identifier for payment\r\n    */\r\n    function executePayment(uint256 _paymentId)\r\n        external\r\n        authP(EXECUTE_PAYMENTS_ROLE, arr(_paymentId, payments[_paymentId].amount))\r\n        paymentExists(_paymentId)\r\n        transitionsPeriod\r\n    {\r\n        require(nextPaymentTime(_paymentId) <= getTimestamp64(), ERROR_EXECUTE_PAYMENT_TIME);\r\n\r\n        _executePayment(_paymentId);\r\n    }\r\n\r\n    /**\r\n    * @dev Always allows receiver of a payment to trigger execution\r\n    * @notice Execute pending payment #`_paymentId`\r\n    * @param _paymentId Identifier for payment\r\n    */\r\n    function receiverExecutePayment(uint256 _paymentId) external isInitialized paymentExists(_paymentId) transitionsPeriod {\r\n        require(nextPaymentTime(_paymentId) <= getTimestamp64(), ERROR_RECEIVER_EXECUTE_PAYMENT_TIME);\r\n        require(payments[_paymentId].receiver == msg.sender, ERROR_PAYMENT_RECEIVER);\r\n\r\n        _executePayment(_paymentId);\r\n    }\r\n\r\n    /**\r\n    * @notice `_active ? 'Activate' : 'Disable'` payment #`_paymentId`\r\n    * @dev Note that we do not require this action to transition periods, as it doesn't directly\r\n    *      impact any accounting periods.\r\n    *      Not having to transition periods also makes disabling payments easier to prevent funds\r\n    *      from being pulled out in the event of a breach.\r\n    * @param _paymentId Identifier for payment\r\n    * @param _active Whether it will be active or inactive\r\n    */\r\n    function setPaymentStatus(uint256 _paymentId, bool _active)\r\n        external\r\n        authP(MANAGE_PAYMENTS_ROLE, arr(_paymentId, uint256(_active ? 1 : 0)))\r\n        paymentExists(_paymentId)\r\n    {\r\n        payments[_paymentId].inactive = !_active;\r\n        emit ChangePaymentState(_paymentId, _active);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows making a simple payment from this contract to the Vault, to avoid locked tokens.\r\n     *      This contract should never receive tokens with a simple transfer call, but in case it\r\n     *      happens, this function allows for their recovery.\r\n     * @notice Send tokens held in this contract to the Vault\r\n     * @param _token Token whose balance is going to be transferred.\r\n     */\r\n    function recoverToVault(address _token) public isInitialized transitionsPeriod {\r\n        uint256 amount = _token == ETH ? address(this).balance : ERC20(_token).balanceOf(this);\r\n        require(amount > 0, ERROR_RECOVER_AMOUNT_ZERO);\r\n\r\n        _deposit(\r\n            _token,\r\n            amount,\r\n            \"Recover to Vault\",\r\n            this,\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Transitions accounting periods if needed. For preventing OOG attacks, a maxTransitions\r\n    *      param is provided. If more than the specified number of periods need to be transitioned,\r\n    *      it will return false.\r\n    * @notice Transition accounting period if needed\r\n    * @param _maxTransitions Maximum periods that can be transitioned\r\n    * @return success Boolean indicating whether the accounting period is the correct one (if false,\r\n    *                 maxTransitions was surpased and another call is needed)\r\n    */\r\n    function tryTransitionAccountingPeriod(uint64 _maxTransitions) public isInitialized returns (bool success) {\r\n        return _tryTransitionAccountingPeriod(_maxTransitions);\r\n    }\r\n\r\n    // consts\r\n\r\n    /**\r\n    * @dev Disable recovery escape hatch if the app has been initialized, as it could be used\r\n    *      maliciously to transfer funds in the Finance app to another Vault\r\n    *      finance#recoverToVault() should be used to recover funds to the Finance's vault\r\n    */\r\n    function allowRecoverability(address) public view returns (bool) {\r\n        return !hasInitialized();\r\n    }\r\n\r\n    function getPayment(uint256 _paymentId)\r\n        public\r\n        view\r\n        paymentExists(_paymentId)\r\n        returns (\r\n            address token,\r\n            address receiver,\r\n            uint256 amount,\r\n            uint64 initialPaymentTime,\r\n            uint64 interval,\r\n            uint64 maxRepeats,\r\n            bool inactive,\r\n            uint64 repeats,\r\n            address createdBy\r\n        )\r\n    {\r\n        Payment storage payment = payments[_paymentId];\r\n\r\n        token = payment.token;\r\n        receiver = payment.receiver;\r\n        amount = payment.amount;\r\n        initialPaymentTime = payment.initialPaymentTime;\r\n        interval = payment.interval;\r\n        maxRepeats = payment.maxRepeats;\r\n        repeats = payment.repeats;\r\n        inactive = payment.inactive;\r\n        createdBy = payment.createdBy;\r\n    }\r\n\r\n    function getTransaction(uint256 _transactionId)\r\n        public\r\n        view\r\n        transactionExists(_transactionId)\r\n        returns (\r\n            uint64 periodId,\r\n            uint256 amount,\r\n            uint256 paymentId,\r\n            uint64 paymentRepeatNumber,\r\n            address token,\r\n            address entity,\r\n            bool isIncoming,\r\n            uint64 date\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_transactionId];\r\n\r\n        token = transaction.token;\r\n        entity = transaction.entity;\r\n        isIncoming = transaction.isIncoming;\r\n        date = transaction.date;\r\n        periodId = transaction.periodId;\r\n        amount = transaction.amount;\r\n        paymentId = transaction.paymentId;\r\n        paymentRepeatNumber = transaction.paymentRepeatNumber;\r\n    }\r\n\r\n    function getPeriod(uint64 _periodId)\r\n        public\r\n        view\r\n        periodExists(_periodId)\r\n        returns (\r\n            bool isCurrent,\r\n            uint64 startTime,\r\n            uint64 endTime,\r\n            uint256 firstTransactionId,\r\n            uint256 lastTransactionId\r\n        )\r\n    {\r\n        Period storage period = periods[_periodId];\r\n\r\n        isCurrent = _currentPeriodId() == _periodId;\r\n\r\n        startTime = period.startTime;\r\n        endTime = period.endTime;\r\n        firstTransactionId = period.firstTransactionId;\r\n        lastTransactionId = period.lastTransactionId;\r\n    }\r\n\r\n    function getPeriodTokenStatement(uint64 _periodId, address _token)\r\n        public\r\n        view\r\n        periodExists(_periodId)\r\n        returns (uint256 expenses, uint256 income)\r\n    {\r\n        TokenStatement storage tokenStatement = periods[_periodId].tokenStatement[_token];\r\n        expenses = tokenStatement.expenses;\r\n        income = tokenStatement.income;\r\n    }\r\n\r\n    function nextPaymentTime(uint256 _paymentId) public view paymentExists(_paymentId) returns (uint64) {\r\n        Payment memory payment = payments[_paymentId];\r\n\r\n        if (payment.repeats >= payment.maxRepeats) {\r\n            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\r\n        }\r\n\r\n        // Split in multiple lines to circunvent linter warning\r\n        uint64 increase = payment.repeats.mul(payment.interval);\r\n        uint64 nextPayment = payment.initialPaymentTime.add(increase);\r\n        return nextPayment;\r\n    }\r\n\r\n    function getPeriodDuration() public view returns (uint64) {\r\n        return settings.periodDuration;\r\n    }\r\n\r\n    function getBudget(address _token) public view returns (uint256 budget, bool hasBudget) {\r\n        budget = settings.budgets[_token];\r\n        hasBudget = settings.hasBudget[_token];\r\n    }\r\n\r\n    /**\r\n    * @dev We have to check for initialization as periods are only valid after initializing\r\n    */\r\n    function getRemainingBudget(address _token) public view isInitialized returns (uint256) {\r\n        return _getRemainingBudget(_token);\r\n    }\r\n\r\n    /**\r\n    * @dev We have to check for initialization as periods are only valid after initializing\r\n    */\r\n    function currentPeriodId() public view isInitialized returns (uint64) {\r\n        return _currentPeriodId();\r\n    }\r\n\r\n    // internal fns\r\n\r\n    function _deposit(address _token, uint256 _amount, string _reference, address _sender, bool _isExternalDeposit) internal {\r\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\r\n        _recordIncomingTransaction(\r\n            _token,\r\n            _sender,\r\n            _amount,\r\n            _reference\r\n        );\r\n\r\n        // If it is an external deposit, check that the assets are actually transferred\r\n        // External deposit will be false when the assets were already in the Finance app\r\n        // and just need to be transferred to the vault\r\n        if (_isExternalDeposit) {\r\n            if (_token != ETH) {\r\n                // Get the tokens to Finance\r\n                require(ERC20(_token).transferFrom(msg.sender, this, _amount), ERROR_TOKEN_TRANSFER_FROM_REVERTED);\r\n            } else {\r\n                // Ensure that the ETH sent with the transaction equals the amount in the deposit\r\n                require(msg.value == _amount, ERROR_VALUE_MISMATCH);\r\n            }\r\n        }\r\n\r\n        if (_token == ETH) {\r\n            vault.deposit.value(_amount)(ETH, _amount);\r\n        } else {\r\n            ERC20(_token).approve(vault, _amount);\r\n            // finally we can deposit them\r\n            vault.deposit(_token, _amount);\r\n        }\r\n    }\r\n\r\n    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\r\n        // There should be no way for this to overflow since each period is at least one day\r\n        uint64 newPeriodId = periodsLength++;\r\n\r\n        Period storage period = periods[newPeriodId];\r\n        period.startTime = _startTime;\r\n\r\n        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\r\n        // to MAX_UINT64 (let's assume that's the end of time for now).\r\n        uint64 endTime = _startTime + settings.periodDuration - 1;\r\n        if (endTime < _startTime) { // overflowed\r\n            endTime = MAX_UINT64;\r\n        }\r\n        period.endTime = endTime;\r\n\r\n        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\r\n\r\n        return period;\r\n    }\r\n\r\n    function _executePayment(uint256 _paymentId) internal {\r\n        Payment storage payment = payments[_paymentId];\r\n        require(!payment.inactive, ERROR_PAYMENT_INACTIVE);\r\n\r\n        uint64 payed = 0;\r\n        while (nextPaymentTime(_paymentId) <= getTimestamp64() && payed < MAX_PAYMENTS_PER_TX) {\r\n            if (!_canMakePayment(payment.token, payment.amount)) {\r\n                emit PaymentFailure(_paymentId);\r\n                return;\r\n            }\r\n\r\n            // The while() predicate prevents these two from ever overflowing\r\n            payment.repeats += 1;\r\n            payed += 1;\r\n\r\n            _makePaymentTransaction(\r\n                payment.token,\r\n                payment.receiver,\r\n                payment.amount,\r\n                _paymentId,\r\n                payment.repeats,\r\n                \"\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _makePaymentTransaction(\r\n        address _token,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint256 _paymentId,\r\n        uint64 _paymentRepeatNumber,\r\n        string _reference\r\n    )\r\n        internal\r\n    {\r\n        require(_getRemainingBudget(_token) >= _amount, ERROR_REMAINING_BUDGET);\r\n        _recordTransaction(\r\n            false,\r\n            _token,\r\n            _receiver,\r\n            _amount,\r\n            _paymentId,\r\n            _paymentRepeatNumber,\r\n            _reference\r\n        );\r\n\r\n        vault.transfer(_token, _receiver, _amount);\r\n    }\r\n\r\n    function _recordIncomingTransaction(\r\n        address _token,\r\n        address _sender,\r\n        uint256 _amount,\r\n        string _reference\r\n    )\r\n        internal\r\n    {\r\n        _recordTransaction(\r\n            true, // incoming transaction\r\n            _token,\r\n            _sender,\r\n            _amount,\r\n            NO_PAYMENT, // unrelated to any existing payment\r\n            0, // and no payment repeats\r\n            _reference\r\n        );\r\n    }\r\n\r\n    function _recordTransaction(\r\n        bool _incoming,\r\n        address _token,\r\n        address _entity,\r\n        uint256 _amount,\r\n        uint256 _paymentId,\r\n        uint64 _paymentRepeatNumber,\r\n        string _reference\r\n    )\r\n        internal\r\n    {\r\n        uint64 periodId = _currentPeriodId();\r\n        TokenStatement storage tokenStatement = periods[periodId].tokenStatement[_token];\r\n        if (_incoming) {\r\n            tokenStatement.income = tokenStatement.income.add(_amount);\r\n        } else {\r\n            tokenStatement.expenses = tokenStatement.expenses.add(_amount);\r\n        }\r\n\r\n        uint256 transactionId = transactionsNextIndex++;\r\n        Transaction storage transaction = transactions[transactionId];\r\n        transaction.token = _token;\r\n        transaction.entity = _entity;\r\n        transaction.isIncoming = _incoming;\r\n        transaction.amount = _amount;\r\n        transaction.paymentId = _paymentId;\r\n        transaction.paymentRepeatNumber = _paymentRepeatNumber;\r\n        transaction.date = getTimestamp64();\r\n        transaction.periodId = periodId;\r\n\r\n        Period storage period = periods[periodId];\r\n        if (period.firstTransactionId == NO_TRANSACTION) {\r\n            period.firstTransactionId = transactionId;\r\n        }\r\n\r\n        emit NewTransaction(transactionId, _incoming, _entity, _amount, _reference);\r\n    }\r\n\r\n    function _tryTransitionAccountingPeriod(uint256 _maxTransitions) internal returns (bool success) {\r\n        Period storage currentPeriod = periods[_currentPeriodId()];\r\n        uint64 timestamp = getTimestamp64();\r\n\r\n        // Transition periods if necessary\r\n        while (timestamp > currentPeriod.endTime) {\r\n            if (_maxTransitions == 0) {\r\n                // Required number of transitions is over allowed number, return false indicating\r\n                // it didn't fully transition\r\n                return false;\r\n            }\r\n            _maxTransitions = _maxTransitions.sub(1);\r\n\r\n            // If there were any transactions in period, record which was the last\r\n            // In case 0 transactions occured, first and last tx id will be 0\r\n            if (currentPeriod.firstTransactionId != NO_TRANSACTION) {\r\n                currentPeriod.lastTransactionId = transactionsNextIndex.sub(1);\r\n            }\r\n\r\n            // New period starts at end time + 1\r\n            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _canMakePayment(address _token, uint256 _amount) internal view returns (bool) {\r\n        return _getRemainingBudget(_token) >= _amount && vault.balance(_token) >= _amount;\r\n    }\r\n\r\n    function _getRemainingBudget(address _token) internal view returns (uint256) {\r\n        if (!settings.hasBudget[_token]) {\r\n            return MAX_UINT;\r\n        }\r\n\r\n        uint256 spent = periods[_currentPeriodId()].tokenStatement[_token].expenses;\r\n\r\n        // A budget decrease can cause the spent amount to be greater than period budget\r\n        // If so, return 0 to not allow more spending during period\r\n        if (spent >= settings.budgets[_token]) {\r\n            return 0;\r\n        }\r\n\r\n        return settings.budgets[_token].sub(spent);\r\n    }\r\n\r\n    function _currentPeriodId() internal view returns (uint64) {\r\n        // There is no way for this to overflow if protected by an initialization check\r\n        return periodsLength - 1;\r\n    }\r\n\r\n    // Must be view for mocking purposes\r\n    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_PAYMENTS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentId\",\"type\":\"uint256\"}],\"name\":\"executePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_periodDuration\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBudget\",\"outputs\":[{\"name\":\"budget\",\"type\":\"uint256\"},{\"name\":\"hasBudget\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentId\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPaymentStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paymentId\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"initialPaymentTime\",\"type\":\"uint64\"},{\"name\":\"interval\",\"type\":\"uint64\"},{\"name\":\"maxRepeats\",\"type\":\"uint64\"},{\"name\":\"inactive\",\"type\":\"bool\"},{\"name\":\"repeats\",\"type\":\"uint64\"},{\"name\":\"createdBy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"name\":\"periodId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"paymentId\",\"type\":\"uint256\"},{\"name\":\"paymentRepeatNumber\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"entity\",\"type\":\"address\"},{\"name\":\"isIncoming\",\"type\":\"bool\"},{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_PERIOD_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_BUDGETS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentId\",\"type\":\"uint256\"}],\"name\":\"receiverExecutePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_periodId\",\"type\":\"uint64\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"isCurrent\",\"type\":\"bool\"},{\"name\":\"startTime\",\"type\":\"uint64\"},{\"name\":\"endTime\",\"type\":\"uint64\"},{\"name\":\"firstTransactionId\",\"type\":\"uint256\"},{\"name\":\"lastTransactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periodDuration\",\"type\":\"uint64\"}],\"name\":\"setPeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_initialPaymentTime\",\"type\":\"uint64\"},{\"name\":\"_interval\",\"type\":\"uint64\"},{\"name\":\"_maxRepeats\",\"type\":\"uint64\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"newPayment\",\"outputs\":[{\"name\":\"paymentId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXECUTE_PAYMENTS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriodId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxTransitions\",\"type\":\"uint64\"}],\"name\":\"tryTransitionAccountingPeriod\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriodDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paymentId\",\"type\":\"uint256\"}],\"name\":\"nextPaymentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_periodId\",\"type\":\"uint64\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPeriodTokenStatement\",\"outputs\":[{\"name\":\"expenses\",\"type\":\"uint256\"},{\"name\":\"income\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentsNextIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_PAYMENTS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsNextIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRemainingBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"periodId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"periodStarts\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"periodEnds\",\"type\":\"uint64\"}],\"name\":\"NewPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hasBudget\",\"type\":\"bool\"}],\"name\":\"SetBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maxRepeats\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"incoming\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"NewTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inactive\",\"type\":\"bool\"}],\"name\":\"ChangePaymentState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDuration\",\"type\":\"uint64\"}],\"name\":\"ChangePeriodDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"PaymentFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"}]","ContractName":"Finance","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07157d0bfabbea9a414481b35373344068dfd13166595f736bc3973b46ccbc09"}]}