{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMathLib {\r\n    function plus(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract GenderGuess {\r\n    \r\n    using SafeMathLib for uint;\r\n    \r\n    address public manager;\r\n    uint public enddate;\r\n    uint public donatedAmount;\r\n    bytes32 girl;\r\n    bytes32 boy;\r\n    address binanceContribute;\r\n    \r\n    address[] all_prtcpnts;\r\n    address[] boy_prtcpnts;\r\n    address[] girl_prtcpnts;\r\n    address[] crrct_prtcpnts;\r\n    address[] top_ten_prtcpnts;\r\n    address[] lucky_two_prtcpnts;\r\n    uint[] prtcpnt_donation;\r\n    \r\n    mapping (address => bool) public Wallets;\r\n\r\n    constructor (uint _enddate) public {\r\n        manager = msg.sender;\r\n        enddate = _enddate;\r\n        donatedAmount = 0;\r\n        girl = \"girl\";\r\n        boy = \"boy\";\r\n        binanceContribute = 0xA73d9021f67931563fDfe3E8f66261086319a1FC;\r\n    } \r\n    \r\n    event ParticipantJoined(address _address, bytes32 pick);\r\n    event Winners(address[] _addresses, uint _share);\r\n    event IncreasedReward(address _sender, uint _amount);\r\n\r\n    modifier manageronly (){\r\n        require(\r\n            msg.sender == manager,\r\n            \"Sender is not authorized.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier conditions (){\r\n        require(\r\n            msg.value >= 0.01 ether,\r\n            \"Minimum ETH not sent\"\r\n        );\r\n        require(\r\n            Wallets[msg.sender] == false,\r\n            \"Sender has already participated.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier participateBefore (uint _enddate){\r\n        require(\r\n            now <= _enddate,\r\n            \"Paticipants not allwoed.Time up!\"\r\n        );\r\n        _;\r\n    }      \r\n    \r\n    modifier pickOnlyAfter (uint _enddate){\r\n        require(\r\n            now > _enddate,\r\n            \"Not yet time\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    function enter(bytes32 gender) public payable conditions participateBefore(enddate) {\r\n        emit ParticipantJoined(msg.sender, gender);\r\n        require(\r\n            ((gender == boy) || (gender == girl)),\r\n            \"Invalid Entry!\"\r\n        );\r\n        \r\n        //first transfer funds to binance ETH address\r\n        binanceContribute.transfer(msg.value);\r\n        donatedAmount = donatedAmount.plus(msg.value);\r\n        all_prtcpnts.push(msg.sender);\r\n        prtcpnt_donation.push(msg.value);\r\n        \r\n        //mark wallet address as participated\r\n        setWallet(msg.sender);\r\n        \r\n        if (gender == boy){\r\n            boy_prtcpnts.push(msg.sender);\r\n        } else if(gender == girl) {\r\n            girl_prtcpnts.push(msg.sender);\r\n        }\r\n    }\r\n    \r\n    function pickWinner(bytes32 _gender, uint256 _randomvalue) public manageronly pickOnlyAfter(enddate) {\r\n        if ((all_prtcpnts.length < 100) || (boy_prtcpnts.length < 30) || (girl_prtcpnts.length < 30)) {\r\n            binanceContribute.transfer(this.getRewardAmount());\r\n        } else {\r\n            if(_gender == boy) { \r\n                crrct_prtcpnts = boy_prtcpnts;\r\n            } else if (_gender == girl) { \r\n                crrct_prtcpnts = girl_prtcpnts;\r\n            }\r\n            winnerSelect(_randomvalue);\r\n        }\r\n    }\r\n    \r\n    function winnerSelect(uint256 _randomvalue) private  {\r\n        \r\n        //select 2 from all\r\n        for (uint i = 0; i < 2; i++){ \r\n            \r\n            uint index = doRandom(crrct_prtcpnts, _randomvalue) % crrct_prtcpnts.length;\r\n            \r\n            //remove winner address from the list before doing the transfer\r\n            address _tempAddress = crrct_prtcpnts[index];\r\n            crrct_prtcpnts[index] = crrct_prtcpnts[crrct_prtcpnts.length - 1];\r\n            crrct_prtcpnts.length--;\r\n            lucky_two_prtcpnts.push(_tempAddress);\r\n        }\r\n        \r\n        uint share = this.getRewardAmount() / 2;\r\n        lucky_two_prtcpnts[0].transfer(share);\r\n        lucky_two_prtcpnts[1].transfer(share);\r\n        emit Winners(lucky_two_prtcpnts, share);\r\n\r\n    }\r\n    \r\n    function increaseReward() payable public participateBefore(enddate){\r\n        emit IncreasedReward(msg.sender, msg.value);\r\n    }\r\n    \r\n    function checkIsOpen() public view returns(bool){\r\n        if (now <= enddate){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    function doRandom(address[] _address, uint _linuxTime) private view returns (uint){\r\n        return uint(keccak256(block.difficulty, now, _address, _linuxTime));\r\n    }\r\n    \r\n    function setWallet(address _wallet) private {\r\n        Wallets[_wallet] = true;\r\n    }\r\n    \r\n    function getRewardAmount() public view returns(uint) {\r\n        return address(this).balance;\r\n    } \r\n\r\n    function getParticipants() public view returns(address[],uint[], uint, uint){\r\n        return (all_prtcpnts,prtcpnt_donation, boy_prtcpnts.length, girl_prtcpnts.length);\r\n    }\r\n    /**********\r\n     Standard kill() function to recover funds \r\n     **********/\r\n    \r\n    function kill() public manageronly {\r\n        selfdestruct(binanceContribute);  // kills this contract and sends remaining funds back to creator\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"checkIsOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gender\",\"type\":\"bytes32\"},{\"name\":\"_randomvalue\",\"type\":\"uint256\"}],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gender\",\"type\":\"bytes32\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donatedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_enddate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pick\",\"type\":\"bytes32\"}],\"name\":\"ParticipantJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"Winners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncreasedReward\",\"type\":\"event\"}]","ContractName":"GenderGuess","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bda4200","Library":"","SwarmSource":"bzzr://42e9c9f7af9fd95a0cd5f40603bcb0f0dc44307498bfd2aab37a1dad470b8ac4"}]}