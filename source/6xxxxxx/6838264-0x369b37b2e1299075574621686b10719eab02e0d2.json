{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/dex/ITokenConverter.sol\r\n\r\ncontract ITokenConverter {    \r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Makes a simple ERC20 -> ERC20 token trade\r\n    * @param _srcToken - IERC20 token\r\n    * @param _destToken - IERC20 token \r\n    * @param _srcAmount - uint256 amount to be converted\r\n    * @param _destAmount - uint256 amount to get after conversion\r\n    * @return uint256 for the change. 0 if there is no change\r\n    */\r\n    function convert(\r\n        IERC20 _srcToken,\r\n        IERC20 _destToken,\r\n        uint256 _srcAmount,\r\n        uint256 _destAmount\r\n        ) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Get exchange rate and slippage rate. \r\n    * Note that these returned values are in 18 decimals regardless of the destination token's decimals.\r\n    * @param _srcToken - IERC20 token\r\n    * @param _destToken - IERC20 token \r\n    * @param _srcAmount - uint256 amount to be converted\r\n    * @return uint256 of the expected rate\r\n    * @return uint256 of the slippage rate\r\n    */\r\n    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \r\n        public view returns(uint256 expectedRate, uint256 slippageRate);\r\n}\r\n\r\n// File: contracts/dex/IKyberNetwork.sol\r\n\r\ncontract IKyberNetwork {\r\n    function trade(\r\n        IERC20 _srcToken,\r\n        uint _srcAmount,\r\n        IERC20 _destToken,\r\n        address _destAddress, \r\n        uint _maxDestAmount,\t\r\n        uint _minConversionRate,\t\r\n        address _walletId\r\n        ) \r\n        public payable returns(uint);\r\n\r\n    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint _srcAmount) \r\n        public view returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n/**\r\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\r\n* Transfers : transfer methods could have a return value (bool), revert for insufficient funds or\r\n* unathorized value.\r\n*\r\n* Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\r\n* The common strategy used to clean approvals.\r\n*/\r\nlibrary SafeERC20 {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        require(prevBalance >= _value, \"Insufficient funds\");\r\n\r\n        _token.transfer(_to, _value);\r\n\r\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n    ) internal returns (bool) \r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        require(prevBalance >= _value, \"Insufficient funds\");\r\n        require(_token.allowance(_from, address(this)) >= _value, \"Insufficient allowance\");\r\n\r\n        _token.transferFrom(_from, _to, _value);\r\n\r\n        require(prevBalance - _value == _token.balanceOf(_from), \"Transfer failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * \r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\r\n        bool success = address(_token).call(abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _value\r\n        )); \r\n\r\n        if (!success) {\r\n            return false;\r\n        }\r\n\r\n        require(_token.allowance(address(this), _spender) == _value, \"Approve failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n   /** \r\n   * @dev Clear approval\r\n   * Note that if 0 is not a valid value it will be set to 1.\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   */\r\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\r\n        bool success = safeApprove(_token, _spender, 0);\r\n\r\n        if (!success) {\r\n            return safeApprove(_token, _spender, 1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/dex/KyberConverter.sol\r\n\r\n/**\r\n* @dev Contract to encapsulate Kyber methods which implements ITokenConverter.\r\n* Note that need to create it with a valid kyber address\r\n*/\r\ncontract KyberConverter is ITokenConverter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IKyberNetwork public  kyber;\r\n    address public walletId;\r\n\r\n    constructor (IKyberNetwork _kyber, address _walletId) public {\r\n        kyber = _kyber;\r\n        walletId = _walletId;\r\n    }\r\n    \r\n    function convert(\r\n        IERC20 _srcToken,\r\n        IERC20 _destToken,\r\n        uint256 _srcAmount,\r\n        uint256 _destAmount\r\n    ) \r\n    external returns (uint256)\r\n    {\r\n        // Save prev src token balance \r\n        uint256 prevSrcBalance = _srcToken.balanceOf(address(this));\r\n\r\n        // Transfer tokens to be converted from msg.sender to this contract\r\n        require(\r\n            _srcToken.safeTransferFrom(msg.sender, address(this), _srcAmount),\r\n            \"Could not transfer _srcToken to this contract\"\r\n        );\r\n\r\n        // Approve Kyber to use _srcToken on belhalf of this contract\r\n        require(\r\n            _srcToken.safeApprove(kyber, _srcAmount),\r\n            \"Could not approve kyber to use _srcToken on behalf of this contract\"\r\n        );\r\n\r\n        // Trade _srcAmount from _srcToken to _destToken\r\n        // Note that minConversionRate is set to 0 cause we want the lower rate possible\r\n        uint256 amount = kyber.trade(\r\n            _srcToken,\r\n            _srcAmount,\r\n            _destToken,\r\n            address(this),\r\n            _destAmount,\r\n            0,\r\n            walletId\r\n        );\r\n\r\n        // Clean kyber to use _srcTokens on belhalf of this contract\r\n        require(\r\n            _srcToken.clearApprove(kyber),\r\n            \"Could not clean approval of kyber to use _srcToken on behalf of this contract\"\r\n        );\r\n\r\n        // Check if the amount traded is equal to the expected one\r\n        require(amount == _destAmount, \"Amount bought is not equal to dest amount\");\r\n\r\n        // Return the change of src token\r\n        uint256 change = _srcToken.balanceOf(address(this)).sub(prevSrcBalance);\r\n        require(\r\n            _srcToken.safeTransfer(msg.sender, change),\r\n            \"Could not transfer change to sender\"\r\n        );\r\n\r\n\r\n        // Transfer amount of _destTokens to msg.sender\r\n        require(\r\n            _destToken.safeTransfer(msg.sender, amount),\r\n            \"Could not transfer amount of _destToken to msg.sender\"\r\n        );\r\n\r\n        return change;\r\n    }\r\n\r\n    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \r\n    public view returns(uint256 expectedRate, uint256 slippageRate) \r\n    {\r\n        (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, _srcAmount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_walletId\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"KyberConverter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000db717e3148c09333e21ca93c2c1d4c42ec8b93db","Library":"","SwarmSource":"bzzr://59a8d310d6de49cbd18a15ef93b8e08a4b75c94cd022a4eb7953de0dacdff84d"}]}