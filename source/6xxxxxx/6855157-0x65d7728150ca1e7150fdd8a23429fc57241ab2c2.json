{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ================= ERC20 Token Contract start =========================\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// Evabot interface\r\ncontract Evabot {\r\n    function increasePendingTokenBalance(address _user, uint256 _amount) public;\r\n}\r\n\r\n// Evotexchange interface\r\ncontract EvotExchange {\r\n    function increaseEthBalance(address _user, uint256 _amount) public;\r\n    function increaseTokenBalance(address _user, uint256 _amount) public;\r\n}\r\n\r\n// wallet contract\r\ncontract Evoai {\r\n  \r\n  using SafeMath for uint256;\r\n  address private admin; //the admin address\r\n  address private evabot_contract; //evabot contract address\r\n  address private exchange_contract; //exchange contract address\r\n  address private tokenEVOT; // EVOT contract\r\n  uint256 public feeETH; // ETH fee value\r\n  uint256 public feeEVOT; //EVOAI fee value\r\n  uint256 public totalEthFee; // total acount ether fee\r\n  uint256 public totalTokenFee; // total account token fee\r\n  mapping (address => uint256) public tokenBalance; //mapping of token address\r\n  mapping (address => uint256) public etherBalance; //mapping of ether address\r\n  \r\n  //events\r\n  event Deposit(uint256 types, address user, uint256 amount); // type 0 is ether, 1 is token\r\n  event Withdraw(uint256 types, address user, uint256 amount); // type 0 is ether, 1 is token\r\n  event Transfered(uint256 types, address _from, uint256 amount, address _to);// type 0 is ether, 1 is token\r\n  \r\n  // constructor\r\n  constructor() public {\r\n    admin = msg.sender;\r\n    totalEthFee = 0; // init with zero (contract fee)\r\n    totalTokenFee = 0; // init the token fee\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n  \r\n  // set the EVOT token contract address\r\n  function setTokenAddress(address _token) onlyAdmin() public {\r\n      tokenEVOT = _token;\r\n  }\r\n  \r\n  // set evabot contract address to interact with that\r\n  function setEvabotContractAddress(address _token) onlyAdmin() public {\r\n      evabot_contract = _token;\r\n  }\r\n  \r\n  // set evabot contract address to interact with that\r\n  function setExchangeContractAddress(address _token) onlyAdmin() public {\r\n      exchange_contract = _token;\r\n  }\r\n  \r\n  // set initial fee\r\n  function setETHFee(uint256 amount) onlyAdmin() public {\r\n    feeETH = amount;\r\n  }\r\n  \r\n  // set initial token fee\r\n  function setTokenFee(uint256 amount) onlyAdmin() public {\r\n    feeEVOT = amount;\r\n  }\r\n  \r\n  //change the admin account\r\n  function changeAdmin(address admin_) onlyAdmin() public {\r\n    admin = admin_;\r\n  }\r\n\r\n  // ether deposit\r\n  function deposit() payable public {\r\n    totalEthFee = totalEthFee.add(feeETH);\r\n    etherBalance[msg.sender] = (etherBalance[msg.sender]).add(msg.value.sub(feeETH));\r\n    emit Deposit(0, msg.sender, msg.value); // 0 is ether deposit\r\n  }\r\n\r\n  function() payable public {\r\n      \r\n  }\r\n  \r\n  // withdraw ether\r\n  function withdraw(uint256 amount) public {\r\n    require(etherBalance[msg.sender] >= amount);\r\n    etherBalance[msg.sender] = etherBalance[msg.sender].sub(amount);\r\n    msg.sender.transfer(amount);\r\n    emit Withdraw(0, msg.sender, amount); // 0 is ether withdraw\r\n  }\r\n\r\n  // deposit token\r\n  function depositToken(uint256 amount) public {\r\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n    if (!ERC20(tokenEVOT).transferFrom(msg.sender, this, amount)) revert();\r\n    totalTokenFee = totalTokenFee.add(feeEVOT);\r\n    tokenBalance[msg.sender] = tokenBalance[msg.sender].add(amount.sub(feeEVOT));\r\n    emit Deposit(1, msg.sender, amount); // 1 is token deposit\r\n  }\r\n\r\n  // withdraw token\r\n  function withdrawToken(uint256 amount) public {\r\n    require(tokenBalance[msg.sender] >= amount);\r\n    tokenBalance[msg.sender] = tokenBalance[msg.sender].sub(amount);\r\n    if (!ERC20(tokenEVOT).transfer(msg.sender, amount)) revert();\r\n    emit Withdraw(1, msg.sender, amount); // 1 is token withdraw\r\n  }\r\n\r\n  // ether transfer\r\n  function transferETH(uint256 amount) public {\r\n    require(etherBalance[msg.sender] >= amount);\r\n    etherBalance[msg.sender] = etherBalance[msg.sender].sub(amount);\r\n    exchange_contract.transfer(amount);\r\n    EvotExchange(exchange_contract).increaseEthBalance(msg.sender, amount);\r\n    emit Transfered(0, msg.sender, amount, msg.sender);\r\n  }\r\n\r\n  // transfer token\r\n  function transferToken(address _receiver, uint256 amount) public {\r\n    if (tokenEVOT==0) revert();\r\n    require(tokenBalance[msg.sender] >= amount);\r\n    tokenBalance[msg.sender] = tokenBalance[msg.sender].sub(amount);\r\n    if (!ERC20(tokenEVOT).transfer(_receiver, amount)) revert();\r\n    if (_receiver == evabot_contract)\r\n        Evabot(evabot_contract).increasePendingTokenBalance(msg.sender, amount);\r\n    if (_receiver == exchange_contract)\r\n        EvotExchange(exchange_contract).increaseTokenBalance(msg.sender, amount);\r\n    emit Transfered(1, msg.sender, amount, msg.sender);\r\n  }\r\n  \r\n  // received ether from evabot_contract\r\n  function recevedEthFromEvabot(address _user, uint256 _amount) public {\r\n    require(msg.sender == evabot_contract);\r\n    etherBalance[_user] = etherBalance[_user].add(_amount);\r\n  }\r\n  \r\n  // received token from evabot_contract\r\n  function recevedTokenFromEvabot(address _user, uint256 _amount) public {\r\n    require(msg.sender == evabot_contract);\r\n    tokenBalance[_user] = tokenBalance[_user].add(_amount);\r\n  }\r\n  \r\n  // received ether from exchange contract\r\n  function recevedEthFromExchange(address _user, uint256 _amount) public {\r\n    require(msg.sender == exchange_contract);\r\n    etherBalance[_user] = etherBalance[_user].add(_amount);\r\n  }\r\n  \r\n  // withdraw ether fee\r\n  function feeWithdrawEthAmount(uint256 amount) onlyAdmin() public {\r\n    require(totalEthFee >= amount);\r\n    totalEthFee = totalEthFee.sub(amount);\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  // withrawall ether fee.\r\n  function feeWithdrawEthAll() onlyAdmin() public {\r\n    if (totalEthFee == 0) revert();\r\n    totalEthFee = 0;\r\n    msg.sender.transfer(totalEthFee);\r\n  }\r\n\r\n  // withdraw token fee\r\n  function feeWithdrawTokenAmount(uint256 amount) onlyAdmin() public {\r\n    require(totalTokenFee >= amount);\r\n    if (!ERC20(tokenEVOT).transfer(msg.sender, amount)) revert();\r\n    totalTokenFee = totalTokenFee.sub(amount);\r\n  }\r\n\r\n  // withdraw all token fee\r\n  function feeWithdrawTokenAll() onlyAdmin() public {\r\n    if (totalTokenFee == 0) revert();\r\n    if (!ERC20(tokenEVOT).transfer(msg.sender, totalTokenFee)) revert();\r\n    totalTokenFee = 0;\r\n  }\r\n  \r\n  // withraw all ether on the contract\r\n  function withrawAllEthOnContract() onlyAdmin() public {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n  \r\n  // withrawall token on the contract\r\n  function withdrawAllTokensOnContract(uint256 _balance) onlyAdmin() public {\r\n    if (!ERC20(tokenEVOT).transfer(msg.sender, _balance)) revert();\r\n  }\r\n\r\n  // get token contract address\r\n  function getEvotTokenAddress() public constant returns (address) {\r\n    return tokenEVOT;    \r\n  }\r\n  \r\n  // get evabot contract\r\n  function getEvabotContractAddress() public constant returns (address) {\r\n    return evabot_contract;\r\n  }\r\n  \r\n  // get exchange contract\r\n  function getExchangeContractAddress() public constant returns (address) {\r\n    return exchange_contract;\r\n  }\r\n  \r\n  // get token balance by user address\r\n  function balanceOfToken(address user) public constant returns (uint256) {\r\n    return tokenBalance[user];\r\n  }\r\n\r\n  // get ether balance by user address\r\n  function balanceOfETH(address user) public constant returns (uint256) {\r\n    return etherBalance[user];\r\n  }\r\n\r\n  // get ether contract fee\r\n  function balanceOfContractFeeEth() public constant returns (uint256) {\r\n    return totalEthFee;\r\n  }\r\n\r\n  // get token contract fee\r\n  function balanceOfContractFeeToken() public constant returns (uint256) {\r\n    return totalTokenFee;\r\n  }\r\n  \r\n  // get current ETH fee\r\n  function getCurrentEthFee() public constant returns (uint256) {\r\n      return feeETH;\r\n  }\r\n  \r\n  // get current token fee\r\n  function getCurrentTokenFee() public constant returns (uint256) {\r\n      return feeEVOT;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfContractFeeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setExchangeContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setETHFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recevedEthFromEvabot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEvotTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"feeWithdrawEthAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEvabotContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeWithdrawTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recevedTokenFromEvabot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withrawAllEthOnContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setEvabotContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeWithdrawEthAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"feeWithdrawTokenAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"withdrawAllTokensOnContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeEVOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recevedEthFromExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfContractFeeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Transfered\",\"type\":\"event\"}]","ContractName":"Evoai","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://bbc819934f56b8082e6d74e0704794227cb938f1980c265da50072bd4b6b6465"}]}