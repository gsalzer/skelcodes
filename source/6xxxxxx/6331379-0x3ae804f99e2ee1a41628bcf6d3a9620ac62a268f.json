{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        role.bearer[account] = true;\r\n    }\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        role.bearer[account] = false;\r\n    }\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private minters;\r\n\r\n    constructor() public {\r\n        minters.add(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        minters.remove(msg.sender);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n    \r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) internal _supportedInterfaces;\r\n    constructor()\r\n        public\r\n    {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n    function _registerInterface(bytes4 interfaceId)\r\n        internal\r\n    {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId)\r\n        public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator)\r\n        public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId)\r\n        public;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes data\r\n    )\r\n        public;\r\n}\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(\r\n        address owner,\r\n        uint256 index\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string);\r\n    function symbol() external view returns (string);\r\n    function tokenURI(uint256 tokenId) public view returns (string);\r\n}\r\ncontract IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes data\r\n    )\r\n        public\r\n        returns(bytes4);\r\n}\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n}\r\ncontract ERC721 is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        _registerInterface(_InterfaceId_ERC721);\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n    {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n\r\n        _clearApproval(from, tokenId);\r\n        _removeTokenFrom(from, tokenId);\r\n        _addTokenTo(to, tokenId);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n    {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n    {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(tokenId);\r\n        return (\r\n        spender == owner ||\r\n        getApproved(tokenId) == spender ||\r\n        isApprovedForAll(owner, spender)\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        _addTokenTo(to, tokenId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        _clearApproval(owner, tokenId);\r\n        _removeTokenFrom(owner, tokenId);\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _clearApproval(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner);\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n        _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        require(_tokenOwner[tokenId] == address(0));\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n    }\r\n\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n    }\r\n\r\n    function _checkAndCallSafeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes _data\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n        return true;\r\n        }\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n        msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n}\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n    string internal _name;\r\n\r\n    string internal _symbol;\r\n\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n    constructor(string name, string symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n    }\r\n\r\n    function name() external view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string) {\r\n        require(_exists(tokenId));\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    function _setTokenURI(uint256 tokenId, string uri) internal {\r\n        require(_exists(tokenId));\r\n        _tokenURIs[tokenId] = uri;\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n        delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    uint256[] private _allTokens;\r\n\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n\r\n    constructor() public {\r\n        _registerInterface(_InterfaceId_ERC721Enumerable);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address owner,\r\n        uint256 index\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(index < balanceOf(owner));\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply());\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        super._addTokenTo(to, tokenId);\r\n        uint256 length = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        super._removeTokenFrom(from, tokenId);\r\n\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n        _ownedTokens[from][tokenIndex] = lastToken;\r\n        _ownedTokens[from].length--;\r\n\r\n        _ownedTokensIndex[tokenId] = 0;\r\n        _ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastToken;\r\n        _allTokens[lastTokenIndex] = 0;\r\n\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n        _allTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n}\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor(string name, string symbol) ERC721Metadata(name, symbol)\r\n        public\r\n    {\r\n    }\r\n}\r\ncontract ERC721Mintable is ERC721Full, MinterRole {\r\n    event MintingFinished();\r\n\r\n    bool private _mintingFinished = false;\r\n\r\n    modifier onlyBeforeMintingFinished() {\r\n        require(!_mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mintingFinished() public view returns(bool) {\r\n        return _mintingFinished;\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        _mint(to, tokenId);\r\n        return true;\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string tokenURI\r\n    )\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        mint(to, tokenId);\r\n        _setTokenURI(tokenId, tokenURI);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting()\r\n        public\r\n        onlyMinter\r\n        onlyBeforeMintingFinished\r\n        returns (bool)\r\n    {\r\n        _mintingFinished = true;\r\n        emit MintingFinished();\r\n        return true;\r\n    }\r\n}\r\ncontract ERC721Burnable is ERC721 {\r\n    function burn(uint256 tokenId)\r\n        public\r\n    {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n}\r\ncontract ERC721Contract is ERC721Full, ERC721Mintable, ERC721Burnable {\r\n    constructor(string name, string symbol) public\r\n        ERC721Mintable()\r\n        ERC721Full(name, symbol)\r\n    {}\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string uri) public {\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function removeTokenFrom(address from, uint256 tokenId) public {\r\n        _removeTokenFrom(from, tokenId);\r\n    }\r\n}\r\ncontract ERC721Constructor {\r\n    event newERC721(address contractAddress, string name, string symbol, address owner);\r\n\r\n    function CreateAdminERC721(string name, string symbol, address owner) public {\r\n        ERC721Contract ERC721Construct = new ERC721Contract(name, symbol);\r\n        ERC721Construct.addMinter(owner);\r\n        ERC721Construct.renounceMinter();\r\n        emit newERC721(address(ERC721Construct), name, symbol, owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateAdminERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"newERC721\",\"type\":\"event\"}]","ContractName":"ERC721Constructor","CompilerVersion":"v0.4.25-nightly.2018.6.6+commit.59b35fa5","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://654844f76224a0e4c5024a0c39b792e933466a5a80c82653e17d5cd2d9a19978"}]}