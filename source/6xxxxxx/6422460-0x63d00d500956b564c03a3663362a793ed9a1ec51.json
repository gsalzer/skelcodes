{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/// @title A facet of CSportsCore that holds all important constants and modifiers\r\n/// @author CryptoSports, Inc. (https://cryptosports.team))\r\n/// @dev See the CSportsCore contract documentation to understand how the various CSports contract facets are arranged.\r\ncontract CSportsConstants {\r\n\r\n    /// @dev The maximum # of marketing tokens that can ever be created\r\n    /// by the commissioner.\r\n    uint16 public MAX_MARKETING_TOKENS = 2500;\r\n\r\n    /// @dev The starting price for commissioner auctions (if the average\r\n    ///   of the last 2 is less than this, we will use this value)\r\n    ///   A finney is 1/1000 of an ether.\r\n    uint256 public COMMISSIONER_AUCTION_FLOOR_PRICE = 5 finney; // 5 finney for production, 15 for script testing and 1 finney for Rinkeby\r\n\r\n    /// @dev The duration of commissioner auctions\r\n    uint256 public COMMISSIONER_AUCTION_DURATION = 14 days; // 30 days for testing;\r\n\r\n    /// @dev Number of seconds in a week\r\n    uint32 constant WEEK_SECS = 1 weeks;\r\n\r\n}\r\n\r\n/// @title A facet of CSportsCore that manages an individual's authorized role against access privileges.\r\n/// @author CryptoSports, Inc. (https://cryptosports.team))\r\n/// @dev See the CSportsCore contract documentation to understand how the various CSports contract facets are arranged.\r\ncontract CSportsAuth is CSportsConstants {\r\n    // This facet controls access control for CryptoSports. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the CSportsCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from CSportsCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can perform administrative functions.\r\n    //\r\n    //     - The Commisioner can perform \"oracle\" functions like adding new real world players,\r\n    //       setting players active/inactive, and scoring contests.\r\n    //\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    /// The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n    address public commissionerAddress;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Flag that identifies whether or not we are in development and should allow development\r\n    /// only functions to be called.\r\n    bool public isDevelopment = true;\r\n\r\n    /// @dev Access modifier to allow access to development mode functions\r\n    modifier onlyUnderDevelopment() {\r\n      require(isDevelopment == true);\r\n      _;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for Commissioner-only functionality\r\n    modifier onlyCommissioner() {\r\n        require(msg.sender == commissionerAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Requires any one of the C level addresses\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress ||\r\n            msg.sender == commissionerAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev prevents contracts from hitting the method\r\n    modifier notContract() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev One way switch to set the contract into prodution mode. This is one\r\n    /// way in that the contract can never be set back into development mode. Calling\r\n    /// this function will block all future calls to functions that are meant for\r\n    /// access only while we are under development. It will also enable more strict\r\n    /// additional checking on various parameters and settings.\r\n    function setProduction() public onlyCEO onlyUnderDevelopment {\r\n      isDevelopment = false;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the Commissioner. Only available to the current CEO.\r\n    /// @param _newCommissioner The address of the new COO\r\n    function setCommissioner(address _newCommissioner) public onlyCEO {\r\n        require(_newCommissioner != address(0));\r\n\r\n        commissionerAddress = _newCommissioner;\r\n    }\r\n\r\n    /// @dev Assigns all C-Level addresses\r\n    /// @param _ceo CEO address\r\n    /// @param _cfo CFO address\r\n    /// @param _coo COO address\r\n    /// @param _commish Commissioner address\r\n    function setCLevelAddresses(address _ceo, address _cfo, address _coo, address _commish) public onlyCEO {\r\n        require(_ceo != address(0));\r\n        require(_cfo != address(0));\r\n        require(_coo != address(0));\r\n        require(_commish != address(0));\r\n        ceoAddress = _ceo;\r\n        cfoAddress = _cfo;\r\n        cooAddress = _coo;\r\n        commissionerAddress = _commish;\r\n    }\r\n\r\n    /// @dev Transfers the balance of this contract to the CFO\r\n    function withdrawBalance() external onlyCFO {\r\n        cfoAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n/// @dev Interface required by league roster contract to access\r\n/// the mintPlayers(...) function\r\ninterface CSportsMinter {\r\n\r\n    /// @dev Called by league roster contract as a sanity check\r\n    function isMinter() external pure returns (bool);\r\n\r\n    /// @dev The method called by the league roster contract to mint a new player and create its commissioner auction\r\n    function mintPlayers(uint128[] _md5Tokens, uint256 _startPrice, uint256 _endPrice, uint256 _duration) external;\r\n}\r\n/// @dev This is the data structure that holds a roster player in the CSportsLeagueRoster\r\n/// contract. Also referenced by CSportsCore.\r\n/// @author CryptoSports, Inc. (http://cryptosports.team)\r\ncontract CSportsRosterPlayer {\r\n\r\n    struct RealWorldPlayer {\r\n\r\n        // The player's certified identification. This is the md5 hash of\r\n        // {player's last name}-{player's first name}-{player's birthday in YYYY-MM-DD format}-{serial number}\r\n        // where the serial number is usually 0, but gives us an ability to deal with making\r\n        // sure all MD5s are unique.\r\n        uint128 md5Token;\r\n\r\n        // Stores the average sale price of the most recent 2 commissioner sales\r\n        uint128 prevCommissionerSalePrice;\r\n\r\n        // The last time this real world player was minted.\r\n        uint64 lastMintedTime;\r\n\r\n        // The number of PlayerTokens minted for this real world player\r\n        uint32 mintedCount;\r\n\r\n        // When true, there is an active auction for this player owned by\r\n        // the commissioner (indicating a gen0 minting auction is in progress)\r\n        bool hasActiveCommissionerAuction;\r\n\r\n        // Indicates this real world player can be actively minted\r\n        bool mintingEnabled;\r\n\r\n        // Any metadata we want to attach to this player (in JSON format)\r\n        string metadata;\r\n\r\n    }\r\n\r\n}\r\n\r\n/// @title Contract that holds all of the real world player data. This data is\r\n/// added by the commissioner and represents an on-blockchain database of\r\n/// players in the league.\r\n/// @author CryptoSports, Inc. (http://cryptosports.team)\r\ncontract CSportsLeagueRoster is CSportsAuth, CSportsRosterPlayer  {\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev Holds the coreContract which supports the CSportsMinter interface\r\n  CSportsMinter public minterContract;\r\n\r\n  /// @dev Holds one entry for each real-world player available in the\r\n  /// current league (e.g. NFL). There can be a maximum of 4,294,967,295\r\n  /// entries in this array (plenty) because it is indexed by a uint32.\r\n  /// This structure is constantly updated by a commissioner. If the\r\n  /// realWorldPlayer[<whatever].mintingEnabled property is true, then playerTokens\r\n  /// tied to this realWorldPlayer entry will automatically be minted.\r\n  RealWorldPlayer[] public realWorldPlayers;\r\n\r\n  mapping (uint128 => uint32) public md5TokenToRosterIndex;\r\n\r\n  /*** MODIFIERS ***/\r\n\r\n  /// @dev Access modifier for core contract only functions\r\n  modifier onlyCoreContract() {\r\n      require(msg.sender == address(minterContract));\r\n      _;\r\n  }\r\n\r\n  /*** FUNCTIONS ***/\r\n\r\n  /// @dev Contract constructor. All \"C\" level authorized addresses\r\n  /// are set to the contract creator.\r\n  constructor() public {\r\n    ceoAddress = msg.sender;\r\n    cfoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    commissionerAddress = msg.sender;\r\n  }\r\n\r\n  /// @dev Sanity check that identifies this contract is a league roster contract\r\n  function isLeagueRosterContract() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Returns the full player structure from the league roster contract given its index.\r\n  /// @param idx Index of player we are interested in\r\n  function realWorldPlayerFromIndex(uint128 idx) public view returns (uint128 md5Token, uint128 prevCommissionerSalePrice, uint64 lastMintedTime, uint32 mintedCount, bool hasActiveCommissionerAuction, bool mintingEnabled) {\r\n    RealWorldPlayer memory _rwp;\r\n    _rwp = realWorldPlayers[idx];\r\n    md5Token = _rwp.md5Token;\r\n    prevCommissionerSalePrice = _rwp.prevCommissionerSalePrice;\r\n    lastMintedTime = _rwp.lastMintedTime;\r\n    mintedCount = _rwp.mintedCount;\r\n    hasActiveCommissionerAuction = _rwp.hasActiveCommissionerAuction;\r\n    mintingEnabled = _rwp.mintingEnabled;\r\n  }\r\n\r\n  /// @dev Sets the coreContractAddress that will restrict access\r\n  /// to certin functions\r\n  function setCoreContractAddress(address _address) public onlyCEO {\r\n\r\n    CSportsMinter candidateContract = CSportsMinter(_address);\r\n    // NOTE: verify that a contract is what we expect (not foolproof, just\r\n    // a sanity check)\r\n    require(candidateContract.isMinter());\r\n    // Set the new contract address\r\n    minterContract = candidateContract;\r\n\r\n  }\r\n\r\n  /// @return uint32 count -  # of entries in the realWorldPlayer array\r\n  function playerCount() public view returns (uint32 count) {\r\n    return uint32(realWorldPlayers.length);\r\n  }\r\n\r\n  /// @dev Creates and adds realWorldPlayer entries, and mints a new ERC721 token for each, and puts each on\r\n  /// auction as a commissioner auction.\r\n  /// @param _md5Tokens The MD5s to be associated with the roster entries we are adding\r\n  /// @param _mintingEnabled An array (of equal length to _md5Tokens) indicating the minting status of that player\r\n  ///        (if an entry is not true, that player will not be minted and no auction created)\r\n  /// @param _startPrice The starting price for the auction we will create for the newly minted token\r\n  /// @param _endPrice The ending price for the auction we will create for the newly minted token\r\n  /// @param _duration The duration for the auction we will create for the newly minted token\r\n  function addAndMintPlayers(uint128[] _md5Tokens, bool[] _mintingEnabled, uint256 _startPrice, uint256 _endPrice, uint256 _duration) public onlyCommissioner {\r\n\r\n    // Add the real world players to the roster\r\n    addRealWorldPlayers(_md5Tokens, _mintingEnabled);\r\n\r\n    // Mint the newly added players and create commissioner auctions\r\n    minterContract.mintPlayers(_md5Tokens, _startPrice, _endPrice, _duration);\r\n\r\n  }\r\n\r\n  /// @dev Creates and adds a RealWorldPlayer entry.\r\n  /// @param _md5Tokens - An array of MD5 tokens for players to be added to our realWorldPlayers array.\r\n  /// @param _mintingEnabled - An array (of equal length to _md5Tokens) indicating the minting status of that player\r\n  function addRealWorldPlayers(uint128[] _md5Tokens, bool[] _mintingEnabled) public onlyCommissioner {\r\n    if (_md5Tokens.length != _mintingEnabled.length) {\r\n      revert();\r\n    }\r\n    for (uint32 i = 0; i < _md5Tokens.length; i++) {\r\n      // We won't try to put an md5Token duplicate by using the md5TokenToRosterIndex\r\n      // mapping (notice we need to deal with the fact that a non-existent mapping returns 0)\r\n      if ( (realWorldPlayers.length == 0) ||\r\n           ((md5TokenToRosterIndex[_md5Tokens[i]] == 0) && (realWorldPlayers[0].md5Token != _md5Tokens[i])) ) {\r\n        RealWorldPlayer memory _realWorldPlayer = RealWorldPlayer({\r\n                                                      md5Token: _md5Tokens[i],\r\n                                                      prevCommissionerSalePrice: 0,\r\n                                                      lastMintedTime: 0,\r\n                                                      mintedCount: 0,\r\n                                                      hasActiveCommissionerAuction: false,\r\n                                                      mintingEnabled: _mintingEnabled[i],\r\n                                                      metadata: \"\"\r\n                                                  });\r\n        uint256 _rosterIndex = realWorldPlayers.push(_realWorldPlayer) - 1;\r\n\r\n        // It's probably never going to happen, but just in case, we need\r\n        // to make sure our realWorldPlayers can be indexed by a uint32\r\n        require(_rosterIndex < 4294967295);\r\n\r\n        // Map the md5Token to its rosterIndex\r\n        md5TokenToRosterIndex[_md5Tokens[i]] = uint32(_rosterIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Sets the metadata for a real world player token that has already been added.\r\n  /// @param _md5Token The MD5 key of the token to update\r\n  /// @param _metadata The JSON string representing the metadata for the token\r\n  function setMetadata(uint128 _md5Token, string _metadata) public onlyCommissioner {\r\n      uint32 _rosterIndex = md5TokenToRosterIndex[_md5Token];\r\n      if ((_rosterIndex > 0) || ((realWorldPlayers.length > 0) && (realWorldPlayers[0].md5Token == _md5Token))) {\r\n        // Valid MD5 token\r\n        realWorldPlayers[_rosterIndex].metadata = _metadata;\r\n      }\r\n  }\r\n\r\n  /// @dev Returns the metadata for a specific token\r\n  /// @param _md5Token MD5 key for token we want the metadata for\r\n  function getMetadata(uint128 _md5Token) public view returns (string metadata) {\r\n    uint32 _rosterIndex = md5TokenToRosterIndex[_md5Token];\r\n    if ((_rosterIndex > 0) || ((realWorldPlayers.length > 0) && (realWorldPlayers[0].md5Token == _md5Token))) {\r\n      // Valid MD5 token\r\n      metadata = realWorldPlayers[_rosterIndex].metadata;\r\n    } else {\r\n      metadata = \"\";\r\n    }\r\n  }\r\n\r\n  /// @dev Function to remove a particular md5Token from our array of players. This function\r\n  ///   will be blocked after we are completed with development. Deleting entries would\r\n  ///   screw up the ids of realWorldPlayers held by the core contract's playerTokens structure.\r\n  /// @param _md5Token - The MD5 token of the entry to remove.\r\n  function removeRealWorldPlayer(uint128 _md5Token) public onlyCommissioner onlyUnderDevelopment  {\r\n    for (uint32 i = 0; i < uint32(realWorldPlayers.length); i++) {\r\n      RealWorldPlayer memory player = realWorldPlayers[i];\r\n      if (player.md5Token == _md5Token) {\r\n        uint32 stopAt = uint32(realWorldPlayers.length - 1);\r\n        for (uint32 j = i; j < stopAt; j++){\r\n            realWorldPlayers[j] = realWorldPlayers[j+1];\r\n            md5TokenToRosterIndex[realWorldPlayers[j].md5Token] = j;\r\n        }\r\n        delete realWorldPlayers[realWorldPlayers.length-1];\r\n        realWorldPlayers.length--;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns TRUE if there is an open commissioner auction for a realWorldPlayer\r\n  /// @param _md5Token - md5Token of the player of interest\r\n  function hasOpenCommissionerAuction(uint128 _md5Token) public view onlyCommissioner returns (bool) {\r\n    uint128 _rosterIndex = this.getRealWorldPlayerRosterIndex(_md5Token);\r\n    if (_rosterIndex == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\r\n      revert();\r\n    } else {\r\n      return realWorldPlayers[_rosterIndex].hasActiveCommissionerAuction;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns the rosterId of the player identified with an md5Token\r\n  /// @param _md5Token = md5Token of exisiting\r\n  function getRealWorldPlayerRosterIndex(uint128 _md5Token) public view returns (uint128) {\r\n\r\n    uint32 _rosterIndex = md5TokenToRosterIndex[_md5Token];\r\n    if (_rosterIndex == 0) {\r\n      // Deal with the fact that mappings return 0 for non-existent members and 0 is\r\n      // a valid rosterIndex for the 0th (first) entry in the realWorldPlayers array.\r\n      if ((realWorldPlayers.length > 0) && (realWorldPlayers[0].md5Token == _md5Token)) {\r\n        return uint128(0);\r\n      }\r\n    } else {\r\n      return uint128(_rosterIndex);\r\n    }\r\n\r\n    // Intentionally returning an invalid rosterIndex (too big) as an indicator that\r\n    // the md5 passed was not found.\r\n    return uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n  }\r\n\r\n  /// @dev Enables (or disables) minting for a particular real world player.\r\n  /// @param _md5Tokens - The md5Token of the player to be updated\r\n  /// @param _mintingEnabled - True to enable, false to disable minting for the player\r\n  function enableRealWorldPlayerMinting(uint128[] _md5Tokens, bool[] _mintingEnabled) public onlyCommissioner {\r\n    if (_md5Tokens.length != _mintingEnabled.length) {\r\n      revert();\r\n    }\r\n    for (uint32 i = 0; i < _md5Tokens.length; i++) {\r\n      uint32 _rosterIndex = md5TokenToRosterIndex[_md5Tokens[i]];\r\n      if ((_rosterIndex > 0) || ((realWorldPlayers.length > 0) && (realWorldPlayers[0].md5Token == _md5Tokens[i]))) {\r\n        // _rosterIndex is valid\r\n        realWorldPlayers[_rosterIndex].mintingEnabled = _mintingEnabled[i];\r\n      } else {\r\n        // Tried to enable/disable minting on non-existent realWorldPlayer\r\n        revert();\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns a boolean indicating whether or not a particular real world player is minting\r\n  /// @param _md5Token - The player to look at\r\n  function isRealWorldPlayerMintingEnabled(uint128 _md5Token) public view returns (bool) {\r\n    // Have to deal with the fact that the 0th entry is a valid one.\r\n    uint32 _rosterIndex = md5TokenToRosterIndex[_md5Token];\r\n    if ((_rosterIndex > 0) || ((realWorldPlayers.length > 0) && (realWorldPlayers[0].md5Token == _md5Token))) {\r\n      // _rosterIndex is valid\r\n      return realWorldPlayers[_rosterIndex].mintingEnabled;\r\n    } else {\r\n      // Tried to enable/disable minting on non-existent realWorldPlayer\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /// @dev Updates a particular realRealWorldPlayer. Note that the md5Token is immutable. Can only be\r\n  ///   called by the core contract.\r\n  /// @param _rosterIndex - Index into realWorldPlayers of the entry to change.\r\n  /// @param _prevCommissionerSalePrice - Average of the 2 most recent sale prices in commissioner auctions\r\n  /// @param _lastMintedTime - Time this real world player was last minted\r\n  /// @param _mintedCount - The number of playerTokens that have been minted for this player\r\n  /// @param _hasActiveCommissionerAuction - Whether or not there is an active commissioner auction for this player\r\n  /// @param _mintingEnabled - Denotes whether or not we should mint this real world player\r\n  function updateRealWorldPlayer(uint32 _rosterIndex, uint128 _prevCommissionerSalePrice, uint64 _lastMintedTime, uint32 _mintedCount, bool _hasActiveCommissionerAuction, bool _mintingEnabled) public onlyCoreContract {\r\n    require(_rosterIndex < realWorldPlayers.length);\r\n    RealWorldPlayer storage _realWorldPlayer = realWorldPlayers[_rosterIndex];\r\n    _realWorldPlayer.prevCommissionerSalePrice = _prevCommissionerSalePrice;\r\n    _realWorldPlayer.lastMintedTime = _lastMintedTime;\r\n    _realWorldPlayer.mintedCount = _mintedCount;\r\n    _realWorldPlayer.hasActiveCommissionerAuction = _hasActiveCommissionerAuction;\r\n    _realWorldPlayer.mintingEnabled = _mintingEnabled;\r\n  }\r\n\r\n  /// @dev Marks a real world player record as having an active commissioner auction.\r\n  ///   Will throw if there is hasActiveCommissionerAuction was already true upon entry.\r\n  /// @param _rosterIndex - Index to the real world player record.\r\n  function setHasCommissionerAuction(uint32 _rosterIndex) public onlyCoreContract {\r\n    require(_rosterIndex < realWorldPlayers.length);\r\n    RealWorldPlayer storage _realWorldPlayer = realWorldPlayers[_rosterIndex];\r\n    require(!_realWorldPlayer.hasActiveCommissionerAuction);\r\n    _realWorldPlayer.hasActiveCommissionerAuction = true;\r\n  }\r\n\r\n  /// @param _rosterIndex - Index into our roster that we want to record the fact that there is\r\n  ///   no longer an active commissioner auction.\r\n  /// @param _price - The price we want to record\r\n  function commissionerAuctionComplete(uint32 _rosterIndex, uint128 _price) public onlyCoreContract {\r\n    require(_rosterIndex < realWorldPlayers.length);\r\n    RealWorldPlayer storage _realWorldPlayer = realWorldPlayers[_rosterIndex];\r\n    require(_realWorldPlayer.hasActiveCommissionerAuction);\r\n    if (_realWorldPlayer.prevCommissionerSalePrice == 0) {\r\n      _realWorldPlayer.prevCommissionerSalePrice = _price;\r\n    } else {\r\n      _realWorldPlayer.prevCommissionerSalePrice = (_realWorldPlayer.prevCommissionerSalePrice + _price)/2;\r\n    }\r\n    _realWorldPlayer.hasActiveCommissionerAuction = false;\r\n\r\n    // Finally, re-mint another player token for this realWorldPlayer and put him up for auction\r\n    // at the default pricing and duration (auto mint)\r\n    if (_realWorldPlayer.mintingEnabled) {\r\n      uint128[] memory _md5Tokens = new uint128[](1);\r\n      _md5Tokens[0] = _realWorldPlayer.md5Token;\r\n      minterContract.mintPlayers(_md5Tokens, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  /// @param _rosterIndex - Index into our roster that we want to record the fact that there is\r\n  ///   no longer an active commissioner auction.\r\n  function commissionerAuctionCancelled(uint32 _rosterIndex) public view onlyCoreContract {\r\n    require(_rosterIndex < realWorldPlayers.length);\r\n    RealWorldPlayer storage _realWorldPlayer = realWorldPlayers[_rosterIndex];\r\n    require(_realWorldPlayer.hasActiveCommissionerAuction);\r\n\r\n    // We do not clear the hasActiveCommissionerAuction bit on a cancel. This will\r\n    // continue to block the minting of new commissioner tokens (limiting supply).\r\n    // The only way this RWP can be back on a commissioner auction is by the commish\r\n    // putting the token corresponding to the canceled auction back on auction.\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rosterIndex\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint128\"}],\"name\":\"commissionerAuctionComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCoreContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLeagueRosterContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDevelopment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rosterIndex\",\"type\":\"uint32\"}],\"name\":\"setHasCommissionerAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSIONER_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"},{\"name\":\"_cfo\",\"type\":\"address\"},{\"name\":\"_coo\",\"type\":\"address\"},{\"name\":\"_commish\",\"type\":\"address\"}],\"name\":\"setCLevelAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"}],\"name\":\"getMetadata\",\"outputs\":[{\"name\":\"metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommissioner\",\"type\":\"address\"}],\"name\":\"setCommissioner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"md5TokenToRosterIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rosterIndex\",\"type\":\"uint32\"},{\"name\":\"_prevCommissionerSalePrice\",\"type\":\"uint128\"},{\"name\":\"_lastMintedTime\",\"type\":\"uint64\"},{\"name\":\"_mintedCount\",\"type\":\"uint32\"},{\"name\":\"_hasActiveCommissionerAuction\",\"type\":\"bool\"},{\"name\":\"_mintingEnabled\",\"type\":\"bool\"}],\"name\":\"updateRealWorldPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint128\"}],\"name\":\"realWorldPlayerFromIndex\",\"outputs\":[{\"name\":\"md5Token\",\"type\":\"uint128\"},{\"name\":\"prevCommissionerSalePrice\",\"type\":\"uint128\"},{\"name\":\"lastMintedTime\",\"type\":\"uint64\"},{\"name\":\"mintedCount\",\"type\":\"uint32\"},{\"name\":\"hasActiveCommissionerAuction\",\"type\":\"bool\"},{\"name\":\"mintingEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MARKETING_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realWorldPlayers\",\"outputs\":[{\"name\":\"md5Token\",\"type\":\"uint128\"},{\"name\":\"prevCommissionerSalePrice\",\"type\":\"uint128\"},{\"name\":\"lastMintedTime\",\"type\":\"uint64\"},{\"name\":\"mintedCount\",\"type\":\"uint32\"},{\"name\":\"hasActiveCommissionerAuction\",\"type\":\"bool\"},{\"name\":\"mintingEnabled\",\"type\":\"bool\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_md5Tokens\",\"type\":\"uint128[]\"},{\"name\":\"_mintingEnabled\",\"type\":\"bool[]\"}],\"name\":\"enableRealWorldPlayerMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rosterIndex\",\"type\":\"uint32\"}],\"name\":\"commissionerAuctionCancelled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_md5Tokens\",\"type\":\"uint128[]\"},{\"name\":\"_mintingEnabled\",\"type\":\"bool[]\"}],\"name\":\"addRealWorldPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"}],\"name\":\"removeRealWorldPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSIONER_AUCTION_FLOOR_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"}],\"name\":\"hasOpenCommissionerAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"}],\"name\":\"isRealWorldPlayerMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_md5Token\",\"type\":\"uint128\"}],\"name\":\"getRealWorldPlayerRosterIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_md5Tokens\",\"type\":\"uint128[]\"},{\"name\":\"_mintingEnabled\",\"type\":\"bool[]\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addAndMintPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"CSportsLeagueRoster","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://851db8d300adc32adf8c674b4b5345211abd6902c3856d367c2d8fd8eb4098db"}]}