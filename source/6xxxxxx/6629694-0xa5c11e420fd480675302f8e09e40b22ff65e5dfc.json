{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract X2Contract {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant promotionAddress = 0x22e483dBeb45EDBC74d4fE25d79B5C28eA6Aa8Dd;\r\n    address public constant adminAddress = 0x3C1FD40A99066266A60F60d17d5a7c51434d74bB;\r\n\r\n    mapping (address => uint256) public deposit;\r\n    mapping (address => uint256) public withdrawals;\r\n    mapping (address => uint256) public time;\r\n\r\n    uint256 public minimum = 0.01 ether;\r\n    uint public promotionPercent = 10;\r\n    uint public adminPercent = 2;\r\n    uint256 public countOfInvestors;\r\n\r\n    /**\r\n    * @dev Get percent depends on balance of contract\r\n    * @return Percent\r\n    */\r\n    function getPhasePercent() view public returns (uint){\r\n        uint contractBalance = address(this).balance;\r\n        if (contractBalance < 300 ether) {\r\n            return 2;\r\n        }\r\n        if (contractBalance >= 300 ether && contractBalance < 1200 ether) {\r\n            return 3;\r\n        }\r\n        if (contractBalance >= 1200 ether) {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluate current balance\r\n    * @param _address Address of investor\r\n    * @return Payout amount\r\n    */\r\n    function getUserBalance(address _address) view public returns (uint256) {\r\n        uint percent = getPhasePercent();\r\n        uint256 differentTime = now.sub(time[_address]).div(1 hours);\r\n        uint256 differentPercent = deposit[_address].mul(percent).div(100);\r\n        uint256 payout = differentPercent.mul(differentTime).div(24);\r\n\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw profit from contract. Investor will be deleted if he will try withdraw after received x2\r\n    * @param _address Address of investor\r\n    */\r\n    function withdraw(address _address) private {\r\n        //Get user balance\r\n        uint256 balance = getUserBalance(_address);\r\n        //Conditions for withdraw, deposit should be more than 0, balance of contract should be more than balance of\r\n        //investor and balance of investor should be more than 0\r\n        if (deposit[_address] > 0 && address(this).balance >= balance && balance > 0) {\r\n            //Add withdrawal to storage\r\n            withdrawals[_address] = withdrawals[_address].add(balance);\r\n            //Reset time\r\n            time[_address] = now;\r\n            //If withdrawals more greater or equal deposit * 2 - delete investor\r\n            if (withdrawals[_address] >= deposit[_address].mul(2)){\r\n                deposit[_address] = 0;\r\n                time[_address] = 0;\r\n                withdrawals[_address] = 0;\r\n                countOfInvestors--;\r\n            }\r\n            //Transfer percents to investor\r\n            _address.transfer(balance);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev  Payable function\r\n    */\r\n    function () external payable {\r\n        if (msg.value >= minimum){\r\n            //Payout for promotion\r\n            promotionAddress.transfer(msg.value.mul(promotionPercent).div(100));\r\n            //Payout for admin\r\n            adminAddress.transfer(msg.value.mul(adminPercent).div(100));\r\n\r\n            //Withdraw a profit\r\n            withdraw(msg.sender);\r\n\r\n            //Increase counter of investors\r\n            if (deposit[msg.sender] == 0){\r\n                countOfInvestors++;\r\n            }\r\n\r\n            //Add deposit to storage\r\n            deposit[msg.sender] = deposit[msg.sender].add(msg.value);\r\n            //Reset last time of deposit\r\n            time[msg.sender] = now;\r\n        } else {\r\n            //Withdraw a profit\r\n            withdraw(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper then requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPhasePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"X2Contract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://46f02fcc19a46dc759dff6dcfe9f1154076c843f0aa060d8f0ff13b5833a06b0"}]}