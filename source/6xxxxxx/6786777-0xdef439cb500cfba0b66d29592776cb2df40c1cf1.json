{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nIntroducing \"TORPEDO LAUNCH\" our second HDX20 POWERED GAME running on the Ethereum Blockchain \r\n\"TORPEDO LAUNCH\" is playable @ https://torpedolaunch.io\r\n\r\nAbout the game :\r\n\r\nTORPEDO LAUNCH is a Submarine Arcade action game where the player is launching torpedoes to sink enemies boats \r\n\r\n\r\nHow to play TORPEDO LAUNCH:\r\n\r\nThe Campaign will start after at least 1 player has played and submitted a score to the worldwide leaderboard then,\r\nfor every new highscore registered, a 24H countdown will reset.\r\nAt the end of the countdown, the 8 best players ranked on the leaderboard will share the Treasure proportionally to their scores\r\nand everybody will receive their payout.\r\nEvery time you buy new torpedoes, 5% of the price will buy you HDX20 Token earning you Ethereum from the volume\r\nof any HDX20 POWERED GAMES (visit https://hdx20.io for details) while 20% of the price will buy you new shares of the game.\r\nPlease remember, at every new buy, the price of the share is increasing a little and so will be your payout even if you are not\r\na winner therefore buying shares at the beginning of the campaign is highly advised.\r\nYou can withdraw any owned amount at all time during the game.\r\n\r\nPlay for the big WIN, Play for the TREASURE, Play for staking HDX20 TOKEN or Play for all at once...Your Choice!\r\n\r\nWe wish you Good Luck!\r\n\r\nPAYOUTS DISTRIBUTION:\r\n.60% to the winners of the race distributed proportionally to their score if ranked from 1st to 8th.\r\n.25% to the community of HDX20 gamers/holders distributed as price appreciation.\r\n.5% to developer for running, developing and expanding the platform.\r\n.10% for provisioning the TREASURE for the next Campaign.\r\n\r\n\r\n\r\n\r\nThis product is copyrighted. Any unauthorized copy, modification, or use without express written consent from HyperDevbox is prohibited.\r\n\r\nCopyright 2018 HyperDevbox\r\n\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\ninterface HDX20Interface\r\n{\r\n    function() payable external;\r\n    \r\n    \r\n    function buyTokenFromGame( address _customerAddress , address _referrer_address ) payable external returns(uint256);\r\n  \r\n    function payWithToken( uint256 _eth , address _player_address ) external returns(uint256);\r\n  \r\n    function appreciateTokenPrice() payable external;\r\n   \r\n    function totalSupply() external view returns(uint256); \r\n    \r\n    function ethBalanceOf(address _customerAddress) external view returns(uint256);\r\n  \r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    \r\n    function sellingPrice( bool includeFees) external view returns(uint256);\r\n  \r\n}\r\n\r\n\r\ncontract TorpedoLaunchGame\r\n{\r\n     HDX20Interface private HDXcontract = HDX20Interface(0x8942a5995bd168f347f7ec58f25a54a9a064f882);\r\n     \r\n     using SafeMath for uint256;\r\n     using SafeMath128 for uint128;\r\n     \r\n     /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event OwnershipTransferred(\r\n        \r\n         address previousOwner,\r\n         address nextOwner,\r\n          uint256 timeStamp\r\n         );\r\n         \r\n    event HDXcontractChanged(\r\n        \r\n         address previous,\r\n         address next,\r\n         uint256 timeStamp\r\n         );\r\n \r\n   \r\n    \r\n     event onWithdrawGains(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n    event onNewScore(\r\n        uint256       gRND,\r\n        uint256       blockNumberTimeout,\r\n        uint256       score,\r\n        address       customerAddress,\r\n        bool          newHighScore,\r\n        bool          highscoreChanged    \r\n        \r\n    );\r\n    \r\n    \r\n    event onNewCampaign(\r\n        \r\n        uint256 gRND,\r\n        uint256  blockNumber\r\n        \r\n        );\r\n        \r\n    event onBuyTorpedo(\r\n        address     customerAddress,\r\n        uint256     gRND,\r\n        uint256     torpedoBatchID,\r\n        uint256     torpedoBatchBlockTimeout,  \r\n        uint256     nbToken,\r\n        uint32      torpedoBatchMultiplier  //x1, x10, x100\r\n        );    \r\n        \r\n        \r\n     event onMaintenance(\r\n        bool        mode,\r\n        uint256     timeStamp\r\n\r\n        );    \r\n        \r\n \r\n        \r\n    event onCloseEntry(\r\n        \r\n         uint256 gRND\r\n         \r\n        );    \r\n        \r\n    event onChangeBlockTimeAverage(\r\n        \r\n         uint256 blocktimeavg\r\n         \r\n        );    \r\n        \r\n    event onChangeMinimumPrice(\r\n        \r\n         uint256 minimum,\r\n         uint256 timeStamp\r\n         );\r\n         \r\n    event onNewName(\r\n        \r\n         address     customerAddress,\r\n         bytes32     name,\r\n         uint256     timeStamp\r\n         );\r\n        \r\n    /*==============================\r\n    =            MODIFIERS         =\r\n    ==============================*/\r\n    modifier onlyOwner\r\n    {\r\n        require (msg.sender == owner );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFromHDXToken\r\n    {\r\n        require (msg.sender == address( HDXcontract ));\r\n        _;\r\n    }\r\n   \r\n     modifier onlyDirectTransaction\r\n    {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n   \r\n   \r\n     modifier isPlayer\r\n    {\r\n        require (PlayerData[ msg.sender].gRND !=0);\r\n        _;\r\n    }\r\n    \r\n    modifier isMaintenance\r\n    {\r\n        require (maintenanceMode==true);\r\n        _;\r\n    }\r\n    \r\n     modifier isNotMaintenance\r\n    {\r\n        require (maintenanceMode==false);\r\n        _;\r\n    }\r\n   \r\n  \r\n    address public owner;\r\n  \r\n  \r\n    address public signerAuthority = 0xf77444cE64f3F46ba6b63F6b9411dF9c589E3319;\r\n   \r\n    \r\n    \r\n\r\n    constructor () public\r\n    {\r\n        owner = msg.sender;\r\n       \r\n        \r\n        if ( address(this).balance > 0)\r\n        {\r\n            owner.transfer( address(this).balance );\r\n        }\r\n    }\r\n    \r\n    function changeOwner(address _nextOwner) public\r\n    onlyOwner\r\n    {\r\n        require (_nextOwner != owner);\r\n        require(_nextOwner != address(0));\r\n         \r\n        emit OwnershipTransferred(owner, _nextOwner , now);\r\n         \r\n        owner = _nextOwner;\r\n    }\r\n    \r\n    function changeSigner(address _nextSigner) public\r\n    onlyOwner\r\n    {\r\n        require (_nextSigner != signerAuthority);\r\n        require(_nextSigner != address(0));\r\n      \r\n        signerAuthority = _nextSigner;\r\n    }\r\n    \r\n    function changeHDXcontract(address _next) public\r\n    onlyOwner\r\n    {\r\n        require (_next != address( HDXcontract ));\r\n        require( _next != address(0));\r\n         \r\n        emit HDXcontractChanged(address(HDXcontract), _next , now);\r\n         \r\n        HDXcontract  = HDX20Interface( _next);\r\n    }\r\n  \r\n  \r\n    \r\n    function changeBlockTimeAverage( uint256 blocktimeavg) public\r\n    onlyOwner\r\n    {\r\n        require ( blocktimeavg>0 );\r\n        \r\n       \r\n        blockTimeAverage = blocktimeavg;\r\n        \r\n        emit onChangeBlockTimeAverage( blockTimeAverage );\r\n         \r\n    }\r\n    \r\n    function enableMaintenance() public\r\n    onlyOwner\r\n    {\r\n        maintenanceMode = true;\r\n        \r\n        emit onMaintenance( maintenanceMode , now);\r\n        \r\n    }\r\n\r\n    function disableMaintenance() public\r\n    onlyOwner\r\n    {\r\n      \r\n        maintenanceMode = false;\r\n        \r\n        emit onMaintenance( maintenanceMode , now);\r\n        \r\n      \r\n        initCampaign();\r\n    }\r\n    \r\n  \r\n    function changeMinimumPrice( uint256 newmini) public\r\n    onlyOwner\r\n    {\r\n      \r\n      if (newmini>0)\r\n      {\r\n          minimumSharePrice = newmini;\r\n      }\r\n       \r\n      emit onChangeMinimumPrice( newmini , now ); \r\n    }\r\n    \r\n    \r\n     /*================================\r\n    =       GAMES VARIABLES         =\r\n    ================================*/\r\n    \r\n    struct PlayerData_s\r\n    {\r\n   \r\n        uint256 chest;  \r\n        uint256 payoutsTo;\r\n        uint256 gRND;  \r\n      \r\n       \r\n    }\r\n    \r\n    struct PlayerGameRound_s\r\n    {\r\n        uint256         shares;\r\n       \r\n        uint256         torpedoBatchID;         //0==no torpedo, otherwise \r\n        uint256         torpedoBatchBlockTimeout;    \r\n        \r\n        bytes           data;\r\n        \r\n        uint128         token;\r\n        uint32[3]       packedData;         //[0] = torpedomultiplier\r\n                                            //[1] = playerID\r\n                                            //[2]=score\r\n    }\r\n    \r\n    struct GameRoundData_s\r\n    {\r\n       uint256              blockNumber;\r\n       uint256              blockNumberTimeout;\r\n       uint256              sharePrice;\r\n       uint256              sharePots;\r\n       uint256              shareEthBalance;\r\n       uint256              shareSupply;\r\n       uint256              treasureSupply;\r\n       \r\n       mapping (uint32 => address)   IDtoAddress;\r\n     \r\n      \r\n     \r\n       uint256              hdx20AppreciationPayout;\r\n       uint256              devAppreciationPayout;\r\n       //********************************************************************************************\r\n       uint32[16]           highscorePool;     //[0-7]  == uint32 score\r\n                                               //[8-15] == uint32 playerID    \r\n    \r\n       uint32[2]            extraData;//[0]==this_TurnRound , [1]== totalPlayers\r\n  \r\n    }\r\n    \r\n  \r\n   \r\n    mapping (address => PlayerData_s)   private PlayerData;\r\n    \r\n   \r\n    mapping (address => mapping (uint256 => PlayerGameRound_s)) private PlayerGameRound;\r\n    \r\n   \r\n    mapping (uint256 => GameRoundData_s)   private GameRoundData;\r\n    \r\n    mapping( address => bytes32) private registeredNames;\r\n    \r\n    \r\n   \r\n    bool        private maintenanceMode=false;     \r\n   \r\n    uint256     private this_gRND =0;\r\n \r\n  \r\n    //85 , missing 15% for shares appreciation eg:share price increase\r\n    uint8 constant private HDX20BuyFees = 5;\r\n    uint8 constant private TREASUREBuyFees = 60;\r\n    uint8 constant private BUYPercentage = 20;\r\n    \r\n   \r\n    uint8 constant private DevFees = 5;\r\n    uint8 constant private TreasureFees = 10;\r\n    uint8 constant private AppreciationFees = 25;\r\n  \r\n   \r\n    uint256 constant internal magnitude = 1e18;\r\n  \r\n    uint256 private genTreasure = 0;\r\n   \r\n    uint256 private minimumSharePrice = 0.01 ether;\r\n    \r\n    uint256 private blockTimeAverage = 15;  //seconds per block                          \r\n    \r\n \r\n      \r\n    /*================================\r\n    =       PUBLIC FUNCTIONS         =\r\n    ================================*/\r\n    \r\n    //fallback will be called only from the HDX token contract to fund the game from customers's HDX20\r\n    \r\n     function()\r\n     payable\r\n     public\r\n     onlyFromHDXToken \r\n    {\r\n       \r\n      \r\n      \r\n          \r\n    }\r\n    \r\n    \r\n    function ChargeTreasure() public payable\r\n    {\r\n        genTreasure = SafeMath.add( genTreasure , msg.value);     \r\n    }\r\n    \r\n    \r\n    function buyTreasureShares(GameRoundData_s storage  _GameRoundData , uint256 _eth ) private\r\n    returns( uint256)\r\n    {\r\n        uint256 _nbshares = (_eth.mul( magnitude)) / _GameRoundData.sharePrice;\r\n       \r\n        _GameRoundData.treasureSupply = _GameRoundData.treasureSupply.add( _nbshares );\r\n        \r\n        _GameRoundData.shareSupply =   _GameRoundData.shareSupply.add( _nbshares );\r\n        \r\n        return( _nbshares);\r\n    }\r\n   \r\n    \r\n    function initCampaign() public\r\n    onlyOwner\r\n    isNotMaintenance\r\n    {\r\n \r\n        \r\n        this_gRND++;\r\n        \r\n        GameRoundData_s storage _GameRoundData = GameRoundData[ this_gRND ];\r\n      \r\n       \r\n        _GameRoundData.blockNumber = block.number;\r\n        \r\n        _GameRoundData.blockNumberTimeout = block.number + (360*10*24*3600); \r\n        \r\n        uint256 _sharePrice = minimumSharePrice;\r\n        \r\n        _GameRoundData.sharePrice = _sharePrice;\r\n        \r\n        uint256 _nbshares = buyTreasureShares(_GameRoundData, genTreasure );\r\n     \r\n        //convert into ETH\r\n        _nbshares = _nbshares.mul( _sharePrice ) / magnitude;\r\n        \r\n        //start balance   \r\n        _GameRoundData.shareEthBalance = _nbshares;\r\n        \r\n        genTreasure = genTreasure.sub( _nbshares);\r\n     \r\n       \r\n        emit onNewCampaign( this_gRND , block.number);\r\n        \r\n    }\r\n    \r\n    \r\n   \r\n    function get_TotalPayout(  GameRoundData_s storage  _GameRoundData ) private view\r\n    returns( uint256)\r\n    {\r\n      \r\n       uint256 _payout = 0;\r\n        \r\n       uint256 _sharePrice = _GameRoundData.sharePrice;\r\n     \r\n       uint256 _bet = _GameRoundData.sharePots;\r\n           \r\n       _payout = _payout.add( _bet.mul (_sharePrice) / magnitude );\r\n                  \r\n         \r\n       uint256 _potValue = ((_GameRoundData.treasureSupply.mul( _sharePrice ) / magnitude).mul(100-DevFees-TreasureFees-AppreciationFees)) / 100;\r\n       \r\n       _payout = _payout.add( _potValue );\r\n       \r\n   \r\n       return( _payout );\r\n        \r\n    }\r\n    \r\n    \r\n  \r\n    function get_PendingGains( address _player_address , uint256 _gRND) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n        //did not play \r\n        if (PlayerData[ _player_address].gRND != _gRND || _gRND==0) return( 0 );\r\n       \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ _gRND ];\r\n       \r\n       // uint32 _winner = _GameRoundData.extraData[1];\r\n       \r\n        uint256 _gains = 0;\r\n       \r\n        uint256 _sharePrice = _GameRoundData.sharePrice;\r\n        uint256 _shares;\r\n       \r\n        PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][_gRND];\r\n       \r\n        _shares = _PlayerGameRound.shares;\r\n            \r\n        _gains = _gains.add( _shares.mul( _sharePrice) / magnitude );\r\n        \r\n        \r\n        //if the race payment is made (race is over) then we add also the winner prize\r\n        if (_GameRoundData.extraData[0] >= (1<<30))\r\n        {\r\n            uint256 _score = 0;\r\n            uint256 _totalscore = 0;       \r\n            \r\n            uint256  _treasure = ((_GameRoundData.treasureSupply.mul( _sharePrice ) / magnitude).mul(100-DevFees-TreasureFees-AppreciationFees)) / 100;\r\n       \r\n            for( uint i=0;i<8;i++)\r\n            {\r\n                _totalscore = _totalscore.add( uint256(_GameRoundData.highscorePool[i]));\r\n                \r\n                if (_GameRoundData.highscorePool[8+i]==_PlayerGameRound.packedData[1])\r\n                {\r\n                    _score =  uint256(_GameRoundData.highscorePool[i]);\r\n                }\r\n                \r\n            }\r\n          \r\n            if (_totalscore>0) _gains = _gains.add( _treasure.mul( _score) / _totalscore );\r\n           \r\n        }\r\n       \r\n     \r\n       \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n    \r\n    //only for the Result Data Screen on the game not used for the payout\r\n    \r\n    function get_PendingGainsAll( address _player_address , uint256 _gRND) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n        //did not play \r\n        if (PlayerData[ _player_address].gRND != _gRND || _gRND==0) return( 0 );\r\n       \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ _gRND ];\r\n       \r\n     \r\n        // uint32 _winner = _GameRoundData.extraData[1];\r\n       \r\n        uint256 _gains = 0;\r\n     \r\n        uint256 _sharePrice = _GameRoundData.sharePrice;\r\n        uint256 _shares;\r\n       \r\n        PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][_gRND];\r\n       \r\n        _shares = _PlayerGameRound.shares;\r\n            \r\n        _gains = _gains.add( _shares.mul( _sharePrice) / magnitude );\r\n        \r\n       \r\n        {\r\n            uint256 _score = 0;\r\n            uint256 _totalscore = 0;       \r\n            \r\n            uint256  _treasure = ((_GameRoundData.treasureSupply.mul( _sharePrice ) / magnitude).mul(100-DevFees-TreasureFees-AppreciationFees)) / 100;\r\n       \r\n            for( uint i=0;i<8;i++)\r\n            {\r\n                _totalscore = _totalscore.add( uint256(_GameRoundData.highscorePool[i]));\r\n                \r\n                if (_GameRoundData.highscorePool[8+i]==_PlayerGameRound.packedData[1])\r\n                {\r\n                    _score =  uint256(_GameRoundData.highscorePool[i]);\r\n                }\r\n                \r\n            }\r\n          \r\n            if (_totalscore>0)    _gains = _gains.add( _treasure.mul( _score) / _totalscore );\r\n           \r\n        }\r\n        \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n    //process streaming HDX20 appreciation and dev fees appreciation\r\n    function process_sub_Taxes(  GameRoundData_s storage _GameRoundData , uint256 minimum) private\r\n    {\r\n        uint256 _sharePrice = _GameRoundData.sharePrice;\r\n             \r\n        uint256 _potValue = _GameRoundData.treasureSupply.mul( _sharePrice ) / magnitude;\r\n            \r\n        uint256 _appreciation = SafeMath.mul( _potValue , AppreciationFees) / 100; \r\n          \r\n        uint256 _dev = SafeMath.mul( _potValue , DevFees) / 100;   \r\n        \r\n        if (_dev > _GameRoundData.devAppreciationPayout)\r\n        {\r\n            _dev -= _GameRoundData.devAppreciationPayout;\r\n            \r\n            if (_dev>minimum)\r\n            {\r\n              _GameRoundData.devAppreciationPayout = _GameRoundData.devAppreciationPayout.add( _dev );\r\n              \r\n               HDXcontract.buyTokenFromGame.value( _dev )( owner , address(0));\r\n              \r\n            }\r\n        }\r\n        \r\n        if (_appreciation> _GameRoundData.hdx20AppreciationPayout)\r\n        {\r\n            _appreciation -= _GameRoundData.hdx20AppreciationPayout;\r\n            \r\n            if (_appreciation>minimum)\r\n            {\r\n                _GameRoundData.hdx20AppreciationPayout = _GameRoundData.hdx20AppreciationPayout.add( _appreciation );\r\n                \r\n                 HDXcontract.appreciateTokenPrice.value( _appreciation )();\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    //process the fees, hdx20 appreciation, calcul results at the end of the race\r\n    function process_Taxes(  GameRoundData_s storage _GameRoundData ) private\r\n    {\r\n        uint32 turnround = _GameRoundData.extraData[0];\r\n        \r\n        if (turnround>0 && turnround<(1<<30))\r\n        {  \r\n            _GameRoundData.extraData[0] = turnround | (1<<30);\r\n            \r\n            uint256 _sharePrice = _GameRoundData.sharePrice;\r\n             \r\n            uint256 _potValue = _GameRoundData.treasureSupply.mul( _sharePrice ) / magnitude;\r\n     \r\n           \r\n            uint256 _treasure = SafeMath.mul( _potValue , TreasureFees) / 100; \r\n         \r\n           \r\n            genTreasure = genTreasure.add( _treasure );\r\n            \r\n            //take care of any left over\r\n            process_sub_Taxes( _GameRoundData , 0);\r\n            \r\n          \r\n            \r\n        }\r\n     \r\n    }\r\n    \r\n    function ValidTorpedoScore( int256 score, uint256 torpedoBatchID , bytes32 r , bytes32 s , uint8 v) public\r\n    onlyDirectTransaction\r\n    {\r\n        address _customer_address = msg.sender;\r\n         \r\n        require( maintenanceMode==false  && this_gRND>0 && (block.number <GameRoundData[ this_gRND ].blockNumberTimeout) && (PlayerData[ _customer_address].gRND == this_gRND));\r\n  \r\n        GameVar_s memory gamevar;\r\n        gamevar.score = score;\r\n        gamevar.torpedoBatchID = torpedoBatchID;\r\n        gamevar.r = r;\r\n        gamevar.s = s;\r\n        gamevar.v = v;\r\n   \r\n        coreValidTorpedoScore( _customer_address , gamevar  );\r\n    }\r\n    \r\n    \r\n    struct GameVar_s\r\n    {\r\n     \r\n        bool madehigh;\r\n        bool highscoreChanged;\r\n      \r\n        uint    max_score;\r\n        uint    min_score;\r\n        uint    min_score_index;\r\n        uint    max_score_index;\r\n        uint    our_score_index;\r\n        uint32  max_score_pid;\r\n        uint32  multiplier;\r\n        \r\n        uint256  torpedoBatchID;\r\n        int256   score;\r\n        bytes32  r;\r\n        bytes32  s;\r\n        uint8    v;\r\n    }\r\n    \r\n  \r\n    \r\n    function coreValidTorpedoScore( address _player_address , GameVar_s gamevar) private\r\n    {\r\n    \r\n        PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][ this_gRND];\r\n        \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n        \r\n        require((gamevar.torpedoBatchID != 0) && (gamevar.torpedoBatchID== _PlayerGameRound.torpedoBatchID));\r\n       \r\n         \r\n        gamevar.madehigh = false;\r\n        gamevar.highscoreChanged = false;\r\n       \r\n      //  gamevar.max_score = 0;\r\n        gamevar.min_score = 0xffffffff;\r\n    //    gamevar.min_score_index = 0;\r\n     //   gamevar.max_score_index = 0;\r\n      //  gamevar.our_score_index = 0;\r\n      \r\n        \r\n       \r\n        if (block.number>=_PlayerGameRound.torpedoBatchBlockTimeout || (ecrecover(keccak256(abi.encodePacked( gamevar.score,gamevar.torpedoBatchID )) , gamevar.v, gamevar.r, gamevar.s) != signerAuthority))\r\n        {\r\n            gamevar.score = 0;\r\n        }\r\n        \r\n        \r\n       \r\n        \r\n        int256 tempo = int256(_PlayerGameRound.packedData[2]) + (gamevar.score * int256(_PlayerGameRound.packedData[0]));\r\n        if (tempo<0) tempo = 0;\r\n        if (tempo>0xffffffff) tempo = 0xffffffff;\r\n        \r\n        uint256 p_score = uint256( tempo );\r\n        \r\n        //store the player score\r\n        _PlayerGameRound.packedData[2] = uint32(p_score);\r\n        \r\n       \r\n        for(uint i=0;i<8;i++)\r\n        {\r\n            uint ss = _GameRoundData.highscorePool[i];\r\n            if (ss>gamevar.max_score)\r\n            {\r\n                gamevar.max_score = ss;\r\n                gamevar.max_score_index =i; \r\n            }\r\n            if (ss<gamevar.min_score)\r\n            {\r\n                gamevar.min_score = ss;\r\n                gamevar.min_score_index = i;\r\n            }\r\n            \r\n            //are we in the pool already\r\n            if (_GameRoundData.highscorePool[8+i]==_PlayerGameRound.packedData[1]) gamevar.our_score_index=1+i;\r\n        }\r\n        \r\n        \r\n        //grab current player id highscore before we potentially overwrite it\r\n        gamevar.max_score_pid = _GameRoundData.highscorePool[ 8+gamevar.max_score_index];\r\n        \r\n        //at first if we are in the pool simply update our score\r\n        \r\n        if (gamevar.our_score_index>0)\r\n        {\r\n           _GameRoundData.highscorePool[ gamevar.our_score_index -1] = uint32(p_score); \r\n           \r\n           gamevar.highscoreChanged = true;\r\n          \r\n        }\r\n        else\r\n        {\r\n            //we were not in the pool, are we more than the minimum score\r\n            \r\n            if (p_score > gamevar.min_score)\r\n            {\r\n                //yes the minimum should go away and we should replace it in the pool\r\n                _GameRoundData.highscorePool[ gamevar.min_score_index ] =uint32(p_score);\r\n                _GameRoundData.highscorePool[ 8+gamevar.min_score_index] = _PlayerGameRound.packedData[1]; //put our playerID\r\n                \r\n                gamevar.highscoreChanged = true;\r\n   \r\n            }\r\n            \r\n        }\r\n        \r\n        //new highscore ?\r\n        if (p_score>gamevar.max_score)\r\n        {\r\n            //yes\r\n           \r\n            //same person \r\n            \r\n             if (  gamevar.max_score_pid != _PlayerGameRound.packedData[1] )\r\n             {\r\n                 //no so reset the counter\r\n                  _GameRoundData.blockNumberTimeout = block.number + ((24*60*60) / blockTimeAverage);\r\n                  _GameRoundData.extraData[0]++; // new turn\r\n                   gamevar.madehigh = true;\r\n             }\r\n            \r\n        }\r\n   \r\n        //ok reset it so we can get a new one\r\n        _PlayerGameRound.torpedoBatchID = 0;\r\n        \r\n        emit onNewScore( this_gRND , _GameRoundData.blockNumberTimeout , p_score , _player_address , gamevar.madehigh , gamevar.highscoreChanged );\r\n\r\n\r\n    }\r\n    \r\n    \r\n    function BuyTorpedoWithDividends( uint256 eth , int256 score, uint256 torpedoBatchID,  address _referrer_address , bytes32 r , bytes32 s , uint8 v) public\r\n    onlyDirectTransaction\r\n    {\r\n        \r\n        require( maintenanceMode==false  && this_gRND>0 && (eth==minimumSharePrice || eth==minimumSharePrice*10 || eth==minimumSharePrice*100) && (block.number <GameRoundData[ this_gRND ].blockNumberTimeout) );\r\n  \r\n        address _customer_address = msg.sender;\r\n        \r\n        GameVar_s memory gamevar;\r\n        gamevar.score = score;\r\n        gamevar.torpedoBatchID = torpedoBatchID;\r\n        gamevar.r = r;\r\n        gamevar.s = s;\r\n        gamevar.v = v;\r\n        \r\n       \r\n        gamevar.multiplier =uint32( eth / minimumSharePrice);\r\n        \r\n        eth = HDXcontract.payWithToken( eth , _customer_address );\r\n       \r\n        require( eth>0 );\r\n        \r\n         \r\n        CoreBuyTorpedo( _customer_address , eth , _referrer_address , gamevar );\r\n        \r\n       \r\n    }\r\n    \r\n    function BuyName( bytes32 name ) public payable\r\n    {\r\n        address _customer_address = msg.sender;\r\n        uint256 eth = msg.value; \r\n        \r\n        require( maintenanceMode==false  && (eth==minimumSharePrice*10));\r\n        \r\n        //50% for the community\r\n        //50% for the developer account\r\n        \r\n        eth /= 2;\r\n        \r\n        HDXcontract.buyTokenFromGame.value( eth )( owner , address(0));\r\n       \r\n        HDXcontract.appreciateTokenPrice.value( eth )();\r\n        \r\n        registeredNames[ _customer_address ] = name;\r\n        \r\n        emit onNewName( _customer_address , name , now );\r\n    }\r\n    \r\n    function BuyTorpedo( int256 score, uint256 torpedoBatchID, address _referrer_address , bytes32 r , bytes32 s , uint8 v ) public payable\r\n    onlyDirectTransaction\r\n    {\r\n     \r\n        address _customer_address = msg.sender;\r\n        uint256 eth = msg.value;\r\n        \r\n        require( maintenanceMode==false  && this_gRND>0 && (eth==minimumSharePrice || eth==minimumSharePrice*10 || eth==minimumSharePrice*100) && (block.number <GameRoundData[ this_gRND ].blockNumberTimeout));\r\n   \r\n        GameVar_s memory gamevar;\r\n        gamevar.score = score;\r\n        gamevar.torpedoBatchID = torpedoBatchID;\r\n        gamevar.r = r;\r\n        gamevar.s = s;\r\n        gamevar.v = v;\r\n        \r\n       \r\n        gamevar.multiplier =uint32( eth / minimumSharePrice);\r\n   \r\n        CoreBuyTorpedo( _customer_address , eth , _referrer_address, gamevar);\r\n     \r\n    }\r\n    \r\n    /*================================\r\n    =       CORE BUY FUNCTIONS       =\r\n    ================================*/\r\n    \r\n    function CoreBuyTorpedo( address _player_address , uint256 eth ,  address _referrer_address , GameVar_s gamevar) private\r\n    {\r\n    \r\n        PlayerGameRound_s storage  _PlayerGameRound = PlayerGameRound[ _player_address][ this_gRND];\r\n        \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n        \r\n      \r\n        if (PlayerData[ _player_address].gRND != this_gRND)\r\n        {\r\n           \r\n            if (PlayerData[_player_address].gRND !=0)\r\n            {\r\n                uint256 _gains = get_PendingGains( _player_address , PlayerData[ _player_address].gRND  );\r\n            \r\n                 PlayerData[ _player_address].chest = PlayerData[ _player_address].chest.add( _gains);\r\n            }\r\n          \r\n          \r\n            PlayerData[ _player_address ].gRND = this_gRND;\r\n           \r\n             //player++\r\n             _GameRoundData.extraData[ 1 ]++; \r\n             \r\n             //a crude playerID\r\n             _PlayerGameRound.packedData[1] = _GameRoundData.extraData[ 1 ];\r\n             \r\n             //only to display the highscore table on the client\r\n             _GameRoundData.IDtoAddress[  _GameRoundData.extraData[1] ] = _player_address;\r\n        }\r\n        \r\n        //we need to validate the score before buying a torpedo batch\r\n        if (gamevar.torpedoBatchID !=0 || _PlayerGameRound.torpedoBatchID !=0)\r\n        {\r\n             coreValidTorpedoScore( _player_address , gamevar);\r\n        }\r\n        \r\n        \r\n       \r\n        \r\n        _PlayerGameRound.packedData[0] = gamevar.multiplier;\r\n        _PlayerGameRound.torpedoBatchBlockTimeout = block.number + ((4*3600) / blockTimeAverage);\r\n        _PlayerGameRound.torpedoBatchID = uint256((keccak256(abi.encodePacked( block.number, _player_address , address(this)))));\r\n        \r\n        \r\n        //HDX20BuyFees\r\n        uint256 _tempo = (eth.mul(HDX20BuyFees)) / 100;\r\n        \r\n        _GameRoundData.shareEthBalance =  _GameRoundData.shareEthBalance.add( eth-_tempo );  //minus the hdx20 fees\r\n        \r\n        uint256 _nb_token =   HDXcontract.buyTokenFromGame.value( _tempo )( _player_address , _referrer_address);\r\n        \r\n      \r\n        _PlayerGameRound.token += uint128(_nb_token);\r\n        \r\n       \r\n        buyTreasureShares(_GameRoundData , (eth.mul(TREASUREBuyFees)) / 100 );\r\n   \r\n        \r\n        eth = eth.mul( BUYPercentage) / 100;\r\n        \r\n        uint256 _nbshare =  (eth.mul( magnitude)) / _GameRoundData.sharePrice;\r\n        \r\n        _GameRoundData.shareSupply =  _GameRoundData.shareSupply.add( _nbshare );\r\n        _GameRoundData.sharePots   =  _GameRoundData.sharePots.add( _nbshare);\r\n      \r\n        _PlayerGameRound.shares =  _PlayerGameRound.shares.add( _nbshare);\r\n   \r\n      \r\n        if (_GameRoundData.shareSupply>magnitude)\r\n        {\r\n            _GameRoundData.sharePrice = (_GameRoundData.shareEthBalance.mul( magnitude)) / _GameRoundData.shareSupply;\r\n        }\r\n       \r\n        //HDX20 streaming appreciation\r\n        process_sub_Taxes( _GameRoundData , 0.1 ether);\r\n        \r\n        emit onBuyTorpedo( _player_address, this_gRND, _PlayerGameRound.torpedoBatchID , _PlayerGameRound.torpedoBatchBlockTimeout, _nb_token,  _PlayerGameRound.packedData[0]);\r\n      \r\n      \r\n        \r\n    }\r\n    \r\n   \r\n    \r\n    function get_Gains(address _player_address) private view\r\n    returns( uint256)\r\n    {\r\n       \r\n        uint256 _gains = PlayerData[ _player_address ].chest.add( get_PendingGains( _player_address , PlayerData[ _player_address].gRND ) );\r\n        \r\n        if (_gains > PlayerData[ _player_address].payoutsTo)\r\n        {\r\n            _gains -= PlayerData[ _player_address].payoutsTo;\r\n        }\r\n        else _gains = 0;\r\n     \r\n    \r\n        return( _gains );\r\n        \r\n    }\r\n    \r\n    \r\n    function WithdrawGains() public \r\n    isPlayer\r\n    {\r\n        address _customer_address = msg.sender;\r\n        \r\n        uint256 _gains = get_Gains( _customer_address );\r\n        \r\n        require( _gains>0);\r\n        \r\n        PlayerData[ _customer_address ].payoutsTo = PlayerData[ _customer_address ].payoutsTo.add( _gains );\r\n        \r\n      \r\n        emit onWithdrawGains( _customer_address , _gains , now);\r\n        \r\n        _customer_address.transfer( _gains );\r\n        \r\n        \r\n    }\r\n    \r\n   \r\n    \r\n    function CloseEntry() public\r\n    onlyOwner\r\n    isNotMaintenance\r\n    {\r\n    \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n         \r\n        process_Taxes( _GameRoundData);\r\n          \r\n        emit onCloseEntry( this_gRND );\r\n      \r\n    }\r\n    \r\n   \r\n  \r\n  \r\n    \r\n     /*================================\r\n    =  VIEW AND HELPERS FUNCTIONS    =\r\n    ================================*/\r\n  \r\n    \r\n    function view_get_Treasure() public\r\n    view\r\n    returns(uint256)\r\n    {\r\n      \r\n      return( genTreasure);  \r\n    }\r\n \r\n    function view_get_gameData() public\r\n    view\r\n    returns( uint256 sharePrice, uint256 sharePots, uint256 shareSupply , uint256 shareEthBalance, uint32 totalPlayers , uint256 shares ,uint256 treasureSupply , uint256 torpedoBatchID , uint32 torpedoBatchMultiplier , uint256 torpedoBatchBlockTimeout , uint256 score   )\r\n    {\r\n        address _player_address = msg.sender;\r\n         \r\n        sharePrice = GameRoundData[ this_gRND].sharePrice;\r\n        sharePots = GameRoundData[ this_gRND].sharePots;\r\n        shareSupply = GameRoundData[ this_gRND].shareSupply;\r\n        shareEthBalance = GameRoundData[ this_gRND].shareEthBalance;\r\n        treasureSupply = GameRoundData[ this_gRND].treasureSupply;\r\n      \r\n        totalPlayers =  GameRoundData[ this_gRND].extraData[1];\r\n      \r\n        shares = PlayerGameRound[_player_address][this_gRND].shares;\r\n      \r\n        torpedoBatchID = PlayerGameRound[_player_address][this_gRND].torpedoBatchID;\r\n        torpedoBatchMultiplier = PlayerGameRound[_player_address][this_gRND].packedData[0];\r\n        torpedoBatchBlockTimeout = PlayerGameRound[_player_address][this_gRND].torpedoBatchBlockTimeout;\r\n        score = PlayerGameRound[_player_address][this_gRND].packedData[2];\r\n    }\r\n  \r\n    function view_get_gameTorpedoData() public\r\n    view\r\n    returns( uint256 torpedoBatchID , uint32 torpedoBatchMultiplier , uint256 torpedoBatchBlockTimeout  , uint256 score )\r\n    {\r\n        address _player_address = msg.sender;\r\n         \r\n     \r\n      \r\n        torpedoBatchID = PlayerGameRound[_player_address][this_gRND].torpedoBatchID;\r\n        torpedoBatchMultiplier = PlayerGameRound[_player_address][this_gRND].packedData[0];\r\n        torpedoBatchBlockTimeout = PlayerGameRound[_player_address][this_gRND].torpedoBatchBlockTimeout;\r\n        \r\n        score = PlayerGameRound[_player_address][this_gRND].packedData[2];\r\n    }\r\n    \r\n    function view_get_gameHighScores() public\r\n    view\r\n    returns( uint32[8] highscores , address[8] addresses , bytes32[8] names )\r\n    {\r\n        address _player_address = msg.sender;\r\n         \r\n        uint32[8] memory highscoresm;\r\n        address[8] memory addressesm;\r\n        bytes32[8] memory namesm;\r\n        \r\n        for(uint i =0;i<8;i++)\r\n        {\r\n            highscoresm[i] = GameRoundData[ this_gRND].highscorePool[i];\r\n            \r\n            uint32 id = GameRoundData[ this_gRND].highscorePool[8+i];\r\n            \r\n            addressesm[i] = GameRoundData[ this_gRND ].IDtoAddress[ id ];\r\n            \r\n            namesm[i] = view_get_registeredNames( addressesm[i ]);\r\n        }\r\n     \r\n     \r\n     highscores = highscoresm;\r\n     addresses = addressesm;\r\n     names = namesm;\r\n      \r\n     \r\n    }\r\n    \r\n    function view_get_Gains()\r\n    public\r\n    view\r\n    returns( uint256 gains)\r\n    {\r\n        \r\n        address _player_address = msg.sender;\r\n   \r\n      \r\n        uint256 _gains = PlayerData[ _player_address ].chest.add( get_PendingGains( _player_address , PlayerData[ _player_address].gRND) );\r\n        \r\n        if (_gains > PlayerData[ _player_address].payoutsTo)\r\n        {\r\n            _gains -= PlayerData[ _player_address].payoutsTo;\r\n        }\r\n        else _gains = 0;\r\n     \r\n    \r\n        return( _gains );\r\n        \r\n    }\r\n  \r\n  \r\n    \r\n    function view_get_gameStates() public \r\n    view\r\n    returns(uint256 grnd, uint32 turnround, uint256 minimumshare , uint256 blockNumber , uint256 blockNumberTimeout, uint256 blockNumberCurrent , uint256 blockTimeAvg , uint32[8] highscores , address[8] addresses , bytes32[8] names , bytes32 myname)\r\n    {\r\n        uint32[8] memory highscoresm;\r\n        address[8] memory addressesm;\r\n        bytes32[8] memory namesm;\r\n        \r\n        for(uint i =0;i<8;i++)\r\n        {\r\n            highscoresm[i] = GameRoundData[ this_gRND].highscorePool[i];\r\n            \r\n            uint32 id = GameRoundData[ this_gRND].highscorePool[8+i];\r\n            \r\n            addressesm[i] = GameRoundData[ this_gRND ].IDtoAddress[ id ];\r\n            \r\n            namesm[i] = view_get_registeredNames( addressesm[i ]);\r\n        }\r\n        \r\n        return( this_gRND , GameRoundData[ this_gRND].extraData[0] , minimumSharePrice , GameRoundData[ this_gRND].blockNumber,GameRoundData[ this_gRND].blockNumberTimeout, block.number , blockTimeAverage , highscoresm , addressesm , namesm , view_get_registeredNames(msg.sender));\r\n    }\r\n    \r\n    function view_get_ResultData() public\r\n    view\r\n    returns(uint32 TotalPlayer, uint256 TotalPayout ,uint256 MyTokenValue, uint256 MyToken, uint256 MyGains , uint256 MyScore)\r\n    {\r\n        address _player_address = msg.sender;\r\n        \r\n        GameRoundData_s storage  _GameRoundData = GameRoundData[ this_gRND ];\r\n        \r\n        TotalPlayer = _GameRoundData.extraData[1];\r\n     \r\n        TotalPayout = get_TotalPayout( _GameRoundData );\r\n      \r\n        MyToken =  PlayerGameRound[ _player_address][ this_gRND].token;\r\n          \r\n        MyTokenValue = MyToken * HDXcontract.sellingPrice( true );\r\n        MyTokenValue /= magnitude;\r\n      \r\n        MyGains = 0;\r\n     \r\n        \r\n        if (PlayerData[ _player_address].gRND == this_gRND)\r\n        {\r\n       \r\n           MyGains =  get_PendingGainsAll( _player_address , this_gRND ); //just here for the view function so not used for any payout\r\n        }\r\n        \r\n        MyScore = PlayerGameRound[_player_address][this_gRND].packedData[2];\r\n    }    \r\n \r\n \r\n    function totalEthereumBalance()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function view_get_maintenanceMode()\r\n    public\r\n    view\r\n    returns(bool)\r\n    {\r\n        return( maintenanceMode);\r\n    }\r\n    \r\n    function view_get_blockNumbers()\r\n    public\r\n    view\r\n    returns( uint256 b1 , uint256 b2 )\r\n    {\r\n        return( block.number , GameRoundData[ this_gRND ].blockNumberTimeout);\r\n        \r\n    }\r\n    \r\n    function view_get_registeredNames(address _player)\r\n    public\r\n    view\r\n    returns( bytes32)\r\n    {\r\n        \r\n        return( registeredNames[ _player ]);\r\n    }\r\n    \r\n   \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n   \r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n   \r\n    \r\n  \r\n    \r\n   \r\n}\r\n\r\n\r\nlibrary SafeMath128 {\r\n    \r\n   \r\n    function mul(uint128 a, uint128 b) \r\n        internal \r\n        pure \r\n        returns (uint128 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint128 a, uint128 b)\r\n        internal\r\n        pure\r\n        returns (uint128) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function add(uint128 a, uint128 b)\r\n        internal\r\n        pure\r\n        returns (uint128 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n   \r\n    \r\n  \r\n    \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"view_get_Treasure\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"score\",\"type\":\"int256\"},{\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"name\":\"_referrer_address\",\"type\":\"address\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"BuyTorpedo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newmini\",\"type\":\"uint256\"}],\"name\":\"changeMinimumPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_maintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameStates\",\"outputs\":[{\"name\":\"grnd\",\"type\":\"uint256\"},{\"name\":\"turnround\",\"type\":\"uint32\"},{\"name\":\"minimumshare\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockNumberTimeout\",\"type\":\"uint256\"},{\"name\":\"blockNumberCurrent\",\"type\":\"uint256\"},{\"name\":\"blockTimeAvg\",\"type\":\"uint256\"},{\"name\":\"highscores\",\"type\":\"uint32[8]\"},{\"name\":\"addresses\",\"type\":\"address[8]\"},{\"name\":\"names\",\"type\":\"bytes32[8]\"},{\"name\":\"myname\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CloseEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocktimeavg\",\"type\":\"uint256\"}],\"name\":\"changeBlockTimeAverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"view_get_registeredNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"score\",\"type\":\"int256\"},{\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"ValidTorpedoScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"BuyName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_next\",\"type\":\"address\"}],\"name\":\"changeHDXcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameHighScores\",\"outputs\":[{\"name\":\"highscores\",\"type\":\"uint32[8]\"},{\"name\":\"addresses\",\"type\":\"address[8]\"},{\"name\":\"names\",\"type\":\"bytes32[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_Gains\",\"outputs\":[{\"name\":\"gains\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameData\",\"outputs\":[{\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"name\":\"sharePots\",\"type\":\"uint256\"},{\"name\":\"shareSupply\",\"type\":\"uint256\"},{\"name\":\"shareEthBalance\",\"type\":\"uint256\"},{\"name\":\"totalPlayers\",\"type\":\"uint32\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"treasureSupply\",\"type\":\"uint256\"},{\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"name\":\"torpedoBatchMultiplier\",\"type\":\"uint32\"},{\"name\":\"torpedoBatchBlockTimeout\",\"type\":\"uint256\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextSigner\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_ResultData\",\"outputs\":[{\"name\":\"TotalPlayer\",\"type\":\"uint32\"},{\"name\":\"TotalPayout\",\"type\":\"uint256\"},{\"name\":\"MyTokenValue\",\"type\":\"uint256\"},{\"name\":\"MyToken\",\"type\":\"uint256\"},{\"name\":\"MyGains\",\"type\":\"uint256\"},{\"name\":\"MyScore\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_blockNumbers\",\"outputs\":[{\"name\":\"b1\",\"type\":\"uint256\"},{\"name\":\"b2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawGains\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableMaintenance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"score\",\"type\":\"int256\"},{\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"name\":\"_referrer_address\",\"type\":\"address\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"BuyTorpedoWithDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"view_get_gameTorpedoData\",\"outputs\":[{\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"name\":\"torpedoBatchMultiplier\",\"type\":\"uint32\"},{\"name\":\"torpedoBatchBlockTimeout\",\"type\":\"uint256\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ChargeTreasure\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"next\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"HDXcontractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawGains\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumberTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newHighScore\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"highscoreChanged\",\"type\":\"bool\"}],\"name\":\"onNewScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"onNewCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"torpedoBatchID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"torpedoBatchBlockTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nbToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"torpedoBatchMultiplier\",\"type\":\"uint32\"}],\"name\":\"onBuyTorpedo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mode\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onMaintenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gRND\",\"type\":\"uint256\"}],\"name\":\"onCloseEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blocktimeavg\",\"type\":\"uint256\"}],\"name\":\"onChangeBlockTimeAverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onChangeMinimumPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"}]","ContractName":"TorpedoLaunchGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6c67ad01a9ffbfe57f423cb641607c78fbf19eb22cf8db028083a48718a6dea"}]}