{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/core/platform/ChronoBankAssetInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\ncontract ChronoBankAssetInterface {\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __approve(address _spender, uint _value, address _sender) public returns(bool);\r\n    function __process(bytes /*_data*/, address /*_sender*/) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/core/platform/ChronoBankAssetProxyInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract ChronoBankAssetProxyInterface {\r\n    address public chronoBankPlatform;\r\n    bytes32 public smbl;\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __approve(address _spender, uint _value, address _sender) public returns (bool);\r\n    function getLatestVersion() public view returns (address);\r\n    function init(address _chronoBankPlatform, string _symbol, string _name) public;\r\n    function proposeUpgrade(address _newVersion) external returns (bool);\r\n}\r\n\r\n// File: contracts/core/platform/ChronoBankPlatformInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract ChronoBankPlatformInterface {\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    function symbols(uint _idx) public view returns (bytes32);\r\n    function symbolsCount() public view returns (uint);\r\n    function isCreated(bytes32 _symbol) public view returns(bool);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n\r\n    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\r\n\r\n    function name(bytes32 _symbol) public view returns(string);\r\n\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string);\r\n    function isReissuable(bytes32 _symbol) public view returns(bool);\r\n\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\r\n\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns(uint errorCode);\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) public returns(uint errorCode);\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\r\n    \r\n    function eventsHistory() public view returns (address);\r\n}\r\n\r\n// File: contracts/core/platform/ChronoBankAsset.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\ncontract ChronoBankAssetProxy is ChronoBankAssetProxyInterface {}\r\n\r\ncontract ChronoBankPlatform is ChronoBankPlatformInterface {}\r\n\r\n\r\n/// @title ChronoBank Asset implementation contract.\r\n///\r\n/// Basic asset implementation contract, without any additional logic.\r\n/// Every other asset implementation contracts should derive from this one.\r\n/// Receives calls from the proxy, and calls back immediatly without arguments modification.\r\n///\r\n/// Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract ChronoBankAsset is ChronoBankAssetInterface {\r\n\r\n    // @dev Assigned asset proxy contract, immutable.\r\n    ChronoBankAssetProxy public proxy;\r\n\r\n    // @dev banned addresses\r\n    mapping (address => bool) public blacklist;\r\n\r\n    // @dev stops asset transfers\r\n    bool public paused = false;\r\n\r\n    // @dev restriction/Unrestriction events\r\n    event Restricted(bytes32 indexed symbol, address restricted);\r\n    event Unrestricted(bytes32 indexed symbol, address unrestricted);\r\n\r\n    // @dev Paused/Unpaused events\r\n    event Paused(bytes32 indexed symbol);\r\n    event Unpaused(bytes32 indexed symbol);\r\n\r\n    /// @dev Only assigned proxy is allowed to call.\r\n    modifier onlyProxy {\r\n        if (proxy == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Only not paused tokens could go further.\r\n    modifier onlyNotPaused(address _sender) {\r\n        if (!paused || isAuthorized(_sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Only acceptable (not in blacklist) addresses are allowed to call.\r\n    modifier onlyAcceptable(address _address) {\r\n        if (!blacklist[_address]) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Only assets's admins are allowed to execute\r\n    modifier onlyAuthorized {\r\n        if (isAuthorized(msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets asset proxy address.\r\n    /// Can be set only once.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @param _proxy asset proxy contract address.\r\n    /// @return success.\r\n    function init(ChronoBankAssetProxy _proxy) public returns(bool) {\r\n        if (address(proxy) != 0x0) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Gets eventsHistory contract used for events' triggering\r\n    function eventsHistory() public view returns (address) {\r\n        ChronoBankPlatform platform = ChronoBankPlatform(proxy.chronoBankPlatform());\r\n        return platform.eventsHistory() != address(platform) ? platform.eventsHistory() : this;\r\n    }\r\n\r\n    /// @notice Lifts the ban on transfers for given addresses\r\n    function restrict(address [] _restricted) onlyAuthorized external returns (bool) {\r\n        for (uint i = 0; i < _restricted.length; i++) {\r\n            address restricted = _restricted[i];\r\n            blacklist[restricted] = true;\r\n            _emitRestricted(restricted);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes the ban on transfers for given addresses\r\n    function unrestrict(address [] _unrestricted) onlyAuthorized external returns (bool) {\r\n        for (uint i = 0; i < _unrestricted.length; i++) {\r\n            address unrestricted = _unrestricted[i];\r\n            delete blacklist[unrestricted];\r\n            _emitUnrestricted(unrestricted);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice called by the owner to pause, triggers stopped state\r\n    /// Only admin is allowed to execute this method.\r\n    function pause() onlyAuthorized external returns (bool) {\r\n        paused = true;\r\n        _emitPaused();\r\n        return true;\r\n    }\r\n\r\n    /// @notice called by the owner to unpause, returns to normal state\r\n    /// Only admin is allowed to execute this method.\r\n    function unpause() onlyAuthorized external returns (bool) {\r\n        paused = false;\r\n        _emitUnpaused();\r\n        return true;\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __transferWithReference(\r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    ) \r\n    onlyProxy \r\n    public \r\n    returns (bool) \r\n    {\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /// @notice Calls back without modifications if an asset is not stopped.\r\n    /// Checks whether _from/_sender are not in blacklist.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _transferWithReference(\r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    )\r\n    onlyNotPaused(_sender)\r\n    onlyAcceptable(_to)\r\n    onlyAcceptable(_sender)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy.__transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __transferFromWithReference(\r\n        address _from, \r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    ) \r\n    onlyProxy \r\n    public \r\n    returns (bool) \r\n    {\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /// @notice Calls back without modifications if an asset is not stopped.\r\n    /// Checks whether _from/_sender are not in blacklist.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _transferFromWithReference(\r\n        address _from, \r\n        address _to, \r\n        uint _value, \r\n        string _reference, \r\n        address _sender\r\n    )\r\n    onlyNotPaused(_sender)\r\n    onlyAcceptable(_from)\r\n    onlyAcceptable(_to)\r\n    onlyAcceptable(_sender)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /// @notice Passes execution into virtual function.\r\n    /// Can only be called by assigned asset proxy.\r\n    /// @dev function is final, and must not be overridden.\r\n    /// @return success.\r\n    function __approve(address _spender, uint _value, address _sender) onlyProxy public returns (bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /// @notice Calls back without modifications.\r\n    /// @dev function is virtual, and meant to be overridden.\r\n    /// @return success.\r\n    function _approve(address _spender, uint _value, address _sender)\r\n    onlyAcceptable(_spender)\r\n    onlyAcceptable(_sender)\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return proxy.__approve(_spender, _value, _sender);\r\n    }\r\n\r\n    function isAuthorized(address _owner)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        ChronoBankPlatform platform = ChronoBankPlatform(proxy.chronoBankPlatform());\r\n        return platform.hasAssetRights(_owner, proxy.smbl());\r\n    }\r\n\r\n    function _emitRestricted(address _restricted) private {\r\n        ChronoBankAsset(eventsHistory()).emitRestricted(proxy.smbl(), _restricted);\r\n    }\r\n\r\n    function _emitUnrestricted(address _unrestricted) private {\r\n        ChronoBankAsset(eventsHistory()).emitUnrestricted(proxy.smbl(), _unrestricted);\r\n    }\r\n\r\n    function _emitPaused() private {\r\n        ChronoBankAsset(eventsHistory()).emitPaused(proxy.smbl());\r\n    }\r\n\r\n    function _emitUnpaused() private {\r\n        ChronoBankAsset(eventsHistory()).emitUnpaused(proxy.smbl());\r\n    }\r\n\r\n    function emitRestricted(bytes32 _symbol, address _restricted) public {\r\n        emit Restricted(_symbol, _restricted);\r\n    }\r\n\r\n    function emitUnrestricted(bytes32 _symbol, address _unrestricted) public {\r\n        emit Unrestricted(_symbol, _unrestricted);\r\n    }\r\n\r\n    function emitPaused(bytes32 _symbol) public {\r\n        emit Paused(_symbol);\r\n    }\r\n\r\n    function emitUnpaused(bytes32 _symbol) public {\r\n        emit Unpaused(_symbol);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"emitUnpaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_restricted\",\"type\":\"address\"}],\"name\":\"emitRestricted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"emitPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_unrestricted\",\"type\":\"address\"}],\"name\":\"emitUnrestricted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restricted\",\"type\":\"address[]\"}],\"name\":\"restrict\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unrestricted\",\"type\":\"address[]\"}],\"name\":\"unrestrict\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"__process\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"restricted\",\"type\":\"address\"}],\"name\":\"Restricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"unrestricted\",\"type\":\"address\"}],\"name\":\"Unrestricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"Unpaused\",\"type\":\"event\"}]","ContractName":"ChronoBankAsset","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ecc42f8e0b8314365d8c961a1c4e139948139217395a91f699cab48ab81a887f"}]}