{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 private _rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param rate Number of token units a buyer gets per wei\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(uint256 rate, address wallet, IERC20 token) public {\r\n    require(rate > 0);\r\n    require(wallet != address(0));\r\n    require(token != address(0));\r\n\r\n    _rate = rate;\r\n    _wallet = wallet;\r\n    _token = token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return the token being sold.\r\n   */\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the address where funds are collected.\r\n   */\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  /**\r\n   * @return the number of token units a buyer gets per wei.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  /**\r\n   * @return the mount of wei raised.\r\n   */\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private _openingTime;\r\n  uint256 private _closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(isOpen());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param openingTime Crowdsale opening time\r\n   * @param closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 openingTime, uint256 closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(openingTime >= block.timestamp);\r\n    require(closingTime >= openingTime);\r\n\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale opening time.\r\n   */\r\n  function openingTime() public view returns(uint256) {\r\n    return _openingTime;\r\n  }\r\n\r\n  /**\r\n   * @return the crowdsale closing time.\r\n   */\r\n  function closingTime() public view returns(uint256) {\r\n    return _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale is open, false otherwise.\r\n   */\r\n  function isOpen() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\r\n\r\n/**\r\n * @title PostDeliveryCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\r\n */\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) private _balances;\r\n\r\n  /**\r\n   * @dev Withdraw tokens only after crowdsale ends.\r\n   * @param beneficiary Whose tokens will be withdrawn.\r\n   */\r\n  function withdrawTokens(address beneficiary) public {\r\n    require(hasClosed());\r\n    uint256 amount = _balances[beneficiary];\r\n    require(amount > 0);\r\n    _balances[beneficiary] = 0;\r\n    _deliverTokens(beneficiary, amount);\r\n  }\r\n\r\n  /**\r\n   * @return the balance of an account.\r\n   */\r\n  function balanceOf(address account) public view returns(uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n   * @param beneficiary Token purchaser\r\n   * @param tokenAmount Amount of tokens purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale with a one-off finalization action, where one\r\n * can do extra work after finishing.\r\n */\r\ncontract FinalizableCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  bool private _finalized = false;\r\n\r\n  event CrowdsaleFinalized();\r\n\r\n  /**\r\n   * @return true if the crowdsale is finalized, false otherwise.\r\n   */\r\n  function finalized() public view returns (bool) {\r\n    return _finalized;\r\n  }\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public {\r\n    require(!_finalized);\r\n    require(hasClosed());\r\n\r\n    _finalization();\r\n    emit CrowdsaleFinalized();\r\n\r\n    _finalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super._finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function _finalization() internal {\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\ncontract Whitelist is Ownable {\r\n\r\n  mapping (address => bool) private whitelistedAddresses;\r\n\r\n  mapping (address => bool) private admins;\r\n\r\n  modifier onlyIfWhitelisted(address _addr) {\r\n    require(whitelistedAddresses[_addr] == true, \"Address not on the whitelist!\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender] == true || isOwner(), \"Not an admin!\");\r\n    _;\r\n  }\r\n\r\n  function addAdmin(address _addr)\r\n    external\r\n    onlyOwner\r\n  {\r\n    admins[_addr] = true;\r\n  }\r\n\r\n  function removeAdmin(address _addr)\r\n    external\r\n    onlyOwner\r\n  {\r\n    admins[_addr] = false;\r\n  }\r\n\r\n  function isAdmin(address _addr)\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return admins[_addr];\r\n  }\r\n\r\n  function addAddressToWhitelist(address _addr)\r\n    public\r\n    onlyAdmins\r\n  {\r\n    whitelistedAddresses[_addr] = true;\r\n  }\r\n\r\n  function whitelist(address _addr)\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return whitelistedAddresses[_addr];\r\n  }\r\n\r\n  function addAddressesToWhitelist(address[] _addrs)\r\n    public\r\n    onlyAdmins\r\n  {\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      addAddressToWhitelist(_addrs[i]);\r\n    }\r\n  }\r\n\r\n  function removeAddressFromWhitelist(address _addr)\r\n    public\r\n    onlyAdmins\r\n  {\r\n    whitelistedAddresses[_addr] = false;\r\n  }\r\n\r\n  function removeAddressesFromWhitelist(address[] _addrs)\r\n    public\r\n    onlyAdmins\r\n  {\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      removeAddressFromWhitelist(_addrs[i]);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/ClarityCrowdsale.sol\r\n\r\ncontract ClarityCrowdsale is\r\n  Crowdsale,\r\n  TimedCrowdsale,\r\n  PostDeliveryCrowdsale,\r\n  FinalizableCrowdsale,\r\n  Whitelist\r\n{\r\n\r\n  address private advisorWallet; // forward all phase one funds here\r\n\r\n  uint256 private phaseOneRate; // rate for phase one\r\n\r\n  uint256 private phaseTwoRate; // rate for phase teo\r\n\r\n  uint256 private phaseOneTokens = 10000000 * 10**18; // tokens available in phase one\r\n\r\n  uint256 private phaseTwoTokens = 30000000 * 10**18; // tokens available in phase two\r\n\r\n  mapping  (address => address) referrals; // Keep track of referrals for bonuses\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == super.wallet() || isOwner(), \"Not a founder!\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    uint256 _phaseOneRate,\r\n    uint256 _phaseTwoRate,\r\n    address _advisorWallet,\r\n    address _founderWallet,\r\n    uint256 _openingTime,\r\n    uint256 _closingTime,\r\n    IERC20 _token\r\n  )\r\n    Crowdsale(_phaseTwoRate, _founderWallet, _token)\r\n    TimedCrowdsale(_openingTime, _closingTime)\r\n    public\r\n  {\r\n      advisorWallet = _advisorWallet;\r\n      phaseOneRate = _phaseOneRate;\r\n      phaseTwoRate = _phaseTwoRate;\r\n  }\r\n\r\n  // overridden from Crowdsale parent contract\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    if (phaseOneTokens > 0) {\r\n      uint256 tokens = weiAmount.mul(phaseOneRate);\r\n      if (tokens > phaseOneTokens) {\r\n        uint256 weiRemaining = tokens.sub(phaseOneTokens).div(phaseOneRate);\r\n        tokens = phaseOneTokens.add(super._getTokenAmount(weiRemaining));\r\n      }\r\n      return tokens;\r\n    }\r\n\r\n    return super._getTokenAmount(weiAmount);\r\n  }\r\n\r\n  // overridden from Crowdsale parent contract\r\n  function _forwardFunds()\r\n    internal\r\n  {\r\n    uint256 tokens;\r\n    if (phaseOneTokens > 0) {\r\n      tokens = msg.value.mul(phaseOneRate);\r\n      if (tokens > phaseOneTokens) {\r\n        uint256 weiRemaining = tokens.sub(phaseOneTokens).div(phaseOneRate);\r\n        phaseOneTokens = 0;\r\n        advisorWallet.transfer(msg.value.sub(weiRemaining));\r\n        tokens = weiRemaining.mul(phaseTwoRate);\r\n        phaseTwoTokens = phaseTwoTokens.sub(tokens);\r\n        super.wallet().transfer(weiRemaining);\r\n      } else {\r\n        phaseOneTokens = phaseOneTokens.sub(tokens);\r\n        advisorWallet.transfer(msg.value);\r\n      }\r\n      return;\r\n    }\r\n\r\n    tokens = msg.value.mul(phaseTwoRate);\r\n    phaseTwoTokens = phaseTwoTokens.sub(tokens);\r\n    super._forwardFunds();\r\n  }\r\n\r\n  // overridden from Crowdsale parent contract\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    onlyIfWhitelisted(beneficiary)\r\n  {\r\n    require(tokensLeft() >= _getTokenAmount(weiAmount), \"Insufficient number of tokens to complete purchase!\");\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  // overridden from Crowdsale parent contract\r\n  function _finalization()\r\n    internal\r\n    onlyFounders\r\n  {\r\n    super.token().safeTransfer(super.wallet(), tokensLeft());\r\n    super._finalization();\r\n  }\r\n\r\n  function tokensLeft()\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return phaseOneTokens + phaseTwoTokens;\r\n  }\r\n\r\n  function addReferral(address beneficiary, address referrer)\r\n    external\r\n    onlyAdmins\r\n    onlyIfWhitelisted(referrer)\r\n    onlyIfWhitelisted(beneficiary)\r\n  {\r\n    referrals[beneficiary] = referrer;\r\n  }\r\n\r\n  // overridden from Crowdsale parent contract\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    if (referrals[beneficiary] != 0) {\r\n      uint256 tokensAvailable = tokensLeft().sub(tokenAmount);\r\n      uint256 bonus = tokenAmount.mul(15).div(100);\r\n      if (bonus >= tokensAvailable) {\r\n        bonus = tokensAvailable;\r\n        phaseTwoTokens = phaseTwoTokens.sub(tokensAvailable);\r\n      } else {\r\n        phaseTwoTokens = phaseTwoTokens.sub(bonus);\r\n      }\r\n\r\n      if (bonus > 0) {\r\n        super._processPurchase(referrals[beneficiary], bonus);\r\n      }\r\n    }\r\n\r\n    super._processPurchase(beneficiary, tokenAmount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_phaseOneRate\",\"type\":\"uint256\"},{\"name\":\"_phaseTwoRate\",\"type\":\"uint256\"},{\"name\":\"_advisorWallet\",\"type\":\"address\"},{\"name\":\"_founderWallet\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"ClarityCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000006f3a7a39dac7428ced785f5bef9606ddf468eee500000000000000000000000033a8f2d1c594b1593810c968056959955ebe80b1000000000000000000000000000000000000000000000000000000005bdd8dc0000000000000000000000000000000000000000000000000000000005c3145000000000000000000000000005070dc5aa546e8e167c6dab0c45efac6348af74c","Library":"","SwarmSource":"bzzr://d6d37dd1c5db6313bd9b800d8fb0ed852b95dfe10ec30156e5460bfc39af3508"}]}