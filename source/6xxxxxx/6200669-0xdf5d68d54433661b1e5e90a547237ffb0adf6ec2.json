{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    mapping(address => bool) admins;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AddAdmin(address indexed admin);\r\n    event DelAdmin(address indexed admin);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function addAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0));\r\n        admins[_adminAddress] = true;\r\n        emit AddAdmin(_adminAddress);\r\n    }\r\n\r\n    function delAdmin(address _adminAddress) external onlyOwner {\r\n        require(admins[_adminAddress]);\r\n        admins[_adminAddress] = false;\r\n        emit DelAdmin(_adminAddress);\r\n    }\r\n\r\n    function isAdmin(address _adminAddress) public view returns (bool) {\r\n        return admins[_adminAddress];\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, address _token, uint _value, bytes _extraData) external;\r\n    function receiveCreateAuction(address _from, address _token, uint _tokenId, uint _startPrice, uint _duration) external;\r\n    function receiveCreateAuctionFromArray(address _from, address _token, uint[] _landIds, uint _startPrice, uint _duration) external;\r\n}\r\n\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool);\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\n\r\ncontract LandBase is ERC721, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    event NewLand(address indexed owner, uint256 landId);\r\n\r\n    struct Land {\r\n        uint id;\r\n    }\r\n\r\n\r\n    // Total amount of lands\r\n    uint256 private totalLands;\r\n\r\n    // Incremental counter of lands Id\r\n    uint256 private lastLandId;\r\n\r\n    //Mapping from land ID to Land struct\r\n    mapping(uint256 => Land) public lands;\r\n\r\n    // Mapping from land ID to owner\r\n    mapping(uint256 => address) private landOwner;\r\n\r\n    // Mapping from land ID to approved address\r\n    mapping(uint256 => address) private landApprovals;\r\n\r\n    // Mapping from owner to list of owned lands IDs\r\n    mapping(address => uint256[]) private ownedLands;\r\n\r\n    // Mapping from land ID to index of the owner lands list\r\n    // т.е. ID земли => порядковый номер в списке владельца\r\n    mapping(uint256 => uint256) private ownedLandsIndex;\r\n\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(owns(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified land ID\r\n    * @param _tokenId uint256 ID of the land to query the owner of\r\n    * @return owner address currently marked as the owner of the given land ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        return landOwner[_tokenId];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalLands;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ownedLands[_owner].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the list of lands owned by a given address\r\n    * @param _owner address to query the lands of\r\n    * @return uint256[] representing the list of lands owned by the passed address\r\n    */\r\n    function landsOf(address _owner) public view returns (uint256[]) {\r\n        return ownedLands[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the approved address to take ownership of a given land ID\r\n    * @param _tokenId uint256 ID of the land to query the approval of\r\n    * @return address currently approved to take ownership of the given land ID\r\n    */\r\n    function approvedFor(uint256 _tokenId) public view returns (address) {\r\n        return landApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Tells whether the msg.sender is approved for the given land ID or not\r\n    * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n    * @param _owner address of the owner to query the approval of\r\n    * @param _tokenId uint256 ID of the land to query the approval of\r\n    * @return bool whether the msg.sender is approved for the given land ID or not\r\n    */\r\n    function allowance(address _owner, uint256 _tokenId) public view returns (bool) {\r\n        return approvedFor(_tokenId) == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to claim for the ownership of the given land ID\r\n    * @param _to address to be approved for the given land ID\r\n    * @param _tokenId uint256 ID of the land to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) returns (bool) {\r\n        require(_to != msg.sender);\r\n        if (approvedFor(_tokenId) != address(0) || _to != address(0)) {\r\n            landApprovals[_tokenId] = _to;\r\n            emit Approval(msg.sender, _to, _tokenId);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _tokenId, bytes _extraData) public returns (bool) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _tokenId)) {\r\n            spender.receiveApproval(msg.sender, this, _tokenId, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function createAuction(address _auction, uint _tokenId, uint _startPrice, uint _duration) public returns (bool) {\r\n        tokenRecipient auction = tokenRecipient(_auction);\r\n        if (approve(_auction, _tokenId)) {\r\n            auction.receiveCreateAuction(msg.sender, this, _tokenId, _startPrice, _duration);\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    function createAuctionFromArray(address _auction, uint[] _landIds, uint _startPrice, uint _duration) public returns (bool) {\r\n        tokenRecipient auction = tokenRecipient(_auction);\r\n\r\n        for (uint i = 0; i < _landIds.length; ++i)\r\n            require(approve(_auction, _landIds[i]));\r\n\r\n        auction.receiveCreateAuctionFromArray(msg.sender, this, _landIds, _startPrice, _duration);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Claims the ownership of a given land ID\r\n    * @param _tokenId uint256 ID of the land being claimed by the msg.sender\r\n    */\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(allowance(msg.sender, _tokenId));\r\n        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given land ID to another address\r\n    * @param _to address to receive the ownership of the given land ID\r\n    * @param _tokenId uint256 ID of the land to be transferred\r\n    */\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) returns (bool) {\r\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n        return true;\r\n    }\r\n\r\n\r\n    function ownerTransfer(address _from, address _to, uint256 _tokenId) onlyAdmin public returns (bool) {\r\n        clearApprovalAndTransfer(_from, _to, _tokenId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval and transfer the ownership of a given land ID\r\n    * @param _from address which you want to send lands from\r\n    * @param _to address which you want to transfer the land to\r\n    * @param _tokenId uint256 ID of the land to be transferred\r\n    */\r\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(owns(_from, _tokenId));\r\n        require(_to != address(0));\r\n        require(_to != ownerOf(_tokenId));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeLand(_from, _tokenId);\r\n        addLand(_to, _tokenId);\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given land ID\r\n    * @param _tokenId uint256 ID of the land to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) private {\r\n        require(owns(_owner, _tokenId));\r\n        landApprovals[_tokenId] = address(0);\r\n        emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a land ID to the list of a given address\r\n    * @param _to address representing the new owner of the given land ID\r\n    * @param _tokenId uint256 ID of the land to be added to the lands list of the given address\r\n    */\r\n    function addLand(address _to, uint256 _tokenId) private {\r\n        require(landOwner[_tokenId] == address(0));\r\n        landOwner[_tokenId] = _to;\r\n\r\n        uint256 length = ownedLands[_to].length;\r\n        ownedLands[_to].push(_tokenId);\r\n        ownedLandsIndex[_tokenId] = length;\r\n        totalLands = totalLands.add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a land ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given land ID\r\n    * @param _tokenId uint256 ID of the land to be removed from the lands list of the given address\r\n    */\r\n    function removeLand(address _from, uint256 _tokenId) private {\r\n        require(owns(_from, _tokenId));\r\n\r\n        uint256 landIndex = ownedLandsIndex[_tokenId];\r\n        //        uint256 lastLandIndex = balanceOf(_from).sub(1);\r\n        uint256 lastLandIndex = ownedLands[_from].length.sub(1);\r\n        uint256 lastLand = ownedLands[_from][lastLandIndex];\r\n\r\n        landOwner[_tokenId] = address(0);\r\n        ownedLands[_from][landIndex] = lastLand;\r\n        ownedLands[_from][lastLandIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both landIndex and lastLandIndex are going to\r\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedLands list since we are first swapping\r\n        // the lastLand to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedLands[_from].length--;\r\n        ownedLandsIndex[_tokenId] = 0;\r\n        ownedLandsIndex[lastLand] = landIndex;\r\n        totalLands = totalLands.sub(1);\r\n    }\r\n\r\n\r\n    function createLand(address _owner, uint _id) onlyAdmin public returns (uint) {\r\n        require(_owner != address(0));\r\n        uint256 _tokenId = lastLandId++;\r\n        addLand(_owner, _tokenId);\r\n        //store new land data\r\n        lands[_tokenId] = Land({\r\n            id : _id\r\n            });\r\n        emit Transfer(address(0), _owner, _tokenId);\r\n        emit NewLand(_owner, _tokenId);\r\n        return _tokenId;\r\n    }\r\n\r\n    function createLandAndAuction(address _owner, uint _id, address _auction, uint _startPrice, uint _duration) onlyAdmin public\r\n    {\r\n        uint id = createLand(_owner, _id);\r\n        require(createAuction(_auction, id, _startPrice, _duration));\r\n    }\r\n\r\n\r\n    function owns(address _claimant, uint256 _tokenId) public view returns (bool) {\r\n        return ownerOf(_tokenId) == _claimant && ownerOf(_tokenId) != address(0);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(_to != address(this));\r\n        require(allowance(msg.sender, _tokenId));\r\n        clearApprovalAndTransfer(_from, _to, _tokenId);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ArconaDigitalLand is LandBase {\r\n    string public constant name = \" Arcona Digital Land\";\r\n    string public constant symbol = \"ARDL\";\r\n\r\n    function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function() public payable{\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_landIds\",\"type\":\"uint256[]\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuctionFromArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimant\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"owns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"landsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createLand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lands\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createLandAndAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"}],\"name\":\"NewLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DelAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ArconaDigitalLand","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3dbd5d7025a01ea6c30168547c10f2c6ba85e7aa1f33da6cea154df17e2b6e72"}]}