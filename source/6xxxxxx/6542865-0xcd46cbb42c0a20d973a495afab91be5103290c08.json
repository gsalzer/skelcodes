{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract Ownable \r\n{\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    constructor() public \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner, \"Can used only by owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public \r\n    {\r\n        require(_owner != 0, \"Please provide new owner address\");\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public \r\n    {\r\n        require(newOwner == msg.sender, \"Please call from new owner\");\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath \r\n{\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) \r\n    {\r\n        if (_a == 0) { return 0; }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) \r\n    {\r\n        return _a / _b;\r\n    }\r\n\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) \r\n    {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) \r\n    {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract KassaNetwork is Ownable \r\n{\r\n    using SafeMath for uint;\r\n\r\n    string  public constant name    = 'Kassa 200/100';\r\n    uint public startTimestamp = now;\r\n\r\n    uint public constant procKoef = 10000;\r\n    uint public constant perDay = 100;\r\n    uint public constant ownerFee = 400;\r\n    uint[4] public bonusReferrer = [600, 200, 100, 50];\r\n\r\n    uint public constant procReturn = 9000;\r\n\r\n\r\n    uint public constant maxDepositDays = 200;\r\n\r\n\r\n    uint public constant minimalDeposit = 0.5 ether;\r\n    uint public constant maximalDeposit = 25 ether;\r\n\r\n    uint public constant minimalDepositForBonusReferrer = 0.015 ether;\r\n\r\n    uint public countInvestors = 0;\r\n    uint public totalInvest = 0;\r\n    uint public totalPenalty = 0;\r\n    uint public totalSelfInvest = 0;\r\n    uint public totalPaid = 0;\r\n\r\n    event LogInvestment(address _addr, uint _value, bytes _refData);\r\n    event LogTransfer(address _addr, uint _amount, uint _contactBalance);\r\n    event LogSelfInvestment(uint _value);\r\n\r\n    event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount);\r\n    event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres);\r\n\r\n    event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount);\r\n    event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals);\r\n\r\n    event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty);\r\n    event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty);\r\n    event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit);\r\n\r\n    event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay);\r\n    event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer);\r\n\r\n\r\n    struct User\r\n    {\r\n        uint balance;\r\n        uint paidInteres;\r\n        uint timestamp;\r\n        uint countReferrals;\r\n        uint earnOnReferrals;\r\n        uint paidReferrals;\r\n        address referrer;\r\n    }\r\n\r\n    mapping (address => User) private user;\r\n\r\n    mapping (uint => uint) private usedDeposit;\r\n\r\n    function getInteres(address addr) private view returns(uint interes) \r\n    {\r\n        uint diffDays = getNDay(user[addr].timestamp);\r\n\r\n        if( diffDays > maxDepositDays ) diffDays = maxDepositDays;\r\n\r\n        interes = user[addr].balance.mul(perDay).mul(diffDays).div(procKoef);\r\n    }\r\n\r\n    function getUser(address addr) public view returns(uint balance, uint timestamp, uint paidInteres, uint totalInteres, uint countReferrals, uint earnOnReferrals, uint paidReferrals, address referrer) \r\n    {\r\n        address a = addr;\r\n        return (\r\n            user[a].balance,\r\n            user[a].timestamp,\r\n            user[a].paidInteres,\r\n            getInteres(a),\r\n            user[a].countReferrals,\r\n            user[a].earnOnReferrals,\r\n            user[a].paidReferrals,\r\n            user[a].referrer\r\n        );\r\n    }\r\n\r\n    function getCurrentDay() public view returns(uint nday) \r\n    {\r\n        nday = getNDay(startTimestamp);\r\n    }\r\n\r\n    function getNDay(uint date) public view returns(uint nday) \r\n    {\r\n        uint diffTime = date > 0 ? now.sub(date) : 0;\r\n\r\n        nday = diffTime.div(24 hours);\r\n    }\r\n\r\n    function getCurrentDayDepositLimit() public view returns(uint limit) \r\n    {\r\n        uint nDay = getCurrentDay();\r\n\r\n        limit = getDayDepositLimit(nDay);\r\n    }\r\n\r\n    function getDayDepositLimit(uint nDay) public pure returns(uint limit) \r\n    {                         \r\n        if(nDay <= 30) return 25.5 ether;\r\n        if(nDay <= 60) return 51 ether;\r\n        if(nDay <= 150) return 151 ether;\r\n        if(nDay <= 270) return 201 ether;\r\n\r\n        return 301 ether;\r\n    }\r\n\r\n    function getCurrentDayRestDepositLimit() public view returns(uint restLimit) \r\n    {\r\n        uint nDay = getCurrentDay();\r\n\r\n        restLimit = getDayRestDepositLimit(nDay);\r\n    }\r\n\r\n    function getDayRestDepositLimit(uint nDay) public view returns(uint restLimit) \r\n    {\r\n        restLimit = getCurrentDayDepositLimit().sub(usedDeposit[nDay]);\r\n    }\r\n\r\n    function() external payable \r\n    {\r\n        emit LogInvestment(msg.sender, msg.value, msg.data);\r\n        processPayment(msg.value, msg.data);\r\n    }\r\n\r\n    function processPayment(uint moneyValue, bytes refData) private\r\n    {\r\n        if (msg.sender == owner) \r\n        { \r\n            totalSelfInvest = totalSelfInvest.add(moneyValue);\r\n            emit LogSelfInvestment(moneyValue);\r\n            return; \r\n        }\r\n\r\n        if (moneyValue == 0) \r\n        { \r\n            preparePayment();\r\n            return; \r\n        }\r\n\r\n        if (moneyValue < minimalDeposit) \r\n        { \r\n            totalPenalty = totalPenalty.add(moneyValue);\r\n            emit LogMinimalDepositPayment(msg.sender, moneyValue, totalPenalty);\r\n            return; \r\n        }\r\n\r\n        address referrer = bytesToAddress(refData);\r\n\r\n        if (user[msg.sender].balance > 0 || \r\n            refData.length != 20 || \r\n            moneyValue > maximalDeposit ||\r\n            referrer != owner &&\r\n              (\r\n                 user[referrer].balance <= 0 || \r\n                 referrer == msg.sender) \r\n              )\r\n        { \r\n            uint amount = moneyValue.mul(procReturn).div(procKoef);\r\n\r\n            totalPenalty = totalPenalty.add(moneyValue.sub(amount));\r\n\r\n            emit LogPenaltyPayment(msg.sender, user[msg.sender].balance, refData.length, referrer, user[referrer].balance, moneyValue, amount, totalPenalty);\r\n\r\n            msg.sender.transfer(amount);\r\n\r\n            return; \r\n        }\r\n\r\n\r\n\r\n        uint nDay = getCurrentDay();\r\n\r\n        uint restDepositPerDay = getDayRestDepositLimit(nDay);\r\n\r\n        uint addDeposit = moneyValue;\r\n\r\n\r\n        if (moneyValue > restDepositPerDay)\r\n        {\r\n            uint returnDeposit = moneyValue.sub(restDepositPerDay);\r\n\r\n            uint returnAmount = returnDeposit.mul(procReturn).div(procKoef);\r\n\r\n            addDeposit = addDeposit.sub(returnDeposit);\r\n\r\n            totalPenalty = totalPenalty.add(returnDeposit.sub(returnAmount));\r\n\r\n            emit LogExceededRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, returnDeposit, returnAmount, totalPenalty, addDeposit);\r\n\r\n            msg.sender.transfer(returnAmount);\r\n        }\r\n\r\n        usedDeposit[nDay] = usedDeposit[nDay].add(addDeposit);\r\n\r\n        emit LogUsedRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, addDeposit, usedDeposit[nDay]);\r\n\r\n\r\n        registerInvestor(referrer);\r\n        sendOwnerFee(addDeposit);\r\n        calcBonusReferrers(referrer, addDeposit);\r\n        updateInvestBalance(addDeposit);\r\n    }\r\n\r\n\r\n    function registerInvestor(address referrer) private \r\n    {\r\n        user[msg.sender].timestamp = now;\r\n        countInvestors++;\r\n\r\n        user[msg.sender].referrer = referrer;\r\n        user[referrer].countReferrals++;\r\n    }\r\n\r\n    function sendOwnerFee(uint addDeposit) private \r\n    {\r\n        transfer(owner, addDeposit.mul(ownerFee).div(procKoef));\r\n    }\r\n\r\n    function calcBonusReferrers(address referrer, uint addDeposit) private \r\n    {\r\n        for (uint i = 0; i < bonusReferrer.length && referrer != 0; i++)\r\n        {\r\n            uint amountReferrer = addDeposit.mul(bonusReferrer[i]).div(procKoef);\r\n\r\n            address nextReferrer = user[referrer].referrer;\r\n\r\n            emit LogCalcBonusReferrer(referrer, addDeposit, i, bonusReferrer[i], amountReferrer, nextReferrer);\r\n\r\n            preparePaymentReferrer(referrer, amountReferrer);\r\n\r\n            referrer = nextReferrer;\r\n        }\r\n    }\r\n\r\n\r\n    function preparePaymentReferrer(address referrer, uint amountReferrer) private \r\n    {\r\n        user[referrer].earnOnReferrals = user[referrer].earnOnReferrals.add(amountReferrer);\r\n\r\n        uint totalReferrals = user[referrer].earnOnReferrals;\r\n        uint paidReferrals = user[referrer].paidReferrals;\r\n\r\n\r\n        if (totalReferrals >= paidReferrals.add(minimalDepositForBonusReferrer)) \r\n        {\r\n            uint amount = totalReferrals.sub(paidReferrals);\r\n\r\n            user[referrer].paidReferrals = user[referrer].paidReferrals.add(amount);\r\n\r\n            emit LogPreparePaymentReferrer(referrer, totalReferrals, paidReferrals, amount);\r\n\r\n            transfer(referrer, amount);\r\n        }\r\n        else\r\n        {\r\n            emit LogSkipPreparePaymentReferrer(referrer, totalReferrals, paidReferrals);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function preparePayment() public \r\n    {\r\n        uint totalInteres = getInteres(msg.sender);\r\n        uint paidInteres = user[msg.sender].paidInteres;\r\n        if (totalInteres > paidInteres) \r\n        {\r\n            uint amount = totalInteres.sub(paidInteres);\r\n\r\n            emit LogPreparePayment(msg.sender, totalInteres, paidInteres, amount);\r\n\r\n            user[msg.sender].paidInteres = user[msg.sender].paidInteres.add(amount);\r\n            transfer(msg.sender, amount);\r\n        }\r\n        else\r\n        {\r\n            emit LogSkipPreparePayment(msg.sender, totalInteres, paidInteres);\r\n        }\r\n    }\r\n\r\n    function updateInvestBalance(uint addDeposit) private \r\n    {\r\n        user[msg.sender].balance = user[msg.sender].balance.add(addDeposit);\r\n        totalInvest = totalInvest.add(addDeposit);\r\n    }\r\n\r\n    function transfer(address receiver, uint amount) private \r\n    {\r\n        if (amount > 0) \r\n        {\r\n            if (receiver != owner) { totalPaid = totalPaid.add(amount); }\r\n\r\n            uint balance = address(this).balance;\r\n\r\n            emit LogTransfer(receiver, amount, balance);\r\n\r\n            require(amount < balance, \"Not enough balance. Please retry later.\");\r\n\r\n            receiver.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes source) private pure returns(address addr) \r\n    {\r\n        assembly { addr := mload(add(source,0x14)) }\r\n        return addr;\r\n    }\r\n\r\n    function getTotals() public view returns(uint _maxDepositDays, \r\n                                             uint _perDay, \r\n                                             uint _startTimestamp, \r\n\r\n                                             uint _minimalDeposit, \r\n                                             uint _maximalDeposit, \r\n                                             uint[4] _bonusReferrer, \r\n                                             uint _minimalDepositForBonusReferrer, \r\n                                             uint _ownerFee, \r\n\r\n                                             uint _countInvestors, \r\n                                             uint _totalInvest, \r\n                                             uint _totalPenalty, \r\n//                                             uint _totalSelfInvest, \r\n                                             uint _totalPaid, \r\n\r\n                                             uint _currentDayDepositLimit, \r\n                                             uint _currentDayRestDepositLimit)\r\n    {\r\n        return (\r\n                 maxDepositDays,\r\n                 perDay,\r\n                 startTimestamp,\r\n\r\n                 minimalDeposit,\r\n                 maximalDeposit,\r\n                 bonusReferrer,\r\n                 minimalDepositForBonusReferrer,\r\n                 ownerFee,\r\n\r\n                 countInvestors,\r\n                 totalInvest,\r\n                 totalPenalty,\r\n//                 totalSelfInvest,\r\n                 totalPaid,\r\n\r\n                 getCurrentDayDepositLimit(),\r\n                 getCurrentDayRestDepositLimit()\r\n               );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDepositDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preparePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"paidInteres\",\"type\":\"uint256\"},{\"name\":\"totalInteres\",\"type\":\"uint256\"},{\"name\":\"countReferrals\",\"type\":\"uint256\"},{\"name\":\"earnOnReferrals\",\"type\":\"uint256\"},{\"name\":\"paidReferrals\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procKoef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotals\",\"outputs\":[{\"name\":\"_maxDepositDays\",\"type\":\"uint256\"},{\"name\":\"_perDay\",\"type\":\"uint256\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_minimalDeposit\",\"type\":\"uint256\"},{\"name\":\"_maximalDeposit\",\"type\":\"uint256\"},{\"name\":\"_bonusReferrer\",\"type\":\"uint256[4]\"},{\"name\":\"_minimalDepositForBonusReferrer\",\"type\":\"uint256\"},{\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"name\":\"_countInvestors\",\"type\":\"uint256\"},{\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"name\":\"_totalPaid\",\"type\":\"uint256\"},{\"name\":\"_currentDayDepositLimit\",\"type\":\"uint256\"},{\"name\":\"_currentDayRestDepositLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSelfInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDepositForBonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPenalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getNDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_refData\",\"type\":\"bytes\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_contactBalance\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogSelfInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogMinimalDepositPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentSenderDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerAdressLength\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentReferrerDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogPenaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_badDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_willDeposit\",\"type\":\"uint256\"}],\"name\":\"LogExceededRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_realDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usedDepositPerDay\",\"type\":\"uint256\"}],\"name\":\"LogUsedRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextReferrer\",\"type\":\"address\"}],\"name\":\"LogCalcBonusReferrer\",\"type\":\"event\"}]","ContractName":"KassaNetwork","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0985ed1e6aaae30d1f35f8caa5a53c890209b8f0626a65bed56b48955dc3603"}]}