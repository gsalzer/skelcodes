{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract wordbot { function getWords(uint _wordcount) public view returns (bytes6[]) {} }\r\n\r\ncontract test {\r\n    wordbot wordbot_contract = wordbot(0xA95E23ac202ad91204DA8C1A24B55684CDcC19B3);\r\n    \r\n    uint wordcount = 12;\r\n    string[12] public human_readable_blockhash;\r\n    \r\n    modifier one_time_use {\r\n        require(keccak256(abi.encodePacked(human_readable_blockhash[0])) == keccak256(abi.encodePacked(\"\")));\r\n        _;\r\n    }\r\n    \r\n    function record_human_readable_blockhash() \r\n        one_time_use public\r\n    {\r\n        bytes6[] memory word_sequence = new bytes6[](wordcount);\r\n        word_sequence = wordbot_contract.getWords(wordcount);\r\n        \r\n        for(uint i = 0; i<wordcount; i++) {\r\n            bytes6 word = word_sequence[i];\r\n            bytes memory toBytes = new bytes(6);\r\n            assembly {\r\n                toBytes := mload(word)\r\n            }\r\n            human_readable_blockhash[i] = string(toBytes);\r\n        }\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"record_human_readable_blockhash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"human_readable_blockhash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"test","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e7fde1403fd9bd377764cf9dad598e59dab554491982ac1b0d0c774417cc3b4"}]}