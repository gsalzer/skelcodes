{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n}\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\ncontract AS is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    uint256 private totalSupply_ = 110000000 * 10**8;\r\n\r\n    string public constant name = \"AmaStar\";\r\n    string public constant symbol = \"AS\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    mapping (address => uint) lockupTime;\r\n    mapping (address => uint) lockupAmount;\r\n\r\n\r\n    bool private teamGotMoney = false;\r\n\r\n    function lock(address _victim, uint _value, uint _periodSec) public onlyOwner {\r\n        lockupAmount[_victim] = 0;\r\n        lockupTime[_victim] = 0;\r\n        lockupAmount[_victim] = _value;\r\n        lockupTime[_victim] = block.timestamp.add(_periodSec);\r\n    }\r\n\r\n    function unlock(address _luckier) external onlyOwner {\r\n        lockupAmount[_luckier] = 0;\r\n        lockupTime[_luckier] = 0;\r\n    }\r\n\r\n    constructor() public {\r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n\r\n\r\n    function transferAndLockToTeam(address _team1year, address _team6months, address _operations1year, address _operations9months, address _operations6months, address _operations3months) external onlyOwner {\r\n        require(!teamGotMoney);\r\n        teamGotMoney = true;\r\n        transfer(_team1year, 10000000 * 10**8);\r\n        transfer(_team6months, 6500000 * 10**8);\r\n        lock(_team1year, 10000000 * 10**8, 365 * 1 days);\r\n        lock(_team6months, 6500000 * 10**8, 182 * 1 days);\r\n        transfer(_operations1year, 2750000 * 10**8);\r\n        transfer(_operations9months, 2750000 * 10**8);\r\n        transfer(_operations6months, 2750000 * 10**8);\r\n        transfer(_operations3months, 2750000 * 10**8);\r\n        lock(_operations1year, 2750000 * 10**8, 365 * 1 days);\r\n        lock(_operations9months, 2750000 * 10**8, 273 * 1 days);\r\n        lock(_operations6months, 2750000 * 10**8, 182 * 1 days);\r\n        lock(_operations3months, 2750000 * 10**8, 91 * 1 days);\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        if (lockupAmount[msg.sender] > 0) {\r\n            if (block.timestamp <= lockupTime[msg.sender]) {\r\n                require(balances[msg.sender].sub(lockupAmount[msg.sender]) >= _value);\r\n            }\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        if (lockupAmount[_from] > 0) {\r\n            if (now <= lockupTime[_from]) {\r\n                require(balances[_from].sub(lockupAmount[_from]) >= _value);\r\n            }\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param _account The account whose tokens will be burnt.\r\n     * @param _amount The amount that will be burnt.\r\n     */\r\n    function _burn(address _account, uint256 _amount) internal {\r\n        require(_account != 0);\r\n        require(_amount <= balances[_account]);\r\n\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        balances[_account] = balances[_account].sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal _burn function.\r\n     * @param _account The account whose tokens will be burnt.\r\n     * @param _amount The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address _account, uint256 _amount) internal {\r\n        require(_amount <= allowed[_account][msg.sender]);\r\n\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\r\n        _burn(_account, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public multisig;\r\n\r\n    AS public token;\r\n\r\n    uint rate;\r\n    uint rateInUsd;\r\n    uint priceETH;\r\n\r\n    uint indCap;\r\n\r\n    event Purchased(address _buyer, uint _amount, string _type);\r\n\r\n\r\n    function setIndCap(uint _indCapETH) public onlyOwner {\r\n        indCap = _indCapETH;\r\n    }\r\n\r\n    function getIndCapInETH() public view returns(uint) {\r\n        return indCap;\r\n    }\r\n\r\n    function setPriceETH(uint _newPriceETH) external onlyOwner {\r\n        setRate(_newPriceETH);\r\n    }\r\n\r\n    function setRate(uint _priceETH) internal {\r\n        require(_priceETH != 0);\r\n        priceETH = _priceETH;\r\n        rate = rateInUsd.mul(1 ether).div(_priceETH);\r\n    }\r\n\r\n    function getPriceETH() public view returns(uint) {\r\n        return priceETH;\r\n    }\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    function finalizeICO(address _owner) external onlyOwner {\r\n        require(_owner != address(0));\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(_owner, balance);\r\n    }\r\n\r\n    function getMyBalanceAS() external view returns(uint256) {\r\n        return token.balanceOf(msg.sender);\r\n    }\r\n}\r\n\r\ncontract whitelistICO is Crowdsale {\r\n\r\n    uint periodWhitelist;\r\n    uint startWhitelist;\r\n    uint public bonuses1;\r\n\r\n    mapping (address => bool) whitelist;\r\n\r\n    function addToWhitelist(address _newMember) external onlyOwner {\r\n        require(_newMember != address(0));\r\n        whitelist[_newMember] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _member) external onlyOwner {\r\n        require(_member != address(0));\r\n        whitelist[_member] = false;\r\n    }\r\n\r\n    function addListToWhitelist(address[] _addresses) external onlyOwner {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeListFromWhitelist(address[] _addresses) external onlyOwner {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    constructor(address _AS, address _multisig, uint _priceETH, uint _startWhiteListUNIX, uint _periodWhitelistSEC, uint _indCap) public {\r\n        require(_AS != 0 && _priceETH != 0);\r\n        token = AS(_AS);\r\n        multisig = _multisig; // адрес для получения эфиров\r\n        bonuses1 = 50; // бонусный процент на этапе пресейла\r\n        startWhitelist = _startWhiteListUNIX; // время начала пресейла UNIX\r\n        periodWhitelist = _periodWhitelistSEC; // срок пресейла в секундах\r\n        rateInUsd = 10; // стоимость токена в центах\r\n        setRate(_priceETH);\r\n        setIndCap(_indCap);\r\n    }\r\n\r\n    function extendPeriod(uint _days) external onlyOwner {\r\n        periodWhitelist = periodWhitelist.add(_days.mul(1 days));\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(block.timestamp > startWhitelist && block.timestamp < startWhitelist.add(periodWhitelist));\r\n\r\n\r\n        if (indCap > 0) {\r\n            require(msg.value <= indCap.mul(1 ether));\r\n        }\r\n\r\n        require(whitelist[msg.sender]);\r\n        uint256 totalAmount = msg.value.mul(1 ether).mul(10^8).div(rate).add(msg.value.mul(1 ether).mul(10**8).mul(bonuses1).div(100).div(rate));\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (totalAmount > balance) {\r\n            uint256 cash = balance.mul(rate).mul(100).div(100 + bonuses1).div(10**8).div(1 ether);\r\n            uint256 cashBack = msg.value.sub(cash);\r\n            multisig.transfer(cash);\r\n            msg.sender.transfer(cashBack);\r\n            token.transfer(msg.sender, balance);\r\n            emit Purchased(msg.sender, balance, \"WhiteList\");\r\n            return;\r\n        }\r\n\r\n        multisig.transfer(msg.value);\r\n        token.transfer(msg.sender, totalAmount);\r\n        emit Purchased(msg.sender, totalAmount, \"WhiteList\");\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract preICO is Crowdsale {\r\n\r\n    uint public bonuses2;\r\n    uint startPreIco;\r\n    uint periodPreIco;\r\n\r\n\r\n\r\n    constructor(address _AS, address _multisig, uint _priceETH, uint _startPreIcoUNIX, uint _periodPreIcoSEC, uint _indCap) public {\r\n        require(_AS != 0 && _priceETH != 0);\r\n        token = AS(_AS);\r\n        multisig = _multisig; // адрес для получения эфиров\r\n        bonuses2 = 20; // бонусный процент на этапе preICO\r\n        startPreIco = _startPreIcoUNIX; // время начала preICO UNIX\r\n        periodPreIco = _periodPreIcoSEC; // срок preICO в секундах\r\n        rateInUsd = 10; // стоимость токена в центах\r\n        setRate(_priceETH);\r\n        setIndCap(_indCap);\r\n    }\r\n\r\n    function extendPeriod(uint _days) external onlyOwner {\r\n        periodPreIco = periodPreIco.add(_days.mul(1 days));\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(block.timestamp > startPreIco && block.timestamp < startPreIco.add(periodPreIco));\r\n\r\n\r\n        if (indCap > 0) {\r\n            require(msg.value <= indCap.mul(1 ether));\r\n        }\r\n\r\n        uint256 totalAmount = msg.value.mul(10**8).div(rate).add(msg.value.mul(10**8).mul(bonuses2).div(100).div(rate));\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (totalAmount > balance) {\r\n            uint256 cash = balance.mul(rate).mul(100).div(100 + bonuses2).div(10**8);\r\n            uint256 cashBack = msg.value.sub(cash);\r\n            multisig.transfer(cash);\r\n            msg.sender.transfer(cashBack);\r\n            token.transfer(msg.sender, balance);\r\n            emit Purchased(msg.sender, balance, \"PreICO\");\r\n            return;\r\n        }\r\n\r\n        multisig.transfer(msg.value);\r\n        token.transfer(msg.sender, totalAmount);\r\n        emit Purchased(msg.sender, totalAmount, \"PreICO\");\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract mainICO is Crowdsale {\r\n\r\n    uint startIco;\r\n    uint periodIco;\r\n\r\n\r\n\r\n    constructor(address _AS, address _multisig, uint _priceETH, uint _startIcoUNIX, uint _periodIcoSEC, uint _indCap) public {\r\n        require(_AS != 0 && _priceETH != 0);\r\n        token = AS(_AS);\r\n        multisig = _multisig; // адрес для получения эфиров\r\n        startIco = _startIcoUNIX; // время начала ICO UNIX\r\n        periodIco = _periodIcoSEC; // срок ICO в секундах\r\n        rateInUsd = 10; // стоимость токена в центах\r\n        setRate(_priceETH);\r\n        setIndCap(_indCap);\r\n    }\r\n\r\n    function extendPeriod(uint _days) external onlyOwner {\r\n        periodIco = periodIco.add(_days.mul(1 days));\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(block.timestamp > startIco && block.timestamp < startIco.add(periodIco));\r\n\r\n        if (indCap > 0) {\r\n            require(msg.value <= indCap.mul(1 ether));\r\n        }\r\n\r\n        uint256 amount = msg.value.mul(10**8).div(rate);\r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (amount > balance) {\r\n            uint256 cash = balance.mul(rate).div(10**8);\r\n            uint256 cashBack = msg.value.sub(cash);\r\n            multisig.transfer(cash);\r\n            msg.sender.transfer(cashBack);\r\n            token.transfer(msg.sender, balance);\r\n            emit Purchased(msg.sender, balance, \"MainICO\");\r\n            return;\r\n        }\r\n\r\n        multisig.transfer(msg.value);\r\n        token.transfer(msg.sender, amount);\r\n        emit Purchased(msg.sender, amount, \"MainICO\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPriceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"extendPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndCapInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_indCapETH\",\"type\":\"uint256\"}],\"name\":\"setIndCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addListToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonuses1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeListFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"finalizeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalanceAS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_AS\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_priceETH\",\"type\":\"uint256\"},{\"name\":\"_startWhiteListUNIX\",\"type\":\"uint256\"},{\"name\":\"_periodWhitelistSEC\",\"type\":\"uint256\"},{\"name\":\"_indCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"whitelistICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e719fd211b6c809496f2d6a92b8c94819b148b59000000000000000000000000d33c253d4e0979ed585bfff0159bc55370c3acc4000000000000000000000000000000000000000000000000000000000000509b000000000000000000000000000000000000000000000000000000005bc4ecf80000000000000000000000000000000000000000000000000000000000b389080000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a3ec8994c22d944f5af937938dd32b7898f4a8a3f80ed4d05fb166de77c12169"}]}