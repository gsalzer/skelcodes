{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC721Interface {\r\n    //ERC721\r\n    function balanceOf(address owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 tokenID) public view returns (address owner);\r\n    function transfer(address to, uint256 tokenID) public returns (bool);\r\n    function approve(address to, uint256 tokenID) public returns (bool);\r\n    function takeOwnership(uint256 tokenID) public;\r\n    function totalSupply() public view returns (uint);\r\n    function owns(address owner, uint256 tokenID) public view returns (bool);\r\n    function allowance(address claimant, uint256 tokenID) public view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenID) public returns (bool);\r\n    function createLand(address owner) external returns (uint);\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    mapping(address => bool) admins;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AddAdmin(address indexed admin);\r\n    event DelAdmin(address indexed admin);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function addAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0));\r\n        admins[_adminAddress] = true;\r\n        emit AddAdmin(_adminAddress);\r\n    }\r\n\r\n    function delAdmin(address _adminAddress) external onlyOwner {\r\n        require(admins[_adminAddress]);\r\n        admins[_adminAddress] = false;\r\n        emit DelAdmin(_adminAddress);\r\n    }\r\n\r\n    function isAdmin(address _adminAddress) public view returns (bool) {\r\n        return admins[_adminAddress];\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface NewAuctionContract {\r\n    function receiveAuction(address _token, uint _tokenId, uint _startPrice, uint _stopTime) external returns (bool);\r\n}\r\n\r\n\r\ncontract ArconaMarketplaceContract is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    ERC20 public arconaToken;\r\n\r\n    struct Auction {\r\n        address owner;\r\n        address token;\r\n        uint tokenId;\r\n        uint startPrice;\r\n        uint stopTime;\r\n        address winner;\r\n        uint executeTime;\r\n        uint finalPrice;\r\n        bool executed;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => bool) public acceptedTokens;\r\n    mapping(address => bool) public whiteList;\r\n    mapping (address => bool) public users;\r\n    mapping(uint256 => Auction) public auctions;\r\n    //token => token_id = auction id\r\n    mapping (address => mapping (uint => uint)) public auctionIndex;\r\n    mapping(address => uint256[]) private ownedAuctions;\r\n    uint private lastAuctionId;\r\n    uint defaultExecuteTime = 24 hours;\r\n    uint public auctionFee = 300; //3%\r\n    uint public gasInTokens = 1000000000000000000;\r\n    uint public minDuration = 1;\r\n    uint public maxDuration = 20160;\r\n    address public profitAddress;\r\n\r\n    event ReceiveCreateAuction(address from, uint tokenId, address token);\r\n    event AddAcceptedToken(address indexed token);\r\n    event DelAcceptedToken(address indexed token);\r\n    event AddWhiteList(address indexed addr);\r\n    event DelWhiteList(address indexed addr);\r\n    event NewAuction(address indexed owner, uint tokenId, uint auctionId);\r\n    event AddUser(address indexed user);\r\n    event GetToken(uint auctionId, address winner);\r\n    event SetWinner(address winner, uint auctionId, uint finalPrice, uint executeTime);\r\n    event CancelAuction(uint auctionId);\r\n    event RestartAuction(uint auctionId);\r\n\r\n    constructor(address _token, address _profitAddress) public {\r\n        arconaToken = ERC20(_token);\r\n        profitAddress = _profitAddress;\r\n    }\r\n\r\n\r\n    function() public payable {\r\n        if (!users[msg.sender]) {\r\n            users[msg.sender] = true;\r\n            emit AddUser(msg.sender);\r\n        }\r\n    }\r\n\r\n\r\n    function receiveCreateAuction(address _from, address _token, uint _tokenId, uint _startPrice, uint _duration) public returns (bool) {\r\n        require(isAcceptedToken(_token));\r\n        require(_duration >= minDuration && _duration <= maxDuration);\r\n        _createAuction(_from, _token, _tokenId, _startPrice, _duration);\r\n        emit ReceiveCreateAuction(_from, _tokenId, _token);\r\n        return true;\r\n    }\r\n\r\n\r\n    function createAuction(address _token, uint _tokenId, uint _startPrice, uint _duration) external returns (bool) {\r\n        require(isAcceptedToken(_token));\r\n        require(_duration >= minDuration && _duration <= maxDuration);\r\n        _createAuction(msg.sender, _token, _tokenId, _startPrice, _duration);\r\n        return true;\r\n    }\r\n\r\n\r\n    function _createAuction(address _from, address _token, uint _tokenId, uint _startPrice, uint _duration) internal returns (uint) {\r\n        require(ERC721Interface(_token).transferFrom(_from, this, _tokenId));\r\n\r\n        auctions[++lastAuctionId] = Auction({\r\n            owner : _from,\r\n            token : _token,\r\n            tokenId : _tokenId,\r\n            startPrice : _startPrice,\r\n            //startTime : now,\r\n            stopTime : now + (_duration * 1 minutes),\r\n            winner : address(0),\r\n            executeTime : now + (_duration * 1 minutes) + defaultExecuteTime,\r\n            finalPrice : 0,\r\n            executed : false,\r\n            exists: true\r\n            });\r\n\r\n        auctionIndex[_token][_tokenId] = lastAuctionId;\r\n        ownedAuctions[_from].push(lastAuctionId);\r\n\r\n        emit NewAuction(_from, _tokenId, lastAuctionId);\r\n        return lastAuctionId;\r\n    }\r\n\r\n\r\n    function setWinner(address _winner, uint _auctionId, uint _finalPrice, uint _executeTime) onlyAdmin external {\r\n        require(auctions[_auctionId].exists);\r\n        require(!auctions[_auctionId].executed);\r\n        require(now > auctions[_auctionId].stopTime);\r\n        //require(auctions[_auctionId].winner == address(0));\r\n        require(_finalPrice >= auctions[_auctionId].startPrice);\r\n        auctions[_auctionId].winner = _winner;\r\n        auctions[_auctionId].finalPrice = _finalPrice;\r\n        if (_executeTime > 0) {\r\n            auctions[_auctionId].executeTime = now + (_executeTime * 1 minutes);\r\n        }\r\n        emit SetWinner(_winner, _auctionId, _finalPrice, _executeTime);\r\n    }\r\n\r\n\r\n    function getToken(uint _auctionId) external {\r\n        require(auctions[_auctionId].exists);\r\n        require(!auctions[_auctionId].executed);\r\n        require(now <= auctions[_auctionId].executeTime);\r\n        require(msg.sender == auctions[_auctionId].winner);\r\n\r\n        uint fullPrice = auctions[_auctionId].finalPrice;\r\n        require(arconaToken.transferFrom(msg.sender, this, fullPrice));\r\n\r\n        if (!inWhiteList(msg.sender)) {\r\n            uint fee = valueFromPercent(fullPrice, auctionFee);\r\n            fullPrice = fullPrice.sub(fee).sub(gasInTokens);\r\n        }\r\n        arconaToken.transfer(auctions[_auctionId].owner, fullPrice);\r\n\r\n        require(ERC721Interface(auctions[_auctionId].token).transfer(auctions[_auctionId].winner, auctions[_auctionId].tokenId));\r\n        auctions[_auctionId].executed = true;\r\n        emit GetToken(_auctionId, msg.sender);\r\n    }\r\n\r\n\r\n    function cancelAuction(uint _auctionId) external {\r\n        require(auctions[_auctionId].exists);\r\n        require(!auctions[_auctionId].executed);\r\n        require(msg.sender == auctions[_auctionId].owner);\r\n        require(now > auctions[_auctionId].executeTime);\r\n\r\n        require(ERC721Interface(auctions[_auctionId].token).transfer(auctions[_auctionId].owner, auctions[_auctionId].tokenId));\r\n        emit CancelAuction(_auctionId);\r\n    }\r\n\r\n    function restartAuction(uint _auctionId, uint _startPrice, uint _duration) external {\r\n        require(auctions[_auctionId].exists);\r\n        require(!auctions[_auctionId].executed);\r\n        require(msg.sender == auctions[_auctionId].owner);\r\n        require(now > auctions[_auctionId].executeTime);\r\n\r\n        auctions[_auctionId].startPrice = _startPrice;\r\n        auctions[_auctionId].stopTime = now + (_duration * 1 minutes);\r\n        auctions[_auctionId].executeTime = now + (_duration * 1 minutes) + defaultExecuteTime;\r\n        emit RestartAuction(_auctionId);\r\n    }\r\n\r\n    function migrateAuction(uint _auctionId, address _newAuction) external {\r\n        require(auctions[_auctionId].exists);\r\n        require(!auctions[_auctionId].executed);\r\n        require(msg.sender == auctions[_auctionId].owner);\r\n        require(now > auctions[_auctionId].executeTime);\r\n\r\n        require(ERC721Interface(auctions[_auctionId].token).approve(_newAuction, auctions[_auctionId].tokenId));\r\n        require(NewAuctionContract(_newAuction).receiveAuction(\r\n                auctions[_auctionId].token,\r\n                auctions[_auctionId].tokenId,\r\n                auctions[_auctionId].startPrice,\r\n                auctions[_auctionId].stopTime\r\n            ));\r\n    }\r\n\r\n\r\n    function ownerAuctionCount(address _owner) external view returns (uint256) {\r\n        return ownedAuctions[_owner].length;\r\n    }\r\n\r\n\r\n    function auctionsOf(address _owner) external view returns (uint256[]) {\r\n        return ownedAuctions[_owner];\r\n    }\r\n\r\n\r\n    function addAcceptedToken(address _token) onlyAdmin external {\r\n        require(_token != address(0));\r\n        acceptedTokens[_token] = true;\r\n        emit AddAcceptedToken(_token);\r\n    }\r\n\r\n\r\n    function delAcceptedToken(address _token) onlyAdmin external {\r\n        require(acceptedTokens[_token]);\r\n        acceptedTokens[_token] = false;\r\n        emit DelAcceptedToken(_token);\r\n    }\r\n\r\n\r\n    function addWhiteList(address _address) onlyAdmin external {\r\n        require(_address != address(0));\r\n        whiteList[_address] = true;\r\n        emit AddWhiteList(_address);\r\n    }\r\n\r\n\r\n    function delWhiteList(address _address) onlyAdmin external {\r\n        require(whiteList[_address]);\r\n        whiteList[_address] = false;\r\n        emit DelWhiteList(_address);\r\n    }\r\n\r\n\r\n    function setDefaultExecuteTime(uint _hours) onlyAdmin external {\r\n        defaultExecuteTime = _hours * 1 hours;\r\n    }\r\n\r\n\r\n    function setAuctionFee(uint _fee) onlyAdmin external {\r\n        auctionFee = _fee;\r\n    }\r\n\r\n\r\n    function setGasInTokens(uint _gasInTokens) onlyAdmin external {\r\n        gasInTokens = _gasInTokens;\r\n    }\r\n\r\n\r\n    function setMinDuration(uint _minDuration) onlyAdmin external {\r\n        minDuration = _minDuration;\r\n    }\r\n\r\n\r\n    function setMaxDuration(uint _maxDuration) onlyAdmin external {\r\n        maxDuration = _maxDuration;\r\n    }\r\n\r\n\r\n    function setProfitAddress(address _profitAddress) onlyOwner external {\r\n        require(_profitAddress != address(0));\r\n        profitAddress = _profitAddress;\r\n    }\r\n\r\n\r\n    function isAcceptedToken(address _token) public view returns (bool) {\r\n        return acceptedTokens[_token];\r\n    }\r\n\r\n\r\n    function inWhiteList(address _address) public view returns (bool) {\r\n        return whiteList[_address];\r\n    }\r\n\r\n\r\n    function withdrawTokens() onlyAdmin public {\r\n        require(arconaToken.balanceOf(this) > 0);\r\n        arconaToken.transfer(profitAddress, arconaToken.balanceOf(this));\r\n    }\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n\r\n    function destruct() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"receiveCreateAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minDuration\",\"type\":\"uint256\"}],\"name\":\"setMinDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerAuctionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"},{\"name\":\"_executeTime\",\"type\":\"uint256\"}],\"name\":\"setWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arconaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAcceptedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"setDefaultExecuteTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"stopTime\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"executeTime\",\"type\":\"uint256\"},{\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasInTokens\",\"type\":\"uint256\"}],\"name\":\"setGasInTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"delAcceptedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitAddress\",\"type\":\"address\"}],\"name\":\"setProfitAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"migrateAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"auctionsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"restartAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAuctionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_profitAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ReceiveCreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DelAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DelWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"executeTime\",\"type\":\"uint256\"}],\"name\":\"SetWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"RestartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DelAdmin\",\"type\":\"event\"}]","ContractName":"ArconaMarketplaceContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f71b8de197a1c84d31de0f1fa7926c365f052b3000000000000000000000000603542187b3b06b9de01c9961b017c117d8ebad6","Library":"","SwarmSource":"bzzr://18fd614ebc358a7dd8bb73511c7304e9a3214760960aea6a9e8ef7405c29c0ae"}]}