{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract BO3Kevents {\r\n\tevent onBuying ( \r\n\t\taddress indexed _addr, \r\n\t\tuint256 ethAmount, \r\n\t\tuint256 flagAmount,\r\n\t\tuint256 playerFlags,\r\n\t\tuint256 ethOfRound,\r\n\t\tuint256 keysOfRound,\r\n\t\tuint256 potOfRound\r\n\t);\r\n\r\n\tevent onTimeAdding(\r\n\t\tuint256 startTime,\r\n\t\tuint256 endTime,\r\n\t\tuint256 newTimeInterval,\r\n\t\tuint256 currentInterval\r\n\t);\r\n\r\n\tevent onDiscount(\r\n\t\taddress indexed _addr,\r\n\t\tuint256 randomValue,\r\n\t\tuint256 discountValue,\r\n\t\tbool getDiscount\r\n\t);\r\n\r\n\tevent onRoundEnding(\r\n\t\taddress indexed winnerAddr,\r\n\t\tuint teamID,\r\n\t\tuint256 winValue,\r\n\t\tuint256 soldierValue,\r\n\t\tuint256 teamValue,\r\n\t\tuint256 nextRoundStartTime,\r\n\t\tuint256 nextRoundEndTime,\r\n\t\tuint256 nextRoundPot\r\n\t);\r\n\r\n\tevent onWithdraw(\r\n\t\taddress indexed withdrawAddr,\r\n\t\tuint256 discountRevenue,\r\n\t\tuint256 refferedRevenue,\r\n\t\tuint256 winRevenue,\r\n\t\tuint256 flagRevenue\r\n\t);\r\n\t\r\n}\r\n\r\ncontract modularLong is BO3Kevents {}\r\n\r\ncontract BO3KMain is modularLong {\r\n\r\n\tusing SafeMath for *;\r\n\tusing BO3KCalcLong for uint256;\r\n\r\n\taddress constant public Admin = 0x3ac98F5Ea4946f58439d551E20Ed12091AF0F597;\r\n\tuint256 constant public LEADER_FEE = 0.03 ether;\r\n\r\n\tuint256 private adminFee = 0;\r\n\tuint256 private adminRevenue = 0;\r\n\tuint256 private winTeamValue = 0;\r\n\r\n\tuint private winTeamID = 0;\r\n\r\n\tstring constant public name = \"Blockchain of 3 Kindoms\";\r\n    string constant public symbol = \"BO3K\";\r\n\r\n\tuint256 constant private DISCOUNT_PROB = 200;\r\n\r\n\tuint256 constant private DISCOUNT_VALUE_5PER_OFF = 50;\r\n\tuint256 constant private DISCOUNT_VALUE_10PER_OFF = 100;\r\n\tuint256 constant private DISCOUNT_VALUE_15PER_OFF = 150;\r\n\r\n\tuint256 constant private DENOMINATOR = 1000;\r\n\r\n\tuint256 constant private _nextRoundSettingTime = 0 minutes;                \r\n    uint256 constant private _flagBuyingInterval = 30 seconds;              \r\n    uint256 constant private _maxDuration = 24 hours;\r\n\r\n    uint256 constant private _officerCommission = 150;\r\n\r\n    bool _activated = false;\r\n    bool CoolingMutex = false;\r\n\r\n    uint256 public roundID;\r\n    uint public _teamID;\r\n\r\n   \tBO3Kdatasets.PotSplit potSplit;\r\n   \tBO3Kdatasets.FlagInfo Flag;\r\n\r\n    mapping (uint256 => BO3Kdatasets.Team) team;\r\n    mapping (uint256 => mapping (uint256 => BO3Kdatasets.TeamData) ) teamData;\r\n\r\n    mapping (uint256 => BO3Kdatasets.Round) round;\r\n\r\n    mapping (uint256 => mapping (address => BO3Kdatasets.Player) ) player;\r\n    mapping (address => uint256) playerFlags;\r\n    \r\n\r\n\tconstructor () public {\r\n\r\n\t\tteam[1] = BO3Kdatasets.Team(0, 500, 250, 150, 50, 50, 0, 0 );\r\n\t\tteam[2] = BO3Kdatasets.Team(1, 250, 500, 150, 50, 50, 0, 0 );\r\n\t\tteam[3] = BO3Kdatasets.Team(2, 375, 375, 150, 50, 50, 0, 0 );\r\n\r\n\r\n\t\tpotSplit = BO3Kdatasets.PotSplit(450, 450, 50, 50);\r\n\r\n\t\t// to-do: formation of flag and time update\r\n\t\tFlag = BO3Kdatasets.FlagInfo( 10000000000000000, now );\r\n\t}\r\n\r\n\r\n\tmodifier isActivated() { \r\n\t\trequire ( _activated == true, \"Did not activated\" );\r\n\t\t_; \r\n\t}\r\n\r\n\r\n\tmodifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        // size of the code at address _addre\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"Addresses not owned by human are forbidden\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 100000000000, \"ground limit\");\r\n        require(_eth <= 100000000000000000000000, \"floor limit\");\r\n        _;    \r\n    }\r\n\r\n    modifier isPlayerRegistered(uint256 _roundID, address _addr) {\r\n    \trequire (player[_roundID][_addr].hasRegistered, \"The Player Has Not Registered!\");\r\n    \t_;\r\n    }\r\n\t\r\n\r\n\tfunction buyFlag( uint _tID, address refferedAddr ) isActivated() isHuman() isWithinLimits(msg.value) public payable {\r\n\r\n\t\trequire( \r\n\t\t\t_tID == 1 ||\r\n\t\t\t_tID == 2 ||\r\n\t\t\t_tID == 3 ,\r\n\t\t\t\"Invalid Team ID!\"\r\n\t\t);\r\n\t\t\r\n\t\t// core( msg.sender, msg.value, _teamID );\r\n\t\tuint256 _now = now;\r\n\t\t\r\n\t\t_teamID = _tID;\r\n\r\n\t\t// if it's around the legal time\r\n\t\tif( isLegalTime( _now ) ) {\r\n\r\n\t\t\t// main logic of buying\r\n\t\t\tuint256 flagAmount = buyCore( refferedAddr );\r\n\r\n\t\t\t// 30 sec interval\r\n\t\t\tupdateTimer( flagAmount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif( !isLegalTime( _now ) && round[roundID].ended == false ) {\r\n\t\t\t\tround[roundID].ended = true;\r\n\t\t\t\tendRound();\r\n\t\t\t} else {\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\r\n\t\t\t// to-do:rcountdown for 1 hour to cool down\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tfunction buyCore( address refferedAddr) isActivated() isWithinLimits( msg.value ) private returns( uint256 ) {\r\n\t\t\r\n\t\t// flag formula\r\n\t\tif( player[roundID][refferedAddr].isGeneral == false ) {\r\n\t\t\trefferedAddr = address(0);\r\n\t\t}\r\n\r\n\t\taddress _addr = msg.sender;\r\n\t\tuint256 _value = msg.value;\r\n\r\n\t\tuint256 flagAmount = (round[roundID].totalEth).keysRec( _value );\r\n\t\trequire ( flagAmount >= 10 ** 18, \"At least 1 whole flag\" );\r\n\r\n\t\t// discount info\r\n\t\tbool getDiscount = false;\r\n\r\n\t\t// update data of the round, contains total eth, total flags, and pot value\r\n\t\tround[roundID].totalEth = ( round[roundID].totalEth ).add( _value );\r\n\t\tround[roundID].totalFlags = ( round[roundID].totalFlags ).add( flagAmount );\r\n\r\n\t\t// distribute value to the pot of the round. 50%, 25%, 37.5%, respectively\r\n\t\tround[roundID].pot = ( round[roundID].pot ).add( ( _value.mul( team[_teamID].city ) ).div( DENOMINATOR ) );\r\n\r\n\t\t// update data of the team, contains total eth, total flags\r\n\t\tteam[_teamID].totalEth = ( team[_teamID].totalEth ).add( _value );\r\n\t\tteam[_teamID].totalFlags = ( team[_teamID].totalFlags ).add( flagAmount );\r\n\r\n\t\tteamData[roundID][_teamID].totalEth = ( teamData[roundID][_teamID].totalEth ).add( _value );\r\n\t\tteamData[roundID][_teamID].totalFlags = ( teamData[roundID][_teamID].totalFlags ).add( flagAmount );\r\n\r\n\t\t// if the user has participated in before, just add the total flag to the player\r\n\t\tif( player[roundID][_addr].hasRegistered ) {\r\n\t\t\tplayer[roundID][_addr].flags += flagAmount;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// user data\r\n\t\t\tplayer[roundID][_addr] = BO3Kdatasets.Player({\r\n\t\t\t\taddr: _addr,\r\n\t\t\t\tflags: flagAmount,\r\n\t\t\t\twin: 0,\r\n\t\t\t\trefferedRevenue: 0,\r\n\t\t\t\tdiscountRevenue: 0,\r\n\t\t\t\tteamID: _teamID,\r\n\t\t\t\tgeneralID: 0,\r\n\t\t\t\tpayMask: 0,\r\n\t\t\t\thasRegistered: true,\r\n\t\t\t\tisGeneral: false,\r\n\t\t\t\tisWithdrawed: false\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// player's flags\r\n\t\tplayerFlags[_addr] += flagAmount;\r\n\r\n\t\t// winner ID of the round\r\n\t\tround[roundID].playerID = _addr;\r\n\r\n\t\t// random discount\r\n\t\tuint256 randomValue = random();\r\n\t\tuint256 discountValue = 0;\r\n\r\n\t\t// discount judgement\r\n\t\tif( randomValue < team[_teamID].grain ) {\r\n\r\n\t\t\tif( _value >= 10 ** 17 && _value < 10 ** 18 ) {\r\n\t\t\t\tdiscountValue = (_value.mul( DISCOUNT_VALUE_5PER_OFF )).div( DENOMINATOR );\r\n\t\t\t} else if( _value >= 10 ** 18 && _value < 10 ** 19 ) {\r\n\t\t\t\tdiscountValue = (_value.mul( DISCOUNT_VALUE_10PER_OFF )).div( DENOMINATOR );\r\n\t\t\t} else if( _value >= 10 ** 19 ) {\r\n\t\t\t\tdiscountValue = (_value.mul( DISCOUNT_VALUE_15PER_OFF )).div( DENOMINATOR );\r\n\t\t\t} \r\n\t\t\t// _addr.transfer( discountValue );\r\n\r\n\t\t\t// add to win bonus if getting discount \r\n\t\t\tplayer[roundID][_addr].discountRevenue = (player[roundID][_addr].discountRevenue).add( discountValue );\r\n\t\t\tgetDiscount = true;\r\n\t\t}\r\n\r\n\t\t// distribute the eth values\r\n\t\t// the distribution ratio differs from reffered address\r\n\t\tuint256 soldierEarn;\r\n\r\n\t\t// flag distribution\r\n\t\tif( refferedAddr != address(0) && refferedAddr != _addr ) {\r\n\t\t\t\r\n\t\t\t// 25%, 50%, 37.5% for soldier, respectively\r\n            soldierEarn = (((_value.mul( team[_teamID].soldier ) / DENOMINATOR).mul(1000000000000000000)) / (round[roundID].totalFlags)).mul(flagAmount)/ (1000000000000000000);\r\n\r\n\t\t\t// 5% for admin\r\n\t\t\tadminFee += ( _value.mul( team[_teamID].teamWelfare ) ).div( DENOMINATOR );\r\n\r\n\t\t\t// 15% for officer\r\n\t\t\tplayer[roundID][refferedAddr].refferedRevenue += ( _value.mul( team[_teamID].officer ) ).div( DENOMINATOR );\r\n\t\t\r\n\t\t\t// paymask\r\n\t\t\tround[roundID].payMask += ( (_value.mul( team[_teamID].soldier ) / DENOMINATOR).mul(1000000000000000000)) / (round[roundID].totalFlags);\r\n            player[roundID][_addr].payMask = ((( (round[roundID].payMask).mul( flagAmount )) / (1000000000000000000)).sub(soldierEarn)).add(player[roundID][_addr].payMask);\r\n\r\n\t\t} else {\r\n             // 40%, 65%, 52.5% for soldier, respectively\r\n            soldierEarn = (((_value.mul( team[_teamID].soldier + team[_teamID].officer ) / DENOMINATOR).mul(1000000000000000000)) / (round[roundID].totalFlags)).mul(flagAmount)/ (1000000000000000000);\r\n\r\n\t\t\t// 5% for admin\r\n\t\t\tadminFee += ( _value.mul( team[_teamID].teamWelfare ) ).div( DENOMINATOR );\r\n\r\n\t\t\t// paymask\r\n\t\t\tround[roundID].payMask += ( (_value.mul( team[_teamID].soldier + team[_teamID].officer ) / DENOMINATOR).mul(1000000000000000000)) / (round[roundID].totalFlags);\r\n            player[roundID][_addr].payMask = ((( (round[roundID].payMask).mul( flagAmount )) / (1000000000000000000)).sub(soldierEarn)).add(player[roundID][_addr].payMask);\r\n            \r\n\t\t}\r\n\r\n\t\temit BO3Kevents.onDiscount( \r\n\t\t\t_addr,\r\n\t\t\trandomValue,\r\n\t\t\tdiscountValue,\r\n\t\t\tgetDiscount\r\n\t\t);\r\n\r\n\t\temit BO3Kevents.onBuying( \r\n\t\t\t_addr, \r\n\t\t\t_value,\r\n\t\t\tflagAmount,\r\n\t\t\tplayerFlags[_addr],\r\n\t\t\tround[roundID].totalEth,\r\n\t\t\tround[roundID].totalFlags,\r\n\t\t\tround[roundID].pot\r\n\t\t);\r\n\r\n\t\treturn flagAmount;\r\n\t}\r\n\r\n\r\n\tfunction updateTimer( uint256 flagAmount ) private {\r\n\t\tuint256 _now = now;\r\n\t\t// uint256 newTimeInterval = ( round[roundID].end ).add( _flagBuyingInterval ).sub( _now );\r\n\t\tuint256 newTimeInterval = ( round[roundID].end ).add( flagAmount.div(1000000000000000000).mul(10) ).sub( _now );\r\n\r\n\t\tif( newTimeInterval > _maxDuration ) {\r\n\t\t\tnewTimeInterval = _maxDuration;\r\n\t\t}\r\n\r\n\t\tround[roundID].end = ( _now ).add( newTimeInterval );\r\n\t\tround[roundID].updatedTimeRounds = (round[roundID].updatedTimeRounds).add(flagAmount.div(1000000000000000000));\r\n\r\n\t\temit BO3Kevents.onTimeAdding(\r\n\t\t\tround[roundID].start,\r\n\t\t\tround[roundID].end,\r\n\t\t\tnewTimeInterval,\r\n\t\t\t( round[roundID].end ).sub( _now )\r\n\t\t);\r\n\t}\r\n\r\n\tfunction endRound() isActivated() private {\r\n\t\t// end round: get winner ID, team ID, pot, and values, respectively\r\n\t\trequire ( !isLegalTime(now), \"The round has not finished\" );\r\n\t\t\r\n\t\t\r\n\t\taddress winnerPlayerID = round[roundID].playerID;\r\n\t\tuint winnerTeamID = player[roundID][winnerPlayerID].teamID;\r\n\t\tuint256 potValue = round[roundID].pot;\r\n\r\n\t\tuint256 winValue = ( potValue.mul( potSplit._winRatio ) ).div( DENOMINATOR );\r\n\t\tuint256 soldierValue = ( potValue.mul( potSplit._soldiersRatio ) ).div( DENOMINATOR );\r\n\t\tuint256 nextRoundValue = ( potValue.mul( potSplit._nextRatio ) ).div( DENOMINATOR );\r\n\t\tuint256 adminValue = ( potValue.mul( potSplit._adminRatio ) ).div( DENOMINATOR );\r\n\r\n\t\tuint256 teamValue = team[winnerTeamID].totalEth;\r\n\r\n\t\tif( winnerPlayerID == address(0x0) ) {\r\n\t\t\tAdmin.transfer( potValue );\r\n\t\t\tnextRoundValue -= nextRoundValue;\r\n\t\t\tadminValue -= adminValue;\r\n\r\n\t\t} else {\r\n\t\t\tplayer[roundID][winnerPlayerID].win = ( player[roundID][winnerPlayerID].win ).add( winValue );\r\n\t\t\twinTeamID = winnerTeamID;\r\n\t\t}\r\n\r\n\t\t// Admin.transfer( adminValue + adminFee );\r\n\t\tadminRevenue = adminRevenue.add( adminValue ).add( adminFee );\r\n\t\tadminFee -= adminFee;\r\n\r\n\t\tround[roundID].ended = true;\r\n\t\troundID++;\r\n\r\n\t\tround[roundID].start = now.add( _nextRoundSettingTime );\r\n\t\tround[roundID].end = (round[roundID].start).add( _maxDuration );\r\n\t\tround[roundID].pot = nextRoundValue;\r\n\r\n\t\temit BO3Kevents.onRoundEnding(\r\n\t\t\twinnerPlayerID,\r\n\t\t\twinnerTeamID,\r\n\t\t\twinValue,\r\n\t\t\tsoldierValue,\r\n\t\t\tteamValue,\r\n\t\t\tround[roundID].start,\r\n\t\t\tround[roundID].end,\r\n\t\t\tround[roundID].pot\r\n\t\t);\r\n\r\n\r\n\t}\r\n\r\n\r\n\tfunction activate() public {\r\n\t\t//activation\r\n\t\trequire (\r\n\t\t\tmsg.sender == 0xABb29fd841c9B919c3B681194c6173f30Ff7055D,\r\n\t\t\t\"msg sender error\"\r\n\t\t\t);\r\n\r\n\t\trequire ( _activated == false, \"Has activated\" );\r\n\t\t\r\n\t\t_activated = true;\r\n\r\n\t\troundID = 1;\r\n\r\n\t\tround[roundID].start = now;\r\n\t\tround[roundID].end = round[roundID].start + _maxDuration;\r\n\r\n\t\tround[roundID].ended = false;\r\n\t\tround[roundID].updatedTimeRounds = 0;\r\n\t}\r\n\r\n\t/*\r\n\t\t*\r\n\t\t* other functions\r\n\t\t*\r\n\t*/\r\n\r\n\t// next flag value\r\n\tfunction getFlagPrice() public view returns( uint256 ) {\r\n\t\t// return ( ((round[roundID].totalFlags).add(1000000000000000000)).ethRec(1000000000000000000) );\r\n\t\tuint256 _now = now;\r\n\t\tif( isLegalTime( _now ) ) {\r\n\t\t\treturn ( ((round[roundID].totalFlags).add( 1000000000000000000 )).ethRec( 1000000000000000000 ) );\r\n\t\t} else {\r\n\t\t\treturn (75000000000000);\r\n\t\t}\r\n\t}\r\n\r\n    function getFlagPriceByFlags (uint256 _roundID, uint256 _flagAmount) public view returns (uint256) {\r\n    \treturn round[_roundID].totalFlags.add(_flagAmount.mul( 10 ** 18 )).ethRec(_flagAmount.mul( 10 ** 18 ));\r\n\t}\r\n\r\n\tfunction getRemainTime() isActivated() public view returns( uint256 ) {\r\n\t\treturn ( (round[roundID].start).sub( now ) );\r\n\t}\r\n\t\r\n\tfunction isLegalTime( uint256 _now ) internal view returns( bool ) {\r\n\t\treturn ( _now >= round[roundID].start && _now <= round[roundID].end );\r\n\t}\r\n\r\n\tfunction isLegalTime() public view returns( bool ) {\r\n\t\tuint256 _now = now;\r\n\t\treturn ( _now >= round[roundID].start && _now <= round[roundID].end );\r\n\t}\r\n\t\r\n\tfunction random() internal view returns( uint256 ) {\r\n        return uint256( uint256( keccak256( block.timestamp, block.difficulty ) ) % DENOMINATOR );\r\n\t}\r\n\r\n\tfunction withdraw( uint256 _roundID ) isActivated() isHuman() public {\r\n\r\n\t\trequire ( player[_roundID][msg.sender].hasRegistered == true, \"Not Registered Before\" );\r\n\r\n\t\tuint256 _discountRevenue = player[_roundID][msg.sender].discountRevenue;\r\n\t\tuint256 _refferedRevenue = player[_roundID][msg.sender].refferedRevenue;\r\n\t\tuint256 _winRevenue = player[_roundID][msg.sender].win;\r\n\t\tuint256 _flagRevenue = getFlagRevenue( _roundID ) ;\r\n\r\n\t\tif( isLegalTime( now ) && !round[_roundID].ended ) {\r\n\t\t\t// to-do: withdraw function\r\n\t\t\tmsg.sender.transfer( _discountRevenue + _refferedRevenue + _winRevenue + _flagRevenue );\r\n\r\n\t\t} else {\r\n\t\t\tmsg.sender.transfer( getTeamBonus(_roundID) + _discountRevenue + _refferedRevenue + _winRevenue + _flagRevenue );\r\n\t\t}\r\n\r\n\t\tplayer[_roundID][msg.sender].discountRevenue = 0;\r\n\t\tplayer[_roundID][msg.sender].refferedRevenue = 0;\r\n\t\tplayer[_roundID][msg.sender].win = 0;\r\n\t\tplayer[_roundID][msg.sender].payMask = _flagRevenue.add(player[_roundID][msg.sender].payMask);\r\n\r\n\t\t// if( round[_roundID].ended ) {\r\n\t\t// \tplayer[_roundID][msg.sender].flags = 0;\r\n\t\t// }\r\n\r\n\t\tplayer[_roundID][msg.sender].isWithdrawed = true;\r\n\r\n\r\n\t\temit BO3Kevents.onWithdraw(\r\n\t\t\tmsg.sender,\r\n\t\t\t_discountRevenue,\r\n\t\t\t_refferedRevenue,\r\n\t\t\t_winRevenue,\r\n\t\t\t_flagRevenue\r\n\t\t);\r\n\t\t\r\n\t}\r\n\r\n\tfunction becomeGeneral( uint _generalID ) public payable {\r\n        require( msg.value >= LEADER_FEE && player[roundID][msg.sender].hasRegistered, \"Not enough money or not player\" );\r\n\r\n        msg.sender.transfer( LEADER_FEE );\r\n\r\n       \tplayer[roundID][msg.sender].isGeneral = true;\r\n       \tplayer[roundID][msg.sender].generalID = _generalID;\r\n    }\r\n\r\n\r\n\t/* \r\n\t\t* Getters for Website \r\n\t*/\r\n\tfunction getIsActive () public view returns (bool)  {\r\n\t\treturn _activated;\r\n\t}\r\n\r\n\tfunction getPot (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn round[_roundID].pot;\r\n\t}\r\n\r\n\tfunction getTime (uint256 _roundID) public view returns (uint256, uint256)  {\r\n\t\tif( isLegalTime( now ) ) {\r\n\t\t\treturn (round[_roundID].start, (round[_roundID].end).sub( now ) );\r\n\t\t} else {\r\n\t\t\treturn (0, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getTeam (uint256 _roundID) public view returns (uint)  {\r\n\t\treturn player[_roundID][msg.sender].teamID;\r\n\t}\r\n\r\n\tfunction getTeamData (uint256 _roundID, uint _tID) public view returns (uint256, uint256)  {\r\n\t\treturn (teamData[_roundID][_tID].totalFlags, teamData[_roundID][_tID].totalEth);\r\n\t}\r\n\r\n\tfunction getTeamBonus (uint256 _roundID) public view returns (uint256) {\r\n\t\t// pot * 0.45 * (playerflag/teamflag)\r\n\t\tuint256 potValue = round[_roundID].pot;\r\n\t\tuint256 _winValue = ( potValue.mul( potSplit._soldiersRatio ) ).div( DENOMINATOR );\r\n\t\tuint _tID = player[_roundID][msg.sender].teamID;\r\n\t\tif( isLegalTime( now ) && (_roundID == roundID)) {\r\n\t\t\t// return ((player[_roundID][msg.sender].flags).mul(_winValue)).div( team[_tID].totalFlags );\r\n\t\t\treturn ((player[_roundID][msg.sender].flags).mul(_winValue)).div( teamData[_roundID][_tID].totalFlags );\r\n\t\t} else {\r\n\t\t\tif( _tID != winTeamID ) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else if (player[_roundID][msg.sender].isWithdrawed) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else {\r\n\t\t\t\t// return ((player[_roundID][msg.sender].flags).mul(_winValue)).div( team[_tID].totalFlags );\r\n\t\t\t\treturn ((player[_roundID][msg.sender].flags).mul(_winValue)).div( teamData[_roundID][_tID].totalFlags );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getBonus (uint256 _roundID) public view returns (uint256) {\r\n\t\treturn player[_roundID][msg.sender].discountRevenue + player[_roundID][msg.sender].win;\r\n\t}\r\n\r\n\tfunction getAllRevenue (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn (getTeamBonus(_roundID) + player[_roundID][msg.sender].discountRevenue + player[_roundID][msg.sender].win + getFlagRevenue(_roundID) + player[_roundID][msg.sender].refferedRevenue) ;\r\n\t}\r\n\r\n\tfunction getAllWithdrawableRevenue (uint256 _roundID) public view returns (uint256)  {\r\n\t\tif( isLegalTime(now) && ( _roundID == roundID ) )\r\n\t\t\treturn (player[_roundID][msg.sender].discountRevenue + player[_roundID][msg.sender].win + getFlagRevenue(_roundID) + player[_roundID][msg.sender].refferedRevenue) ;\r\n\t\t\r\n\t\treturn (getTeamBonus(_roundID) + player[_roundID][msg.sender].discountRevenue + player[_roundID][msg.sender].win + getFlagRevenue(_roundID) + player[_roundID][msg.sender].refferedRevenue) ;\r\n\t\t\r\n\t}\r\n\r\n\tfunction getFlagRevenue(uint _round) public view returns(uint256)\r\n    {\r\n        return((((player[_round][msg.sender].flags).mul(round[_round].payMask)) / (1000000000000000000)).sub(player[_round][msg.sender].payMask));\r\n        // return((((round[_round].payMask).mul(player[_round][msg.sender].flags)) / (1000000000000000000)).sub(player[_round][msg.sender].payMask));\r\n    }\r\n\r\n    function getGeneralProfit (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn player[_roundID][msg.sender].refferedRevenue;\r\n\t}\r\n\r\n\tfunction getDistributedETH (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn (round[_roundID].totalEth).sub(round[_roundID].pot).sub(adminFee);\r\n\t}\r\n\r\n\tfunction getGeneral (uint256 _roundID) public view returns (bool, uint)  {\r\n\t\treturn (player[_roundID][msg.sender].isGeneral, player[_roundID][msg.sender].generalID);\r\n\t}\r\n\r\n\tfunction getPlayerFlagAmount (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn player[_roundID][msg.sender].flags;\r\n\t}\r\n\r\n\tfunction getTotalFlagAmount (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn round[_roundID].totalFlags;\r\n\t}\r\n\r\n\tfunction getTotalEth (uint256 _roundID) public view returns (uint256)  {\r\n\t\treturn round[_roundID].totalEth;\r\n\t}\r\n\r\n\tfunction getUpdatedTime (uint256 _roundID) public view returns (uint)  {\r\n\t\treturn round[_roundID].updatedTimeRounds;\r\n\t}\r\n\t\r\n\t\r\n\tfunction getRoundData( uint256 _roundID ) public view returns( address, uint256, uint256, bool ) {\r\n\t\treturn ( round[_roundID].playerID, round[_roundID].pot, round[_roundID].totalEth, round[_roundID].ended );\r\n\t}\r\n\r\n\t/* admin */\r\n\tfunction getAdminRevenue () public view returns (uint)  {\r\n\t\treturn adminRevenue;\r\n\t}\r\n\t\r\n\tfunction withdrawAdminRevenue() public {\r\n\t\trequire (msg.sender == Admin );\r\n\r\n\t\tAdmin.transfer( adminRevenue );\r\n\t\tadminRevenue = 0;\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nlibrary BO3KCalcLong {\r\n    using SafeMath for *;\r\n\r\n    function keysRec(uint256 _curEth, uint256 _newEth) internal pure returns (uint256){\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys) internal pure returns (uint256) {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    function keys(uint256 _eth) internal pure returns(uint256) {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    function eth(uint256 _keys) internal pure returns(uint256) {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The BO3Kdatasets library does this and that...\r\n */\r\nlibrary BO3Kdatasets {\r\n\r\n\r\n\tstruct Team {\r\n\t\tuint teamID;\r\n\t\tuint256 city;\r\n\t\tuint256 soldier;\r\n\t\tuint256 officer;\r\n\t\tuint256 grain;\r\n\t\tuint256 teamWelfare;\r\n\t\tuint256 totalEth;\r\n\t\tuint256 totalFlags;\r\n\t}\r\n\r\n\tstruct TeamData {\r\n\t\tuint256 totalEth;\r\n\t\tuint256 totalFlags;\r\n\t}\r\n\t\r\n\r\n\tstruct PotSplit {\r\n        uint256 _winRatio;\r\n        uint256 _soldiersRatio;\r\n        uint256 _nextRatio;\r\n        uint256 _adminRatio;\r\n    }\r\n\t\r\n\tstruct Round {\r\n        address playerID;   // pID of player in lead\r\n        // uint256 teamID;   // tID of team in lead\r\n        uint256 start;   // time round started\r\n        uint256 end;    // time ends/ended\r\n        uint256 totalFlags;   // keys\r\n        uint256 totalEth;    // total eth in\r\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\r\n        uint256 payMask;\r\n        uint updatedTimeRounds;\r\n        bool ended;     // has round end function been ran\r\n    }\r\n\r\n    struct Player {\r\n        address addr;   // player \r\n        uint256 flags; \t// flags\r\n        uint256 win;    // winnings vault\r\n        uint256 refferedRevenue;\r\n        uint256 discountRevenue;\r\n        uint256 payMask;\r\n        uint teamID;\r\n        bool hasRegistered;\r\n        bool isGeneral;\r\n        uint generalID;\r\n        bool isWithdrawed;\r\n    }\r\n\r\n    struct FlagInfo {\r\n    \tuint256 _flagValue;\r\n    \tuint256 updateTime;\r\n    }\r\n    \r\n\t\r\n  \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)  internal  pure  returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \trequire(b > 0);\r\n\r\n        uint256 c = a / b;\r\n    \trequire(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    \treturn a / b;\r\n\t}\r\n    \r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n\r\n        while (z < y) {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    function sq(uint256 x) internal pure returns (uint256) {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    function pwr(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x==0)\r\n            return (0);\r\n\r\n        else if (y==0)\r\n            return (1);\r\n\r\n        else {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getPlayerFlagAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getTeamData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getGeneral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getDistributedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getAllWithdrawableRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getGeneralProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getFlagRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"_flagAmount\",\"type\":\"uint256\"}],\"name\":\"getFlagPriceByFlags\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getTotalFlagAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLegalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getUpdatedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getAllRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFlagPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"refferedAddr\",\"type\":\"address\"}],\"name\":\"buyFlag\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LEADER_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getTeamBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAdminRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_generalID\",\"type\":\"uint256\"}],\"name\":\"becomeGeneral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_teamID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getTotalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"flagAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerFlags\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethOfRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysOfRound\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potOfRound\",\"type\":\"uint256\"}],\"name\":\"onBuying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTimeInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentInterval\",\"type\":\"uint256\"}],\"name\":\"onTimeAdding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"randomValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discountValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"getDiscount\",\"type\":\"bool\"}],\"name\":\"onDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soldierValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextRoundStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextRoundEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextRoundPot\",\"type\":\"uint256\"}],\"name\":\"onRoundEnding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"discountRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refferedRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"flagRevenue\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"BO3KMain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41d833e84beb927b1b1956e824747281b4f7248e36b9d6c2435fa12f21cc58a1"}]}