{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n * https://ethergarden.host\r\n *\r\n * Welcome to Ether Garden!\r\n * Here you can earn Ethereum, growing four kinds of vegetables. \r\n * You will get random kind of vegetable for growing with the first transaction.\r\n * One acre of garden field gives one vegetable per day. The more acres you have, the more vegetables they give.\r\n * Attention! Market value of each vegetable will be different. Less grown vegetables will be more expensive.\r\n * Also market value depends on contract balance, number of all bought acres and  number of all grown vegetables.\r\n *\r\n * Send from 0 to 0.00001 ether for sell your all grown vegetables or getting FREE acres, if you have no one acre.\r\n * Minimum invest amount for fields buying is 0.001 ETH.\r\n * Use 150000 of Gas limit for your transactions.\r\n *\r\n * Admin commisions: 4% for buying arces + 4% for selling vegetable\r\n * Referrer: 4%\r\n *\r\n */\r\n\r\npragma solidity ^0.4.25; \r\n\r\ncontract EtherGarden{\r\n\r\n\tmapping (uint8 => uint256) public VegetablesTradeBalance;\r\n\tmapping (address => uint8) public FarmerToFieldId;\r\n \tmapping (address => mapping (uint8 => uint256)) public FarmerVegetableStartGrowing;\r\n \tmapping (address => mapping (uint8 => uint256)) public FarmerVegetableFieldSize;\r\n\r\n\tuint256 MaxVegetables = 4;\r\n\tuint256 minimumInvest = 0.001 ether;\r\n\tuint256 growingSpeed = 1 days; \r\n\tbool public initialized=false;\r\n\taddress public admin;\r\n\t\r\n    /**\r\n     * @dev Ð¡onstructor Sets the original roles of the contract \r\n     */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\t\r\n    /**\r\n     * @dev Modifiers\r\n     */\t\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    modifier isInitialized() {\r\n        require(initialized);\r\n        _;\r\n    }\t\r\n\r\n    /**\r\n     * @dev Market functions\r\n     */\t\t\r\n    function() external payable {\r\n\t\t//Set random vegetale for a new farmer\t\r\n\r\n\r\n\t\tif (msg.value >= 0 && msg.value <= 0.00001 ether) {\r\n\t\t\tif (FarmerToFieldId[msg.sender] == 0) {\r\n\t\t\t\trollFieldId();\r\n\t\t\t\tgetFreeField();\r\n\t\t\t} else\r\n\t\t\t\tsellVegetables();\r\n        } \r\n\t\telse if (msg.value == 0.00001111 ether){\r\n\t\t\treInvest();\r\n        } \r\n\t\telse {\r\n\t\t\tif (FarmerToFieldId[msg.sender] == 0)\r\n\t\t\t\trollFieldId();\t\t\r\n            buyField();\r\n        }\t\t\r\n    }\t \r\n\r\n    function sellVegetables() internal isInitialized {\r\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\r\n\t\t\r\n\t\tuint256 value = vegetablesValue(_VegetableId, msg.sender);\r\n        if (value > 0) {\r\n\t\t\tuint256 price = SafeMath.mul(vegetablePrice(_VegetableId),value);\r\n\t\t\tuint256 fee = devFee(price);\r\n\t\t\t\r\n\t\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\r\n\t\t\t\r\n\t\t\t//Update market values\r\n\t\t\tVegetablesTradeBalance[_VegetableId] = SafeMath.add(VegetablesTradeBalance[_VegetableId],value);\r\n\t\t\t\r\n\t\t\tadmin.transfer(fee);\r\n\t\t\tmsg.sender.transfer(SafeMath.sub(price,fee));\r\n\t\t}\r\n    }\t \r\n\t\r\n    function buyField() internal isInitialized {\r\n\t\trequire(msg.value > minimumInvest, \"Too low ETH value\");\r\n\t\t\r\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\r\n\t\t\r\n\t\t//Calculate acres number for buying\r\n\t\tuint256 acres = SafeMath.div(msg.value,fieldPrice(msg.value));\r\n        \r\n\t\tif (FarmerVegetableStartGrowing[msg.sender][_VegetableId] > 0)\r\n\t\t\tsellVegetables();\r\n\t\t\r\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\r\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = SafeMath.add(FarmerVegetableFieldSize[msg.sender][_VegetableId],acres);\r\n\t\t\r\n\t\t////Update market values\r\n\t\tVegetablesTradeBalance[_VegetableId] = SafeMath.add(VegetablesTradeBalance[_VegetableId], SafeMath.div(acres,5));\r\n\t\t\r\n        uint256 fee = devFee(msg.value);\r\n\t\tadmin.send(fee);\r\n\t\t\r\n        if (msg.data.length == 20) {\r\n            address _referrer = bytesToAddress(bytes(msg.data));\r\n\t\t\tif (_referrer != msg.sender && _referrer != address(0)) {\r\n\t\t\t\t _referrer.send(fee);\r\n\t\t\t}\r\n        }\t\t\r\n    }\r\n\t \r\n\tfunction reInvest() internal isInitialized {\r\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\r\n\t\t\r\n\t\tuint256 value = vegetablesValue(_VegetableId, msg.sender);\r\n\t\trequire(value > 0, \"No grown vegetables for reinvest\");\r\n\t\t\r\n\t\t//Change one vegetable for one acre\r\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = SafeMath.add(FarmerVegetableFieldSize[msg.sender][_VegetableId],value);\r\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\r\n\t}\r\n\t\r\n    function getFreeField() internal isInitialized {\r\n\t\tuint8 _VegetableId = FarmerToFieldId[msg.sender];\r\n\t\trequire(FarmerVegetableFieldSize[msg.sender][_VegetableId] == 0);\r\n\t\t\r\n\t\tFarmerVegetableFieldSize[msg.sender][_VegetableId] = freeFieldSize();\r\n\t\tFarmerVegetableStartGrowing[msg.sender][_VegetableId] = now;\r\n\t\t\r\n    }\r\n\t\r\n    function initMarket(uint256 _init_value) public payable onlyAdmin{\r\n        require(!initialized);\r\n        initialized=true;\r\n\t\t\r\n\t\t//Set the first trade balance\r\n\t\tfor (uint8 _vegetableId = 0; _vegetableId < MaxVegetables; _vegetableId++)\r\n\t\t\tVegetablesTradeBalance[_vegetableId] = _init_value;\r\n    }\t\r\n\t\r\n\tfunction rollFieldId() internal {\r\n\t    //Set random vegetables field for a new farmer\r\n\t\tFarmerToFieldId[msg.sender] = uint8(uint256(blockhash(block.number - 1)) % MaxVegetables + 1);\r\n\t}\r\n\t\r\n    /**\r\n     * @dev Referrer functions\r\n     */\t\t\r\n\r\n\tfunction bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(_source,0x14))\r\n        }\r\n        return parsedreferrer;\r\n    }\t\r\n\t\r\n    /**\r\n     * @dev Views\r\n     */\t\t\r\n\t \r\n    function vegetablePrice(uint8 _VegetableId) public view returns(uint256){\r\n\t\treturn SafeMath.div(SafeMath.div(address(this).balance,MaxVegetables),VegetablesTradeBalance[_VegetableId]);\r\n    }\r\n\r\n    function vegetablesValue(uint8 _VegetableId, address _Farmer) public view returns(uint256){\r\n\t\t//ONE acre gives ONE vegetable per day. Many acres give vegetables faster.\r\n\t\treturn SafeMath.div(SafeMath.mul(FarmerVegetableFieldSize[_Farmer][_VegetableId], SafeMath.sub(now,FarmerVegetableStartGrowing[_Farmer][_VegetableId])),growingSpeed);\t\t\r\n    }\t\r\n\t\r\n    function fieldPrice(uint256 subValue) public view returns(uint256){\r\n\t    uint256 CommonTradeBalance;\r\n\t\t\r\n\t\tfor (uint8 _vegetableId = 0; _vegetableId < MaxVegetables; _vegetableId++)\r\n\t\t\tCommonTradeBalance=SafeMath.add(CommonTradeBalance,VegetablesTradeBalance[_vegetableId]);\r\n\t\t\r\n\t\treturn SafeMath.div(SafeMath.sub(address(this).balance,subValue), CommonTradeBalance);\r\n    }\r\n\t\r\n\tfunction freeFieldSize() public view returns(uint256) {\r\n\t\treturn SafeMath.div(0.0005 ether,fieldPrice(0));\r\n\t}\r\n\t\r\n\tfunction devFee(uint256 _amount) internal pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(_amount,4),100);\r\n    }\r\n\t\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"FarmerVegetableStartGrowing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"FarmerToFieldId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint8\"}],\"name\":\"vegetablePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"FarmerVegetableFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subValue\",\"type\":\"uint256\"}],\"name\":\"fieldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint8\"},{\"name\":\"_Farmer\",\"type\":\"address\"}],\"name\":\"vegetablesValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"VegetablesTradeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_init_value\",\"type\":\"uint256\"}],\"name\":\"initMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherGarden","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d7f70025e80f545a5ea738d6f7aee0a9423eafaf06d3e5c35edd967b6f8c931"}]}