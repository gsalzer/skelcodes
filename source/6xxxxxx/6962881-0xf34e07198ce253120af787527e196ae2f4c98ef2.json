{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract BuddhaTower {\r\n    event onBuy\r\n    (\r\n        address indexed buyerAddress,\r\n        uint256 amount,\r\n        uint256 currentHeight\r\n    );\r\n\r\n    event onSplit(\r\n    \tuint round,\r\n    \tuint luckyNumber,\r\n    \taddress luckyPlayer\r\n    );\r\n\r\n    event onTimeup(\r\n    \tuint round,\r\n    \taddress lastBuyer\r\n    );\r\n\r\n    event onQualifySuccess(\r\n    \taddress applier\r\n    );\r\n\r\n\r\n//==============================================================================\r\n//   __|_ _    __|_ _  .\r\n//  _\\ | | |_|(_ | _\\  .\r\n//==============================================================================\r\n\r\n\tstruct RoundData {\r\n        uint256 maxHeight;\r\n        uint256 lotteryPool;\r\n        uint256 peakPool;\r\n        uint256 tokenPot;\r\n        uint[][] buyinfo;\r\n    \taddress[] buyAddress;\r\n    \tuint256 startTime;\r\n    \tuint256 endTime;\r\n    \taddress[] lotteryWinners;\r\n    \taddress finalWinner;\r\n    }\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n\taddress[] public holders;\r\n    uint256 public totalToken = 0;\r\n    // bool public active = false;\r\n    address private owner;\r\n    mapping (address => uint256) public ethOf;\r\n    mapping (address => address) public inviterOf;\r\n    mapping (address => bool) public qualified;\r\n    uint public price;\r\n    bool public emergencySwitch = false;\r\n    uint public height;\r\n    uint256 public lotteryPool;\r\n    uint256 public peakPool;\r\n    uint[7] public inviteCut = [10,8,6,2,2,1,1];\r\n    mapping(uint256 => RoundData) public roundData_;\r\n    mapping(address => uint256) public inviteIncome;\r\n    mapping(address => uint256) public lotteryIncome;\r\n    mapping(address => uint256) public finalIncome;\r\n    mapping(address => uint256) public tokenIncome;\r\n    uint256 public step = 100000000000;\r\n    \r\n    uint public _rId;\r\n    address private lastBuyer;\r\n    mapping (address => bool) public banAddress;\r\n    mapping (address => uint[4]) public leefs;\r\n    uint public devCut = 0;\r\n    address public addr1 = 0x0b8E19f4A333f58f824e59eBeD301190939c63B5;//3.5%\r\n    address public addr2 = 0x289809c3Aa4D52e2cb424719F82014a1Ff7F2266;//2%\r\n    address public addr3 = 0xf3140b8c2e3dac1253f2041e4f4549ddb1aebd35;//2%\r\n    address public addr4 = 0x245aDe5562bdA54AE913FF1f74b8329Ab011D7e0;//dev cut\r\n\r\n    // uint public rand = 0;\r\n//==============================================================================\r\n//     _ _  _  _|. |`. _  _ _  .\r\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\r\n//==============================================================================\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier isEmergency() {\r\n        require(emergencySwitch);\r\n        _;\r\n    }\r\n\r\n    modifier isBaned(address addr) {\r\n        require(!banAddress[addr]);\r\n        _;\r\n    }\r\n\r\n    modifier isActive(){\r\n    \trequire(\r\n            roundData_[_rId].startTime != 0,\r\n            \"not Started\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n    \trequire(\r\n            msg.sender == owner,\r\n            \"only owner can do this\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"too low\");\r\n        require(_eth <= 100000000000000000000000, \"too much\");\r\n        _;    \r\n    }    \r\n//==============================================================================\r\n//     _ _  _  __|_ _    __|_ _  _  .\r\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\r\n//==============================================================================\r\n    constructor () public{\r\n    \towner = msg.sender;\r\n    \tbalanceOf[owner] = 1000000000000000000;//decimal 18\r\n    \ttotalToken = 1000000000000000000;\r\n    \tleefs[owner] = [9,9,9,9];\r\n    \tholders.push(owner);\r\n    \tqualified[owner] = true;\r\n    \t_rId = 0;\r\n    \tprice = 100000000000000000;\r\n    \tactivate();\r\n        test();\r\n    }\r\n\r\n//==============================================================================\r\n//     _    |_ |. _   |`    _  __|_. _  _  _  .\r\n//    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (use these to interact with contract)\r\n//====|=========================================================================\r\n    function deposit(address _inviter, uint256 _amount)\r\n        isActive()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        isBaned(msg.sender)\r\n        public\r\n        payable\r\n    {\r\n    \trequire(_amount > 0 && _amount <= 1000);\r\n    \trequire (msg.value >= (height * step + price + (height + _amount-1)*step + price)*_amount/2,\"value not enough\");\r\n    \tif(inviterOf[msg.sender]==0x0 && qualified[_inviter] && _inviter != msg.sender)\r\n    \t{\r\n    \t\tinviterOf[msg.sender] = _inviter;\r\n    \t}\r\n        buy(_amount);\r\n    }\r\n\r\n\tfunction withdrawEth(uint _amount) \r\n\tisBaned(msg.sender)\r\n\tisHuman()\r\n\tpublic\r\n    {\r\n        require(ethOf[msg.sender] >= _amount);\r\n        msg.sender.transfer(_amount);\r\n        ethOf[msg.sender] -= _amount;\r\n    }    \r\n\r\n    function getLotteryWinner(uint _round, uint index) public\r\n    returns (address)\r\n    {\r\n    \trequire(_round>=0 && index >= 0);\r\n    \treturn roundData_[_round].lotteryWinners[index];\r\n    }\r\n\r\n    function getLotteryWinnerLength(uint _round) public\r\n    returns (uint)\r\n    {\r\n    \treturn roundData_[_round].lotteryWinners.length;\r\n    }\r\n\r\n    function getQualified() public{\r\n    \trequire(balanceOf[msg.sender] >= 1000000000000000000);\r\n    \tqualified[msg.sender] = true;\r\n    \temit onQualifySuccess(msg.sender);\r\n    }\r\n\r\n    function getBuyInfoLength(uint256 rId) public \r\n    returns(uint)\r\n    {\r\n    \treturn roundData_[rId].buyinfo.length;\r\n    }\r\n\r\n    function getBuyInfo(uint256 rId,uint256 index) public \r\n    returns(uint, uint)\r\n    {\r\n    \trequire(index >= 0 && index < roundData_[rId].buyinfo.length);\r\n    \treturn (roundData_[rId].buyinfo[index][0],roundData_[rId].buyinfo[index][1]);\r\n    }\r\n\r\n    function getBuyAddress(uint256 rId,uint256 index) public \r\n    returns (address)\r\n    {\r\n    \trequire(index >= 0 && index < roundData_[rId].buyAddress.length);\r\n    \treturn roundData_[rId].buyAddress[index];\r\n    }\r\n//==============================================================================\r\n//     _ _  _ _   | _  _ . _  .\r\n//    (_(_)| (/_  |(_)(_||(_  . (this + tools + calcs + modules = our softwares engine)\r\n//=====================_|=======================================================\r\n\tfunction buy(uint256 amount) private{\r\n\t\tif(now >= roundData_[_rId].endTime)\r\n\t\t{\r\n\t\t\tendTime();\r\n\t\t}\r\n\t\trequire(amount > 0);\r\n\t\tuint256 cost = (price + height*step + price + (height+amount-1)*step)*amount/2;\r\n\t\tethOf[msg.sender] += msg.value - cost;\r\n\t\t\r\n\t\troundData_[_rId].peakPool += cost*3/10;\r\n\t\troundData_[_rId].lotteryPool += cost/10;\r\n\t\troundData_[_rId].tokenPot += cost*17/100;\r\n\t\tdevCut += cost*55/1000;\r\n\r\n        ethOf[addr1] += cost*35/1000;\r\n        ethOf[addr2] += cost*20/1000;\r\n        ethOf[addr3] += cost*20/1000;\r\n\r\n\r\n\t\troundData_[_rId].buyinfo.push([height+1,height+amount]);\r\n\t\troundData_[_rId].buyAddress.push(msg.sender);\r\n\r\n\t\troundData_[_rId].endTime += amount * 60;//*60;\r\n\r\n        if (amount >= 10 && balanceOf[msg.sender] == 0)\r\n        \tholders.push(msg.sender);\r\n        uint256 tokenGet = amount/1000 * 11000000000000000000 + amount / 100 * 1000000000000000000 + amount/10*1000000000000000000;\r\n        address affect = 0x0;\r\n        if (balanceOf[msg.sender] < 1000000000000000000 && tokenGet > 1000000000000000000)\r\n        {\r\n        \tleefs[inviterOf[msg.sender]][0]+=1;\r\n        \tif(leefs[inviterOf[msg.sender]][0] == 3 && balanceOf[inviterOf[msg.sender]] >= 7000000000000000000 )\r\n        \t{\r\n        \t\taffect = inviterOf[inviterOf[msg.sender]];\r\n        \t\tleefs[affect][1]+=1;\r\n        \t\tif(leefs[affect][1] == 3 && balanceOf[affect] >= 20000000000000000000)\r\n        \t\t{\r\n        \t\t\taffect = inviterOf[affect];\r\n        \t\t\tleefs[affect][2]+=1;\r\n        \t\t}\r\n        \t}\r\n        }\r\n        if ((balanceOf[msg.sender] < 7000000000000000000 || leefs[msg.sender][0] < 3) && balanceOf[msg.sender] + tokenGet >= 7000000000000000000 && leefs[msg.sender][0] >= 3)\r\n        {\r\n        \tleefs[inviterOf[msg.sender]][1]+=1;\r\n        \tif(leefs[inviterOf[msg.sender]][1] == 3 && balanceOf[inviterOf[msg.sender]] >= 20000000000000000000 )\r\n        \t{\r\n        \t\taffect = inviterOf[inviterOf[msg.sender]];\r\n        \t\tleefs[affect][2]+=1;\r\n        \t}\r\n        }\r\n        \t\t\r\n        if ((balanceOf[msg.sender] < 20000000000000000000 || leefs[msg.sender][1] < 3)&& balanceOf[msg.sender] + tokenGet >= 20000000000000000000 && leefs[msg.sender][1] >= 3)\r\n        \tleefs[inviterOf[msg.sender]][2]+=1;\r\n        balanceOf[msg.sender] += tokenGet;\r\n        totalToken+=tokenGet;\r\n        address inviter = inviterOf[msg.sender];\r\n        address inviter2 = inviterOf[inviter];\r\n        address inviter3 = inviterOf[inviter2];\r\n        address inviter4 = inviterOf[inviter3];\r\n        address inviter5 = inviterOf[inviter4];\r\n        address inviter6 = inviterOf[inviter5];\r\n        address inviter7 = inviterOf[inviter6];\r\n\r\n        if(inviter != 0x0){\r\n            ethOf[inviter] += cost * inviteCut[0]/100;\r\n            inviteIncome[inviter] += cost * inviteCut[0]/100;\r\n        }\r\n\r\n        if(inviter2 != 0x0 && balanceOf[inviter2] >= 7000000000000000000 && leefs[inviter2][0] >= 3){\r\n            ethOf[inviter2] += cost * inviteCut[1]/100;\r\n            inviteIncome[inviter2] += cost * inviteCut[1]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[1]/100;\r\n        }\r\n\r\n        if(inviter3 != 0x0 && balanceOf[inviter3] >= 7000000000000000000 && leefs[inviter3][0] >= 3){\r\n            ethOf[inviter3] += cost * inviteCut[2]/100;\r\n            inviteIncome[inviter3] += cost * inviteCut[2]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[2]/100;\r\n        }\r\n\r\n        if(inviter4 != 0x0 && balanceOf[inviter4] >= 20000000000000000000 && leefs[inviter4][1] >= 3){\r\n            ethOf[inviter4] += cost * inviteCut[3]/100;\r\n            inviteIncome[inviter4] += cost * inviteCut[3]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[3]/100;\r\n        }\r\n\r\n        if(inviter5 != 0x0 && balanceOf[inviter5] >= 20000000000000000000 && leefs[inviter5][1] >= 3){\r\n            ethOf[inviter5] += cost * inviteCut[4]/100;\r\n            inviteIncome[inviter5] += cost * inviteCut[4]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[4]/100;\r\n        }\r\n\r\n        if(inviter6 != 0x0 && balanceOf[inviter6] >= 100000000000000000000 && leefs[inviter6][2] >= 3){\r\n            ethOf[inviter6] += cost * inviteCut[5]/100;\r\n            inviteIncome[inviter6] += cost * inviteCut[5]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[5]/100;\r\n        }\r\n\r\n        if(inviter7 != 0x0 && balanceOf[inviter7] >= 100000000000000000000 && leefs[inviter7][2] >= 3){\r\n            ethOf[inviter7] += cost * inviteCut[6]/100;\r\n            inviteIncome[inviter7] += cost * inviteCut[6]/100;\r\n        }else{\r\n            roundData_[_rId].lotteryPool += cost * inviteCut[6]/100;\r\n        }\r\n\r\n\r\n        if(roundData_[_rId].endTime - now > 86400)\r\n        {\r\n            roundData_[_rId].endTime = now + 86400;\r\n        }\r\n\r\n\t\tif(height+amount >= (height/1000+1)*1000 )\r\n\t\t{\r\n\t\t\tlastBuyer = msg.sender;\r\n\t\t\tsplitLottery();\r\n\t\t}\r\n\r\n\t\theight += amount;\r\n\t\temit onBuy(msg.sender, amount, height);\r\n\t}\r\n\r\n\t// function getRand() public{\r\n\t// \trand = uint(keccak256(now, msg.sender)) % 1000 + 1 + _rId*1000;\r\n\t// }\r\n\r\n\tfunction splitLottery() private{\r\n        //随机一个赢家\r\n        uint random = uint(keccak256(now, msg.sender)) % 1000 + 1 + roundData_[_rId].lotteryWinners.length*1000;//瞎比写的\r\n        // rand = random;\r\n        //随机完毕\r\n        // uint startHeight = ((height/1000)-1)*1000;\r\n        uint i = 0;\r\n        uint start = 0;\r\n        uint end = roundData_[_rId].buyinfo.length-1;\r\n        uint mid = (start+end)/2;\r\n        while(end >= start)\r\n        {\r\n        \tif(roundData_[_rId].buyinfo[mid][0] > random)\r\n        \t{\r\n        \t\tend = mid-1;\r\n        \t\tmid = start+(end-start)/2;\r\n        \t\tcontinue;\r\n        \t}\r\n        \tif(roundData_[_rId].buyinfo[mid][1] < random)\r\n        \t{\r\n        \t\tstart = mid+1;\r\n        \t\tmid = start+(end-start)/2;\r\n        \t\tcontinue;\r\n        \t}\r\n        \tbreak;\r\n        }\r\n        address lotteryWinner = roundData_[_rId].buyAddress[mid];\r\n        ethOf[lotteryWinner] += roundData_[_rId].lotteryPool*80/100;\r\n        lotteryIncome[lotteryWinner] += roundData_[_rId].lotteryPool*80/100;\r\n        roundData_[_rId].lotteryWinners.push(lotteryWinner);\r\n\r\n        for (i = 0; i < holders.length; i++)\r\n        {\r\n        \tethOf[holders[i]] += roundData_[_rId].tokenPot* balanceOf[holders[i]]/totalToken;\r\n        \ttokenIncome[holders[i]] += roundData_[_rId].tokenPot* balanceOf[holders[i]]/totalToken;\r\n        }\r\n        step += 100000000000;\r\n        roundData_[_rId].lotteryPool = roundData_[_rId].lotteryPool*2/10;\r\n        emit onSplit(height/1000+1,random, lotteryWinner);\r\n\t}\r\n\r\n\tfunction endTime() private{\r\n\t\taddress finalWinner = owner;\r\n\t\tif(roundData_[_rId].buyAddress.length > 0)\r\n\t\t\tfinalWinner = roundData_[_rId].buyAddress[roundData_[_rId].buyAddress.length-1];\r\n        //防止溢出\r\n        require(ethOf[finalWinner]+roundData_[_rId].peakPool*8/10 >= ethOf[finalWinner]);\r\n        ethOf[finalWinner] += roundData_[_rId].peakPool*8/10;\r\n        finalIncome[finalWinner] += roundData_[_rId].peakPool*8/10;\r\n        roundData_[_rId].finalWinner = finalWinner;\r\n        roundData_[_rId].maxHeight = height;\r\n        height = 0;\r\n        step = 100000000000;\r\n        _rId++;\r\n        roundData_[_rId].peakPool = roundData_[_rId-1].peakPool*2/10;\r\n        ethOf[owner] += roundData_[_rId-1].lotteryPool;\r\n        roundData_[_rId].lotteryPool = 0; \r\n\r\n        roundData_[_rId].startTime = now;\r\n        roundData_[_rId].endTime = now+86400;\r\n        emit onTimeup(_rId-1,finalWinner);\r\n\t}\r\n\r\n\r\n//==============================================================================\r\n//    (~ _  _    _._|_    .\r\n//    _)(/_(_|_|| | | \\/  .\r\n//====================/=========================================================\r\n    function activate() public onlyOwner(){\r\n    \theight = 0;\r\n    \t_rId = 0;\r\n    \troundData_[_rId].startTime = now;\r\n    \troundData_[_rId].endTime = now + 86400;\r\n    \t// active = true;\r\n    }\r\n\r\n    function takeDevCut() public onlyOwner() {\r\n        // msg.sender.transfer(devCut);\r\n        addr4.transfer(devCut);\r\n        devCut = 0;\r\n    }    \r\n\r\n    function wipeAll() public onlyOwner() {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function emergencyStart() public onlyOwner() {\r\n        emergencySwitch = true;\r\n    }\r\n\r\n    function emergencyClose() public onlyOwner() {\r\n        emergencySwitch = false;\r\n    }\r\n\r\n    function addToBanlist(address addr) public onlyOwner() {\r\n    \tbanAddress[addr] = true;\r\n    }\r\n\r\n    function moveFromBanlist(address addr) public onlyOwner() {\r\n    \tbanAddress[addr] = false;\r\n    }\r\n\r\n//==============================================================================\r\n//    _|_ _  _ | _  .\r\n//     | (_)(_)|_\\  .\r\n//==============================================================================\r\n\r\n    function test() public {\r\n        balanceOf[0x9485d0Ba2C55Aa248EbC127304775D9eBf3B4F08] = 200000000000000000000;\r\n        leefs[0x9485d0Ba2C55Aa248EbC127304775D9eBf3B4F08] = [5,5,5,0];\r\n        qualified[0x9485d0Ba2C55Aa248EbC127304775D9eBf3B4F08] = true;\r\n        \r\n        balanceOf[0x23541528748089d3f872040Be188f443D31A358D] = 21000000000000000000;\r\n        leefs[0x23541528748089d3f872040Be188f443D31A358D] = [3,3,0,0];\r\n        qualified[0x23541528748089d3f872040Be188f443D31A358D] = true;\r\n        inviterOf[0x23541528748089d3f872040Be188f443D31A358D] = 0x9485d0Ba2C55Aa248EbC127304775D9eBf3B4F08;\r\n\r\n        balanceOf[0xC00a8B36396a8939531F0aC4d6DE18c35C96a1C9] = 8000000000000000000;\r\n        leefs[0xC00a8B36396a8939531F0aC4d6DE18c35C96a1C9] = [3,0,0,0];\r\n        qualified[0xC00a8B36396a8939531F0aC4d6DE18c35C96a1C9] = true;\r\n        inviterOf[0xC00a8B36396a8939531F0aC4d6DE18c35C96a1C9] = 0x23541528748089d3f872040Be188f443D31A358D;\r\n\r\n        inviterOf[0x42e3ea4F63ABe0a250892cE84Aca46fB54bA8d21] = 0xC00a8B36396a8939531F0aC4d6DE18c35C96a1C9;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wipeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"}],\"name\":\"getBuyInfoLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peakPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"qualified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBuyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundData_\",\"outputs\":[{\"name\":\"maxHeight\",\"type\":\"uint256\"},{\"name\":\"lotteryPool\",\"type\":\"uint256\"},{\"name\":\"peakPool\",\"type\":\"uint256\"},{\"name\":\"tokenPot\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"finalWinner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getLotteryWinnerLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inviter\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lotteryIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBuyInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeDevCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"finalIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"moveFromBanlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToBanlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencySwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"banAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addr2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addr3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getQualified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addr1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addr4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentHeight\",\"type\":\"uint256\"}],\"name\":\"onBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckyNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luckyPlayer\",\"type\":\"address\"}],\"name\":\"onSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastBuyer\",\"type\":\"address\"}],\"name\":\"onTimeup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"applier\",\"type\":\"address\"}],\"name\":\"onQualifySuccess\",\"type\":\"event\"}]","ContractName":"BuddhaTower","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07b6ca13f17043f8897487ec224dddccb19b5a340d6a609a16da42e6493084c3"}]}