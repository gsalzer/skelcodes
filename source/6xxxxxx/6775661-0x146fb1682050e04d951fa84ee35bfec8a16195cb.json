{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  Ethereum Multiplier contract: returns 110% of each investment!\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Smart contract Made, checked and verified by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.001 to 5 ETH\r\n     - min 250000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 110%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 110% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 110% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make multiple deposits\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 110% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 110%)\r\n\r\n-------------------------------------------------------------------------------------------------\r\n  Контракт Умножитель: возвращает 110% от вашего депозита!\r\n  Автоматические выплаты!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.001 до 5 ETH\r\n     - gas limit минимум 250000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 110% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 121% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 110% от вашего депозита, вы удаляетесь из очереди\r\n  4. Вы можете делать несколько депозитов сразу\r\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 110% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                новый инвестор      |\r\n                 инвестор4     |     =======>      инвестор5        |\r\n                 инвестор3     |                   инвестор4        |\r\n (част. выплата) инвестор2    <|                   инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 110%)\r\n-------------------------------------------------------------------------------------------------\r\n乘数合约：每笔投资110％回报！\r\n  自动支付！\r\n  没有错误，没有后门，没有所有者 - 全自动！\r\n  智能合约由专业人士制作，检查和验证！\r\n\r\n  1.将任何金额发送到智能合约地址\r\n      - 总和从0.001到5 ETH\r\n      - 最低250000气体限制\r\n      - 您被添加到队列中\r\n  等一下\r\n  3. ...\r\n  4.利润！你有110％\r\n\r\n  那个怎么样？\r\n  排队的第一个投资者（你将成为\r\n     首先在一段时间内接受下一次投资，直到\r\n     它成为他初始投资的121％。\r\n  2.您将同时收到几个部分或全部付款\r\n  3.一旦您获得110％的初始投资，您就是\r\n     从队列中删除。\r\n  你可以多次存款\r\n  这份合同的余额通常应为0，因为\r\n     所有的钱都立即去支付\r\n\r\n\r\n     所以最后一次支付给第一次（或者是第一次支付）\r\n     如果存款足够大）和投资者110％的支付被从队列中删除\r\n\r\n                新投资者 -  |全新的投资者 -  |\r\n                 投资者5 |新投资者|\r\n                 investor4 | =======> investor5 |\r\n                 投资者3 | investor4 |\r\n    （部分付款）投资者2 <|投资者3 |\r\n    （全额付款）投资者1 < -  | investor2 <---- | （支付到110％）\r\n    -------------------------------------------------------------------------------------------------\r\n    \r\n乗数契約：各投資の110％を返します！\r\n  自動支払い！\r\n  バグ、バックドア、NO OWNER  - 全自動！\r\n  スマートな契約作り、チェック、専門家による検証！\r\n\r\n  1.スマート契約アドレスに合計を送信する\r\n      -  0.001から5 ETHの合計\r\n      - 最小250000ガス限界\r\n      - あなたはキューに追加されます\r\n  2.少し待ってください\r\n  3. ...\r\n  4.利益！あなたは110％\r\n\r\n  それはどうですか？\r\n  1.キューに入っている最初の投資家（あなたは\r\n     最初にいくつかの時間に）次の投資を受けるまで\r\n     彼の最初の投資の121％になります。\r\n  あなたは一度にいくつかの部分またはすべての支払いを受け取ります\r\n  3.初期投資額の110％を受け取ると、\r\n     キューから削除されます。\r\n  4.複数の預金を作ることができます\r\n  5.この契約の残高は、\r\n     すべてのお金はすぐに支払いに行く\r\n\r\n\r\n     だから、最後のものは最初のものに（あるいはいくつかの最初のものに）\r\n     預金が十分に大きい場合）、投資家が110％支払った金額がキ​​ューから取り除かれた場合\r\n\r\n                新しい投資家 -  |新しい投資家 -  |\r\n                 |投資家5 |新しい投資家|\r\n                 投資家4 | =======>投資家5 |\r\n                 |投資家3 |投資家4 |\r\n    （部分的に支払われた）investor2 <| |投資家3 |\r\n    （全額）投資家1 < -  | investor2 <---- | （110％まで支払う）\r\n    -------------------------------------------------------------------------------------------------\r\n    Multiplier-contract: geeft 110% van elke investering terug!\r\n  Automatische uitbetalingen!\r\n  Geen bugs, geen achterdeuren, GEEN EIGENAAR - volledig automatisch!\r\n  Slim contract gemaakt, gecontroleerd en geverifieerd door professionals!\r\n\r\n  1. Stuur een bedrag naar een slim contractadres\r\n     - som van 0,001 tot 5 ETH\r\n     - min. 250000 gaslimiet\r\n     - u wordt aan een wachtrij toegevoegd\r\n  2. Wacht een beetje\r\n  3. ...\r\n  4. WINST! Je hebt 110%\r\n\r\n  Hoe is dat?\r\n  1. De eerste investeerder in de wachtrij (u wordt de\r\n     eerst in een tijd) ontvangt volgende investeringen tot\r\n     het wordt 121% van zijn initiële investering.\r\n  2. U ontvangt betalingen in meerdere of in één keer\r\n  3. Zodra u 110% van uw initiële investering ontvangt, bent u dat\r\n     uit de wachtrij verwijderd.\r\n  4. Je kunt meerdere stortingen doen\r\n  5. Het saldo van dit contract zou normaliter 0 moeten zijn omdat\r\n     al het geld gaat meteen naar uitbetalingen\r\n\r\n\r\n     Dus de laatste betaalt aan de eerste (of aan verschillende eerste\r\n     als de aanbetaling groot genoeg is) en de beleggers 110% hebben betaald, worden ze uit de wachtrij verwijderd\r\n\r\n                nieuwe investeerder - nieuwe investeerder - |\r\n                 investor5 | nieuwe investeerder |\r\n                 investor4 | =======> investeerder5 |\r\n                 investor3 | investor4 |\r\n    (deel betaald) investeerder2 <| investor3 |\r\n    (volledig betaald) investeerder1 <- | investor2 <---- | (betaal tot 110%)\r\n    -------------------------------------------------------------------------------------------------\r\n    Kuntratt multiplikatur: jirritorna 110% ta 'kull investiment!\r\n  Ħlasijiet awtomatiċi!\r\n  L-ebda bugs, l-ebda backdoors, L-ebda proprjetarju - kompletament awtomatiku!\r\n  Kuntratt intelliġenti Made, ikkontrollat ​​u vverifikat minn professjonisti!\r\n\r\n  1. Ibgħat kwalunkwe somma għal indirizz tal-kuntratt intelliġenti\r\n     - somma minn 0.001 sa 5 ETH\r\n     - min 250000 limitu ta 'gass\r\n     - inti miżjud ma 'kju\r\n  2. Stenna ftit\r\n  3. ...\r\n  4. PROFIT! Int għandek 110%\r\n\r\n  Kif huwa dan?\r\n  1. L-ewwel investitur fil-kju (int se ssir il-persuna\r\n     l-ewwel f'xi żmien) jirċievi l-investimenti li jmiss sa\r\n     sar 121% tal-investiment inizjali tiegħu.\r\n  2. Inti ser tirċievi pagamenti f'diversi partijiet jew kollha f'daqqa\r\n  3. Ladarba tirċievi 110% tal-investiment inizjali tiegħek int\r\n     jitneħħa mill-kju.\r\n  4. Tista 'tagħmel depożiti multipli\r\n  5. Il-bilanċ ta 'dan il-kuntratt normalment għandu jkun 0 minħabba\r\n     il-flus kollha jmorru minnufih għall-ħlasijiet\r\n\r\n\r\n     Allura l-aħħar iħallas lill-ewwel (jew lil diversi dawk l-ewwel\r\n     jekk id-depożitu huwa kbir biżżejjed) u l-investituri mħallsa 110% jitneħħew mill-kju\r\n\r\n                investitur ġdid - | investitur ġdid fjamant - |\r\n                 investitur5 | investitur ġdid |\r\n                 investitur4 | =======> investor5 |\r\n                 investitur3 | investitur4 |\r\n    (parti mħallsa) investitur2 <| investitur3 |\r\n    (imħallas għal kollox) investitur1 <- | investitur2 <---- | (tħallas sa 110%)\r\n    --------------------------------------------------------------------------------------------------\r\n    \r\n\r\n*/\r\n\r\ncontract EthereumMultiplier {\r\n    //Address for reclame expences\r\n    address constant private Reclame = 0x37Ef79eFAEb515EFC1fecCa00d998Ded73092141;\r\n    //Percent for reclame expences\r\n    uint constant public Reclame_PERCENT = 2; \r\n    //3 for advertizing\r\n    address constant private Admin = 0x942Ee0aDa641749861c47E27E6d5c09244E4d7c8;\r\n    // Address for admin expences\r\n    uint constant public Admin_PERCENT = 2;\r\n    // 1 for techsupport\r\n    address constant private BMG = 0x60d23A4F6642869C04994C818A2dDE5a1bf2c217;\r\n    // Address for BestMoneyGroup\r\n    uint constant public BMG_PERCENT = 2;\r\n    // 2 for BMG\r\n    uint constant public Refferal_PERCENT = 10;\r\n    // 10 for Refferal\r\n    //How many percent for your deposit to be multiplied\r\n    uint constant public MULTIPLIER = 110;\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; //The depositor address\r\n        uint128 deposit;   //The deposit amount\r\n        uint128 expect;    //How much we should pay out (initially it is 121% of deposit)\r\n    }\r\n\r\n    Deposit[] private queue;  //The queue\r\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        require(tx.gasprice <= 50000000000 wei, \"Gas price is too high! Do not cheat!\");\r\n        if(msg.value > 110){\r\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value <= 5 ether); //Do not allow too big investments to stabilize payouts\r\n\r\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/110)));\r\n\r\n            //Send some promo to enable this contract to leave long-long time\r\n            uint promo = msg.value*Reclame_PERCENT/100;\r\n            Reclame.send(promo);\r\n            uint admin = msg.value*Admin_PERCENT/100;\r\n            Admin.send(admin);\r\n            uint bmg = msg.value*BMG_PERCENT/100;\r\n            BMG.send(bmg);\r\n\r\n            //Pay to first investors in line\r\n            pay();\r\n        }\r\n    \r\n    }\r\n        function refferal (address REF) public payable {\r\n        require(tx.gasprice <= 50000000000 wei, \"Gas price is too high! Do not cheat!\");\r\n        if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value <= 5 ether); //Do not allow too big investments to stabilize payouts\r\n\r\n            //Add the investor into the queue. Mark that he expects to receive 121% of deposit back\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/110)));\r\n\r\n            //Send some promo to enable this contract to leave long-long time\r\n            uint promo = msg.value*Reclame_PERCENT/100;\r\n            Reclame.send(promo);\r\n            uint admin = msg.value*Admin_PERCENT/100;\r\n            Admin.send(admin);\r\n            uint bmg = msg.value*BMG_PERCENT/100;\r\n            BMG.send(bmg);\r\n            require(REF != 0x0000000000000000000000000000000000000000 && REF != msg.sender, \"You need another refferal!\"); //We need gas to process queue\r\n            uint ref = msg.value*Refferal_PERCENT/100;\r\n            REF.send(ref);\r\n            //Pay to first investors in line\r\n            pay();\r\n        }\r\n    \r\n    }\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue \r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        //Try to send all the money on contract to the first investors in line\r\n        uint128 money = uint128(address(this).balance);\r\n\r\n        //We will do cycle on the queue\r\n        for(uint i=0; i<queue.length; i++){\r\n\r\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[idx]; //get the info of the first investor\r\n\r\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\r\n                dep.depositor.send(dep.expect); //Send money to him\r\n                money -= dep.expect;            //update money left\r\n\r\n                //this investor is fully paid, so remove him\r\n                delete queue[idx];\r\n            }else{\r\n                //Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); //Send to him everything we have\r\n                dep.expect -= money;       //Update the expected amount\r\n                break;                     //Exit cycle\r\n            }\r\n\r\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\r\n                break;                     //The next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex += i; //Update the index of the current first investor\r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admin_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"REF\",\"type\":\"address\"}],\"name\":\"refferal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BMG_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Refferal_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Reclame_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthereumMultiplier","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://337097a3d18b191a6f6e7cecdacbc7bd06e4bb1afdc6e20ac713a994a2765b2b"}]}