{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract StarRocket\r\n{\r\n    using SafeMath for *;\r\n\r\n    address public master;\r\n\r\n    mapping(uint256 => mapping(uint256 => uint256)) results;\r\n\r\n    bool public paused = false;\r\n\r\n    constructor() public {\r\n        master = msg.sender;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == master);\r\n        _;\r\n    }\r\n\r\n    function pause() public whenNotPaused onlyMaster {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public whenPaused onlyMaster {\r\n        paused = false;\r\n    }\r\n\r\n    function makeRandomResult(uint256 guessType, uint256 period, uint256 seed, uint256 maxNumber) onlyMaster\r\n    public returns (bool)  {\r\n        require(guessType > 0);\r\n        require(period > 0);\r\n        require(seed >= 0);\r\n        require(maxNumber > 0);\r\n        require(results[guessType][period] <= 0);\r\n        require(maxNumber <= 1000000);\r\n        uint256 random = (uint256(keccak256(abi.encodePacked(\r\n                (block.timestamp).add\r\n                (block.difficulty).add\r\n                (guessType).add\r\n                (period).add\r\n                (seed)))) % maxNumber) + 1;\r\n        results[guessType][period] = random;\r\n        return true;\r\n    }\r\n\r\n    function getResult(uint256 guessType, uint256 period)\r\n    public view returns (uint256){\r\n        require(guessType > 0);\r\n        require(period > 0);\r\n        require(results[guessType][period] > 0);\r\n        return results[guessType][period];\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"guessType\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guessType\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"maxNumber\",\"type\":\"uint256\"}],\"name\":\"makeRandomResult\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"StarRocket","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://883c7302fba5257416129abbe8f58671973dd769d0ed2169faf749a6851f36ae"}]}