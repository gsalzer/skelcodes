{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SmartWeddingContract\r\n * @dev The contract has both addresses of the husband and the wife. It is capable of handling assets, funds and\r\n * divorce. A multisig variant is used to consider the decision of both parties.\r\n */\r\ncontract SmartWeddingContract {\r\n\tevent WrittenContractProposed(uint timestamp, string ipfsHash, address wallet);\r\n\tevent Signed(uint timestamp, address wallet);\r\n\tevent ContractSigned(uint timestamp);\r\n\tevent AssetProposed(uint timestamp, string asset, address wallet);\r\n\tevent AssetAddApproved(uint timestamp, string asset, address wallet);\r\n\tevent AssetAdded(uint timestamp, string asset);\r\n\tevent AssetRemoveApproved(uint timestamp, string asset, address wallet);\r\n\tevent AssetRemoved(uint timestamp, string asset);\r\n\tevent DivorceApproved(uint timestamp, address wallet);\r\n\tevent Divorced(uint timestamp);\r\n\tevent FundsSent(uint timestamp, address wallet, uint amount);\r\n\tevent FundsReceived(uint timestamp, address wallet, uint amount);\r\n\r\n\tbool public signed = false;\r\n\tbool public divorced = false;\r\n\r\n\tmapping (address => bool) private hasSigned;\r\n\tmapping (address => bool) private hasDivorced;\r\n\r\n\taddress public husbandAddress;\r\n\taddress public wifeAddress;\r\n\tstring public writtenContractIpfsHash;\r\n\r\n\tstruct Asset {\r\n\t\tstring data;\r\n\t\tuint husbandAllocation;\r\n\t\tuint wifeAllocation;\r\n\t\tbool added;\r\n\t\tbool removed;\r\n\t\tmapping (address => bool) hasApprovedAdd;\r\n\t\tmapping (address => bool) hasApprovedRemove;\r\n\t}\r\n\r\n\tAsset[] public assets;\r\n\r\n\t/**\r\n\t * @dev Modifier that only allows spouse execution.\r\n \t */\r\n\tmodifier onlySpouse() {\r\n\t\trequire(msg.sender == husbandAddress || msg.sender == wifeAddress, \"Sender is not a spouse!\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier that checks if the contract has been signed by both spouses.\r\n \t */\r\n\tmodifier isSigned() {\r\n\t\trequire(signed == true, \"Contract has not been signed by both spouses yet!\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier that only allows execution if the spouses have not been divorced.\r\n \t */\r\n\tmodifier isNotDivorced() {\r\n\t\trequire(divorced == false, \"Can not be called after spouses agreed to divorce!\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Private helper function to check if a string is the same as another.\r\n\t */\r\n\tfunction isSameString(string memory string1, string memory string2) private pure returns (bool) {\r\n\t\treturn keccak256(abi.encodePacked(string1)) != keccak256(abi.encodePacked(string2));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Constructor: Set the wallet addresses of both spouses.\r\n\t * @param _husbandAddress Wallet address of the husband.\r\n\t * @param _wifeAddress Wallet address of the wife.\r\n\t */\r\n\tconstructor(address _husbandAddress, address _wifeAddress) public {\r\n\t\trequire(_husbandAddress != address(0), \"Husband address must not be zero!\");\r\n\t\trequire(_wifeAddress != address(0), \"Wife address must not be zero!\");\r\n\t\trequire(_husbandAddress != _wifeAddress, \"Husband address must not equal wife address!\");\r\n\r\n\t\thusbandAddress = _husbandAddress;\r\n\t\twifeAddress = _wifeAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Default function to enable the contract to receive funds.\r\n \t */\r\n\tfunction() external payable isSigned isNotDivorced {\r\n\t\temit FundsReceived(now, msg.sender, msg.value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Propose a written contract (update).\r\n\t * @param _writtenContractIpfsHash IPFS hash of the written contract PDF.\r\n\t */\r\n\tfunction proposeWrittenContract(string _writtenContractIpfsHash) external onlySpouse {\r\n\t\trequire(signed == false, \"Written contract ipfs hash can not be changed. Both spouses have already signed it!\");\r\n\r\n\t\t// Update written contract ipfs hash\r\n\t\twrittenContractIpfsHash = _writtenContractIpfsHash;\r\n\r\n\t\temit WrittenContractProposed(now, _writtenContractIpfsHash, msg.sender);\r\n\r\n\t\t// Revoke previous signatures\r\n\t\tif (hasSigned[husbandAddress] == true) {\r\n\t\t\thasSigned[husbandAddress] = false;\r\n\t\t}\r\n\t\tif (hasSigned[wifeAddress] == true) {\r\n\t\t\thasSigned[wifeAddress] = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sign the contract.\r\n\t */\r\n\tfunction signContract() external onlySpouse {\r\n\t\trequire(isSameString(writtenContractIpfsHash, \"\"), \"Written contract ipfs hash has been proposed yet!\");\r\n\t\trequire(hasSigned[msg.sender] == false, \"Spouse has already signed the contract!\");\r\n\r\n\t\t// Sender signed\r\n\t\thasSigned[msg.sender] = true;\r\n\r\n\t\temit Signed(now, msg.sender);\r\n\r\n\t\t// Check if both spouses have signed\r\n\t\tif (hasSigned[husbandAddress] && hasSigned[wifeAddress]) {\r\n\t\t\tsigned = true;\r\n\t\t\temit ContractSigned(now);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Send ETH to a target address.\r\n\t * @param _to Destination wallet address.\r\n\t * @param _amount Amount of ETH to send.\r\n\t */\r\n\tfunction pay(address _to, uint _amount) external onlySpouse isSigned isNotDivorced {\r\n\t\trequire(_to != address(0), \"Sending funds to address zero is prohibited!\");\r\n\t\trequire(_amount <= address(this).balance, \"Not enough balance available!\");\r\n\r\n\t\t// Send funds to the destination address\r\n\t\t_to.transfer(_amount);\r\n\r\n\t\temit FundsSent(now, _to, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Propose an asset to add. The other spouse needs to approve this action.\r\n\t * @param _data The asset represented as a string.\r\n\t * @param _husbandAllocation Allocation of the husband.\r\n\t * @param _wifeAllocation Allocation of the wife.\r\n\t */\r\n\tfunction proposeAsset(string _data, uint _husbandAllocation, uint _wifeAllocation) external onlySpouse isSigned isNotDivorced {\r\n\t\trequire(isSameString(_data, \"\"), \"No asset data provided!\");\r\n\t\trequire(_husbandAllocation >= 0, \"Husband allocation invalid!\");\r\n\t\trequire(_wifeAllocation >= 0, \"Wife allocation invalid!\");\r\n\t\trequire((_husbandAllocation + _wifeAllocation) == 100, \"Total allocation must be equal to 100%!\");\r\n\r\n\t\t// Add new asset\r\n\t\tAsset memory newAsset = Asset({\r\n\t\t\tdata: _data,\r\n\t\t\thusbandAllocation: _husbandAllocation,\r\n\t\t\twifeAllocation: _wifeAllocation,\r\n\t\t\tadded: false,\r\n\t\t\tremoved: false\r\n\t\t});\r\n\t\tuint newAssetId = assets.push(newAsset);\r\n\r\n\t\temit AssetProposed(now, _data, msg.sender);\r\n\r\n\t\t// Map to a storage object (otherwise mappings could not be accessed)\r\n\t\tAsset storage asset = assets[newAssetId - 1];\r\n\r\n\t\t// Instantly approve it by the sender\r\n\t\tasset.hasApprovedAdd[msg.sender] = true;\r\n\r\n\t\temit AssetAddApproved(now, _data, msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the addition of a prior proposed asset. The other spouse needs to approve this action.\r\n\t * @param _assetId The id of the asset that should be approved.\r\n\t */\r\n\tfunction approveAsset(uint _assetId) external onlySpouse isSigned isNotDivorced {\r\n\t\trequire(_assetId > 0 && _assetId <= assets.length, \"Invalid asset id!\");\r\n\r\n\t\tAsset storage asset = assets[_assetId - 1];\r\n\r\n\t\trequire(asset.added == false, \"Asset has already been added!\");\r\n\t\trequire(asset.removed == false, \"Asset has already been removed!\");\r\n\t\trequire(asset.hasApprovedAdd[msg.sender] == false, \"Asset has already approved by sender!\");\r\n\r\n\t\t// Sender approved\r\n\t\tasset.hasApprovedAdd[msg.sender] = true;\r\n\r\n\t\temit AssetAddApproved(now, asset.data, msg.sender);\r\n\r\n\t\t// Check if both spouses have approved\r\n\t\tif (asset.hasApprovedAdd[husbandAddress] && asset.hasApprovedAdd[wifeAddress]) {\r\n\t\t\tasset.added = true;\r\n\t\t\temit AssetAdded(now, asset.data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the removal of a prior proposed/already added asset. The other spouse needs to approve this action.\r\n\t * @param _assetId The id of the asset that should be removed.\r\n\t */\r\n\tfunction removeAsset(uint _assetId) external onlySpouse isSigned isNotDivorced {\r\n\t\trequire(_assetId > 0 && _assetId <= assets.length, \"Invalid asset id!\");\r\n\r\n\t\tAsset storage asset = assets[_assetId - 1];\r\n\r\n\t\trequire(asset.added, \"Asset has not been added yet!\");\r\n\t\trequire(asset.removed == false, \"Asset has already been removed!\");\r\n\t\trequire(asset.hasApprovedRemove[msg.sender] == false, \"Removing the asset has already been approved by the sender!\");\r\n\r\n\t\t// Approve removal by the sender\r\n\t\tasset.hasApprovedRemove[msg.sender] = true;\r\n\r\n\t\temit AssetRemoveApproved(now, asset.data, msg.sender);\r\n\r\n\t\t// Check if both spouses have approved the removal of the asset\r\n\t\tif (asset.hasApprovedRemove[husbandAddress] && asset.hasApprovedRemove[wifeAddress]) {\r\n\t\t\tasset.removed = true;\r\n\t\t\temit AssetRemoved(now, asset.data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Request to divorce. The other spouse needs to approve this action.\r\n\t */\r\n\tfunction divorce() external onlySpouse isSigned isNotDivorced {\r\n\t\trequire(hasDivorced[msg.sender] == false, \"Sender has already approved to divorce!\");\r\n\r\n\t\t// Sender approved\r\n\t\thasDivorced[msg.sender] = true;\r\n\r\n\t\temit DivorceApproved(now, msg.sender);\r\n\r\n\t\t// Check if both spouses have approved to divorce\r\n\t\tif (hasDivorced[husbandAddress] && hasDivorced[wifeAddress]) {\r\n\t\t\tdivorced = true;\r\n\t\t\temit Divorced(now);\r\n\r\n\t\t\t// Get the contracts balance\r\n\t\t\tuint balance = address(this).balance;\r\n\r\n\t\t\t// Split the remaining balance half-half\r\n\t\t\tif (balance != 0) {\r\n\t\t\t\tuint balancePerSpouse = balance / 2;\r\n\r\n\t\t\t\t// Send transfer to the husband\r\n\t\t\t\thusbandAddress.transfer(balancePerSpouse);\r\n\t\t\t\temit FundsSent(now, husbandAddress, balancePerSpouse);\r\n\r\n\t\t\t\t// Send transfer to the wife\r\n\t\t\t\twifeAddress.transfer(balancePerSpouse);\r\n\t\t\t\temit FundsSent(now, wifeAddress, balancePerSpouse);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return a list of all asset ids.\r\n\t */\r\n\tfunction getAssetIds() external view returns (uint[]) {\r\n\t\tuint assetCount = assets.length;\r\n\t\tuint[] memory assetIds = new uint[](assetCount);\r\n\r\n\t\t// Get all asset ids\r\n\t\tfor (uint i = 1; i <= assetCount; i++) { assetIds[i - 1] = i; }\r\n\r\n\t\treturn assetIds;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_writtenContractIpfsHash\",\"type\":\"string\"}],\"name\":\"proposeWrittenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"husbandAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divorced\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"writtenContractIpfsHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wifeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"approveAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"signContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_husbandAllocation\",\"type\":\"uint256\"},{\"name\":\"_wifeAllocation\",\"type\":\"uint256\"}],\"name\":\"proposeAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"husbandAllocation\",\"type\":\"uint256\"},{\"name\":\"wifeAllocation\",\"type\":\"uint256\"},{\"name\":\"added\",\"type\":\"bool\"},{\"name\":\"removed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divorce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"removeAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_husbandAddress\",\"type\":\"address\"},{\"name\":\"_wifeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WrittenContractProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AssetProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AssetAddApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"string\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AssetRemoveApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"string\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"DivorceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Divorced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"}]","ContractName":"SmartWeddingContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002baf3e0a838a54bc464c8e27195b891d02cac7080000000000000000000000000ed52194e69fb8cc504ba036cf7c3b72d66a3eb2","Library":"","SwarmSource":"bzzr://4971938db3b92c5da4e77b96b344e77981dc6f6d68e1baef849db5a1b2a6a37e"}]}