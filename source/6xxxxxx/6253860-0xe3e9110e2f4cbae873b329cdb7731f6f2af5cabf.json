{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/// @title DNNToken contract - Main DNN contract\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNToken {\r\n    enum DNNSupplyAllocations {\r\n        EarlyBackerSupplyAllocation,\r\n        PRETDESupplyAllocation,\r\n        TDESupplyAllocation,\r\n        BountySupplyAllocation,\r\n        WriterAccountSupplyAllocation,\r\n        AdvisorySupplyAllocation,\r\n        PlatformSupplyAllocation\r\n    }\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function issueTokens(address, uint256, DNNSupplyAllocations) public pure returns (bool) {}\r\n}\r\n\r\n/// @title DNNTradeGame contract\r\n/// @author Dondrey Taylor - <dondrey@dnn.media>\r\ncontract DNNTradeGame {\r\n\r\n  // DNN Token\r\n  DNNToken public dnnToken;\r\n\r\n  // Owner\r\n  address owner = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\r\n\r\n\t// Event that gets triggered each time a user\r\n\t// sends a redemption transaction to this smart contract\r\n  event Winner(address indexed to, uint256 dnnBalance, uint256 dnnWon);\r\n  event Trader(address indexed to, uint256 dnnBalance);\r\n\r\n  // Owner\r\n  modifier onlyOwner() {\r\n      require (msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  // Decide DNN Winner\r\n  function pickWinner(address winnerAddress, uint256 dnnToReward, DNNToken.DNNSupplyAllocations allocationType)\r\n    public\r\n    onlyOwner\r\n  {\r\n      uint256 winnerDNNBalance = dnnToken.balanceOf(msg.sender);\r\n\r\n      if (!dnnToken.issueTokens(winnerAddress, dnnToReward, allocationType)) {\r\n          revert();\r\n      }\r\n      else {\r\n          emit Winner(winnerAddress, winnerDNNBalance, dnnToReward);\r\n      }\r\n  }\r\n\r\n  // Constructor\r\n  constructor() public\r\n  {\r\n      dnnToken = DNNToken(0x9D9832d1beb29CC949d75D61415FD00279f84Dc2);\r\n  }\r\n\r\n\t// Handles incoming transactions\r\n\tfunction () public payable {\r\n\r\n      // Sender address\r\n      address dnnHolder = msg.sender;\r\n\r\n      // Sender balance\r\n      uint256 dnnHolderBalance = dnnToken.balanceOf(msg.sender);\r\n\r\n      // Event to reference for picking a winner\r\n      emit Trader(dnnHolder, dnnHolderBalance);\r\n\r\n      if (msg.value > 0) {\r\n          owner.transfer(msg.value);\r\n      }\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"winnerAddress\",\"type\":\"address\"},{\"name\":\"dnnToReward\",\"type\":\"uint256\"},{\"name\":\"allocationType\",\"type\":\"uint8\"}],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dnnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dnnBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dnnWon\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dnnBalance\",\"type\":\"uint256\"}],\"name\":\"Trader\",\"type\":\"event\"}]","ContractName":"DNNTradeGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e0d4b9984a63a509450ddcf51795402fac905a106a93c72e8a199552c19c2670"}]}