{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"msg.sender is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _to Address of the new owner\r\n    */\r\n    function transferTo(address _to) external onlyOwner returns (bool) {\r\n        require(_to != address(0), \"Can't transfer to address 0x0\");\r\n        owner = _to;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n    @dev Defines the interface of a standard RCN oracle.\r\n\r\n    The oracle is an agent in the RCN network that supplies a convertion rate between RCN and any other currency,\r\n    it's primarily used by the exchange but could be used by any other agent.\r\n*/\r\ncontract Oracle is Ownable {\r\n    uint256 public constant VERSION = 4;\r\n\r\n    event NewSymbol(bytes32 _currency);\r\n\r\n    mapping(bytes32 => bool) public supported;\r\n    bytes32[] public currencies;\r\n\r\n    /**\r\n        @dev Returns the url where the oracle exposes a valid \"oracleData\" if needed\r\n    */\r\n    function url() public view returns (string);\r\n\r\n    /**\r\n        @dev Returns a valid convertion rate from the currency given to RCN\r\n\r\n        @param symbol Symbol of the currency\r\n        @param data Generic data field, could be used for off-chain signing\r\n    */\r\n    function getRate(bytes32 symbol, bytes data) public returns (uint256 rate, uint256 decimals);\r\n\r\n    /**\r\n        @dev Adds a currency to the oracle, once added it cannot be removed\r\n\r\n        @param ticker Symbol of the currency\r\n\r\n        @return if the creation was done successfully\r\n    */\r\n    function addCurrency(string ticker) public onlyOwner returns (bool) {\r\n        bytes32 currency = encodeCurrency(ticker);\r\n        emit NewSymbol(currency);\r\n        supported[currency] = true;\r\n        currencies.push(currency);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @return the currency encoded as a bytes32\r\n    */\r\n    function encodeCurrency(string currency) public pure returns (bytes32 o) {\r\n        require(bytes(currency).length <= 32, \"Currency too long\");\r\n        assembly {\r\n            o := mload(add(currency, 32))\r\n        }\r\n    }\r\n    \r\n    /**\r\n        @return the currency string from a encoded bytes32\r\n    */\r\n    function decodeCurrency(bytes32 b) public pure returns (string o) {\r\n        uint256 ns = 256;\r\n        while (true) { if (ns == 0 || (b<<ns-8) != 0) break; ns -= 8; }\r\n        assembly {\r\n            ns := div(ns, 8)\r\n            o := mload(0x40)\r\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\r\n            mstore(o, ns)\r\n            mstore(add(o, 32), b)\r\n        }\r\n    }\r\n}\r\n\r\ncontract Engine {\r\n    uint256 public VERSION;\r\n    string public VERSION_NAME;\r\n\r\n    enum Status { initial, lent, paid, destroyed }\r\n    struct Approbation {\r\n        bool approved;\r\n        bytes data;\r\n        bytes32 checksum;\r\n    }\r\n\r\n    function getTotalLoans() public view returns (uint256);\r\n    function getOracle(uint index) public view returns (Oracle);\r\n    function getBorrower(uint index) public view returns (address);\r\n    function getCosigner(uint index) public view returns (address);\r\n    function ownerOf(uint256) public view returns (address owner);\r\n    function getCreator(uint index) public view returns (address);\r\n    function getAmount(uint index) public view returns (uint256);\r\n    function getPaid(uint index) public view returns (uint256);\r\n    function getDueTime(uint index) public view returns (uint256);\r\n    function getApprobation(uint index, address _address) public view returns (bool);\r\n    function getStatus(uint index) public view returns (Status);\r\n    function isApproved(uint index) public view returns (bool);\r\n    function getPendingAmount(uint index) public returns (uint256);\r\n    function getCurrency(uint index) public view returns (bytes32);\r\n    function cosign(uint index, uint256 cost) external returns (bool);\r\n    function approveLoan(uint index) public returns (bool);\r\n    function transfer(address to, uint256 index) public returns (bool);\r\n    function takeOwnership(uint256 index) public returns (bool);\r\n    function withdrawal(uint index, address to, uint256 amount) public returns (bool);\r\n    function identifierToIndex(bytes32 signature) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n    @dev Defines the interface of a standard RCN cosigner.\r\n\r\n    The cosigner is an agent that gives an insurance to the lender in the event of a defaulted loan, the confitions\r\n    of the insurance and the cost of the given are defined by the cosigner. \r\n\r\n    The lender will decide what cosigner to use, if any; the address of the cosigner and the valid data provided by the\r\n    agent should be passed as params when the lender calls the \"lend\" method on the engine.\r\n    \r\n    When the default conditions defined by the cosigner aligns with the status of the loan, the lender of the engine\r\n    should be able to call the \"claim\" method to receive the benefit; the cosigner can define aditional requirements to\r\n    call this method, like the transfer of the ownership of the loan.\r\n*/\r\ncontract Cosigner {\r\n    uint256 public constant VERSION = 2;\r\n    \r\n    /**\r\n        @return the url of the endpoint that exposes the insurance offers.\r\n    */\r\n    function url() public view returns (string);\r\n    \r\n    /**\r\n        @dev Retrieves the cost of a given insurance, this amount should be exact.\r\n\r\n        @return the cost of the cosign, in RCN wei\r\n    */\r\n    function cost(address engine, uint256 index, bytes data, bytes oracleData) public view returns (uint256);\r\n    \r\n    /**\r\n        @dev The engine calls this method for confirmation of the conditions, if the cosigner accepts the liability of\r\n        the insurance it must call the method \"cosign\" of the engine. If the cosigner does not call that method, or\r\n        does not return true to this method, the operation fails.\r\n\r\n        @return true if the cosigner accepts the liability\r\n    */\r\n    function requestCosign(Engine engine, uint256 index, bytes data, bytes oracleData) public returns (bool);\r\n    \r\n    /**\r\n        @dev Claims the benefit of the insurance if the loan is defaulted, this method should be only calleable by the\r\n        current lender of the loan.\r\n\r\n        @return true if the claim was done correctly.\r\n    */\r\n    function claim(address engine, uint256 index, bytes oracleData) public returns (bool);\r\n}\r\n\r\n\r\ncontract TokenConverter {\r\n    address public constant ETH_ADDRESS = 0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\r\n    function getReturn(Token _fromToken, Token _toToken, uint256 _fromAmount) external view returns (uint256 amount);\r\n    function convert(Token _fromToken, Token _toToken, uint256 _fromAmount, uint256 _minReturn) external payable returns (uint256 amount);\r\n}\r\n\r\n\r\n/*\r\n    Bancor Converter interface\r\n*/\r\ncontract IBancorConverter {\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\r\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n    function conversionWhitelist() public view returns (IWhitelist) {}\r\n    // deprecated, backward compatibility\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n    function token() external returns (IERC20Token);\r\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\r\n}\r\n\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {}\r\n    function symbol() public view returns (string) {}\r\n    function decimals() public view returns (uint8) {}\r\n    function totalSupply() public view returns (uint256) {}\r\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\ncontract BancorProxy is TokenConverter, Ownable {\r\n    IBancorConverter converterEthBnt;\r\n\r\n    mapping(address => mapping(address => IBancorConverter)) public converterOf;\r\n    mapping(address => mapping(address => address)) public routerOf;\r\n    mapping(address => mapping(address => IERC20Token[])) public pathCache;\r\n\r\n    Token ethToken;\r\n\r\n    constructor(\r\n        Token _ethToken\r\n    ) public {\r\n        ethToken = _ethToken;\r\n    }\r\n\r\n    function setConverter(\r\n        Token _token1,\r\n        Token _token2,\r\n        IBancorConverter _converter\r\n    ) public onlyOwner returns (bool) {\r\n        converterOf[_token1][_token2] = _converter;\r\n        converterOf[_token2][_token1] = _converter;\r\n        uint256 approve = uint256(0) - 1;\r\n        require(_token1.approve(_converter, approve), \"Error approving transfer token 1\");\r\n        require(_token2.approve(_converter, approve), \"Error approving transfer token 2\");\r\n        clearCache(_token1, _token2);\r\n        return true;\r\n    }\r\n\r\n    function setRouter(\r\n        address _token1,\r\n        address _token2,\r\n        address _router\r\n    ) external onlyOwner returns (bool) {\r\n        routerOf[_token1][_token2] = _router;\r\n        routerOf[_token2][_token1] = _router;\r\n        return true;\r\n    }\r\n\r\n    function clearCache(\r\n        Token from,\r\n        Token to\r\n    ) public onlyOwner returns (bool) {\r\n        pathCache[from][to].length = 0;\r\n        pathCache[to][from].length = 0;\r\n        return true;\r\n    }\r\n\r\n    function getPath(\r\n        IBancorConverter converter,\r\n        Token from,\r\n        Token to\r\n    ) private returns (IERC20Token[]) {\r\n        if (pathCache[from][to].length != 0) {\r\n            return pathCache[from][to];\r\n        } else {\r\n            IERC20Token token = converter.token();\r\n            pathCache[from][to] = [IERC20Token(from), token, IERC20Token(to)];\r\n            return pathCache[from][to];\r\n        }\r\n    }\r\n\r\n    function getReturn(Token from, Token to, uint256 sell) external view returns (uint256 amount){\r\n        return _getReturn(from, to, sell);\r\n    }\r\n\r\n    function _getReturn(Token _from, Token _to, uint256 sell) internal view returns (uint256 amount){\r\n        Token from = _from == ETH_ADDRESS ? Token(ethToken) : _from;\r\n        Token to = _to == ETH_ADDRESS ? Token(ethToken) : _to;\r\n        IBancorConverter converter = converterOf[from][to];\r\n        if (converter != address(0)) {\r\n            return converter.getReturn(IERC20Token(from), IERC20Token(to), sell);\r\n        }\r\n\r\n        Token router = Token(routerOf[from][to]);\r\n        if (router != address(0)) {\r\n            converter = converterOf[router][to];\r\n            return converter.getReturn(\r\n                IERC20Token(router),\r\n                IERC20Token(to),\r\n                _getReturn(from, router, sell)\r\n            );\r\n        }\r\n        revert(\"No routing found - BancorProxy\");\r\n    }\r\n\r\n    function convert(Token _from, Token _to, uint256 sell, uint256 minReturn) external payable returns (uint256 amount){\r\n        Token from = _from == ETH_ADDRESS ? Token(ethToken) : _from;\r\n        Token to = _to == ETH_ADDRESS ? Token(ethToken) : _to;\r\n\r\n        if (from == ethToken) {\r\n            require(msg.value == sell, \"ETH not enought\");\r\n        } else {\r\n            require(msg.value == 0, \"ETH not required\");\r\n            require(from.transferFrom(msg.sender, this, sell), \"Error pulling tokens\");\r\n        }\r\n\r\n        amount = _convert(from, to, sell);\r\n        require(amount > minReturn, \"Return amount too low\");\r\n\r\n        if (to == ethToken) {\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            require(to.transfer(msg.sender, amount), \"Error sending tokens\");\r\n        }\r\n    }\r\n\r\n    function _convert(\r\n        Token from,\r\n        Token to,   \r\n        uint256 sell\r\n    ) internal returns (uint256) {\r\n        IBancorConverter converter = converterOf[from][to];\r\n        \r\n        uint256 amount;\r\n        if (converter != address(0)) {\r\n            amount = converter.quickConvert\r\n                .value(from == ethToken ? sell : 0)(\r\n                getPath(converter, from, to),\r\n                sell,\r\n                1\r\n            );\r\n        } else {\r\n            Token router = Token(routerOf[from][to]);\r\n            if (router != address(0)) {\r\n                uint256 routerAmount = _convert(from, router, sell);\r\n                converter = converterOf[router][to];\r\n                amount = converter.quickConvert\r\n                    .value(router == ethToken ? routerAmount : 0)(\r\n                    getPath(converter, router, to),\r\n                    routerAmount,\r\n                    1\r\n                );\r\n            }\r\n        }\r\n\r\n        return amount;\r\n    } \r\n\r\n    function withdrawTokens(\r\n        Token _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner returns (bool) {\r\n        return _token.transfer(_to, _amount);\r\n    }\r\n\r\n    function withdrawEther(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        \r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"converterOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"sell\",\"type\":\"uint256\"},{\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token1\",\"type\":\"address\"},{\"name\":\"_token2\",\"type\":\"address\"},{\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCache\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token1\",\"type\":\"address\"},{\"name\":\"_token2\",\"type\":\"address\"},{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"clearCache\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BancorProxy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce315","Library":"","SwarmSource":"bzzr://33a7d8ad5d521941a9aa33a209110cb9f076d25888e6c269c913dfc8ab8bb32d"}]}