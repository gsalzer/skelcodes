{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n/****\r\nThis is an interesting project.\r\n****/\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *      ERC223 contract interface with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\r\n */\r\ncontract ERC223 {\r\n\r\n\r\n    // ERC223 and ERC20 functions \r\n    function balanceOf(address who) public view returns (uint256);\r\n    function totalSupply() public view returns (uint256 _supply);\r\n    function transfer(address to, uint256 value) public returns (bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data); \r\n\r\n    // ERC223 functions\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n\r\n    // ERC20 functions \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event LockedFunds(address indexed target, uint256 locked);\r\n}\r\n\r\n\r\ncontract OtherToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract YEYE is ERC223  {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n    address owner = msg.sender;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public blacklist;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n    address[] StoreWelfareAddress;\r\n    mapping (address => string) StoreWelfareDetails;  \r\n    address public OrganizationAddress;\r\n    string internal constant _name = \"YEYE\";\r\n    string internal constant _symbol = \"YE\";\r\n    uint8 internal constant _decimals = 8;\r\n    uint256 internal _totalSupply = 2000000000e8;\r\n    uint256 internal StartEth = 1e16;\r\n    uint256 private  RandNonce;\r\n    uint256 public Organization = _totalSupply.div(100).mul(5);\r\n    uint256 public totalRemaining = _totalSupply;\r\n    uint256 public totalDistributed = 0;\r\n    uint256 public EthGet=1500000e8;\r\n    uint256 public Send0GiveBase = 3000e8;\r\n    bool internal EndDistr = false;\r\n    bool internal EndSend0GetToken = false;\r\n    bool internal EndEthGetToken = false; \r\n    bool internal CanTransfer = true;   \r\n    bool internal EndGamGetToken = false;\r\n  \r\n    modifier canDistr() {\r\n        require(!EndDistr);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier canTrans() {\r\n        require(CanTransfer == true);\r\n        _;\r\n    }    \r\n    modifier onlyWhitelist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n    \r\n    constructor(address _Organization) public {\r\n        owner = msg.sender;\r\n        OrganizationAddress = _Organization;\r\n        distr(OrganizationAddress , Organization);\r\n        RandNonce = uint(keccak256(abi.encodePacked(now)));\r\n        RandNonce = RandNonce**10;\r\n    }\r\n    \r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n      }\r\n\r\n    \r\n    function enableWhitelist(address[] addresses) onlyOwner public {\r\n        require(addresses.length <= 255);\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner public {\r\n        require(addresses.length <= 255);\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        EndDistr = true;\r\n        return true;\r\n    }\r\n    function startDistribution() onlyOwner  public returns (bool) {\r\n        EndDistr = false;\r\n        return true;\r\n    }\r\n    function finishFreeGet() onlyOwner canDistr public returns (bool) {\r\n        EndSend0GetToken = true;\r\n        return true;\r\n    }\r\n    function finishEthGet() onlyOwner canDistr public returns (bool) {\r\n        EndEthGetToken = true;\r\n        return true;\r\n    }\r\n    function startFreeGet() onlyOwner canDistr public returns (bool) {\r\n        EndSend0GetToken = false;\r\n        return true;\r\n    }\r\n    function startEthGet() onlyOwner canDistr public returns (bool) {\r\n        EndEthGetToken = false;\r\n        return true;\r\n    }\r\n    function startTransfer() onlyOwner  public returns (bool) {\r\n        CanTransfer = true;\r\n        return true;\r\n    }\r\n    function stopTransfer() onlyOwner  public returns (bool) {\r\n        CanTransfer = false;\r\n        return true;\r\n    }\r\n    function startGamGetToken() onlyOwner  public returns (bool) {\r\n        EndGamGetToken = false;\r\n        return true;\r\n    }\r\n    function stopGamGetToken() onlyOwner  public returns (bool) {\r\n        EndGamGetToken = true;\r\n        return true;\r\n    }\r\n    function changeParam(uint _Send0GiveBase, uint _EthGet, uint _StartEth) onlyOwner public returns (bool) {\r\n        Send0GiveBase = _Send0GiveBase;\r\n        EthGet=_EthGet;\r\n        StartEth = _StartEth;\r\n        return true;\r\n    }\r\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint j = 0; j < targets.length; j++) {\r\n            require(targets[j] != 0x0);\r\n            frozenAccount[targets[j]] = isFrozen;\r\n            emit FrozenFunds(targets[j], isFrozen);\r\n        }\r\n    }\r\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n        require(targets.length > 0\r\n                && targets.length == unixTimes.length);\r\n                \r\n        for(uint j = 0; j < targets.length; j++){\r\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\r\n            unlockUnixTime[targets[j]] = unixTimes[j];\r\n            emit LockedFunds(targets[j], unixTimes[j]);\r\n        }\r\n    }    \r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        require(totalRemaining >= 0);\r\n        require(_amount<=totalRemaining);\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n        \r\n        require(addresses.length <= 255);\r\n        require(amount <= totalRemaining);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amount <= totalRemaining);\r\n            distr(addresses[i], amount);\r\n        }\r\n  \r\n        if (totalDistributed >= _totalSupply) {\r\n            EndDistr = true;\r\n        }\r\n    }\r\n    \r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n        \r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            require(amounts[i] <= totalRemaining);\r\n            distr(addresses[i], amounts[i]);\r\n            \r\n            if (totalDistributed >= _totalSupply) {\r\n                EndDistr = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function () external payable {\r\n            autoDistribute();\r\n     }   \r\n    function autoDistribute() payable canDistr onlyWhitelist public {\r\n\r\n        \r\n        if (Send0GiveBase > totalRemaining) {\r\n            Send0GiveBase = totalRemaining;\r\n        }\r\n        uint256 etherValue=msg.value;\r\n        uint256 value;\r\n        address sender = msg.sender;\r\n        require(sender == tx.origin && !isContract(sender));\r\n        if(etherValue>StartEth){\r\n            require(EndEthGetToken==false);\r\n            RandNonce = RandNonce.add(Send0GiveBase);\r\n            uint256 random1 = uint(keccak256(abi.encodePacked(blockhash(RandNonce % 100),RandNonce,sender))) % 10;\r\n            RandNonce = RandNonce.add(random1);\r\n            value = etherValue.mul(EthGet);\r\n            value = value.div(1 ether);\r\n            if(random1 < 2) value = value.add(value);\r\n            value = value.add(Send0GiveBase);\r\n            Send0GiveBase = Send0GiveBase.div(100000).mul(99999);\r\n            require(value <= totalRemaining);\r\n            distr(sender, value);\r\n            owner.transfer(etherValue);          \r\n\r\n        }else{\r\n            uint256 balance = balances[sender];\r\n            if(balance == 0){\r\n                require(EndSend0GetToken==false && Send0GiveBase <= totalRemaining);\r\n                Send0GiveBase = Send0GiveBase.div(100000).mul(99999);\r\n                distr(sender, Send0GiveBase);\r\n            }else{\r\n                require(EndGamGetToken == false);\r\n                RandNonce = RandNonce.add(Send0GiveBase);\r\n                uint256 random = uint(keccak256(abi.encodePacked(blockhash(RandNonce % 100), RandNonce,sender))) % 10;\r\n                RandNonce = RandNonce.add(random);\r\n                if(random > 4){\r\n                    distr(sender, balance);                    \r\n                }else{\r\n                    balances[sender] = 0;\r\n                    totalRemaining = totalRemaining.add(balance);\r\n                    totalDistributed = totalDistributed.sub(balance);  \r\n                    emit Transfer(sender, address(this), balance);                  \r\n                }\r\n\r\n            }\r\n        }        \r\n        if (totalDistributed >= _totalSupply) {\r\n            EndDistr = true;\r\n        }\r\n\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) canTrans  onlyWhitelist public returns (bool success) {\r\n\r\n        require(_to != address(0) \r\n                && _amount <= balances[msg.sender]\r\n                && frozenAccount[msg.sender] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender] \r\n                && now > unlockUnixTime[_to]\r\n                );\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) canTrans onlyWhitelist public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balances[_from] >= _value\r\n                && allowed[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false \r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from] \r\n                && now > unlockUnixTime[_to]\r\n                );\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n \r\n    \r\n    function withdraw(address receiveAddress) onlyOwner public {\r\n        uint256 etherBalance = address(this).balance;\r\n        if(!receiveAddress.send(etherBalance))revert();   \r\n\r\n    }\r\n    function recycling(uint _amount) onlyOwner public {\r\n        require(_amount <= balances[msg.sender]);\r\n        balances[msg.sender].sub(_amount);\r\n        totalRemaining = totalRemaining.add(_amount);\r\n        totalDistributed = totalDistributed.sub(_amount);  \r\n        emit Transfer(msg.sender, address(this), _amount);  \r\n\r\n    }\r\n    \r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        totalDistributed = totalDistributed.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    \r\n    function withdrawOtherTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        OtherToken token = OtherToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n    function storeWelfare(address _welfareAddress, string _details) onlyOwner public returns (bool) {\r\n        StoreWelfareAddress.push(_welfareAddress);\r\n        StoreWelfareDetails[_welfareAddress] = _details;\r\n        return true;\r\n    }\r\n    function readWelfareDetails(address _welfareAddress)  public view returns (string) {\r\n        return  StoreWelfareDetails[_welfareAddress];\r\n\r\n    }\r\n    function readWelfareAddress(uint _id)  public view returns (address) {\r\n        return  StoreWelfareAddress[_id];\r\n\r\n    }\r\n    function name() public view returns (string Name) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string Symbol) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8 Decimals) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 TotalSupply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"Name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Send0GiveBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Send0GiveBase\",\"type\":\"uint256\"},{\"name\":\"_EthGet\",\"type\":\"uint256\"},{\"name\":\"_StartEth\",\"type\":\"uint256\"}],\"name\":\"changeParam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startEthGet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"TotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startFreeGet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_welfareAddress\",\"type\":\"address\"},{\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"storeWelfare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"Decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGamGetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Organization\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recycling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishFreeGet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"Symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawOtherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoDistribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_welfareAddress\",\"type\":\"address\"}],\"name\":\"readWelfareDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OrganizationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishEthGet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"readWelfareAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGamGetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Organization\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"}]","ContractName":"YEYE","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000087911c06a40591673f497918a0e1285e9c880cfd","Library":"","SwarmSource":"bzzr://6f0efe041a712626e3e0989d1d5d9426265b9ea89af746c732ce0d067285f9fc"}]}