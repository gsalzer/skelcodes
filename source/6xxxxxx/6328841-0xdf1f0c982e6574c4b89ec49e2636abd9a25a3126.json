{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address who) public constant returns (uint256 value);\r\n    function allowance(address owner, address spender) public constant returns (uint256 permitted);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool ok);\r\n    function approve(address spender, uint256 value) public returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HyipProfit is ERC20 {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"HYIP Profit\";\r\n    string public constant symbol = \"HYIP\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    uint256 initialSupply = 450000000000000;\r\n\r\n    uint256 constant preSaleSoftCap = 31250000000000;\r\n\r\n    uint256 public preSaleFund = 0;\r\n    uint256 public spentFunds = 0;\r\n    uint256 public IcoFund = 0;\r\n\r\n    uint256 public soldTokens = 0; //reduces when somebody returns money\r\n\r\n    mapping (address => uint256) tokenBalances; //amount of tokens each address holds\r\n    mapping (address => uint256) preSaleWeiBalances; //amount of Wei, paid for tokens on preSale. Used only before project completed.\r\n    mapping (address => uint256) weiBalances; //amount of Wei, paid for tokens that smb holds. Used only before project completed.\r\n\r\n    uint256 public currentStage = 0;\r\n    tokenAddressGetter tg;\r\n\r\n    bool public isICOfinalized = false;\r\n\r\n    address public HyipProfitTokenTeamAddress;\r\n    address public utilityTokenAddress = 0x0;\r\n\r\n    modifier onlyTeam {\r\n        if (msg.sender == HyipProfitTokenTeamAddress) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (uint256 => address) teamAddresses;\r\n\r\n    uint256 currentDividendsRound;\r\n    mapping (uint256 => uint256) dividendsPerTokenPerRound;\r\n    mapping (uint256 => mapping (address => uint256)) poolBalances;\r\n    mapping (address => uint256) lastWithdrawal;\r\n\r\n    event dividendsReceived (uint256 round, uint256 totalValue, uint256 dividendsPerToken);\r\n    event dividendsWithdraw (address tokenHolder, uint256 valueInWei);\r\n    event tokensReceived (address from, uint256 tokensAmount);\r\n    event tokensWithdrawal (address to, uint256 tokensAmount);\r\n\r\n    event StageSubmittedAndEtherPassedToTheTeam(uint256 stage, uint256 when, uint256 weiAmount);\r\n    event etherWithdrawFromTheContract(address tokenHolder, uint256 numberOfTokensSoldBack, uint256 weiValue);\r\n    event Burned(address indexed from, uint256 amount);\r\n\r\n    // ERC20 interface implementation\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return initialSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenHolder) public view returns (uint256 balance) {\r\n        return tokenBalances[tokenHolder];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        if (tokenBalances[msg.sender] >= value && value > 0) {\r\n            if (to == address(this)) {\r\n                if (!isICOfinalized) {\r\n                    returnAllAvailableFunds();\r\n                    return true;\r\n                }\r\n                else {\r\n                    passTokensToTheDividendsPool(value);\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                return transferTokensAndEtherValue(msg.sender, to, value, getHoldersAverageTokenPrice(msg.sender).mul(value) , getUsersPreSalePercentage(msg.sender));\r\n            }\r\n        } else return false;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        if (tokenBalances[from]>=value && allowed[from][to] >= value && value > 0) {\r\n            if (transferTokensAndEtherValue(from, to, value, getHoldersAverageTokenPrice(from).mul(value), getUsersPreSalePercentage(from))){\r\n                allowed[from][to] = allowed[from][to].sub(value);\r\n                if (from == address(this) && poolBalanceOf(to) >= value) {\r\n                    if (withdrawDividends(to)) {\r\n                        poolBalances[currentDividendsRound][to] = poolBalances[currentDividendsRound][to].sub(value);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        if ((value != 0) && (tokenBalances[msg.sender] >= value)){\r\n            allowed[msg.sender][spender] = value;\r\n            emit Approval (msg.sender, spender, value);\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Constructor, fallback, return funds\r\n\r\n    constructor () public {\r\n        HyipProfitTokenTeamAddress = msg.sender;\r\n        currentDividendsRound = 0;\r\n        tokenBalances[address(this)] = initialSupply;\r\n        teamAddresses[0] = HyipProfitTokenTeamAddress;\r\n        teamAddresses[1] = 0xcC6bCF304d0Ada4Bc7B00Aa1c2c463FBEc263B7e;\r\n        teamAddresses[2] = 0x1F16BE21574FA46846fCfeae5ef587c29200f93e;\r\n        teamAddresses[3] = 0x93A10f35Bc5439E419fdDcE04Ea44779B0E1017C;\r\n        teamAddresses[4] = 0x71bAfdD5bd44D3e1038fE4c0Bc486fb4BB67b806;\r\n    }\r\n\r\n    function () public payable {\r\n        if (!isICOfinalized) {\r\n            uint256 currentPrice = getCurrentSellPrice();\r\n            uint256 valueInWei = 0;\r\n            uint256 tokensToPass = 0;\r\n            uint256 preSalePercent = 0;\r\n\r\n            require (msg.value >= currentPrice);\r\n\r\n            tokensToPass = msg.value.div(currentPrice);\r\n\r\n            require (tokenBalances[address(this)]>= tokensToPass);\r\n\r\n            valueInWei = tokensToPass.mul(currentPrice);\r\n            soldTokens = soldTokens.add(tokensToPass);\r\n\r\n            if (currentStage == 0) {\r\n                preSaleWeiBalances [address(this)] = preSaleWeiBalances [address(this)].add(valueInWei);\r\n                preSalePercent = 100;\r\n                preSaleFund = preSaleFund.add(msg.value);\r\n            }\r\n            else {\r\n                weiBalances[address(this)] = weiBalances[address(this)].add(valueInWei);\r\n                preSalePercent = 0;\r\n                IcoFund = IcoFund.add(msg.value);\r\n            }\r\n\r\n            transferTokensAndEtherValue(address(this), msg.sender, tokensToPass, valueInWei, preSalePercent);\r\n        }\r\n        else {\r\n            require (msg.value >= 10**18);\r\n            topUpDividends();\r\n        }\r\n    }\r\n\r\n    function returnAllAvailableFunds() public {\r\n        require (tokenBalances[msg.sender]>0); //you need to be a tokenHolder\r\n        require (!isICOfinalized); //you can not return tokens after project is completed\r\n\r\n        uint256 preSaleWei = getPreSaleWeiToReturn(msg.sender);\r\n        uint256 IcoWei = getIcoWeiToReturn(msg.sender);\r\n        uint256 weiToReturn = preSaleWei.add(IcoWei);\r\n\r\n        uint256 amountOfTokensToReturn = tokenBalances[msg.sender];\r\n\r\n        require (amountOfTokensToReturn>0);\r\n\r\n        uint256 preSalePercentage = getUsersPreSalePercentage(msg.sender);\r\n\r\n        transferTokensAndEtherValue(msg.sender, address(this), amountOfTokensToReturn, weiToReturn, preSalePercentage);\r\n        emit etherWithdrawFromTheContract(msg.sender, amountOfTokensToReturn, IcoWei.add(preSaleWei));\r\n        preSaleWeiBalances[address(this)] = preSaleWeiBalances[address(this)].sub(preSaleWei);\r\n        weiBalances[address(this)] = weiBalances[address(this)].sub(IcoWei);\r\n        soldTokens = soldTokens.sub(amountOfTokensToReturn);\r\n        msg.sender.transfer(weiToReturn);\r\n\r\n        preSaleFund = preSaleFund.sub(preSaleWei);\r\n        IcoFund = IcoFund.sub(IcoWei);\r\n    }\r\n\r\n    function passTokensToTheDividendsPool(uint256 amount) internal {\r\n        if (tokenBalances[msg.sender] >= amount) {\r\n            tokenBalances[address(this)] = tokenBalances[address(this)].add(amount);\r\n            tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(amount);\r\n            emit Transfer(msg.sender, address(this), amount);\r\n\r\n            allowed[address(this)][msg.sender] = allowed[address(this)][msg.sender].add(amount);\r\n            emit Approval (address(this), msg.sender, amount);\r\n\r\n            if (poolBalanceOf(msg.sender) == 0) lastWithdrawal[msg.sender] = currentDividendsRound;\r\n            poolBalances[currentDividendsRound][msg.sender] = poolBalances[currentDividendsRound][msg.sender].add(amount);\r\n            emit tokensReceived(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function topUpDividends() public payable {\r\n        require (msg.value >= 10**18);\r\n        uint256 dividends = msg.value;\r\n        uint256 tokensInPool = balanceOf(address(this));\r\n        dividendsPerTokenPerRound[currentDividendsRound] = dividends.div(tokensInPool);\r\n        emit dividendsReceived (currentDividendsRound, dividends, dividendsPerTokenPerRound[currentDividendsRound]);\r\n        currentDividendsRound = currentDividendsRound.add(1);\r\n    }\r\n\r\n    function withdrawDividends(address holder) public returns (bool success) {\r\n        require (poolBalanceOf(holder) > 0);\r\n        uint256 totalDividendsForHolder = dividendsOf(holder);\r\n        if (totalDividendsForHolder == 0) return true;\r\n        uint256 holdersTotalTokensInPool = 0;\r\n\r\n        for (uint256 i = lastWithdrawal[holder]; i < currentDividendsRound; i = i.add(1)) {\r\n            holdersTotalTokensInPool = holdersTotalTokensInPool.add(poolBalances[i][holder]);\r\n            poolBalances[i][holder] = 0;\r\n        }\r\n\r\n        holder.transfer(totalDividendsForHolder);\r\n        emit dividendsWithdraw (holder, totalDividendsForHolder);\r\n        poolBalances[currentDividendsRound][holder] = holdersTotalTokensInPool;\r\n        lastWithdrawal[holder] = currentDividendsRound;\r\n        return true;\r\n    } //AnyBody can call\r\n\r\n    // View functions\r\n\r\n    function dividendsOf(address holder) public view returns (uint256 dividendsAmount) {\r\n        uint256 dividends = 0;\r\n        for (uint256 i = lastWithdrawal[holder]; i < currentDividendsRound; i = i.add(1)) {\r\n            for(uint256 j = lastWithdrawal[holder]; j <= i; j = j.add(1)) {\r\n                if (poolBalances[j][holder]>0 && dividendsPerTokenPerRound[i] > 0)\r\n                dividends = dividends.add(poolBalances[j][holder].mul(dividendsPerTokenPerRound[i]));\r\n            }\r\n        }\r\n        return dividends;\r\n    }\r\n\r\n    function icoFinalized() public view returns (bool) {\r\n        return isICOfinalized;\r\n    }\r\n\r\n    function poolBalanceOf(address holder) public view returns (uint256 balance){\r\n        uint256 holdersTotalTokensInThePool = 0;\r\n        for (uint256 i = lastWithdrawal[msg.sender]; i <= currentDividendsRound; i = i.add(1)) {\r\n            holdersTotalTokensInThePool = holdersTotalTokensInThePool.add(poolBalances[i][holder]);\r\n        }\r\n        return holdersTotalTokensInThePool;\r\n    }\r\n\r\n    function getWeiBalance(address a) public view returns (uint256 weiBalance) {\r\n        return weiBalances[a];\r\n    }\r\n\r\n    function getUsersPreSalePercentage(address a) public view returns (uint256 preSaleTokensPercent) {\r\n        if (!isICOfinalized && (preSaleWeiBalances[a].add(weiBalances[a]) > 0)) {\r\n            uint256 result = (preSaleWeiBalances[a].mul(100)).div((preSaleWeiBalances[a].add(weiBalances[a])));\r\n            require (result<=100);\r\n            return result;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getTotalWeiAvailableToReturn(address a) public view returns (uint256 amount) {\r\n        return getPreSaleWeiToReturn(a).add(getIcoWeiToReturn(a));\r\n    }\r\n\r\n    function getPreSaleWeiToReturn (address holder) public view returns (uint256 amount) {\r\n        if (currentStage == 0) return preSaleWeiBalances[holder];\r\n        if (currentStage == 1) return preSaleWeiBalances[holder].mul(7).div(10);\r\n        if (currentStage == 2) return preSaleWeiBalances[holder].mul(4).div(10);\r\n        return 0;\r\n    }\r\n\r\n    function getIcoWeiToReturn (address holder) public view returns (uint256 amount) {\r\n        if (currentStage <= 3) return weiBalances[holder];\r\n        if (currentStage == 4) return weiBalances[holder].mul(7).div(10);\r\n        if (currentStage == 5) return weiBalances[holder].mul(4).div(10);\r\n        return 0;\r\n    }\r\n\r\n    function getHoldersAverageTokenPrice(address holder) public view returns (uint256 avPriceInWei) {\r\n        if (!isICOfinalized)\r\n            return (weiBalances[holder].add(preSaleWeiBalances[holder])).div(tokenBalances[holder]);\r\n        return 0;\r\n    }\r\n\r\n    function getCurrentSellPrice() public view returns (uint256 priceInWei) {\r\n        if (isICOfinalized) return 0;\r\n        if (currentStage == 0) return 10**6 * 8 ; //this is equal to 0.0008 ETH for 1 token\r\n        if (currentStage == 1) return 10**6 * 16;\r\n        if (currentStage == 2) return 10**6 * 24;\r\n        if (currentStage == 3) return 10**6 * 32;\r\n        return 0;\r\n    }\r\n\r\n    function getAvailableFundsForTheTeam() public view returns (uint256 amount) {\r\n        if (currentStage == 1) return preSaleFund.mul(3).div(10);\r\n        if (currentStage == 2) return (preSaleFund.sub(spentFunds)).div(2);\r\n        if (currentStage == 3) return preSaleFund.sub(spentFunds);\r\n\r\n        if (currentStage == 4) return IcoFund.mul(3).div(10);\r\n        if (currentStage == 5) return (IcoFund.sub(spentFunds)).div(2);\r\n        if (currentStage == 6) return address(this).balance;\r\n    }\r\n\r\n    function checkIfMissionCompleted() public view returns (bool success) {\r\n        if (currentStage == 0 && soldTokens >= preSaleSoftCap) return true;\r\n\r\n        if (currentStage == 1 && preSaleFund.mul(3).div(5) <= IcoFund) return true;\r\n        if (currentStage == 2 && preSaleFund.mul(6).div(5) <= IcoFund) return true;\r\n\r\n        if (currentStage>=3 &&\r\n        (utilityTokenAddress == 0x0 || tg.getBeneficiaryAddress() != address(this))) return false;\r\n\r\n        if (currentStage == 3 && preSaleFund.mul(2) <= IcoFund) return true;\r\n\r\n        if (currentStage == 4 && utilityTokenAddress.balance >= IcoFund.mul(3).div(5)) return true;\r\n        if (currentStage == 5 && utilityTokenAddress.balance >= IcoFund.mul(6).div(5)) return true;\r\n        if (currentStage == 6 && utilityTokenAddress.balance >= IcoFund.mul(2)) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    // Team functions\r\n\r\n    function setUtilityTokenAddressOnce(address a) public onlyTeam {\r\n        if (utilityTokenAddress == 0x0) {\r\n            utilityTokenAddress = a;\r\n            tg = tokenAddressGetter(a);\r\n        }\r\n    }\r\n\r\n    function finalizeICO() internal onlyTeam {\r\n        require(!isICOfinalized); // this function can be called only once\r\n        passTokensToTheTeam();\r\n        burnUndistributedTokens(); // undistributed tokens are destroyed\r\n        isICOfinalized = true;\r\n    }\r\n\r\n    function passTokensToTheTeam() internal returns (uint256 tokenAmount) { //This function passes tokens to the team without weiValue, so the team can not withdraw ether by returning tokens to the contract\r\n        uint256 tokensForEachMember = soldTokens.div(20); // 4% for each team member\r\n        uint256 tokensToPass = tokensForEachMember.mul(5);\r\n\r\n        for (uint256 i = 0; i< 5; i = i.add(1)) {\r\n            address teamMember = teamAddresses[i];\r\n            tokenBalances[teamMember] = tokenBalances[teamMember].add(tokensForEachMember);\r\n            emit Transfer(address(this), teamMember, tokensForEachMember);\r\n        }\r\n\r\n        soldTokens = soldTokens.add(tokensToPass);\r\n        return tokensToPass;\r\n    }\r\n\r\n    function submitNextStage() public onlyTeam returns (bool success) {\r\n        if (!checkIfMissionCompleted()) return false;\r\n        if (currentStage==3) spentFunds = 0;\r\n        if (currentStage == 6) finalizeICO();\r\n\r\n        currentStage = currentStage.add(1);\r\n        passEtherToTheTeam();\r\n\r\n        return true;\r\n    }\r\n\r\n    function passEtherToTheTeam() internal returns (bool success) {\r\n        uint256 weiAmount = getAvailableFundsForTheTeam();\r\n        HyipProfitTokenTeamAddress.transfer(weiAmount);\r\n        spentFunds = spentFunds.add(weiAmount);\r\n        emit StageSubmittedAndEtherPassedToTheTeam(currentStage, now, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferTokensAndEtherValue(address from, address to, uint256 value, uint256 weiValue, uint256 preSalePercent) internal returns (bool success){\r\n        if (tokenBalances[from] >= value) {\r\n            tokenBalances[to] = tokenBalances[to].add(value);\r\n            tokenBalances[from] = tokenBalances[from].sub(value);\r\n\r\n            if (!isICOfinalized) {\r\n                preSaleWeiBalances[from] = preSaleWeiBalances[from].sub(weiValue.mul(preSalePercent).div(100));\r\n                preSaleWeiBalances[to] = preSaleWeiBalances[to].add(weiValue.mul(preSalePercent).div(100));\r\n\r\n                require (preSalePercent<=100);\r\n\r\n                weiBalances[from] = weiBalances[from].sub(weiValue.mul(100 - preSalePercent).div(100));\r\n                weiBalances[to] = weiBalances[to].add(weiValue.mul(100 - preSalePercent).div(100));\r\n            }\r\n            emit Transfer(from, to, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function burnUndistributedTokens() internal {\r\n        uint256 toBurn = initialSupply.sub(soldTokens);\r\n        initialSupply = initialSupply.sub(toBurn);\r\n        tokenBalances[address(this)] = 0;\r\n        emit Burned(address(this), toBurn);\r\n    }\r\n}\r\n\r\ncontract tokenAddressGetter {\r\n    function getBeneficiaryAddress() public view returns (address);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"dividendsAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"poolBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"withdrawDividends\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnAllAvailableFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"topUpDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getUsersPreSalePercentage\",\"outputs\":[{\"name\":\"preSaleTokensPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getTotalWeiAvailableToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"utilityTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getPreSaleWeiToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setUtilityTokenAddressOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitNextStage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getWeiBalance\",\"outputs\":[{\"name\":\"weiBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableFundsForTheTeam\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSellPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOfinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HyipProfitTokenTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getIcoWeiToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkIfMissionCompleted\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHoldersAverageTokenPrice\",\"outputs\":[{\"name\":\"avPriceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividendsPerToken\",\"type\":\"uint256\"}],\"name\":\"dividendsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"dividendsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"tokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"tokensWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"StageSubmittedAndEtherPassedToTheTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberOfTokensSoldBack\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"etherWithdrawFromTheContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HyipProfit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f590d34655472276ea83b666d84bb9da4fc331bfcd649e87ff115e34d5b1441f"}]}