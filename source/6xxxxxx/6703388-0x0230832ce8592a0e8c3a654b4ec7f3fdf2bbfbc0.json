{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract\tInitAtomicSwap  {\r\n    \r\n    //Initiations store information about users first init\r\n    struct Initiations {\r\n        address addressFrom;\r\n        address addressTo;\r\n        bool isShow;\r\n        bool isInit;\r\n        uint blockTimestamp;\r\n        uint amount;\r\n        bytes32 hashSecret;\r\n    }\r\n    \r\n    //ConfirmedInitiations - struct for storing information \r\n    //about order that was already paid \r\n    struct ConfirmedInitiations {\r\n        address addressFrom;\r\n        address addressTo;\r\n        bool isShow;\r\n        bool isRedeem;\r\n        bool isInit;\r\n        uint blockTimestamp;\r\n        uint amount;\r\n        bytes32 hashSecret;\r\n    }\r\n\r\n    mapping(address=>Initiations) public inits;\r\n    \r\n    mapping(address=>mapping(bytes32=>ConfirmedInitiations)) public confirmedInits;\r\n    \r\n    modifier isInitCreated(address _addressOfInitiator) {\r\n\t    require(inits[_addressOfInitiator].isInit == false);\r\n\t    _;\r\n\t}\r\n\t\r\n\tmodifier isValidHashsecret(string _password, address _addressOfInitiator) {\r\n\t    require(inits[_addressOfInitiator].hashSecret == keccak256(abi.encodePacked(\r\n\t        inits[_addressOfInitiator].addressFrom,\r\n\t        inits[_addressOfInitiator].addressTo,\r\n\t        inits[_addressOfInitiator].amount,\r\n\t        inits[_addressOfInitiator].blockTimestamp,\r\n\t        _password)));\r\n\t    _;\r\n\t}\r\n\t\r\n\tmodifier isTxValid(address _addressOfInitiator, uint _blockTimestamp) {\r\n\t    require(inits[_addressOfInitiator].blockTimestamp >= _blockTimestamp);\r\n\t    _;\r\n\t}\r\n    \r\n    //addInit - this function will write data of order to mapping inits in Initiations struct with address of the sender key \r\n    function addInit(address _addressFrom, address _addressTo, uint _amount, string _password) public \r\n    returns(bytes32) {\r\n        \r\n        if(inits[_addressFrom].isInit == true) {\r\n            return 0;\r\n        }\r\n        inits[_addressFrom].addressFrom = _addressFrom;\r\n        inits[_addressFrom].addressTo = _addressTo;\r\n        inits[_addressFrom].isShow = false;\r\n        inits[_addressFrom].isInit = true;\r\n        inits[_addressFrom].blockTimestamp = now;\r\n        inits[_addressFrom].amount = _amount;\r\n        \r\n        inits[_addressFrom].hashSecret = keccak256(abi.encodePacked(\r\n            _addressFrom, \r\n            _addressTo, \r\n            _amount, \r\n            inits[_addressFrom].blockTimestamp, \r\n            _password));\r\n        \r\n        return inits[_addressFrom].hashSecret;\r\n\t}\r\n\t\r\n\t//getInit - this function returns data about order of the special address\r\n\tfunction getInit(address _addressOfInitiator) public view returns(address, address, uint, uint, bytes32) {\r\n\t    return (\r\n\t        inits[_addressOfInitiator].addressFrom, \r\n\t        inits[_addressOfInitiator].addressTo, \r\n\t        inits[_addressOfInitiator].amount,\r\n\t        inits[_addressOfInitiator].blockTimestamp,\r\n\t        inits[_addressOfInitiator].hashSecret\r\n\t        );\r\n\t}\r\n\t\r\n\t//confirmInit function that write information about already sended tx\r\n\tfunction confirmInit(address _addressOfInitiator, string _password, bytes32 _txHash, uint _blockTimestamp) public \r\n\tisValidHashsecret(_password, _addressOfInitiator) \r\n\tisTxValid(_addressOfInitiator, _blockTimestamp) \r\n\treturns(bool) {\r\n\t    confirmedInits[_addressOfInitiator][_txHash].addressFrom = inits[_addressOfInitiator].addressFrom;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].addressTo = inits[_addressOfInitiator].addressTo;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].isShow = inits[_addressOfInitiator].isShow;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].isInit = inits[_addressOfInitiator].isInit;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].amount = inits[_addressOfInitiator].amount;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].blockTimestamp = inits[_addressOfInitiator].blockTimestamp;\r\n\t    confirmedInits[_addressOfInitiator][_txHash].hashSecret = inits[_addressOfInitiator].hashSecret;\r\n\t    \r\n\t    delete(inits[_addressOfInitiator]);\r\n\t    \r\n\t    return true;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addressOfInitiator\",\"type\":\"address\"},{\"name\":\"_password\",\"type\":\"string\"},{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"confirmInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inits\",\"outputs\":[{\"name\":\"addressFrom\",\"type\":\"address\"},{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"isShow\",\"type\":\"bool\"},{\"name\":\"isInit\",\"type\":\"bool\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hashSecret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressFrom\",\"type\":\"address\"},{\"name\":\"_addressTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"addInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"confirmedInits\",\"outputs\":[{\"name\":\"addressFrom\",\"type\":\"address\"},{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"isShow\",\"type\":\"bool\"},{\"name\":\"isRedeem\",\"type\":\"bool\"},{\"name\":\"isInit\",\"type\":\"bool\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"hashSecret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addressOfInitiator\",\"type\":\"address\"}],\"name\":\"getInit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InitAtomicSwap","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://259621cdb7d90c593808859bd3424c7488cd8d598b227a29e69c77c8e4c87821"}]}