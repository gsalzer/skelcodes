{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Token { // ERC20 standard\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\n */\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\t\r\n\tfunction safeDiv(uint a, uint b) internal pure returns (uint) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n    // mitigate short address attack\r\n    // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n    // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is Token, SafeMath {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // TODO: update tests to expect throw\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // TODO: update tests to expect throw\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        emit Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n}\r\n\r\ncontract Lucre is StandardToken {\r\n\r\n    // FIELDS\r\n\r\n    string public name = \"LUCRE\";\r\n    string public symbol = \"LCR\";\r\n    uint256 public decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    uint256 public tokenCap = 12500000 * 10**18;  // 10/80 \t\t\t\t\t\t\t  \r\n\r\n    // crowdsale parameters\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // root control\r\n    address public fundWallet;\r\n    // control of liquidity and limited control of updatePrice\r\n    address public controlWallet;\r\n    // company reserve, advisor fee & marketing\r\n    address public companyWallet;\r\n\r\n    // fundWallet controlled state variables\r\n    // halted: halt buying due to emergency, tradeable: signal that assets have been acquired\r\n    bool public halted = false;\r\n    bool public tradeable = false;\r\n\r\n    // -- totalSupply defined in StandardToken\r\n    // -- mapping to token balances done in StandardToken\r\n\r\n\r\n    uint256 public rate;\r\n    uint256 public minAmount = 0.10 ether;\r\n\r\n    // maps addresses\r\n    mapping (address => bool) public whitelist;\r\n\r\n\r\n    // EVENTS\r\n\r\n    event Buy(address indexed participant, address indexed beneficiary, uint256 ethValue, uint256 amountTokens);\r\n    event AllocatePresale(address indexed participant, uint256 amountTokens);\r\n    event Whitelist(address indexed participant);\r\n    event RateUpdate(uint256 rate);\r\n\r\n\r\n    // MODIFIERS\r\n\r\n    modifier isTradeable { // exempt companyWallet and fundWallet to allow company allocations\r\n        require(tradeable || msg.sender == fundWallet || msg.sender == companyWallet);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelist {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundWallet {\r\n        require(msg.sender == fundWallet);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagingWallets {\r\n        require(msg.sender == controlWallet || msg.sender == fundWallet || msg.sender == companyWallet);\r\n        _;\r\n    }\r\n\r\n    modifier only_if_controlWallet {\r\n        if (msg.sender == controlWallet) _;\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor (address controlWalletInput, address companyWalletInput, uint preSaleDays, uint mainSaleDays, uint256 rateInput) public {\r\n        require(controlWalletInput != address(0));\r\n        require(rateInput > 0);\r\n        startTime = now + preSaleDays * 1 days; // 30 days of presales (default)\r\n        fundWallet = msg.sender;\r\n        controlWallet = controlWalletInput;\r\n        companyWallet = companyWalletInput;\r\n        whitelist[fundWallet] = true;\r\n        whitelist[controlWallet] = true;\r\n        whitelist[companyWallet] = true;\r\n        endTime = now + (preSaleDays + mainSaleDays) * 1 days; // mainSaleDays = 28 days (default)\r\n\t\trate = rateInput;\r\n\r\n    }\r\n\r\n    // METHODS\r\n\r\n    // allows controlWallet to update the price within a time constraint, allows fundWallet complete control\r\n    function updateRate(uint256 newRate) external onlyManagingWallets {\r\n        require(newRate > 0);\r\n        // either controlWallet command is compliant or transaction came from fundWallet\r\n        rate = newRate;\r\n        emit RateUpdate(rate);\r\n    }\r\n\r\n\r\n    function allocateTokens(address participant, uint256 amountTokens) private {\r\n        // 20% of total allocated for PR, Marketing, Team, Advisers\r\n        uint256 companyAllocation = safeMul(amountTokens, 25000000000000000) / 100000000000000000; //20/80\r\n        // check that token cap is not exceeded\r\n        uint256 newTokens = safeAdd(amountTokens, companyAllocation);\r\n        require(safeAdd(totalSupply, newTokens) <= tokenCap);\r\n        // increase token supply, assign tokens to participant\r\n        totalSupply = safeAdd(totalSupply, newTokens);\r\n        balances[participant] = safeAdd(balances[participant], amountTokens);\r\n        balances[companyWallet] = safeAdd(balances[companyWallet], companyAllocation);\r\n    }\r\n\r\n    function allocatePresaleTokens(address participant, uint amountTokens) external onlyFundWallet {\r\n        require(now < endTime);\r\n        require(participant != address(0));\r\n        whitelist[participant] = true; // automatically whitelist accepted presale\r\n        allocateTokens(participant, amountTokens);\r\n        emit Whitelist(participant);\r\n        emit AllocatePresale(participant, amountTokens);\r\n    }\r\n\r\n    function verifyParticipant(address participant) external onlyManagingWallets {\r\n        whitelist[participant] = true;\r\n        emit Whitelist(participant);\r\n    }\r\n\r\n    function buy() external payable {\r\n        buyTo(msg.sender);\r\n    }\r\n\r\n    function buyTo(address participant) public payable onlyWhitelist {\r\n        require(!halted);\r\n        require(participant != address(0));\r\n        require(msg.value >= minAmount);\r\n        require(now >= startTime && now < endTime);\r\n\t\tuint256 money = safeMul(msg.value, rate);\r\n\t\tuint256 bonusMoney = safeMul(money, getBonus()) / 100;\r\n\t\tuint256 tokensToBuy = safeAdd(money, bonusMoney);  \r\n        allocateTokens(participant, tokensToBuy);\r\n        // send ether to fundWallet\r\n        fundWallet.transfer(msg.value);\r\n        emit Buy(msg.sender, participant, msg.value, tokensToBuy);\r\n    }\r\n\r\n\r\n    function getBonus() internal view returns (uint256) {\r\n        uint256 icoDuration = safeSub(now, startTime);\r\n        uint256 discount;\r\n        if (icoDuration < 7 days) { \r\n            discount = 0;\r\n        } else if (icoDuration < 14 days) { \r\n            discount = 10; // 10% bonus\r\n        } else if (icoDuration < 21 days) { \r\n            discount = 15; // 15% bonus\r\n        } else {\r\n            discount = 20; // 20% bonus\r\n        } \r\n\t\treturn discount;\r\n    }\r\n\r\n\r\n    function changeFundWallet(address newFundWallet) external onlyFundWallet {\r\n        require(newFundWallet != address(0));\r\n        fundWallet = newFundWallet;\r\n    }\r\n\r\n    function changeControlWallet(address newControlWallet) external onlyFundWallet {\r\n        require(newControlWallet != address(0));\r\n        controlWallet = newControlWallet;\r\n    }\r\n\r\n    function updateFundingStartTime(uint256 newStartTime) external onlyFundWallet {\r\n        require(now < startTime);\r\n        require(now < newStartTime);\r\n        startTime = newStartTime;\r\n    }\r\n\r\n    function updateFundingEndTime(uint256 newEndTime) external onlyFundWallet {\r\n        require(now < endTime);\r\n        require(now < newEndTime);\r\n        endTime = newEndTime;\r\n    }\r\n\r\n    function halt() external onlyFundWallet {\r\n        halted = true;\r\n    }\r\n    function unhalt() external onlyFundWallet {\r\n        halted = false;\r\n    }\r\n\r\n    function enableTrading() external onlyFundWallet {\r\n        require(now > endTime);\r\n        tradeable = true;\r\n    }\r\n\r\n    // fallback function\r\n    function() external payable {\r\n        buyTo(msg.sender);\r\n    }\r\n\r\n    function claimTokens(address _token) external onlyFundWallet {\r\n        require(_token != address(0));\r\n        Token token = Token(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(fundWallet, balance);\r\n    }\r\n\r\n    // prevent transfers until trading allowed\r\n    function transfer(address _to, uint256 _value) public isTradeable returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public isTradeable returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"updateFundingEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newControlWallet\",\"type\":\"address\"}],\"name\":\"changeControlWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"verifyParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"allocatePresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"updateFundingStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"buyTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"controlWalletInput\",\"type\":\"address\"},{\"name\":\"companyWalletInput\",\"type\":\"address\"},{\"name\":\"preSaleDays\",\"type\":\"uint256\"},{\"name\":\"mainSaleDays\",\"type\":\"uint256\"},{\"name\":\"rateInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AllocatePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Lucre","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001868561c3ff89e92602afa604f781e215284c31d000000000000000000000000b4d5056d84d81f0921f48b760d81a23ef56f040c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000c8","Library":"","SwarmSource":"bzzr://4f110c9d468c8ed59ad06290ea2cafa00afa0a7eaeb9725783407d0007a31f62"}]}