{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n * from OpenZeppelin\r\n * https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @dev Contract that is working with ERC223 tokens.\r\n*/\r\ncontract ContractReceiver {     \r\n    struct TKN {\r\n        address sender;\r\n        uint256 value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }    \r\n    \r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @dev PetToken\r\n* @dev Author: Solange Gueiros\r\n*/\r\ncontract PetToken {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    address public ownerMaster;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    address public adminAddress;\r\n    address public auditAddress;\r\n    address public marketMakerAddress;\r\n    address public mintFeeReceiver;\r\n    address public transferFeeReceiver;\r\n    address public burnFeeReceiver; \r\n\r\n    uint256 public decimalpercent = 1000000;            //precisÃ£o da porcentagem (4) + 2 casas para 100%   \r\n    struct feeStruct {        \r\n        uint256 abs;\r\n        uint256 prop;\r\n    }\r\n    feeStruct public mintFee;\r\n    feeStruct public transferFee;\r\n    feeStruct public burnFee;\r\n    uint256 public feeAbsMax;\r\n    uint256 public feePropMax;\r\n\r\n    struct approveMintStruct {        \r\n        uint256 amount;\r\n        address admin;\r\n        address audit;\r\n        address marketMaker;\r\n    }\r\n    mapping (address => approveMintStruct) public mintApprove;\r\n\r\n    struct approveBurnStruct {\r\n        uint256 amount;\r\n        address admin;\r\n    }    \r\n    mapping (address => approveBurnStruct) public burnApprove;\r\n\r\n    uint256 public transferWait;\r\n    uint256 public transferMaxAmount;\r\n    uint256 public lastTransfer;\r\n    bool public speedBump;\r\n\r\n\r\n    constructor(address _ownerMaster, string _name, string _symbol,\r\n            uint256 _feeAbsMax, uint256 _feePropMax,\r\n            uint256 _transferWait, uint256 _transferMaxAmount\r\n        ) public {\r\n        decimals = 18;\r\n        owner = msg.sender;\r\n        name = _name;\r\n        symbol = _symbol;        \r\n        feeAbsMax = _feeAbsMax;\r\n        feePropMax = _feePropMax;        \r\n        ownerMaster = _ownerMaster;\r\n        transferWait = _transferWait;\r\n        transferMaxAmount = _transferMaxAmount;\r\n        lastTransfer = 0;        \r\n        speedBump = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifiers\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Only admin\");\r\n        _;\r\n    }\r\n    modifier onlyAudit() {\r\n        require(msg.sender == auditAddress, \"Only audit\");\r\n        _;\r\n    }\r\n    modifier onlyMarketMaker() {\r\n        require(msg.sender == marketMakerAddress, \"Only market maker\");\r\n        _;\r\n    }\r\n    modifier noSpeedBump() {\r\n        require(!speedBump, \"Speed bump activated\");\r\n        _;\r\n    }\r\n    modifier hasMintPermission(address _address) {\r\n        require(mintApprove[_address].admin != 0x0, \"Require admin approval\");\r\n        require(mintApprove[_address].audit != 0x0, \"Require audit approval\");\r\n        require(mintApprove[_address].marketMaker != 0x0, \"Require market maker approval\"); \r\n        _;\r\n    }     \r\n\r\n    /**\r\n    * @dev AlfaPetToken functions\r\n    */\r\n    function mint(address _to, uint256 _amount) public hasMintPermission(_to) canMint noSpeedBump {\r\n        uint256 fee = calcMintFee (_amount);\r\n        uint256 toValue = _amount.sub(fee);\r\n        _mint(mintFeeReceiver, fee);\r\n        _mint(_to, toValue);\r\n        _mintApproveClear(_to);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (speedBump) \r\n        {\r\n            //Verifica valor\r\n            require (_amount <= transferMaxAmount, \"Speed bump activated, amount exceeded\");\r\n\r\n            //Verifica frequencia\r\n            require (now > (lastTransfer + transferWait), \"Speed bump activated, frequency exceeded\");\r\n            lastTransfer = now;\r\n        }\r\n        uint256 fee = calcTransferFee (_amount);\r\n        uint256 toValue = _amount.sub(fee);\r\n        _transfer(transferFeeReceiver, fee);\r\n        _transfer(_to, toValue);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount) public onlyMarketMaker {\r\n        uint256 fee = calcBurnFee (_amount);\r\n        uint256 fromValue = _amount.sub(fee);\r\n        _transfer(burnFeeReceiver, fee);\r\n        _burn(msg.sender, fromValue);\r\n    }\r\n\r\n    /*\r\n    * @dev Calc Fees\r\n    */\r\n    function calcMintFee(uint256 _amount) public view returns (uint256) {\r\n        uint256 fee = 0;\r\n        fee = _amount.div(decimalpercent);\r\n        fee = fee.mul(mintFee.prop);\r\n        fee = fee.add(mintFee.abs);\r\n        return fee;\r\n    }\r\n\r\n    function calcTransferFee(uint256 _amount) public view returns (uint256) {\r\n        uint256 fee = 0;\r\n        fee = _amount.div(decimalpercent);\r\n        fee = fee.mul(transferFee.prop);\r\n        fee = fee.add(transferFee.abs);\r\n        return fee;\r\n    }\r\n\r\n    function calcBurnFee(uint256 _amount) public view returns (uint256) {\r\n        uint256 fee = 0;\r\n        fee = _amount.div(decimalpercent);\r\n        fee = fee.mul(burnFee.prop);\r\n        fee = fee.add(burnFee.abs);\r\n        return fee;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Set variables\r\n    */\r\n    function setAdmin(address _address) public onlyOwner returns (address) {\r\n        adminAddress = _address;\r\n        return adminAddress;\r\n    }\r\n    function setAudit(address _address) public onlyOwner returns (address) {\r\n        auditAddress = _address;\r\n        return auditAddress;\r\n    }\r\n    function setMarketMaker(address _address) public onlyOwner returns (address) {\r\n        marketMakerAddress = _address;    \r\n        return marketMakerAddress;\r\n    }\r\n\r\n    function setMintFeeReceiver(address _address) public onlyOwner returns (bool) {\r\n        mintFeeReceiver = _address;\r\n        return true;\r\n    }\r\n    function setTransferFeeReceiver(address _address) public onlyOwner returns (bool) {\r\n        transferFeeReceiver = _address;\r\n        return true;\r\n    }\r\n    function setBurnFeeReceiver(address _address) public onlyOwner returns (bool) {\r\n        burnFeeReceiver = _address;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set Fees\r\n    */\r\n    event SetFee(string action, string typeFee, uint256 value);\r\n\r\n    function setMintFeeAbs(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feeAbsMax, \"Must be less then maximum\");\r\n        mintFee.abs = _value;\r\n        emit SetFee(\"mint\", \"absolute\", _value);\r\n        return true;\r\n    }\r\n    function setMintFeeProp(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feePropMax, \"Must be less then maximum\");\r\n        mintFee.prop = _value;\r\n        emit SetFee(\"mint\", \"proportional\", _value);\r\n        return true;\r\n    }\r\n\r\n    function setTransferFeeAbs(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feeAbsMax, \"Must be less then maximum\");\r\n        transferFee.abs = _value;\r\n        emit SetFee(\"transfer\", \"absolute\", _value);\r\n        return true;\r\n    } \r\n    function setTransferFeeProp(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feePropMax, \"Must be less then maximum\");\r\n        transferFee.prop = _value;\r\n        emit SetFee(\"transfer\", \"proportional\", _value);\r\n        return true;\r\n    }\r\n\r\n    function setBurnFeeAbs(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feeAbsMax, \"Must be less then maximum\");\r\n        burnFee.abs = _value;\r\n        emit SetFee(\"burn\", \"absolute\", _value);\r\n        return true;\r\n    }\r\n    function setBurnFeeProp(uint256 _value) external onlyOwner returns (bool) {\r\n        require(_value < feePropMax, \"Must be less then maximum\");\r\n        burnFee.prop = _value;\r\n        emit SetFee(\"burn\", \"proportional\", _value);\r\n        return true;\r\n    }\r\n   \r\n    /*\r\n    * @dev Mint Approval\r\n    */\r\n    function mintApproveReset(address _address) public onlyOwner {\r\n        _mintApproveClear(_address);\r\n    }\r\n\r\n    function _mintApproveClear(address _address) internal {\r\n        mintApprove[_address].amount = 0;\r\n        mintApprove[_address].admin = 0x0;\r\n        mintApprove[_address].audit = 0x0;\r\n        mintApprove[_address].marketMaker = 0x0;\r\n    }\r\n\r\n    function mintAdminApproval(address _address, uint256 _value) public onlyAdmin {\r\n        if (mintApprove[_address].amount > 0) {\r\n            require(mintApprove[_address].amount == _value, \"Value is diferent\");\r\n        }\r\n        else {\r\n            mintApprove[_address].amount = _value;\r\n        }        \r\n        mintApprove[_address].admin = msg.sender;\r\n        \r\n        if ((mintApprove[_address].audit != 0x0) && (mintApprove[_address].marketMaker != 0x0))\r\n            mint(_address, _value);\r\n    }\r\n\r\n    function mintAdminCancel(address _address) public onlyAdmin {\r\n        require(mintApprove[_address].admin == msg.sender, \"Only cancel if the address is the same admin\");\r\n        mintApprove[_address].admin = 0x0;\r\n    }\r\n\r\n    function mintAuditApproval(address _address, uint256 _value) public onlyAudit {\r\n        if (mintApprove[_address].amount > 0) {\r\n            require(mintApprove[_address].amount == _value, \"Value is diferent\");\r\n        }\r\n        else {\r\n            mintApprove[_address].amount = _value;\r\n        }        \r\n        mintApprove[_address].audit = msg.sender;\r\n\r\n        if ((mintApprove[_address].admin != 0x0) && (mintApprove[_address].marketMaker != 0x0))\r\n            mint(_address, _value);\r\n    }\r\n\r\n    function mintAuditCancel(address _address) public onlyAudit {\r\n        require(mintApprove[_address].audit == msg.sender, \"Only cancel if the address is the same audit\");\r\n        mintApprove[_address].audit = 0x0;\r\n    }\r\n\r\n    function mintMarketMakerApproval(address _address, uint256 _value) public onlyMarketMaker {\r\n        if (mintApprove[_address].amount > 0) {\r\n            require(mintApprove[_address].amount == _value, \"Value is diferent\");\r\n        }\r\n        else {\r\n            mintApprove[_address].amount = _value;\r\n        }        \r\n        mintApprove[_address].marketMaker = msg.sender;\r\n\r\n        if ((mintApprove[_address].admin != 0x0) && (mintApprove[_address].audit != 0x0))\r\n            mint(_address, _value);\r\n    }\r\n\r\n    function mintMarketMakerCancel(address _address) public onlyMarketMaker {\r\n        require(mintApprove[_address].marketMaker == msg.sender, \"Only cancel if the address is the same marketMaker\");\r\n        mintApprove[_address].marketMaker = 0x0;\r\n    }\r\n\r\n    /*\r\n    * @dev SpeedBump\r\n    */\r\n    event SpeedBumpUpdated(bool value);\r\n    function setSpeedBump (bool _value) public onlyMasterOwner {  \r\n        speedBump = _value;\r\n        emit SpeedBumpUpdated(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev Ownable \r\n    * ownerMaster can not be changed.\r\n    */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);    \r\n\r\n    modifier onlyOwner() {\r\n        require((msg.sender == owner) || (msg.sender == ownerMaster), \"Only owner\");\r\n        _;\r\n    }\r\n    modifier onlyMasterOwner() {\r\n        require(msg.sender == ownerMaster, \"Only master owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"newOwner must be not 0x0\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Mintable token\r\n    */\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished, \"Mint is finished\");\r\n        _;\r\n    }\r\n    function finishMinting() public onlyMasterOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n    function _mint(address _account, uint256 _amount) internal canMint {\r\n        require(_account != 0, \"Address must not be zero\");\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_account] = balances[_account].add(_amount);\r\n        emit Transfer(address(0), _account, _amount);\r\n        emit Mint(_account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Burnable Token\r\n    */\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function _burn(address _account, uint256 _amount) internal {\r\n        require(_account != 0, \"Address must not be zero\");\r\n        require(_amount <= balances[_account], \"Insuficient funds\");\r\n\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        balances[_account] = balances[_account].sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n        emit Burn(_account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC20 token\r\n    */\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    uint256 private totalSupply_;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }    \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    function approve(address spender, uint256 value) public pure returns (bool success){\r\n        //Not implemented\r\n        return false;\r\n    }\r\n    function transferFrom(address from, address to, uint256 value) public pure returns (bool success){\r\n        //Not implemented\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev ERC223 token\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n  \r\n    function _transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) private returns (bool success) {                \r\n        if (isContract(_to)) {\r\n            if (balanceOf(msg.sender) < _value) revert(\"Insuficient funds\");\r\n            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n            balances[_to] = balanceOf(_to).add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(abi.encodePacked(_custom_fallback))), msg.sender, _value, _data));\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _value, bytes _data) private returns (bool success) {            \r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _value) private returns (bool success) {            \r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(_addr)\r\n        }\r\n        return (codeLength>0);\r\n    }\r\n\r\n    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert(\"Insuficient funds\");\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);        \r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n  \r\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert(\"Insuficient funds\");\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBurnFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mintAuditCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBurnFeeProp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAudit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePropMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"name\":\"abs\",\"type\":\"uint256\"},{\"name\":\"prop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mintAdminCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeProp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setSpeedBump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"speedBump\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mintApproveReset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMintFeeProp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcMintFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferWait\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMintFeeAbs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintAdminApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcTransferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeAbs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintApprove\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"audit\",\"type\":\"address\"},{\"name\":\"marketMaker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"abs\",\"type\":\"uint256\"},{\"name\":\"prop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBurnFeeAbs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnApprove\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintMarketMakerApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mintMarketMakerCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketMakerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAbsMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMintFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalpercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTransferFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFeeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcBurnFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketMaker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintAuditApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"name\":\"abs\",\"type\":\"uint256\"},{\"name\":\"prop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerMaster\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_feeAbsMax\",\"type\":\"uint256\"},{\"name\":\"_feePropMax\",\"type\":\"uint256\"},{\"name\":\"_transferWait\",\"type\":\"uint256\"},{\"name\":\"_transferMaxAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"typeFee\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SpeedBumpUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PetToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f07d8cd1221e4983a3f868931eb5bb6a526261a00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000b5045542e426574612e303100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065045544230310000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0ff7aa0d74abb4583af4f94fb4de8ce63578f1bc58ac1c023f9d59afa474149c"}]}