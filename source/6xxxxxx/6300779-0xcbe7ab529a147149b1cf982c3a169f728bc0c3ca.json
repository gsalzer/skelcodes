{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24; \r\n\r\n/* ----------------------------------------------------------------------------\r\n Client contract.\r\n This contract is generated for each user (user account). All the transactions of a user are executed from this contract.\r\n Only Aion smart contract can interact with the user account and only when the user schedules transactions.\r\n ----------------------------------------------------------------------------*/\r\n\r\ncontract AionClient {\r\n    \r\n    address private AionAddress;\r\n\r\n    constructor(address addraion) public{\r\n        AionAddress = addraion;\r\n    }\r\n\r\n    \r\n    function execfunct(address to, uint256 value, uint256 gaslimit, bytes data) external returns(bool) {\r\n        require(msg.sender == AionAddress);\r\n        return to.call.value(value).gas(gaslimit)(data);\r\n\r\n    }\r\n    \r\n\r\n    function () payable public {}\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMat library\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  /** @dev Multiplies two numbers, throws on overflow.*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /** @dev Integer division of two numbers, truncating the quotient.*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n  /**@dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /** @dev Adds two numbers, throws on overflow.*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/* ----------------------------------------------------------------------------\r\n Aion Smart contract (by ETH-Pantheon)\r\n  ----------------------------------------------------------------------------*/\r\n\r\ncontract Aion {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    uint256 public serviceFee;\r\n    uint256 public AionID;\r\n    uint256 public feeChangeInterval;\r\n    mapping(address => address) public clientAccount;\r\n    mapping(uint256 => bytes32) public scheduledCalls;\r\n\r\n    // Log for executed transactions.\r\n    event ExecutedCallEvent(address indexed from, uint256 indexed AionID, bool TxStatus, bool TxStatus_cancel, bool reimbStatus);\r\n    \r\n    // Log for scheduled transactions.                        \r\n    event ScheduleCallEvent(uint256 indexed blocknumber, address indexed from, address to, uint256 value, uint256 gaslimit,\r\n                            uint256 gasprice, uint256 fee, bytes data, uint256 indexed AionID, bool schedType);\r\n    \r\n    // Log for cancelation of a scheduled call (no fee is charged, all funds are moved from client's smart contract to client's address)                        \r\n    event CancellScheduledTxEvent(address indexed from, uint256 Total, bool Status, uint256 indexed AionID);\r\n    \r\n\r\n    // Log for changes in the service fee\r\n    event feeChanged(uint256 newfee, uint256 oldfee);\r\n    \r\n\r\n    \r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n        serviceFee = 500000000000000;\r\n    }    \r\n\r\n    // This function allows to change the address of the owner (admin of the contract)\r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender == owner);\r\n        withdraw();\r\n        owner = newOwner;\r\n    }\r\n\r\n    // This function creates an account (contract) for a client if his address is \r\n    // not yet associated to an account\r\n    function createAccount() internal {\r\n        if(clientAccount[msg.sender]==address(0x0)){\r\n            AionClient newContract = new AionClient(address(this));\r\n            clientAccount[msg.sender] = address(newContract);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /* This function schedules transactions: client should provide an amount of Ether equal to value + gaslimit*gasprice + serviceFee\r\n    @param blocknumber block or timestamp at which the transaction should be executed. \r\n    @param to recipient of the transaction.\r\n    @param value Amount of Wei to send with the transaction.\r\n    @param gaslimit maximum amount of gas to spend in the transaction.\r\n    @param gasprice value to pay per unit of gas.\r\n    @param data transaction data.\r\n    @param schedType determines if the transaction is scheduled on blocks or timestamp (true->timestamp)\r\n    @return uint256 Identification of the transaction\r\n    @return address address of the client account created\r\n    */\r\n    function ScheduleCall(uint256 blocknumber, address to, uint256 value, uint256 gaslimit, uint256 gasprice, bytes data, bool schedType) public payable returns (uint,address){\r\n        require(msg.value == value.add(gaslimit.mul(gasprice)).add(serviceFee));\r\n        AionID = AionID + 1;\r\n        scheduledCalls[AionID] = keccak256(abi.encodePacked(blocknumber, msg.sender, to, value, gaslimit, gasprice, serviceFee, data, schedType));\r\n        createAccount();\r\n        clientAccount[msg.sender].transfer(msg.value);\r\n        emit ScheduleCallEvent(blocknumber, msg.sender, to, value, gaslimit, gasprice, serviceFee, data, AionID, schedType);\r\n        return (AionID,clientAccount[msg.sender]);\r\n    }\r\n\r\n    \r\n    /* This function executes the transaction at the correct time/block\r\n    Aion off-chain system should provide the correct information for executing a transaction.\r\n    The information is checked against the hash of the original data provided by the user saved in scheduledCalls.\r\n    If the information does not match, the transaction is reverted.\r\n    */\r\n    function executeCall(uint256 blocknumber, address from, address to, uint256 value, uint256 gaslimit, uint256 gasprice,\r\n                         uint256 fee, bytes data, uint256 aionId, bool schedType) external {\r\n        require(msg.sender==owner);\r\n        if(schedType) require(blocknumber <= block.timestamp);\r\n        if(!schedType) require(blocknumber <= block.number);\r\n        \r\n        require(scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber, from, to, value, gaslimit, gasprice, fee, data, schedType)));\r\n        AionClient instance = AionClient(clientAccount[from]);\r\n        \r\n        require(instance.execfunct(address(this), gasprice*gaslimit+fee, 2100, hex\"00\"));\r\n        bool TxStatus = instance.execfunct(to, value, gasleft().sub(50000), data);\r\n        \r\n        // If the user tx fails return the ether to user\r\n        bool TxStatus_cancel;\r\n        if(!TxStatus && value>0){TxStatus_cancel = instance.execfunct(from, value, 2100, hex\"00\");}\r\n        \r\n        delete scheduledCalls[aionId];\r\n        bool reimbStatus = from.call.value((gasleft()).mul(gasprice)).gas(2100)();\r\n        emit ExecutedCallEvent(from, aionId,TxStatus, TxStatus_cancel, reimbStatus);\r\n        \r\n    }\r\n\r\n    \r\n    /* This function allows clients to cancel scheduled transctions. No fee is charged.\r\n    Parameters are the same as in ScheduleCall.\r\n    @return bool indicating success or failure.\r\n    */\r\n    function cancellScheduledTx(uint256 blocknumber, address from, address to, uint256 value, uint256 gaslimit, uint256 gasprice,\r\n                         uint256 fee, bytes data, uint256 aionId, bool schedType) external returns(bool) {\r\n        if(schedType) require(blocknumber >=  block.timestamp+(3 minutes) || blocknumber <= block.timestamp-(5 minutes));\r\n        if(!schedType) require(blocknumber >  block.number+10 || blocknumber <= block.number-20);\r\n        require(scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber, from, to, value, gaslimit, gasprice, fee, data, schedType)));\r\n        require(msg.sender==from);\r\n        AionClient instance = AionClient(clientAccount[msg.sender]);\r\n        \r\n        bool Status = instance.execfunct(from, value+gasprice*gaslimit+fee, 3000, hex\"00\");\r\n        require(Status);\r\n        emit CancellScheduledTxEvent(from, value+gasprice*gaslimit+fee, Status, aionId);\r\n        delete scheduledCalls[aionId];\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    // This function allows the owner of the contract to retrieve the fees and the gas price\r\n    function withdraw() public {\r\n        require(msg.sender==owner);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n    // This function updates the service fee.\r\n    // To provide security to the clients the fee can only be updated once per day.\r\n    // This is to maintain the same price despite the Ether variation.\r\n    // Also, the amount of the update (if increased) can only increase 10% each time.\r\n    // Furthermore, an event is fired when the fee has been changed to inform the network.\r\n    function updatefee(uint256 fee) public{\r\n        require(msg.sender==owner);\r\n        require(feeChangeInterval<block.timestamp);\r\n        uint256 oldfee = serviceFee;\r\n        if(fee>serviceFee){\r\n            require(((fee.sub(serviceFee)).mul(100)).div(serviceFee)<=10);\r\n            serviceFee = fee;\r\n        } else{\r\n            serviceFee = fee;\r\n        }\r\n        feeChangeInterval = block.timestamp + (1 days);\r\n        emit feeChanged(serviceFee, oldfee);\r\n    } \r\n    \r\n\r\n    \r\n    // fallback- receive Ether\r\n    function () public payable {\r\n    \r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"name\":\"gasprice\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"aionId\",\"type\":\"uint256\"},{\"name\":\"schedType\",\"type\":\"bool\"}],\"name\":\"cancellScheduledTx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeChangeInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updatefee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"name\":\"gasprice\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"schedType\",\"type\":\"bool\"}],\"name\":\"ScheduleCall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduledCalls\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"name\":\"gasprice\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"aionId\",\"type\":\"uint256\"},{\"name\":\"schedType\",\"type\":\"bool\"}],\"name\":\"executeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"AionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TxStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"TxStatus_cancel\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"reimbStatus\",\"type\":\"bool\"}],\"name\":\"ExecutedCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gaslimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"AionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"schedType\",\"type\":\"bool\"}],\"name\":\"ScheduleCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Status\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"AionID\",\"type\":\"uint256\"}],\"name\":\"CancellScheduledTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newfee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldfee\",\"type\":\"uint256\"}],\"name\":\"feeChanged\",\"type\":\"event\"}]","ContractName":"Aion","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9b820131ffa273f2a598b1da16f9678991dd7157b7f4097db818681364be277"}]}