{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/PeriodUtil.sol\r\n\r\n/**\r\n * @title PeriodUtil\r\n * \r\n * Interface used for Period calculation to allow better automated testing of Fees Contract\r\n *\r\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\r\n */\r\ncontract PeriodUtil {\r\n    /**\r\n    * @dev calculates the Period index for the given timestamp\r\n    * @return Period count since EPOCH\r\n    * @param timestamp The time in seconds since EPOCH (blocktime)\r\n    */\r\n    function getPeriodIdx(uint256 timestamp) public pure returns (uint256);\r\n    \r\n    /**\r\n    * @dev Timestamp of the period start\r\n    * @return Time in seconds since EPOCH of the Period Start\r\n    * @param periodIdx Period Index to find the start timestamp of\r\n    */\r\n    function getPeriodStartTimestamp(uint256 periodIdx) public pure returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the Cycle count of the given Periods. A set of time creates a cycle, eg. If period is weeks the cycle can be years.\r\n    * @return The Cycle Index\r\n    * @param timestamp The time in seconds since EPOCH (blocktime)\r\n    */\r\n    function getPeriodCycle(uint256 timestamp) public pure returns (uint256);\r\n\r\n    /**\r\n    * @dev Amount of Tokens per time unit since the start of the given periodIdx\r\n    * @return Tokens per Time Unit from the given periodIdx start till now\r\n    * @param tokens Total amount of tokens from periodIdx start till now (blocktime)\r\n    * @param periodIdx Period IDX to use for time start\r\n    */\r\n    function getRatePerTimeUnits(uint256 tokens, uint256 periodIdx) public view returns (uint256);\r\n\r\n    /**\r\n    * @dev Amount of time units in each Period, for exampe if units is hour and period is week it will be 168\r\n    * @return Amount of time units per period\r\n    */\r\n    function getUnitsPerPeriod() public pure returns (uint256);\r\n}\r\n\r\n// File: contracts/PeriodUtilWeek.sol\r\n\r\n/**\r\n * @title PeriodUtilWeek\r\n * \r\n * Used to calculate Weeks and Years\r\n *\r\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\r\n */\r\ncontract PeriodUtilWeek is PeriodUtil {\r\n  \r\n    uint256 public constant HOURS_IN_WEEK = 168;\r\n    uint256 constant YEAR_IN_SECONDS = 31536000;\r\n    uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n\r\n    /**\r\n    * @dev calculates the Week index for the given timestamp\r\n    * @return Weeks count since EPOCH\r\n    * @param timestamp The time in seconds since EPOCH (blocktime)\r\n    */\r\n    function getPeriodIdx(uint256 timestamp) public pure returns (uint256) {\r\n        return timestamp / 1 weeks;\r\n    }\r\n\r\n    /**\r\n    * @dev Timestamp of the Week start\r\n    * @return Time in seconds since EPOCH of the Period Start\r\n    * @param periodIdx Period Index to find the start timestamp of\r\n    */\r\n    function getPeriodStartTimestamp(uint256 periodIdx) public pure returns (uint256) {\r\n        // Safty for uint overflow (safe till year 2928)\r\n        assert(periodIdx < 50000);\r\n        return 1 weeks * periodIdx;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the Cycle count of the given Periods. A set of time creates a cycle, eg. If period is weeks the cycle can be years.\r\n    * @return The Cycle Index\r\n    * @param timestamp The time in seconds since EPOCH (blocktime)\r\n    */\r\n    function getPeriodCycle(uint256 timestamp) public pure returns (uint256) {\r\n        uint256 secondsAccountedFor = 0;\r\n        uint16 year;\r\n        uint256 numLeapYears;\r\n        \r\n        // Year\r\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n        \r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n        \r\n        while (secondsAccountedFor > timestamp) {\r\n            if (isLeapYear(uint16(year - 1))) {\r\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n            }\r\n            year -= 1;\r\n        }\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of leap years before the given date\r\n     */\r\n    function leapYearsBefore(uint256 _year) public pure returns (uint256) {\r\n        uint256 year = _year - 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    /**\r\n     * @dev Is the given year a leap Year\r\n     */\r\n    function isLeapYear(uint16 year) public pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Amount of Tokens per time unit since the start of the given periodIdx\r\n    * @return Tokens per Time Unit from the given periodIdx start till now\r\n    * @param tokens Total amount of tokens from periodIdx start till now (blocktime)\r\n    * @param periodIdx Period IDX to use for time start\r\n    */\r\n    function getRatePerTimeUnits(uint256 tokens, uint256 periodIdx) public view returns (uint256) {\r\n        if (tokens <= 0)\r\n          return 0;\r\n        uint256 hoursSinceTime = hoursSinceTimestamp(getPeriodStartTimestamp(periodIdx));\r\n        return tokens / hoursSinceTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Hours since given timestamp\r\n    * @param timestamp Timestamp in seconds since EPOCH to calculate hours to\r\n    * @return Retuns the number of hours since the given timestamp and blocktime\r\n    */\r\n    function hoursSinceTimestamp(uint256 timestamp) public view returns (uint256) {\r\n        assert(now > timestamp);\r\n        return (now - timestamp) / 1 hours;\r\n    }\r\n\r\n    /**\r\n    * @dev Amount of time units in each Period, for exampe if units is hour and period is week it will be 168\r\n    * @return Amount of time units per period\r\n    */\r\n    function getUnitsPerPeriod() public pure returns (uint256) {\r\n        return HOURS_IN_WEEK;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"periodIdx\",\"type\":\"uint256\"}],\"name\":\"getRatePerTimeUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnitsPerPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPeriodIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"periodIdx\",\"type\":\"uint256\"}],\"name\":\"getPeriodStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOURS_IN_WEEK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"hoursSinceTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPeriodCycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PeriodUtilWeek","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b75e9c36a95ba7bbf140fd515e0e46d18043e00862dc516041dde7bb5ae5518f"}]}