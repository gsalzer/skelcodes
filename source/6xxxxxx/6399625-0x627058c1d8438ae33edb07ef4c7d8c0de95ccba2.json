{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Safe unsigned safe math.\r\n *\r\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\r\n *\r\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\r\n *\r\n * Maintained here until merged to mainline zeppelin-solidity.\r\n *\r\n */\r\nlibrary SafeMathLibExt {\r\n\r\n    function times(uint a, uint b) public pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function divides(uint a, uint b) public pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function minus(uint a, uint b) public pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function plus(uint a, uint b) public pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Allocatable is Ownable {\r\n\r\n  /** List of agents that are allowed to allocate new tokens */\r\n    mapping (address => bool) public allocateAgents;\r\n\r\n    event AllocateAgentChanged(address addr, bool state  );\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to allocate new tokens.\r\n   */\r\n    function setAllocateAgent(address addr, bool state) public onlyOwner  \r\n    {\r\n        allocateAgents[addr] = state;\r\n        emit AllocateAgentChanged(addr, state);\r\n    }\r\n\r\n    modifier onlyAllocateAgent() {\r\n        //Only crowdsale contracts are allowed to allocate new tokens\r\n        require(allocateAgents[msg.sender]);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * Contract to enforce Token Vesting\r\n */\r\ncontract TokenVesting is Allocatable {\r\n\r\n    using SafeMathLibExt for uint;\r\n\r\n    address public crowdSaleTokenAddress;\r\n\r\n    /** keep track of total tokens yet to be released, \r\n     * this should be less than or equal to UTIX tokens held by this contract. \r\n     */\r\n    uint256 public totalUnreleasedTokens;\r\n\r\n    // default vesting parameters\r\n    uint256 private startAt = 0;\r\n    uint256 private cliff = 1;\r\n    uint256 private duration = 4; \r\n    uint256 private step = 300; //15778463;  //2592000;\r\n    bool private changeFreezed = false;\r\n\r\n    struct VestingSchedule {\r\n        uint256 startAt;\r\n        uint256 cliff;\r\n        uint256 duration;\r\n        uint256 step;\r\n        uint256 amount;\r\n        uint256 amountReleased;\r\n        bool changeFreezed;\r\n    }\r\n\r\n    mapping (address => VestingSchedule) public vestingMap;\r\n\r\n    event VestedTokensReleased(address _adr, uint256 _amount);\r\n    \r\n    constructor(address _tokenAddress) public {\r\n        \r\n        crowdSaleTokenAddress = _tokenAddress;\r\n    }\r\n\r\n    /** Modifier to check if changes to vesting is freezed  */\r\n    modifier changesToVestingFreezed(address _adr) {\r\n        require(vestingMap[_adr].changeFreezed);\r\n        _;\r\n    }\r\n\r\n    /** Modifier to check if changes to vesting is not freezed yet  */\r\n    modifier changesToVestingNotFreezed(address adr) {\r\n        require(!vestingMap[adr].changeFreezed); // if vesting not set then also changeFreezed will be false\r\n        _;\r\n    }\r\n\r\n    /** Function to set default vesting schedule parameters. */\r\n    function setDefaultVestingParameters(\r\n        uint256 _startAt, uint256 _cliff, uint256 _duration,\r\n        uint256 _step, bool _changeFreezed) public onlyAllocateAgent {\r\n\r\n        // data validation\r\n        require(_step != 0);\r\n        require(_duration != 0);\r\n        require(_cliff <= _duration);\r\n\r\n        startAt = _startAt;\r\n        cliff = _cliff;\r\n        duration = _duration; \r\n        step = _step;\r\n        changeFreezed = _changeFreezed;\r\n\r\n    }\r\n\r\n    /** Function to set vesting with default schedule. */\r\n    function setVestingWithDefaultSchedule(address _adr, uint256 _amount) \r\n    public \r\n    changesToVestingNotFreezed(_adr) onlyAllocateAgent {\r\n       \r\n        setVesting(_adr, startAt, cliff, duration, step, _amount, changeFreezed);\r\n    }    \r\n\r\n    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\r\n    function setVesting(\r\n        address _adr,\r\n        uint256 _startAt,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _step,\r\n        uint256 _amount,\r\n        bool _changeFreezed) \r\n    public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\r\n\r\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\r\n\r\n        // data validation\r\n        require(_step != 0);\r\n        require(_amount != 0 || vestingSchedule.amount > 0);\r\n        require(_duration != 0);\r\n        require(_cliff <= _duration);\r\n\r\n        //if startAt is zero, set current time as start time.\r\n        if (_startAt == 0) \r\n            _startAt = block.timestamp;\r\n\r\n        vestingSchedule.startAt = _startAt;\r\n        vestingSchedule.cliff = _cliff;\r\n        vestingSchedule.duration = _duration;\r\n        vestingSchedule.step = _step;\r\n\r\n        // special processing for first time vesting setting\r\n        if (vestingSchedule.amount == 0) {\r\n            // check if enough tokens are held by this contract\r\n            ERC20 token = ERC20(crowdSaleTokenAddress);\r\n            require(token.balanceOf(this) >= totalUnreleasedTokens.plus(_amount));\r\n            totalUnreleasedTokens = totalUnreleasedTokens.plus(_amount);\r\n            vestingSchedule.amount = _amount; \r\n        }\r\n\r\n        vestingSchedule.amountReleased = 0;\r\n        vestingSchedule.changeFreezed = _changeFreezed;\r\n    }\r\n\r\n    function isVestingSet(address adr) public view returns (bool isSet) {\r\n        return vestingMap[adr].amount != 0;\r\n    }\r\n\r\n    function freezeChangesToVesting(address _adr) public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\r\n        require(isVestingSet(_adr)); // first check if vesting is set\r\n        vestingMap[_adr].changeFreezed = true;\r\n    }\r\n\r\n    /** Release tokens as per vesting schedule, called by contributor  */\r\n    function releaseMyVestedTokens() public changesToVestingFreezed(msg.sender) {\r\n        releaseVestedTokens(msg.sender);\r\n    }\r\n\r\n    /** Release tokens as per vesting schedule, called by anyone  */\r\n    function releaseVestedTokens(address _adr) public changesToVestingFreezed(_adr) {\r\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\r\n        \r\n        // check if all tokens are not vested\r\n        require(vestingSchedule.amount.minus(vestingSchedule.amountReleased) > 0);\r\n        \r\n        // calculate total vested tokens till now\r\n        uint256 totalTime = block.timestamp - vestingSchedule.startAt;\r\n        uint256 totalSteps = totalTime / vestingSchedule.step;\r\n\r\n        // check if cliff is passed\r\n        require(vestingSchedule.cliff <= totalSteps);\r\n\r\n        uint256 tokensPerStep = vestingSchedule.amount / vestingSchedule.duration;\r\n        // check if amount is divisble by duration\r\n        if (tokensPerStep * vestingSchedule.duration != vestingSchedule.amount) tokensPerStep++;\r\n\r\n        uint256 totalReleasableAmount = tokensPerStep.times(totalSteps);\r\n\r\n        // handle the case if user has not claimed even after vesting period is over or amount was not divisible\r\n        if (totalReleasableAmount > vestingSchedule.amount) totalReleasableAmount = vestingSchedule.amount;\r\n\r\n        uint256 amountToRelease = totalReleasableAmount.minus(vestingSchedule.amountReleased);\r\n        vestingSchedule.amountReleased = vestingSchedule.amountReleased.plus(amountToRelease);\r\n\r\n        // transfer vested tokens\r\n        ERC20 token = ERC20(crowdSaleTokenAddress);\r\n        token.transfer(_adr, amountToRelease);\r\n        // decrement overall unreleased token count\r\n        totalUnreleasedTokens = totalUnreleasedTokens.minus(amountToRelease);\r\n        emit VestedTokensReleased(_adr, amountToRelease);\r\n    }\r\n\r\n    /**\r\n    * Allow to (re)set Token.\r\n    */\r\n    function setCrowdsaleTokenExtv1(address _token) public onlyAllocateAgent {       \r\n        crowdSaleTokenAddress = _token;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAllocateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocateAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setVestingWithDefaultSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingMap\",\"outputs\":[{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"step\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountReleased\",\"type\":\"uint256\"},{\"name\":\"changeFreezed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_startAt\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_changeFreezed\",\"type\":\"bool\"}],\"name\":\"setVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isVestingSet\",\"outputs\":[{\"name\":\"isSet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"freezeChangesToVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startAt\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint256\"},{\"name\":\"_changeFreezed\",\"type\":\"bool\"}],\"name\":\"setDefaultVestingParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnreleasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setCrowdsaleTokenExtv1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMyVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_adr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VestedTokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"AllocateAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003b1ad2987a6dc21678ef80973c2da0d94079651d","Library":"SafeMathLibExt:8a0128980df4f35bb7515275d9e1cb869159a6c2","SwarmSource":"bzzr://87e8231374a4e46f4acf2e273541ffa942c89f2798fa5603f438e60939ef68b6"}]}