{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract random{\r\n    using SafeMath for uint;\r\n    \r\n    uint256 constant private FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n    \r\n    address[] private authorities;\r\n    mapping (address => bool) private authorized;\r\n    //This is adminstrator address ,only the administartor can add the authorized address or remove it\r\n    address private adminAddress=0x154210143d7814F8A60b957f3CDFC35357fFC89C;\r\n\r\n     modifier onlyAuthorized {\r\n        require(authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n     modifier onlyAuthorizedAdmin {\r\n        require(adminAddress == msg.sender);\r\n        _;\r\n    }\r\n    modifier targetAuthorized(address target) {\r\n        require(authorized[target]);\r\n        _;\r\n    }\r\n\r\n    modifier targetNotAuthorized(address target) {\r\n        require(!authorized[target]);\r\n        _;\r\n    }\r\n\r\n    //################Event#######################################\r\n    event LOG_RANDOM(uint256 indexed roundIndex  ,uint256 randomNumber);\r\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\r\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\r\n\r\n\r\n    //################Authorized function#########################\r\n    function addAuthorizedAddress(address target)\r\n        public\r\n        onlyAuthorizedAdmin\r\n        targetNotAuthorized(target)\r\n    {\r\n        authorized[target] = true;\r\n        authorities.push(target);\r\n        emit LogAuthorizedAddressAdded(target, msg.sender);\r\n    }\r\n\r\n    ///  Removes authorizion of an address.\r\n    /// @param target Address to remove authorization from.\r\n    function removeAuthorizedAddress(address target)\r\n        public\r\n        onlyAuthorizedAdmin\r\n        targetAuthorized(target)\r\n    {\r\n        delete authorized[target];\r\n        for (uint i = 0; i < authorities.length; i++) {\r\n            if (authorities[i] == target) {\r\n                authorities[i] = authorities[authorities.length - 1];\r\n                authorities.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\r\n    }\r\n\r\n    //################Random number generate function#########################\r\n    function rand(uint min, uint max,address tokenAddress, uint256 roundIndex)\r\n      public  \r\n      onlyAuthorized\r\n      returns(uint256) \r\n      {\r\n        uint256 factor = FACTOR * 100 / max;\r\n   \r\n  \r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            (roundIndex).add\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(tokenAddress)))) / (now)).add\r\n            (block.gaslimit).add\r\n            (block.number)\r\n            \r\n        )));\r\n       \r\n        uint256 r=uint256(uint256(seed) / factor)  % max +min;\r\n\r\n         emit LOG_RANDOM(roundIndex,r);\r\n         return(r);\r\n       \r\n}\r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"addAuthorizedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"removeAuthorizedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"LOG_RANDOM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LogAuthorizedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LogAuthorizedAddressRemoved\",\"type\":\"event\"}]","ContractName":"random","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9962d28c370084c5ea215dbf245bb42fc8e585c5cfe686999f37be9776fbe5e1"}]}