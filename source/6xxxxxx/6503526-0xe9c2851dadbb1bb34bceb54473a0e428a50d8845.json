{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\ncontract Consts {\r\n    uint256 public constant SUPPLY = 200000000;\r\n    uint public constant TOKEN_DECIMALS = 4;\r\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 4;\r\n    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n    string public constant TOKEN_NAME = \"Abri\";\r\n    string public constant TOKEN_SYMBOL = \"ABR\";\r\n}\r\ncontract NewToken is Consts, StandardToken {\r\n    bool public initialized = false;\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        init();\r\n    }\r\n    function init() private {\r\n        require(!initialized);\r\n        initialized = true;\r\n        totalSupply_ = SUPPLY * TOKEN_DECIMAL_MULTIPLIER;\r\n        balances[owner] = totalSupply_;\r\n    } \r\n    function name() public pure returns (string _name) {\r\n        return TOKEN_NAME;\r\n    }\r\n    function symbol() public pure returns (string _symbol) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n    function decimals() public pure returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool _success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n}\r\ncontract Digital is NewToken{\r\n    address olord = 0xaC011c052E35e51f82A87f8abB4605535AA28bb1;\r\n    address admin;\r\n    uint _abr; \r\n    uint _eth;\r\n    uint sw; \r\n    uint coe;\r\n    uint daily;\r\n    uint UTC;\r\n    mapping (address => string) mail;\r\n    mapping (address => string) mobile;\r\n    mapping (address => string) nickname;\r\n    mapping (address => uint) usddisplay;\r\n    mapping (address => uint) abrdisplay;\r\n    mapping (address => uint) usdinterest;\r\n    mapping (address => uint) time;\r\n    mapping (address => uint) start;\r\n    mapping (address => address) prev;\r\n    mapping (address => uint) index;\r\n    mapping (address => bool) otime;\r\n    mapping (address => uint ) totalm; \r\n    mapping (address => address[]) adj;\r\n    modifier isolord() {\r\n        require(msg.sender == olord,\"\");\r\n        _;\r\n    }\r\n    modifier isadmin() {\r\n        require(msg.sender == admin, \"\");\r\n        _;\r\n    }\r\n    modifier iscashback() {\r\n        require( getback(usddisplay[msg.sender]) == time[msg.sender] );\r\n        _;\r\n    }\r\n    function setadmin(address _admin) public isolord {\r\n        admin = _admin;\r\n    }\r\n    function Withdrawal() public isadmin {\r\n        admin.transfer(address(this).balance - 1 ether);\r\n    }\r\n    function sendabr(uint _send) public isolord {\r\n        transfer(this, _send);\r\n    }  \r\n    function setprice(uint _e,uint _ex) public isadmin {\r\n        sw = _ex;\r\n        _eth = _e;\r\n        _abr = _eth.div(sw);\r\n\r\n    }\r\n    function setdaily(uint _daily) public isadmin {\r\n        UTC++;\r\n        daily = _daily;\r\n    }\r\n    function setcoe(uint _coe) public isadmin   {\r\n        coe = _coe; \r\n    }\r\n    function getback(uint _uint) internal pure returns (uint) {\r\n        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\r\n            return 240;\r\n        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\r\n            return 210;\r\n        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\r\n            return 180;\r\n        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\r\n            return 150;\r\n        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\r\n            return 120;\r\n        }\r\n    }\r\n    function getlevel(uint _uint) internal pure returns (uint) {\r\n        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\r\n            return 5;\r\n        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\r\n            return 12;\r\n        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\r\n            return 20;\r\n        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\r\n            return 25;\r\n        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\r\n            return 30;\r\n        }\r\n    }\r\n    function next(uint a, uint b) internal pure returns (bool) {\r\n        if ( a-b == 0 ) { \r\n            return false;\r\n           } else {\r\n            return true;\r\n        }\r\n    }\r\n    function setinfo(string _mail, string _mobile, string _nickname) public {\r\n        mail[msg.sender] = _mail;\r\n        mobile[msg.sender] = _mobile;\r\n        nickname[msg.sender] = _nickname;\r\n    }\r\n    function referral(address _referral) public {\r\n        if (! otime[msg.sender])  {\r\n            prev[msg.sender] = _referral;\r\n            index[_referral] ++;\r\n            adj[_referral].push(msg.sender);\r\n            otime[msg.sender] = true;\r\n        }\r\n    }\r\n    function aDeposit(uint _a) public {\r\n        if (otime[msg.sender]) {\r\n        if (start[msg.sender] == 0) {\r\n            start[msg.sender]=UTC;\r\n        }\r\n        uint pre = usddisplay[msg.sender];\r\n        usddisplay[msg.sender] += _a * _abr ;\r\n        totalm[prev[msg.sender]] += usddisplay[msg.sender];\r\n        \r\n        if (next(getlevel(pre), getlevel(usddisplay[msg.sender]))) {\r\n            start[msg.sender]=UTC;\r\n            time[msg.sender]=0;\r\n        }\r\n        transfer(this, _a);\r\n        address t1 = prev[msg.sender];\r\n        if (pre == 0) {\r\n            balances[this] = balances[this].sub(_a / 20);\r\n            balances[t1] = balances[t1].add(_a / 20);\r\n            address t2 = prev[t1];\r\n            balances[this] = balances[this].sub(_a *3/100);\r\n            balances[t2] = balances[t2].add(_a *3/100);\r\n            address t3 = prev[t2];\r\n            if (index[t3] > 1) {\r\n            balances[this] = balances[this].sub(_a /50);\r\n            balances[t3] = balances[t3].add(_a /50);\r\n            }\r\n            address t4 = prev[t3];\r\n            if (index[t4] > 2) {\r\n            balances[this] = balances[this].sub(_a /100);\r\n            balances[t4] = balances[t4].add(_a /100);\r\n            }\r\n            address t5 = prev[t4];\r\n            if (index[t5] > 3) {\r\n            balances[this] = balances[this].sub(_a /200);\r\n            balances[t5] = balances[t5].add(_a /200);\r\n            }\r\n            address t6 = prev[t5];\r\n            if (index[t6] > 4) {\r\n            balances[this] = balances[this].sub(_a /200);\r\n            balances[t6] = balances[t6].add(_a /200);\r\n            } \r\n        } else {\r\n            balances[this] = balances[this].sub(_a / 20);\r\n            balances[t1] = balances[t1].add(_a / 20);\r\n        }\r\n        }\r\n    }\r\n    function support() public view returns(string, string, string) {\r\n        return (mail[prev[msg.sender]], mobile[prev[msg.sender]], nickname[prev[msg.sender]]);\r\n    }\r\n    function care(uint _id) public view returns(string, string, string, uint) {\r\n        address x = adj[msg.sender][_id];\r\n        return( mail[x], mobile[x], nickname[x], usddisplay[x]);\r\n    }\r\n    function total() public view returns(uint, uint) {\r\n        return (index[msg.sender], totalm[msg.sender]);\r\n    }\r\n    function swap(uint _s) public payable {\r\n        balances[owner] = balances[owner].sub(_s * sw);\r\n        balances[msg.sender] =  balances[msg.sender].add(_s * sw);\r\n    }\r\n    function claim() public returns (string) {\r\n        if ( (UTC - start[msg.sender]) == (time[msg.sender]+1) ) {\r\n        time[msg.sender]++;\r\n        uint ts = getlevel(usddisplay[msg.sender]);\r\n        usdinterest[msg.sender] = (usddisplay[msg.sender] / 10000) * (ts + daily); \r\n        uint _uint = usdinterest[msg.sender] / _abr;\r\n        abrdisplay[msg.sender] += _uint;\r\n        } else if ((UTC - start[msg.sender]) > (time[msg.sender]+1)) {\r\n            time[msg.sender] = UTC - start[msg.sender];\r\n        } \r\n    }\r\n    function iwithdrawal(uint _i) public {\r\n        if (abrdisplay[msg.sender] > _i) {\r\n            abrdisplay[msg.sender] -= _i;\r\n            balances[this] = balances[this].sub(_i);\r\n            balances[msg.sender] = balances[msg.sender].add(_i);\r\n        }\r\n    }\r\n    function fwithdrawal(uint _f) public iscashback{\r\n       if ((usddisplay[msg.sender] / 100) * coe >= _f * _abr ) {\r\n           usddisplay[msg.sender] -= _f * _abr;\r\n           balances[this] = balances[this].sub(_f);\r\n           balances[msg.sender] = balances[msg.sender].add(_f);\r\n       }\r\n    }\r\n    function getprice() public view returns(uint) {\r\n        return (sw);\r\n    }\r\n    function getinfo() public view returns (string, uint, uint, uint, uint) {\r\n        \r\n        return (nickname[msg.sender], start[msg.sender], usddisplay[msg.sender], usdinterest[msg.sender], abrdisplay[msg.sender]);\r\n    }\r\n    function gettimeback() public view returns (uint) {\r\n        return getback(usddisplay[msg.sender]).sub(time[msg.sender]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getinfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"fwithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daily\",\"type\":\"uint256\"}],\"name\":\"setdaily\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"iwithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMAL_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mail\",\"type\":\"string\"},{\"name\":\"_mobile\",\"type\":\"string\"},{\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"setinfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coe\",\"type\":\"uint256\"}],\"name\":\"setcoe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"referral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_ex\",\"type\":\"uint256\"}],\"name\":\"setprice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_s\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"aDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"care\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS_UINT8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettimeback\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_send\",\"type\":\"uint256\"}],\"name\":\"sendabr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setadmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Digital","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aec4edc7941c63831ca0cc1b42f8bbec11189ea1277f71ae3e29a5363f173f69"}]}