{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n   /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n   /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20Token is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n   /**\r\n    * @dev ERC20 token with the addition properties name, symbol, and decimals. \r\n    * Added mint, burn, burnFrom methods\r\n    */\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 internal _totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n   /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n   /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n   /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= _balances[msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _balances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Internal function that forces a token transfer from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function _forceTransfer(address from, address to, uint256 value) internal returns (bool) {\r\n        require(value <= _balances[from]);\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 amount) internal returns (bool) {\r\n        require(account != 0);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 amount) internal returns (bool) {\r\n        require(account != 0);\r\n        require(amount <= _balances[account]);\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract RegulatorService {\r\n\r\n    function verify(address _token, address _spender, address _from, address _to, uint256 _amount) \r\n        public \r\n        view \r\n        returns (byte) \r\n    {\r\n        return hex\"A3\";\r\n    }\r\n\r\n    function restrictionMessage(byte restrictionCode)\r\n        public\r\n        view\r\n        returns (string)\r\n    {\r\n    \tif(restrictionCode == hex\"01\") {\r\n    \t\treturn \"No restrictions detected\";\r\n        }\r\n        if(restrictionCode == hex\"10\") {\r\n            return \"One of the accounts is not on the whitelist\";\r\n        }\r\n        if(restrictionCode == hex\"A3\") {\r\n            return \"The lockup period is in progress\";\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract AtomicDSS is ERC20Token, Ownable {\r\n    byte public constant SUCCESS_CODE = hex\"01\";\r\n    string public constant SUCCESS_MESSAGE = \"SUCCESS\";\r\n    RegulatorService public regulator;\r\n  \r\n    event ReplaceRegulator(address oldRegulator, address newRegulator);\r\n\r\n    modifier notRestricted (address from, address to, uint256 value) {\r\n        byte restrictionCode = regulator.verify(this, msg.sender, from, to, value);\r\n        require(restrictionCode == SUCCESS_CODE, regulator.restrictionMessage(restrictionCode));\r\n        _;\r\n    }\r\n\r\n    constructor(RegulatorService _regulator, address[] wallets, uint256[] amounts, address owner) public {\r\n            regulator = _regulator;\r\n            symbol = \"ATOM\";\r\n            name = \"Atomic Capital, Inc.C-Corp.Delaware.Equity.1.Common.\";\r\n            decimals = 18;\r\n            for (uint256 i = 0; i < wallets.length; i++){\r\n                mint(wallets[i], amounts[i]);\r\n                if(i == 10){\r\n                    break;\r\n                }\r\n            }\r\n            transferOwnership(owner);\r\n    }\r\n\r\n  /**\r\n   * @dev Validate contract address\r\n   * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\r\n   *\r\n   * @param _addr The address of a smart contract\r\n   */\r\n    modifier isContract (address _addr) {\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        require(length > 0);\r\n        _;\r\n    }\r\n\r\n    function replaceRegulator(RegulatorService _regulator) \r\n        public \r\n        onlyOwner \r\n        isContract(_regulator) \r\n    {\r\n        address oldRegulator = regulator;\r\n        regulator = _regulator;\r\n        emit ReplaceRegulator(oldRegulator, regulator);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        notRestricted(msg.sender, to, value)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        notRestricted(from, to, value)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function forceTransfer(address from, address to, uint256 value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return super._forceTransfer(from, to, value);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) \r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return super._mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) \r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return super._burn(account, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"replaceRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_regulator\",\"type\":\"address\"},{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldRegulator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRegulator\",\"type\":\"address\"}],\"name\":\"ReplaceRegulator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AtomicDSS","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cba605694b55ba5be54517c6d3da617d84efac55000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000397fae5ae36ea6ef6c108cbe56b453e327d8a3940000000000000000000000000000000000000000000000000000000000000009000000000000000000000000ab093e2d766c5b293b702c75f0c33ab2dca10d170000000000000000000000009af1ea3469159f7d787d5fe94ca24885dcfc34f90000000000000000000000000f3984228f641e4cc90b419896c8b6dceb987a390000000000000000000000002e86ad2bbb9330e9db45d1d3ed87902066b50474000000000000000000000000cf547aa0e8f65947cd48a7bb7a8a4c1357ac0991000000000000000000000000e29bf3857de754f1b774cf1d2920f274819fcc350000000000000000000000007025b3957a19f20f7b720873c142cb85ce7a928c0000000000000000000000005c83e15b1f4cb3a2524a1ddb1f17a44c417371fc0000000000000000000000002071055a081be5098f4fbe0781b58b5c550c2e030000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000004a4d173b267509fa8000000000000000000000000000000000000000000000001bdce8b64528a7dc8000000000000000000000000000000000000000000000000edc37d8a14a9b98800000000000000000000000000000000000000000000000076e1bec50a54dcc4000000000000000000000000000000000000000000000004a4d1e88f184cb44400000000000000000000000000000000000000000000000076e1bec50a54dcc40000000000000000000000000000000000000000000000001ee8c61482afaa0a00000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000002a638842dfc5a8d88000","Library":"","SwarmSource":"bzzr://8dc73fdc8908e6d27145858ba7d99aca8060d01d11003c004786f3592c55e483"}]}