{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract TimeLockedWallet {\r\n\r\n    address public creator;\r\n    address public owner;\r\n    uint public unlockDate;\r\n    uint public createdAt;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _creator,\r\n        address _owner,\r\n        uint _unlockDate\r\n    ) public {\r\n        creator = _creator;\r\n        owner = _owner;\r\n        unlockDate = _unlockDate;\r\n        createdAt = now;\r\n    }\r\n\r\n    // keep all the ether sent to this address\r\n    function() payable public { \r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    // callable by owner only, after specified time\r\n    function withdraw() onlyOwner public {\r\n       require(now >= unlockDate);\r\n       address myAddress = this;\r\n       \r\n       //now send all the balance\r\n       msg.sender.transfer(myAddress.balance);\r\n       emit Withdrew(msg.sender, myAddress.balance );\r\n    }\r\n\r\n    // callable by owner only, after specified time, only for Tokens implementing ERC20\r\n    function withdrawTokens(address _tokenContract) onlyOwner public {\r\n       require(now >= unlockDate);\r\n       ERC20 token = ERC20(_tokenContract);\r\n       //now send all the token balance\r\n       uint tokenBalance = token.balanceOf(this);\r\n       token.transfer(owner, tokenBalance);\r\n       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\r\n    }\r\n\r\n    function info() public view returns(address, address, uint, uint, uint) {\r\n        return (creator, owner, unlockDate, createdAt, address(this).balance);\r\n    }\r\n\r\n    event Received(address from, uint amount);\r\n    event Withdrew(address to, uint amount);\r\n    event WithdrewTokens(address tokenContract, address to, uint amount);\r\n}\r\n\r\ncontract TimeLockedWalletFactory {\r\n \r\n    mapping(address => address[]) wallets;\r\n\r\n    function getWallets(address _user) \r\n        public\r\n        view\r\n        returns(address[])\r\n    {\r\n        return wallets[_user];\r\n    }\r\n\r\n    function newTimeLockedWallet(address _owner, uint _unlockDate)\r\n        payable\r\n        public\r\n        returns(address wallet)\r\n    {\r\n        // Create new wallet.\r\n        wallet = new TimeLockedWallet(msg.sender, _owner, _unlockDate);\r\n        \r\n        // Add wallet to sender's wallets.\r\n        wallets[msg.sender].push(wallet);\r\n\r\n        // If owner is the same as sender then add wallet to sender's wallets too.\r\n        if(msg.sender != _owner){\r\n            wallets[_owner].push(wallet);\r\n        }\r\n\r\n        // Send ether from this transaction to the created contract.\r\n        wallet.transfer(msg.value);\r\n\r\n        // Emit event.\r\n        emit Created(wallet, msg.sender, _owner, now, _unlockDate, msg.value);\r\n    }\r\n\r\n    // Prevents accidental sending of ether to the factory\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    event Created(address wallet, address from, address to, uint createdAt, uint unlockDate, uint amount);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"newTimeLockedWallet\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"}]","ContractName":"TimeLockedWalletFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64905aa2495de33471b10b0b03df17aa05ad6d36af09d159414a3c33de82a678"}]}