{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    if(a==0){\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/AddressUtils.sol\r\n\r\n//Utility library of inline functions on addresses\r\nlibrary AddressUtils {\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC165.sol\r\n\r\ninterface ERC165 {\r\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/ERC721Basic.sol\r\n\r\ncontract ERC721Basic is ERC165 {\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n\r\n  //Events\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId );\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId );\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved );\r\n  \r\n  //Required methods\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n\r\n  function implementsERC721() public pure returns(bool);\r\n}\r\n\r\n// File: contracts/ERC721TokenReceiver.sol\r\n\r\ncontract ERC721TokenReceiver {\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n  bytes4 retval;\r\n  bool reverts;\r\n\r\n  constructor(bytes4 _retval, bool _reverts) public {\r\n    retval = _retval;\r\n    reverts = _reverts;\r\n  }\r\n\r\n  event Received(address _operator, address _from, uint256 _tokenId, bytes _data, uint256 _gas );\r\n\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data ) public returns(bytes4) {\r\n    require(!reverts);\r\n    emit Received(\r\n      _operator,\r\n      _from,\r\n      _tokenId,\r\n      _data,\r\n      gasleft()\r\n    );\r\n    return retval;\r\n  }\r\n}\r\n\r\n// File: contracts/SupportsInterfaceWithLookup.sol\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n  \r\n  constructor() public {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  function _registerInterface(bytes4 _interfaceId) internal {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic{\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n  \r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n  mapping (uint256 => address) internal tokenIDToOwner;\r\n  mapping (uint256 => address) internal tokenIDToApproved;\r\n  mapping (address => uint256) internal ownershipTokenCount;\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor() public {\r\n    _registerInterface(InterfaceId_ERC721);\r\n  }\r\n  function implementsERC721() public pure returns(bool){\r\n      return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenIDToOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n  \r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenIDToApproved[_tokenId];\r\n  }\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n  function isApprovedForAll(address _owner, address _operator ) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n  function _exists(uint256 _tokenId) internal view returns (bool) {\r\n    address owner = tokenIDToOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId ) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return (\r\n      _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data ) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721Enumerable.sol\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n// File: contracts/ChainDrawingsAccess.sol\r\n\r\ncontract ChainDrawingsAccess{\r\n  event ContractUpgrade(address newContract);\r\n\r\n  address public owner;\r\n\r\n  bool public paused = false;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function setNewOwner(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function withdrawBalance() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n \r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n  }\r\n\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if(newOwner != address(0)){\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public returns (bool){\r\n    paused = true;\r\n    emit Pause();\r\n    return true;   \r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public returns (bool){\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;   \r\n  } \r\n}\r\n\r\n// File: contracts/SaleClockAuction.sol\r\n\r\ncontract SaleClockAuction is Pausable {\r\n  bool public isSaleClockAuction = true;\r\n\r\n  struct Auction {\r\n    address seller;\r\n    uint128 startingPrice;  //wei\r\n    uint128 endingPrice;    //wei\r\n    uint64 duration; //秒\r\n    uint64 startedAt; //出售开始时间，如果出售终止则为0\r\n  }\r\n\r\n  ERC721Basic public nonFungibleContract;    //NFT 合约地址\r\n\r\n  uint256 public commission;    //交易佣金，按交易总额的百分比收取。0 - 10000 表示0% - 100%\r\n  mapping (uint256 => Auction) tokenIdToAuction;   //mapping 所有参与竞拍的跑图ID\r\n  mapping (address => uint256[]) public ownershipAuctionTokenIDs;   //记录用户当前正在拍卖的全部跑图ID\r\n\r\n  event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n  event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n  event AuctionCancelled(uint256 tokenId);\r\n\r\n  bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n\r\n  constructor(address _nftAddress, uint256 _commission) public {\r\n    require(_commission <= 10000);\r\n    commission = _commission;\r\n   \r\n    ERC721Basic candidateContract = ERC721Basic(_nftAddress);\r\n    require(candidateContract.implementsERC721());\r\n    require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n    nonFungibleContract = candidateContract;\r\n  }\r\n\r\n  function () external {}\t//不直接接收数字货币\r\n\r\n  //输入参数合法性校验\r\n  modifier canBeStoredWith64Bits(uint256 _value){\r\n    require(_value <= 18446744073709551615);\r\n    _;\r\n  }\r\n\r\n  modifier canBeStoredWith128Bits(uint256 _value){\r\n    require(_value < 340282366920938463463374607431768211455);\r\n    _;\r\n  }\r\n\r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool){\r\n    return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n  }\r\n\r\n  function _escrow(address _owner, uint256 _tokenId) internal {\r\n    nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    //增加-保存用户正在拍卖的跑图ID集合\r\n    ownershipAuctionTokenIDs[_owner].push(_tokenId);\r\n  }\r\n\r\n  //添加竞拍（会将跑图从当前主人地址转移到拍卖合约账户下，冻结）\r\n  function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n    require(_auction.duration >= 1 minutes);\r\n\r\n    tokenIdToAuction[_tokenId] = _auction;\r\n\r\n    emit AuctionCreated(\r\n      uint256(_tokenId),\r\n      uint256(_auction.startingPrice),\r\n      uint256(_auction.endingPrice),\r\n      uint256(_auction.duration)\r\n    );\r\n  }\r\n\r\n  //取消拍卖\r\n  function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n    _removeAuction(_tokenId);\r\n    nonFungibleContract.transfer(_seller, _tokenId);\r\n    //将取消拍卖的tokentID从用户正在拍卖的跑图ID集合列表里删除\r\n    removeFromOwnershipAuctionTokenIDs(_seller, _tokenId);\r\n    \r\n    emit AuctionCancelled(_tokenId);\r\n  }\r\n\r\n  //从用户正在拍卖的跑图ID集合列表里删除\r\n  function removeFromOwnershipAuctionTokenIDs(address seller, uint256 tokenId) internal {\r\n    uint len = ownershipAuctionTokenIDs[seller].length;\r\n    if(len > 0){\r\n      bool hasFound = false;\r\n      for(uint i=0; i<len-1; i++){\r\n        if(!hasFound && ownershipAuctionTokenIDs[seller][i] == tokenId){\r\n          hasFound = true;\r\n          ownershipAuctionTokenIDs[seller][i] = ownershipAuctionTokenIDs[seller][i+1];\r\n        }else if(hasFound){\r\n          ownershipAuctionTokenIDs[seller][i] = ownershipAuctionTokenIDs[seller][i+1];\r\n        }\r\n      }\r\n\r\n      if(!hasFound && ownershipAuctionTokenIDs[seller][len - 1] == tokenId){  //如果最后一个元素才是要删除的\r\n        hasFound = true;\r\n      }\r\n      \r\n      if(hasFound){\r\n        delete ownershipAuctionTokenIDs[seller][len-1];\r\n        ownershipAuctionTokenIDs[seller].length--; //需要将数组的长度减一\r\n      }\r\n    }\r\n  }\r\n\r\n  function _bid(uint256 _tokenId, uint256 _bidAmount) internal returns(uint256){\r\n    Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n    require(_isOnAuction(auction));\r\n\r\n    uint256 price = _currentPrice(auction);\r\n    require(_bidAmount >= price);\r\n\r\n    address seller = auction.seller;\r\n    _removeAuction(_tokenId);\r\n\r\n    //将取消拍卖的tokentID从用户正在拍卖的跑图ID集合列表里删除\r\n    removeFromOwnershipAuctionTokenIDs(seller, _tokenId);\r\n    \r\n    //向出售者支付售卖所得。\r\n    if(price > 0) {\r\n      uint256 auctioneerCommission = _computeCommission(price);\r\n      uint256 sellerProceeds = price - auctioneerCommission;\r\n\r\n      seller.transfer(sellerProceeds);\r\n    }\r\n\r\n    //将余额还给出售者\r\n    uint256 bidExcess = _bidAmount - price;\r\n    msg.sender.transfer(bidExcess);\r\n\r\n    emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n    return price;\r\n  } \r\n\r\n  function _removeAuction(uint256 _tokenId) internal {\r\n    delete tokenIdToAuction[_tokenId];\r\n  }\r\n\r\n  function _isOnAuction(Auction storage _auction) internal view returns (bool){\r\n    return (_auction.startedAt > 0);\r\n  }\r\n\r\n  function _currentPrice(Auction storage _auction) internal view returns (uint256) {\r\n    uint256 secondsPassed = 0;\r\n    \r\n    if(now > _auction.startedAt){\r\n      secondsPassed = now - _auction.startedAt;\r\n    }\r\n\r\n    return _computeCurrentPrice(\r\n      _auction.startingPrice,\r\n      _auction.endingPrice,\r\n      _auction.duration,\r\n      secondsPassed\r\n    );\r\n  }\r\n\r\n  //根据拍卖时间计算当前跑图价格\r\n  function _computeCurrentPrice(\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    uint256 _secondsPassed\r\n  ) internal pure returns (uint256){\r\n    \r\n    if(_secondsPassed >= _duration){\t//如果超过竞拍时间，直接取最小价格\r\n      return _endingPrice;  \r\n    } else {\r\n      int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n      int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n      int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n      return uint256(currentPrice); \r\n    }\r\n  }\r\n\r\n  //计算跑图出售佣金\r\n  function _computeCommission(uint256 _price) internal view returns (uint256) { \r\n    return _price * commission / 10000;\r\n  }\r\n\r\n  //提取账户资金\r\n  function withdrawBalance() external {\r\n    address nftAddress = address(nonFungibleContract);  \r\n    require(msg.sender == owner || msg.sender == nftAddress);\r\n\r\n    nftAddress.transfer(address(this).balance);\r\n  }\r\n\r\n  //创建拍卖\r\n  function createAuction(\r\n    uint256 _tokenId,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration,\r\n    address _seller\r\n  ) public\r\n    canBeStoredWith128Bits(_startingPrice)\r\n    canBeStoredWith128Bits(_endingPrice)\r\n    canBeStoredWith64Bits(_duration)\r\n  {\r\n    require(msg.sender == address(nonFungibleContract));\r\n    require(_owns(_seller, _tokenId));\r\n    _escrow(_seller, _tokenId);\r\n    Auction memory auction = Auction(\r\n      _seller,\r\n      uint128(_startingPrice),\r\n      uint128(_endingPrice),\r\n      uint64(_duration),\r\n      uint64(now)\r\n    );\r\n    _addAuction(_tokenId, auction);\r\n  }\r\n\r\n  function bid(uint256 _tokenId) public payable whenNotPaused {\r\n    _bid(_tokenId, msg.value);\r\n    nonFungibleContract.transfer(msg.sender, _tokenId);\r\n  }\r\n\r\n  function cancelAuction(uint256 _tokenId) public {\r\n    Auction storage auction = tokenIdToAuction[_tokenId];\r\n    require(_isOnAuction(auction));\r\n    address seller = auction.seller;\r\n    require(msg.sender == seller);\r\n\r\n    _cancelAuction(_tokenId, seller);\r\n  }\r\n\r\n  function cancelAuctionWhenPaused(uint256 _tokenId) public onlyOwner whenPaused {\r\n    Auction storage auction = tokenIdToAuction[_tokenId];\r\n    require(_isOnAuction(auction));\r\n    _cancelAuction(_tokenId, auction.seller);\r\n  }\r\n\r\n  function getAuction(uint256 _tokenId) public view returns(\r\n    address seller,\r\n    uint256 startingPrice,\r\n    uint256 endingPrice,\r\n    uint256 duration,\r\n    uint256 startedAt\r\n  ){\r\n    Auction storage auction = tokenIdToAuction[_tokenId];\r\n    require(_isOnAuction(auction));\r\n    return(\r\n      auction.seller,\r\n      auction.startingPrice,\r\n      auction.endingPrice,\r\n      auction.duration,\r\n      auction.startedAt\r\n    );\r\n  }\r\n\r\n  function getCurrentPrice(uint256 _tokenId) public view returns (uint256){\r\n    Auction storage auction = tokenIdToAuction[_tokenId];\r\n    require(_isOnAuction(auction));\r\n    return _currentPrice(auction);\r\n  }\r\n\r\n  function getFund() public view returns (uint256 balance){\r\n    return address(this).balance;\r\n  }\r\n\r\n  //获取用户当前所有正在拍卖的跑图ID\r\n  function getAuctionTokenIDsOfOwner(address owner) public view returns(uint256[]){\r\n    return ownershipAuctionTokenIDs[owner];\r\n  }\r\n}\r\n\r\n// File: contracts/ChainDrawingsBase.sol\r\n\r\ncontract ChainDrawingsBase is ChainDrawingsAccess, SupportsInterfaceWithLookup, ERC721BasicToken, ERC721Enumerable, ERC721Metadata {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  string internal name_ = \"LianPaoTu\";\r\n  string internal symbol_ = \"LPT\";\r\n  \r\n  //Event\r\n  event Create(address owner, uint256 drawingsID, bytes32 chainID);\r\n\r\n  //跑图数据结构-目前保存跑图ID和跑图原创者名称。跑图属性、跑图gps数据、跑图示例图片不适合放在以太坊链，需要放在Fabric或IPFS系统里\r\n  struct ChainDrawings {\r\n    bytes32 chainID;\t\t//链跑图ID。（对应链跑图ID、创意跑步App内跑图ID）（utf8转码必须是bytes32 或 bytes）\r\n    bytes32 author;\t//原创者名称\r\n    uint64 createTime;\t//链跑图创建时间\r\n  }\r\n\r\n  //链跑图数组\r\n  ChainDrawings[] drawings;\r\n\r\n  mapping (bytes32 => uint256) public chainIDToTokenID;   //chainID对应的链跑图ID，用来方便查找和判断跑图是否已上链 (tokenID)\r\n  mapping (uint256 => string) internal tokenIDToUri; //Mapping from NFT ID to metadata uri. (tokenID)\r\n\r\n\r\n  // ERC721Enumerable\r\n  mapping(address => uint256[]) internal ownedTokens;  //Mapping from owner to list of owned token IDs(不包含正在拍卖的跑图 tokenID)\r\n  mapping(uint256 => uint256) internal ownedTokensIndex; //Mapping from token ID to index of the owner tokens list(不包含正在拍卖的跑图 tokenID, index)\r\n  uint256[] internal allTokens; //Array with all token ids, used for enumeration (tokenID)\r\n  mapping(uint256 => uint256) internal allTokensIndex;  //Mapping from token id to position in the allTokens array(tokenID, index)\r\n\r\n\r\n  SaleClockAuction public saleAuction;\r\n  \r\n  constructor() public {\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n  \r\n  // Guarantees that _tokenId is a valid Token.  _tokenId ID of the NFT to validate.\r\n  modifier validNFToken(uint256 _tokenId) {\r\n    require(tokenIDToOwner[_tokenId] != address(0));\r\n    _;\r\n  }\r\n  \r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(_exists(_tokenId));\r\n    return tokenIDToUri[_tokenId];\r\n  }\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index ) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n  \r\n  //拍卖时，token地址会转入拍卖合约 ownershipTokenCount\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n    if(_from != address(0)){\r\n      ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);  //旧的跑图拥有者，跑图数量减1\r\n      delete tokenIDToApproved[_tokenId];\r\n      removeFromOwnedTokens(_from, _tokenId);\r\n    }\r\n\r\n    ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);  //新的拥有者，跑图数量加1\r\n    tokenIDToOwner[_tokenId] = _to;\r\n\r\n    uint256 length = ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length.sub(1);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool){\r\n    return tokenIDToOwner[_tokenId] == _claimant;\r\n  }\r\n\r\n  function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return tokenIDToApproved[_tokenId] == _claimant;\r\n  }\r\n\r\n  function _approve(uint256 _tokenId, address _approved) internal {\r\n    tokenIDToApproved[_tokenId] = _approved;\r\n    emit Approval(msg.sender, _approved, _tokenId);\r\n  }\r\n\r\n  //Required for ERC-721\r\n  function approve(address _to, uint256 _tokenId) public whenNotPaused {\r\n    require(_owns(msg.sender, _tokenId));\r\n    _approve(_tokenId, _to);\r\n  }\r\n\r\n  //Required for ERC-721\r\n  function transfer(address _to, uint256 _tokenId) public whenNotPaused{\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_to != address(saleAuction));\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  //Required for ERC-721\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused{\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_approvedFor(msg.sender, _tokenId));\r\n    require(_owns(_from, _tokenId));\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  //Optional for ERC-721\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused {\r\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n  \r\n  //Optional for ERC-721\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public whenNotPaused {\r\n    _safeTransferFrom(_from, _to, _tokenId, _data);\r\n  }\r\n  \r\n  function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) internal validNFToken(_tokenId) {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n \r\n  // Optional method for ERC-721(不包含正在出售的)\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens){\r\n    if(balanceOf(_owner) == 0){\r\n      return new uint256[](0);\r\n    }else{\r\n      return ownedTokens[_owner];\r\n    }\r\n  }\r\n\r\n  //创建链跑图\r\n  function _createDrawings(bytes32 _chainID, bytes32 _author, address _owner, string metaUrl) internal returns(uint) {\r\n    ChainDrawings memory _drawings = ChainDrawings({\r\n      chainID: _chainID,\r\n      author: _author,\r\n      createTime: uint64(now)\r\n    });\r\n\r\n    uint256 _tokenId = drawings.push(_drawings);\r\n    _tokenId = _tokenId.sub(1);\r\n    chainIDToTokenID[_chainID] = _tokenId;\r\n    require(_tokenId == uint256(uint32(_tokenId)));\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n    tokenIDToUri[_tokenId] = metaUrl;\r\n\r\n    //emit\r\n    emit Create(_owner, _tokenId, _chainID);\r\n    _transfer(address(0), _owner, _tokenId);\r\n\r\n    return _tokenId;\r\n  }\r\n\r\n  //从用户跑图列表中删除（ERC721Enumerable）\r\n  function removeFromOwnedTokens(address _owner, uint256 _tokenId) internal {\r\n    require(tokenIDToOwner[_tokenId] == _owner);\r\n    uint len = ownedTokens[_owner].length;\r\n    assert(len > 0);\r\n\r\n    if(len == 1){\r\n      delete ownedTokens[_owner];\r\n      delete ownedTokensIndex[_tokenId];\r\n      return;\r\n    }\r\n\r\n    uint256 tokenToRemoveIndex = ownedTokensIndex[_tokenId];\r\n\r\n    if(tokenToRemoveIndex == len.sub(1)){\r\n      ownedTokens[_owner].length = ownedTokens[_owner].length.sub(1);\r\n      delete ownedTokensIndex[_tokenId];\r\n      return;\r\n    }\r\n\r\n    uint256 lastToken = ownedTokens[_owner][len.sub(1)];\r\n\r\n    ownedTokens[_owner][tokenToRemoveIndex] = lastToken;\r\n    ownedTokensIndex[lastToken] = tokenToRemoveIndex;\r\n    ownedTokens[_owner].length = ownedTokens[_owner].length.sub(1);\r\n    delete ownedTokensIndex[_tokenId];\r\n  }\r\n}\r\n\r\n// File: contracts/ChainDrawingsAuction.sol\r\n\r\ncontract ChainDrawingsAuction is ChainDrawingsBase {\r\n\r\n  function setSaleAuctionAddress(address _address) public onlyOwner {\r\n    SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n    require(candidateContract.isSaleClockAuction());\r\n\r\n    saleAuction = candidateContract;\r\n  }\r\n\r\n  function createSaleAuction(\r\n    uint256 _tokenID,\r\n    uint256 _startingPrice,\r\n    uint256 _endingPrice,\r\n    uint256 _duration\r\n  ) public whenNotPaused {\r\n\r\n    require(_owns(msg.sender, _tokenID));\r\n    approve(saleAuction, _tokenID);\r\n    saleAuction.createAuction(_tokenID, _startingPrice, _endingPrice, _duration, msg.sender);\r\n  }\r\n\r\n  function withdrawAuctionBalances() external onlyOwner {\r\n    saleAuction.withdrawBalance();\r\n  }\r\n}\r\n\r\n// File: contracts/ChainDrawingsGeneration.sol\r\n\r\ncontract ChainDrawingsGeneration is ChainDrawingsAuction {\r\n  //为原创者创建上链跑图\r\n  function createAuthorDrawings(bytes32 _chainID, \r\n                                bytes32 _author, \r\n                                address _owner, \r\n                                string _metaUrl) public onlyOwner {\r\n    //通过chainID查找跑图\r\n    uint256 tokenID = chainIDToTokenID[_chainID];\r\n    if(tokenID != 0){  //链跑图已存在，仅修改跑图属性\r\n      ChainDrawings storage drawing = drawings[tokenID];\r\n      drawing.author = _author;\r\n\r\n      return;\r\n    }\r\n\r\n    if(_owner == address(0)){\r\n      _owner = owner;\r\n    }\r\n    _createDrawings(_chainID, _author, _owner, _metaUrl);\r\n  }\r\n\r\n  //为跑地图创建上链跑图(原创者署名为”跑地图“的跑图，即是创意跑步设计作品)\r\n  function createInternalAuction(bytes32 _chainID, \r\n                                bytes32 _author, \r\n                                uint256 _startingPrice,\r\n                                uint256 _endingPrice,\r\n                                uint256 _duration, \r\n                                string _metaUrl) public onlyOwner {\r\n    //通过chainID查找跑图\r\n    uint256 tokenID  = chainIDToTokenID[_chainID];\r\n    if(tokenID != 0){  //链跑图已存在，仅修改跑图属性\r\n      ChainDrawings storage drawing = drawings[tokenID];\r\n      drawing.author = _author;\r\n\r\n      return;\r\n    }\r\n\r\n    uint256 newTokenID = _createDrawings(_chainID, _author, address(this), _metaUrl);\r\n    _approve(newTokenID, saleAuction);\r\n\r\n    saleAuction.createAuction(\r\n      newTokenID,\r\n      _startingPrice,\r\n      _endingPrice,\r\n      _duration,\r\n      address(this)\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/BatchCreateDrawingsInterface.sol\r\n\r\n// 批量增加链跑图接口\r\ncontract BatchCreateDrawingsInterface {\r\n  function isBatchCreateDrawings() public pure returns (bool);\r\n\r\n  // 获取内部链跑图\r\n  function getInternalDrawings(uint index) public returns (bytes32 _chainID, \r\n                                uint256 _startingPrice,\r\n                                uint256 _endingPrice,\r\n                                uint256 _duration, \r\n                                string memory _metaUrl);\r\n\r\n  // 获取原创者链跑图\r\n  function getAuthorDrawings(uint index) public returns (bytes32 _chainID, \r\n                                bytes32 _author, \r\n                                address _owner, \r\n                                string memory _metaUrl);\r\n}\r\n\r\n// File: contracts/ChainDrawingsCore.sol\r\n\r\ncontract ChainDrawingsCore is ChainDrawingsGeneration {\r\n  address public newContractAddress;\r\n  BatchCreateDrawingsInterface public batchCreateDrawings;\r\n  \r\n  constructor() public {\r\n    paused = true;\r\n    owner = msg.sender;\r\n    _createDrawings(\"-1\",  \"-1\", address(0), \"https://chain.chuangyipaobu.com\"); //创建合约的时候，需要把默认的0位排除掉\r\n  }\r\n  \r\n  //设置批量导入合约地址\r\n  function setBatchCreateDrawingsAddress(address _address) external onlyOwner {\r\n    BatchCreateDrawingsInterface candidateContract = BatchCreateDrawingsInterface(_address);\r\n    require(candidateContract.isBatchCreateDrawings());\r\n\r\n    // Set the new contract address\r\n    batchCreateDrawings = candidateContract;\r\n  }\r\n\r\n  //批量生成内部链跑图\r\n  function batchCreateInternalDrawings() internal onlyOwner {\r\n    require(batchCreateDrawings != address(0));\r\n\r\n    bytes32 chainID;\r\n    uint256 startingPrice;\r\n    uint256 endingPrice;\r\n    uint256 duration;\r\n    string memory metaUrl;\r\n    uint index = 0;\r\n\r\n    while(index < 20){\t//避免死循环和执行失败，最多一次创建20个链跑图\r\n      (chainID, startingPrice, endingPrice, duration, metaUrl) = batchCreateDrawings.getInternalDrawings(index++);\r\n      if(chainID == \"0\"){\r\n        return;\r\n      }\r\n\r\n      if(chainIDToTokenID[chainID] > 0){\r\n        continue;\r\n      }\r\n    \r\n      createInternalAuction(chainID, \"跑地图\", startingPrice, endingPrice, duration, metaUrl);\r\n    }\r\n  }\r\n\r\n  //批量生成原创者链跑图\r\n  function batchCreateAuthorDrawings() internal onlyOwner {\r\n    require(batchCreateDrawings != address(0));\r\n\r\n    bytes32 chainID;\r\n    bytes32 author;\r\n    address owner; \r\n    string memory metaUrl;\r\n    uint index = 0;\r\n\r\n    while(index < 20){\t//避免死循环和执行失败，最多一次创建20个链跑图\r\n      (chainID, author, owner, metaUrl) = batchCreateDrawings.getAuthorDrawings(index++);\r\n      if(chainID == \"0\"){\r\n        return;\r\n      }\r\n      if(chainIDToTokenID[chainID] > 0){\r\n        continue;\r\n      }  \r\n\r\n      createAuthorDrawings(chainID, author, owner, metaUrl);\r\n    }\r\n  }\r\n\r\n  //批量生成链跑图\r\n  function batchCreateDrawings() external onlyOwner {\r\n    batchCreateInternalDrawings();\r\n    batchCreateAuthorDrawings();\r\n  }\r\n\r\n  //永久终止合约\r\n  function setNewAddress(address _newAddress) external onlyOwner whenPaused {\r\n    newContractAddress = _newAddress;\r\n    emit ContractUpgrade(_newAddress);\r\n  }\r\n\r\n  function() external payable {\r\n    require(msg.sender == address(saleAuction));\r\n  }\r\n\r\n  function getChainDrawings(uint256 _id) public view returns(\r\n      uint256 tokenID,\r\n      bytes32 chainID,  //链跑图ID。（对应链跑图ID、创意跑步App内跑图ID）\r\n      bytes32 author,   //原创者名称\r\n      uint256 createTime\r\n  ) {\r\n    ChainDrawings storage drawing = drawings[_id];\r\n\r\n    tokenID = _id;\r\n    chainID = drawing.chainID;\r\n    author = drawing.author;\r\n    createTime = drawing.createTime;\r\n  }\r\n\r\n  //获取主合约地址\r\n  function getCoreAddress() external view returns(address){\r\n    return address(this);\r\n  }\r\n\r\n  //获取拍卖合约地址\r\n  function getSaleAuctionAddress() external view returns(address){\r\n    return address(saleAuction);\r\n  }\r\n\r\n  //获取批量导入合约地址\r\n  function getBatchCreateDrawingsAddress() external view returns(address){\r\n    return address(batchCreateDrawings);\r\n  }\r\n\r\n  function unpause() public onlyOwner whenPaused {\r\n    require(saleAuction != address(0));\r\n    require(newContractAddress == address(0));\r\n\r\n    super.unpause();\r\n  }\r\n\r\n  //通过跑图chainID，获取链跑图信息\r\n  function getChainDrawingsByChainID(bytes32 _chainID) external view returns(\r\n      uint256 tokenID,\r\n      bytes32 chainID,        //链跑图ID。（对应链跑图ID、创意跑步App内跑图ID）\r\n      bytes32 author,   //原创者名称\r\n      uint256 createTime         //链跑图创建时间\r\n  ){\r\n    tokenID = chainIDToTokenID[_chainID];\r\n    return getChainDrawings(tokenID);\r\n  }\r\n\r\n  function getFund() external view returns (uint256 balance){\r\n    return address(this).balance;\r\n  }\r\n\r\n  //获取用户名下所有的TokenID（包含正在出售的）\r\n  function getAllTokensOfUser(address _owner) public view returns (uint256[]){\r\n    uint256[] memory ownerTokensNonAuction = this.tokensOfOwner(_owner);\r\n    uint256[] memory ownerTokensAuction = saleAuction.getAuctionTokenIDsOfOwner(_owner);\r\n    \r\n    uint length1 = ownerTokensNonAuction.length;\r\n    uint length2 = ownerTokensAuction.length;\r\n    uint length = length1 + length2;\r\n\r\n    if(length == 0) return;\r\n\r\n    uint256[] memory result = new uint[](length);\r\n    uint index = 0;\r\n\r\n    for (uint i=0; i<length2; i++) {\r\n      result[index++] = ownerTokensAuction[i];\r\n    }\r\n    for (uint j=0; j<length1; j++) {\r\n      result[index++] = ownerTokensNonAuction[j];\r\n    }\r\n    \r\n    return result;\r\n  }\r\n  \r\n  //获取用户名下所有的ChainID（包含正在出售的）\r\n  function getAllChainIDsOfUser(address _owner) external view returns (bytes32[]){\r\n    uint256[] memory ownerTokens = this.getAllTokensOfUser(_owner);\r\n    uint len = ownerTokens.length;\r\n \r\n    if(len == 0) return;\r\n\r\n    bytes32[] memory ownerChainIDs = new bytes32[](len);\r\n    for (uint i=0; i<len; i++) {\r\n      ChainDrawings storage drawing = drawings[ownerTokens[i]];\r\n      ownerChainIDs[i] = drawing.chainID;\r\n    }\r\n    return ownerChainIDs;\r\n  }\r\n\r\n  //获取用户名下跑图总数（包含正在出售的）\r\n  function getTokensCountOfUser(address _owner) external view returns (uint256){\r\n    uint256[] memory ownerTokensNonAuction = this.tokensOfOwner(_owner);\r\n    uint256[] memory ownerTokensAuction = saleAuction.getAuctionTokenIDsOfOwner(_owner);\r\n    \r\n    uint length1 = ownerTokensNonAuction.length;\r\n    uint length2 = ownerTokensAuction.length;\r\n    return length1 + length2;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chainIDToTokenID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chainID\",\"type\":\"bytes32\"},{\"name\":\"_author\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_metaUrl\",\"type\":\"string\"}],\"name\":\"createAuthorDrawings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleAuctionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chainID\",\"type\":\"bytes32\"}],\"name\":\"getChainDrawingsByChainID\",\"outputs\":[{\"name\":\"tokenID\",\"type\":\"uint256\"},{\"name\":\"chainID\",\"type\":\"bytes32\"},{\"name\":\"author\",\"type\":\"bytes32\"},{\"name\":\"createTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTokensCountOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chainID\",\"type\":\"bytes32\"},{\"name\":\"_author\",\"type\":\"bytes32\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_metaUrl\",\"type\":\"string\"}],\"name\":\"createInternalAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllTokensOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBatchCreateDrawingsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFund\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllChainIDsOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getChainDrawings\",\"outputs\":[{\"name\":\"tokenID\",\"type\":\"uint256\"},{\"name\":\"chainID\",\"type\":\"bytes32\"},{\"name\":\"author\",\"type\":\"bytes32\"},{\"name\":\"createTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"batchCreateDrawings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBatchCreateDrawingsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"drawingsID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chainID\",\"type\":\"bytes32\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"ChainDrawingsCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://72746b80facd4d6feaca34a8498cae91f8af3fdb9c897ad78b49a53e68a6ac50"}]}