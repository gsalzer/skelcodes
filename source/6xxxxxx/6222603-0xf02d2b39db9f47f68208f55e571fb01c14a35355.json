{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/*\r\n\r\n    Copyright 2018, Vicent Nos & Mireia Puig\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n*/\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//:                                                  ://\r\n//:          SpaceImpulse Public Engagement          ://\r\n//:..................................................://\r\n////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\ncontract TokenCHK {\r\n\r\n  function balanceOf(address _owner) public pure returns (uint256 balance) {}\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ncontract SpaceImpulse is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Space Impulse Public Engagement\";      // Extended name of this contract\r\n    uint256 public tokenPrice;            // Set the fixed SpaceImpulse token price\r\n    uint256 public maxCap = 0;            // Set the target maximum cap in ETH\r\n    address public FWDaddrETH;            // Set the address to forward the received ETH to\r\n    address public SpaceImpulseERC20;     // Set the SpaceImpulse ERC20 contract address\r\n    uint256 public totalSold;             // Keep track of the contributions total\r\n    uint256 public minPersonalCap;        // Set the minimal cap in ETH\r\n    uint256 public decimals = 18;         // The decimals to consider\r\n\r\n    mapping (address => uint256) public sold;         // Map the SpaceImpulse token allcations\r\n\r\n    uint256 public pubEnd;                            // Set the unixtime END for the public engagement\r\n    address contractAddr = this;                      // Better way to point to this from this\r\n\r\n    // Constant to simplify the conversion of token amounts into integer form\r\n    uint256 public tokenUnit = uint256(10)**decimals;\r\n\r\n\r\n\r\n    //\r\n    // \"toETHaddr\" is the address to which the ETH contributions are forwarded to, aka FWDaddrETH\r\n    // \"SpaceImpulseERC20\" is the address of the SpaceImpulseERC20 token contract.\r\n    //\r\n    // NOTE: this contract will sell only its token balance on the ERC20 specified in SpaceImpulseERC20\r\n    //       the maxCap in ETH and the tokenPrice will indirectly set the SpaceImpulse token amount on sale\r\n    //\r\n    // NOTE: this contract should have sufficient SpaceImpulse token balance to be > maxCap / tokenPrice\r\n    //\r\n    // NOTE: this contract will stop REGARDLESS of the above (maxCap) when its token balance is all sold\r\n    //\r\n    // The Owner of this contract can set: Price, End, MaxCap, SpaceImpulseERC20 and ETH Forward address\r\n    //\r\n    // The received ETH are directly forwarded to the external FWDaddrETH address\r\n    // The SpaceImpulse tokens are transferred to the contributing addresses once withdrawPUB is executed\r\n    //\r\n\r\n\r\n    constructor\r\n        (\r\n        address SpaceImpulse_ERC20\r\n        ) public {\r\n        FWDaddrETH = 0xD9614b3FaC2B523504AbC18104e4B32EE0605855;\r\n        SpaceImpulseERC20 = SpaceImpulse_ERC20;\r\n        tokenPrice = 150000000000000;\r\n        minPersonalCap = 150000000000000000;\r\n        pubEnd = 1540987140;\r\n\r\n    }\r\n\r\n    function () public payable {\r\n        buy();               // Allow to buy tokens sending ETH directly to the contract, fallback\r\n    }\r\n\r\n    function setFWDaddrETH(address _value) public onlyOwner {\r\n      FWDaddrETH = _value;     // Set the forward address default toETHaddr\r\n\r\n    }\r\n\r\n\r\n    function setSpaceImpulse(address _value) public onlyOwner {\r\n      SpaceImpulseERC20 = _value;     // Set the SpaceImpulseERC20 contract address\r\n\r\n    }\r\n\r\n\r\n    function setMaxCap(uint256 _value) public onlyOwner {\r\n      maxCap = _value;         // Set the max cap in ETH default 0\r\n\r\n    }\r\n\r\n\r\n    function setPrice(uint256 _value) public onlyOwner {\r\n      tokenPrice = _value;     // Set the token price default 0\r\n\r\n    }\r\n\r\n\r\n    function setPubEnd(uint256 _value) public onlyOwner {\r\n      pubEnd = _value;         // Set the END of the public engagement unixtime default 0\r\n\r\n    }\r\n\r\n    function setMinPersonalCap(uint256 _value) public onlyOwner {\r\n      minPersonalCap = _value;  // Set min amount to buy\r\n    }\r\n\r\n\r\n\r\n    function buy() public payable {\r\n\r\n        require(block.timestamp < pubEnd);          // Require the current unixtime to be lower than the END unixtime\r\n        require(msg.value > 0);                     // Require the sender to send an ETH tx higher than 0\r\n        require(msg.value <= msg.sender.balance + msg.value);   // Require the sender to have sufficient ETH balance for the tx\r\n        require(msg.value >= minPersonalCap);        // Require sender eth amount be higher than minPersonalCap\r\n\r\n        // Requiring this to avoid going out of tokens, aka we are getting just true/false from the transfer call\r\n        require(msg.value + totalSold <= maxCap);\r\n\r\n        // Calculate the amount of tokens per contribution\r\n        uint256 tokenAmount = (msg.value * tokenUnit) / tokenPrice;\r\n\r\n        // Requiring sufficient token balance on this contract to accept the tx\r\n        require(tokenAmount + ((totalSold * tokenUnit) / tokenPrice)<=TokenCHK(SpaceImpulseERC20).balanceOf(contractAddr));\r\n\r\n        transferBuy(msg.sender, tokenAmount);       // Instruct the accounting function\r\n        totalSold = totalSold.add(msg.value);       // Account for the total contributed/sold\r\n        FWDaddrETH.transfer(msg.value);             // Forward the ETH received to the external address\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function withdrawPUB() public returns(bool){\r\n\r\n        require(block.timestamp > pubEnd);          // Require the SpaceImpulse to be over - actual time higher than end unixtime\r\n        require(sold[msg.sender] > 0);              // Require the SpaceImpulseERC20 token balance to be sent to be higher than 0\r\n\r\n        // Send SpaceImpulseERC20 tokens to the contributors proportionally to their contribution/s\r\n        if(!SpaceImpulseERC20.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, sold[msg.sender])){revert();}\r\n\r\n        delete sold[msg.sender];\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function transferBuy(address _to, uint256 _value) internal returns (bool) {\r\n\r\n        require(_to != address(0));                 // Require the destination address being non-zero\r\n\r\n        sold[_to] = sold[_to].add(_value);            // Account for multiple txs from the same address\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n        //\r\n        // Probably the sky would fall down first but, in case skynet feels funny..\r\n        // ..we try to make sure anyway that no ETH would get stuck in this contract\r\n        //\r\n    function EMGwithdraw(uint256 weiValue) external onlyOwner {\r\n        require(block.timestamp > pubEnd);          // Require the public engagement to be over\r\n        require(weiValue > 0);                      // Require a non-zero value\r\n\r\n        FWDaddrETH.transfer(weiValue);              // Transfer to the external ETH forward address\r\n    }\r\n\r\n    function sweep(address _token, uint256 _amount) public onlyOwner {\r\n        TokenCHK token = TokenCHK(_token);\r\n\r\n        if(!token.transfer(owner, _amount)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPersonalCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setSpaceImpulse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setFWDaddrETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPubEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinPersonalCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"EMGwithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FWDaddrETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPUB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SpaceImpulseERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"SpaceImpulse_ERC20\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SpaceImpulse","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000896029f4e13e6d62ba0d97fb5b16110fca132c14","Library":"","SwarmSource":"bzzr://8321e0702ed23e1d511feb5830d2a321bda47bc46742c9deaefdeb920e71dea0"}]}