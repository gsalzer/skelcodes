{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure\r\n    returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n    returns (uint256)\r\n    {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n    returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n    returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20\r\n{\r\n    function totalSupply() view external returns (uint _totalSupply);\r\n    function balanceOf(address _owner) view external returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) view external returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract LynchpinToken is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    string  public name        = \"Lynchpin\";\r\n    string  public symbol      = \"LYN\";\r\n    uint8   public decimals    = 18;\r\n    uint    public totalSupply = 5000000 * (10 ** uint(decimals));\r\n    address public owner       = 0xAc983022185b95eF2B2C7219143483BD0C65Ecda;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    constructor() public\r\n    {\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    function totalSupply() view external returns (uint _totalSupply)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) view external returns (uint balance)\r\n    {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view external returns (uint remaining)\r\n    {\r\n        return allowance[_owner][_spender];\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal\r\n    {\r\n        require(_to != 0x0);\r\n\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success)\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success)\r\n    {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // disallow incoming ether to this contract\r\n    function () public\r\n    {\r\n        revert();\r\n    }\r\n}\r\n\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) public\r\n    {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner\r\n    {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LynchpinPrivateICO is Ownable(0xAc983022185b95eF2B2C7219143483BD0C65Ecda)\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5);\r\n\r\n    uint256 public tokeninOneEther;\r\n    uint256 public maxTokensToSell = 2000000 * 10**18;\r\n    uint256 public tokenSold;\r\n    bool crowdsaleClosed = false;\r\n\r\n    uint256 LOCK_PERIOD_START    = 1556668800;    // Wednesday, May 1, 2019 12:00:00 AM         start time\r\n    uint256 LOCK_PERIOD_9_MONTH  = 1580515200;    // Saturday, February 1, 2020 12:00:00 AM     9th month done\r\n    uint256 LOCK_PERIOD_10_MONTH = 1583020800;    // Sunday, March 1, 2020 12:00:00 AM          10th  month done\r\n    uint256 LOCK_PERIOD_11_MONTH = 1585699200;    // Wednesday, April 1, 2020 12:00:00 AM       11th month done\r\n    uint256 LOCK_PERIOD_END      = 1588291200;    // Friday, May 1, 2020 12:00:00 AM            12th month done - lock-in period ends\r\n\r\n    mapping(address => uint256) public tokensOwed;\r\n    mapping(address => uint256) public ethContribution;\r\n    mapping(address => bool) public isWhitelisted;\r\n\r\n    event LogAddedToWhitelist(address indexed _contributor);\r\n    event LogTokenRateUpdated(uint256 _newRate);\r\n    event LogSaleClosed();\r\n\r\n    constructor(uint256 _tokeninOneEther) public\r\n    {\r\n        require (_tokeninOneEther > 0);\r\n        isWhitelisted[owner] = true;\r\n        tokeninOneEther = _tokeninOneEther;\r\n        emit LogTokenRateUpdated(_tokeninOneEther);\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        require(!crowdsaleClosed);\r\n        require(isWhitelisted[msg.sender]);\r\n\r\n        uint256 amountToSend = msg.value * tokeninOneEther;\r\n\r\n        require (tokenSold.add(amountToSend) <= maxTokensToSell);\r\n\r\n        tokensOwed[msg.sender] += amountToSend;\r\n        tokenSold += amountToSend;\r\n        ethContribution[msg.sender] += msg.value;\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function addContributor(address _contributor) external onlyOwner\r\n    {\r\n        require(_contributor != address(0));\r\n        require(!isWhitelisted[_contributor]);\r\n        isWhitelisted[_contributor] = true;\r\n        emit LogAddedToWhitelist(_contributor);\r\n    }\r\n\r\n    function updateTokenRate(uint256 _tokeninOneEther ) external onlyOwner\r\n    {\r\n        require (_tokeninOneEther > 0);\r\n        tokeninOneEther = _tokeninOneEther;\r\n        emit LogTokenRateUpdated(_tokeninOneEther);\r\n    }\r\n\r\n    function closeSale() external onlyOwner\r\n    {\r\n        require (now > LOCK_PERIOD_START);\r\n        lynT.transfer(msg.sender, lynT.balanceOf(address(this)));\r\n        owner.transfer(address(this).balance);\r\n        crowdsaleClosed = true;\r\n        emit LogSaleClosed();\r\n    }\r\n\r\n    function withdrawMyTokens () external\r\n    {\r\n        require (crowdsaleClosed);\r\n        require (tokensOwed[msg.sender] > 0);\r\n        require (now > LOCK_PERIOD_9_MONTH);\r\n\r\n        uint256 penalty = 0;\r\n        if(now > LOCK_PERIOD_END)\r\n            penalty = 0;\r\n        else if(now > LOCK_PERIOD_11_MONTH)\r\n            penalty = 20;\r\n        else if(now > LOCK_PERIOD_10_MONTH)\r\n            penalty = 30;\r\n        else\r\n            penalty = 40;\r\n\r\n        uint256 tokenBought = tokensOwed[msg.sender];\r\n        uint256 toSend = tokenBought.sub(tokenBought.mul(penalty).div(100));\r\n        tokensOwed[msg.sender] = 0;\r\n        lynT.transfer(msg.sender, toSend);\r\n    }\r\n\r\n    function withdrawPenaltyTokens() external onlyOwner\r\n    {\r\n        require (now > LOCK_PERIOD_END);\r\n        lynT.transfer(msg.sender, lynT.balanceOf(address(this)));\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lynT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensToSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokeninOneEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPenaltyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"addContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokeninOneEther\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokeninOneEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"LogAddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"LogTokenRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogSaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LynchpinPrivateICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000018","Library":"","SwarmSource":"bzzr://f0f9a524c689313d83b86a24076c83314139afd33d49a4795b30c2bf7ef11211"}]}