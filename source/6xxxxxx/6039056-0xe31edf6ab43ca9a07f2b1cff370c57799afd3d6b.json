{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts/minter-service/IICOInfo.sol\r\n\r\ncontract IICOInfo {\r\n  function estimate(uint256 _wei) public constant returns (uint tokens);\r\n  function purchasedTokenBalanceOf(address addr) public constant returns (uint256 tokens);\r\n  function isSaleActive() public constant returns (bool active);\r\n}\r\n\r\n// File: contracts/minter-service/IMintableToken.sol\r\n\r\ncontract IMintableToken {\r\n    function mint(address _to, uint256 _amount);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/minter-service/ReenterableMinter.sol\r\n\r\ncontract ReenterableMinter is Ownable {\r\n    event MintSuccess(bytes32 indexed mint_id);\r\n\r\n    function ReenterableMinter(IMintableToken token){\r\n        m_token = token;\r\n    }\r\n\r\n    function mint(bytes32 mint_id, address to, uint256 amount) onlyOwner {\r\n        // Not reverting because there will be no way to distinguish this revert from other transaction failures.\r\n        if (!m_processed_mint_id[mint_id]) {\r\n            m_token.mint(to, amount);\r\n            m_processed_mint_id[mint_id] = true;\r\n        }\r\n        MintSuccess(mint_id);\r\n    }\r\n\r\n    IMintableToken public m_token;\r\n    mapping(bytes32 => bool) public m_processed_mint_id;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"m_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mint_id\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"m_processed_mint_id\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"mint_id\",\"type\":\"bytes32\"}],\"name\":\"MintSuccess\",\"type\":\"event\"}]","ContractName":"ReenterableMinter","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cd27a22b80f79999822963d207d973d6087578c7","Library":"","SwarmSource":"bzzr://30ab7e353a9703236fbe9addfcc3cc518cf765f2d57b56a73fe3dad6665edbd6"}]}