{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev 本可拥有合同业主地址，并提供基本的权限控制功能，简化了用户的权限执行”。\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n}\r\n\r\ncontract Generatable{\r\n    function generate(\r\n        address token,\r\n        address contractOwner,\r\n        uint256 cycle\r\n    ) public returns(address);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function decimals() public view returns (uint8);  //代币单位\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20 _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n\r\ncontract ContractFactory is Destructible,PullPayment{\r\n    using SafeERC20 for ERC20;\r\n    uint256 public diviRate;\r\n    uint256 public developerTemplateAmountLimit;\r\n    address public platformWithdrawAccount;\r\n\r\n\r\n\tstruct userContract{\r\n\t\tuint256 templateId;\r\n\t\tuint256 orderid;\r\n\t\taddress contractAddress;\r\n\t\tuint256 incomeDistribution;\r\n\t\tuint256 creattime;\r\n\t\tuint256 endtime;\r\n\t}\r\n\r\n\tstruct contractTemplate{\r\n\t\tstring templateName;\r\n\t\taddress contractGeneratorAddress;\r\n\t\tstring abiStr;\r\n\t\tuint256 startTime;\r\n\t\tuint256 endTime;\r\n\t\tuint256 startUp;\r\n\t\tuint256 profit;\r\n\t\tuint256 quota;\r\n\t\tuint256 cycle;\r\n\t\taddress token;\r\n\t}\r\n\r\n    mapping(address => userContract[]) public userContractsMap;\r\n    mapping(uint256 => contractTemplate) public contractTemplateAddresses;\r\n    mapping(uint256 => uint256) public skipMap;\r\n\r\n    event ContractCreated(address indexed creator,uint256 templateId,uint256 orderid,address contractAddress);\r\n    event ContractTemplatePublished(uint256 indexed templateId,address  creator,string templateName,address contractGeneratorAddress);\r\n    event Log(address data);\r\n    event yeLog(uint256 balanceof);\r\n    function ContractFactory(){\r\n        //0~10\r\n        diviRate=5;\r\n        platformWithdrawAccount=0xc645eadc9188cb0bad4e603f78ff171dabc1b18b;\r\n        developerTemplateAmountLimit=500000000000000000;\r\n    }\r\n\r\n    function generateContract(uint256 templateId,uint256 orderid) public returns(address){\r\n\r\n        //根据支付金额找到相应模板\r\n        contractTemplate storage ct = contractTemplateAddresses[templateId];\r\n        if(ct.contractGeneratorAddress!=0x0){\r\n            address contractTemplateAddress = ct.contractGeneratorAddress;\r\n            string templateName = ct.templateName;\r\n            require(block.timestamp >= ct.startTime);\r\n            require(block.timestamp <= ct.endTime);\r\n            //找到相应生成器并生产目标合约\r\n            Generatable generator = Generatable(contractTemplateAddress);\r\n            address target = generator.generate(ct.token,msg.sender,ct.cycle);\r\n            //记录用户合约\r\n            userContract[] storage userContracts = userContractsMap[msg.sender];\r\n            userContracts.push(userContract(templateId,orderid,target,1,now,now.add(uint256(1 days))));\r\n            ContractCreated(msg.sender,templateId,orderid,target);\r\n            return target;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function returnOfIncome(address user,uint256 _index) public{\r\n        require(msg.sender == user);\r\n        userContract[] storage ucs = userContractsMap[user];\r\n        if(ucs[_index].contractAddress!=0x0 && ucs[_index].incomeDistribution == 1){\r\n            contractTemplate storage ct = contractTemplateAddresses[ucs[_index].templateId];\r\n            if(ct.contractGeneratorAddress!=0x0){\r\n                //如果大于激活时间1天将不能分红\r\n                if(now > ucs[_index].creattime.add(uint256(1 days))){\r\n                     revert();\r\n                }\r\n\r\n                ERC20 token = ERC20(ct.token);\r\n                uint256 balanceof = token.balanceOf(ucs[_index].contractAddress);\r\n\r\n               uint8 decimals = token.decimals();\r\n                //需要大于起投价\r\n                if(balanceof < ct.startUp) revert();\r\n                //大于限额的按限额上线计算收益\r\n                uint256 investment = 0;\r\n                if(balanceof > ct.quota.mul(10**decimals)){\r\n                    investment = ct.quota.mul(10**decimals);\r\n                } else {\r\n                    investment = balanceof;\r\n                }\r\n\r\n                //需要转给子合约的收益\r\n                uint256 income = ct.profit.mul(ct.cycle).mul(investment).div(36000);\r\n\r\n\r\n                if(!token.transfer(ucs[_index].contractAddress,income)){\r\n        \t\t\trevert();\r\n        \t\t} else {\r\n        \t\t    ucs[_index].incomeDistribution = 2;\r\n        \t\t}\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n    *生成器实现Generatable接口,并且合约实现了ownerable接口，都可以通过此函数上传（TODO：如何校验？）\r\n    * @param templateId   模版Id\r\n    * @param _templateName   模版名称\r\n    * @param _contractGeneratorAddress   模版名称模版名称莫\r\n    * @param _abiStr   abi接口\r\n    * @param _startTime  开始时间\r\n    * @param _endTime   结束时间\r\n    * @param _profit  收益\r\n    * @param _startUp 起投\r\n    * @param _quota   限额\r\n    * @param _cycle   周期\r\n    * @param _token   代币合约\r\n    */\r\n    function publishContractTemplate(\r\n        uint256 templateId,\r\n        string _templateName,\r\n        address _contractGeneratorAddress,\r\n        string _abiStr,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _profit,\r\n        uint256 _startUp,\r\n        uint256 _quota,\r\n        uint256 _cycle,\r\n        address _token\r\n    )\r\n        public\r\n    {\r\n         //非owner，不允许发布模板\r\n         if(msg.sender!=owner){\r\n            revert();\r\n         }\r\n\r\n         contractTemplate storage ct = contractTemplateAddresses[templateId];\r\n         if(ct.contractGeneratorAddress!=0x0){\r\n            revert();\r\n         }else{\r\n\r\n            ct.templateName = _templateName;\r\n            ct.contractGeneratorAddress = _contractGeneratorAddress;\r\n            ct.abiStr = _abiStr;\r\n            ct.startTime = _startTime;\r\n            ct.endTime = _endTime;\r\n            ct.startUp = _startUp;\r\n            ct.profit = _profit;\r\n            ct.quota = _quota;\r\n            ct.cycle = _cycle;\r\n            ct.token = _token;\r\n            ContractTemplatePublished(templateId,msg.sender,_templateName,_contractGeneratorAddress);\r\n         }\r\n    }\r\n\r\n    function queryPublishedContractTemplate(\r\n        uint256 templateId\r\n    )\r\n        public\r\n        constant\r\n    returns(\r\n        string,\r\n        address,\r\n        string,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address\r\n    ) {\r\n        contractTemplate storage ct = contractTemplateAddresses[templateId];\r\n        if(ct.contractGeneratorAddress!=0x0){\r\n            return (\r\n                ct.templateName,\r\n                ct.contractGeneratorAddress,\r\n                ct.abiStr,\r\n                ct.startTime,\r\n                ct.endTime,\r\n                ct.profit,\r\n                ct.startUp,\r\n                ct.quota,\r\n                ct.cycle,\r\n                ct.token\r\n            );\r\n        }else{\r\n            return ('',0x0,'',0,0,0,0,0,0,0x0);\r\n        }\r\n    }\r\n\r\n\r\n    function queryUserContract(address user,uint256 _index) public constant returns(\r\n        uint256,\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ){\r\n        require(msg.sender == user);\r\n        userContract[] storage ucs = userContractsMap[user];\r\n        contractTemplate storage ct = contractTemplateAddresses[ucs[_index].templateId];\r\n        ERC20 tokens = ERC20(ct.token);\r\n        uint256 balanceofs = tokens.balanceOf(ucs[_index].contractAddress);\r\n        return (\r\n            ucs[_index].templateId,\r\n            ucs[_index].orderid,\r\n            ucs[_index].contractAddress,\r\n            ucs[_index].incomeDistribution,\r\n            ucs[_index].endtime,\r\n            balanceofs\r\n        );\r\n    }\r\n\r\n    function queryUserContractCount(address user) public constant returns (uint256){\r\n        require(msg.sender == user);\r\n        userContract[] storage ucs = userContractsMap[user];\r\n        return ucs.length;\r\n    }\r\n\r\n    function changeDiviRate(uint256 _diviRate) external onlyOwner(){\r\n        diviRate=_diviRate;\r\n    }\r\n\r\n    function changePlatformWithdrawAccount(address _platformWithdrawAccount) external onlyOwner(){\r\n        platformWithdrawAccount=_platformWithdrawAccount;\r\n    }\r\n\r\n    function changeDeveloperTemplateAmountLimit(uint256 _developerTemplateAmountLimit) external onlyOwner(){\r\n        developerTemplateAmountLimit=_developerTemplateAmountLimit;\r\n    }\r\n    function addSkipPrice(uint256 price) external onlyOwner(){\r\n        skipMap[price]=1;\r\n    }\r\n\r\n    function removeSkipPrice(uint256 price) external onlyOwner(){\r\n        skipMap[price]=0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractTemplateAddresses\",\"outputs\":[{\"name\":\"templateName\",\"type\":\"string\"},{\"name\":\"contractGeneratorAddress\",\"type\":\"address\"},{\"name\":\"abiStr\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"startUp\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"quota\",\"type\":\"uint256\"},{\"name\":\"cycle\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"queryUserContractCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformWithdrawAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"queryUserContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skipMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diviRate\",\"type\":\"uint256\"}],\"name\":\"changeDiviRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"diviRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"queryPublishedContractTemplate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"},{\"name\":\"orderid\",\"type\":\"uint256\"}],\"name\":\"generateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"},{\"name\":\"_templateName\",\"type\":\"string\"},{\"name\":\"_contractGeneratorAddress\",\"type\":\"address\"},{\"name\":\"_abiStr\",\"type\":\"string\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_profit\",\"type\":\"uint256\"},{\"name\":\"_startUp\",\"type\":\"uint256\"},{\"name\":\"_quota\",\"type\":\"uint256\"},{\"name\":\"_cycle\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"publishContractTemplate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_platformWithdrawAccount\",\"type\":\"address\"}],\"name\":\"changePlatformWithdrawAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userContractsMap\",\"outputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"},{\"name\":\"orderid\",\"type\":\"uint256\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"incomeDistribution\",\"type\":\"uint256\"},{\"name\":\"creattime\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"removeSkipPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"returnOfIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addSkipPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developerTemplateAmountLimit\",\"type\":\"uint256\"}],\"name\":\"changeDeveloperTemplateAmountLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerTemplateAmountLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"templateName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractGeneratorAddress\",\"type\":\"address\"}],\"name\":\"ContractTemplatePublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"data\",\"type\":\"address\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceof\",\"type\":\"uint256\"}],\"name\":\"yeLog\",\"type\":\"event\"}]","ContractName":"ContractFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0bbfc7f0d5b3c98651f0f50d23ea08d066122748e47191f77e0b861eac1519be"}]}