{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ------ TTT ----- //\r\ncontract RBAC {\r\n    event RoleAdded(address indexed operator, string role);\r\n    event RoleRemoved(address indexed operator, string role);\r\n    function checkRole(address _operator, string _role) view public;\r\n    function hasRole(address _operator, string _role) view public returns (bool);\r\n    function addRole(address _operator, string _role) internal;\r\n    function removeRole(address _operator, string _role) internal;\r\n}\r\ncontract Ownable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\ncontract Superuser is Ownable, RBAC {\r\n    function addRoleForUser(address _user, string _role) public;\r\n    function delRoleForUser(address _user, string _role) public;\r\n}\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) external;\r\n}\r\ncontract OwnerSellContract {\r\n    function createOrder(address _owner, uint _amount, uint _price, address _buyer, uint _date) external returns (bool);\r\n    function cancelOrder(address _buyer) external returns (bool);\r\n}\r\ncontract RealtyContract {\r\n    function freezeTokens(address _owner, uint _amount) external returns (bool);\r\n    function acceptRequest(address _owner) external returns (bool);\r\n    function cancelRequest(address _owner) external returns (bool);\r\n}\r\ncontract TTTToken is Superuser {\r\n    struct  Checkpoint {}\r\n    event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function doTransfer(address _from, address _to, uint _amount) internal;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _amount) public returns (bool);\r\n    function increaseApproval(address _spender, uint _addedAmount) external returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedAmount) external returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) external returns (bool);\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint);\r\n    function enableTransfers(bool _transfersEnabled) public returns (bool);\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint);\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal;\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n    function _doDestroyTokens(address _owner, uint _amount) internal;\r\n    function closeProject(uint _price) public;\r\n    function getRealty(address _contract, uint _val) public;\r\n    function acceptRequest(address _contract, address _owner) public;\r\n    function cancelRequest(address _contract, address _owner) public;\r\n    function changeTokens() public returns (bool);\r\n    function createOrder(address _contract, uint _amount, uint _price, address _buyer, uint _date) public returns (bool);\r\n    function cancelOrder(address _contract, address _buyer) public returns (bool);\r\n    function min(uint a, uint b) pure internal returns (uint);\r\n    function () payable public;\r\n    function claimTokens(address _token) external;\r\n}\r\n// ------ TTT ----- //\r\n\r\n// ------ USDT ----- //\r\ncontract ERC20Basic {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract BasicToken is Ownable, ERC20Basic {\r\n    function transfer(address _to, uint _value) public;\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n}\r\ncontract StandardToken is BasicToken, ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) public;\r\n    function approve(address _spender, uint _value) public;\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n}\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  function pause() public;\r\n  function unpause() public;\r\n}\r\ncontract BlackList is Ownable, BasicToken {\r\n    function getBlackListStatus(address _maker) external constant returns (bool);\r\n    function getOwner() external constant returns (address);\r\n    function addBlackList (address _evilUser) public;\r\n    function removeBlackList (address _clearedUser) public;\r\n    function destroyBlackFunds (address _blackListedUser) public;\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n}\r\ncontract UpgradedStandardToken is StandardToken{\r\n    function transferByLegacy(address from, address to, uint value) public;\r\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\r\n    function approveByLegacy(address from, address spender, uint value) public;\r\n}\r\ncontract TetherToken is Pausable, StandardToken, BlackList {\r\n    function transfer(address _to, uint _value) public;\r\n    function transferFrom(address _from, address _to, uint _value) public;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function approve(address _spender, uint _value) public;\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    function deprecate(address _upgradedAddress) public;\r\n    function totalSupply() public constant returns (uint);\r\n    function issue(uint amount) public;\r\n    function redeem(uint amount) public;\r\n    function setParams(uint newBasisPoints, uint newMaxFee) public;\r\n    event Issue(uint amount);\r\n    event Redeem(uint amount);\r\n    event Deprecate(address newAddress);\r\n    event Params(uint feeBasisPoints, uint maxFee);\r\n}\r\n// ------ USDT ----- //\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract TTTExchange {\r\n    using SafeMath for uint;\r\n\r\n    TTTToken public tokenTTT = TTTToken(0xF92d38De8e30151835b9Ebe327E52878b4115CBF);\r\n    TetherToken public tokenUSD = TetherToken(0xdac17f958d2ee523a2206206994597c13d831ec7);\r\n\r\n    address owner;\r\n\r\n    uint priceUSD;\r\n    uint priceETH;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    constructor(uint _priceETH, uint _priceUSD) public {\r\n        owner = msg.sender;\r\n        priceETH = _priceETH;\r\n        priceUSD = _priceUSD;\r\n    }\r\n\r\n    function getInfo(address _address) external view returns(uint PriceETH, uint PriceUSD, uint BalanceTTT, uint Approved, uint toETH, uint toUSD) {\r\n        PriceETH = priceETH;\r\n        PriceUSD = priceUSD;\r\n        BalanceTTT = tokenTTT.balanceOf(_address);\r\n        Approved = tokenTTT.allowance(_address, address(this));\r\n        toETH = Approved * priceETH;\r\n        toUSD = Approved * priceUSD;\r\n    }\r\n\r\n    function amIReady(address _address) external view returns(bool) {\r\n        uint _a = tokenTTT.allowance(_address, address(this));\r\n        if (_a > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        msg.sender.transfer(msg.value);\r\n        if (uint(bytes(msg.data)[0]) == 1) {\r\n            toETH();\r\n        }\r\n        if (uint(bytes(msg.data)[0]) == 2) {\r\n            toUSD();\r\n        }\r\n    }\r\n\r\n    function setPriceETH(uint _newPriceETH) external onlyOwner {\r\n        require(_newPriceETH != 0);\r\n        priceETH = _newPriceETH;\r\n    }\r\n\r\n    function setPriceUSD(uint _newPriceUSD) external onlyOwner {\r\n        require(_newPriceUSD != 0);\r\n        priceUSD = _newPriceUSD;\r\n    }\r\n\r\n    function toETH() public {\r\n        uint _value = tokenTTT.allowance(msg.sender, address(this));\r\n        if (_value > 0) {\r\n            tokenTTT.transferFrom(msg.sender, owner, _value);\r\n            msg.sender.transfer(_value.mul(priceETH));\r\n        }\r\n    }\r\n\r\n    function toUSD() public {\r\n        uint _value = tokenTTT.allowance(msg.sender, address(this));\r\n        if (_value > 0) {\r\n            tokenTTT.transferFrom(msg.sender, owner, _value);\r\n            tokenUSD.transfer(msg.sender, _value.mul(priceUSD));\r\n        }\r\n    }\r\n\r\n    function getBalance(address _recipient) external onlyOwner {\r\n        uint _balance = tokenTTT.balanceOf(address(this));\r\n        tokenTTT.transfer(_recipient, _balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenTTT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceUSD\",\"type\":\"uint256\"}],\"name\":\"setPriceUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"amIReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"PriceETH\",\"type\":\"uint256\"},{\"name\":\"PriceUSD\",\"type\":\"uint256\"},{\"name\":\"BalanceTTT\",\"type\":\"uint256\"},{\"name\":\"Approved\",\"type\":\"uint256\"},{\"name\":\"toETH\",\"type\":\"uint256\"},{\"name\":\"toUSD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_priceETH\",\"type\":\"uint256\"},{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TTTExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000060a24181e4000000000000000000000000000000000000000000000000000000000000005b4f0","Library":"","SwarmSource":"bzzr://b5165e418f5f6446ee99acd882c3d9b02bc2f4119e2177e7e10f579919fda6c0"}]}