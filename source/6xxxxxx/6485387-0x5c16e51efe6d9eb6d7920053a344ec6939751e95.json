{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/FlyCoin.sol\r\n\r\n/**\r\n * FLYCoin ERC20 token\r\n * Based on the OpenZeppelin Standard Token\r\n */\r\n\r\ncontract MigrationSource {\r\n  function vacate(address _addr) public returns (uint256 o_balance);\r\n}\r\n\r\ncontract FLYCoin is MigrationSource, ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"FLYCoin\";\r\n  string public constant symbol = \"FLY\";\r\n  \r\n  // picked to have 15 digits which will fit in a double full precision\r\n  uint8 public constant decimals = 5;\r\n  \r\n  uint internal totalSupply_ = 3000000000000000;\r\n\r\n  address public owner;\r\n\r\n  mapping(address => User) public users;\r\n  \r\n  MigrationSource public migrateFrom;\r\n  address public migrateTo;\r\n\r\n  struct User {\r\n    uint256 balance;\r\n      \r\n    mapping(address => uint256) authorized;\r\n  }\r\n\r\n  modifier only_owner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier value_less_than_balance(address _user, uint256 _value){\r\n    User storage user = users[_user];\r\n    require(_value <= user.balance);\r\n    _;\r\n  }\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event OptIn(address indexed owner, uint256 value);\r\n  event Vacate(address indexed owner, uint256 value);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    User storage user = users[owner];\r\n    user.balance = totalSupply_;\r\n    emit Transfer(0, owner, totalSupply_);\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256){\r\n    return totalSupply_;\r\n  }\r\n\r\n  function balanceOf(address _addr) public view returns (uint256 balance) {\r\n    return users[_addr].balance;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\r\n    User storage user = users[msg.sender];\r\n    user.balance = user.balance.sub(_value);\r\n    users[_to].balance = users[_to].balance.add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\r\n    User storage user = users[_from];\r\n    user.balance = user.balance.sub(_value);\r\n    users[_to].balance = users[_to].balance.add(_value);\r\n    user.authorized[msg.sender] = user.authorized[msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success){\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (users[msg.sender].authorized[_spender] == 0));\r\n    users[msg.sender].authorized[_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _user, address _spender) public view returns (uint256){\r\n    return users[_user].authorized[_spender];\r\n  }\r\n\r\n  function setOwner(address _addr) public only_owner {\r\n    owner = _addr;\r\n  }\r\n\r\n  // Sets the contract address that this contract will migrate\r\n  // from when the optIn() interface is used.\r\n  //\r\n  function setMigrateFrom(address _addr) public only_owner {\r\n    require(migrateFrom == MigrationSource(0));\r\n    migrateFrom = MigrationSource(_addr);\r\n  }\r\n\r\n  // Sets the contract address that is allowed to call vacate on this\r\n  // contract.\r\n  //\r\n  function setMigrateTo(address _addr) public only_owner {\r\n    migrateTo = _addr;\r\n  }\r\n\r\n  // Called by a token holding address, this method migrates the\r\n  // tokens from an older version of the contract to this version.\r\n  //\r\n  // NOTE - allowances (approve) are *not* transferred.  If you gave\r\n  // another address an allowance in the old contract you need to\r\n  // re-approve it in the new contract.\r\n  //\r\n  function optIn() public returns (bool success) {\r\n    require(migrateFrom != MigrationSource(0));\r\n    User storage user = users[msg.sender];\r\n    \r\n    uint256 balance = migrateFrom.vacate(msg.sender);\r\n\r\n    emit OptIn(msg.sender, balance);\r\n    \r\n    user.balance = user.balance.add(balance);\r\n    totalSupply_ = totalSupply_.add(balance);\r\n\r\n    return true;\r\n  }\r\n\r\n  // The vacate method is called by a newer version of the FLYCoin\r\n  // contract to extract the token state for an address and migrate it\r\n  // to the new contract.\r\n  //\r\n  function vacate(address _addr) public returns (uint256 o_balance){\r\n    require(msg.sender == migrateTo);\r\n    User storage user = users[_addr];\r\n\r\n    require(user.balance > 0);\r\n\r\n    o_balance = user.balance;\r\n    totalSupply_ = totalSupply_.sub(user.balance);\r\n    user.balance = 0;\r\n\r\n    emit Vacate(_addr, o_balance);\r\n  }\r\n\r\n  // Don't accept ETH. Starting from Solidity 0.4.0, contracts without a fallback function automatically revert payments\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMigrateFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMigrateTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"vacate\",\"outputs\":[{\"name\":\"o_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OptIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vacate\",\"type\":\"event\"}]","ContractName":"FLYCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7310fd29006b743eb02e2df5a85493b0b9387145f3d15bcb01b64eda0844aca8"}]}