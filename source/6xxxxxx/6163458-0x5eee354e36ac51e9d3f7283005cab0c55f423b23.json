{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ArbitrageETHStaking.sol\r\n\r\n/**\r\n* @title ArbitrageETHStaking\r\n* @dev The ArbitrageETHStaking contract staking Ether(ETH) tokens.\r\n*      Here is stored all function and data of user stakes in contract.\r\n*      Staking is configured for 2%.\r\n*/\r\ncontract ArbitrageETHStaking is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /*==============================\r\n     =            EVENTS            =\r\n     ==============================*/\r\n\r\n    event onPurchase(\r\n       address indexed customerAddress,\r\n       uint256 etherIn,\r\n       uint256 contractBal,\r\n       uint256 poolFee,\r\n       uint timestamp\r\n    );\r\n\r\n    event onWithdraw(\r\n         address indexed customerAddress,\r\n         uint256 etherOut,\r\n         uint256 contractBal,\r\n         uint timestamp\r\n    );\r\n\r\n\r\n    /*** STORAGE ***/\r\n\r\n    mapping(address => uint256) internal personalFactorLedger_; // personal factor ledger\r\n    mapping(address => uint256) internal balanceLedger_; // users balance ledger\r\n\r\n    // Configurations\r\n    uint256 minBuyIn = 0.001 ether; // can't buy less then 0.0001 ETH\r\n    uint256 stakingPrecent = 2;\r\n    uint256 internal globalFactor = 10e21; // global factor\r\n    uint256 constant internal constantFactor = 10e21 * 10e21; // constant factor\r\n\r\n    /// @dev Forward all Ether in buy() function\r\n    function() external payable {\r\n        buy();\r\n    }\r\n\r\n    // @dev Buy in staking pool, transfer ethereum in the contract, pay 2% fee\r\n    function buy()\r\n        public\r\n        payable\r\n    {\r\n        address _customerAddress = msg.sender;\r\n\r\n        require(msg.value >= minBuyIn, \"should be more the 0.0001 ether sent\");\r\n\r\n        uint256 _etherBeforeBuyIn = getBalance().sub(msg.value);\r\n\r\n        uint256 poolFee;\r\n        // Check is not a first buy in\r\n        if (_etherBeforeBuyIn != 0) {\r\n\r\n            // Add 2% fee of the buy to the staking pool\r\n            poolFee = msg.value.mul(stakingPrecent).div(100);\r\n\r\n            // Increase amount of eth everyone else owns\r\n            uint256 globalIncrease = globalFactor.mul(poolFee) / _etherBeforeBuyIn;\r\n            globalFactor = globalFactor.add(globalIncrease);\r\n        }\r\n\r\n\r\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(poolFee);\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        emit onPurchase(_customerAddress, msg.value, getBalance(), poolFee, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw selected amount of ethereum from the contract back to user,\r\n     *      update the balance.\r\n     * @param _sellEth - Amount of ethereum to withdraw from contract\r\n     */\r\n    function withdraw(uint256 _sellEth)\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // User must have enough eth and cannot sell 0\r\n        require(_sellEth > 0, \"user cant spam transactions with 0 value\");\r\n        require(_sellEth <= ethBalanceOf(_customerAddress), \"user cant withdraw more then he holds \");\r\n\r\n\r\n        // Transfer balance and update user ledgers\r\n        _customerAddress.transfer(_sellEth);\r\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(_sellEth);\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\r\n    }\r\n\r\n    // @dev Withdraw all the ethereum user holds in the contract, set balance to 0\r\n    function withdrawAll()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        // Set the sell amount to the user's full balance, don't sell if empty\r\n        uint256 _sellEth = ethBalanceOf(_customerAddress);\r\n        require(_sellEth > 0, \"user cant call withdraw, when holds nothing\");\r\n        // Transfer balance and update user ledgers\r\n        _customerAddress.transfer(_sellEth);\r\n        balanceLedger_[_customerAddress] = 0;\r\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\r\n\r\n        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\r\n    }\r\n\r\n    /**\r\n    * UI Logic - View Functions\r\n    */\r\n\r\n    // @dev Returns contract ETH balance\r\n    function getBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // @dev Returns user ETH tokens balance in contract\r\n    function ethBalanceOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Balance ledger * personal factor * globalFactor / constantFactor\r\n        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellEth\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractBal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"poolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractBal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArbitrageETHStaking","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed59da05b704105bd3ef89142c9bfd81c5dfcf1087263cfa7cc6bd3f7c03eddf"}]}