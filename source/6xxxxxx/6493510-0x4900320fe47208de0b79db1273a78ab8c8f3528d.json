{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Owned {\r\n  address public owner;\r\n  event TransferOwnership(address oldaddr, address newaddr);\r\n  modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n    _;}\r\n  function Owned() public {\r\n    owner = msg.sender;\r\n  }\r\n  function transferOwnership(address _new) onlyOwner public {\r\n    address oldaddr = owner;\r\n    owner = _new;\r\n    TransferOwnership(oldaddr, owner);\r\n  }\r\n}\r\n\r\ncontract MontexToken is Owned{\r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n  uint256 public totalSupply;\r\n  mapping (address => uint256) public balanceOf;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function MontexToken() public{\r\n    name = \"Montex Token\";\r\n    symbol = \"MON\";\r\n    decimals = 8;\r\n    totalSupply = 2e9 * 10**uint256(decimals);\r\n    balanceOf[msg.sender] = totalSupply;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public{\r\n    if (balanceOf[msg.sender] < _value) revert();\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) revert();\r\n      balanceOf[msg.sender] -= _value;\r\n      balanceOf[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n  }\r\n}\r\n\r\ncontract Crowdsale is Owned {\r\n  using SafeMath for uint256;\r\n  uint256 public fundingGoal;\r\n  uint256 public price;\r\n  uint256 public transferableToken;\r\n  uint256 public soldToken;\r\n  uint256 public deadline;\r\n  uint256 public token_price;\r\n  MontexToken public tokenReward;\r\n  bool public fundingGoalReached = false;\r\n  bool public isOpened;\r\n  mapping (address => Property) public fundersProperty;\r\n\r\n  struct Property {\r\n    uint256 paymentEther;\r\n    uint256 reservedToken;\r\n  }\r\n\r\n  event CrowdsaleStart(uint fundingGoal, uint deadline, uint transferableToken, address beneficiary);\r\n  event ReservedToken(address backer, uint amount, uint token, uint soldToken);\r\n  event WithdrawalToken(address addr, uint amount, bool result);\r\n  event WithdrawalEther(address addr, uint amount, bool result);\r\n  event FinishCrowdSale(address beneficiary, uint fundingGoal, uint amountRaised, bool reached, uint raisedToken);\r\n\r\n  modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n  function Crowdsale (\r\n    uint _fundingGoalInEthers,\r\n    uint _transferableToken,\r\n    uint _amountOfTokenPerEther,\r\n    MontexToken _addressOfTokenUsedAsReward\r\n  ) public {\r\n    fundingGoal = _fundingGoalInEthers * 1 ether;\r\n    price = 1 ether / _amountOfTokenPerEther;\r\n    tokenReward = MontexToken(_addressOfTokenUsedAsReward);\r\n    transferableToken = _transferableToken * 10 ** uint256(8);\r\n  }\r\n\r\n  function () payable external{\r\n    if (!isOpened || now >= deadline) revert();\r\n\r\n    uint amount = msg.value;\r\n\r\n    uint amont_conv = amount * 1000;\r\n    uint token = (amont_conv / price * token_price / 1000) * 10 ** uint256(8);\r\n\r\n    if (token == 0 || soldToken + token > transferableToken) revert();\r\n    fundersProperty[msg.sender].paymentEther += amount / 10 ** uint256(8);\r\n    fundersProperty[msg.sender].reservedToken += token;\r\n    soldToken += token;\r\n\r\n    tokenReward.transfer(msg.sender, token);\r\n\r\n    ReservedToken(msg.sender, amount, token,soldToken);\r\n  }\r\n\r\n  function start(uint startTime,uint _deadline,uint _token_price) onlyOwner public{\r\n    deadline = _deadline;\r\n    token_price = _token_price;\r\n    if (fundingGoal == 0 || transferableToken == 0 ||\r\n        tokenReward == address(0) ||  startTime >= now)\r\n    {\r\n      revert();\r\n    }\r\n    if (tokenReward.balanceOf(this) >= transferableToken) {\r\n      if(startTime <= now && now <= deadline){\r\n        isOpened = true;\r\n        CrowdsaleStart(fundingGoal, deadline, transferableToken, owner);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getBalance(address _addres) public\r\n  constant returns(uint nowpaymentEther,uint nowbuyToken)\r\n  {\r\n    nowpaymentEther = fundersProperty[_addres].paymentEther * (1 ether) / 10 ** uint256(8);\r\n    nowbuyToken = fundersProperty[_addres].reservedToken;\r\n\r\n  }  \r\n  function valNowRate(uint _amount) public\r\n    view returns(uint get_rate,uint get_token)\r\n    {\r\n    get_rate = token_price;\r\n    get_token = _amount * get_rate;\r\n  }\r\n\r\n\r\n  function getRemainingTimeEthToken() public\r\n    constant returns(\r\n        uint now_time,\r\n        uint now_deadline,\r\n        uint remain_days,\r\n        uint remain_hours,\r\n        uint remain_minutes,\r\n        uint remainEth,\r\n        uint remainToken,\r\n        uint remain_seconds,\r\n        uint getEth,\r\n        uint tokenReward_balance,\r\n        uint transferable_token)\r\n  {\r\n    if(now < deadline) {\r\n      remain_days = (deadline - now) / (1 days);\r\n      remain_hours = (deadline - now) / (1 hours);\r\n      remain_minutes = (deadline - now) / (1 minutes);\r\n      remain_seconds = (deadline - now) / (1 seconds);\r\n      now_time = now;\r\n      now_deadline = deadline;\r\n      \r\n    }\r\n    remainEth = (fundingGoal - this.balance) / (1 ether);\r\n    remainToken = transferableToken - soldToken;\r\n    getEth = this.balance / (1 ether);\r\n    tokenReward_balance = tokenReward.balanceOf(this);\r\n    transferable_token = transferableToken;\r\n  }\r\n\r\n  function finishCrowdSale() onlyOwner public {\r\n    if (this.balance >= fundingGoal) {\r\n      fundingGoalReached = true;\r\n    }\r\n    if(isOpened==true){\r\n      isOpened = false;\r\n\r\n      uint val = transferableToken - soldToken;\r\n      if (val > 0) {\r\n        tokenReward.transfer(msg.sender, transferableToken - soldToken);\r\n        WithdrawalToken(msg.sender, val, true);\r\n      }\r\n    }\r\n      FinishCrowdSale(owner, fundingGoal, this.balance, fundingGoalReached, soldToken);\r\n  }\r\n\r\n  function withdrawalOwner() onlyOwner public{\r\n      uint amount = this.balance;\r\n      if (amount > 0) {\r\n        bool ok = msg.sender.call.value(amount)();\r\n        WithdrawalEther(msg.sender, amount, ok);\r\n      }    \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newaddr\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"MontexToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://70dcf88814de23cb71fb47d38f4a024b0904727086b8fe86f1546be468eb6d6f"}]}