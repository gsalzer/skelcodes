{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract SmartMinFin {\r\n    using SafeMath for uint;\r\n    mapping(address => uint) public deposited;\r\n    mapping(address => uint) public time;\r\n    mapping(address => uint) public timeFirstDeposit;\r\n    mapping(address => uint) public withdraw;\r\n    mapping(address => uint) public reservedBalance;\r\n    uint public stepTime = 24 hours;\r\n    uint public countOfInvestors = 0;\r\n    address admin1 = 0x49D2Fc41d52EE4bE85bC0A364A4BCF828B186FdC; //10%\r\n    address admin2 = 0x0798C4A872571F924Beea03acD48c6fbd655Eeee; //1%\r\n    address admin3 = 0xC0bFE578866CE6eD326caaBf19966158A601F4d0; //3%\r\n    address admin4 = 0xdc4d7a065c97d126d49D6107E29cD70EA5e31bf6; //1%\r\n    uint firstWithdrawal = stepTime * 7;\r\n    uint public maxWithdrawal = 3 ether;\r\n    uint public minDeposit = 1 ether / 10;\r\n    uint public maxDeposit = 30 ether;\r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n\r\n    modifier userExist() {\r\n        require(deposited[msg.sender] > 0, \"Address not found\");\r\n        _;\r\n    }\r\n\r\n    modifier checkTime() {\r\n        require(now >= timeFirstDeposit[msg.sender].add(firstWithdrawal), \"Too fast for first withdrawal\");\r\n        require(now >= time[msg.sender].add(stepTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    function collectPercent() userExist checkTime internal {\r\n        uint different = now.sub(time[msg.sender]).div(stepTime);\r\n        uint percent = different > 10 ? 10 : different;\r\n        uint rate = deposited[msg.sender].mul(percent).div(1000);\r\n        uint withdrawalAmount = rate.mul(different);\r\n        uint availableToWithdrawal = deposited[msg.sender].mul(3) - withdraw[msg.sender];\r\n\r\n        if (reservedBalance[msg.sender] > 0) {\r\n            withdrawalAmount = withdrawalAmount.add(reservedBalance[msg.sender]);\r\n            reservedBalance[msg.sender] = 0;\r\n        }\r\n\r\n        if (withdrawalAmount > maxWithdrawal) {\r\n            reservedBalance[msg.sender] = withdrawalAmount - maxWithdrawal;\r\n            withdrawalAmount = maxWithdrawal;\r\n        }\r\n\r\n        if (withdrawalAmount >= availableToWithdrawal) {\r\n            withdrawalAmount = availableToWithdrawal;\r\n            msg.sender.send(withdrawalAmount);\r\n\r\n            deposited[msg.sender] = 0;\r\n            time[msg.sender] = 0;\r\n            timeFirstDeposit[msg.sender] = 0;\r\n            withdraw[msg.sender] = 0;\r\n            reservedBalance[msg.sender] = 0;\r\n            countOfInvestors--;\r\n        } else {\r\n            msg.sender.send(withdrawalAmount);\r\n\r\n            time[msg.sender] = different.mul(stepTime).add(time[msg.sender]);\r\n            withdraw[msg.sender] = withdraw[msg.sender].add(withdrawalAmount);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, withdrawalAmount);\r\n    }\r\n\r\n    function deposit() private {\r\n        if (msg.value > 0) {\r\n            require(msg.value >= minDeposit && msg.value <= maxDeposit, \"Wrong deposit value\");\r\n            require(deposited[msg.sender] == 0, \"This address is already in use.\");\r\n\r\n            countOfInvestors += 1;\r\n            deposited[msg.sender] = msg.value;\r\n            time[msg.sender] = now;\r\n            timeFirstDeposit[msg.sender] = now;\r\n            withdraw[msg.sender] = 0;\r\n            reservedBalance[msg.sender] = 0;\r\n\r\n            admin1.send(msg.value.mul(10).div(100));\r\n            admin2.send(msg.value.mul(1).div(100));\r\n            admin3.send(msg.value.mul(3).div(100));\r\n            admin4.send(msg.value.mul(1).div(100));\r\n\r\n            emit Invest(msg.sender, msg.value);\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeFirstDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"SmartMinFin","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ba3b20747f7fcba1728cbdaa9b7dd6e3a5588bacee7eaf29d721314b4304d51"}]}