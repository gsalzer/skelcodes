{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20RewardToken {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function decimals() public returns (uint8);\r\n}\r\n\r\ncontract Reward is Ownable {\r\n    \r\n    ERC20RewardToken public token;\r\n    address public presaleAddress;\r\n    uint64 public doubleRewardEndTime = 1538006400;\r\n    \r\n    constructor(address _tokenAddr, address _presaleAddr) public {\r\n        token = ERC20RewardToken(_tokenAddr);\r\n        presaleAddress = _presaleAddr;\r\n    }\r\n    \r\n    function get(address _receiver, uint256 _ethValue) external {\r\n\r\n        require(msg.sender == presaleAddress);\r\n        \r\n        uint256 tokensValue = calculateValue(_ethValue, token.decimals());\r\n\r\n        if(token.balanceOf(address(this)) > tokensValue) {\r\n            token.transfer(_receiver, tokensValue);\r\n        }\r\n    }\r\n    \r\n\tfunction setDoubleRewardEndTime(uint64 _time) onlyOwner external {\r\n\t\tdoubleRewardEndTime = _time;\r\n\t}\r\n\t\r\n    function calculateValue(uint256 _ethValue, uint8 decimals) pure public returns (uint256 tokensValue) {\r\n        \r\n        uint8 TokensPerEthereum = 10;\r\n        uint8 additionalBonusPercent = 10;\r\n        \r\n        if(_ethValue > 3 * 10**17)\r\n            additionalBonusPercent = 25;\r\n        if(_ethValue > 10**18)\r\n            additionalBonusPercent = 30;\r\n        if(_ethValue > 5 * 10**18)\r\n            additionalBonusPercent = 60;\r\n        \r\n        tokensValue = _ethValue * TokensPerEthereum;\r\n        \r\n        tokensValue+= (tokensValue * additionalBonusPercent ) / 100;\r\n        \r\n        if(decimals < 18)\r\n        {\r\n            uint256 difference = 18 - uint256(decimals);\r\n            tokensValue = tokensValue / 10**difference;\r\n        }\r\n        else if(decimals > 18)\r\n        {\r\n            difference = uint256(decimals) - 18;\r\n            tokensValue = tokensValue * 10**difference;\r\n        }\r\n\t\t\r\n    \ttokensValue = ((tokensValue/10**(uint256(decimals)-1)) + 1) * 10**(uint256(decimals)-1);\r\n    }\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    function withdraw() onlyOwner external {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"calculateValue\",\"outputs\":[{\"name\":\"tokensValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"setDoubleRewardEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"doubleRewardEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_presaleAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Reward","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e31515fe3023e715650eb2307379244c40cdbc95000000000000000000000000115f56742474f108ad3470ddd857c31a3f626c3c","Library":"","SwarmSource":"bzzr://ecaf88052e539dcc5a72bde7fee52990f7c3b455ed9b897ae75ef8e0fc646391"}]}