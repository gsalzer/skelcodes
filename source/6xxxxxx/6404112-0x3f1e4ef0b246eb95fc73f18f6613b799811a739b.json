{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// Intermediate deposit contract for DBET V1 and V2 tokens.\r\n// Token holders send tokens to this contract to in-turn receive DBET tokens on VET.\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract DBETToVETDeposit {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // DBET team address\r\n    address public dbetTeam;\r\n    // DBET V1 token contract\r\n    ERC20 public dbetV1;\r\n    // DBET V2 token contract\r\n    ERC20 public dbetV2;\r\n\r\n    // Emergency withdrawals incase something goes wrong\r\n    bool public emergencyWithdrawalsEnabled;\r\n    // If deposits are finalized, emergency withdrawals will cease to work\r\n    bool public finalizedDeposits;\r\n    // Number of deposits made\r\n    uint256 public depositIndex;\r\n\r\n    // Mapping of tokens deposited by addresses\r\n    // isV2 => (address => amount)\r\n    mapping(bool => mapping(address => uint256)) public depositedTokens;\r\n\r\n    event LogTokenDeposit(\r\n        bool isV2,\r\n        address _address,\r\n        address VETAddress,\r\n        uint256 amount,\r\n        uint256 index\r\n    );\r\n    event LogEmergencyWithdraw(\r\n        bool isV2,\r\n        address _address,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address v1, address v2) public {\r\n        dbetTeam = msg.sender;\r\n        dbetV1 = ERC20(v1);\r\n        dbetV2 = ERC20(v2);\r\n    }\r\n\r\n    modifier isDbetTeam() {\r\n        require(msg.sender == dbetTeam);\r\n        _;\r\n    }\r\n\r\n    modifier areWithdrawalsEnabled() {\r\n        require(emergencyWithdrawalsEnabled && !finalizedDeposits);\r\n        _;\r\n    }\r\n\r\n    // Returns the appropriate token contract\r\n    function getToken(bool isV2) internal returns (ERC20) {\r\n        if (isV2)\r\n            return dbetV2;\r\n        else\r\n            return dbetV1;\r\n    }\r\n\r\n    // Deposit V1/V2 tokens into the contract\r\n    function depositTokens(\r\n        bool isV2,\r\n        uint256 amount,\r\n        address VETAddress\r\n    )\r\n    public {\r\n        require(amount > 0);\r\n        require(VETAddress != 0);\r\n        require(getToken(isV2).balanceOf(msg.sender) >= amount);\r\n        require(getToken(isV2).allowance(msg.sender, address(this)) >= amount);\r\n\r\n        depositedTokens[isV2][msg.sender] = depositedTokens[isV2][msg.sender].add(amount);\r\n\r\n        require(getToken(isV2).transferFrom(msg.sender, address(this), amount));\r\n\r\n        emit LogTokenDeposit(\r\n            isV2,\r\n            msg.sender,\r\n            VETAddress,\r\n            amount,\r\n            depositIndex++\r\n        );\r\n    }\r\n\r\n    function enableEmergencyWithdrawals () public\r\n    isDbetTeam {\r\n        emergencyWithdrawalsEnabled = true;\r\n    }\r\n\r\n    function finalizeDeposits () public\r\n    isDbetTeam {\r\n        finalizedDeposits = true;\r\n    }\r\n\r\n    // Withdraw deposited tokens if emergency withdrawals have been enabled\r\n    function emergencyWithdraw(bool isV2) public\r\n    areWithdrawalsEnabled {\r\n        require(depositedTokens[isV2][msg.sender] > 0);\r\n\r\n        uint256 amount = depositedTokens[isV2][msg.sender];\r\n\r\n        depositedTokens[isV2][msg.sender] = 0;\r\n\r\n        require(getToken(isV2).transfer(msg.sender, amount));\r\n\r\n        emit LogEmergencyWithdraw(isV2, msg.sender, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dbetTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyWithdrawalsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableEmergencyWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isV2\",\"type\":\"bool\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbetV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isV2\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"VETAddress\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbetV1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"v1\",\"type\":\"address\"},{\"name\":\"v2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isV2\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"VETAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogTokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isV2\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"}]","ContractName":"DBETToVETDeposit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000540449e4d172cd9491c76320440cd74933d5691a0000000000000000000000009b68bfae21df5a510931a262cecf63f41338f264","Library":"","SwarmSource":"bzzr://1c84c5f5a8771a49eeea33143962254c45e4fbca3e10996c62e9e7873cd0b470"}]}