{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts\\lib\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\lib\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\FundsSplitter.sol\r\n\r\ncontract FundsSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    address public client;\r\n    address public starbase;\r\n    uint256 public starbasePercentage;\r\n\r\n    ERC20 public star;\r\n    ERC20 public tokenOnSale;\r\n\r\n    /**\r\n     * @dev initialization function\r\n     * @param _client Address where client's share goes\r\n     * @param _starbase Address where starbase's share goes\r\n     * @param _starbasePercentage Number that denotes client percentage share (between 1 and 100)\r\n     * @param _star Star ERC20 token address\r\n     * @param _tokenOnSale Token on sale's ERC20 token address\r\n     */\r\n    constructor(\r\n        address _client,\r\n        address _starbase,\r\n        uint256 _starbasePercentage,\r\n        ERC20 _star,\r\n        ERC20 _tokenOnSale\r\n    )\r\n        public\r\n    {\r\n        client = _client;\r\n        starbase = _starbase;\r\n        starbasePercentage = _starbasePercentage;\r\n        star = _star;\r\n        tokenOnSale = _tokenOnSale;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function that diverts funds sent to the contract to both client and starbase\r\n     */\r\n    function() public payable {\r\n        splitFunds(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev splits star that are allocated to contract\r\n     */\r\n    function splitStarFunds() public {\r\n        uint256 starFunds = star.balanceOf(address(this));\r\n        uint256 starbaseShare = starFunds.mul(starbasePercentage).div(100);\r\n\r\n        star.transfer(starbase, starbaseShare);\r\n        star.transfer(client, star.balanceOf(address(this))); // send remaining stars to client\r\n    }\r\n\r\n    /**\r\n     * @dev core fund splitting functionality as part of the funds are sent to client and part to starbase\r\n     * @param value Eth amount to be split\r\n     */\r\n    function splitFunds(uint256 value) internal {\r\n        uint256 starbaseShare = value.mul(starbasePercentage).div(100);\r\n\r\n        starbase.transfer(starbaseShare);\r\n        client.transfer(address(this).balance); // remaining ether to client\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw any remaining tokens on sale\r\n     */\r\n    function withdrawRemainingTokens() public {\r\n        tokenOnSale.transfer(client, tokenOnSale.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"star\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"splitStarFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbasePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_starbase\",\"type\":\"address\"},{\"name\":\"_starbasePercentage\",\"type\":\"uint256\"},{\"name\":\"_star\",\"type\":\"address\"},{\"name\":\"_tokenOnSale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"FundsSplitter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a9df89a3703a6079e26a559dd3925d7b57218ab2000000000000000000000000a9df89a3703a6079e26a559dd3925d7b57218ab2000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000f70a642bd387f94380ffb90451c2c81d4eb82cbc000000000000000000000000f70a642bd387f94380ffb90451c2c81d4eb82cbc","Library":"","SwarmSource":"bzzr://44fd8bc449f9dc6c01ae3bf1222a5a390511676461bad8926562a0db671da594"}]}