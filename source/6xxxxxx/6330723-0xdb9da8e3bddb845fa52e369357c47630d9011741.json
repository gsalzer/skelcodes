{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * @dev Based on: OpenZeppelin\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TridentDistribution\r\n * @dev Implementation of the TridentDistribution smart contract.\r\n */\r\ncontract TridentDistribution is Ownable {\r\n\r\n  // Stores the Trident smart contract\r\n  ERC20 public trident;\r\n\r\n  // Struct that represents a transfer order\r\n  struct Order {\r\n    uint256 amount;         // amount of tokens to transfer\r\n    address account;        // account to transfer amount to\r\n    string metadata;        // arbitrary metadata\r\n  }\r\n\r\n  // Array of all current transfer orders\r\n  Order[] orders;\r\n\r\n  // Accounts allowed to place orders\r\n  address[] orderDelegates;\r\n\r\n  // Accounts allowed to approve orders\r\n  address[] approvalDelegates;\r\n\r\n  // Amount of ETH sent with each order executed\r\n  uint public complementaryEthPerOrder;\r\n\r\n\r\n  // Event emitted when an account has been approved as an order delegate\r\n  event ApproveOrderDelegate(\r\n      address indexed orderDelegate\r\n    );\r\n  // Event emitted when an account has been revoked from being an order delegate\r\n  event RevokeOrderDelegate(\r\n      address indexed orderDelegate\r\n    );\r\n\r\n  // Event emitted when an account has been approved as an approval delegate\r\n  event ApproveApprovalDelegate(\r\n      address indexed approvalDelegate\r\n    );\r\n  // Event emitted when an account has been revoked from being an approval delegate\r\n  event RevokeApprovalDelegate(\r\n      address indexed approvalDelegate\r\n    );\r\n\r\n  // Event emitted when an order has been placed\r\n  event OrderPlaced(\r\n    uint indexed orderIndex\r\n    );\r\n\r\n  // Event emitted when an order has been approved and executed\r\n  event OrderApproved(\r\n    uint indexed orderIndex\r\n    );\r\n\r\n  // Event emitted when an order has been revoked\r\n  event OrderRevoked(\r\n    uint indexed orderIndex\r\n    );\r\n\r\n  // Event emitted when the entire orders batch is approved and executed\r\n  event AllOrdersApproved();\r\n\r\n  // Event emitted when complementaryEthPerOrder has been set\r\n  event ComplementaryEthPerOrderSet();\r\n\r\n\r\n\r\n  constructor(ERC20 _tridentSmartContract) public {\r\n      trident = _tridentSmartContract;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\r\n   */\r\n  function () public payable {\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than an owner or an order delegate.\r\n   */\r\n  modifier onlyOwnerOrOrderDelegate() {\r\n    bool allowedToPlaceOrders = false;\r\n\r\n    if(msg.sender==owner) {\r\n      allowedToPlaceOrders = true;\r\n    }\r\n    else {\r\n      for(uint i=0; i<orderDelegates.length; i++) {\r\n        if(orderDelegates[i]==msg.sender) {\r\n          allowedToPlaceOrders = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    require(allowedToPlaceOrders==true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than an owner or an approval delegate.\r\n   */\r\n  modifier onlyOwnerOrApprovalDelegate() {\r\n    bool allowedToApproveOrders = false;\r\n\r\n    if(msg.sender==owner) {\r\n      allowedToApproveOrders = true;\r\n    }\r\n    else {\r\n      for(uint i=0; i<approvalDelegates.length; i++) {\r\n        if(approvalDelegates[i]==msg.sender) {\r\n          allowedToApproveOrders = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    require(allowedToApproveOrders==true);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Return the array of order delegates.\r\n   */\r\n  function getOrderDelegates() external view returns (address[]) {\r\n    return orderDelegates;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the array of burn delegates.\r\n   */\r\n  function getApprovalDelegates() external view returns (address[]) {\r\n    return approvalDelegates;\r\n  }\r\n\r\n  /**\r\n   * @dev Give an account permission to place orders.\r\n   * @param _orderDelegate The account to be approved.\r\n   */\r\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\r\n    bool delegateFound = false;\r\n    for(uint i=0; i<orderDelegates.length; i++) {\r\n      if(orderDelegates[i]==_orderDelegate) {\r\n        delegateFound = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(!delegateFound) {\r\n      orderDelegates.push(_orderDelegate);\r\n    }\r\n\r\n    emit ApproveOrderDelegate(_orderDelegate);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke permission to place orders from an order delegate.\r\n   * @param _orderDelegate The account to be revoked.\r\n   */\r\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\r\n    uint length = orderDelegates.length;\r\n    require(length > 0);\r\n\r\n    address lastDelegate = orderDelegates[length-1];\r\n    if(_orderDelegate == lastDelegate) {\r\n      delete orderDelegates[length-1];\r\n      orderDelegates.length--;\r\n    }\r\n    else {\r\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\r\n      for(uint i=0; i<length; i++) {\r\n        if(orderDelegates[i]==_orderDelegate) {\r\n          orderDelegates[i] = lastDelegate;\r\n          delete orderDelegates[length-1];\r\n          orderDelegates.length--;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    emit RevokeOrderDelegate(_orderDelegate);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Give an account permission to approve orders.\r\n   * @param _approvalDelegate The account to be approved.\r\n   */\r\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\r\n    bool delegateFound = false;\r\n    for(uint i=0; i<approvalDelegates.length; i++) {\r\n      if(approvalDelegates[i]==_approvalDelegate) {\r\n        delegateFound = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(!delegateFound) {\r\n      approvalDelegates.push(_approvalDelegate);\r\n    }\r\n\r\n    emit ApproveApprovalDelegate(_approvalDelegate);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke permission to approve orders from an approval delegate.\r\n   * @param _approvalDelegate The account to be revoked.\r\n   */\r\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\r\n    uint length = approvalDelegates.length;\r\n    require(length > 0);\r\n\r\n    address lastDelegate = approvalDelegates[length-1];\r\n    if(_approvalDelegate == lastDelegate) {\r\n      delete approvalDelegates[length-1];\r\n      approvalDelegates.length--;\r\n    }\r\n    else {\r\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\r\n      for(uint i=0; i<length; i++) {\r\n        if(approvalDelegates[i]==_approvalDelegate) {\r\n          approvalDelegates[i] = lastDelegate;\r\n          delete approvalDelegates[length-1];\r\n          approvalDelegates.length--;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    emit RevokeApprovalDelegate(_approvalDelegate);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Internal function to delete an order at the given index from the orders array.\r\n   * @param _orderIndex The index of the order to be removed.\r\n   */\r\n  function _deleteOrder(uint _orderIndex) internal {\r\n    require(orders.length > _orderIndex);\r\n\r\n    uint lastIndex = orders.length-1;\r\n    if(_orderIndex != lastIndex) {\r\n      // Replace the order to be deleted with the very last item in the array\r\n      orders[_orderIndex] = orders[lastIndex];\r\n    }\r\n    delete orders[lastIndex];\r\n    orders.length--;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to execute an order at the given index.\r\n   * @param _orderIndex The index of the order to be executed.\r\n   */\r\n  function _executeOrder(uint _orderIndex) internal {\r\n    require(orders.length > _orderIndex);\r\n    require(complementaryEthPerOrder <= address(this).balance);\r\n\r\n    Order memory order = orders[_orderIndex];\r\n    _deleteOrder(_orderIndex);\r\n\r\n    trident.transfer(order.account, order.amount);\r\n\r\n    // Transfer the complementary ETH\r\n    address(order.account).transfer(complementaryEthPerOrder);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to place an order.\r\n   * @param _amount The amount of tokens to transfer.\r\n   * @param _account The account to transfer the tokens to.\r\n   * @param _metadata Arbitrary metadata.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\r\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\r\n\r\n    emit OrderPlaced(orders.length-1);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the number of orders.\r\n   */\r\n  function getOrdersCount() external view returns (uint) {\r\n    return orders.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the number of orders.\r\n   */\r\n  function getOrdersTotalAmount() external view returns (uint) {\r\n    uint total = 0;\r\n    for(uint i=0; i<orders.length; i++) {\r\n        Order memory order = orders[i];\r\n        total += order.amount;\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the order at the given index.\r\n   */\r\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\r\n    Order memory order = orders[_orderIndex];\r\n    return (order.amount, order.account, order.metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke an order at the given index.\r\n   * @param _orderIndex The index of the order to be revoked.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\r\n    _deleteOrder(_orderIndex);\r\n\r\n    emit OrderRevoked(_orderIndex);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to approve an order at the given index.\r\n   * @param _orderIndex The index of the order to be approved.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\r\n    _executeOrder(_orderIndex);\r\n\r\n    emit OrderApproved(_orderIndex);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to approve all orders in the orders array.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\r\n    uint orderCount = orders.length;\r\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\r\n    require(totalComplementaryEth <= address(this).balance);\r\n\r\n    for(uint i=0; i<orderCount; i++) {\r\n        Order memory order = orders[i];\r\n        trident.transfer(order.account, order.amount);\r\n\r\n        // Transfer the complementary ETH\r\n        address(order.account).transfer(complementaryEthPerOrder);\r\n    }\r\n\r\n    // Dispose of all approved orders\r\n    delete orders;\r\n\r\n\r\n    emit AllOrdersApproved();\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Function to set the complementary eth sent with each order executed.\r\n   * @param _complementaryEthPerOrder The index of the order to be approved.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\r\n    complementaryEthPerOrder = _complementaryEthPerOrder;\r\n\r\n    emit ComplementaryEthPerOrderSet();\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function withdraws all ETH from the smart contract.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function withdrawAllEth() onlyOwner external returns (bool) {\r\n    uint ethBalance = address(this).balance;\r\n    require(ethBalance > 0);\r\n\r\n    owner.transfer(ethBalance);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function withdraws all Trident from the smart contract.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function withdrawAllTrident() onlyOwner external returns (bool) {\r\n    uint tridentBalance = trident.balanceOf(address(this));\r\n    require(tridentBalance > 0);\r\n\r\n    return trident.transfer(owner, tridentBalance);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_orderDelegate\",\"type\":\"address\"}],\"name\":\"revokeOrderDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"placeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"revokeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrderDelegates\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"complementaryEthPerOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApprovalDelegates\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderDelegate\",\"type\":\"address\"}],\"name\":\"approveOrderDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllTrident\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getOrderAtIndex\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrdersTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_complementaryEthPerOrder\",\"type\":\"uint256\"}],\"name\":\"setComplementaryEthPerOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvalDelegate\",\"type\":\"address\"}],\"name\":\"approveApprovalDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"approveOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvalDelegate\",\"type\":\"address\"}],\"name\":\"revokeApprovalDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trident\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveAllOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tridentSmartContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderDelegate\",\"type\":\"address\"}],\"name\":\"ApproveOrderDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderDelegate\",\"type\":\"address\"}],\"name\":\"RevokeOrderDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"approvalDelegate\",\"type\":\"address\"}],\"name\":\"ApproveApprovalDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"approvalDelegate\",\"type\":\"address\"}],\"name\":\"RevokeApprovalDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllOrdersApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ComplementaryEthPerOrderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TridentDistribution","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004eea6844a4dc5bf3127decf034b3f4a7211ef2e7","Library":"","SwarmSource":"bzzr://571a7cac291674b4bc36ba89b59c5a3032549f86b302d72e7b897079cd30090f"}]}