{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\n  EN:\r\n\r\n  Web: http://fasteth.online/\r\n  Telegram: https://t.me/fasteth\r\n\r\n  Queue contract: returns 125% of each investment!\r\n\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.05 ETH\r\n     - min 350 000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 125%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 125% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 125% of your initial investment you are\r\n     removed from the queue.\r\n  4. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 125% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 125%)\r\n\r\n    ==> Limits: <==\r\n\r\n    Multiplier: 125%\r\n    Minimum deposit: 0.05ETH\r\n    Maximum deposit: 10ETH\r\n*/\r\n\r\n\r\n/**\r\n\r\n  RU:\r\n\r\n  Web: http://fasteth.online/\r\n  Telegram: https://t.me/fasteth\r\n\r\n  Контракт Умная Очередь: возвращает 125% от вашего депозита!\r\n\r\n  Автоматические выплаты!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.05 ETH\r\n     - gas limit минимум 350 000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 125% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 120% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 125% от вашего депозита, вы удаляетесь из очереди\r\n  4. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 125% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                новый инвестор      |\r\n                 инвестор4     |     =======>      инвестор5        |\r\n                 инвестор3     |                   инвестор4        |\r\n (част. выплата) инвестор2    <|                   инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 125%)\r\n\r\n    ==> Лимиты: <==\r\n\r\n    Профит: 125%\r\n    Минимальный вклад: 0.05 ETH\r\n    Максимальный вклад: 10 ETH\r\n\r\n\r\n*/\r\ncontract FastEth {\r\n\r\n\t//Address for promo expences\r\n    address constant private PROMO1 = 0xaC780d067c52227ac7563FBe975eD9A8F235eb35;\r\n\taddress constant private PROMO2 = 0x6dBFFf54E23Cf6DB1F72211e0683a5C6144E8F03;\r\n\taddress constant private PRIZE\t= 0xeE9B823ef62FfB79aFf2C861eDe7d632bbB5B653;\r\n\t\r\n\t//Percent for promo expences\r\n    uint constant public PROMO_PERCENT = 5;\r\n    \r\n    //Bonus prize\r\n    uint constant public BONUS_PERCENT = 5;\r\n\t\r\n    // Start time\r\n    uint constant StartEpoc = 1541260770;                     \r\n                         \r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; // The depositor address\r\n        uint deposit;   // The deposit amount\r\n        uint payout; // Amount already paid\r\n    }\r\n\r\n    Deposit[] public queue;  // The queue\r\n    mapping (address => uint) public depositNumber; // investor deposit index\r\n    uint public currentReceiverIndex; // The index of the depositor in the queue\r\n    uint public totalInvested; // Total invested amount\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        \r\n        require(now >= StartEpoc);\r\n\r\n        if(msg.value > 0){\r\n\r\n            require(gasleft() >= 250000); // We need gas to process queue\r\n            require(msg.value >= 0.05 ether && msg.value <= 10 ether); // Too small and too big deposits are not accepted\r\n            \r\n            // Add the investor into the queue\r\n            queue.push( Deposit(msg.sender, msg.value, 0) );\r\n            depositNumber[msg.sender] = queue.length;\r\n\r\n            totalInvested += msg.value;\r\n\r\n            //Send some promo to enable queue contracts to leave long-long time\r\n            uint promo1 = msg.value*PROMO_PERCENT/100;\r\n            PROMO1.transfer(promo1);\r\n\t\t\tuint promo2 = msg.value*PROMO_PERCENT/100;\r\n            PROMO2.transfer(promo2);\t\t\t\r\n            uint prize = msg.value*BONUS_PERCENT/100;\r\n            PRIZE.transfer(prize);\r\n            \r\n            // Pay to first investors in line\r\n            pay();\r\n\r\n        }\r\n    }\r\n\r\n    // Used to pay to current investors\r\n    // Each new transaction processes 1 - 4+ investors in the head of queue\r\n    // depending on balance and gas left\r\n    function pay() internal {\r\n\r\n        uint money = address(this).balance;\r\n        uint multiplier = 125;\r\n\r\n        // We will do cycle on the queue\r\n        for (uint i = 0; i < queue.length; i++){\r\n\r\n            uint idx = currentReceiverIndex + i;  //get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[idx]; // get the info of the first investor\r\n\r\n            uint totalPayout = dep.deposit * multiplier / 100;\r\n            uint leftPayout;\r\n\r\n            if (totalPayout > dep.payout) {\r\n                leftPayout = totalPayout - dep.payout;\r\n            }\r\n\r\n            if (money >= leftPayout) { //If we have enough money on the contract to fully pay to investor\r\n\r\n                if (leftPayout > 0) {\r\n                    dep.depositor.transfer(leftPayout); // Send money to him\r\n                    money -= leftPayout;\r\n                }\r\n\r\n                // this investor is fully paid, so remove him\r\n                depositNumber[dep.depositor] = 0;\r\n                delete queue[idx];\r\n\r\n            } else{\r\n\r\n                // Here we don't have enough money so partially pay to investor\r\n                dep.depositor.transfer(money); // Send to him everything we have\r\n                dep.payout += money;       // Update the payout amount\r\n                break;                     // Exit cycle\r\n\r\n            }\r\n\r\n            if (gasleft() <= 55000) {         // Check the gas left. If it is low, exit the cycle\r\n                break;                       // The next investor will process the line further\r\n            }\r\n        }\r\n\r\n        currentReceiverIndex += i; //Update the index of the current first investor\r\n    }\r\n    \r\n    //Returns your position in queue\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    // Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"FastEth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a4c5aff275d19fa3fbd134ba3a0b7b27944199af589c6ac0a08b49b960055fdf"}]}