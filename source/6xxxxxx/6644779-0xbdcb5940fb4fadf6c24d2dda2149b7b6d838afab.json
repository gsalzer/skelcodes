{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* Copyright Accelerator 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is furnished to\r\n* do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\npragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract EtherDelta {\r\n  function deposit() public payable {}\r\n  function withdrawToken(address token, uint amount) public {}\r\n  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}\r\n  function balanceOf(address token, address user) public view returns (uint);\r\n}\r\n\r\ncontract Accelerator {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract AcceleratorX {\r\n  /// @dev Set constant values here\r\n  string public constant name = \"AcceleratorX\";\r\n  string public constant symbol = \"ACCx\";\r\n  uint8 public constant decimals = 18;\r\n  uint public totalSupply;\r\n  uint public constant maxTotalSupply = 10**27;\r\n  address constant public ETHERDELTA_ADDR = 0x8d12A197cB00D4747a1fe03395095ce2A5CC6819; // EtherDelta contract address\r\n  address constant public ACCELERATOR_ADDR = 0x13f1b7fdfbe1fc66676d56483e21b1ecb40b58e2; // Accelerator contract address\r\n\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  using SafeMath for uint256;\r\n  /// @dev Burn ACC tokens\r\n  function burn(\r\n    uint volume,\r\n    uint volumeETH,\r\n    uint expires,\r\n    uint nonce,\r\n    address user,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s,\r\n    uint amount\r\n  ) public payable\r\n  {\r\n    /// @dev Deposit ethers in EtherDelta\r\n    deposit(msg.value);\r\n    /// @dev Execute the trade\r\n    EtherDelta(ETHERDELTA_ADDR).trade(\r\n      address(0),\r\n      volume,\r\n      ACCELERATOR_ADDR,\r\n      volumeETH,\r\n      expires,\r\n      nonce,\r\n      user,\r\n      v,\r\n      r,\r\n      s,\r\n      amount\r\n    );\r\n    /// @dev Get the balance of ACC tokens stored in the EtherDelta contract\r\n    uint ACC = EtherDelta(ETHERDELTA_ADDR).balanceOf(ACCELERATOR_ADDR, address(this));\r\n    /// @dev Withdraw ACC tokens from EtherDelta\r\n    withdrawToken(ACCELERATOR_ADDR, ACC);\r\n    /// @dev Send the tokens to address(0) (the burn address) - require it or fail here\r\n    require(Accelerator(ACCELERATOR_ADDR).transfer(address(0), ACC));\r\n    /// @dev Proof of Burn = Credit the msg.sender address with volume of tokens trasfered to burn address multiplied by 100 (1 ACC = 100 ACCX)\r\n    uint256 numTokens = SafeMath.safeMul(ACC, 100);\r\n    balances[msg.sender] = balances[msg.sender].safeAdd(numTokens);\r\n    totalSupply = totalSupply.safeAdd(numTokens);\r\n    emit Transfer(address(0), msg.sender, numTokens);\r\n  }\r\n/// @dev Deposit ethers to EtherDelta.\r\n/// @param amount Amount of ethers to deposit in EtherDelta\r\nfunction deposit(uint amount) internal {\r\n  EtherDelta(ETHERDELTA_ADDR).deposit.value(amount)();\r\n}\r\n/// @dev Withdraw tokens from EtherDelta.\r\n/// @param token Address of token to withdraw from EtherDelta\r\n/// @param amount Amount of tokens to withdraw from EtherDelta\r\nfunction withdrawToken(address token, uint amount) internal {\r\n  EtherDelta(ETHERDELTA_ADDR).withdrawToken(token, amount);\r\n}\r\n\r\n/// @dev ERC20 logic for AcceleratorX token\r\nfunction balanceOf(address tokenOwner) public view returns (uint) {\r\n    return balances[tokenOwner];\r\n}\r\n\r\nfunction transfer(address receiver, uint numTokens) public returns (bool) {\r\n    require(numTokens <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].safeSub(numTokens);\r\n    balances[receiver] = balances[receiver].safeAdd(numTokens);\r\n    emit Transfer(msg.sender, receiver, numTokens);\r\n    return true;\r\n}\r\n\r\nfunction approve(address delegate, uint numTokens) public returns (bool) {\r\n    allowed[msg.sender][delegate] = numTokens;\r\n    emit Approval(msg.sender, delegate, numTokens);\r\n    return true;\r\n}\r\n\r\nfunction allowance(address owner, address delegate) public view returns (uint) {\r\n    return allowed[owner][delegate];\r\n}\r\n\r\nfunction transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n    require(numTokens <= balances[owner]);\r\n    require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n    balances[owner] = balances[owner].safeSub(numTokens);\r\n    allowed[owner][msg.sender] = allowed[owner][msg.sender].safeSub(numTokens);\r\n    balances[buyer] = balances[buyer].safeAdd(numTokens);\r\n    emit Transfer(owner, buyer, numTokens);\r\n    return true;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"volumeETH\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHERDELTA_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCELERATOR_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AcceleratorX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fbbcfad790eecf6c3ab210da219a8463885cf13c36f1c4445e8efa0aa7a420e5"}]}