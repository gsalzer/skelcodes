{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* MXC Smart Contract for Ethereum\r\n* \r\n* Copyright 2018 MXC Foundation\r\n*\r\n*/\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n*/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances.\r\n*/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards,\r\n    * i.e. clients SHOULD make sure to create user interfaces in such a way \r\n    * that they set the allowance first to 0 before setting it to another value for the same spender. \r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n   )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MXCToken is StandardToken {\r\n\r\n    string public constant name = \"MXCToken\";\r\n    string public constant symbol = \"MXC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 constant MONTH = 3600*24*30;\r\n\r\n    struct TimeLock {\r\n        // total amount of tokens that is granted to the user\r\n        uint256 amount;\r\n\r\n        // total amount of tokens that have been vested\r\n        uint256 vestedAmount;\r\n\r\n        // total amount of vested months (tokens are vested on a monthly basis)\r\n        uint16 vestedMonths;\r\n\r\n        // token timestamp start\r\n        uint256 start;\r\n\r\n        // token timestamp release start (when user can start receive vested tokens)\r\n        uint256 cliff;\r\n\r\n        // token timestamp release end (when all the tokens can be vested)\r\n        uint256 vesting;\r\n\r\n        address from;\r\n    }\r\n\r\n    mapping(address => TimeLock) timeLocks;\r\n\r\n    event NewTokenGrant(address indexed _from, address indexed _to, uint256 _amount, uint256 _start, uint256 _cliff, uint256 _vesting);\r\n    event VestedTokenRedeemed(address indexed _to, uint256 _amount, uint256 _vestedMonths);\r\n    event GrantedTokenReturned(address indexed _from, address indexed _to, uint256 _amount);\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    constructor() public {\r\n        totalSupply_ = 2664965800 * (10 ** uint256(decimals));\r\n        balances[msg.sender] = totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n    }\r\n\r\n    function vestBalanceOf(address who)\r\n        public view\r\n        returns (uint256 amount, uint256 vestedAmount, uint256 start, uint256 cliff, uint256 vesting)\r\n    {\r\n        require(who != address(0));\r\n        amount = timeLocks[who].amount;\r\n        vestedAmount = timeLocks[who].vestedAmount;\r\n        start = timeLocks[who].start;\r\n        cliff = timeLocks[who].cliff;\r\n        vesting = timeLocks[who].vesting;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to grant the amount of tokens that will be vested later.\r\n    * @param _to The address which will own the tokens.\r\n    * @param _amount The amount of tokens that will be vested later.\r\n    * @param _start Token timestamp start.\r\n    * @param _cliff Token timestamp release start.\r\n    * @param _vesting Token timestamp release end.\r\n    */\r\n    function grantToken(\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _vesting\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender], \"Not enough balance to grant token.\");\r\n        require(_amount > 0, \"Nothing to transfer.\");\r\n        require((timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount) == 0), \"The previous vesting should be completed.\");\r\n        require(_cliff >= _start, \"_cliff must be >= _start\");\r\n        require(_vesting > _start, \"_vesting must be bigger than _start\");\r\n        require(_vesting > _cliff, \"_vesting must be bigger than _cliff\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        timeLocks[_to] = TimeLock(_amount, 0, 0, _start, _cliff, _vesting, msg.sender);\r\n\r\n        emit NewTokenGrant(msg.sender, _to, _amount, _start, _cliff, _vesting);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to grant the amount of tokens that will be vested later.\r\n    * @param _to The address which will own the tokens.\r\n    * @param _amount The amount of tokens that will be vested later.\r\n    * @param _cliffMonths Token release start in months from now.\r\n    * @param _vestingMonths Token release end in months from now.\r\n    */\r\n    function grantTokenStartNow(\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _cliffMonths,\r\n        uint256 _vestingMonths\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return grantToken(\r\n            _to,\r\n            _amount,\r\n            now,\r\n            now.add(_cliffMonths.mul(MONTH)),\r\n            now.add(_vestingMonths.mul(MONTH))\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @dev Function to calculate the amount of tokens that can be vested at this moment.\r\n    * @param _to The address which will own the tokens.\r\n    * @return amount - A uint256 specifying the amount of tokens available to be vested at this moment.\r\n    * @return vestedMonths - A uint256 specifying the number of the vested months since the last vesting.\r\n    * @return curTime - A uint256 specifying the current timestamp.\r\n    */\r\n    function calcVestableToken(address _to)\r\n        internal view\r\n        returns (uint256 amount, uint256 vestedMonths, uint256 curTime)\r\n    {\r\n        uint256 vestTotalMonths;\r\n        uint256 vestedAmount;\r\n        uint256 vestPart;\r\n        amount = 0;\r\n        vestedMonths = 0;\r\n        curTime = now;\r\n        \r\n        require(timeLocks[_to].amount > 0, \"Nothing was granted to this address.\");\r\n        \r\n        if (curTime <= timeLocks[_to].cliff) {\r\n            return (0, 0, curTime);\r\n        }\r\n\r\n        vestedMonths = curTime.sub(timeLocks[_to].start) / MONTH;\r\n        vestedMonths = vestedMonths.sub(timeLocks[_to].vestedMonths);\r\n\r\n        if (curTime >= timeLocks[_to].vesting) {\r\n            return (timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount), vestedMonths, curTime);\r\n        }\r\n\r\n        if (vestedMonths > 0) {\r\n            vestTotalMonths = timeLocks[_to].vesting.sub(timeLocks[_to].start) / MONTH;\r\n            vestPart = timeLocks[_to].amount.div(vestTotalMonths);\r\n            amount = vestedMonths.mul(vestPart);\r\n            vestedAmount = timeLocks[_to].vestedAmount.add(amount);\r\n            if (vestedAmount > timeLocks[_to].amount) {\r\n                amount = timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount);\r\n            }\r\n        }\r\n\r\n        return (amount, vestedMonths, curTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to redeem tokens that can be vested at this moment.\r\n    * @param _to The address which will own the tokens.\r\n    */\r\n    function redeemVestableToken(address _to)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n        require(timeLocks[_to].amount > 0, \"Nothing was granted to this address!\");\r\n        require(timeLocks[_to].vestedAmount < timeLocks[_to].amount, \"All tokens were vested!\");\r\n\r\n        (uint256 amount, uint256 vestedMonths, uint256 curTime) = calcVestableToken(_to);\r\n        require(amount > 0, \"Nothing to redeem now.\");\r\n\r\n        TimeLock storage t = timeLocks[_to];\r\n        balances[_to] = balances[_to].add(amount);\r\n        t.vestedAmount = t.vestedAmount.add(amount);\r\n        t.vestedMonths = t.vestedMonths + uint16(vestedMonths);\r\n        t.cliff = curTime;\r\n\r\n        emit VestedTokenRedeemed(_to, amount, vestedMonths);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to return granted token to the initial sender.\r\n    * @param _amount - A uint256 specifying the amount of tokens to be returned.\r\n    */\r\n    function returnGrantedToken(uint256 _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        address to = timeLocks[msg.sender].from;\r\n        require(to != address(0));\r\n        require(_amount > 0, \"Nothing to transfer.\");\r\n        require(timeLocks[msg.sender].amount > 0, \"Nothing to return.\");\r\n        require(_amount <= timeLocks[msg.sender].amount.sub(timeLocks[msg.sender].vestedAmount), \"Not enough granted token to return.\");\r\n\r\n        timeLocks[msg.sender].amount = timeLocks[msg.sender].amount.sub(_amount);\r\n        balances[to] = balances[to].add(_amount);\r\n\r\n        emit GrantedTokenReturned(msg.sender, to, _amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_cliffMonths\",\"type\":\"uint256\"},{\"name\":\"_vestingMonths\",\"type\":\"uint256\"}],\"name\":\"grantTokenStartNow\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnGrantedToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"grantToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeemVestableToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"vestBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vestedAmount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vestedMonths\",\"type\":\"uint256\"}],\"name\":\"VestedTokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"GrantedTokenReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MXCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://156b96620bc6806e6f2d2f44b62996de6d965535543f139996f301186098f5a2"}]}