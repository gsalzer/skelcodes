{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownerable.sol\r\n\r\ncontract Ownerable {\r\n    /// @notice The address of the owner is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n\r\n    address public owner;\r\n\r\n    constructor() public { owner = msg.sender;}\r\n\r\n    /// @notice Changes the owner of the contract\r\n    /// @param _newOwner The new owner of the contract\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/RegXAddr.sol\r\n\r\ncontract RegXAddr is Ownerable {\r\n\r\n  bool public registable;\r\n  ERC20Basic private atxToken;\r\n\r\n  address[] public ethAddrs;\r\n  mapping (address => address) public eth2xbc;\r\n\r\n  constructor () public {\r\n    atxToken = ERC20Basic(0x1A0F2aB46EC630F9FD638029027b552aFA64b94c);\r\n  }\r\n\r\n  function setRegistable(bool _registable) public onlyOwner {\r\n    registable = _registable;\r\n  }\r\n\r\n  function registeredCount() public view returns (uint256) {\r\n    return ethAddrs.length;\r\n  }\r\n  \r\n  function xbc2eth(address _xaddr) public view returns (address) {\r\n    require(_xaddr != 0x0);\r\n      \r\n    for(uint i=0; i<ethAddrs.length; i++) {\r\n      if(eth2xbc[ethAddrs[i]] == _xaddr) {\r\n\treturn ethAddrs[i];\r\n      }\r\n    }\r\n    return 0x0;\r\n  }\r\n\r\n  function registerXAddress (address _xaddr) public returns (bool){\r\n    require(registable);\r\n    require(_xaddr != 0x0);\r\n    require(msg.sender != 0x0);\r\n\r\n    uint256 atxBalance = atxToken.balanceOf(msg.sender);\r\n    require(atxBalance > 0);\r\n      \r\n    if(eth2xbc[msg.sender] == 0x0) {\r\n      ethAddrs.push(msg.sender);\r\n    }\r\n    eth2xbc[msg.sender] = _xaddr;\r\n\r\n    emit RegisterXAddress(msg.sender, _xaddr, atxBalance);\r\n    return true;\r\n  }\r\n\r\n  function reset() public onlyOwner {\r\n    for(uint i=0; i<ethAddrs.length; i++) {\r\n      delete eth2xbc[ ethAddrs[i] ];\r\n    }\r\n    delete ethAddrs;\r\n  }\r\n\r\n\r\n  event RegisterXAddress (address indexed ethaddr, address indexed xbcaddr, uint256 balance);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"registable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registeredCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registable\",\"type\":\"bool\"}],\"name\":\"setRegistable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xaddr\",\"type\":\"address\"}],\"name\":\"registerXAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_xaddr\",\"type\":\"address\"}],\"name\":\"xbc2eth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eth2xbc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethaddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"xbcaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RegisterXAddress\",\"type\":\"event\"}]","ContractName":"RegXAddr","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fcc0bba24bef5ce6e7e13ff2a3baa5b7dd57f6fce2032a8dd1d9f1167d344ce"}]}