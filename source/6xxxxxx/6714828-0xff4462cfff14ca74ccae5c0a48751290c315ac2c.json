{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: ..\\node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: ..\\node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: ..\\node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\AdvisorWallet.sol\r\n\r\ncontract AdvisorWallet {  \r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Advisor {\t\t\r\n\t\tuint256 tokenAmount;    \r\n\t\tuint withdrawStage;\t\t\r\n\t}\r\n\r\n  ERC20 public tokenContract;\r\n\tuint256 public totalToken;\r\n\taddress public creator;\r\n\tbool public allocateTokenDone = false;\r\n\r\n\tmapping(address => Advisor) public advisors;\r\n\r\n  uint public firstUnlockDate;\r\n  uint public secondUnlockDate;  \r\n\r\n  event WithdrewTokens(address _tokenContract, address _to, uint256 _amount);\r\n\r\n\tmodifier onlyCreator() {\r\n\t\trequire(msg.sender == creator);\r\n\t\t_;\r\n\t}\r\n\r\n  constructor() public {\r\n    creator = msg.sender;\r\n    tokenContract = ERC20(creator);\r\n\r\n    firstUnlockDate = now + (6 * 30 days); // Allow withdraw 50% after 6 month\r\n    secondUnlockDate = now + (12 * 30 days); // Allow withdraw all after 12 month\r\n  }\r\n  \r\n  function() payable public { \r\n    revert();\r\n  }\r\n\r\n\tfunction setAllocateTokenDone() internal {\r\n\t\trequire(!allocateTokenDone);\r\n\t\tallocateTokenDone = true;\r\n\t}\r\n\r\n\tfunction addAdvisor(address _memberAddress, uint256 _tokenAmount) internal {\t\t\r\n\t\trequire(!allocateTokenDone);\r\n\t\tadvisors[_memberAddress] = Advisor(_tokenAmount, 0);\r\n    totalToken = totalToken.add(_tokenAmount);\r\n\t}\r\n\r\n  function allocateTokenForAdvisor() external onlyCreator {\r\n    // allocation 10M token for advisor\r\n    addAdvisor(0xf8E2d6a822f70c5c5788fa10f080810a8579d407, 2000000 * (10 ** 18));\r\n    addAdvisor(0xab74072a37e08Ff9ceA098d4E33438257589B044, 1000000 * (10 ** 18));\r\n    addAdvisor(0x3DFD289380Cbe25456B5973306129753c4ed3dF3, 7000000 * (10 ** 18));\r\n    setAllocateTokenDone();\r\n  }\r\n\t\r\n  // callable by advisor only, after specified time\r\n  function withdrawTokens() external {\t\t\r\n    require(now > firstUnlockDate);\r\n\t\tAdvisor storage advisor = advisors[msg.sender];\r\n\t\trequire(advisor.tokenAmount > 0);\r\n\r\n    uint256 amount = 0;\r\n    if(now > secondUnlockDate) {\r\n      // withdrew all token remain in second stage\r\n      amount = advisor.tokenAmount;\r\n    } else if(now > firstUnlockDate && advisor.withdrawStage == 0){\r\n      // withdrew 50% in first stage\r\n      amount = advisor.tokenAmount * 50 / 100;\r\n    }\r\n\r\n    if(amount > 0) {\r\n\t\t\tadvisor.tokenAmount = advisor.tokenAmount.sub(amount);      \r\n\t\t\tadvisor.withdrawStage = advisor.withdrawStage + 1;      \r\n      tokenContract.transfer(msg.sender, amount);\r\n      emit WithdrewTokens(tokenContract, msg.sender, amount);\r\n      return;\r\n    }\r\n\r\n    revert();\r\n  }\r\n}\r\n\r\n// File: contracts\\TeamWallet.sol\r\n\r\ncontract TeamWallet {  \r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Member {\t\t\r\n    uint256 tokenAmount;\r\n\t\tuint256 tokenRemain;\r\n\t\tuint withdrawStage;\t\t\r\n\t\taddress lastRejecter;\r\n    bool isRejected;\r\n\t}\r\n\r\n  ERC20 public tokenContract;\r\n\tuint256 public totalToken;\r\n\taddress public creator;\r\n\tbool public allocateTokenDone = false;\r\n\r\n\tmapping(address => Member) public members;\r\n\r\n  uint public firstUnlockDate;\r\n  uint public secondUnlockDate;\r\n  uint public thirdUnlockDate;\r\n\r\n  address public approver1;\r\n  address public approver2;\r\n\r\n  event WithdrewTokens(address _tokenContract, address _to, uint256 _amount);  \r\n  event RejectedWithdrawal(address _rejecter, address _member, uint _withdrawStage);\r\n\r\n\tmodifier onlyCreator() {\r\n\t\trequire(msg.sender == creator);\r\n\t\t_;\r\n\t}\r\n\r\n  modifier onlyApprover() {\r\n    require(msg.sender == approver1 || msg.sender == approver2);\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _approver1,\r\n    address _approver2\r\n  ) public {\r\n    require(_approver1 != address(0));\r\n    require(_approver2 != address(0));\r\n\r\n    creator = msg.sender;\r\n    tokenContract = ERC20(creator);\r\n    \r\n    firstUnlockDate = now + (12 * 30 days); // Allow withdraw 20% after 12 month    \r\n    secondUnlockDate = now + (24 * 30 days); // Allow withdraw 30% after 24 month\r\n    thirdUnlockDate = now + (36 * 30 days); // Allow withdraw all after 36 month    \r\n\r\n    approver1 = _approver1;\r\n    approver2 = _approver2;\r\n  }\r\n  \r\n  function() payable public { \r\n    revert();\r\n  }\r\n\r\n\tfunction setAllocateTokenDone() internal {\r\n\t\trequire(!allocateTokenDone);\r\n\t\tallocateTokenDone = true;\r\n\t}\r\n\r\n\tfunction addMember(address _memberAddress, uint256 _tokenAmount) internal {\t\t\r\n\t\trequire(!allocateTokenDone);\r\n\t\tmembers[_memberAddress] = Member(_tokenAmount, _tokenAmount, 0, address(0), false);\r\n    totalToken = totalToken.add(_tokenAmount);\r\n\t}\r\n  \r\n  function allocateTokenForTeam() external onlyApprover {\r\n    // allocation 20M token for team and founder\r\n    addMember(0x0929C384F12914Fe20dE96af934A35b8333Bbe11, 97656 * (10 ** 18));\r\n    addMember(0x0A0aC5949FE7Af47B566F0dC02f92DF6B6980AA5, 65104 * (10 ** 18));\r\n    addMember(0x0eE878D94e22Cb50A62e4D685193B35015e3eDf8, 640000 * (10 ** 18));\r\n    addMember(0x1A5912eEb9490B0937CD36636eEEFA82aA4Aa549, 177083 * (10 ** 18));\r\n    addMember(0x1b2298A5d5342452D87D6684Fe31aEe52A31433d, 130208 * (10 ** 18));\r\n    addMember(0x1eF0f9F6CcD2528d7038d4cEe47a417cA7f4c79d, 175781 * (10 ** 18));\r\n    addMember(0x23a18F3A82F9EE302a1e6350b8D9f9F3B65ED5D7, 104167 * (10 ** 18));\r\n    addMember(0x24F29d95a0D41a1713b67b29Bf664A1b70B5D683, 97656 * (10 ** 18));\r\n    addMember(0x2598aCe98c1117f72Da929441b56a26994d5b13A, 680000 * (10 ** 18));\r\n    addMember(0x275c667B3B372Ffb03BF05B97841C66eF1f1DF99, 480000 * (10 ** 18));\r\n    addMember(0x27be83EBDC7D7917e2A4247bb8286cB192b74C51, 65104 * (10 ** 18));\r\n    addMember(0x2847aFA0348284658A2cAFf676361A26220ccE7d, 280000 * (10 ** 18));\r\n    addMember(0x29904b46fb7e411654dd16b1e9680A81Aa5A472D, 240000 * (10 ** 18));\r\n    addMember(0x2B6f1941101c633Bbe24ce13Fd49ba14480F7242, 120000 * (10 ** 18));\r\n    addMember(0x2c647B2D6a5B3FFE21bebA4467937cEd24c4292B, 720000 * (10 ** 18));\r\n    addMember(0x2d8cdfBfc3C8Df06f70257eAca63aB742db62562, 110677 * (10 ** 18));\r\n    addMember(0x3289E2310108699e22c2CDF81485885a3E9d3683, 31250 * (10 ** 18));\r\n    addMember(0x375814a2D26A8cB1a010Db1FE8cE9Bc06e5224af, 125000 * (10 ** 18));\r\n    addMember(0x401438aD9584A68D5A68FA1E8a2ef716862d82d9, 149740 * (10 ** 18));\r\n    addMember(0x44be551E017893A0dD74e5160Ef0DB0aed2BdA54, 400000 * (10 ** 18));\r\n    addMember(0x451B389a9F7365B09A24481F9EB5a125F64Ae4aB, 280000 * (10 ** 18));\r\n    addMember(0x500D157FA3E3Ab5133ee0C7EFff3Ad5cdBCE01F3, 400000 * (10 ** 18));\r\n    addMember(0x577FEE18cCD840b2a41c9180bbE6412a89c1aD2C, 720000 * (10 ** 18));\r\n    addMember(0x58eA48c5FD9ac82e6CCb8aC67aCB48D1fb38b592, 80000 * (10 ** 18));\r\n    addMember(0x5DdfCd7d8FAe31014010C3877E4Bf91F2E683F2D, 130208 * (10 ** 18));\r\n    addMember(0x5E5Fc9f5C8B2EA3436D92dC07f621496C6E3EeC4, 800000 * (10 ** 18));\r\n    addMember(0x5F89F3FeeeB67B3229b17E389D8BaD28f44d08aA, 120000 * (10 ** 18));\r\n    addMember(0x60a09Fa998a1A6625c1161C452aAab26e6151cfA, 45573 * (10 ** 18));\r\n    addMember(0x63Fa2cE8C891690fF40FB197E09C72B84Ca1030e, 121094 * (10 ** 18));\r\n    addMember(0x66e898bA75FC329d872e61eE16fc4ea0248Eb369, 320000 * (10 ** 18));\r\n    addMember(0x66F212e3Ba5F44BeB014FCe2beD1b1F290b13009, 15625 * (10 ** 18));\r\n    addMember(0x6736ead91e4E9131262Aa033B8811071BbCa3f85, 117188 * (10 ** 18));\r\n    addMember(0x6B99cE47bf47D91159109506B4722c732B5d7b46, 120000 * (10 ** 18));\r\n    addMember(0x6f9140d408Faf111eF3D693645638B863650057d, 320000 * (10 ** 18));\r\n    addMember(0x7510CC3635470Bd033c94a10B0a7ed46d98EbcC7, 156250 * (10 ** 18));\r\n    addMember(0x7692bF394c84D3a880407E8cf4167b01007A9880, 175781 * (10 ** 18));\r\n    addMember(0x7726bDa7d29FC141Eb65150eA7CBB1bC985693Dd, 93750 * (10 ** 18));\r\n    addMember(0x7B6c1d3475974d5904c31BE4F3B9aA26F6eCAebB, 400000 * (10 ** 18));\r\n    addMember(0x7D0E17DEa015B5A687385116d443466B2a42c65B, 109375 * (10 ** 18));\r\n    addMember(0x8a0D93CF316b6Eb58aa5463533d06F18Bfa58ade, 640000 * (10 ** 18));\r\n    addMember(0x8F25dD569c72fB507D72D743f070273556123AED, 169271 * (10 ** 18));\r\n    addMember(0x908D0CF89bc46510b1B472F51905169Ad025f99F, 120000 * (10 ** 18));\r\n    addMember(0x99A43289E131640534E147596F05d40699214673, 160000 * (10 ** 18));\r\n    addMember(0x9C16FA8a4e04d67781D3d02a6b17De7a3e27e168, 600000 * (10 ** 18));\r\n    addMember(0x9DAeD1073C38902a9a6dD8834f8a7c7851717b86, 360000 * (10 ** 18));\r\n    addMember(0xa0dc24Aa838946d39d3d76f0f776BE6D26cB7b2b, 520000 * (10 ** 18));\r\n    addMember(0xa40b31177E908d235FDF6AE8010e135d204BE19c, 160000 * (10 ** 18));\r\n    addMember(0xa428FEcCc9E9F972498303d2C91982f1B6813827, 109375 * (10 ** 18));\r\n    addMember(0xa7951c07d25d88D75662BD68B5dF4D6D08F17600, 104167 * (10 ** 18));\r\n    addMember(0xA7fD89962f76233b68c33b0d9795c5899Feb11B3, 320000 * (10 ** 18));\r\n    addMember(0xA8B6FB38F8BeC4C331E922Eb5a842921081267ce, 156250 * (10 ** 18));\r\n    addMember(0xafbE656FbBC42704ef04aa6D8Ee1FEa9F3b71E7F, 136719 * (10 ** 18));\r\n    addMember(0xb1cf51D7e8F987d0e64bBB2e1bE277821c600778, 130208 * (10 ** 18));\r\n    addMember(0xB694854b6d8e6eAbDC15bE93005CCd54B841a79f, 560000 * (10 ** 18));\r\n    addMember(0xb6dFc3227E2dd9CA569fFCE69014539F138D1bcC, 280000 * (10 ** 18));\r\n    addMember(0xc230934C7610e39Ae06d4799e21b938bB44E60f2, 280000 * (10 ** 18));\r\n    addMember(0xc6888650Dec537dD4f056008D9d3ED171d48F1CD, 640000 * (10 ** 18));\r\n    addMember(0xccE1fc98815307BcDdE9596544802945a664C8b7, 440000 * (10 ** 18));\r\n    addMember(0xd1326c632009979713BD92855cecc04c7ebE29F0, 36458 * (10 ** 18));\r\n    addMember(0xD3859645cECCEFB1210567BaEB9c714272c9f61B, 149740 * (10 ** 18));\r\n    addMember(0xDB252f9D8Bd0Cb0bB83df4E50870977c771C6b50, 26042 * (10 ** 18));\r\n    addMember(0xDc87F026A5d5E37B9AD67321a19802Bb5082cC67, 400000 * (10 ** 18));\r\n    addMember(0xE01b721ef02A550B11DF7e0B3f55809227a4F1B4, 680000 * (10 ** 18));\r\n    addMember(0xe13E61A210724D50F5D39cd3f8b08955993E9309, 80000 * (10 ** 18));\r\n    addMember(0xe2D9a70307383072f18bf9D0eff9Cb98d1278777, 600000 * (10 ** 18));\r\n    addMember(0xe81CF8A8F052B6dd9dFfF452a593e5638A4097ee, 109375 * (10 ** 18));\r\n    addMember(0xEC80389aF763b4d141b1AD2a1E8579f8B5500fAF, 560000 * (10 ** 18));\r\n    addMember(0xF568705D7A1Df478CF6118420fA482B71092Ca66, 156250 * (10 ** 18));\r\n    addMember(0xF662482E8196Fb5e4f680964263A5bA618E295A7, 149740 * (10 ** 18));\r\n    addMember(0xF84FB7E6d21364B4F919Cab2A205Af70ae86f013, 800000 * (10 ** 18));\r\n    addMember(0xF9Cd27047e11DdDb93C5623a97b49278B1443576, 110677 * (10 ** 18));\r\n    addMember(0xF9d41D1409cdf2AfD629ab437760Bb41260CC81D, 20833 * (10 ** 18));\r\n    addMember(0xFbAEF91d25e3cfad0aDef2F9C43f9eC957615E43, 680000 * (10 ** 18));\r\n    addMember(0xfe5e823c967476bC4cFB8D84Dfaf6699A76062F4, 140625 * (10 ** 18));\r\n    setAllocateTokenDone();\r\n  }\r\n\t\r\n  // callable by team member only, after specified time\r\n  function withdrawTokens() external {\t\t\r\n    require(now > firstUnlockDate);\r\n\t\tMember storage member = members[msg.sender];\r\n\t\trequire(member.tokenRemain > 0 && member.isRejected == false);\r\n\r\n    uint256 amount = 0;\r\n    if(now > thirdUnlockDate) {\r\n      // withdrew all remain token in third stage\r\n      amount = member.tokenRemain;      \r\n    } else if(now > secondUnlockDate && member.withdrawStage == 1) {\r\n      // withdrew 30% in second stage\r\n      amount = member.tokenAmount * 30 / 100;\r\n    } else if(now > firstUnlockDate && member.withdrawStage == 0){\r\n      // withdrew 20% in first stage\r\n      amount = member.tokenAmount * 20 / 100;\r\n    }\r\n\r\n    if(amount > 0) {\r\n\t\t\tmember.tokenRemain = member.tokenRemain.sub(amount);      \r\n\t\t\tmember.withdrawStage = member.withdrawStage + 1;      \r\n      tokenContract.transfer(msg.sender, amount);\r\n      emit WithdrewTokens(tokenContract, msg.sender, amount);\r\n      return;\r\n    }\r\n\r\n    revert();\r\n  }  \r\n\r\n  function rejectWithdrawal(address _memberAddress) external onlyApprover {\r\n\t\tMember storage member = members[_memberAddress];\r\n    require(member.lastRejecter != msg.sender);\r\n\t\trequire(member.tokenRemain > 0 && member.isRejected == false);\r\n\r\n    //have a admin reject member before\r\n    if(member.lastRejecter != address(0)) {      \r\n\t\t\tmember.isRejected = true;\r\n\t\t}\r\n\r\n    member.lastRejecter = msg.sender;\r\n    emit RejectedWithdrawal(msg.sender, _memberAddress, member.withdrawStage);\r\n  }\r\n\r\n\tfunction canBurn(address _memberAddress) external view returns(bool) {\r\n\t\tMember memory member = members[_memberAddress];\r\n\t\tif(member.tokenRemain > 0) return member.isRejected;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction getMemberTokenRemain(address _memberAddress) external view returns(uint256) {\r\n\t\tMember memory member = members[_memberAddress];\r\n\t\tif(member.tokenRemain > 0) return member.tokenRemain;\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\tfunction burnMemberToken(address _memberAddress) external onlyCreator() {\r\n\t\tMember storage member = members[_memberAddress];\r\n\t\trequire(member.tokenRemain > 0 && member.isRejected);\r\n\t\tmember.tokenRemain = 0;\r\n\t}\t\r\n}\r\n\r\n// File: contracts\\CoinBet.sol\r\n\r\n/* solium-disable */\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\nlibrary ICOData {\r\n  struct Bracket {\r\n    uint256 total;\r\n    uint256 remainToken;\r\n    uint256 tokenPerEther;\r\n    uint256 minAcceptedAmount;\r\n  }\r\n  \r\n  enum SaleStates {\r\n    InPrivateSale,\r\n    InPresale,\r\n    EndPresale,\r\n    InPublicSale,\r\n    EndPublicSale\r\n  }\r\n}\r\n\r\n// ================= Coinbet Token =======================\r\ncontract Coinbet is ERC20, Ownable {\r\n  \r\n  string public constant name = \"Coinbet\";\r\n  string public constant symbol = \"Z88\";\r\n  uint256 public constant decimals = 18;\r\n  // 200M token will be supplied\r\n  uint256 public constant INITIAL_SUPPLY = 200000000 * (10 ** decimals);\r\n\r\n  // 20M tokens allocated for founders and team\r\n  uint256 public constant FOUNDER_AND_TEAM_ALLOCATION = 20000000 * (10 ** decimals);\r\n  // 10M tokens allocated for advisors\r\n  uint256 public constant ADVISOR_ALLOCATION = 10000000 * (10 ** decimals);\r\n  // 5M tokens allocated for bounty & referral\r\n  uint256 public constant AIRDROP_ALLOCATION = 5000000 * (10 ** decimals);\r\n  // 30M tokens allocated for treasury\r\n  uint256 public constant TREASURY_ALLOCATION = 30000000 * (10 ** decimals);\r\n  // 10M tokens allocated for partner\r\n  uint256 public constant PARTNER_ALLOCATION = 10000000 * (10 ** decimals);\r\n\r\n  // 40M tokens allocated for pre sale\r\n  uint256 public constant PRIVATE_SALE_ALLOCATION = 40000000 * (10 ** decimals);\r\n  // 20M tokens allocated for private sale\r\n  uint256 public constant PRESALE_ALLOCATION = 20000000 * (10 ** decimals);\r\n  // 20M tokens allocated for public sale in 1st bracket\r\n  uint256 public constant PUBLIC_1_ALLOCATION = 20000000 * (10 ** decimals);\r\n  // 40M tokens allocated for public sale in 2nd bracket\r\n  uint256 public constant PUBLIC_2_ALLOCATION = 40000000 * (10 ** decimals);\r\n  // 1.5M tokens allocated for Lotto645 jackpot\r\n  uint256 public constant LOTTO645_JACKPOT_ALLOCATION = 1500000 * (10 ** decimals);\r\n  // 3M tokens allocated for Lotto655 jackpot 1\r\n  uint256 public constant LOTTO655_JACKPOT_1_ALLOCATION = 3000000 * (10 ** decimals);\r\n  // 0.5M tokens allocated for Lotto655 jackpot 2\r\n  uint256 public constant LOTTO655_JACKPOT_2_ALLOCATION = 500000 * (10 ** decimals);\r\n\r\n  // Admin role\r\n  address public admin;\r\n  // Address where funds are collected\r\n  address public fundWallet;\r\n  // Wallet is used for Bounty & Referral program\r\n  address public airdropWallet;\r\n  // Wallet for tokens keeping purpose, no sale\r\n  address public treasuryWallet;\r\n  // Wallet is used for Coinbet Partner Program\r\n  address public partnerWallet;\r\n  // Contract is used for rewarding development team\r\n  TeamWallet public teamWallet;\r\n  // Contract is used for rewarding advisor team\r\n  AdvisorWallet public advisorWallet;\r\n  // Wallet is used for paying Z88 Lotto 645's starting Jackpot\r\n  address public lotto645JackpotWallet;\r\n  // Wallet is used for paying Z88 Lotto 655's starting Jackpot 1\r\n  address public lotto655Jackpot1Wallet;\r\n  // Wallet is used for paying Z88 Lotto 655's starting Jackpot 2\r\n  address public lotto655Jackpot2Wallet;\r\n  \r\n  // Remain number of Z88 tokens for private sale\r\n  uint256 public privateSaleRemain;\r\n  // Info of presale bracket: total tokens, remain tokens, price\r\n  ICOData.Bracket public presaleBracket;\r\n  // Sale states: InPrivateSale, InPresale, EndPresale, InPublicSale, EndPublicSale\r\n  ICOData.SaleStates public saleState;\r\n  // The flag to specify the selling state\r\n  bool public isSelling;\r\n  // The start date for private sale\r\n  uint public sellingTime;\r\n  // The flag to specify the transferable state\r\n  bool public isTransferable;\r\n\r\n  // Info of 1st & 2nd public brackets: total tokens, remain tokens, price\r\n  ICOData.Bracket[2] public publicBrackets;  \r\n  // The index of current public bracket: 0 or 1\r\n  uint private currentPublicBracketIndex;\r\n\r\n  event PrivateSale(address to, uint256 tokenAmount); // Transfer token to investors in private sale\r\n  event PublicSale(address to, uint256 amount, uint256 tokenAmount); // Investors purchase token in public sale\r\n  event SetBracketPrice(uint bracketIndex, uint256 tokenPerEther); // Set bracket price in public sale  \r\n  event StartPublicSale(uint256 tokenPerEther); // start public sale with price\r\n  event EndPublicSale(); // end public sale\r\n  event SetPresalePrice(uint256 tokenPerEther); // Set price in presale\r\n  event PreSale(address to, uint256 amount, uint256 tokenAmount); // Investors purchase token in presale\r\n  event StartPrivateSale(uint startedTime); // start private sale\r\n  event StartPresale(uint256 tokenPerEther, uint startedTime); // start presale\r\n  event EndPresale(); // end presale\r\n  event ChangeBracketIndex(uint bracketIndex); // change to next bracket for sale  \r\n  event EnableTransfer(); // enable transfer token\r\n  event BurnTeamToken(address lockedWallet, address memberAddress, uint256 amount); // burn token allocated for dev team when they are inactivity\r\n\r\n  modifier transferable() {\r\n    require(isTransferable == true);\r\n    _;\r\n  }\r\n\r\n  modifier isInSale() {\r\n    require(isSelling == true);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdminOrOwner() {\r\n    require(msg.sender == admin || msg.sender == owner());\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _admin,\r\n    address _fundWallet,\r\n    address _airdropWallet,\r\n    address _treasuryWallet,\r\n    address _partnerWallet,\r\n    address _lotto645JackpotWallet,\r\n    address _lotto655Jackpot1Wallet,\r\n    address _lotto655Jackpot2Wallet,\r\n    address _approver1,\r\n    address _approver2,\r\n    uint _startPrivateSaleAfter\r\n  ) \r\n    public \r\n  { \r\n    require(_admin != address(0) && _admin != msg.sender);\r\n    require(_fundWallet != address(0) && _fundWallet != msg.sender);\r\n    require(_airdropWallet != address(0) && _airdropWallet != msg.sender );\r\n    require(_treasuryWallet != address(0) && _treasuryWallet != msg.sender );\r\n    require(_partnerWallet != address(0) && _partnerWallet != msg.sender );\r\n    require(_lotto645JackpotWallet != address(0) && _lotto645JackpotWallet != msg.sender );\r\n    require(_lotto655Jackpot1Wallet != address(0) && _lotto655Jackpot1Wallet != msg.sender );\r\n    require(_lotto655Jackpot2Wallet != address(0) && _lotto655Jackpot2Wallet != msg.sender );\r\n\r\n    admin = _admin;\r\n    fundWallet = _fundWallet;\r\n    airdropWallet = _airdropWallet;\r\n    treasuryWallet = _treasuryWallet;\r\n    partnerWallet = _partnerWallet;\r\n    lotto645JackpotWallet = _lotto645JackpotWallet;\r\n    lotto655Jackpot1Wallet = _lotto655Jackpot1Wallet;\r\n    lotto655Jackpot2Wallet = _lotto655Jackpot2Wallet;\r\n\r\n    saleState = ICOData.SaleStates.InPrivateSale;\r\n    sellingTime = now + _startPrivateSaleAfter * 1 seconds;\r\n\r\n    // create TeamWallet & AdvisorWallet\r\n    teamWallet = new TeamWallet(_approver1, _approver2);\r\n    advisorWallet = new AdvisorWallet();\r\n\r\n    emit StartPrivateSale(sellingTime);\r\n\t  initTokenAndBrackets();\r\n  }\r\n\r\n  function getSaleState() public view returns (ICOData.SaleStates state, uint time) {\r\n    return (saleState, sellingTime);\r\n  }\r\n\r\n  function () external payable isInSale {\r\n    require(fundWallet != address(0));    \r\n\r\n    if(saleState == ICOData.SaleStates.InPresale && now >= sellingTime ) {\r\n      return purchaseTokenInPresale();\r\n    } else if(saleState == ICOData.SaleStates.InPublicSale  && now >= sellingTime ) {\r\n      return purchaseTokenInPublicSale();\r\n    }\r\n    \r\n    revert();\r\n  }\r\n\r\n  function getCurrentPublicBracket()\r\n    public \r\n    view \r\n    returns (\r\n      uint256 bracketIndex, \r\n      uint256 total, \r\n      uint256 remainToken, \r\n      uint256 tokenPerEther,\r\n      uint256 minAcceptedAmount\r\n    ) \r\n  {\r\n    if(saleState == ICOData.SaleStates.InPublicSale) {\r\n      ICOData.Bracket memory bracket = publicBrackets[currentPublicBracketIndex];\r\n      return (currentPublicBracketIndex, bracket.total, bracket.remainToken, bracket.tokenPerEther, bracket.minAcceptedAmount);\r\n    } else {\r\n      return (0, 0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) \r\n    public\r\n    transferable \r\n    returns (bool success) \r\n  {\r\n    require(_to != address(0));\r\n    require(_value > 0);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) \r\n    public \r\n    transferable \r\n    returns (bool success) \r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n    require(_value > 0);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) \r\n    public \r\n    transferable \r\n    returns (bool success) \r\n  {\r\n    require(_spender != address(0));\r\n    require(_value > 0);\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function changeWalletAddress(address _newAddress) external onlyOwner {\r\n    require(_newAddress != address(0));\r\n    require(fundWallet != _newAddress);\r\n    fundWallet = _newAddress;\r\n  }\r\n\r\n  function changeAdminAddress(address _newAdmin) external onlyOwner {\r\n    require(_newAdmin != address(0));\r\n    require(admin != _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function enableTransfer() external onlyOwner {\r\n    require(isTransferable == false);\r\n    isTransferable = true;\r\n    emit EnableTransfer();\r\n  }\r\n  \r\n  function transferPrivateSale(address _to, uint256 _value) \r\n    external \r\n    onlyAdminOrOwner \r\n    returns (bool success) \r\n  {\r\n    require(saleState == ICOData.SaleStates.InPrivateSale);\r\n    require(_to != address(0));\r\n    require(_value > 0);\r\n    require(privateSaleRemain >= _value);\r\n\r\n    privateSaleRemain = privateSaleRemain.sub(_value);\r\n    _transfer(owner(), _to, _value);\r\n    emit PrivateSale(_to, _value);\r\n    return true;    \r\n  }\r\n  \r\n  function setPublicPrice(uint _bracketIndex, uint256 _tokenPerEther) \r\n    external \r\n    onlyAdminOrOwner \r\n    returns (bool success) \r\n  {\r\n    require(_tokenPerEther > 0);\r\n    require(publicBrackets.length > _bracketIndex && _bracketIndex >= currentPublicBracketIndex);\r\n\r\n    ICOData.Bracket storage bracket = publicBrackets[_bracketIndex];\r\n    require(bracket.tokenPerEther != _tokenPerEther);\r\n\r\n    bracket.tokenPerEther = _tokenPerEther;\r\n    emit SetBracketPrice(_bracketIndex, _tokenPerEther);\r\n    return true;\r\n  }\r\n\r\n  function setMinAcceptedInPublicSale(uint _bracketIndex, uint256 _minAcceptedAmount) \r\n    external \r\n    onlyAdminOrOwner \r\n    returns (bool success)\r\n  {\r\n    require(_minAcceptedAmount > 0);\r\n    require(publicBrackets.length > _bracketIndex && _bracketIndex >= currentPublicBracketIndex);\r\n\r\n    ICOData.Bracket storage bracket = publicBrackets[_bracketIndex];\r\n    require(bracket.minAcceptedAmount != _minAcceptedAmount);\r\n\r\n    bracket.minAcceptedAmount = _minAcceptedAmount;\r\n    return true;\r\n  }  \r\n\r\n  function changeToPublicSale() external onlyAdminOrOwner returns (bool success) {\r\n    require(saleState == ICOData.SaleStates.EndPresale);    \r\n    return startPublicSale();\r\n  }  \r\n\r\n  function setPresalePrice(uint256 _tokenPerEther) external onlyAdminOrOwner returns (bool) {\r\n    require(_tokenPerEther > 0);\r\n    require(presaleBracket.tokenPerEther != _tokenPerEther);\r\n\r\n    presaleBracket.tokenPerEther = _tokenPerEther;\r\n    emit SetPresalePrice(_tokenPerEther);\r\n    return true;\r\n  }\r\n\r\n  function startPresale(uint256 _tokenPerEther, uint _startAfter) \r\n    external \r\n    onlyAdminOrOwner \r\n    returns (bool) \r\n  {\r\n    require(saleState < ICOData.SaleStates.InPresale);\r\n    require(_tokenPerEther > 0);    \r\n    presaleBracket.tokenPerEther = _tokenPerEther;\r\n    isSelling = true;\r\n    saleState = ICOData.SaleStates.InPresale;\r\n    sellingTime = now + _startAfter * 1 seconds;\r\n    emit StartPresale(_tokenPerEther, sellingTime);\r\n    return true;\r\n  }\r\n\r\n  function setMinAcceptedAmountInPresale(uint256 _minAcceptedAmount) \r\n    external \r\n    onlyAdminOrOwner \r\n    returns (bool)\r\n  {\r\n    require(_minAcceptedAmount > 0);\r\n    require(presaleBracket.minAcceptedAmount != _minAcceptedAmount);\r\n\r\n    presaleBracket.minAcceptedAmount = _minAcceptedAmount;\r\n    return true;\r\n  }\r\n\r\n  function burnMemberToken(address _member) external onlyAdminOrOwner {        \r\n    require(teamWallet != address(0));\r\n    bool canBurn = teamWallet.canBurn(_member);\r\n    uint256 tokenRemain = teamWallet.getMemberTokenRemain(_member);\r\n    require(canBurn && tokenRemain > 0);    \r\n    \r\n    teamWallet.burnMemberToken(_member);\r\n\r\n    _burn(teamWallet, tokenRemain);\r\n    emit BurnTeamToken(teamWallet, _member, tokenRemain);\r\n  }\r\n\r\n  function initTokenAndBrackets() private {\r\n    _mint(owner(), INITIAL_SUPPLY);\r\n\r\n    // allocate token for bounty, referral, treasury, partner\r\n    super.transfer(airdropWallet, AIRDROP_ALLOCATION);\r\n    super.transfer(treasuryWallet, TREASURY_ALLOCATION);\r\n    super.transfer(partnerWallet, PARTNER_ALLOCATION);\r\n\r\n    // allocate token for private sale\r\n    privateSaleRemain = PRIVATE_SALE_ALLOCATION;\r\n\r\n    // allocate token for presale\r\n    uint256 minAcceptedAmountInPresale = 1 ether; // 1 ether for mininum ether acception in presale\r\n    presaleBracket = ICOData.Bracket(PRESALE_ALLOCATION, PRESALE_ALLOCATION, 0, minAcceptedAmountInPresale);\r\n    \r\n    // bracket token allocation for public sale\r\n    uint256 minAcceptedAmountInBracket1 = 0.5 * (1 ether); // 0.5 ether for mininum ether acception in bracket 1\r\n    publicBrackets[0] = ICOData.Bracket(PUBLIC_1_ALLOCATION, PUBLIC_1_ALLOCATION, 0, minAcceptedAmountInBracket1);\r\n\r\n    uint256 minAcceptedAmountInBracket2 = 0.1 * (1 ether); // 0.1 ether for mininum ether acception in bracket 2\r\n    publicBrackets[1] = ICOData.Bracket(PUBLIC_2_ALLOCATION, PUBLIC_2_ALLOCATION, 0, minAcceptedAmountInBracket2);    \r\n\r\n    // allocate token for Z88 Lotto Jackpot\r\n    super.transfer(lotto645JackpotWallet, LOTTO645_JACKPOT_ALLOCATION);\r\n    super.transfer(lotto655Jackpot1Wallet, LOTTO655_JACKPOT_1_ALLOCATION);\r\n    super.transfer(lotto655Jackpot2Wallet, LOTTO655_JACKPOT_2_ALLOCATION);\r\n\r\n    // allocate token for Team Wallet\r\n    super.transfer(teamWallet, FOUNDER_AND_TEAM_ALLOCATION);\r\n    // allocate token to Advisor Wallet\r\n    super.transfer(advisorWallet, ADVISOR_ALLOCATION);\r\n    advisorWallet.allocateTokenForAdvisor();\r\n  }\r\n\r\n  function purchaseTokenInPresale() private {\r\n    require(msg.value >= presaleBracket.minAcceptedAmount);\r\n    require(presaleBracket.tokenPerEther > 0 && presaleBracket.remainToken > 0);\r\n\r\n    uint256 tokenPerEther = presaleBracket.tokenPerEther.mul(10 ** decimals);\r\n    uint256 tokenAmount = msg.value.mul(tokenPerEther).div(1 ether);    \r\n\r\n    uint256 refundAmount = 0;\r\n    if(tokenAmount > presaleBracket.remainToken) {\r\n      refundAmount = tokenAmount.sub(presaleBracket.remainToken).mul(1 ether).div(tokenPerEther);\r\n      tokenAmount = presaleBracket.remainToken;\r\n    }\r\n\r\n    presaleBracket.remainToken = presaleBracket.remainToken.sub(tokenAmount);\r\n    _transfer(owner(), msg.sender, tokenAmount);\r\n\r\n    uint256 paymentAmount = msg.value.sub(refundAmount);\r\n    fundWallet.transfer(paymentAmount);\r\n    if(refundAmount > 0)      \r\n      msg.sender.transfer(refundAmount);\r\n\r\n    emit PreSale(msg.sender, paymentAmount, tokenAmount);\r\n\r\n    if(presaleBracket.remainToken == 0) {\r\n      endPresale();\r\n    }    \r\n  }\r\n\r\n  function endPresale() private {    \r\n    isSelling = false;\r\n    saleState = ICOData.SaleStates.EndPresale;\r\n    emit EndPresale();\r\n    startPublicSale();\r\n  }\r\n\r\n  function startPublicSale() private returns (bool success) {    \r\n    ICOData.Bracket memory bracket = publicBrackets[currentPublicBracketIndex];\r\n    if(bracket.tokenPerEther == 0) return false;    \r\n    isSelling = true;\r\n    saleState = ICOData.SaleStates.InPublicSale;\r\n    emit StartPublicSale(bracket.tokenPerEther);\r\n    return true;\r\n  }\r\n\r\n  function purchaseTokenInPublicSale() private {\r\n    ICOData.Bracket storage bracket = publicBrackets[currentPublicBracketIndex];\r\n    require(msg.value >= bracket.minAcceptedAmount);\r\n    require(bracket.tokenPerEther > 0 && bracket.remainToken > 0);\r\n\r\n    uint256 tokenPerEther = bracket.tokenPerEther.mul(10 ** decimals);\r\n    uint256 remainToken = bracket.remainToken;\r\n    uint256 tokenAmount = msg.value.mul(tokenPerEther).div(1 ether);\r\n    uint256 refundAmount = 0;\r\n\r\n    // check remain token when end bracket\r\n    if(remainToken < tokenAmount) {      \r\n      refundAmount = tokenAmount.sub(remainToken).mul(1 ether).div(tokenPerEther);\r\n      tokenAmount = remainToken;\r\n    }\r\n\r\n    bracket.remainToken = bracket.remainToken.sub(tokenAmount);\r\n    _transfer(owner(), msg.sender, tokenAmount);\r\n\r\n    uint256 paymentAmount = msg.value.sub(refundAmount);\r\n    fundWallet.transfer(paymentAmount);\r\n    if(refundAmount > 0)      \r\n      msg.sender.transfer(refundAmount);\r\n    \r\n    emit PublicSale(msg.sender, paymentAmount, tokenAmount);\r\n\r\n    // end current bracket and move to next bracket\r\n    if(bracket.remainToken == 0) {      \r\n      nextBracket();\r\n    }\r\n  }\r\n\r\n  function nextBracket() private {\r\n    // last bracket - end public sale\r\n    if(currentPublicBracketIndex == publicBrackets.length - 1) {\r\n      isSelling = false;\r\n      saleState = ICOData.SaleStates.EndPublicSale;\r\n      isTransferable = true;\r\n      emit EnableTransfer();\r\n      emit EndPublicSale();\r\n    }        \r\n    else {\r\n      currentPublicBracketIndex = currentPublicBracketIndex + 1;\r\n      emit ChangeBracketIndex(currentPublicBracketIndex);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lotto645JackpotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_1_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleBracket\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"remainToken\",\"type\":\"uint256\"},{\"name\":\"tokenPerEther\",\"type\":\"uint256\"},{\"name\":\"minAcceptedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_2_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleState\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bracketIndex\",\"type\":\"uint256\"},{\"name\":\"_minAcceptedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAcceptedInPublicSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPublicBracket\",\"outputs\":[{\"name\":\"bracketIndex\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"remainToken\",\"type\":\"uint256\"},{\"name\":\"tokenPerEther\",\"type\":\"uint256\"},{\"name\":\"minAcceptedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotto655Jackpot1Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTO655_JACKPOT_2_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPrivateSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISOR_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"burnMemberToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPerEther\",\"type\":\"uint256\"},{\"name\":\"_startAfter\",\"type\":\"uint256\"}],\"name\":\"startPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeToPublicSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATE_SALE_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bracketIndex\",\"type\":\"uint256\"},{\"name\":\"_tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"setPublicPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TREASURY_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAcceptedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAcceptedAmountInPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTO645_JACKPOT_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotto655Jackpot2Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTO655_JACKPOT_1_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDER_AND_TEAM_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicBrackets\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"remainToken\",\"type\":\"uint256\"},{\"name\":\"tokenPerEther\",\"type\":\"uint256\"},{\"name\":\"minAcceptedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_fundWallet\",\"type\":\"address\"},{\"name\":\"_airdropWallet\",\"type\":\"address\"},{\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"name\":\"_partnerWallet\",\"type\":\"address\"},{\"name\":\"_lotto645JackpotWallet\",\"type\":\"address\"},{\"name\":\"_lotto655Jackpot1Wallet\",\"type\":\"address\"},{\"name\":\"_lotto655Jackpot2Wallet\",\"type\":\"address\"},{\"name\":\"_approver1\",\"type\":\"address\"},{\"name\":\"_approver2\",\"type\":\"address\"},{\"name\":\"_startPrivateSaleAfter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PrivateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bracketIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"SetBracketPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"StartPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"SetPresalePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PreSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startedTime\",\"type\":\"uint256\"}],\"name\":\"StartPrivateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPerEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startedTime\",\"type\":\"uint256\"}],\"name\":\"StartPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bracketIndex\",\"type\":\"uint256\"}],\"name\":\"ChangeBracketIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnTeamToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Coinbet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0dc24aa838946d39d3d76f0f776be6d26cb7b2b0000000000000000000000003f9c71aa3da273f3e63a6c92c5f5f957db2c6a2a00000000000000000000000074f10727c96c9f026259f38f3ae5ce27cccb1412000000000000000000000000955b34dc8631509ed558eaf09b7fd4cd9c33e127000000000000000000000000b9f5a6d53cd65f2322737dd9a7cdbb023096167000000000000000000000000080e2e95315ecba6145edfb730705a2a3534a423e0000000000000000000000008383abf71884c127c69f3839a9267bfd4d6baca90000000000000000000000003ad5a1c6fcbcb4a5167e6e6d160f2e6213df63a4000000000000000000000000a0dc24aa838946d39d3d76f0f776be6d26cb7b2b000000000000000000000000f0219788842a23e971072cc16420b67c3a68d9cb0000000000000000000000000000000000000000000000000000000000156e40","Library":"","SwarmSource":"bzzr://be84778666eb9c67a0d3220fc1027a1b8b1c438632b21ee272443990878a3653"}]}