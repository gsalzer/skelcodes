{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary itMaps {\r\n\r\n    /* itMapAddressUint\r\n\r\n    address => Uint\r\n\r\n    */\r\n\r\n    struct entryAddressUint {\r\n\r\n    // Equal to the index of the key of this item in keys, plus 1.\r\n\r\n    uint keyIndex;\r\n\r\n    uint value;\r\n\r\n    }\r\n\r\n    struct itMapAddressUint {\r\n\r\n    mapping(address => entryAddressUint) data;\r\n\r\n    address[] keys;\r\n\r\n    }\r\n\r\n    function insert(itMapAddressUint storage self, address key, uint value) internal returns (bool replaced) {\r\n\r\n        entryAddressUint storage e = self.data[key];\r\n\r\n        e.value = value;\r\n\r\n        if (e.keyIndex > 0) {\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            e.keyIndex = ++self.keys.length;\r\n\r\n            self.keys[e.keyIndex - 1] = key;\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function remove(itMapAddressUint storage self, address key) internal returns (bool success) {\r\n\r\n        entryAddressUint storage e = self.data[key];\r\n\r\n        if (e.keyIndex == 0)\r\n\r\n        return false;\r\n\r\n        if (e.keyIndex <= self.keys.length) {\r\n\r\n            // Move an existing element into the vacated key slot.\r\n\r\n            self.data[self.keys[self.keys.length - 1]].keyIndex = e.keyIndex;\r\n\r\n            self.keys[e.keyIndex - 1] = self.keys[self.keys.length - 1];\r\n\r\n            self.keys.length -= 1;\r\n\r\n            delete self.data[key];\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function destroy(itMapAddressUint storage self) internal {\r\n\r\n        for (uint i; i<self.keys.length; i++) {\r\n\r\n            delete self.data[ self.keys[i]];\r\n\r\n        }\r\n\r\n        delete self.keys;\r\n\r\n        return ;\r\n    }\r\n\r\n    function contains(itMapAddressUint storage self, address key) internal constant returns (bool exists) {\r\n        return self.data[key].keyIndex > 0;\r\n    }\r\n\r\n    function size(itMapAddressUint storage self) internal constant returns (uint) {\r\n\r\n        return self.keys.length;\r\n\r\n    }\r\n\r\n    function get(itMapAddressUint storage self, address key) internal constant returns (uint) {\r\n        return self.data[key].value;\r\n    }\r\n\r\n    function getKeyByIndex(itMapAddressUint storage self, uint idx) internal constant returns (address) {\r\n        return self.keys[idx];\r\n    }\r\n\r\n    function getValueByIndex(itMapAddressUint storage self, uint idx) internal constant returns (uint) {\r\n        return self.data[self.keys[idx]].value;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address who) public constant returns (uint value);\r\n    function allowance(address owner, address spender) public constant returns (uint permited);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n    function approve(address spender, uint value) public returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract HyipProfit is ERC20{\r\n    using itMaps for itMaps.itMapAddressUint;\r\n\r\n    string public constant name = \"HYIP Profit\";\r\n    string public constant symbol = \"HYIP\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    uint256 initialSupply = 4500000;\r\n\r\n    uint256 constant preSaleSoftCap = 312500;\r\n\r\n    uint256 public preSaleFund = 0;\r\n    uint256 public spentFunds = 0;\r\n    uint256 public IcoFund = 0;\r\n\r\n    uint public soldTokens = 0; //reduces when somebody returns money\r\n\r\n    itMaps.itMapAddressUint tokenBalances; //amount of tokens each address holds\r\n    mapping (address => uint256) preSaleWeiBalances;\r\n    mapping (address => uint256) weiBalances; //amount of Wei, paid for tokens that smb holds. Used only before project completed.\r\n    mapping (address => uint256) dividends;\r\n    mapping (address => uint256) lastWithdraw;\r\n\r\n    uint public currentStage = 0;\r\n\r\n    bool public isICOfinalized = false;\r\n\r\n    address public HyipProfitTokenTeamAddress;\r\n    address public dividendsPoolAddress = 0x0;\r\n    addressGetter ag;\r\n\r\n    modifier onlyTeam {\r\n        if (msg.sender == HyipProfitTokenTeamAddress) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (uint => address) teamAddresses;\r\n\r\n    event StageSubmittedAndEtherPassedToTheTeam(uint stage, uint when, uint weiAmount);\r\n    event etherWithdrawFromTheContract(address tokenHolder, uint numberOfTokensSoldBack, uint weiValue);\r\n    event Burned(address indexed from, uint amount);\r\n    event DividendsTransfered(address to, uint weiAmount);\r\n\r\n    // ERC20 interface implementation\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return initialSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenHolder) public view returns (uint256 balance) {\r\n        return tokenBalances.get(tokenHolder);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint value) public returns (bool success) {\r\n        if (tokenBalances.get(msg.sender) >= value && value > 0) {\r\n            if (to == address(this)) { // if you send even 1 token back to the contract, it will return all available funds to you\r\n                returnAllAvailableFunds();\r\n                return true;\r\n            }\r\n            else {\r\n                return transferTokensAndEtherValue(msg.sender, to, value, getHoldersAverageTokenPrice(msg.sender) * value, getUsersPreSalePercentage(msg.sender));\r\n            }\r\n        } else return false;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        if (tokenBalances.get(from)>=value && allowed[from][to] >= value && value > 0) {\r\n            if (transferTokensAndEtherValue(from, to, value, getHoldersAverageTokenPrice(from) * value, getUsersPreSalePercentage(from))){\r\n                allowed[from][to] -= value;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address spender, uint value) public returns (bool success) {\r\n        if ((value != 0) && (tokenBalances.get(msg.sender) >= value)){\r\n            allowed[msg.sender][spender] = value;\r\n            emit Approval (msg.sender, spender, value);\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Constructor, fallback, return funds\r\n\r\n    constructor () public {\r\n        HyipProfitTokenTeamAddress = msg.sender;\r\n        tokenBalances.insert(address(this), initialSupply);\r\n        teamAddresses[0] = HyipProfitTokenTeamAddress;\r\n        teamAddresses[1] = HyipProfitTokenTeamAddress;\r\n        teamAddresses[2] = 0x1F16BE21574FA46846fCfeae5ef587c29200f93e;\r\n        teamAddresses[3] = HyipProfitTokenTeamAddress;\r\n        teamAddresses[4] = 0x71bAfdD5bd44D3e1038fE4c0Bc486fb4BB67b806;\r\n    }\r\n\r\n    function () public payable {\r\n        require (!isICOfinalized);\r\n        uint currentPrice = getCurrentSellPrice();\r\n        uint valueInWei = 0;\r\n        uint tokensToPass = 0;\r\n        uint preSalePercent = 0;\r\n\r\n        require (msg.value >= currentPrice);\r\n\r\n        if (!tokenBalances.contains(msg.sender))\r\n        tokenBalances.insert(msg.sender, 0);\r\n\r\n        tokensToPass = msg.value / currentPrice;\r\n\r\n        require (tokenBalances.get(address(this))>= tokensToPass);\r\n\r\n        valueInWei = tokensToPass * currentPrice;\r\n        soldTokens += tokensToPass;\r\n\r\n        if (currentStage == 0) {\r\n            preSaleWeiBalances [address(this)] += valueInWei;\r\n            preSalePercent = 100;\r\n            preSaleFund += msg.value;\r\n        }\r\n        else {\r\n            weiBalances[address(this)] += valueInWei;\r\n            preSalePercent = 0;\r\n            IcoFund += msg.value;\r\n        }\r\n\r\n        transferTokensAndEtherValue(address(this), msg.sender, tokensToPass, valueInWei, preSalePercent);\r\n    }\r\n\r\n    function returnAllAvailableFunds() public {\r\n        require (tokenBalances.contains(msg.sender)); //you need to be a tokenHolder\r\n        require (!isICOfinalized); //you can not return tokens after project is completed\r\n\r\n        uint preSaleWei = getPreSaleWeiToReturn(msg.sender);\r\n        uint IcoWei = getIcoWeiToReturn(msg.sender);\r\n        uint weiToReturn = preSaleWei + IcoWei;\r\n\r\n        uint amountOfTokensToReturn = tokenBalances.get(msg.sender);\r\n\r\n        require (amountOfTokensToReturn>0);\r\n\r\n        uint preSalePercentage = getUsersPreSalePercentage(msg.sender);\r\n\r\n        transferTokensAndEtherValue(msg.sender, address(this), amountOfTokensToReturn, weiToReturn, preSalePercentage);\r\n        emit etherWithdrawFromTheContract(msg.sender, amountOfTokensToReturn, IcoWei + preSaleWei);\r\n        preSaleWeiBalances[address(this)] -= preSaleWei;\r\n        weiBalances[address(this)] -= IcoWei;\r\n        soldTokens -= amountOfTokensToReturn;\r\n        msg.sender.transfer(weiToReturn);\r\n\r\n        preSaleFund -= preSaleWei;\r\n        IcoFund -= IcoWei;\r\n    }\r\n\r\n    // View functions\r\n\r\n    function getWeiBalance(address a) public view returns (uint) {\r\n        return weiBalances[a];\r\n    }\r\n\r\n    function getPreSaleFund() public view returns (uint fund) {\r\n        return preSaleFund;\r\n    }\r\n\r\n    function getIcoFund() public view returns (uint fund) {\r\n        return IcoFund;\r\n    }\r\n\r\n    function getUsersPreSalePercentage(address a) public view returns (uint preSaleTokensPercent) {\r\n        return (100 * preSaleWeiBalances[a]) / (preSaleWeiBalances[a] + weiBalances[a]);\r\n    }\r\n\r\n    function getDividends(address a) public view returns (uint) {\r\n        return dividends[a];\r\n    }\r\n\r\n    function getTotalWeiAvailableToReturn(address a) public view returns (uint amount) {\r\n        return getPreSaleWeiToReturn(a) + getIcoWeiToReturn(a);\r\n    }\r\n\r\n    function getPreSaleWeiToReturn (address holder) public view returns (uint amount) {\r\n        if (currentStage == 0) return preSaleWeiBalances[holder];\r\n        if (currentStage == 1) return preSaleWeiBalances[holder] * 70 / 100;\r\n        if (currentStage == 2) return preSaleWeiBalances[holder] * 40 / 100;\r\n        return 0;\r\n    }\r\n\r\n    function getIcoWeiToReturn (address holder) public view returns (uint amount) {\r\n        if (currentStage <= 3) return weiBalances[holder];\r\n        if (currentStage == 4) return weiBalances[holder] * 70 / 100;\r\n        if (currentStage == 5) return weiBalances[holder] * 40 / 100;\r\n        return 0;\r\n    }\r\n\r\n    function getHoldersAverageTokenPrice(address holder) public view returns (uint avPriceInWei) {\r\n        return (weiBalances[holder] + preSaleWeiBalances[holder])/ tokenBalances.get(holder);\r\n    }\r\n\r\n    function getCurrentSellPrice() public view returns (uint priceInWei) {\r\n        if (currentStage == 0) return 10**14 * 8 ; //this is equal to 0.0008 ETH\r\n\r\n        if (currentStage == 1) return 10**14 * 16;\r\n        if (currentStage == 2) return 10**14 * 24;\r\n        if (currentStage == 3) return 10**14 * 32;\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getCurrentStage() public view returns (uint stage) {\r\n        return currentStage;\r\n    }\r\n\r\n    function getAvailableFundsForTheTeam() public view returns (uint amount) {\r\n        if (currentStage == 1) return preSaleFund * 3 / 10;\r\n        if (currentStage == 2) return (preSaleFund  - spentFunds) / 2;\r\n        if (currentStage == 3) return preSaleFund - spentFunds;\r\n\r\n        if (currentStage == 4) return IcoFund * 3 / 10;\r\n        if (currentStage == 5) return (IcoFund   - spentFunds) / 2;\r\n        if (currentStage == 6) return address(this).balance;\r\n    }\r\n\r\n    // Team functions\r\n    function setDividendsPoolAddressOnce(address a) public onlyTeam {\r\n        if (dividendsPoolAddress == 0x0) {\r\n            dividendsPoolAddress = a;\r\n            ag = addressGetter(a);\r\n        }\r\n    }\r\n\r\n    function finalizeICO() internal onlyTeam {\r\n        require(!isICOfinalized); // this function can be called only once\r\n        passTokensToTheTeam();\r\n        burnUndistributedTokens(); // undistributed tokens are destroyed\r\n        isICOfinalized = true;\r\n    }\r\n\r\n    function passTokensToTheTeam() internal returns (uint tokenAmount) { //This function passes tokens to the team without weiValue, so the team can not withdraw ether by returning tokens to the contract\r\n        uint tokensToPass = soldTokens / 4;\r\n        uint tokensForEachMember = tokensToPass / 5;\r\n\r\n        for (uint i = 0; i< 5; i += 1) {\r\n            address teamMember = teamAddresses[i];\r\n            if (!tokenBalances.contains(teamMember))\r\n                tokenBalances.insert(teamMember, tokensForEachMember);\r\n            else (tokenBalances.insert(teamMember, tokenBalances.get(teamMember) + tokensForEachMember));\r\n            emit Transfer(address(this), teamMember, tokensForEachMember);\r\n        }\r\n\r\n        soldTokens += tokensToPass;\r\n        return tokensToPass;\r\n    }\r\n\r\n    function checkIfMissionCompleted() public view returns (bool success) {\r\n        if (currentStage == 0 && soldTokens >= preSaleSoftCap) return true;\r\n\r\n        if (currentStage == 1 && (preSaleFund*3/10)*2 <= IcoFund) return true;\r\n        if (currentStage == 2 && (preSaleFund*6/10)*2 <= IcoFund) return true;\r\n\r\n        if (currentStage>=3 &&\r\n        (dividendsPoolAddress == 0x0 ||\r\n        ag.getDividendsTokenAddress() != address(this))) return false;\r\n\r\n        if (currentStage == 3 && preSaleFund*2 <= IcoFund) return true;\r\n\r\n        if (currentStage == 4 && dividendsPoolAddress.balance >= (IcoFund * 3/10)*2 ) return true;\r\n        if (currentStage == 5 && dividendsPoolAddress.balance >= (IcoFund * 6/10)*2 ) return true;\r\n        if (currentStage == 6 && dividendsPoolAddress.balance >= (IcoFund)*2 ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    function submitNextStage() public onlyTeam returns (bool success) {\r\n        if (!checkIfMissionCompleted()) return false;\r\n        if (currentStage==3) spentFunds = 0;\r\n        if (currentStage == 6) finalizeICO();\r\n\r\n        currentStage += 1;\r\n        passEtherToTheTeam();\r\n\r\n        return true;\r\n    }\r\n\r\n    function passEtherToTheTeam() internal returns (bool success) {\r\n        uint weiAmount = getAvailableFundsForTheTeam();\r\n        HyipProfitTokenTeamAddress.transfer(weiAmount);\r\n        spentFunds += weiAmount;\r\n        emit StageSubmittedAndEtherPassedToTheTeam(currentStage, now, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferTokensAndEtherValue(address from, address to, uint value, uint weiValue, uint preSalePercent) internal returns (bool success){\r\n        if (tokenBalances.contains(from) && tokenBalances.get(from) >= value) {\r\n            tokenBalances.insert(to, tokenBalances.get(to) + value);\r\n            tokenBalances.insert(from, tokenBalances.get(from) - value);\r\n\r\n            if (tokenBalances.get(from) == 0)\r\n                tokenBalances.remove(from);\r\n\r\n            if (!isICOfinalized) {\r\n                preSaleWeiBalances[from] -= weiValue * preSalePercent / 100;\r\n                preSaleWeiBalances[to] += weiValue * preSalePercent / 100;\r\n\r\n                weiBalances[from] -= weiValue * (100 - preSalePercent) / 100;\r\n                weiBalances[to] += weiValue * (100 - preSalePercent) / 100;\r\n            }\r\n\r\n            lastWithdraw[to] = now;\r\n\r\n            emit Transfer(from, to, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function burnUndistributedTokens() internal {\r\n        uint toBurn = initialSupply - soldTokens;\r\n        initialSupply -=  toBurn;\r\n        tokenBalances.insert(address(this), 0);\r\n        emit Burned(address(this), toBurn);\r\n    }\r\n}\r\n\r\ncontract addressGetter {\r\n    function getDividendsTokenAddress() public constant returns (address);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnAllAvailableFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setDividendsPoolAddressOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoFund\",\"outputs\":[{\"name\":\"fund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getUsersPreSalePercentage\",\"outputs\":[{\"name\":\"preSaleTokensPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getTotalWeiAvailableToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getPreSaleWeiToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitNextStage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleFund\",\"outputs\":[{\"name\":\"fund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getWeiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableFundsForTheTeam\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSellPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOfinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HyipProfitTokenTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getIcoWeiToReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkIfMissionCompleted\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getHoldersAverageTokenPrice\",\"outputs\":[{\"name\":\"avPriceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"StageSubmittedAndEtherPassedToTheTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberOfTokensSoldBack\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"etherWithdrawFromTheContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HyipProfit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4421b1a6fcb65a9e14cd11dbbb6bc55cca1251a5e6683da31dd373a9dc9d277"}]}