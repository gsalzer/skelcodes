{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns(uint);\r\n\r\n\tfunction balanceOf(address tokenOwner) public constant returns(uint balance);\r\n\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns(uint remaining);\r\n\r\n\tfunction transfer(address to, uint tokens) public returns(bool success);\r\n\r\n\tfunction approve(address spender, uint tokens) public returns(bool success);\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n\tfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 管理员\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner);\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 核心类\r\n// ----------------------------------------------------------------------------\r\ncontract Oasis is ERC20Interface, Owned {\r\n\tstring public symbol;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tuint _totalSupply;\r\n\t\r\n\t//address public owner;\r\n\tbool public actived;\r\n\tstruct keyconf{\r\n\t    uint basekeynum;//4500\r\n    \tuint basekeysub;//500\r\n    \tuint usedkeynum;//0\r\n        uint startprice;//0.01\r\n        uint keyprice;//0.01\r\n        uint startbasekeynum;//4500\r\n        uint[] keyidarr;\r\n    \tuint currentkeyid;\r\n\t}\r\n\tkeyconf private keyconfig;\r\n\tuint[] public worksdata;\r\n\t\r\n\tuint public onceOuttime;\r\n\tuint8 public per;\r\n\t\r\n\t\r\n\tuint[] public mans;\r\n\tuint[] public pers;\r\n\tuint[] public prizeper;\r\n\tuint[] public prizelevelsuns;\r\n\tuint[] public prizelevelmans;\r\n\tuint[] public prizelevelsunsday;\r\n\tuint[] public prizelevelmoneyday;\r\n\tuint[] public prizeactivetime;\r\n\t\r\n\taddress[] public mansdata;\r\n\tuint[] public moneydata;\r\n\tuint[] public timedata;\r\n\tuint public pubper;\r\n\tuint public subper;\r\n\tuint public luckyper;\r\n\tuint public lastmoney;\r\n\tuint public lastper;\r\n\tuint public lasttime;\r\n\tuint public sellkeyper;\r\n\t\r\n\t//bool public isend;\r\n\tuint public tags;\r\n\t//uint public opentime;\r\n\t\r\n\tuint public runper;\r\n\tuint public sellper;\r\n\tuint public sellupper;\r\n\tuint public sysday;\r\n\tuint public cksysday;\r\n\t//uint public nulldayeth;\r\n    mapping(uint => mapping(uint => uint)) allprize;\r\n\t//uint public allprizeused;\r\n\tmapping(address => uint) balances;\r\n\t\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\tmapping(address => bool) public frozenAccount;\r\n\tstruct usercan{\r\n\t    uint eths;\r\n\t    uint used;\r\n\t    uint len;\r\n\t    uint[] times;\r\n\t    uint[] moneys;\r\n\t    uint[] amounts;\r\n\t}\r\n\tmapping(address => usercan) mycan;\r\n\tmapping(address => usercan) myrun;\r\n\tstruct userdata{\r\n\t    uint systemtag;\r\n\t    uint tzs;\r\n\t    uint usereths;\r\n\t    uint userethsused;\r\n\t    uint mylevelid;\r\n\t    uint mykeysid;\r\n\t    uint mykeyeths;\r\n\t    uint prizecount;\r\n\t    address fromaddr;\r\n\t    uint sun1;\r\n\t    uint sun2;\r\n\t    uint sun3;\r\n\t    mapping(uint => uint) mysunsdaynum;\r\n\t    mapping(uint => uint) myprizedayget;\r\n\t    mapping(uint => uint) daysusereths;\r\n\t    mapping(uint => uint) daysuserdraws;\r\n\t    mapping(uint => uint) daysuserlucky;\r\n\t    mapping(uint => uint) levelget;\r\n\t    mapping(uint => bool) hascountprice;\r\n\t}\r\n\tmapping(address => userdata) my;\r\n\tuint[] public leveldata;\r\n\tmapping(uint => mapping(uint => uint)) public userlevelsnum;\r\n\r\n\t//与用户钥匙id对应\r\n\tmapping(uint => address) public myidkeys;\r\n\t//all once day get all\r\n\tmapping(uint => uint) public daysgeteths;\r\n\tmapping(uint => uint) public dayseths;\r\n\t//user once day pay\r\n\tmapping(uint => uint) public daysysdraws;\r\n\tstruct tagsdata{\r\n\t    uint ethnum;//用户总资产\r\n\t    uint sysethnum;//系统总eth\r\n\t    uint userethnum;//用户总eth\r\n\t    uint userethnumused;//用户总eth\r\n\t    uint syskeynum;//系统总key\r\n\t}\r\n\tmapping(uint => tagsdata) tg;\r\n\tmapping(address => bool) mangeruser;\r\n\tmapping(address => uint) mangerallowed;\r\n\tstring private version;\r\n\tstring private downurl;\r\n\tstring private notices;\r\n\t/* 通知 */\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\tevent ethchange(address indexed from, address indexed to, uint tokens);\r\n\tmodifier onlySystemStart() {\r\n        require(actived == true);\r\n\t    require(tags == my[msg.sender].systemtag);\r\n\t    require(!frozenAccount[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\tconstructor() public {\r\n\t\tsymbol = \"OASIS\";\r\n\t\tname = \"Oasis\";\r\n\t\tdecimals = 18;\r\n\t\t_totalSupply = 50000000 ether;\r\n\t\r\n\t\tactived = true;\r\n\t\ttags = 0;\r\n\t\ttg[0] = tagsdata(0,0,0,0,0);\r\n\t\t\r\n        keyconfig.currentkeyid = 0;\r\n        keyconfig.keyidarr = [10055555,20055555,30055555,40055555,50055555,60055555,70055555,80055555,90055555];\r\n        worksdata = [0,0,0,0,0,0,0,0,0];   \r\n        runper = 10;\r\n\t\tmans = [2,4,6];\r\n\t\tpers = [50,30,20];\r\n\t\tprizeper = [2,2,2];\r\n\t\tprizeactivetime = [0,0,0];\r\n\t\tpubper = 2;\r\n\t\tsubper = 120;\r\n\t\tluckyper = 5;\r\n\t\tlastmoney = 0;\r\n\t\tlastper = 2;\r\n\t\tsellkeyper = 70;\r\n\t\tsellper = 10;\r\n\t\tsellupper = 50;\r\n\t\tleveldata = [0,0,0];\r\n\t\t\r\n        \r\n        onceOuttime = 24 hours;\r\n        keyconfig.basekeynum = 4500 ether;//4500\r\n\t    keyconfig.basekeysub = 2000 ether;//500\r\n\t    keyconfig.usedkeynum = 0;//0\r\n        keyconfig.startprice = 0.01 ether;//\r\n        keyconfig.keyprice   = 0.01 ether;//\r\n        keyconfig.startbasekeynum = 4500 ether;//4500\r\n        per = 10;  \r\n        prizelevelsuns = [20,30,50];\r\n\t\tprizelevelmans = [100,300,800];\r\n\t\tprizelevelsunsday = [1,3,5];\r\n\t\tprizelevelmoneyday = [9 ether,29 ether,49 ether];\r\n\t\tlasttime = 8 hours;\r\n\t\tsysday = 1 days;\r\n\t\tcksysday = 8 hours;\r\n        version = '1.01';\r\n\t\tbalances[this] = _totalSupply;\r\n\t\towner = msg.sender;\r\n\t\temit Transfer(address(0), this, _totalSupply);\r\n\t}\r\n\r\n\tfunction balanceOf(address tokenOwner) public view returns(uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\t\r\n\tfunction showlvzhou(address user) public view returns(\r\n\t    uint total,\r\n\t    uint mykeyid,\r\n\t    uint mytzs,\r\n\t    uint daysget,\r\n\t    uint prizeget,\r\n\t    uint mycans,\r\n\t    uint mykeynum,\r\n\t    uint keyprices,\r\n\t    uint ltkeynum,\r\n\t    uint tagss,\r\n\t    uint mytags\r\n\t    \r\n\t){\r\n\t    total = tg[tags].userethnum;//0\r\n\t    mykeyid = my[user].mykeysid;//1\r\n\t    mytzs = my[user].tzs;//2\r\n\t    daysget = my[user].usereths*per/1000;//3\r\n\t    prizeget = my[user].prizecount;//4\r\n\t    mycans = getcanuse(user);//5\r\n\t    mykeynum = balanceOf(user);//6\r\n\t    keyprices = getbuyprice();//7\r\n\t    ltkeynum = leftnum();//8\r\n\t    tagss = tagss;//9\r\n\t    mytags = my[user].systemtag;//10\r\n\t}\r\n\tfunction showteam(address user) public view returns(\r\n\t    uint daysnum,//0\r\n\t    uint dayseth,//1\r\n\t    uint daysnum1,//2\r\n\t    uint dayseth1,//3\r\n\t    uint man1,//4\r\n\t    uint man2,//5\r\n\t    uint man3,//6\r\n\t    uint myruns,//7\r\n\t    uint canruns,//8\r\n\t    uint levelid//9\r\n\t){\r\n\t    uint d = gettoday();\r\n\t    uint t = getyestoday();\r\n\t    daysnum = my[user].mysunsdaynum[d];//5\r\n\t    dayseth = my[user].myprizedayget[d];//6\r\n\t    daysnum1 = my[user].mysunsdaynum[t];//5\r\n\t    dayseth1 = my[user].myprizedayget[t];//6\r\n\t    man1 = my[user].sun1;//2\r\n\t    man2 = my[user].sun2;//3\r\n\t    man3 = my[user].sun3;//4\r\n\t    myruns = myrun[user].eths;//6\r\n\t    canruns = getcanuserun(user);//7\r\n\t    levelid = my[user].mylevelid;//8\r\n\t}\r\n\tfunction showlevel(address user) public view returns(\r\n\t    uint myget,//0\r\n\t    uint levelid,//1\r\n\t    uint len1,//2\r\n\t    uint len2,//3\r\n\t    uint len3,//4\r\n\t    uint m1,//5\r\n\t    uint m2,//6\r\n\t    uint m3,//7\r\n\t    uint t1,//8\r\n\t    uint t2,//9\r\n\t    uint t3,//10\r\n\t    uint levelget//11\r\n\t){\r\n\t    (levelid, myget) = getprizemoney(user);\r\n\t    //len2 = leveldata[1];\r\n\t    //len3 = leveldata[2];\r\n\t    m1 = allprize[0][0] - allprize[0][1];//5\r\n\t    m2 = allprize[1][0] - allprize[1][1];//6\r\n\t    m3 = allprize[2][0] - allprize[2][1];//7\r\n\t    t1 = prizeactivetime[0];//8\r\n\t    uint d = getyestoday();\r\n\t    if(t1 > 0) {\r\n\t        if(t1 + sysday > now){\r\n    \t        len1 = leveldata[0];\r\n    \t    }else{\r\n    \t        len1 = userlevelsnum[1][d];\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    t2 = prizeactivetime[1];//9\r\n\t    if(t2 > 0) {\r\n\t        if(t2 + sysday > now){\r\n    \t        len2 = leveldata[1];\r\n    \t    }else{\r\n    \t        len2 = userlevelsnum[2][d];\r\n    \t    }\r\n\t    }\r\n\t    \r\n\t    t3 = prizeactivetime[2];//10\r\n\t    if(t3 > 0) {\r\n\t        if(t3 + sysday > now){\r\n    \t        len3 = leveldata[2];\r\n    \t    }else{\r\n    \t        len3 = userlevelsnum[3][d];\r\n    \t    }\r\n\t    }\r\n\t    \r\n\t    levelget = my[user].levelget[d];//11\r\n\t}\r\n\t\r\n\t\r\n\tfunction showethconf(address user) public view returns(\r\n\t    uint todaymyeth,\r\n\t    uint todaymydraw,\r\n\t    uint todaysyseth,\r\n\t    uint todaysysdraw,\r\n\t    uint yestodaymyeth,\r\n\t    uint yestodaymydraw,\r\n\t    uint yestodaysyseth,\r\n\t    uint yestodaysysdraw\r\n\t){\r\n\t    uint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\ttodaymyeth = my[user].daysusereths[d];\r\n\t\ttodaymydraw = my[user].daysuserdraws[d];\r\n\t\ttodaysyseth = dayseths[d];\r\n\t\ttodaysysdraw = daysysdraws[d];\r\n\t\tyestodaymyeth = my[user].daysusereths[t];\r\n\t\tyestodaymydraw = my[user].daysuserdraws[t];\r\n\t\tyestodaysyseth = dayseths[t];\r\n\t\tyestodaysysdraw = daysysdraws[t];\r\n\t\t\r\n\t}\r\n\tfunction showprize(address user) public view returns(\r\n\t    uint lttime,//0\r\n\t    uint ltmoney,//1\r\n\t    address ltaddr,//2\r\n\t    uint lastmoneys,//3\r\n\t    address lastuser,//4\r\n\t    uint luckymoney,//5\r\n\t    address luckyuser,//6\r\n\t    uint luckyget//7\r\n\t){\r\n\t    if(timedata.length > 0) {\r\n\t       lttime = timedata[timedata.length - 1];//1 \r\n\t    }else{\r\n\t        lttime = 0;\r\n\t    }\r\n\t    if(moneydata.length > 0) {\r\n\t       ltmoney = moneydata[moneydata.length - 1];//2 \r\n\t    }else{\r\n\t        ltmoney = 0;\r\n\t    }\r\n\t    if(mansdata.length > 0) {\r\n\t        ltaddr = mansdata[mansdata.length - 1];//3\r\n\t    }else{\r\n\t        ltaddr = address(0);\r\n\t    }\r\n\t    lastmoneys = lastmoney;\r\n\t    lastuser = getlastuser();\r\n\t    uint d = getyestoday();\r\n\t    if(dayseths[d] > 0) {\r\n\t        luckymoney = dayseths[d]*luckyper/1000;\r\n\t        luckyuser = getluckyuser();\r\n\t        luckyget = my[user].daysuserlucky[d];\r\n\t    }\r\n\t    \r\n\t}\r\n\tfunction interuser(address user) public view returns(\r\n\t    uint skeyid,\r\n\t    uint stzs,\r\n\t    uint seths,\r\n\t    uint sethcan,\r\n\t    uint sruns,\r\n\t    uint srunscan,\r\n\t    uint skeynum\r\n\t    \r\n\t){\r\n\t    skeyid = my[user].mykeysid;\r\n\t    stzs = my[user].tzs;\r\n\t    seths = mycan[user].eths;\r\n\t    sethcan = getcanuse(user);\r\n\t    sruns = myrun[user].eths;\r\n\t    srunscan = getcanuserun(user);\r\n\t    skeynum = balances[user];\r\n\t}\r\n\tfunction showworker() public view returns(\r\n\t    uint w0,\r\n\t    uint w1,\r\n\t    uint w2,\r\n\t    uint w3,\r\n\t    uint w4,\r\n\t    uint w5,\r\n\t    uint w6,\r\n\t    uint w7,\r\n\t    uint w8\r\n\t){\r\n\t    w0 = worksdata[0];\r\n\t    w1 = worksdata[1];\r\n\t    w2 = worksdata[2];\r\n\t    w3 = worksdata[3];\r\n\t    w4 = worksdata[4];\r\n\t    w5 = worksdata[5];\r\n\t    w6 = worksdata[6];\r\n\t    w7 = worksdata[7];\r\n\t    w8 = worksdata[8];\r\n\t}\r\n\t\r\n\tfunction addmoney(address _addr, uint256 _amount, uint256 _money, uint _day) private returns(bool){\r\n\t\tmycan[_addr].eths += _money;\r\n\t\tmycan[_addr].len++;\r\n\t\tmycan[_addr].amounts.push(_amount);\r\n\t\tmycan[_addr].moneys.push(_money);\r\n\t\tif(_day > 0){\r\n\t\t    mycan[_addr].times.push(0);\r\n\t\t}else{\r\n\t\t    mycan[_addr].times.push(now);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tfunction reducemoney(address _addr, uint256 _money) private returns(bool){\r\n\t    if(mycan[_addr].eths >= _money && my[_addr].tzs >= _money) {\r\n\t        mycan[_addr].used += _money;\r\n    \t\tmycan[_addr].eths -= _money;\r\n    \t\tmy[_addr].tzs -= _money;\r\n    \t\treturn(true);\r\n\t    }else{\r\n\t        return(false);\r\n\t    }\r\n\t\t\r\n\t}\r\n\tfunction addrunmoney(address _addr, uint256 _amount, uint256 _money, uint _day) private {\r\n\t\tmyrun[_addr].eths += _money;\r\n\t\tmyrun[_addr].len++;\r\n\t\tmyrun[_addr].amounts.push(_amount);\r\n\t\tmyrun[_addr].moneys.push(_money);\r\n\t\tif(_day > 0){\r\n\t\t    myrun[_addr].times.push(0);\r\n\t\t}else{\r\n\t\t    myrun[_addr].times.push(now);\r\n\t\t}\r\n\t}\r\n\tfunction reducerunmoney(address _addr, uint256 _money) private {\r\n\t\tmyrun[_addr].eths -= _money;\r\n\t\tmyrun[_addr].used += _money;\r\n\t}\r\n\r\n\tfunction getcanuse(address user) public view returns(uint _left) {\r\n\t\tif(mycan[user].len > 0) {\r\n\t\t    for(uint i = 0; i < mycan[user].len; i++) {\r\n    \t\t\tuint stime = mycan[user].times[i];\r\n    \t\t\tif(stime == 0) {\r\n    \t\t\t    _left += mycan[user].moneys[i];\r\n    \t\t\t}else{\r\n    \t\t\t    if(now - stime >= onceOuttime) {\r\n    \t\t\t        uint smoney = mycan[user].amounts[i] * ((now - stime)/onceOuttime) * per/ 1000;\r\n    \t\t\t        if(smoney <= mycan[user].moneys[i]){\r\n    \t\t\t            _left += smoney;\r\n    \t\t\t        }else{\r\n    \t\t\t            _left += mycan[user].moneys[i];\r\n    \t\t\t        }\r\n    \t\t\t    }\r\n    \t\t\t    \r\n    \t\t\t}\r\n    \t\t}\r\n\t\t}\r\n\t\tif(_left < mycan[user].used) {\r\n\t\t\treturn(0);\r\n\t\t}\r\n\t\tif(_left > mycan[user].eths) {\r\n\t\t\treturn(mycan[user].eths);\r\n\t\t}\r\n\t\treturn(_left - mycan[user].used);\r\n\t\t\r\n\t}\r\n\tfunction getcanuserun(address user) public view returns(uint _left) {\r\n\t\tif(myrun[user].len > 0) {\r\n\t\t    for(uint i = 0; i < myrun[user].len; i++) {\r\n    \t\t\tuint stime = myrun[user].times[i];\r\n    \t\t\tif(stime == 0) {\r\n    \t\t\t    _left += myrun[user].moneys[i];\r\n    \t\t\t}else{\r\n    \t\t\t    if(now - stime >= onceOuttime) {\r\n    \t\t\t        uint smoney = myrun[user].amounts[i] * ((now - stime)/onceOuttime) * per/ 1000;\r\n    \t\t\t        if(smoney <= myrun[user].moneys[i]){\r\n    \t\t\t            _left += smoney;\r\n    \t\t\t        }else{\r\n    \t\t\t            _left += myrun[user].moneys[i];\r\n    \t\t\t        }\r\n    \t\t\t    }\r\n    \t\t\t}\r\n    \t\t}\r\n\t\t}\r\n\t\tif(_left < myrun[user].used) {\r\n\t\t\treturn(0);\r\n\t\t}\r\n\t\tif(_left > myrun[user].eths) {\r\n\t\t\treturn(myrun[user].eths);\r\n\t\t}\r\n\t\treturn(_left - myrun[user].used);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint tokens) private{\r\n\t\trequire(!frozenAccount[from]);\r\n\t\trequire(!frozenAccount[to]);\r\n\t\trequire(actived == true);\r\n\t\trequire(from != to);\r\n        require(to != 0x0);\r\n        require(balances[from] >= tokens);\r\n        require(balances[to] + tokens > balances[to]);\r\n        uint previousBalances = balances[from] + balances[to];\r\n        balances[from] -= tokens;\r\n        balances[to] += tokens;\r\n        assert(balances[from] + balances[to] == previousBalances);\r\n        \r\n\t\temit Transfer(from, to, tokens);\r\n\t}\r\n    function transfer(address _to, uint256 _value) onlySystemStart() public returns(bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return(true);\r\n    }\r\n    function activekey() onlySystemStart() public returns(bool) {\r\n\t    address addr = msg.sender;\r\n        uint keyval = 1 ether;\r\n        require(balances[addr] > keyval);\r\n        require(my[addr].mykeysid < 1);\r\n        address top = my[addr].fromaddr;\r\n        uint topkeyids = keyconfig.currentkeyid;\r\n        if(top != address(0) && my[top].mykeysid > 0) {\r\n            topkeyids = my[top].mykeysid/10000000 - 1;\r\n        }else{\r\n            keyconfig.currentkeyid++;\r\n            if(keyconfig.currentkeyid > 8){\r\n                keyconfig.currentkeyid = 0;\r\n            }\r\n        }\r\n        keyconfig.keyidarr[topkeyids]++;\r\n        uint kid = keyconfig.keyidarr[topkeyids];\r\n        require(myidkeys[kid] == address(0));\r\n        my[addr].mykeysid = kid;\r\n\t    myidkeys[kid] = addr;\r\n\t    balances[addr] -= keyval;\r\n\t    balances[owner] += keyval;\r\n\t    emit Transfer(addr, owner, keyval);\r\n\t    return(true);\r\n\t    \r\n    }\r\n    \r\n\tfunction getfrom(address _addr) public view returns(address) {\r\n\t\treturn(my[_addr].fromaddr);\r\n\t}\r\n    function gettopid(address addr) public view returns(uint) {\r\n        address topaddr = my[addr].fromaddr;\r\n        if(topaddr == address(0)) {\r\n            return(0);\r\n        }\r\n        uint keyid = my[topaddr].mykeysid;\r\n        if(keyid > 0 && myidkeys[keyid] == topaddr) {\r\n            return(keyid);\r\n        }else{\r\n            return(0);\r\n        }\r\n    }\r\n    \r\n\tfunction approve(address spender, uint tokens) public returns(bool success) {\r\n\t    require(actived == true);\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success) {\r\n\t\trequire(actived == true);\r\n\t\trequire(!frozenAccount[from]);\r\n\t\trequire(!frozenAccount[to]);\r\n\t\tbalances[from] -= tokens;\r\n\t\tallowed[from][msg.sender] -= tokens;\r\n\t\tbalances[to] += tokens;\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address tokenOwner, address spender) public view returns(uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\tfunction freezeAccount(address target, bool freeze) public onlyOwner{\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\temit FrozenFunds(target, freeze);\r\n\t}\r\n\t\r\n\tfunction setactive(bool t) public onlyOwner{\r\n\t\tactived = t;\r\n\t}\r\n    \r\n\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner{\r\n\t\trequire(!frozenAccount[target]);\r\n\t\trequire(actived == true);\r\n\t\trequire(mintedAmount < balances[this]*20/100);\r\n\t\tbalances[target] += mintedAmount;\r\n\t\tbalances[this] -= mintedAmount;\r\n\t\temit Transfer(this, target, mintedAmount);\r\n\t}\r\n\t\r\n\tfunction getyestoday() public view returns(uint d) {\r\n\t    uint today = gettoday();\r\n\t    d = today - sysday;\r\n\t}\r\n\t\r\n\tfunction gettoday() public view returns(uint d) {\r\n\t    uint n = now;\r\n\t    d = n - n%sysday - cksysday;\r\n\t}\r\n\tfunction totalSupply() public view returns(uint) {\r\n\t\treturn(_totalSupply - balances[this]);\r\n\t}\r\n\r\n\tfunction getbuyprice() public view returns(uint kp) {\r\n        if(keyconfig.usedkeynum == keyconfig.basekeynum) {\r\n            kp = keyconfig.keyprice + keyconfig.startprice;\r\n        }else{\r\n            kp = keyconfig.keyprice;\r\n        }\r\n\t    \r\n\t}\r\n\tfunction leftnum() public view returns(uint num) {\r\n\t    if(keyconfig.usedkeynum == keyconfig.basekeynum) {\r\n\t        num = keyconfig.basekeynum + keyconfig.basekeysub;\r\n\t    }else{\r\n\t        num = keyconfig.basekeynum - keyconfig.usedkeynum;\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction getlevel(address addr) public view returns(uint) {\r\n\t    uint nums = my[addr].sun1 + my[addr].sun2 + my[addr].sun3;\r\n\t    if(my[addr].sun1 >= prizelevelsuns[2] && nums >= prizelevelmans[2]) {\r\n\t        return(3);\r\n\t    }\r\n\t    if(my[addr].sun1 >= prizelevelsuns[1] && nums >= prizelevelmans[1]) {\r\n\t        return(2);\r\n\t    }\r\n\t    if(my[addr].sun1 >= prizelevelsuns[0] && nums >= prizelevelmans[0]) {\r\n\t        return(1);\r\n\t    }\r\n\t    return(0);\r\n\t}\r\n\t\r\n\tfunction gettruelevel(address user, uint d) public view returns(uint) {\r\n\t    //uint d = getyestoday();\r\n\t    uint money = my[user].myprizedayget[d];\r\n\t    uint mymans = my[user].mysunsdaynum[d];\r\n\t    if(mymans >= prizelevelsunsday[2] && money >= prizelevelmoneyday[2]) {\r\n\t        if(my[user].mylevelid < 3){\r\n\t            return(my[user].mylevelid);\r\n\t        }else{\r\n\t           return(3); \r\n\t        }\r\n\t        \r\n\t    }\r\n\t    if(mymans >= prizelevelsunsday[1] && money >= prizelevelmoneyday[1]) {\r\n\t        if(my[user].mylevelid < 2){\r\n\t            return(my[user].mylevelid);\r\n\t        }else{\r\n\t           return(2); \r\n\t        }\r\n\t    }\r\n\t    if(mymans >= prizelevelsunsday[0] && money >= prizelevelmoneyday[0]) {\r\n\t        if(my[user].mylevelid < 1){\r\n\t            return(0);\r\n\t        }else{\r\n\t           return(1); \r\n\t        }\r\n\t    }\r\n\t    return(0);\r\n\t    \r\n\t}\r\n\tfunction setlevel(address user) private returns(bool) {\r\n\t    uint lid = getlevel(user);\r\n\t    uint uid = my[user].mylevelid;\r\n\t    uint d = gettoday();\r\n\t    if(uid < lid) {\r\n\t        //if(uid > 0) {\r\n\t        //    leveldata[uid - 1]--;\r\n\t        //}\r\n\t        my[user].mylevelid = lid;\r\n\t        uint p = lid - 1;\r\n\t        //leveldata[p]++;\r\n\t        if(prizeactivetime[p] < 1) {\r\n\t            prizeactivetime[p] = d + sysday*2;\r\n\t        }\r\n\t        if(now < prizeactivetime[p]) {\r\n\t            leveldata[p]++;\r\n\t        }\r\n\t    }\r\n\t    if(lid > 0) {\r\n\t        uint tid = gettruelevel(user, d);\r\n    \t    if(tid > 0 && prizeactivetime[tid - 1] > 0 && !my[user].hascountprice[d]) {\r\n    \t         userlevelsnum[tid][d]++; \r\n    \t         my[user].hascountprice[d] = true;\r\n    \t     }\r\n\t    }\r\n\t}\r\n\tfunction getprizemoney(address user) public view returns(uint lid, uint ps) {\r\n\t    lid = my[user].mylevelid;\r\n\t    if(lid > 0) {\r\n\t        uint p = lid - 1;\r\n\t        uint activedtime = prizeactivetime[p];\r\n\t        if(activedtime > 0 && activedtime < now) {\r\n\t            if(now  > activedtime  + sysday){\r\n\t                uint d = getyestoday();\r\n\t                uint ld = gettruelevel(user, d);\r\n\t                if(ld > 0) {\r\n\t                   uint pp = ld - 1;\r\n\t                   if(allprize[pp][0] > allprize[pp][1] && userlevelsnum[ld][d] > 0) {\r\n\t                       ps = (allprize[pp][0] - allprize[pp][1])/userlevelsnum[ld][d];\r\n\t                   }\r\n\t                }\r\n\t                return(ld, ps);\r\n\t            }else{\r\n\t                //uint d = activedtime - sysday;\r\n\t                \r\n\t                if(allprize[p][0] > allprize[p][1]){\r\n\t                    uint dd = gettoday();\r\n\t                    if(!my[user].hascountprice[dd]){\r\n\t                        ps = (allprize[p][0] - allprize[p][1])/leveldata[p];\r\n\t                    }\r\n\t                    \r\n\t                }\r\n\t            }\r\n\t            \r\n\t        }\r\n\t    }\r\n\t    return(lid, ps);\r\n\t}\r\n\tfunction getprize() onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    if(my[user].mylevelid > 0) {\r\n\t        (uint lid, uint ps) = getprizemoney(user);\r\n\t        if(lid > 0 && ps > 0) {\r\n\t            uint d = getyestoday();\r\n\t            require(my[user].levelget[d] == 0);\r\n        \t    my[user].levelget[d] += ps;\r\n        \t    allprize[lid - 1][1] += ps;\r\n        \t    addrunmoney(user, ps, ps, 100);\r\n        \t    \r\n\t        }\r\n\t    }\r\n\t}\r\n\t\r\n\t\r\n\tfunction getfromsun(address addr, uint money, uint amount) private returns(bool){\r\n\t    address f1 = my[addr].fromaddr;\r\n\t    uint d = gettoday();\r\n\t    if(f1 != address(0) && f1 != addr) {\r\n\t        if(my[f1].sun1 >= mans[0]){\r\n\t            addrunmoney(f1, (amount*pers[0])/100, (money*pers[0])/100, 0);\r\n\t        }\r\n\t    \tmy[f1].myprizedayget[d] += amount;\r\n\t    \tif(my[f1].mykeysid > 10000000) {\r\n\t    \t    worksdata[((my[f1].mykeysid/10000000) - 1)] += amount;\r\n\t    \t}\r\n\t    \tsetlevel(f1);\r\n\t    \taddress f2 = my[f1].fromaddr;\r\n\t    \tif(f2 != address(0) && f2 != addr) {\r\n    \t        if(my[f2].sun1 >= mans[1]){\r\n    \t           addrunmoney(f2, (amount*pers[1])/100, (money*pers[1])/100, 0); \r\n    \t        }\r\n    \t    \tmy[f2].myprizedayget[d] += amount;\r\n    \t    \tsetlevel(f2);\r\n    \t    \taddress f3 = my[f2].fromaddr;\r\n    \t    \tif(f3 != address(0) && f3 != addr) {\r\n        \t        if(my[f3].sun1 >= mans[2]){\r\n        \t            addrunmoney(f3, (amount*pers[2])/100, (money*pers[2])/100, 0);\r\n        \t        }\r\n        \t    \tmy[f3].myprizedayget[d] += amount;\r\n        \t    \tsetlevel(f3);\r\n        \t    }\r\n    \t    }\t\r\n\t    }\r\n\t    \r\n\t}\r\n\tfunction setpubprize(uint sendmoney) private returns(bool) {\r\n\t    uint len = moneydata.length;\r\n\t    if(len > 0) {\r\n\t        uint all = 0;\r\n\t        uint start = 0;\r\n\t        uint m = 0;\r\n\t        if(len > 10) {\r\n\t            start = len - 10;\r\n\t        }\r\n\t        for(uint i = start; i < len; i++) {\r\n\t            all += moneydata[i];\r\n\t        }\r\n\t        //uint sendmoney = amount*pubper/100;\r\n\t        for(; start < len; start++) {\r\n\t            m = (sendmoney*moneydata[start])/all;\r\n\t            addmoney(mansdata[start],m, m, 100);\r\n\t            my[mansdata[start]].prizecount += m;\r\n\t        }\r\n\t    }\r\n\t    return(true);\r\n\t}\r\n\tfunction getluckyuser() public view returns(address addr) {\r\n\t    if(moneydata.length > 0){\r\n\t        uint d = gettoday();\r\n    \t    uint t = getyestoday();\r\n    \t    uint maxmoney = 1 ether;\r\n    \t    for(uint i = 0; i < moneydata.length; i++) {\r\n    \t        if(timedata[i] > t && timedata[i] < d && moneydata[i] >= maxmoney) {\r\n    \t            maxmoney = moneydata[i];\r\n    \t            addr = mansdata[i];\r\n    \t        }\r\n    \t    }\r\n\t    }\r\n\t    \r\n\t}\r\n\tfunction getluckyprize() onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    require(user != address(0));\r\n\t    require(user == getluckyuser());\r\n\t    uint d = getyestoday();\r\n\t    require(my[user].daysusereths[d] > 0);\r\n\t    require(my[user].daysuserlucky[d] == 0);\r\n\t    uint money = dayseths[d]*luckyper/1000;\r\n\t    addmoney(user, money,money, 100);\r\n\t    my[user].daysuserlucky[d] += money;\r\n\t    my[user].prizecount += money;\r\n\t    uint t = getyestoday() - sysday;\r\n\t    for(uint i = 0; i < moneydata.length; i++) {\r\n    \t    if(timedata[i] < t) {\r\n    \t        delete moneydata[i];\r\n    \t        delete timedata[i];\r\n    \t        delete mansdata[i];\r\n    \t    }\r\n    \t}\r\n\t}\r\n\t\r\n\tfunction runtoeth(uint amount) onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    uint usekey = (amount*runper*1 ether)/(100*keyconfig.keyprice);\r\n\t    require(usekey < balances[user]);\r\n\t    require(getcanuserun(user) >= amount);\r\n\t    //require(transfer(owner, usekey) == true);\r\n\t    balances[user] -= usekey;\r\n\t\tbalances[owner] += usekey;\r\n\t\temit Transfer(user, owner, usekey);\r\n\t\t\r\n\t    reducerunmoney(user, amount);\r\n\t    addmoney(user, amount, amount, 100);\r\n\t    \r\n\t    \r\n\t}\r\n\tfunction getlastuser() public view returns(address user) {\r\n\t    if(timedata.length > 0) {\r\n    \t    if(lastmoney > 0 && now - timedata[timedata.length - 1] > lasttime) {\r\n    \t        user = mansdata[mansdata.length - 1];\r\n    \t    }\r\n\t    } \r\n\t}\r\n\tfunction getlastmoney() public returns(bool) {\r\n\t    address user = getlastuser();\r\n\t    require(user != address(0));\r\n\t    require(user == msg.sender);\r\n\t    require(lastmoney > 0);\r\n\t    require(lastmoney <= address(this).balance/2);\r\n\t    user.transfer(lastmoney);\r\n\t    lastmoney = 0;\r\n\t}\r\n\t\r\n\tfunction buy(uint keyid) onlySystemStart() public payable returns(bool) {\r\n\t\taddress user = msg.sender;\r\n\t\trequire(msg.value > 0);\r\n        uint amount = msg.value;\r\n\t\trequire(amount >= 1 ether);\r\n\t\trequire(amount%(1 ether) == 0);\r\n\t\trequire(my[user].usereths <= 100 ether);\r\n\t\tuint money = amount*3;\r\n\t\tuint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\tbool ifadd = false;\r\n\t\t//if has no top\r\n\t\tif(my[user].fromaddr == address(0)) {\r\n\t\t    address topaddr = myidkeys[keyid];\r\n\t\t    if(keyid > 0 && topaddr != address(0) && topaddr != user) {\r\n\t\t        my[user].fromaddr = topaddr;\r\n    \t\t    my[topaddr].sun1++;\r\n    \t\t    my[topaddr].mysunsdaynum[d]++;\r\n    \t\t    address top2 = my[topaddr].fromaddr;\r\n    \t\t    if(top2 != address(0) && top2 != user){\r\n    \t\t        my[top2].sun2++;\r\n    \t\t        //my[top2].mysunsdaynum[d]++;\r\n    \t\t    }\r\n    \t\t    address top3 = my[top2].fromaddr;\r\n    \t\t    if(top3 != address(0) && top3 != user){\r\n    \t\t        my[top3].sun3++;\r\n    \t\t        //my[top3].mysunsdaynum[d]++;\r\n    \t\t    }\r\n    \t\t    ifadd = true;\r\n\t\t    }\r\n\t\t}else{\r\n\t\t    ifadd = true;\r\n\t\t}\r\n\t\tif(ifadd == true) {\r\n\t\t    money = amount*4;\r\n\t\t}\r\n\t\t\r\n\t\tif(daysgeteths[t] > 0 && daysgeteths[d] > (daysgeteths[t]*subper)/100) {\r\n\t\t    if(ifadd == true) {\r\n    \t\t    money = amount*3;\r\n    \t\t}else{\r\n    \t\t    money = amount*2;\r\n    \t\t}\r\n\t\t}\r\n\t\tif(ifadd == true) {\r\n\t\t    getfromsun(user, money, amount);\r\n\t\t}\r\n\t\tsetpubprize(amount*pubper/100);\r\n\t\tmansdata.push(user);\r\n\t\tmoneydata.push(amount);\r\n\t\ttimedata.push(now);\r\n\t\t\r\n\t    daysgeteths[d] += money;\r\n\t    dayseths[d] += amount;\r\n\t    tg[tags].sysethnum += amount;\r\n\t\ttg[tags].userethnum += amount;\r\n\t\tmy[user].daysusereths[d] += amount;\r\n\t\t\r\n\t\tmy[user].tzs += money;\r\n\t\tlastmoney += amount*lastper/100;\r\n\t\ttg[tags].ethnum += money;\r\n\t\tmy[user].usereths += amount;\r\n\t\tallprize[0][0] += amount*prizeper[0]/100;\r\n\t\tallprize[1][0] += amount*prizeper[1]/100;\r\n\t\tallprize[2][0] += amount*prizeper[2]/100;\r\n\t\taddmoney(user, amount, money, 0);\r\n\t\treturn(true);\r\n\t}\r\n\t\r\n\tfunction keybuy(uint m) onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    require(m >= 1 ether);\r\n\t    require(balances[user] >= m);\r\n\t    uint amount = (m*keyconfig.keyprice)/(1 ether);\r\n\t    require(amount >= 1 ether);\r\n\t    require(amount%(1 ether) == 0);\r\n\t    uint money = amount*3;\r\n\t    \r\n\t\tuint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\tif(my[user].fromaddr != address(0)) {\r\n\t\t    money = amount*4;\r\n\t\t}\r\n\t\t\r\n\t\tif(daysgeteths[t] > 0 && daysgeteths[d] > daysgeteths[t]*subper/100) {\r\n\t\t    if(my[user].fromaddr == address(0)) {\r\n    \t\t    money = amount*2;\r\n    \t\t}else{\r\n    \t\t    money = amount*3;\r\n    \t\t}\r\n\t\t}\r\n\t\ttg[tags].ethnum += money;\r\n\t\tmy[user].tzs += money;\r\n\t\taddmoney(user, amount, money, 0);\r\n\t\tbalances[user] -= m;\r\n\t    balances[owner] += m;\r\n\t\temit Transfer(user, owner, m);\r\n\t    return(true);\r\n\t}\r\n\tfunction ethbuy(uint amount) onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    uint canmoney = getcanuse(user);\r\n\t    require(canmoney >= amount);\r\n\t    require(amount >= 1 ether);\r\n\t    require(amount%(1 ether) == 0);\r\n\t    require(mycan[user].eths >= amount);\r\n\t    require(my[user].tzs >= amount);\r\n\t    uint money = amount*3;\r\n\t\tuint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\tif(my[user].fromaddr == address(0)) {\r\n\t\t    money = amount*2;\r\n\t\t}\r\n\t\t\r\n\t\tif(daysgeteths[t] > 0 && daysgeteths[d] > daysgeteths[t]*subper/100) {\r\n\t\t    if(my[user].fromaddr == address(0)) {\r\n    \t\t    money = amount;\r\n    \t\t}else{\r\n    \t\t    money = amount*2;\r\n    \t\t}\r\n\t\t}\r\n\t\taddmoney(user, amount, money, 0);\r\n\t\tmy[user].tzs += money;\r\n\t\tmycan[user].used += money;\r\n\t    tg[tags].ethnum += money;\r\n\t    \r\n\t    return(true);\r\n\t}\r\n\t\r\n\tfunction charge() public payable returns(bool) {\r\n\t\treturn(true);\r\n\t}\r\n\t\r\n\tfunction() payable public {\r\n\t\tbuy(0);\r\n\t}\r\n\t\r\n\tfunction sell(uint256 amount) onlySystemStart() public returns(bool success) {\r\n\t\taddress user = msg.sender;\r\n\t\trequire(amount > 0);\r\n\t\tuint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\tuint256 canuse = getcanuse(user);\r\n\t\trequire(canuse >= amount);\r\n\t\trequire(address(this).balance/2 > amount);\r\n\t\tuint p = sellper;\r\n\t\tif(dayseths[t] > dayseths[d]){\r\n\t\t    if((daysysdraws[d] + amount) > (dayseths[t]*subper/100)){\r\n\t\t        p = sellupper;\r\n\t\t    }\r\n\t\t}else{\r\n\t\t    if(dayseths[d] > 0 && (daysysdraws[d] + amount) > (dayseths[d]*subper/100)){\r\n\t\t        p = sellupper;\r\n\t\t    }\r\n\t\t}\r\n\t\tuint useper = (amount*p*(1 ether))/(keyconfig.keyprice*100);\r\n\t\t\r\n\t\trequire(balances[user] >= useper);\r\n\t\trequire(reducemoney(user, amount) == true);\r\n\t\t\r\n\t\tmy[user].userethsused += amount;\r\n\t\ttg[tags].userethnumused += amount;\r\n\t\tmy[user].daysuserdraws[d] += amount;\r\n\t\tdaysysdraws[d] += amount;\r\n\t\t//_transfer(user, owner, useper);\r\n\t\tbalances[user] -= useper;\r\n\t    balances[owner] += useper;\r\n\t\temit Transfer(user, owner, useper);\r\n\t\tuser.transfer(amount);\r\n\t\t\r\n\t\tsetend();\r\n\t\treturn(true);\r\n\t}\r\n\t\r\n\tfunction sellkey(uint256 amount) onlySystemStart() public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t\trequire(balances[user] >= amount);\r\n\t\t\r\n\t\tuint d = gettoday();\r\n\t\tuint t = getyestoday();\r\n\t\t\r\n\t\trequire(dayseths[t] > 0);\r\n\t\t\r\n\t\tuint money = (keyconfig.keyprice*amount*sellkeyper)/(100 ether);\r\n\t\tif(daysysdraws[d] > 0 && (daysysdraws[d] + money) > dayseths[t]*2){\r\n\t\t    money = (keyconfig.keyprice*amount)/(2 ether);\r\n\t\t}\r\n\t\trequire(address(this).balance > money);\r\n\t\t//require(tg[tags].userethnumused + money <= tg[tags].userethnum/2);\r\n\t\tmy[user].userethsused += money;\r\n        tg[tags].userethnumused += money;\r\n        daysysdraws[d] += money;\r\n    \t//_transfer(user, owner, amount);\r\n    \tbalances[user] -= amount;\r\n\t    balances[owner] += amount;\r\n\t\temit Transfer(user, owner, amount);\r\n\t\t\r\n    \tuser.transfer(money);\r\n    \tsetend();\r\n\t}\r\n\r\n\t\r\n\tfunction buykey(uint buynum) onlySystemStart() public payable returns(bool){\r\n\t    uint money = msg.value;\r\n\t    address user = msg.sender;\r\n\t    require(buynum >= 1 ether);\r\n\t    require(buynum%(1 ether) == 0);\r\n\t    require(keyconfig.usedkeynum + buynum <= keyconfig.basekeynum);\r\n\t    require(money >= keyconfig.keyprice);\r\n\t    require(user.balance >= money);\r\n\t    require(mycan[user].eths > 0);\r\n\t    require(((keyconfig.keyprice*buynum)/1 ether) == money);\r\n\t    \r\n\t    my[user].mykeyeths += money;\r\n\t    tg[tags].sysethnum += money;\r\n\t    tg[tags].syskeynum += buynum;\r\n\t\tif(keyconfig.usedkeynum + buynum == keyconfig.basekeynum) {\r\n\t\t    keyconfig.basekeynum = keyconfig.basekeynum + keyconfig.basekeysub;\r\n\t        keyconfig.usedkeynum = 0;\r\n\t        keyconfig.keyprice = keyconfig.keyprice + keyconfig.startprice;\r\n\t    }else{\r\n\t        keyconfig.usedkeynum += buynum;\r\n\t    }\r\n\t    _transfer(this, user, buynum);\r\n\t}\r\n\t\r\n\tfunction setend() private returns(bool) {\r\n\t    if(tg[tags].userethnum > 0 && tg[tags].userethnumused > tg[tags].userethnum/2) {\r\n\t        tags++;\r\n\t        keyconfig.keyprice = keyconfig.startprice;\r\n\t        keyconfig.basekeynum = keyconfig.startbasekeynum;\r\n\t        keyconfig.usedkeynum = 0;\r\n\t        \r\n\t        prizeactivetime = [0,0,0];\r\n\t        leveldata = [0,0,0];\r\n\t        return(true);\r\n\t    }\r\n\t}\r\n\tfunction ended(bool ifget) public returns(bool) {\r\n\t    address user = msg.sender;\r\n\t    require(my[user].systemtag < tags);\r\n\t    require(!frozenAccount[user]);\r\n\t    if(ifget == true) {\r\n\t        \r\n    \t    my[user].prizecount = 0;\r\n    \t    my[user].tzs = 0;\r\n    \t    my[user].prizecount = 0;\r\n    \t\tmycan[user].eths = 0;\r\n    \t    mycan[user].used = 0;\r\n    \t    if(mycan[user].len > 0) {\r\n    \t        delete mycan[user].times;\r\n    \t        delete mycan[user].amounts;\r\n    \t        delete mycan[user].moneys;\r\n    \t    }\r\n    \t    mycan[user].len = 0;\r\n    \t    \r\n    \t\tmyrun[user].eths = 0;\r\n    \t    myrun[user].used = 0;\r\n    \t    if(myrun[user].len > 0) {\r\n    \t        delete myrun[user].times;\r\n    \t        delete myrun[user].amounts;\r\n    \t        delete myrun[user].moneys;\r\n    \t    }\r\n    \t    myrun[user].len = 0;\r\n    \t    if(my[user].usereths/2 > my[user].userethsused) {\r\n    \t        uint money = my[user].usereths/2 - my[user].userethsused;\r\n\t            require(address(this).balance > money);\r\n    \t        user.transfer(money);\r\n    \t    }\r\n    \t    my[user].usereths = 0;\r\n    \t    my[user].userethsused = 0;\r\n    \t    \r\n\t    }else{\r\n\t        uint amount = my[user].usereths - my[user].userethsused;\r\n\t        tg[tags].ethnum += my[user].tzs;\r\n\t        tg[tags].sysethnum += amount;\r\n\t\t    tg[tags].userethnum += amount;\r\n\t    }\r\n\t    my[user].systemtag = tags;\r\n\t}\r\n\t\r\n\tfunction setmangeruser(address user, bool t) public onlyOwner{\r\n\t    mangeruser[user] = t;\r\n\t}\r\n\tfunction setmangerallow(address user, uint m) public {\r\n\t    require(mangeruser[msg.sender] == true);\r\n\t    require(mangeruser[user] == true);\r\n\t    require(user != address(0));\r\n\t    require(user != msg.sender);\r\n\t    require(mangerallowed[user] == 0);\r\n\t    mangerallowed[user] = m;\r\n\t}\r\n\tfunction withdraw(address _to, uint money) public {\r\n\t    require(money <= address(this).balance);\r\n\t    require(_to != 0x0);\r\n\t    address user = msg.sender;\r\n\t    //if(user != owner){\r\n\t    require(mangeruser[user] == true);\r\n    \trequire(mangerallowed[user] == money);\r\n    \trequire(tg[tags].sysethnum >= money);\r\n    \t//require(tg[tags].userethnumused + money <= tg[tags].sysethnum*4/10);\r\n    \ttg[tags].sysethnum -= money;\r\n    \ttg[tags].userethnumused += money;\r\n    \tmangerallowed[user] = 0;\r\n\t    //}\r\n\t\t_to.transfer(money);\r\n\t}\r\n\r\n\tfunction setper(uint onceOuttimes,uint8 perss,uint runpers,uint pubpers,uint subpers,uint luckypers,uint lastpers,uint sellkeypers,uint sellpers,uint selluppers,uint lasttimes,uint sysdays,uint cksysdays) public onlyOwner{\r\n\t    onceOuttime = onceOuttimes;\r\n\t    per = perss;\r\n\t    runper = runpers;\r\n\t    pubper = pubpers;\r\n\t    subper = subpers;\r\n\t    luckyper = luckypers;\r\n\t    lastper = lastpers;\r\n\t    sellkeyper = sellkeypers;\r\n\t    sellper = sellpers;\r\n\t    sellupper = selluppers;\r\n\t    lasttime = lasttimes;//9\r\n\t    sysday = sysdays;\r\n\t    cksysday = cksysdays;\r\n\t}\r\n\tfunction setnotice(\r\n\t    string versions,\r\n\t    string downurls,\r\n\t    string noticess\r\n\t) public onlyOwner returns(bool){\r\n\t    version = versions;\r\n\t    downurl = downurls;\r\n\t    notices = noticess;\r\n\t}\r\n\tfunction getnotice() public view returns(\r\n\t    string versions,\r\n\t    string downurls,\r\n\t    string noticess\r\n\t){\r\n\t    versions = version;\r\n\t    downurls = downurl;\r\n\t    noticess = notices;\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showethconf\",\"outputs\":[{\"name\":\"todaymyeth\",\"type\":\"uint256\"},{\"name\":\"todaymydraw\",\"type\":\"uint256\"},{\"name\":\"todaysyseth\",\"type\":\"uint256\"},{\"name\":\"todaysysdraw\",\"type\":\"uint256\"},{\"name\":\"yestodaymyeth\",\"type\":\"uint256\"},{\"name\":\"yestodaymydraw\",\"type\":\"uint256\"},{\"name\":\"yestodaysyseth\",\"type\":\"uint256\"},{\"name\":\"yestodaysysdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getluckyuser\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizelevelmans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"runtoeth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lasttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timedata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getcanuse\",\"outputs\":[{\"name\":\"_left\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettoday\",\"outputs\":[{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getprize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"gettruelevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"t\",\"type\":\"bool\"}],\"name\":\"setmangeruser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizelevelsuns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getlastmoney\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myidkeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cksysday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethbuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"charge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getluckyprize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worksdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayseths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showteam\",\"outputs\":[{\"name\":\"daysnum\",\"type\":\"uint256\"},{\"name\":\"dayseth\",\"type\":\"uint256\"},{\"name\":\"daysnum1\",\"type\":\"uint256\"},{\"name\":\"dayseth1\",\"type\":\"uint256\"},{\"name\":\"man1\",\"type\":\"uint256\"},{\"name\":\"man2\",\"type\":\"uint256\"},{\"name\":\"man3\",\"type\":\"uint256\"},{\"name\":\"myruns\",\"type\":\"uint256\"},{\"name\":\"canruns\",\"type\":\"uint256\"},{\"name\":\"levelid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"setmangerallow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysysdraws\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getbuyprice\",\"outputs\":[{\"name\":\"kp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showprize\",\"outputs\":[{\"name\":\"lttime\",\"type\":\"uint256\"},{\"name\":\"ltmoney\",\"type\":\"uint256\"},{\"name\":\"ltaddr\",\"type\":\"address\"},{\"name\":\"lastmoneys\",\"type\":\"uint256\"},{\"name\":\"lastuser\",\"type\":\"address\"},{\"name\":\"luckymoney\",\"type\":\"uint256\"},{\"name\":\"luckyuser\",\"type\":\"address\"},{\"name\":\"luckyget\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moneydata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastmoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"interuser\",\"outputs\":[{\"name\":\"skeyid\",\"type\":\"uint256\"},{\"name\":\"stzs\",\"type\":\"uint256\"},{\"name\":\"seths\",\"type\":\"uint256\"},{\"name\":\"sethcan\",\"type\":\"uint256\"},{\"name\":\"sruns\",\"type\":\"uint256\"},{\"name\":\"srunscan\",\"type\":\"uint256\"},{\"name\":\"skeynum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizelevelmoneyday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellupper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellkeyper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizelevelsunsday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"per\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showworker\",\"outputs\":[{\"name\":\"w0\",\"type\":\"uint256\"},{\"name\":\"w1\",\"type\":\"uint256\"},{\"name\":\"w2\",\"type\":\"uint256\"},{\"name\":\"w3\",\"type\":\"uint256\"},{\"name\":\"w4\",\"type\":\"uint256\"},{\"name\":\"w5\",\"type\":\"uint256\"},{\"name\":\"w6\",\"type\":\"uint256\"},{\"name\":\"w7\",\"type\":\"uint256\"},{\"name\":\"w8\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getcanuserun\",\"outputs\":[{\"name\":\"_left\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellkey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showlvzhou\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"mykeyid\",\"type\":\"uint256\"},{\"name\":\"mytzs\",\"type\":\"uint256\"},{\"name\":\"daysget\",\"type\":\"uint256\"},{\"name\":\"prizeget\",\"type\":\"uint256\"},{\"name\":\"mycans\",\"type\":\"uint256\"},{\"name\":\"mykeynum\",\"type\":\"uint256\"},{\"name\":\"keyprices\",\"type\":\"uint256\"},{\"name\":\"ltkeynum\",\"type\":\"uint256\"},{\"name\":\"tagss\",\"type\":\"uint256\"},{\"name\":\"mytags\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buynum\",\"type\":\"uint256\"}],\"name\":\"buykey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activekey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"gettopid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leveldata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getnotice\",\"outputs\":[{\"name\":\"versions\",\"type\":\"string\"},{\"name\":\"downurls\",\"type\":\"string\"},{\"name\":\"noticess\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftnum\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"versions\",\"type\":\"string\"},{\"name\":\"downurls\",\"type\":\"string\"},{\"name\":\"noticess\",\"type\":\"string\"}],\"name\":\"setnotice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"keybuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getlastuser\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getlevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getyestoday\",\"outputs\":[{\"name\":\"d\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"keyid\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showlevel\",\"outputs\":[{\"name\":\"myget\",\"type\":\"uint256\"},{\"name\":\"levelid\",\"type\":\"uint256\"},{\"name\":\"len1\",\"type\":\"uint256\"},{\"name\":\"len2\",\"type\":\"uint256\"},{\"name\":\"len3\",\"type\":\"uint256\"},{\"name\":\"m1\",\"type\":\"uint256\"},{\"name\":\"m2\",\"type\":\"uint256\"},{\"name\":\"m3\",\"type\":\"uint256\"},{\"name\":\"t1\",\"type\":\"uint256\"},{\"name\":\"t2\",\"type\":\"uint256\"},{\"name\":\"t3\",\"type\":\"uint256\"},{\"name\":\"levelget\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tags\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mansdata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ifget\",\"type\":\"bool\"}],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getfrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onceOuttimes\",\"type\":\"uint256\"},{\"name\":\"perss\",\"type\":\"uint8\"},{\"name\":\"runpers\",\"type\":\"uint256\"},{\"name\":\"pubpers\",\"type\":\"uint256\"},{\"name\":\"subpers\",\"type\":\"uint256\"},{\"name\":\"luckypers\",\"type\":\"uint256\"},{\"name\":\"lastpers\",\"type\":\"uint256\"},{\"name\":\"sellkeypers\",\"type\":\"uint256\"},{\"name\":\"sellpers\",\"type\":\"uint256\"},{\"name\":\"selluppers\",\"type\":\"uint256\"},{\"name\":\"lasttimes\",\"type\":\"uint256\"},{\"name\":\"sysdays\",\"type\":\"uint256\"},{\"name\":\"cksysdays\",\"type\":\"uint256\"}],\"name\":\"setper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"bool\"}],\"name\":\"setactive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getprizemoney\",\"outputs\":[{\"name\":\"lid\",\"type\":\"uint256\"},{\"name\":\"ps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onceOuttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeactivetime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userlevelsnum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysgeteths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ethchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Oasis","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b0af55197e7b74f5877bb6aa476db808324b8a7aede9a5dfcb6abe4b90fb90cc"}]}