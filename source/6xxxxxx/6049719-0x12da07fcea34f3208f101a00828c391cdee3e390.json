{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract KNOWToken is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n    // Name of the token\r\n    string public constant name = \"KNOW Token\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"KNOW\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 18300000000 * 10 ** 18; // 18 billion total supply // muliplies dues to decimal precision\r\n    address public owner;                    // Owner of this contract\r\n    uint256 no_of_tokens;\r\n    uint256 total_token;\r\n    bool stopped = false;\r\n    bool checkTransfer = false;\r\n    uint256 public lockup_startdate;\r\n    uint256 public lockup_enddate;\r\n    uint256 public eth_received; // total ether received in the contract\r\n    uint256 transferPercent;\r\n    uint256 transferPercentTotal;\r\n    uint256 transferDays;\r\n    uint256 transferDaysTotal;\r\n    uint256 transferLastTransaction;\r\n    uint256 transferTotalSpent;\r\n    uint256 transferPostDate;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    mapping(address => bool) addOfPrivateSale;\r\n    mapping(address => bool) addOfContributors;\r\n    mapping(address => bool) addOfContributors2;\r\n    mapping(address => bool) addOfTechOperation;\r\n    mapping(address => bool) addOfMarketingBusinessDev;\r\n    mapping(address => bool) addOfEarlyInvestor;\r\n    mapping(address => bool) addOfOwners;\r\n    \r\n    event EventPrivateSale(address indexed _PrivateSale, bool _status);\r\n    event EventContributors(address indexed _Contributors, bool _status);\r\n    event EventContributors2(address indexed _Contributors2, bool _status);\r\n    event EventTechOperation(address indexed _TechOperation, bool _status);\r\n    event EventMarketingBusinessDev(address indexed _MarketingBusinessDev, bool _status);\r\n    event EventEarlyInvestor(address indexed _EarlyInvestor, bool _status);\r\n    \r\n    mapping(address => LockupHolderDetails) lockupHolderMap;\r\n    \r\n    struct LockupHolderDetails{\r\n      uint transferPercent;\r\n      uint transferDays;\r\n      uint transferPercentTotal;\r\n      uint transferDaysTotal;\r\n      uint transferLastTransaction;\r\n      uint transferTotalSpent;\r\n      uint transferPostDate;\r\n      bool reset;\r\n    }\r\n        \r\n    enum Stages {\r\n        LOCKUPNOTSTARTED,\r\n        LOCKUPSTARTED,\r\n        LOCKUPENDED\r\n    }\r\n    \r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage)\r\n            // Contract not in expected state\r\n            revert();\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    function KNOWToken() public\r\n    {\r\n        owner = msg.sender;\r\n        stage = Stages.LOCKUPNOTSTARTED;\r\n        \r\n        uint256 _transfertoPrivateSale = 2745000000 * 10 ** 18; // 15% to Private Sale\r\n        uint256 _transfertoContributors = 10980000000 * 10 ** 18; // 60% to Contributors\r\n        uint256 _transfertoContributors2 = 1830000000 * 10 ** 18; // 10% to Contributors 2\r\n        uint256 _transfertoTechOperationExpenses = 915000000 * 10 ** 18; // 5% to Tech & Operation Expenses\r\n        uint256 _transfertoMarketingBusinessDev = 915000000 * 10 ** 18; // 5% to Marketing & Business Development\r\n        uint256 _transfertoEarlyInvestors = 915000000 * 10 ** 18; // 5% to Early Investors\r\n        \r\n        // 15% to Private Sale\r\n        balances[0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9] = _transfertoPrivateSale;\r\n        Transfer(address(0), 0x8eeC67a193B6B90A4B0047769De8F17a7ee87eB9, _transfertoPrivateSale);\r\n        \r\n        // 60% to Contributors\r\n        balances[0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236] = _transfertoContributors;\r\n        Transfer(address(0), 0xc7991555F9F2E731bb2013cfB0ac2dcf6dc4A236, _transfertoContributors);\r\n        \r\n        // 10% to Contributors 2\r\n        balances[0xf26511984b53bf4b96d85355224E06a06180237F] = _transfertoContributors2;\r\n        Transfer(address(0), 0xf26511984b53bf4b96d85355224E06a06180237F, _transfertoContributors2);\r\n        \r\n        // 5% to Tech & Operation Expenses\r\n        balances[0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A] = _transfertoTechOperationExpenses;\r\n        Transfer(address(0), 0xDd695A5b4594ad79e3D9cE5280f0A36fde72C70A, _transfertoTechOperationExpenses);\r\n        \r\n        // 5% to Marketing & Business Development\r\n        balances[0x84B899f535b7128fEC47e53901cE3242CdC9C06f] = _transfertoMarketingBusinessDev;\r\n        Transfer(address(0), 0x84B899f535b7128fEC47e53901cE3242CdC9C06f, _transfertoMarketingBusinessDev);\r\n        \r\n        // 5% to Early Investors\r\n        balances[0xeD9200CffFBe17af59D288836a9B25520c6CeFa1] = _transfertoEarlyInvestors;\r\n        Transfer(address(0), 0xeD9200CffFBe17af59D288836a9B25520c6CeFa1, _transfertoEarlyInvestors);\r\n    }\r\n    \r\n    function () public payable \r\n    {\r\n        revert();\r\n        //Not Applicable   \r\n    }\r\n    \r\n     // Start lockup periods\r\n     function start_LOCKUP(uint _lockupEndDate) public onlyOwner atStage(Stages.LOCKUPNOTSTARTED)\r\n     {\r\n          stage = Stages.LOCKUPSTARTED;\r\n          stopped = false;\r\n          lockup_startdate = now;\r\n          lockup_enddate = now + _lockupEndDate * 86400;\r\n     }\r\n\r\n     // End lockup periods\r\n     function end_LOCKUP() external onlyOwner atStage(Stages.LOCKUPSTARTED)\r\n     {\r\n         require(now > lockup_enddate);\r\n         stage = Stages.LOCKUPENDED;\r\n     }\r\n     \r\n     // Add address to Private Sale\r\n     function addtoPrivateSale(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\r\n        addOfPrivateSale[_address] = true;\r\n        emit EventPrivateSale(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add address to Contributors\r\n     function addtoContributos(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\r\n        addOfContributors[_address] = true;\r\n        emit EventContributors(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add address to Contributors2\r\n     function addtoContributos2(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\r\n        addOfContributors2[_address] = true;\r\n        emit EventContributors2(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add address to Tech & Operation\r\n     function addtoTechOperation(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\r\n        addOfTechOperation[_address] = true;\r\n        emit EventTechOperation(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add address to Marketing & Business Development\r\n     function addtoMarketingBusinessDev(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner {\r\n        addOfMarketingBusinessDev[_address] = true;\r\n        emit EventMarketingBusinessDev(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add address to Early Investors\r\n     function addtoEarlyInvestors(address _address, uint _transferPercent, uint _transferPercentTotal) public onlyOwner{\r\n        addOfEarlyInvestor[_address] = true;\r\n        emit EventEarlyInvestor(_address, true);\r\n        lockupHolderMap[_address] = LockupHolderDetails({\r\n                transferPercent: _transferPercent,\r\n                transferDays: 1,\r\n                transferPercentTotal: _transferPercentTotal,\r\n                transferDaysTotal: 365,\r\n                transferLastTransaction: 0,\r\n                transferTotalSpent: 0,\r\n                transferPostDate: now,\r\n                reset: true\r\n                });\r\n     }\r\n     \r\n     // Add owners\r\n     function addtoOwners(address _address) public onlyOwner{\r\n        addOfOwners[_address] = true;\r\n     }\r\n   \r\n     // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalsupply;\r\n     }\r\n    \r\n     // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n     \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(address _from, address _to, uint256 _amount)public returns (bool success) {\r\n         require( _to != 0x0);\r\n         checkTransfer = false;\r\n         \r\n         if(addOfOwners[_from]) {\r\n             checkTransfer = true;\r\n         } else\r\n         if(addOfPrivateSale[_from]) {\r\n             require(checkTransferFunctionPrivateSale(_from, _to, _amount));\r\n         } else\r\n         if(addOfContributors[_from]) {\r\n             checkTransfer = true;\r\n         } else\r\n         if(addOfContributors2[_from] || addOfTechOperation[_from] || addOfMarketingBusinessDev[_from] || addOfEarlyInvestor[_from]) {\r\n             require(checkTransferFunction(_from, _to, _amount));\r\n         } \r\n         \r\n         require(checkTransfer == true);\r\n         require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n         balances[_from] = (balances[_from]).sub(_amount);\r\n         allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n         balances[_to] = (balances[_to]).add(_amount);\r\n         Transfer(_from, _to, _amount);\r\n         return true;\r\n     }\r\n     \r\n     function checkTransferFunction(address _from, address _to, uint256 _amount) internal returns (bool success) {\r\n             \r\n             require(now > lockup_enddate);\r\n             \r\n             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\r\n             transferPostDate = lockupHolderMap[_from].transferPostDate;\r\n             \r\n             if(now >= transferPostDate + transferDaysTotal) {\r\n                 lockupHolderMap[_from].transferPostDate = lockupHolderMap[_from].transferPostDate + transferDaysTotal;\r\n                 lockupHolderMap[_from].transferTotalSpent = 0;\r\n             }\r\n             \r\n             transferPercent = lockupHolderMap[_from].transferPercent;\r\n             transferPercentTotal = lockupHolderMap[_from].transferPercentTotal;\r\n             transferDays = lockupHolderMap[_from].transferDays * 86400;\r\n             transferDaysTotal = lockupHolderMap[_from].transferDaysTotal * 86400;\r\n             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\r\n             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\r\n             transferPostDate = lockupHolderMap[_from].transferPostDate;\r\n             \r\n             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\r\n             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\r\n             \r\n             require(now >= transferLastTransaction + transferDays);\r\n             require((transferTotalSpent * 10 ** 18) <= ((_totalsupply).mul(transferPercentTotal)).div(100));\r\n             require(now <= transferPostDate + transferDaysTotal);\r\n             \r\n             lockupHolderMap[_from].transferLastTransaction = now;\r\n             lockupHolderMap[_from].transferTotalSpent += _amount;\r\n             \r\n             checkTransfer = true;\r\n             return true;\r\n     }\r\n     \r\n     function checkTransferFunctionPrivateSale(address _from, address _to, uint256 _amount) internal returns (bool success) {\r\n             \r\n             require(stage == Stages.LOCKUPENDED);\r\n             require(now > lockup_enddate);\r\n            \r\n             transferPercent = lockupHolderMap[_from].transferPercent;\r\n             transferDays = lockupHolderMap[_from].transferDays * 86400;\r\n             transferLastTransaction = lockupHolderMap[_from].transferLastTransaction;\r\n             transferTotalSpent = lockupHolderMap[_from].transferTotalSpent;\r\n             \r\n             require((_amount * 10 ** 18) <= ((_totalsupply).mul(transferPercent)).div(100));\r\n             \r\n             require(now >= transferLastTransaction + transferDays);\r\n             \r\n             lockupHolderMap[_from].transferLastTransaction = now;\r\n             \r\n             checkTransfer = true;\r\n             return true;\r\n     }\r\n     \r\n    \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n     \r\n     \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n     }\r\n\r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n     }\r\n    \r\n     // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\r\n        require( _to != 0x0);       \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(address(this), _to, _amount);\r\n        return true;\r\n     }\r\n \r\n     // Drain all coins \r\n     function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n     }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockupEndDate\",\"type\":\"uint256\"}],\"name\":\"start_LOCKUP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoEarlyInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockup_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockup_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoMarketingBusinessDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addtoOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_received\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoTechOperation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end_LOCKUP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoContributos2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_transferPercent\",\"type\":\"uint256\"},{\"name\":\"_transferPercentTotal\",\"type\":\"uint256\"}],\"name\":\"addtoContributos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_PrivateSale\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventPrivateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_Contributors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventContributors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_Contributors2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventContributors2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_TechOperation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventTechOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_MarketingBusinessDev\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventMarketingBusinessDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_EarlyInvestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"EventEarlyInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KNOWToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c3504a42bca138fdf7c27d7b0d694eb3a2cadd14fb6f236ca52ecd0936de51d"}]}