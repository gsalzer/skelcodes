{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/MarketDataStorage.sol\r\n\r\ncontract MarketDataStorage is Ownable {\r\n    // vars\r\n    address[] supportedTokens;\r\n    mapping (address => bool) public supportedTokensMapping; // same as supportedTokens just in a mapping for quicker lookup\r\n    mapping (address => uint[]) public currentTokenMarketData; // represent the last token data\r\n    mapping (bytes32 => bool) internal validIds; // for Oraclize callbacks\r\n    address dataUpdater; // who is allowed to update data\r\n\r\n    // modifiers\r\n    modifier updaterOnly() {\r\n        require(\r\n            msg.sender == dataUpdater,\r\n            \"updater not allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier supportedTokenOnly(address token_address) {\r\n        require(\r\n            isTokenSupported(token_address),\r\n            \"Can't update a non supported token\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor (address[] _supportedTokens, address _dataUpdater) Ownable() public {\r\n        dataUpdater = _dataUpdater;\r\n\r\n        // to populate supportedTokensMapping\r\n        for (uint i=0; i<_supportedTokens.length; i++) {\r\n            addSupportedToken(_supportedTokens[i]);\r\n        }\r\n    }\r\n\r\n    function numberOfSupportedTokens() view public returns (uint) {\r\n        return supportedTokens.length;\r\n    }\r\n\r\n    function getSupportedTokenByIndex(uint idx) view public returns (address token_address, bool supported_status) {\r\n        address token = supportedTokens[idx];\r\n        return (token, supportedTokensMapping[token]);\r\n    }\r\n\r\n    function getMarketDataByTokenIdx(uint idx) view public returns (address token_address, uint volume, uint depth, uint marketcap) {\r\n        (address token, bool status) = getSupportedTokenByIndex(idx);\r\n\r\n        (uint _volume, uint _depth, uint _marketcap) = getMarketData(token);\r\n\r\n        return (token, _volume, _depth, _marketcap);\r\n    }\r\n\r\n    function getMarketData(address token_address) view public returns (uint volume, uint depth, uint marketcap) {\r\n        // we do not throw an exception for non supported tokens, simply return 0,0,0\r\n        if (!supportedTokensMapping[token_address]) {\r\n            return (0,0,0);\r\n        }\r\n\r\n        uint[] memory data = currentTokenMarketData[token_address];\r\n        return (data[0], data[1], data[2]);\r\n    }\r\n\r\n    function addSupportedToken(address token_address) public onlyOwner {\r\n        require(\r\n            isTokenSupported(token_address) == false,\r\n            \"Token already added\"\r\n        );\r\n\r\n        supportedTokens.push(token_address);\r\n        supportedTokensMapping[token_address] = true;\r\n\r\n        currentTokenMarketData[token_address] = [0,0,0]; // until next update\r\n    }\r\n\r\n    function isTokenSupported(address token_address) view public returns (bool) {\r\n        return supportedTokensMapping[token_address];\r\n    }\r\n\r\n    // update Data\r\n    function updateMarketData(address token_address,\r\n        uint volume,\r\n        uint depth,\r\n        uint marketcap)\r\n    external\r\n    updaterOnly\r\n    supportedTokenOnly(token_address) {\r\n        currentTokenMarketData[token_address] = [volume,depth,marketcap];\r\n    }\r\n}\r\n\r\n// File: contracts/WarOfTokens.sol\r\n\r\ncontract WarOfTokens is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    struct AttackInfo {\r\n        address attacker;\r\n        address attackee;\r\n        uint attackerScore;\r\n        uint attackeeScore;\r\n        bytes32 attackId;\r\n        bool completed;\r\n        uint hodlSpellBlockNumber;\r\n        mapping (address => uint256) attackerWinnings;\r\n        mapping (address => uint256) attackeeWinnings;\r\n    }\r\n\r\n    // events\r\n    event Deposit(address token, address user, uint amount, uint balance);\r\n    event Withdraw(address token, address user, uint amount, uint balance);\r\n    event UserActiveStatusChanged(address user, bool isActive);\r\n    event Attack (\r\n        address indexed attacker,\r\n        address indexed attackee,\r\n        bytes32 attackId,\r\n        uint attackPrizePercent,\r\n        uint base,\r\n        uint hodlSpellBlockNumber\r\n    );\r\n    event AttackCompleted (\r\n        bytes32 indexed attackId,\r\n        address indexed winner,\r\n        uint attackeeActualScore\r\n    );\r\n\r\n    // vars\r\n    /**\r\n    *   mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    */\r\n    mapping (address => mapping (address => uint256)) public tokens;\r\n    mapping (address => bool) public activeUsers;\r\n    address public cdtTokenAddress;\r\n    uint256 public minCDTToParticipate;\r\n    MarketDataStorage public marketDataOracle;\r\n    uint public maxAttackPrizePercent; // if attacker and attackee have the same score, whats the max % of their assets will be as prize\r\n    uint attackPricePrecentBase = 1000; // since EVM doesn't support floating numbers yet.\r\n    uint public maxOpenAttacks = 5;\r\n    mapping (bytes32 => AttackInfo) public attackIdToInfo;\r\n    mapping (address => mapping(address => bytes32)) public userToUserToAttackId;\r\n    mapping (address => uint) public cntUserAttacks; // keeps track of how many un-completed attacks user has\r\n\r\n\r\n    // modifiers\r\n    modifier activeUserOnly(address user) {\r\n        require(\r\n            isActiveUser(user),\r\n            \"User not active\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _cdtTokenAddress,\r\n        uint256 _minCDTToParticipate,\r\n        address _marketDataOracleAddress,\r\n        uint _maxAttackPrizeRatio)\r\n    Pausable()\r\n    public {\r\n        cdtTokenAddress = _cdtTokenAddress;\r\n        minCDTToParticipate = _minCDTToParticipate;\r\n        marketDataOracle = MarketDataStorage(_marketDataOracleAddress);\r\n        setMaxAttackPrizePercent(_maxAttackPrizeRatio);\r\n    }\r\n\r\n    // don't allow default\r\n    function() public {\r\n        revert(\"Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent\");\r\n    }\r\n\r\n    // user management\r\n    function isActiveUser(address user) view public returns (bool) {\r\n        return activeUsers[user];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    //\r\n    //  balances management\r\n    //\r\n    ////////////////////////////////////////////////////////\r\n\r\n    // taken from https://etherscan.io/address/0x8d12a197cb00d4747a1fe03395095ce2a5cc6819#code\r\n    /**\r\n    *   disabled when contract is paused\r\n    */\r\n    function deposit() payable external whenNotPaused {\r\n        tokens[0][msg.sender] = tokens[0][msg.sender].add(msg.value);\r\n        emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\r\n\r\n        _validateUserActive(msg.sender);\r\n    }\r\n\r\n    /**\r\n    *   disabled when contract is paused\r\n    */\r\n    function depositToken(address token, uint amount) external whenNotPaused {\r\n        //remember to call StandardToken(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        require(\r\n            token!=0,\r\n            \"unrecognized token\"\r\n        );\r\n        assert(StandardToken(token).transferFrom(msg.sender, this, amount));\r\n        tokens[token][msg.sender] =  tokens[token][msg.sender].add(amount);\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n\r\n        _validateUserActive(msg.sender);\r\n    }\r\n\r\n    function withdraw(uint amount) external {\r\n        tokens[0][msg.sender] = tokens[0][msg.sender].sub(amount);\r\n        assert(msg.sender.call.value(amount)());\r\n        emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n\r\n        _validateUserActive(msg.sender);\r\n    }\r\n\r\n    function withdrawToken(address token, uint amount) external {\r\n        require(\r\n            token!=0,\r\n            \"unrecognized token\"\r\n        );\r\n        tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\r\n        assert(StandardToken(token).transfer(msg.sender, amount));\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n\r\n        _validateUserActive(msg.sender);\r\n    }\r\n\r\n    function balanceOf(address token, address user) view public returns (uint) {\r\n        return tokens[token][user];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    //\r\n    //  combat functions\r\n    //\r\n    ////////////////////////////////////////////////////////\r\n    function setMaxAttackPrizePercent(uint newAttackPrize) onlyOwner public {\r\n        require(\r\n            newAttackPrize < 5,\r\n            \"max prize is 5 percent of funds\"\r\n        );\r\n        maxAttackPrizePercent = newAttackPrize;\r\n    }\r\n\r\n    function setMaxOpenAttacks(uint newValue) onlyOwner public {\r\n        maxOpenAttacks = newValue;\r\n    }\r\n\r\n    function openAttacksCount(address user) view public returns (uint) {\r\n        return cntUserAttacks[user];\r\n    }\r\n\r\n    function isTokenSupported(address token_address) view public returns (bool) {\r\n        return marketDataOracle.isTokenSupported(token_address);\r\n    }\r\n\r\n    function getUserScore(address user)\r\n    view\r\n    public\r\n    whenNotPaused\r\n    returns (uint) {\r\n        uint cnt_supported_tokens = marketDataOracle.numberOfSupportedTokens();\r\n        uint aggregated_score = 0;\r\n        for (uint i=0; i<cnt_supported_tokens; i++) {\r\n            (address token_address, uint volume, uint depth, uint marketcap) = marketDataOracle.getMarketDataByTokenIdx(i);\r\n            uint256 user_balance = balanceOf(token_address, user);\r\n\r\n            aggregated_score = aggregated_score + _calculateScore(user_balance, volume, depth, marketcap);\r\n        }\r\n\r\n        return aggregated_score;\r\n    }\r\n\r\n    function _calculateScore(uint256 balance, uint volume, uint depth, uint marketcap) pure internal returns (uint) {\r\n        return balance * volume * depth * marketcap;\r\n    }\r\n\r\n    function attack(address attackee)\r\n    external\r\n    activeUserOnly(msg.sender)\r\n    activeUserOnly(attackee)\r\n    {\r\n        require(\r\n            msg.sender != attackee,\r\n            \"Can't attack yourself\"\r\n        );\r\n        require(\r\n            userToUserToAttackId[msg.sender][attackee] == 0,\r\n            \"Cannot attack while pending attack exists, please complete attack\"\r\n        );\r\n        require(\r\n            openAttacksCount(msg.sender) < maxOpenAttacks,\r\n            \"Too many open attacks for attacker\"\r\n        );\r\n        require(\r\n            openAttacksCount(attackee) < maxOpenAttacks,\r\n            \"Too many open attacks for attackee\"\r\n        );\r\n\r\n        (uint attackPrizePercent, uint attackerScore, uint attackeeScore) = attackPrizeRatio(attackee);\r\n\r\n        AttackInfo memory attackInfo = AttackInfo(\r\n            msg.sender,\r\n            attackee,\r\n            attackerScore,\r\n            attackeeScore,\r\n            sha256(abi.encodePacked(msg.sender, attackee, block.blockhash(block.number-1))), // attack Id\r\n            false,\r\n            block.number // block after insertion of attack tx the complete function can be called\r\n        );\r\n        _registerAttack(attackInfo);\r\n\r\n        _calculateWinnings(attackIdToInfo[attackInfo.attackId], attackPrizePercent);\r\n\r\n        emit Attack(\r\n            attackInfo.attacker,\r\n            attackInfo.attackee,\r\n            attackInfo.attackId,\r\n            attackPrizePercent,\r\n            attackPricePrecentBase,\r\n            attackInfo.hodlSpellBlockNumber\r\n        );\r\n    }\r\n\r\n    /**\r\n    *   Returns the % of the attacker/ attackee funds are for winning/ loosing\r\n    *   we multiple the values by a base since solidity does not support\r\n    *   floating values.\r\n    */\r\n    function attackPrizeRatio(address attackee)\r\n    view\r\n    public\r\n    returns (uint attackPrizePercent, uint attackerScore, uint attackeeScore) {\r\n        uint _attackerScore = getUserScore(msg.sender);\r\n        require(\r\n            _attackerScore > 0,\r\n            \"attacker score is 0\"\r\n        );\r\n        uint _attackeeScore = getUserScore(attackee);\r\n        require(\r\n            _attackeeScore > 0,\r\n            \"attackee score is 0\"\r\n        );\r\n\r\n        uint howCloseAreThey = _attackeeScore.mul(attackPricePrecentBase).div(_attackerScore);\r\n\r\n        return (howCloseAreThey, _attackerScore, _attackeeScore);\r\n    }\r\n\r\n    function attackerPrizeByToken(bytes32 attackId, address token_address) view public returns (uint256) {\r\n        return attackIdToInfo[attackId].attackerWinnings[token_address];\r\n    }\r\n\r\n    function attackeePrizeByToken(bytes32 attackId, address token_address) view public returns (uint256) {\r\n        return attackIdToInfo[attackId].attackeeWinnings[token_address];\r\n    }\r\n\r\n    // anyone can call the complete attack function.\r\n    function completeAttack(bytes32 attackId) public {\r\n        AttackInfo storage attackInfo = attackIdToInfo[attackId];\r\n\r\n        (address winner, uint attackeeActualScore) = getWinner(attackId);\r\n\r\n        // distribuite winngs\r\n        uint cnt_supported_tokens = marketDataOracle.numberOfSupportedTokens();\r\n        for (uint i=0; i<cnt_supported_tokens; i++) {\r\n            (address token_address, bool status) = marketDataOracle.getSupportedTokenByIndex(i);\r\n\r\n            if (attackInfo.attacker == winner) {\r\n                uint winnings = attackInfo.attackerWinnings[token_address];\r\n\r\n                if (winnings > 0) {\r\n                    tokens[token_address][attackInfo.attackee] = tokens[token_address][attackInfo.attackee].sub(winnings);\r\n                    tokens[token_address][attackInfo.attacker] = tokens[token_address][attackInfo.attacker].add(winnings);\r\n                }\r\n            }\r\n            else {\r\n                uint loosings = attackInfo.attackeeWinnings[token_address];\r\n\r\n                if (loosings > 0) {\r\n                    tokens[token_address][attackInfo.attacker] = tokens[token_address][attackInfo.attacker].sub(loosings);\r\n                    tokens[token_address][attackInfo.attackee] = tokens[token_address][attackInfo.attackee].add(loosings);\r\n                }\r\n            }\r\n        }\r\n\r\n        // cleanup\r\n        _unregisterAttack(attackId);\r\n\r\n        emit AttackCompleted(\r\n            attackId,\r\n            winner,\r\n            attackeeActualScore\r\n        );\r\n    }\r\n\r\n    function getWinner(bytes32 attackId) public view returns(address winner, uint attackeeActualScore) {\r\n        require(\r\n            block.number >= attackInfo.hodlSpellBlockNumber,\r\n            \"attack can not be completed at this block, please wait\"\r\n        );\r\n\r\n        AttackInfo storage attackInfo = attackIdToInfo[attackId];\r\n\r\n        //  block.blockhash records only for the recent 256 blocks\r\n        //  https://solidity.readthedocs.io/en/v0.3.1/units-and-global-variables.html#block-and-transaction-properties\r\n        //  So... attacker has 256 blocks to call completeAttack\r\n        //  otherwise win goes automatically to the attackee\r\n        if (block.number - attackInfo.hodlSpellBlockNumber >= 256) {\r\n            return (attackInfo.attackee, attackInfo.attackeeScore);\r\n        }\r\n\r\n        bytes32 blockHash = block.blockhash(attackInfo.hodlSpellBlockNumber);\r\n        return _calculateWinnerBasedOnEntropy(attackInfo, blockHash);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    //\r\n    //  internal functions\r\n    //\r\n    ////////////////////////////////////////////////////////\r\n\r\n    // validates user active status\r\n    function _validateUserActive(address user) private {\r\n        // get CDT balance\r\n        uint256 cdt_balance = balanceOf(cdtTokenAddress, user);\r\n\r\n        bool new_active_state = cdt_balance >= minCDTToParticipate;\r\n        bool current_active_state = activeUsers[user]; // could be false if never set up\r\n\r\n        if (current_active_state != new_active_state) { // only emit on activity change\r\n            emit UserActiveStatusChanged(user, new_active_state);\r\n        }\r\n\r\n        activeUsers[user] = new_active_state;\r\n    }\r\n\r\n    function _registerAttack(AttackInfo attackInfo) internal {\r\n        userToUserToAttackId[attackInfo.attacker][attackInfo.attackee] = attackInfo.attackId;\r\n        userToUserToAttackId[attackInfo.attackee][attackInfo.attacker] = attackInfo.attackId;\r\n\r\n        attackIdToInfo[attackInfo.attackId] = attackInfo;\r\n\r\n        // update open attacks counter\r\n        cntUserAttacks[attackInfo.attacker] = cntUserAttacks[attackInfo.attacker].add(1);\r\n        cntUserAttacks[attackInfo.attackee] = cntUserAttacks[attackInfo.attackee].add(1);\r\n    }\r\n\r\n    function _unregisterAttack(bytes32 attackId) internal {\r\n        AttackInfo storage attackInfo = attackIdToInfo[attackId];\r\n\r\n        cntUserAttacks[attackInfo.attacker] = cntUserAttacks[attackInfo.attacker].sub(1);\r\n        cntUserAttacks[attackInfo.attackee] = cntUserAttacks[attackInfo.attackee].sub(1);\r\n\r\n        delete userToUserToAttackId[attackInfo.attacker][attackInfo.attackee];\r\n        delete userToUserToAttackId[attackInfo.attackee][attackInfo.attacker];\r\n\r\n        delete attackIdToInfo[attackId];\r\n    }\r\n\r\n    /**\r\n       if the attacker has a higher/ equal score to the attackee than the prize will be at max maxAttackPrizePercent\r\n       if the attacker has lower score than the prize can be higher than maxAttackPrizePercent since he takes a bigger risk\r\n   */\r\n    function _calculateWinnings(AttackInfo storage attackInfo, uint attackPrizePercent) internal {\r\n        // get all user balances and calc winnings from that\r\n        uint cnt_supported_tokens = marketDataOracle.numberOfSupportedTokens();\r\n\r\n        uint actualPrizeRation = attackPrizePercent\r\n        .mul(maxAttackPrizePercent);\r\n\r\n\r\n        for (uint i=0; i<cnt_supported_tokens; i++) {\r\n            (address token_address, bool status) = marketDataOracle.getSupportedTokenByIndex(i);\r\n\r\n            if (status) {\r\n                // attacker\r\n                uint256 _b1 = balanceOf(token_address, attackInfo.attacker);\r\n                if (_b1 > 0) {\r\n                    uint256 _w1 = _b1.mul(actualPrizeRation).div(attackPricePrecentBase * 100); // 100 since maxAttackPrizePercent has 100 basis\r\n                    attackInfo.attackeeWinnings[token_address] = _w1;\r\n                }\r\n\r\n                // attackee\r\n                uint256 _b2 = balanceOf(token_address, attackInfo.attackee);\r\n                if (_b2 > 0) {\r\n                    uint256 _w2 = _b2.mul(actualPrizeRation).div(attackPricePrecentBase * 100); // 100 since maxAttackPrizePercent has 100 basis\r\n                    attackInfo.attackerWinnings[token_address] = _w2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //\r\n    // winner logic:\r\n    //  1) get difference in scores between players times 2\r\n    //  2) get hodl spell block number (decided in the attack call), do hash % {result of step 1}\r\n    //  3) block hash mod 10 to decide direction\r\n    //  4) if result step 3 > 1 than we add result step 2 to attackee's score (80% chance for this to happen)\r\n    //  5) else reduce attacke's score by result of step 2\r\n    //\r\n    //\r\n    //\r\n    // Since the attacker decides if to attack or not we give the attackee a defending chance by\r\n    // adopting the random HODL spell.\r\n    // if the attacker has a higher score than attackee than the HODL spell will randomly add (most probably) to the\r\n    // attackee score. this might or might not be enought to beat the attacker.\r\n    //\r\n    // if the attacker has a lower score than the attackee than he takes a bigger chance in attacking and he will get a bigger reward.\r\n    //\r\n    //\r\n    // just like in crypto life, HODLing has its risks and rewards. Be carefull in your trading decisions!\r\n    function _calculateWinnerBasedOnEntropy(AttackInfo storage attackInfo, bytes32 entropy) view internal returns(address, uint) {\r\n        uint attackeeActualScore = attackInfo.attackeeScore;\r\n        uint modul = _absSubtraction(attackInfo.attackerScore, attackInfo.attackeeScore);\r\n        modul = modul.mul(2); // attacker score is now right in the middle of the range\r\n        uint hodlSpell = uint(entropy) % modul;\r\n        uint direction = uint(entropy) % 10;\r\n        uint directionThreshold = 1;\r\n\r\n        // direction is 80% chance positive (meaning adding the hodl spell)\r\n        // to the weakest player\r\n        if (attackInfo.attackerScore < attackInfo.attackeeScore) {\r\n            directionThreshold = 8;\r\n        }\r\n\r\n        // winner calculation\r\n        if (direction > directionThreshold) {\r\n            attackeeActualScore = attackeeActualScore.add(hodlSpell);\r\n        }\r\n        else {\r\n            attackeeActualScore = _safeSubtract(attackeeActualScore, hodlSpell);\r\n        }\r\n        if (attackInfo.attackerScore > attackeeActualScore) { return (attackInfo.attacker, attackeeActualScore); }\r\n        else { return (attackInfo.attackee, attackeeActualScore); }\r\n    }\r\n\r\n    // will subtract 2 uint and returns abs(result).\r\n    // example: a=2,b=3 returns 1\r\n    // example: a=3,b=2 returns 1\r\n    function _absSubtraction(uint a, uint b) pure internal returns (uint) {\r\n        if (b>a) {\r\n            return b-a;\r\n        }\r\n\r\n        return a-b;\r\n    }\r\n\r\n    // example: a=2,b=3 returns 0\r\n    // example: a=3,b=2 returns 1\r\n    function _safeSubtract(uint a, uint b) pure internal returns (uint) {\r\n        if (b > a) {\r\n            return 0;\r\n        }\r\n\r\n        return a-b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minCDTToParticipate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxOpenAttacks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attackIdToInfo\",\"outputs\":[{\"name\":\"attacker\",\"type\":\"address\"},{\"name\":\"attackee\",\"type\":\"address\"},{\"name\":\"attackerScore\",\"type\":\"uint256\"},{\"name\":\"attackeeScore\",\"type\":\"uint256\"},{\"name\":\"attackId\",\"type\":\"bytes32\"},{\"name\":\"completed\",\"type\":\"bool\"},{\"name\":\"hodlSpellBlockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attackId\",\"type\":\"bytes32\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"attackeeActualScore\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToUserToAttackId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isActiveUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdtTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxOpenAttacks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"openAttacksCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attackee\",\"type\":\"address\"}],\"name\":\"attackPrizeRatio\",\"outputs\":[{\"name\":\"attackPrizePercent\",\"type\":\"uint256\"},{\"name\":\"attackerScore\",\"type\":\"uint256\"},{\"name\":\"attackeeScore\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attackId\",\"type\":\"bytes32\"},{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"attackeePrizeByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAttackPrize\",\"type\":\"uint256\"}],\"name\":\"setMaxAttackPrizePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"attackId\",\"type\":\"bytes32\"}],\"name\":\"completeAttack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"attackee\",\"type\":\"address\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cntUserAttacks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attackId\",\"type\":\"bytes32\"},{\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"attackerPrizeByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAttackPrizePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketDataOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cdtTokenAddress\",\"type\":\"address\"},{\"name\":\"_minCDTToParticipate\",\"type\":\"uint256\"},{\"name\":\"_marketDataOracleAddress\",\"type\":\"address\"},{\"name\":\"_maxAttackPrizeRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"UserActiveStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"attackee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attackId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"attackPrizePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hodlSpellBlockNumber\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attackId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attackeeActualScore\",\"type\":\"uint256\"}],\"name\":\"AttackCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WarOfTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000177d39ac676ed1c67a2b268ad7f1e58826e5b0af00000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000b42e1e71276822fceaa170017821bc8e4f08029d0000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://eafba74c857966f008f038868cb1902f116b27f6ab9e0487cbd6fe20ff0daf8b"}]}