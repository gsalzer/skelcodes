{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4 .25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract X2month {\r\n\r\n  using SafeMath\r\n  for uint;\r\n  // array containing information about beneficiaries\r\n  mapping(address => uint) public userDeposit;\r\n  //array containing information about the time of payment\r\n  mapping(address => uint) public userTime;\r\n  //array containing information on interest paid\r\n  mapping(address=>uint) public persentWithdraw;\r\n  //fund fo transfer percent\r\n  address public projectFund = 0x15e3aAD84394012f450d7A6965f2f4C59Ca7071a;\r\n  //wallet for a charitable foundation\r\n  address public charityFund = 0x6c3607D37A000d7879F02b98c59376c7DAc91151;\r\n  //percentage deducted to the advertising fund\r\n  uint projectPercent = 5;\r\n  //percent for a charitable foundation\r\n  uint charityPercent = 1;\r\n  //min payment 0.01 ether\r\n  uint public minPayment = 1 finney;\r\n  //time through which you can take dividends\r\n  uint chargingTime = 1 hours;\r\n  //persent 0.175 per hour\r\n  uint public startPercent = 175;\r\n  uint public lowPersent = 200;\r\n  uint public middlePersent = 225;\r\n  uint public highPersent = 250;\r\n  //interest rate increase steps\r\n  uint public stepLow = 1000 ether;\r\n  uint public stepMiddle = 2500 ether;\r\n  uint public stepHigh = 5000 ether;\r\n  uint countOfInvestors = 0;\r\n  \r\n  modifier isIssetUser() {\r\n    require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n    _;\r\n  }\r\n\r\n  modifier timePayment() {\r\n    require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\r\n    _;\r\n  }\r\n \r\n  function collectPercent() isIssetUser timePayment internal {\r\n    //if the user received 200% or more of his contribution, delete the user\r\n    if( (userDeposit[msg.sender].mul(2)) <= persentWithdraw[msg.sender]){\r\n        userDeposit[msg.sender]=0;\r\n        userTime[msg.sender]=0;\r\n        persentWithdraw[msg.sender]=0;\r\n    }else{\r\n       uint payout = payoutAmount();\r\n       userTime[msg.sender] = now;    \r\n       persentWithdraw[msg.sender]+=payout;    \r\n       msg.sender.transfer(payout); \r\n    }\r\n  }\r\n  \r\n  function persentRate()public view returns(uint){\r\n      //get contract balance\r\n      uint balance = address(this).balance;\r\n      //calculate persent rate\r\n      if(balance < stepLow){return(startPercent);}\r\n      if(balance>=stepLow && balance<stepMiddle){return(lowPersent);}\r\n      if(balance>=stepMiddle && balance<stepHigh){return(middlePersent);}\r\n      if(balance>=stepHigh){return(highPersent);}\r\n  }\r\n  \r\n  function payoutAmount()public view returns(uint){\r\n      uint persent = persentRate();\r\n      uint rate = userDeposit[msg.sender].mul(persent).div(100000);\r\n      uint interestRate=now.sub(userTime[msg.sender]).div(chargingTime);\r\n      uint withdrawalAmount = rate.mul(interestRate);\r\n      return(withdrawalAmount);\r\n  }\r\n\r\n  function makeDeposit() private {\r\n    \r\n    if (msg.value > 0) {\r\n      \r\n      if(userDeposit[msg.sender]==0){\r\n          countOfInvestors+=1;\r\n      }\r\n      \r\n      if(userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)){\r\n          collectPercent();\r\n      }\r\n\r\n      userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\r\n      userTime[msg.sender] = now;\r\n      //sending money for advertising\r\n      projectFund.transfer(msg.value.mul(projectPercent).div(100));\r\n      //sending money to charity\r\n      charityFund.transfer(msg.value.mul(charityPercent).div(100));\r\n    } else {\r\n      collectPercent();\r\n    }\r\n  }\r\n  \r\n  function returnDeposit()isIssetUser private{\r\n      \r\n      require(userDeposit[msg.sender] > persentWithdraw[msg.sender], 'You have already repaid your deposit');\r\n      //userDeposit-persentWithdraw-(userDeposit*6/100)\r\n      uint withdrawalAmount = userDeposit[msg.sender].sub(persentWithdraw[msg.sender]).sub(userDeposit[msg.sender].mul(6).div(100));\r\n      //delete user record\r\n      userDeposit[msg.sender] = 0;\r\n      userTime[msg.sender] = 0;\r\n      persentWithdraw[msg.sender] = 0;\r\n      \r\n      msg.sender.transfer(withdrawalAmount);\r\n  }\r\n\r\n  function() external payable {\r\n    if(msg.value == 0.00000112 ether){\r\n        returnDeposit();\r\n    }else{\r\n        makeDeposit();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"X2month","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7c6426cfc21883914f65f0ffd73eaae0a8c81f4182e0e1c83b13e40f5ae7c518"}]}