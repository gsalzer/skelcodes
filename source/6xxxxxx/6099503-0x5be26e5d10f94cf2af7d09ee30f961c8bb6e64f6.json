{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        assert(b <= a);\r\n        c = a - b;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external; \r\n}\r\n\r\ncontract WhaleConfig {\r\n    using SafeMath for uint;\r\n\r\n    string internal constant TOKEN_NAME     = \"Whale Chain\";\r\n    string internal constant TOKEN_SYMBOL   = \"WAT\";\r\n    uint8  internal constant TOKEN_DECIMALS = 18;\r\n    uint   internal constant INITIAL_SUPPLY = 20*1e8 * 10 ** uint(TOKEN_DECIMALS);\r\n}\r\n\r\ncontract Ownable is WhaleConfig {\r\n    address public ceo;\r\n    \r\n    event LogChangeCEO(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == ceo);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        ceo = msg.sender;\r\n    }\r\n    \r\n    function changeCEO(address _owner) onlyOwner public returns (bool) {\r\n        require(_owner != address(0));\r\n        \r\n        emit LogChangeCEO(ceo, _owner);\r\n        ceo = _owner;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function isOwner(address _owner) internal view returns (bool) {\r\n        return ceo == _owner;\r\n    }\r\n}\r\n\r\ncontract Lockable is Ownable {\r\n    mapping (address => bool) public locked;\r\n    \r\n    event LogLockup(address indexed target);\r\n    \r\n    function lockup(address _target) onlyOwner public returns (bool) {\r\n\t    require( !isOwner(_target) );\r\n\r\n        locked[_target] = true;\r\n        emit LogLockup(_target);\r\n        return true;\r\n    }\r\n    \r\n    function isLockup(address _target) internal view returns (bool) {\r\n        if(true == locked[_target])\r\n            return true;\r\n    }\r\n}\r\n\r\ncontract TokenERC20 {\r\n    using SafeMath for uint;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    \r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    event ERC20Token(address indexed owner, string name, string symbol, uint8 decimals, uint supply);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event TransferFrom(address indexed from, address indexed to, address indexed spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor(\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        uint _initialSupply\r\n    ) public {\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _tokenDecimals;\r\n        totalSupply = _initialSupply;\r\n        \r\n        balanceOf[msg.sender] = totalSupply;\r\n        \r\n        emit ERC20Token(msg.sender, name, symbol, decimals, totalSupply);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(SafeMath.add(balanceOf[_to], _value) > balanceOf[_to]);\r\n        \r\n        uint previousBalances = SafeMath.add(balanceOf[_from], balanceOf[_to]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        assert(SafeMath.add(balanceOf[_from], balanceOf[_to]) == previousBalances);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        \r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        \r\n        emit TransferFrom(_from, _to, msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract WhaleToken is Lockable, TokenERC20 {\r\n    string public version = \"v1.0.1\";\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event LogFrozenAccount(address indexed target, bool frozen);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogMining(address indexed recipient, uint value);\r\n    event LogWithdrawContractToken(address indexed owner, uint value);\r\n    \r\n    constructor() TokenERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, INITIAL_SUPPLY) public {}\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool) {\r\n        require(!frozenAccount[_from]); \r\n        require(!frozenAccount[_to]);\r\n        require(!isLockup(_from));\r\n        require(!isLockup(_to));\r\n\r\n        return super._transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(!isLockup(msg.sender));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function freezeAccount(address _target) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(!isOwner(_target));\r\n        require(!frozenAccount[_target]);\r\n\r\n        frozenAccount[_target] = true;\r\n\r\n        emit LogFrozenAccount(_target, true);\r\n        return true;\r\n    }\r\n    \r\n    function unfreezeAccount(address _target) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(frozenAccount[_target]);\r\n\r\n        frozenAccount[_target] = false;\r\n\r\n        emit LogFrozenAccount(_target, false);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawContractToken(uint _value) onlyOwner public returns (bool) {\r\n        _transfer(this, msg.sender, _value);\r\n\r\n        emit LogWithdrawContractToken(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function getContractBalance() public constant returns(uint blance) {\r\n        blance = balanceOf[this];\r\n    }\r\n    \r\n    function getBalance(address _owner) onlyOwner public constant returns(uint blance) {\r\n        blance = balanceOf[_owner];\r\n    }\r\n    \r\n    function () payable public { revert(); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"lockup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"blance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawContractToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"blance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"LogFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogMining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawContractToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"ERC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"LogLockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogChangeCEO\",\"type\":\"event\"}]","ContractName":"WhaleToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6da35b3000898e52234edfd9a86f899520412d498a93a890523dd985f67be21a"}]}