{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    function Destructible() public payable { }\r\n\r\n    /**\r\n    * @dev Transfers the current balance to the owner and terminates the contract.\r\n    */\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable {\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n    * @dev Allows the owner to set a string with their contact information.\r\n    * @param info The contact information to attach to the contract.\r\n    */\r\n    function setContactInformation(string info) onlyOwner public {\r\n        contactInformation = info;\r\n    }\r\n}\r\n\r\n// File: contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function decimals() public view returns(uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/MonethaGateway.sol\r\n\r\n/**\r\n *  @title MonethaGateway\r\n *\r\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\r\n */\r\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    string constant VERSION = \"0.4\";\r\n\r\n    /**\r\n     *  Fee permille of Monetha fee.\r\n     *  1 permille (‰) = 0.1 percent (%)\r\n     *  15‰ = 1.5%\r\n     */\r\n    uint public constant FEE_PERMILLE = 15;\r\n    \r\n    /**\r\n     *  Address of Monetha Vault for fee collection\r\n     */\r\n    address public monethaVault;\r\n\r\n    /**\r\n     *  Account for permissions managing\r\n     */\r\n    address public admin;\r\n\r\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n\r\n    /**\r\n     *  @param _monethaVault Address of Monetha Vault\r\n     */\r\n    function MonethaGateway(address _monethaVault, address _admin) public {\r\n        require(_monethaVault != 0x0);\r\n        monethaVault = _monethaVault;\r\n        \r\n        setAdmin(_admin);\r\n    }\r\n    \r\n    /**\r\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     */\r\n    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\r\n        require(_merchantWallet != 0x0);\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\r\n        \r\n        uint merchantIncome = msg.value.sub(_monethaFee);\r\n\r\n        _merchantWallet.transfer(merchantIncome);\r\n        monethaVault.transfer(_monethaFee);\r\n\r\n        PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    function acceptTokenPayment(address _merchantWallet, uint _monethaFee, address _tokenAddress, uint _value) external onlyMonetha whenNotPaused {\r\n        require(_merchantWallet != 0x0);\r\n\r\n        // Monetha fee cannot be greater than 1.5% of payment\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\r\n\r\n        uint merchantIncome = _value.sub(_monethaFee);\r\n        \r\n        ERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\r\n        ERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\r\n        \r\n        PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\r\n     *  @param newVault New address of Monetha Vault\r\n     */\r\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\r\n        monethaVault = newVault;\r\n    }\r\n\r\n    /**\r\n     *  Allows other monetha account or contract to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n\r\n    /**\r\n     *  setAdmin allows owner to change address of admin.\r\n     *  @param _admin New address of admin\r\n     */\r\n    function setAdmin(address _admin) public onlyOwner {\r\n        require(_admin != 0x0);\r\n        admin = _admin;\r\n    }\r\n}\r\n\r\n// File: contracts/SafeDestructible.sol\r\n\r\n/**\r\n * @title SafeDestructible\r\n * Base contract that can be destroyed by owner.\r\n * Can be destructed if there are no funds on contract balance.\r\n */\r\ncontract SafeDestructible is Ownable {\r\n    function destroy() onlyOwner public {\r\n        require(this.balance == 0);\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n// File: contracts/MerchantWallet.sol\r\n\r\n/**\r\n *  @title MerchantWallet\r\n *  Serves as a public Merchant profile with merchant profile info,\r\n *      payment settings and latest reputation value.\r\n *  Also MerchantWallet accepts payments for orders.\r\n */\r\n\r\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\r\n\r\n    string constant VERSION = \"0.4\";\r\n\r\n    /// Address of merchant's account, that can withdraw from wallet\r\n    address public merchantAccount;\r\n\r\n    /// Address of merchant's fund address.\r\n    address public merchantFundAddress;\r\n\r\n    /// Unique Merchant identifier hash\r\n    bytes32 public merchantIdHash;\r\n\r\n    /// profileMap stores general information about the merchant\r\n    mapping (string=>string) profileMap;\r\n\r\n    /// paymentSettingsMap stores payment and order settings for the merchant\r\n    mapping (string=>string) paymentSettingsMap;\r\n\r\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\r\n    mapping (string=>uint32) compositeReputationMap;\r\n\r\n    /// number of last digits in compositeReputation for fractional part\r\n    uint8 public constant REPUTATION_DECIMALS = 4;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\r\n     */\r\n    modifier onlyMerchant() {\r\n        require(msg.sender == merchantAccount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Fund Address should always be Externally Owned Account and not a contract.\r\n     */\r\n    modifier isEOA(address _fundAddress) {\r\n        uint256 _codeLength;\r\n        assembly {_codeLength := extcodesize(_fundAddress)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\r\n     */\r\n    modifier onlyMerchantOrMonetha() {\r\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\r\n     *  @param _merchantId Merchant identifier\r\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\r\n     */\r\n    function MerchantWallet(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\r\n        require(_merchantAccount != 0x0);\r\n        require(bytes(_merchantId).length > 0);\r\n\r\n        merchantAccount = _merchantAccount;\r\n        merchantIdHash = keccak256(_merchantId);\r\n\r\n        merchantFundAddress = _fundAddress;\r\n    }\r\n\r\n    /**\r\n     *  Accept payment from MonethaGateway\r\n     */\r\n    function () external payable {\r\n    }\r\n\r\n    /**\r\n     *  @return profile info by string key\r\n     */\r\n    function profile(string key) external constant returns (string) {\r\n        return profileMap[key];\r\n    }\r\n\r\n    /**\r\n     *  @return payment setting by string key\r\n     */\r\n    function paymentSettings(string key) external constant returns (string) {\r\n        return paymentSettingsMap[key];\r\n    }\r\n\r\n    /**\r\n     *  @return composite reputation value by string key\r\n     */\r\n    function compositeReputation(string key) external constant returns (uint32) {\r\n        return compositeReputationMap[key];\r\n    }\r\n\r\n    /**\r\n     *  Set profile info by string key\r\n     */\r\n    function setProfile(\r\n        string profileKey,\r\n        string profileValue,\r\n        string repKey,\r\n        uint32 repValue\r\n    ) external onlyOwner\r\n    {\r\n        profileMap[profileKey] = profileValue;\r\n\r\n        if (bytes(repKey).length != 0) {\r\n            compositeReputationMap[repKey] = repValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Set payment setting by string key\r\n     */\r\n    function setPaymentSettings(string key, string value) external onlyOwner {\r\n        paymentSettingsMap[key] = value;\r\n    }\r\n\r\n    /**\r\n     *  Set composite reputation value by string key\r\n     */\r\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\r\n        compositeReputationMap[key] = value;\r\n    }\r\n\r\n    /**\r\n     *  Allows withdrawal of funds to beneficiary address\r\n     */\r\n    function doWithdrawal(address beneficiary, uint amount) private {\r\n        require(beneficiary != 0x0);\r\n        beneficiary.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to withdraw funds to beneficiary address\r\n     */\r\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\r\n        doWithdrawal(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to withdraw funds to it's own account\r\n     */\r\n    function withdraw(uint amount) external onlyMerchant {\r\n        withdrawTo(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\r\n     */\r\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\r\n        doWithdrawal(depositAccount, amount);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\r\n     */\r\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\r\n        require (address(this).balance >= min_amount);\r\n        doWithdrawal(depositAccount, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to change it's account address\r\n     */\r\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\r\n        merchantAccount = newAccount;\r\n    }\r\n\r\n    /**\r\n     *  Allows merchant to change it's fund address.\r\n     */\r\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\r\n        merchantFundAddress = newFundAddress;\r\n    }\r\n}\r\n\r\n// File: contracts/PrivatePaymentProcessor.sol\r\n\r\ncontract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant VERSION = \"0.4\";\r\n\r\n    // Order paid event\r\n    event OrderPaidInEther(\r\n        uint indexed _orderId,\r\n        address indexed _originAddress,\r\n        uint _price,\r\n        uint _monethaFee\r\n    );\r\n\r\n    event OrderPaidInToken(\r\n        uint indexed _orderId,\r\n        address indexed _originAddress,\r\n        address indexed _tokenAddress,\r\n        uint _price,\r\n        uint _monethaFee\r\n    );\r\n\r\n    // Payments have been processed event\r\n    event PaymentsProcessed(\r\n        address indexed _merchantAddress,\r\n        uint _amount,\r\n        uint _fee\r\n    );\r\n\r\n    // PaymentRefunding is an event when refunding initialized\r\n    event PaymentRefunding(\r\n        uint indexed _orderId,\r\n        address indexed _clientAddress,\r\n        uint _amount,\r\n        string _refundReason\r\n    );\r\n\r\n    // PaymentWithdrawn event is fired when payment is withdrawn\r\n    event PaymentWithdrawn(\r\n        uint indexed _orderId,\r\n        address indexed _clientAddress,\r\n        uint amount\r\n    );\r\n\r\n    /// MonethaGateway contract for payment processing\r\n    MonethaGateway public monethaGateway;\r\n\r\n    /// Address of MerchantWallet, where merchant reputation and funds are stored\r\n    MerchantWallet public merchantWallet;\r\n\r\n    /// Merchant identifier hash, that associates with the acceptor\r\n    bytes32 public merchantIdHash;\r\n\r\n    enum WithdrawState {Null, Pending, Withdrawn}\r\n\r\n    struct Withdraw {\r\n        WithdrawState state;\r\n        uint amount;\r\n        address clientAddress;\r\n    }\r\n\r\n    mapping (uint=>Withdraw) public withdrawals;\r\n\r\n    /**\r\n     *  Private Payment Processor sets Monetha Gateway and Merchant Wallet.\r\n     *  @param _merchantId Merchant of the acceptor\r\n     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\r\n     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\r\n     */\r\n    function PrivatePaymentProcessor(\r\n        string _merchantId,\r\n        MonethaGateway _monethaGateway,\r\n        MerchantWallet _merchantWallet\r\n    ) public\r\n    {\r\n        require(bytes(_merchantId).length > 0);\r\n\r\n        merchantIdHash = keccak256(_merchantId);\r\n\r\n        setMonethaGateway(_monethaGateway);\r\n        setMerchantWallet(_merchantWallet);\r\n    }\r\n\r\n    /**\r\n     *  payForOrder is used by order wallet/client to pay for the order\r\n     *  @param _orderId Identifier of the order\r\n     *  @param _originAddress buyer address\r\n     *  @param _monethaFee is fee collected by Monetha\r\n     */\r\n    function payForOrder(\r\n        uint _orderId,\r\n        address _originAddress,\r\n        uint _monethaFee\r\n    ) external payable whenNotPaused\r\n    {\r\n        require(_orderId > 0);\r\n        require(_originAddress != 0x0);\r\n        require(msg.value > 0);\r\n\r\n        address fundAddress;\r\n        fundAddress = merchantWallet.merchantFundAddress();\r\n\r\n        if (fundAddress != address(0)) {\r\n            monethaGateway.acceptPayment.value(msg.value)(fundAddress, _monethaFee);\r\n        } else {\r\n            monethaGateway.acceptPayment.value(msg.value)(merchantWallet, _monethaFee);\r\n        }\r\n\r\n        // log payment event\r\n        emit OrderPaidInEther(_orderId, _originAddress, msg.value, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  payForOrderInTokens is used by order wallet/client to pay for the order\r\n     *  This call requires that token's approve method has been called prior to this.\r\n     *  @param _orderId Identifier of the order\r\n     *  @param _originAddress buyer address\r\n     *  @param _monethaFee is fee collected by Monetha\r\n     *  @param _tokenAddress is tokens address\r\n     *  @param _orderValue is order amount\r\n     */\r\n    function payForOrderInTokens(\r\n        uint _orderId,\r\n        address _originAddress,\r\n        uint _monethaFee,\r\n        address _tokenAddress,\r\n        uint _orderValue\r\n    ) external whenNotPaused\r\n    {\r\n        require(_orderId > 0);\r\n        require(_originAddress != 0x0);\r\n        require(_orderValue > 0);\r\n        require(_tokenAddress != address(0));\r\n\r\n        address fundAddress;\r\n        fundAddress = merchantWallet.merchantFundAddress();\r\n\r\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\r\n        \r\n        ERC20(_tokenAddress).transfer(address(monethaGateway), _orderValue);\r\n\r\n        if (fundAddress != address(0)) {\r\n            monethaGateway.acceptTokenPayment(fundAddress, _monethaFee, _tokenAddress, _orderValue);\r\n        } else {\r\n            monethaGateway.acceptTokenPayment(merchantWallet, _monethaFee, _tokenAddress, _orderValue);\r\n        }\r\n        \r\n        // log payment event\r\n        emit OrderPaidInToken(_orderId, _originAddress, _tokenAddress, _orderValue, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  refundPayment used in case order cannot be processed and funds need to be returned\r\n     *  This function initiate process of funds refunding to the client.\r\n     *  @param _orderId Identifier of the order\r\n     *  @param _clientAddress is an address of client\r\n     *  @param _refundReason Order refund reason\r\n     */\r\n    function refundPayment(\r\n        uint _orderId,\r\n        address _clientAddress,\r\n        string _refundReason\r\n    ) external payable onlyMonetha whenNotPaused\r\n    {\r\n        require(_orderId > 0);\r\n        require(_clientAddress != 0x0);\r\n        require(msg.value > 0);\r\n        require(WithdrawState.Null == withdrawals[_orderId].state);\r\n\r\n        // create withdraw\r\n        withdrawals[_orderId] = Withdraw({\r\n            state: WithdrawState.Pending,\r\n            amount: msg.value,\r\n            clientAddress: _clientAddress\r\n            });\r\n\r\n        // log refunding\r\n        PaymentRefunding(_orderId, _clientAddress, msg.value, _refundReason);\r\n    }\r\n\r\n    /**\r\n     *  refundTokenPayment used in case order cannot be processed and tokens need to be returned\r\n     *  This call requires that token's approve method has been called prior to this.\r\n     *  This function initiate process of refunding tokens to the client.\r\n     *  @param _orderId Identifier of the order\r\n     *  @param _clientAddress is an address of client\r\n     *  @param _refundReason Order refund reason\r\n     *  @param _tokenAddress is tokens address\r\n     *  @param _orderValue is order amount\r\n     */\r\n    function refundTokenPayment(\r\n        uint _orderId,\r\n        address _clientAddress,\r\n        string _refundReason,\r\n        uint _orderValue,\r\n        address _tokenAddress\r\n    ) external onlyMonetha whenNotPaused\r\n    {\r\n        require(_orderId > 0);\r\n        require(_clientAddress != 0x0);\r\n        require(_orderValue > 0);\r\n        require(_tokenAddress != address(0));\r\n        require(WithdrawState.Null == withdrawals[_orderId].state);\r\n\r\n        ERC20(_tokenAddress).transferFrom(msg.sender, address(this), _orderValue);\r\n        \r\n        // create withdraw\r\n        withdrawals[_orderId] = Withdraw({\r\n            state: WithdrawState.Pending,\r\n            amount: _orderValue,\r\n            clientAddress: _clientAddress\r\n            });\r\n\r\n        // log refunding\r\n        PaymentRefunding(_orderId, _clientAddress, _orderValue, _refundReason);\r\n    }\r\n\r\n    /**\r\n     *  withdrawRefund performs fund transfer to the client's account.\r\n     *  @param _orderId Identifier of the order\r\n     */\r\n    function withdrawRefund(uint _orderId)\r\n    external whenNotPaused\r\n    {\r\n        Withdraw storage withdraw = withdrawals[_orderId];\r\n        require(WithdrawState.Pending == withdraw.state);\r\n\r\n        address clientAddress = withdraw.clientAddress;\r\n        uint amount = withdraw.amount;\r\n\r\n        // changing withdraw state before transfer\r\n        withdraw.state = WithdrawState.Withdrawn;\r\n\r\n        // transfer fund to clients account\r\n        clientAddress.transfer(amount);\r\n\r\n        // log withdrawn\r\n        PaymentWithdrawn(_orderId, clientAddress, amount);\r\n    }\r\n\r\n    /**\r\n     *  withdrawTokenRefund performs token transfer to the client's account.\r\n     *  @param _orderId Identifier of the order\r\n     *  @param _tokenAddress token address\r\n     */\r\n    function withdrawTokenRefund(uint _orderId, address _tokenAddress)\r\n    external whenNotPaused\r\n    {\r\n        require(_tokenAddress != address(0));\r\n\r\n        Withdraw storage withdraw = withdrawals[_orderId];\r\n        require(WithdrawState.Pending == withdraw.state);\r\n\r\n        address clientAddress = withdraw.clientAddress;\r\n        uint amount = withdraw.amount;\r\n\r\n        // changing withdraw state before transfer\r\n        withdraw.state = WithdrawState.Withdrawn;\r\n\r\n        // transfer fund to clients account\r\n        ERC20(_tokenAddress).transfer(clientAddress, amount);\r\n\r\n        // log withdrawn\r\n        emit PaymentWithdrawn(_orderId, clientAddress, amount);\r\n    }\r\n\r\n    /**\r\n     *  setMonethaGateway allows owner to change address of MonethaGateway.\r\n     *  @param _newGateway Address of new MonethaGateway contract\r\n     */\r\n    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\r\n        require(address(_newGateway) != 0x0);\r\n\r\n        monethaGateway = _newGateway;\r\n    }\r\n\r\n    /**\r\n     *  setMerchantWallet allows owner to change address of MerchantWallet.\r\n     *  @param _newWallet Address of new MerchantWallet contract\r\n     */\r\n    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\r\n        require(address(_newWallet) != 0x0);\r\n        require(_newWallet.merchantIdHash() == merchantIdHash);\r\n\r\n        merchantWallet = _newWallet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_clientAddress\",\"type\":\"address\"},{\"name\":\"_refundReason\",\"type\":\"string\"}],\"name\":\"refundPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"clientAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaGateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_clientAddress\",\"type\":\"address\"},{\"name\":\"_refundReason\",\"type\":\"string\"},{\"name\":\"_orderValue\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"refundTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_originAddress\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_orderValue\",\"type\":\"uint256\"}],\"name\":\"payForOrderInTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGateway\",\"type\":\"address\"}],\"name\":\"setMonethaGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_originAddress\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"}],\"name\":\"payForOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setMerchantWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantIdHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_merchantId\",\"type\":\"string\"},{\"name\":\"_monethaGateway\",\"type\":\"address\"},{\"name\":\"_merchantWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_originAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_monethaFee\",\"type\":\"uint256\"}],\"name\":\"OrderPaidInEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_originAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_monethaFee\",\"type\":\"uint256\"}],\"name\":\"OrderPaidInToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_merchantAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"PaymentsProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_refundReason\",\"type\":\"string\"}],\"name\":\"PaymentRefunding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PrivatePaymentProcessor","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000035a9f962096a1c5e960c8dc69872fc84893ac6f80000000000000000000000000c2291623c34347147c3bc55c296123c4003e3b900000000000000000000000000000000000000000000000000000000000000194c6561746865722048616e646d6164652050726f647563747300000000000000","Library":"","SwarmSource":"bzzr://5338025dba2c073ceea726a22b4f57777f736f083375d0a8da26adfd8641066c"}]}