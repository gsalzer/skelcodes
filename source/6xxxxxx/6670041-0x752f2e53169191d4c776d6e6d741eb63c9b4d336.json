{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/FreeFeeCoin.sol\r\n\r\n/**\r\n * @title FreeFeeCoin contract\r\n */\r\ncontract FreeFeeCoin is StandardToken {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals = 9;\r\n\r\n    uint noOfTokens = 2500000000; // 2,500,000,000 (2.5B)\r\n\r\n    // Address of freefeecoin vault (a FreeFeeCoinMultiSigWallet contract)\r\n    // The vault will have all the freefeecoin issued and the operation\r\n    // on its token will be protected by multi signing.\r\n    // In addtion, vault can recall(transfer back) the reserved amount\r\n    // from some address.\r\n    address internal vault;\r\n\r\n    // Address of freefeecoin owner (a FreeFeeCoinMultiSigWallet contract)\r\n    // The owner can change admin and vault address, but the change operation\r\n    // will be protected by multi signing.\r\n    address internal owner;\r\n\r\n    // Address of freefeecoin admin (a FreeFeeCoinMultiSigWallet contract)\r\n    // The admin can change reserve. The reserve is the amount of token\r\n    // assigned to some address but not permitted to use.\r\n    // Once the signers of the admin agree with removing the reserve,\r\n    // they can change the reserve to zero to permit the user to use all reserved\r\n    // amount. So in effect, reservation will postpone the use of some tokens\r\n    // being used until all stakeholders agree with giving permission to use that\r\n    // token to the token owner.\r\n    // All admin operation will be protected by multi signing.\r\n    address internal admin;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n    event VaultChanged(address indexed previousVault, address indexed newVault);\r\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event ReserveChanged(address indexed _address, uint amount);\r\n    event Recalled(address indexed from, uint amount);\r\n\r\n    // for debugging\r\n    event MsgAndValue(string message, bytes32 value);\r\n\r\n    /**\r\n     * @dev reserved number of tokens per each address\r\n     *\r\n     * To limit token transaction for some period by the admin or owner,\r\n     * each address' balance cannot become lower than this amount\r\n     *\r\n     */\r\n    mapping(address => uint) public reserves;\r\n\r\n    /**\r\n       * @dev modifier to limit access to the owner only\r\n       */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to the vault only\r\n       */\r\n    modifier onlyVault() {\r\n        require(msg.sender == vault);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to the admin only\r\n       */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to admin or vault\r\n       */\r\n    modifier onlyAdminOrVault() {\r\n        require(msg.sender == vault || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to owner or vault\r\n       */\r\n    modifier onlyOwnerOrVault() {\r\n        require(msg.sender == owner || msg.sender == vault);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to owner or admin\r\n       */\r\n    modifier onlyAdminOrOwner() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n       * @dev limit access to owner or admin or vault\r\n       */\r\n    modifier onlyAdminOrOwnerOrVault() {\r\n        require(msg.sender == owner || msg.sender == vault || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev initialize ERC20\r\n     *\r\n     * all token will deposit into the vault\r\n     * later, the vault, owner will be multi sign contract to protect privileged operations\r\n     *\r\n     * @param _symbol token symbol\r\n     * @param _name   token name\r\n     * @param _owner  owner address\r\n     * @param _admin  admin address\r\n     * @param _vault  vault address\r\n     */\r\n    constructor (string _symbol, string _name, address _owner, address _admin, address _vault) public {\r\n        require(bytes(_symbol).length > 0);\r\n        require(bytes(_name).length > 0);\r\n\r\n        totalSupply_ = noOfTokens * (10 ** uint(decimals));\r\n        // 2.5E9 tokens initially\r\n\r\n        symbol = _symbol;\r\n        name = _name;\r\n        owner = _owner;\r\n        admin = _admin;\r\n        vault = _vault;\r\n\r\n        balances[vault] = totalSupply_;\r\n        emit Transfer(address(0), vault, totalSupply_);\r\n    }\r\n\r\n    /**\r\n     * @dev change the amount of reserved token\r\n     *    reserve should be less than or equal to the current token balance\r\n     *\r\n     *    Refer to the comment on the admin if you want to know more.\r\n     *\r\n     * @param _address the target address whose token will be frozen for future use\r\n     * @param _reserve  the amount of reserved token\r\n     *\r\n     */\r\n    function setReserve(address _address, uint _reserve) public onlyAdmin {\r\n        require(_reserve <= totalSupply_);\r\n        require(_address != address(0));\r\n\r\n        reserves[_address] = _reserve;\r\n        emit ReserveChanged(_address, _reserve);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token from sender to other\r\n     *         the result balance should be greater than or equal to the reserved token amount\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // check the reserve\r\n        require(balanceOf(msg.sender) - _value >= reserveOf(msg.sender));\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev change vault address\r\n     *    BEWARE! this withdraw all token from old vault and store it to the new vault\r\n     *            and new vault's allowed, reserve will be set to zero\r\n     * @param _newVault new vault address\r\n     */\r\n    function setVault(address _newVault) public onlyOwner {\r\n        require(_newVault != address(0));\r\n        require(_newVault != vault);\r\n\r\n        address _oldVault = vault;\r\n\r\n        // change vault address\r\n        vault = _newVault;\r\n        emit VaultChanged(_oldVault, _newVault);\r\n\r\n        // adjust balance\r\n        uint _value = balances[_oldVault];\r\n        balances[_oldVault] = 0;\r\n        balances[_newVault] = balances[_newVault].add(_value);\r\n\r\n        // vault cannot have any allowed or reserved amount!!!\r\n        allowed[_newVault][msg.sender] = 0;\r\n        reserves[_newVault] = 0;\r\n        emit Transfer(_oldVault, _newVault, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev change owner address\r\n     * @param _newOwner new owner address\r\n     */\r\n    function setOwner(address _newOwner) public onlyVault {\r\n        require(_newOwner != address(0));\r\n        require(_newOwner != owner);\r\n\r\n        owner = _newOwner;\r\n        emit OwnerChanged(owner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev change admin address\r\n     * @param _newAdmin new admin address\r\n     */\r\n    function setAdmin(address _newAdmin) public onlyOwnerOrVault {\r\n        require(_newAdmin != address(0));\r\n        require(_newAdmin != admin);\r\n\r\n        admin = _newAdmin;\r\n\r\n        emit AdminChanged(admin, _newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer a part of reserved amount to the vault\r\n     *\r\n     *    Refer to the comment on the vault if you want to know more.\r\n     *\r\n     * @param _from the address from which the reserved token will be taken\r\n     * @param _amount the amount of token to be taken\r\n     */\r\n    function recall(address _from, uint _amount) public onlyAdmin {\r\n        require(_from != address(0));\r\n        require(_amount > 0);\r\n\r\n        uint currentReserve = reserveOf(_from);\r\n        uint currentBalance = balanceOf(_from);\r\n\r\n        require(currentReserve >= _amount);\r\n        require(currentBalance >= _amount);\r\n\r\n        uint newReserve = currentReserve - _amount;\r\n        reserves[_from] = newReserve;\r\n        emit ReserveChanged(_from, newReserve);\r\n\r\n        // transfer token _from to vault\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[vault] = balances[vault].add(_amount);\r\n        emit Transfer(_from, vault, _amount);\r\n\r\n        emit Recalled(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     *\r\n     * The _from's FFC balance should be larger than the reserved amount(reserves[_from]) plus _value.\r\n     *\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[_from].sub(reserves[_from]));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function getOwner() public view onlyAdminOrOwnerOrVault returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getVault() public view onlyAdminOrOwnerOrVault returns (address) {\r\n        return vault;\r\n    }\r\n\r\n    function getAdmin() public view onlyAdminOrOwnerOrVault returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    function getOneFreeFeeCoin() public view returns (uint) {\r\n        return (10 ** uint(decimals));\r\n    }\r\n\r\n    function getMaxNumberOfTokens() public view returns (uint) {\r\n        return noOfTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev get the amount of reserved token\r\n     */\r\n    function reserveOf(address _address) public view returns (uint _reserve) {\r\n        return reserves[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev get the amount reserved token of the sender\r\n     */\r\n    function reserve() public view returns (uint _reserve) {\r\n        return reserves[msg.sender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOneFreeFeeCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"uint256\"}],\"name\":\"setReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNumberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"reserveOf\",\"outputs\":[{\"name\":\"_reserve\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"_reserve\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousVault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"MsgAndValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FreeFeeCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000c5614cc0186380ab825c8d1478dc39e46d2d2840000000000000000000000000c5614cc0186380ab825c8d1478dc39e46d2d2840000000000000000000000000c5614cc0186380ab825c8d1478dc39e46d2d28400000000000000000000000000000000000000000000000000000000000000034652450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b46726565466565436f696e000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://982bf6773d60620d974968981166341ebbd58efbf17bcb8021e900c2453b5fe0"}]}