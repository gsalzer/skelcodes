{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract ERC725 {\r\n\r\n    uint256 public constant MANAGEMENT_KEY = 1;\r\n    uint256 public constant ACTION_KEY = 2;\r\n    uint256 public constant CLAIM_SIGNER_KEY = 3;\r\n    uint256 public constant ENCRYPTION_KEY = 4;\r\n\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    struct Key {\r\n        uint256[] purpose; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\r\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\r\n        bytes32 key;\r\n    }\r\n\r\n    function getKey(bytes32 _key) public constant returns(uint256[] purpose, uint256 keyType, bytes32 key);\r\n    function getKeyPurpose(bytes32 _key) public constant returns(uint256[] purpose);\r\n    function getKeysByPurpose(uint256 _purpose) public constant returns(bytes32[] keys);\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\r\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\r\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\r\n    function approve(uint256 _id, bool _approve) public returns (bool success);\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    function balanceOf(address _who) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Identity is ERC725 {\r\n\r\n    uint256 constant LOGIN_KEY = 10;\r\n    uint256 constant FUNDS_MANAGEMENT = 11;\r\n\r\n    uint256 executionNonce;\r\n\r\n    struct Execution {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n        bool approved;\r\n        bool executed;\r\n    }\r\n\r\n    mapping (bytes32 => Key) keys;\r\n    mapping (uint256 => bytes32[]) keysByPurpose;\r\n    mapping (uint256 => Execution) executions;\r\n\r\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\r\n    modifier onlyManagement() {\r\n        require(keyHasPurpose(keccak256(msg.sender), MANAGEMENT_KEY), \"Sender does not have management key\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAction() {\r\n        require(keyHasPurpose(keccak256(msg.sender), ACTION_KEY), \"Sender does not have action key\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundsManagement() {\r\n        require(keyHasPurpose(keccak256(msg.sender), FUNDS_MANAGEMENT), \"Sender does not have funds key\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        bytes32 _key = keccak256(msg.sender);\r\n        keys[_key].key = _key;\r\n        keys[_key].purpose = [MANAGEMENT_KEY];\r\n        keys[_key].keyType = 1;\r\n        keysByPurpose[MANAGEMENT_KEY].push(_key);\r\n        emit KeyAdded(_key, MANAGEMENT_KEY, 1);\r\n    }\r\n\r\n    function getKey(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purpose, uint256 keyType, bytes32 key)\r\n    {\r\n        return (keys[_key].purpose, keys[_key].keyType, keys[_key].key);\r\n    }\r\n\r\n    function getKeyPurpose(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purpose)\r\n    {\r\n        return (keys[_key].purpose);\r\n    }\r\n\r\n    function getKeysByPurpose(uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return keysByPurpose[_purpose];\r\n    }\r\n\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        onlyManagement\r\n        returns (bool success)\r\n    {\r\n        if (keyHasPurpose(_key, _purpose)) {\r\n            return true;\r\n        }\r\n\r\n        keys[_key].key = _key;\r\n        keys[_key].purpose.push(_purpose);\r\n        keys[_key].keyType = _type;\r\n\r\n        keysByPurpose[_purpose].push(_key);\r\n\r\n        emit KeyAdded(_key, _purpose, _type);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(uint256 _id, bool _approve)\r\n        public\r\n        onlyAction\r\n        returns (bool success)\r\n    {\r\n        emit Approved(_id, _approve);\r\n\r\n        if (_approve == true) {\r\n            executions[_id].approved = true;\r\n            success = executions[_id].to.call(executions[_id].data, 0);\r\n            if (success) {\r\n                executions[_id].executed = true;\r\n                emit Executed(\r\n                    _id,\r\n                    executions[_id].to,\r\n                    executions[_id].value,\r\n                    executions[_id].data\r\n                );\r\n            } else {\r\n                emit ExecutionFailed(\r\n                    _id,\r\n                    executions[_id].to,\r\n                    executions[_id].value,\r\n                    executions[_id].data\r\n                );\r\n            }\r\n            return success;\r\n        } else {\r\n            executions[_id].approved = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function execute(address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        require(!executions[executionNonce].executed, \"Already executed\");\r\n        executions[executionNonce].to = _to;\r\n        executions[executionNonce].value = _value;\r\n        executions[executionNonce].data = _data;\r\n\r\n        emit ExecutionRequested(executionNonce, _to, _value, _data);\r\n\r\n        if (keyHasPurpose(keccak256(msg.sender), ACTION_KEY)) {\r\n            approve(executionNonce, true);\r\n        }\r\n\r\n        executionNonce++;\r\n        return executionNonce-1;\r\n    }\r\n\r\n    function removeKey(bytes32 _key, uint256 _purpose)\r\n        public\r\n        onlyManagement\r\n        returns (bool success)\r\n    {\r\n        require(keys[_key].key == _key, \"No such key\");\r\n\r\n        if (!keyHasPurpose(_key, _purpose)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 arrayLength = keys[_key].purpose.length;\r\n        int index = -1;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if (keys[_key].purpose[i] == _purpose) {\r\n                index = int(i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index != -1) {\r\n            keys[_key].purpose[uint(index)] = keys[_key].purpose[arrayLength - 1];\r\n            delete keys[_key].purpose[arrayLength - 1];\r\n            keys[_key].purpose.length--;\r\n        }\r\n\r\n        uint256 purposesLen = keysByPurpose[_purpose].length;\r\n        for (uint j = 0; j < purposesLen; j++) {\r\n            if (keysByPurpose[_purpose][j] == _key) {\r\n                keysByPurpose[_purpose][j] = keysByPurpose[_purpose][purposesLen - 1];\r\n                delete keysByPurpose[_purpose][purposesLen - 1];\r\n                keysByPurpose[_purpose].length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit KeyRemoved(_key, _purpose, keys[_key].keyType);\r\n\r\n        return true;\r\n    }\r\n\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool result)\r\n    {\r\n        if (keys[_key].key == 0) return false;\r\n        uint256 arrayLength = keys[_key].purpose.length;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            if (keys[_key].purpose[i] == _purpose) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n   /**\r\n     * Send all ether to msg.sender\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function withdraw() public onlyFundsManagement {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * Transfer ether to _account\r\n     * @param _amount amount to transfer in wei\r\n     * @param _account recepient\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function transferEth(uint _amount, address _account) public onlyFundsManagement {\r\n        require(_amount <= address(this).balance, \"Amount should be less than total balance of the contract\");\r\n        require(_account != address(0), \"must be valid address\");\r\n        _account.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n     * Returns contract eth balance\r\n     */\r\n    function getBalance() public view returns(uint)  {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Returns ERC20 token balance for _token\r\n     * @param _token token address\r\n     */\r\n    function getTokenBalance(address _token) public view returns (uint) {\r\n        return ERC20Basic(_token).balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * Send all tokens for _token to msg.sender\r\n     * @param _token ERC20 contract address\r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function withdrawTokens(address _token) public onlyFundsManagement {\r\n        require(_token != address(0));\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint balance = token.balanceOf(this);\r\n        // token returns true on successful transfer\r\n        assert(token.transfer(msg.sender, balance));\r\n    }\r\n\r\n    /**\r\n     * Send tokens for _token to _to\r\n     * @param _token ERC20 contract address\r\n     * @param _to recepient\r\n     * @param _amount amount in \r\n     * Requires FUNDS_MANAGEMENT purpose for msg.sender\r\n     */\r\n    function transferTokens(address _token, address _to, uint _amount) public onlyFundsManagement {\r\n        require(_token != address(0));\r\n        require(_to != address(0));\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint balance = token.balanceOf(this);\r\n        require(_amount <= balance);\r\n        assert(token.transfer(_to, _amount));\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurpose\",\"outputs\":[{\"name\":\"purpose\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGEMENT_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"purpose\",\"type\":\"uint256[]\"},{\"name\":\"keyType\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACTION_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENCRYPTION_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"executionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_SIGNER_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"}]","ContractName":"Identity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://20d5a79b2254964de92a1f7bc9607f8356c0d458c903e73678376ed79440e555"}]}