{"status":"1","message":"OK","result":[{"SourceCode":"contract Registry {\r\n    function owner(bytes32 node) public view returns (address) {}\r\n}\r\n\r\ncontract Registrar { \r\n    modifier onlyOwner(bytes32 _hash) { _; }\r\n    function transfer(bytes32 _hash, address newOwner) onlyOwner(_hash) {}\r\n}\r\n\r\ncontract PublicResolver {\r\n    modifier only_owner(bytes32 node) { _; }\r\n    function setAddr(bytes32 node, address addr) only_owner(node) {}\r\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) {}\r\n    function setName(bytes32 node, string name) only_owner(node) {}\r\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) {}\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) {}\r\n    function setText(bytes32 node, string key, string value) only_owner(node) {}\r\n}\r\n\r\ncontract ENS_Permissions {\r\n\r\n    Registry registry = Registry(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n    Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);\r\n    PublicResolver publicResolver = PublicResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\r\n\r\n    address owner;\r\n    bytes32 labelhash;\r\n    bytes32 namehash;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier only_owner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    struct Permissions {\r\n        uint ownerMutability;\r\n        uint addressMutability;\r\n        mapping(string => uint) textKeyMutability;\r\n    }\r\n\r\n    Permissions permissions;\r\n\r\n    function setOwner(address _newOwner) only_owner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function activatePermissionsBot(bytes32 _namehash, bytes32 _labelhash) only_owner {\r\n        require(registry.owner(_namehash) == address(this));\r\n        require(labelhash == 0 && namehash == 0);\r\n        labelhash = _labelhash;\r\n        namehash = _namehash;\r\n    }\r\n\r\n    function lockOwnership(uint _date) only_owner {\r\n        require(permissions.ownerMutability < block.timestamp);\r\n        require(_date > block.timestamp);\r\n        permissions.ownerMutability == _date;\r\n    }\r\n    function lockAddress(uint _date) only_owner {\r\n        require(permissions.ownerMutability > _date);\r\n        require(permissions.addressMutability < block.timestamp);\r\n        require(_date > block.timestamp);\r\n        permissions.addressMutability == _date;\r\n    }\r\n    function lockTextKey(string _key, uint _date) only_owner {\r\n        require(permissions.ownerMutability > _date);\r\n        require(permissions.textKeyMutability[_key] < block.timestamp);\r\n        require(_date > block.timestamp);\r\n        permissions.textKeyMutability[_key] == _date;\r\n    }\r\n    \r\n    // Transferring ownership from this contract also destroys the contract\r\n    function transfer(address _newOwner) only_owner {\r\n        require(permissions.ownerMutability < block.timestamp);\r\n        registrar.transfer(labelhash, _newOwner);\r\n        selfdestruct(msg.sender);\r\n    }\r\n    function setAddr(address _addr) only_owner {\r\n        require(permissions.addressMutability < block.timestamp);\r\n        publicResolver.setAddr(namehash, _addr);\r\n    }\r\n    function setText(string _key, string _value) only_owner {\r\n        require(permissions.textKeyMutability[_key] < block.timestamp);\r\n        publicResolver.setText(namehash, _key, _value);\r\n    }    \r\n}\r\n\r\ncontract Factory {\r\n    function createPermissionsBot(address _owner) returns (address) {\r\n        ENS_Permissions permissionsBot = new ENS_Permissions(_owner);\r\n        return permissionsBot;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPermissionsBot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1445c5bea6f6fbe286379b14735141aa4261e993238a5380e11dbf8e97eec00a"}]}