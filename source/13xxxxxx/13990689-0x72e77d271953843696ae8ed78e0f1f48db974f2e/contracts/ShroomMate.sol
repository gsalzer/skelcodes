// SPDX-License-Identifier: MIT                                      

pragma solidity ^0.8.0;

//@@@@@@@*..,@@@@@@@@@@@@@@@@@@....*.@@@@@@@@**@*@@@@@@@@@@@@..*@@,,@(..@@@@@@  
//@&..............@@@@......@@@......@%@@@@@.........@@@@@@@..............@@@@  
//@@......#.......@%@@@....../@......@%@@@@@.........@@@@@@@*......@@%....@%@@  
//@@,,,,,@@&@@@@@@@@@@@.@#...........@%@@@@....@.%@..@%@@@@@@.....@@@@...@@%@@  
//@@*&***@%@(***,,@@@@@,,,,,,,,,,,,,@@%@@@#,@,,@@@,@,,@@@@@@@,*,*********%@&@@  
//@@/(%///@@@/////@@@@@@///&////****@@@@@@/*////*/////@@&@@@@///////////@@@@@@  
//@@/&///////////&@&@@@//////@#////(@@@@@/////@#(/@/////@@@@@/@////@//////@@@@  
//@@@@(//////////@@%@@@%//////@@@///@@@@@//%///(@@@/////#@@@@////@@@@/////@@@@  
//@@@@@@/&@@#/@@@%@@@@@@@@@@/@%@@@/@@@%@@@@&@@@&%@@@@(@@&%@@@@///@@@@@//@@%@@@  
//@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@(@%@@@@@@@@@%@@@@@@&@&@@@@@@@@%@@@@@@@@@@@@@  
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  
//@@@@@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     
//@@@@(.......@@@@@@@@@@@....%...*@@@@@@@...........@@@@**@@...........@@@@     
//@@@@(..%...@@@@@@@@@@@.........@@@@@@@@@.....@.....@@@*,@@...........@@@@     
//@@@@..,....*@@@@@@@@@@@...@.(.*.@&@@@@@@....#@....(.@@@,@(.....@@.(.%@@@@     
//@@@@%,,,,,,@@@@@@@@@@@,,,,@@@@,,,@@@@@@@,,,,,,,,,,,*@@**@%,,..,.,,,@@&@@@     
//@@@@*******@%@@@@@@@@***(**/****(**&@@@@****@/@&&****@@@@@@@@&/,,,,,,@@@@     
//@@@@@(@////(/&@/@@@@@////**%*******@@@@@@***#@@*&***%@@@@@@@@@@****%*@&@@     
//@@@@%/////@/////(@&@%/////(@@@//////@@@@///////////@#@@@@///////////@@%@@     
//@@@@//%@(//////@@%@@@@@#//@@%@@/#@/@@@@@//@%/(/@@@/@%@/@@///////&@/@@&@@@     
//@@@@@@@@@@@@@@//@@@@@@@@/@%@@@@@@/@@@@@@@@@@@@/(%@@@@@/,@%/@@@//@@%@@@@@@     
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@/@%@@@@@@@@@@@@@@@@@@@@@@@@ 
//%%%%%%%%%%%%%%%&%%%%&&&&&&%%&&&&&&&&&&&&%&&&&&&&&%&&&&&&%&%&&&&&&&&&&&&&&&%&&&%%
//%&%%%%%%%%%%%%%%%%%%&%%%%&&%&%@@&@@%&&&&&&&&&&%%%%%%%%&%%&&&&&&&&&&&&&&%%%%%%&&%
//%%%%%%%%%%%%%%%%%%%%%%@@@%   &@@@@@     @@@@ .&&%%%&&%%%%%&&%&&&%&%%&%%&%%%%&%%&
//%%%%%%%%%%%%%%%%%%,    @@@/   *@@@@@     @@@#   @.   @&&%%&%&%%%&%%%%%%%%%%&&%%%
//%%%%%%%%%%%%%%& &@@. ...@@@@....@@@@@.     .@   @@.   @@@.&&%%&%%&&%&&&&&&&%%%%%
//%%%%%%%%%%%%@@@&.(@@.....@@@@@....@@@@,........  .@.  .@@@. %%&&%&%%&&&&&&%%%%%%
//%%%%%%&%%%&  ,@@@@@@*.....@@@@@(...#@@@@@#.........@#  &@@@   (%&&&%&%%%%%%%%%%%
//%%%%%%%%%&. ...@@@@@@....,*@@@@@@*...#@@@@@@@.......,#. @@@@    @@%%%%%%%%%%%%%%
//%%%%%%%%%@@,.....@@@%%%%&%%%&%%%%&%%%%@&@@@@@@@@(........@@@.   #@@&%%%%%%%%%%%%
//&&&&&%%%%@@@,....@&%%%&%%%%%%%%%%%%%%%%%%%%@@@@@@@@&......@@@    @@& #%%%%%%%%%%
//%%%%%%%%%@@@@,..,%&%%%%&%%%%%&%&%%&%%&%%%%&%%&%@@@@@@@....%@@,.  @@&  &%%%%%%%%%
//&&%%%%%%%&@@@@...@&%%%%%%&%&%%&%%%&%%%%%%%%&%%%%%&@@@@@#..*@@...,@@    @%%%%%%%%
//%&%&%%%%%%%@@@@...@&%&%&%&*&%%*&%&%%%%%@%&%%%%%%%%%&&@@@@..@#...@@    @@@%%%%%%%
//%%%%%%%%%%%%@@@,....%&%&%/ #%%%,,,,,,*,/,&%&%%%%&%%%%%@@@@.@*..@..  *@@@ @%%%%%%
//%%%%%%%%%%%%%%@(......&&*%&/,,,,  (  ,,,,((,%%%%&&%%%%&%(@@@&......@@@  @@%%%%%%
//%%%%%%%%%%%%%%%%(....@&*&%,,,,,,(&&/,*#/  //%&(@%%&&%%%%%@@@@*....@@   @@@%%%%%%
//*#%&&%%%%%%%%%%%%%%,..,@%(,,,,,@@@@*.#/ %//,#./%%%%%%%%%%%#@@@...(@@  @@,%%%%%%%
//#/****/**%%%%%%%%%%%%%( *.(,,,,,(%(@@*/////,&,@&&%%&&%%%%%&.@@@..(@@ /@. @%%%%%%
//////*****///%&%%%%%%.%@%*,,,,,,,,,***////,,&&&&&%&%&&%%%%%%.,@@@.,@% &@ @%%%%%%%
//////********//////&,,   ,,,,,,,,&/*.&&%/,&%%/%%&&&&%&&%&%&(..%@@,.@,  /%%%%%%%%%
///////%***///***/(,,,,,,,,,,,,,,,***////,% .&@@.@@@@@@@@@@@&...@@/.@  %%%%%%%%%%%
///////**#**%%***%,,,%.#&&/,,,,,,***#    *%%%&*@@.*@@/...,@@@#..%@& .%%%%%%%%%%%%%
//((/////*(///**,,,,,, (&&,,,,,/  .&. %@%@&  .&%%%%%%&@#. .@@@. #%%%%%%%%%%%%%%%%%
//(***////**.@&,#,,,,,,,%..*,*/%@##. . ,.@%%****/******&%%%%%%%%%%%%%&#**(&/*&&&#*
///********/%/@*%.,,.&,,#* (,,,/@@**///*,//%/(*******%**/*&%%%%%%&%***//**////////
/////******@.%&@/,,.%*,,,,,*%#,***/////*,///(********///////*****************(/***
//&#//**********/(./*,,,,/@&,,,**//////,,**//////////////*****************//(((/**
///**/////////*****&#& #,,,,,,*//(////,,&***/*///////*********//////***////(((///*
//***//****(((//****    &,,/*& %@*  @,,&********//*******(#**//********//(((((//**
//***/*****/((((/%(*****/&#&/*%@@%@ %,**********//*******//*************/((((//***
///*******/(((((((//*******(,,,,*,&%//#%********////((////**************(((*******
///******//((((((((((///******///////(//#//((////////******************/((********

import "./ShroomMateERC721.sol";

interface IGnarToken {
    function burn(address _from, uint256 _amount) external;
    function updateReward(address _from, address _to) external;
} 

contract ShroomMate is ShroomMateERC721 {
    
    struct ShroomData {
        string name;
    }

    modifier ShroomOwner(uint256 ShroomId) {
        require(ownerOf(ShroomId) == msg.sender, "Cannot interact with a ShroomMate you do not own");
        _;
    }

    IGnarToken public GnarToken;
    
    uint256 constant public NAME_CHANGE_PRICE = 150 ether;

    mapping(uint256 => ShroomData) public shroomData;

    event NameChanged(uint256 ShroomId, string ShroomName);

    constructor(string memory name, string memory symbol) ShroomMateERC721(name, symbol) {}

    function changeName(uint256 ShroomId, string memory newName) external ShroomOwner(ShroomId) {
        bytes memory n = bytes(newName);
        require(n.length > 0 && n.length < 25,                          "Invalid name length");
        require(sha256(n) != sha256(bytes(shroomData[ShroomId].name)),    "New name is same as current name");
        
        GnarToken.burn(msg.sender, NAME_CHANGE_PRICE);
        shroomData[ShroomId].name = newName;
        emit NameChanged(ShroomId, newName);
    }

    function setGnarToken(address GnarTokenAddress) external onlyOwner {
        GnarToken = IGnarToken(GnarTokenAddress);
    }
    
    function transferFrom(address from, address to, uint256 tokenId) public override {
        if (tokenId < maxSupply) {
            GnarToken.updateReward(from, to);
            genBalance[from]--;
            genBalance[to]++;
        }
        ERC721.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override {
        if (tokenId < maxSupply) {
            GnarToken.updateReward(from, to);
            genBalance[from]--;
            genBalance[to]++;
        }
        ERC721.safeTransferFrom(from, to, tokenId, data);
    }
}
