{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/*\r\n ___  ____  __  ____  ___ \r\n/ __)(_  _)(  )(_  _)/ __)\r\n\\__ \\  )(  /__\\  )(  \\__ \\\r\n(___/ (__)(_)(_)(__) (___/\r\nStats (for Loot)\r\n100% on-chain and easily extendable character statistics, made for the Loot metaverse.\r\n\r\nCreated by sol_dev\r\n\r\n*/\r\n\r\ninterface Receiver {\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\ncontract StatsForLoot {\r\n\r\n\tuint256 constant public MAX_SUPPLY = 8000;\r\n\tuint256 constant public MINT_COST = 0.02 ether;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(uint256 => uint256) list;\r\n\t\tmapping(address => bool) approved;\r\n\t\tmapping(uint256 => uint256) indexOf;\r\n\t}\r\n\r\n\tstruct Token {\r\n\t\taddress owner;\r\n\t\taddress approved;\r\n\t\tbytes32 seed;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(uint256 => Token) list;\r\n\t\tmapping(address => User) users;\r\n\t\taddress owner;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tstring constant private TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\tstring[] private stats = [\"Strength\", \"Dexterity\", \"Constitution\", \"Wisdom\", \"Intelligence\", \"Charisma\"];\r\n\tstring[] private shortStats = [\"STR\", \"DEX\", \"CON\", \"WIS\", \"INT\", \"CHA\"];\r\n\r\n\tmapping(bytes4 => bool) public supportsInterface;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\tevent Mint(address indexed owner, uint256 indexed tokenId, bytes32 seed);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tinfo.owner = msg.sender;\r\n\t\tsupportsInterface[0x01ffc9a7] = true; // ERC-165\r\n\t\tsupportsInterface[0x80ac58cd] = true; // ERC-721\r\n\t\tsupportsInterface[0x5b5e139f] = true; // Metadata\r\n\t\tsupportsInterface[0x780e9d63] = true; // Enumerable\r\n\r\n\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t_mint();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction ownerWithdraw() external _onlyOwner {\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\trequire(_balance > 0);\r\n\t\tpayable(msg.sender).transfer(_balance);\r\n\t}\r\n\r\n\t\r\n\treceive() external payable {\r\n\t\tmintMany(msg.value / MINT_COST);\r\n\t}\r\n\t\r\n\tfunction mint() external payable {\r\n\t\tmintMany(1);\r\n\t}\r\n\r\n\tfunction mintMany(uint256 _tokens) public payable {\r\n\t\trequire(_tokens > 0);\r\n\t\tuint256 _cost = _tokens * MINT_COST;\r\n\t\trequire(msg.value >= _cost);\r\n\t\tfor (uint256 i = 0; i < _tokens; i++) {\r\n\t\t\t_mint();\r\n\t\t}\r\n\t\tif (msg.value > _cost) {\r\n\t\t\tpayable(msg.sender).transfer(msg.value - _cost);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction approve(address _approved, uint256 _tokenId) external {\r\n\t\trequire(msg.sender == ownerOf(_tokenId));\r\n\t\tinfo.list[_tokenId].approved = _approved;\r\n\t\temit Approval(msg.sender, _approved, _tokenId);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address _operator, bool _approved) external {\r\n\t\tinfo.users[msg.sender].approved[_operator] = _approved;\r\n\t\temit ApprovalForAll(msg.sender, _operator, _approved);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction name() external pure returns (string memory) {\r\n\t\treturn \"Stats (for Loot)\";\r\n\t}\r\n\r\n\tfunction symbol() external pure returns (string memory) {\r\n\t\treturn \"STAT\";\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string memory out) {\r\n\t\tout = \"data:application/json;base64,\";\r\n\t\tstring memory _json = string(abi.encodePacked('{\"name\":\"STAT #', _uint2str(_tokenId), '\",\"description\":\"100% on-chain and easily extendable character statistics, made for the Loot metaverse.\",'));\r\n\t\t_json = string(abi.encodePacked(_json, '\"image\":\"data:image/svg+xml;base64,', _encode(bytes(getSVG(_tokenId))), '\",\"attributes\":['));\r\n\t\tuint256[8] memory _settings = getSettingsCompressed(getSeed(_tokenId));\r\n\t\tfor (uint256 i = 0; i < stats.length; i++) {\r\n\t\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"', stats[i], '\",\"value\":', _uint2str(_settings[i]), '},'));\r\n\t\t}\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Modifier\",\"value\":\"', stats[_settings[6]], '\"},'));\r\n\t\t_json = string(abi.encodePacked(_json, '{\"trait_type\":\"Modifier Value\",\"value\":', _uint2str(_settings[7]), '}]}'));\r\n\t\tout = string(abi.encodePacked(out, _encode(bytes(_json))));\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn info.users[_owner].balance;\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].owner;\r\n\t}\r\n\r\n\tfunction getApproved(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].approved;\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\t\treturn info.users[_owner].approved[_operator];\r\n\t}\r\n\r\n\tfunction getSeed(uint256 _tokenId) public view returns (bytes32) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].seed;\r\n\t}\r\n\r\n\tfunction tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < totalSupply());\r\n\t\treturn _index;\r\n\t}\r\n\r\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < balanceOf(_owner));\r\n\t\treturn info.users[_owner].list[_index];\r\n\t}\r\n\r\n\tfunction getSVG(uint256 _tokenId) public view returns (string memory svg) {\r\n\t\tuint256[8] memory _settings = getSettingsCompressed(getSeed(_tokenId));\r\n\t\tuint256 _modifierIndex = _settings[6];\r\n\t\tuint256 _modifierAmount = _settings[7];\r\n\t\tsvg = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>text { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" />';\r\n\t\tfor (uint256 i = 0; i < stats.length; i++) {\r\n\t\t\tsvg = string(abi.encodePacked(svg, '<text x=\"10\" y=\"', _uint2str(20 * (i + 1)), '\">', stats[i], ': ', _uint2str(_settings[i])));\r\n\t\t\tif (i == _modifierIndex) {\r\n\t\t\t\tsvg = string(abi.encodePacked(svg, \" (+\", _uint2str(_modifierAmount), \")\"));\r\n\t\t\t}\r\n\t\t\tsvg = string(abi.encodePacked(svg, \"</text>\"));\r\n\t\t}\r\n\t\tsvg = string(abi.encodePacked(svg, '<text x=\"10\" y=\"150\">Modifier: ', shortStats[_modifierIndex], \" +\", _uint2str(_modifierAmount), \"</text></svg>\"));\r\n\t}\r\n\r\n\tfunction getTokenSettings(uint256 _tokenId) public view returns (uint256 strength, uint256 dexterity, uint256 constitution, uint256 wisdom, uint256 intelligence, uint256 charisma, uint256 modifierIndex, uint256 modifierAmount) {\r\n\t\t(strength, dexterity, constitution, wisdom, intelligence, charisma, modifierIndex, modifierAmount) = getSettings(getSeed(_tokenId));\r\n\t}\r\n\r\n\tfunction getSettings(bytes32 _seed) public pure returns (uint256 strength, uint256 dexterity, uint256 constitution, uint256 wisdom, uint256 intelligence, uint256 charisma, uint256 modifierIndex, uint256 modifierAmount) {\r\n\t\tbytes32 _rand = keccak256(abi.encodePacked(\"Stats:\", _seed));\r\n\t\t(_rand, strength) = _rollDice(_rand);\r\n\t\t(_rand, dexterity) = _rollDice(_rand);\r\n\t\t(_rand, constitution) = _rollDice(_rand);\r\n\t\t(_rand, wisdom) = _rollDice(_rand);\r\n\t\t(_rand, intelligence) = _rollDice(_rand);\r\n\t\t(_rand, charisma) = _rollDice(_rand);\r\n\t\t_rand = keccak256(abi.encodePacked(_rand));\r\n\t\tmodifierIndex = uint256(_rand) % 6;\r\n\t\t_rand = keccak256(abi.encodePacked(_rand));\r\n\t\tmodifierAmount = 10 - _sqrt(uint256(_rand) % 100);\r\n\t}\r\n\r\n\tfunction getSettingsCompressed(bytes32 _seed) public pure returns (uint256[8] memory data) {\r\n\t\t(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]) = getSettings(_seed);\r\n\t}\r\n\r\n\tfunction getStrength(uint256 _tokenId) external view returns (uint256 strength) {\r\n\t\t(strength, , , , , , , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getDexterity(uint256 _tokenId) external view returns (uint256 dexterity) {\r\n\t\t( , dexterity, , , , , , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getConstitution(uint256 _tokenId) external view returns (uint256 constitution) {\r\n\t\t( , , constitution, , , , , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getWisdom(uint256 _tokenId) external view returns (uint256 wisdom) {\r\n\t\t( , , , wisdom, , , , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getIntelligence(uint256 _tokenId) external view returns (uint256 intelligence) {\r\n\t\t( , , , , intelligence, , , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getCharisma(uint256 _tokenId) external view returns (uint256 charisma) {\r\n\t\t( , , , , , charisma, , ) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getModifier(uint256 _tokenId) external view returns (uint256 modifierIndex, uint256 modifierAmount) {\r\n\t\t( , , , , , , modifierIndex, modifierAmount) = getTokenSettings(_tokenId);\r\n\t}\r\n\r\n\tfunction getStat(uint256 _tokenId) public view returns (address tokenOwner, address approved, bytes32 seed, uint256[8] memory data) {\r\n\t\treturn (ownerOf(_tokenId), getApproved(_tokenId), getSeed(_tokenId), getSettingsCompressed(getSeed(_tokenId)));\r\n\t}\r\n\r\n\tfunction getStats(uint256[] memory _tokenIds) public view returns (address[] memory owners, address[] memory approveds, bytes32[] memory seeds, uint256[8][] memory datas) {\r\n\t\tuint256 _length = _tokenIds.length;\r\n\t\towners = new address[](_length);\r\n\t\tapproveds = new address[](_length);\r\n\t\tseeds = new bytes32[](_length);\r\n\t\tdatas = new uint256[8][](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\t(owners[i], approveds[i], seeds[i], datas[i]) = getStat(_tokenIds[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getStatsTable(uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, address[] memory owners, address[] memory approveds, bytes32[] memory seeds, uint256[8][] memory datas, uint256 totalStats, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalStats = totalSupply();\r\n\r\n\t\tif (totalStats > 0) {\r\n\t\t\ttotalPages = (totalStats / _limit) + (totalStats % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalStats % _limit != 0) {\r\n\t\t\t\t_limit = totalStats % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenByIndex(_isAsc ? _offset + i : totalStats - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t(owners, approveds, seeds, datas) = getStats(tokenIds);\r\n\t}\r\n\r\n\tfunction getOwnerStatsTable(address _owner, uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, address[] memory approveds, bytes32[] memory seeds, uint256[8][] memory datas, uint256 totalStats, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalStats = balanceOf(_owner);\r\n\r\n\t\tif (totalStats > 0) {\r\n\t\t\ttotalPages = (totalStats / _limit) + (totalStats % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalStats % _limit != 0) {\r\n\t\t\t\t_limit = totalStats % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenOfOwnerByIndex(_owner, _isAsc ? _offset + i : totalStats - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t( , approveds, seeds, datas) = getStats(tokenIds);\r\n\t}\r\n\r\n\tfunction allInfoFor(address _owner) external view returns (uint256 supply, uint256 ownerBalance) {\r\n\t\treturn (totalSupply(), balanceOf(_owner));\r\n\t}\r\n\r\n\r\n\tfunction _mint() internal {\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(totalSupply() < MAX_SUPPLY);\r\n\t\tuint256 _tokenId = info.totalSupply++;\r\n\t\tToken storage _newToken = info.list[_tokenId];\r\n\t\t_newToken.owner = msg.sender;\r\n\t\tbytes32 _seed = keccak256(abi.encodePacked(_tokenId, msg.sender, blockhash(block.number - 1), gasleft()));\r\n\t\t_newToken.seed = _seed;\r\n\t\tuint256 _index = info.users[msg.sender].balance++;\r\n\t\tinfo.users[msg.sender].indexOf[_tokenId] = _index + 1;\r\n\t\tinfo.users[msg.sender].list[_index] = _tokenId;\r\n\t\temit Transfer(address(0x0), msg.sender, _tokenId);\r\n\t\temit Mint(msg.sender, _tokenId, _seed);\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\taddress _owner = ownerOf(_tokenId);\r\n\t\taddress _approved = getApproved(_tokenId);\r\n\t\trequire(_from == _owner);\r\n\t\trequire(msg.sender == _owner || msg.sender == _approved || isApprovedForAll(_owner, msg.sender));\r\n\r\n\t\tinfo.list[_tokenId].owner = _to;\r\n\t\tif (_approved != address(0x0)) {\r\n\t\t\tinfo.list[_tokenId].approved = address(0x0);\r\n\t\t\temit Approval(address(0x0), address(0x0), _tokenId);\r\n\t\t}\r\n\r\n\t\tuint256 _index = info.users[_from].indexOf[_tokenId] - 1;\r\n\t\tuint256 _moved = info.users[_from].list[info.users[_from].balance - 1];\r\n\t\tinfo.users[_from].list[_index] = _moved;\r\n\t\tinfo.users[_from].indexOf[_moved] = _index + 1;\r\n\t\tinfo.users[_from].balance--;\r\n\t\tdelete info.users[_from].indexOf[_tokenId];\r\n\t\tuint256 _newIndex = info.users[_to].balance++;\r\n\t\tinfo.users[_to].indexOf[_tokenId] = _newIndex + 1;\r\n\t\tinfo.users[_to].list[_newIndex] = _tokenId;\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\r\n\tfunction _uint2str(uint256 _value) internal pure returns (string memory) {\r\n\t\tuint256 _digits = 1;\r\n\t\tuint256 _n = _value;\r\n\t\twhile (_n > 9) {\r\n\t\t\t_n /= 10;\r\n\t\t\t_digits++;\r\n\t\t}\r\n\t\tbytes memory _out = new bytes(_digits);\r\n\t\tfor (uint256 i = 0; i < _out.length; i++) {\r\n\t\t\tuint256 _dec = (_value / (10**(_out.length - i - 1))) % 10;\r\n\t\t\t_out[i] = bytes1(uint8(_dec) + 48);\r\n\t\t}\r\n\t\treturn string(_out);\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\r\n\t\tuint256 _tmp = (_n + 1) / 2;\r\n\t\tresult = _n;\r\n\t\twhile (_tmp < result) {\r\n\t\t\tresult = _tmp;\r\n\t\t\t_tmp = (_n / _tmp + _tmp) / 2;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _rollDice(bytes32 _rand) internal pure returns (bytes32 rand, uint256 result) {\r\n\t\tresult = 0;\r\n\t\trand = _rand;\r\n\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\trand = keccak256(abi.encodePacked(rand));\r\n\t\t\tresult += uint256(rand) % 6 + 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _encode(bytes memory _data) internal pure returns (string memory) {\r\n\t\tif (_data.length == 0) return '';\r\n\t\tstring memory table = TABLE;\r\n\t\tuint256 encodedLen = 4 * ((_data.length + 2) / 3);\r\n\t\tstring memory result = new string(encodedLen + 32);\r\n\r\n\t\tassembly {\r\n\t\t\tmstore(result, encodedLen)\r\n\t\t\tlet tablePtr := add(table, 1)\r\n\t\t\tlet dataPtr := _data\r\n\t\t\tlet endPtr := add(dataPtr, mload(_data))\r\n\t\t\tlet resultPtr := add(result, 32)\r\n\r\n\t\t\tfor {} lt(dataPtr, endPtr) {}\r\n\t\t\t{\r\n\t\t\t   dataPtr := add(dataPtr, 3)\r\n\t\t\t   let input := mload(dataPtr)\r\n\t\t\t   mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\r\n\t\t\t   resultPtr := add(resultPtr, 1)\r\n\t\t\t   mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\r\n\t\t\t   resultPtr := add(resultPtr, 1)\r\n\t\t\t   mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\r\n\t\t\t   resultPtr := add(resultPtr, 1)\r\n\t\t\t   mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\r\n\t\t\t   resultPtr := add(resultPtr, 1)\r\n\t\t\t}\r\n\t\t\tswitch mod(mload(_data), 3)\r\n\t\t\tcase 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n\t\t\tcase 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCharisma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"charisma\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getConstitution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"constitution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDexterity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getIntelligence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"modifierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getOwnerStatsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[8][]\",\"name\":\"datas\",\"type\":\"uint256[8][]\"},{\"internalType\":\"uint256\",\"name\":\"totalStats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constitution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wisdom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charisma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getSettingsCompressed\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[8][]\",\"name\":\"datas\",\"type\":\"uint256[8][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getStatsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"seeds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[8][]\",\"name\":\"datas\",\"type\":\"uint256[8][]\"},{\"internalType\":\"uint256\",\"name\":\"totalStats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStrength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constitution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wisdom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charisma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWisdom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wisdom\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"out\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StatsForLoot","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1a651bb7b2390425509815d9a9f021142c48998367f9af41a130c1da52ab631b"}]}