{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/// @title Splitter child contract for splitting ether\\n/// @author The Systango Team\\n\\nimport \\\"./Splitter.sol\\\";\\n\\ncontract Factory {\\n\\n    // The address of Factory owner address\\n    address payable public factoryOwner;\\n\\n    // The array of contracts produced by this factory contract.\\n    address[] public contracts;\\n\\n    // Event to trigger the creation of new Child contract address.\\n    event SplitterCreated(address indexed contractAddress);\\n\\n    // This is the constructor of the contract. It is called at deploy time.\\n    // This will set the factoryOwner as the address used to deploy the contract.\\n    constructor(){\\n        factoryOwner = payable(msg.sender);\\n    }\\n\\n    // Returns the length of all the contracts deployed through this factory contract.\\n    function getContractCount() public view returns (uint256) {\\n        return contracts.length;\\n    }\\n\\n    // This function is called when a new child contract has to be created.\\n\\n    /// @param owner The owner of the new child contract which will be created. \\n    /// @param payeeAddresses The address array of the new contract in which the funds \\n    /// will be splitted.\\n    /// @param payeeShare The precentage array of the respective ethereum addresses\\n    /// provided for the funds to get splitted.\\n\\n    function registerContract(\\n        address owner,\\n        address payable[] memory payeeAddresses,\\n        uint256[] memory payeeShare\\n    ) public {\\n        Splitter splitter = new Splitter(factoryOwner, false, payeeAddresses, payeeShare);\\n        contracts.push(address(splitter));\\n        splitter.transferOwnership(owner);\\n        emit SplitterCreated(address(splitter));\\n    }\\n}\\n\"\r\n    },\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/Splitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/// @title Splitter child contract for splitting ether\\n/// @author The Systango Team\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Killable.sol\\\";\\n\\ncontract Splitter is Killable {\\n\\n    // The struct of ethereum addresses and its respective share provided at the time \\n    // of contract genertaion in which the funds will be spiltted.\\n    struct Payee {\\n        address payable payeeAddress;\\n        uint256 share;\\n    }\\n\\n    // Payee struct array for the splitter addresses\\n    Payee[] public payees;\\n\\n    // Lock splitter constant\\n    bool public lock = false;\\n\\n    // The address of Factory owner address\\n    address payable public ownerAddress;\\n\\n    // Owner share of 0.1% represented in wei pattern\\n    uint256 ownerShare = 1000000000000000;\\n\\n    // Representation of 100% in wei pattern\\n    uint256 fullPercentage = 1000000000000000000;\\n\\n    // Representation of 1% in wei pattern\\n    uint256 OnePercentage = 10000000000000000;\\n\\n    // Event to trigger the receiving of ether amount.\\n    event ReceivedEth(address indexed fromAddress, uint256 amount);\\n\\n    // Event to trigger the split of ether amount successfully.\\n    event SplittedEth(uint256 amount, Payee[] payees);\\n\\n    using SafeMath for uint256;\\n\\n    // This is the constructor of the contract. It is called at deploy time.\\n    \\n    /// @param _ownerAddress The factory owner address  \\n    /// @param _paused The pause status of teh child contract  \\n    /// @param payeeAddresses The address array of the new contract in which the funds \\n    /// will be splitted.\\n    /// @param payeeShare The precentage array of the respective ethereum addresses\\n    /// provided for the funds to get splitted.\\n\\n    constructor(\\n        address payable _ownerAddress,\\n        bool _paused,\\n        address payable[] memory payeeAddresses,\\n        uint256[] memory payeeShare\\n    ) Pausable(_paused) {\\n        ownerAddress = _ownerAddress;\\n        sanityCheck(payeeAddresses, payeeShare);\\n        for (uint256 i = 0; i < payeeAddresses.length; i++) {\\n            Payee memory payee = Payee(payeeAddresses[i], (payeeShare[i].mul(OnePercentage)));\\n            payees.push(payee);\\n        }\\n    }\\n\\n    // This function is the intermediate function to implement a few checks over the \\n    // constructor of the contract when it is called.\\n\\n    /// @param payeeAddresses The address array of the new contract in which the funds \\n    /// will be splitted.\\n    /// @param payeeShares The precentage array of the respective ethereum addresses\\n    /// provided for the funds to get splitted.\\n\\n    function sanityCheck(\\n        address payable[] memory payeeAddresses,\\n        uint256[] memory payeeShares\\n    ) internal view {\\n        uint256 length = payeeAddresses.length;\\n        require(\\n            length == payeeShares.length,\\n            \\\"Mismatch between payees and share arrays\\\"\\n        );\\n\\n        uint256 shareSum;\\n        for (uint256 i; i < payeeShares.length; i++) {\\n            shareSum += payeeShares[i].mul(OnePercentage);\\n        }\\n        require(shareSum <= fullPercentage, \\\"The sum of payee share cannot exceed 100%\\\");\\n    }\\n\\n    // This function will be run when a transaction is sent to the contract\\n    // without any data and call the split method to split the fund in the percentage \\n    // ratio as provided at the time of creation of the contract.\\n\\n    receive() \\n    external payable whenRunning whenAlive {\\n        require(!lock, \\\"Splitter is currently locked\\\");\\n        lock = true;\\n\\n        emit ReceivedEth(msg.sender, address(this).balance);\\n        require(address(this).balance > 0, \\\"Fund value 0 is not allowed\\\");\\n        split(address(this).balance);\\n\\n        lock = false;\\n    }\\n\\n    // This function would split the ethers in the perccentage ratio as provided at the time \\n    // of creation of the contract.\\n\\n    /// @param amount The ether amount which will be splitted.\\n\\n    function split(\\n        uint256 amount\\n    ) internal {\\n        ownerAddress.transfer(amount.mul(ownerShare).div(fullPercentage));\\n        uint256 balance = address(this).balance;\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            address payable payee = payees[i].payeeAddress;\\n            payee.transfer(balance.mul(payees[i].share).div(fullPercentage)); // transfer percentage share\\n        }\\n        emit SplittedEth(amount, payees);\\n    }\\n}\\n\"\r\n    },\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/Killable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Pausable.sol\\\";\\n\\nabstract contract Killable is Pausable {\\n    bool private _killed;\\n    event LogKilled(address indexed account);\\n\\n    constructor () {\\n        _killed = false;\\n    }\\n\\n    function isKilled() public view returns (bool) {\\n        return _killed;\\n    }\\n\\n    function kill() public onlyOwner whenPaused whenAlive {\\n        _killed = true;\\n        emit LogKilled(msg.sender);\\n    }\\n\\n    modifier whenAlive() {\\n        require(!_killed, \\\"Contract is dead\\\");\\n        _;\\n    }\\n\\n    modifier whenDead() {\\n        require(_killed, \\\"Contract is alive\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/Pausable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Pausable is Ownable {\\n    bool private _paused;\\n    event LogPaused(address indexed account);\\n    event LogResumed(address indexed account);\\n\\n    constructor (bool paused) {\\n        _paused = paused;\\n    }\\n\\n    function isPaused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function pause() public onlyOwner whenRunning  {\\n        _paused = true;\\n        emit LogPaused(msg.sender);\\n    }\\n\\n    function resume() public onlyOwner whenPaused {\\n        _paused = false;\\n        emit LogResumed(msg.sender);\\n    }\\n\\n    modifier whenRunning () {\\n        require(!_paused, \\\"Contract is paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(_paused, \\\"Contract not paused\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"gist-104b9fe259059101e3235edb68e3d841/contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract Ownable {\\n    address private _owner;\\n    event LogTransferredOwnership(address indexed oldOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n    \\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Contract need an owner\\\");\\n        require(newOwner != _owner, \\\"Same owner\\\");\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit LogTransferredOwnership(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SplitterCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"payeeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payeeShare\",\"type\":\"uint256[]\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}