{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IUniswapFactory.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface IUniswapFactory {\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"},\"IUniswapRouter.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface IUniswapRouter {\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external;\\n\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"},\"MochaInu.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IUniswapRouter.sol\\\";\\nimport \\\"./IUniswapFactory.sol\\\";\\n\\ncontract MochaInu is Context, IERC20, Ownable {\\n\\tusing Address for address payable;\\n\\n\\tstring constant NAME = \\\"Mocha Inu\\\";\\n\\tstring constant SYMBOL = \\\"MOCHA\\\";\\n\\tuint8 constant DECIMALS = 9;\\n\\n\\tuint256 constant MAX_UINT = 2 ** 256 - 1;\\n\\taddress constant ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\taddress constant ZERO_ADDRESS = address(0);\\n\\taddress constant DEAD_ADDRESS = address(57005);\\n\\n\\tmapping(address =\\u003e uint256) rOwned;\\n\\tmapping(address =\\u003e uint256) tOwned;\\n\\n\\tmapping(address =\\u003e mapping(address =\\u003e uint256)) allowances;\\n\\n\\tmapping(address =\\u003e bool) public isExcludedFromFees;\\n\\tmapping(address =\\u003e bool) public isExcludedFromRewards;\\n\\tmapping(address =\\u003e bool) public isExcludedFromMaxWallet;\\n\\taddress[] excluded;\\n\\n\\tmapping(address =\\u003e bool) public isBot;\\n\\n\\tuint256 tTotal = 10 ** 12 * 10 ** DECIMALS;\\n\\tuint256 rTotal = (MAX_UINT - (MAX_UINT % tTotal));\\n\\n\\tuint256 public maxTxAmountBuy = tTotal / 200; // 0.5% of supply\\n\\tuint256 public maxTxAmountSell = tTotal / 200; // 0.5% of supply\\n\\tuint256 public maxWalletAmount = tTotal / 100; // 1% of supply\\n\\n\\tuint256 launchedAt;\\n\\n\\taddress payable marketingAddress;\\n\\taddress payable buybackAddress;\\n\\n\\tmapping(address =\\u003e bool) automatedMarketMakerPairs;\\n\\n\\tbool areFeesBeingProcessed;\\n\\tbool public isFeeProcessingEnabled = true;\\n\\tuint256 public feeProcessingThreshold = tTotal / 500;\\n\\n\\tIUniswapRouter router;\\n\\taddress pairAddress;\\n\\n\\tstruct FeeSet {\\n\\t\\tuint256 reflectFee;\\n\\t\\tuint256 buybackFee;\\n\\t\\tuint256 marketingFee;\\n\\t\\tuint256 liquidityFee;\\n\\t}\\n\\n\\tFeeSet public fees = FeeSet({\\n\\t\\treflectFee: 2,\\n\\t\\tbuybackFee: 3,\\n\\t\\tmarketingFee: 5,\\n\\t\\tliquidityFee: 2\\n\\t});\\n\\n\\tstruct ReflectValueSet {\\n\\t\\tuint256 rAmount;\\n\\t\\tuint256 rTransferAmount;\\n\\t\\tuint256 rReflectFee;\\n\\t\\tuint256 rOtherFee;\\n\\t\\tuint256 tTransferAmount;\\n\\t\\tuint256 tReflectFee;\\n\\t\\tuint256 tOtherFee;\\n\\t}\\n\\n\\tmodifier lockTheSwap {\\n\\t\\tareFeesBeingProcessed = true;\\n\\t\\t_;\\n\\t\\tareFeesBeingProcessed = false;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\taddress self = address(this);\\n\\n\\t\\trOwned[owner()] = rTotal;\\n\\n\\t\\trouter = IUniswapRouter(ROUTER_ADDRESS);\\n\\t\\tpairAddress = IUniswapFactory(router.factory()).createPair(self, router.WETH());\\n\\n\\t\\tautomatedMarketMakerPairs[pairAddress] = true;\\n\\n\\t\\tmarketingAddress = payable(msg.sender);\\n\\t\\tbuybackAddress = payable(msg.sender);\\n\\n\\t\\tisExcludedFromFees[owner()] = true;\\n\\t\\tisExcludedFromFees[marketingAddress] = true;\\n\\t\\tisExcludedFromFees[self] = true;\\n\\t\\tisExcludedFromFees[DEAD_ADDRESS] = true;\\n\\n\\t\\tisExcludedFromMaxWallet[owner()] = true;\\n\\t\\tisExcludedFromMaxWallet[marketingAddress] = true;\\n\\t\\tisExcludedFromMaxWallet[self] = true;\\n\\t\\tisExcludedFromMaxWallet[pairAddress] = true;\\n\\t\\tisExcludedFromMaxWallet[DEAD_ADDRESS] = true;\\n\\n\\t\\temit Transfer(ZERO_ADDRESS, owner(), tTotal);\\n\\t}\\n\\n\\tfunction name() public pure returns (string memory) {\\n\\t\\treturn NAME;\\n\\t}\\n\\n\\tfunction symbol() public pure returns (string memory) {\\n\\t\\treturn SYMBOL;\\n\\t}\\n\\n\\tfunction decimals() public pure returns (uint8) {\\n\\t\\treturn DECIMALS;\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn tTotal;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\tif (isExcludedFromRewards[account]) return tOwned[account];\\n\\t\\treturn tokenFromReflection(rOwned[account]);\\n\\t}\\n\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\n\\t\\treturn allowances[owner][spender];\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\n\\t\\tuint256 currentAllowance = allowances[sender][_msgSender()];\\n\\t\\trequire(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\tuint256 currentAllowance = allowances[_msgSender()][spender];\\n\\t\\trequire(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\n\\t\\trequire(rAmount \\u003c= rTotal, \\\"Amount must be less than total reflections\\\");\\n\\t\\tuint256 currentRate = _getRate();\\n\\t\\treturn rAmount / currentRate;\\n\\t}\\n\\n\\tfunction excludeFromRewards(address account) external onlyOwner {\\n\\t\\trequire(!isExcludedFromRewards[account], \\\"Account is already excluded\\\");\\n\\n\\t\\tif (rOwned[account] \\u003e 0) {\\n\\t\\t\\ttOwned[account] = tokenFromReflection(rOwned[account]);\\n\\t\\t}\\n\\n\\t\\tisExcludedFromRewards[account] = true;\\n\\t\\texcluded.push(account);\\n\\t}\\n\\n\\tfunction includeInRewards(address account) external onlyOwner {\\n\\t\\trequire(isExcludedFromRewards[account], \\\"Account is not excluded\\\");\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c excluded.length; i++) {\\n\\t\\t\\tif (excluded[i] == account) {\\n\\t\\t\\t\\texcluded[i] = excluded[excluded.length - 1];\\n\\t\\t\\t\\ttOwned[account] = 0;\\n\\t\\t\\t\\tisExcludedFromRewards[account] = false;\\n\\t\\t\\t\\texcluded.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getValues(uint256 tAmount, bool takeFee) private view returns (ReflectValueSet memory set) {\\n\\t\\tset = _getTValues(tAmount, takeFee);\\n\\t\\t(set.rAmount, set.rTransferAmount, set.rReflectFee, set.rOtherFee) = _getRValues(set, tAmount, takeFee, _getRate());\\n\\t\\treturn set;\\n\\t}\\n\\n\\tfunction _getTValues(uint256 tAmount, bool takeFee) private view returns (ReflectValueSet memory set) {\\n\\t\\tif (!takeFee) {\\n\\t\\t\\tset.tTransferAmount = tAmount;\\n\\t\\t\\treturn set;\\n\\t\\t}\\n\\n\\t\\tset.tReflectFee = tAmount * fees.reflectFee / 100;\\n\\t\\tset.tOtherFee = tAmount * (fees.buybackFee + fees.marketingFee + fees.liquidityFee) / 100;\\n\\t\\tset.tTransferAmount = tAmount - set.tReflectFee - set.tOtherFee;\\n\\n\\t\\treturn set;\\n\\t}\\n\\n\\tfunction _getRValues(ReflectValueSet memory set, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflectFee, uint256 rOtherFee) {\\n\\t\\trAmount = tAmount * currentRate;\\n\\n\\t\\tif (!takeFee) {\\n\\t\\t\\treturn (rAmount, rAmount, 0, 0);\\n\\t\\t}\\n\\n\\t\\trReflectFee = set.tReflectFee * currentRate;\\n\\t\\trOtherFee = set.tOtherFee * currentRate;\\n\\t\\trTransferAmount = rAmount - rReflectFee - rOtherFee;\\n\\t\\treturn (rAmount, rTransferAmount, rReflectFee, rOtherFee);\\n\\t}\\n\\n\\tfunction _getRate() private view returns (uint256) {\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n\\t\\treturn rSupply / tSupply;\\n\\t}\\n\\n\\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\\n\\t\\tuint256 rSupply = rTotal;\\n\\t\\tuint256 tSupply = tTotal;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c excluded.length; i++) {\\n\\t\\t\\tif (rOwned[excluded[i]] \\u003e rSupply || tOwned[excluded[i]] \\u003e tSupply) return (rTotal, tTotal);\\n\\t\\t\\trSupply -= rOwned[excluded[i]];\\n\\t\\t\\ttSupply -= tOwned[excluded[i]];\\n\\t\\t}\\n\\n\\t\\tif (rSupply \\u003c rTotal / tTotal) return (rTotal, tTotal);\\n\\t\\treturn (rSupply, tSupply);\\n\\t}\\n\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\n\\t\\trequire(owner != ZERO_ADDRESS, \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != ZERO_ADDRESS, \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\tallowances[owner][spender] = amount;\\n\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _transfer(address from, address to, uint256 amount) private {\\n\\t\\trequire(from != ZERO_ADDRESS, \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(to != ZERO_ADDRESS, \\\"ERC20: transfer to the zero address\\\");\\n\\t\\trequire(!isBot[from], \\\"ERC20: address blacklisted (bot)\\\");\\n\\t\\trequire(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n\\t\\trequire(amount \\u003c= balanceOf(from), \\\"You are trying to transfer more than your balance\\\");\\n\\n\\t\\tif (maxWalletAmount \\u003e 0 \\u0026\\u0026 !automatedMarketMakerPairs[to] \\u0026\\u0026 !isExcludedFromMaxWallet[to]) {\\n\\t\\t\\trequire((balanceOf(to) + amount) \\u003c= maxWalletAmount, \\\"You are trying to transfer more than the max wallet amount\\\");\\n\\t\\t}\\n\\n\\t\\tif (launchedAt == 0 \\u0026\\u0026 automatedMarketMakerPairs[to]) {\\n\\t\\t\\tlaunchedAt = block.number;\\n\\t\\t}\\n\\n\\t\\tbool shouldTakeFees = !isExcludedFromFees[from] \\u0026\\u0026 !isExcludedFromFees[to];\\n\\t\\tif (shouldTakeFees) {\\n\\t\\t\\trequire(amount \\u003c= (automatedMarketMakerPairs[from] ? maxTxAmountBuy : maxTxAmountSell), \\\"You are trying to transfer too many tokens\\\");\\n\\n\\t\\t\\tif (automatedMarketMakerPairs[from] \\u0026\\u0026 block.number \\u003c= launchedAt) {\\n\\t\\t\\t\\tisBot[to] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 balance = balanceOf(address(this));\\n\\n\\t\\tif (balance \\u003e maxTxAmountSell) {\\n\\t\\t\\tbalance = maxTxAmountSell;\\n\\t\\t}\\n\\n\\t\\tif (isFeeProcessingEnabled \\u0026\\u0026 !areFeesBeingProcessed \\u0026\\u0026 balance \\u003e= feeProcessingThreshold \\u0026\\u0026 !automatedMarketMakerPairs[from]) {\\n\\t\\t\\tareFeesBeingProcessed = true;\\n\\t\\t\\t_processFees(balance);\\n\\t\\t\\tareFeesBeingProcessed = false;\\n\\t\\t}\\n\\n\\t\\t_tokenTransfer(from, to, amount, shouldTakeFees);\\n\\t}\\n\\n\\tfunction _takeReflectFees(uint256 rReflectFee) private {\\n\\t\\trTotal -= rReflectFee;\\n\\t}\\n\\n\\tfunction _takeOtherFees(uint256 rOtherFee, uint256 tOtherFee) private {\\n\\t\\taddress self = address(this);\\n\\n\\t\\trOwned[self] += rOtherFee;\\n\\n\\t\\tif (isExcludedFromRewards[self]) {\\n\\t\\t\\ttOwned[self] += tOtherFee;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, bool shouldTakeFees) private {\\n\\t\\tReflectValueSet memory set = _getValues(tAmount, shouldTakeFees);\\n\\n\\t\\tif (isExcludedFromRewards[sender]) {\\n\\t\\t\\ttOwned[sender] -= tAmount;\\n\\t\\t}\\n\\n\\t\\tif (isExcludedFromRewards[recipient]) {\\n\\t\\t\\ttOwned[recipient] += set.tTransferAmount;\\n\\t\\t}\\n\\n\\t\\trOwned[sender] -= set.rAmount;\\n\\t\\trOwned[recipient] += set.rTransferAmount;\\n\\n\\t\\tif (shouldTakeFees) {\\n\\t\\t\\t_takeReflectFees(set.rReflectFee);\\n\\t\\t\\t_takeOtherFees(set.rOtherFee, set.tOtherFee);\\n\\t\\t\\temit Transfer(sender, address(this), set.tOtherFee);\\n\\t\\t}\\n\\n\\t\\temit Transfer(sender, recipient, set.tTransferAmount);\\n\\t}\\n\\n\\tfunction _processFees(uint256 amount) private lockTheSwap {\\n\\t\\tuint256 feeSum = fees.buybackFee + fees.marketingFee + fees.liquidityFee;\\n\\t\\tif (feeSum == 0) return;\\n\\n\\t\\tuint256 amountForBuyback = amount * fees.buybackFee / feeSum;\\n\\t\\tuint256 amountForMarketing = amount * fees.marketingFee / feeSum;\\n\\t\\tuint256 amountForLiquidity = amount - amountForBuyback - amountForMarketing;\\n\\n\\t\\t_addLiquidity(amountForLiquidity);\\n\\n\\t\\tuint256 amountOut = _swapExactTokensForETH(amountForBuyback + amountForMarketing);\\n\\t\\tuint256 ethForBuyback = amountOut * fees.buybackFee / (fees.buybackFee + fees.marketingFee);\\n\\n\\t\\tbuybackAddress.transfer(ethForBuyback);\\n\\t\\tmarketingAddress.transfer(address(this).balance);\\n\\t}\\n\\n\\tfunction _addLiquidity(uint256 amount) private {\\n\\t\\taddress self = address(this);\\n\\n\\t\\tuint256 tokensToSell = amount / 2;\\n\\t\\tuint256 tokensForLiquidity = amount - tokensToSell;\\n\\n\\t\\tuint256 ethForLiquidity = _swapExactTokensForETH(tokensToSell);\\n\\n\\t\\t_approve(self, address(router), MAX_UINT);\\n\\t\\trouter.addLiquidityETH{value : ethForLiquidity}(self, tokensForLiquidity, 0, 0, DEAD_ADDRESS, block.timestamp);\\n\\t}\\n\\n\\tfunction _swapExactTokensForETH(uint256 amountIn) private returns (uint256) {\\n\\t\\taddress self = address(this);\\n\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = self;\\n\\t\\tpath[1] = router.WETH();\\n\\n\\t\\t_approve(self, address(router), MAX_UINT);\\n\\n\\t\\tuint256 previousBalance = self.balance;\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, self, block.timestamp);\\n\\t\\treturn self.balance - previousBalance;\\n\\t}\\n\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n\\t\\trequire(automatedMarketMakerPairs[pair] != value, \\\"Automated market maker pair is already set to that value\\\");\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\n\\n\\t\\tif (value) {\\n\\t\\t\\tisExcludedFromMaxWallet[pair] = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setFees(uint256 reflectFee, uint256 buybackFee, uint256 marketingFee, uint256 liquidityFee) external onlyOwner {\\n\\t    require((reflectFee + buybackFee + marketingFee + liquidityFee) \\u003c= 15, \\\"Cannot set fees to above a combined total of 15%\\\");\\n\\t    \\n\\t\\tfees = FeeSet({\\n\\t\\t\\treflectFee: reflectFee,\\n\\t\\t\\tbuybackFee: buybackFee,\\n\\t\\t\\tmarketingFee: marketingFee,\\n\\t\\t\\tliquidityFee: liquidityFee\\n\\t\\t});\\n\\t}\\n\\n\\tfunction setIsFeeProcessingEnabled(bool value) public onlyOwner {\\n\\t\\tisFeeProcessingEnabled = value;\\n\\t}\\n\\n\\tfunction setFeeProcessingThreshold(uint256 value) external onlyOwner {\\n\\t\\tfeeProcessingThreshold = value;\\n\\t}\\n\\n\\tfunction setMaxTransactionAmounts(uint256 maxBuy, uint256 maxSell) external onlyOwner {\\n\\t    require(maxBuy \\u003e= (tTotal / 400), \\\"Must set max buy to at least 0.25% of total supply\\\");\\n\\t    require(maxSell \\u003e= (tTotal / 400), \\\"Must set max sell to at least 0.25% of total supply\\\");\\n\\t\\tmaxTxAmountBuy = maxBuy;\\n\\t\\tmaxTxAmountSell = maxSell;\\n\\t}\\n\\n\\tfunction setMarketingAddress(address payable value) external onlyOwner {\\n\\t\\trequire(marketingAddress != value, \\\"Marketing address is already set to this value\\\");\\n\\t\\tmarketingAddress = value;\\n\\t}\\n\\n\\tfunction setBuybackAddress(address payable value) external onlyOwner {\\n\\t\\trequire(buybackAddress != value, \\\"Buyback address is already set to this value\\\");\\n\\t\\tbuybackAddress = value;\\n\\t}\\n\\n\\tfunction setIsBot(address account, bool value) external onlyOwner {\\n\\t\\trequire(isBot[account] != value, \\\"Account is already set to this value\\\");\\n\\t\\tisBot[account] = value;\\n\\t}\\n\\n\\tfunction setMaxWalletAmount(uint256 value) external onlyOwner {\\n\\t    require(value \\u003e= (tTotal / 200), \\\"Must set max wallet to at least 0.5% of total supply\\\");\\n\\t\\trequire(maxWalletAmount != value, \\\"Max wallet amount is already set to this value\\\");\\n\\t\\tmaxWalletAmount = value;\\n\\t}\\n\\n\\tfunction setIsExcludedFromMaxWallet(address account, bool value) external onlyOwner {\\n\\t\\trequire(isExcludedFromMaxWallet[account] != value, \\\"Account is already set to this value\\\");\\n\\t\\tisExcludedFromMaxWallet[account] = value;\\n\\t}\\n\\n\\tfunction setIsExcludedFromFees(address account, bool value) external onlyOwner {\\n\\t\\trequire(isExcludedFromFees[account] != value, \\\"Account is already set to this value\\\");\\n\\t\\tisExcludedFromFees[account] = value;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeProcessingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setBuybackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFeeProcessingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsFeeProcessingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MochaInu","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://699b4e8f3432d71da628de2395d00e7d9f4da1864fb9aa5e102c97c43358fad2"}]}