{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EPNSCoreV1.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * EPNS Core is the main protocol that deals with the imperative\\n * features and functionalities like Channel Creation, pushChannelAdmin etc.\\n *\\n * This protocol will be specifically deployed on Ethereum Blockchain while the Communicator\\n * protocols can be deployed on Multiple Chains.\\n * The EPNS Core is more inclined towards the storing and handling the Channel related\\n * Functionalties.\\n **/\\n\\nimport \\\"./interfaces/IPUSH.sol\\\";\\nimport \\\"./interfaces/IADai.sol\\\";\\nimport \\\"./interfaces/ILendingPool.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IEPNSCommV1.sol\\\";\\nimport \\\"./interfaces/ILendingPoolAddressesProvider.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract EPNSCoreV1 is Initializable{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ***************\\n\\n      DEFINE ENUMS AND CONSTANTS\\n\\n     *************** */\\n\\n    // For Message Type\\n    enum ChannelType {\\n        ProtocolNonInterest,\\n        ProtocolPromotion,\\n        InterestBearingOpen,\\n        InterestBearingMutual\\n    }\\n    enum ChannelAction {\\n        ChannelRemoved,\\n        ChannelAdded,\\n        ChannelUpdated\\n    }\\n\\n    /**\\n     * @notice Channel Struct that includes imperative details about a specific Channel.\\n    **/\\n    struct Channel {\\n        // @notice Denotes the Channel Type\\n        ChannelType channelType;\\n\\n        /** @notice Symbolizes Channel's State:\\n         * 0 -> INACTIVE,\\n         * 1 -> ACTIVATED\\n         * 2 -> DeActivated By Channel Owner,\\n         * 3 -> BLOCKED by pushChannelAdmin/Governance\\n        **/\\n        uint8 channelState;\\n\\n        // @notice denotes the address of the verifier of the Channel\\n        address verifiedBy;\\n\\n        // @notice Total Amount of Dai deposited during Channel Creation\\n        uint256 poolContribution;\\n\\n        // @notice Represents the Historical Constant\\n        uint256 channelHistoricalZ;\\n\\n        // @notice Represents the FS Count\\n        uint256 channelFairShareCount;\\n\\n        // @notice The last update block number, used to calculate fair share\\n        uint256 channelLastUpdate;\\n\\n        // @notice Helps in defining when channel started for pool and profit calculation\\n        uint256 channelStartBlock;\\n\\n        // @notice Helps in outlining when channel was updated\\n        uint256 channelUpdateBlock;\\n\\n        // @notice The individual weight to be applied as per pool contribution\\n        uint256 channelWeight;\\n    }\\n\\n    /* ***************\\n        MAPPINGS\\n     *************** */\\n\\n    mapping(address => Channel) public channels;\\n    mapping(uint256 => address) public channelById;\\n    mapping(address => string) public channelNotifSettings;\\n\\n    /* ***************\\n        STATE VARIABLES\\n     *************** */\\n    string public constant name = \\\"EPNS CORE V1\\\";\\n    bool oneTimeCheck;\\n    bool public isMigrationComplete;\\n\\n    address public pushChannelAdmin;\\n    address public governance;\\n    address public daiAddress;\\n    address public aDaiAddress;\\n    address public WETH_ADDRESS;\\n    address public epnsCommunicator;\\n    address public UNISWAP_V2_ROUTER;\\n    address public PUSH_TOKEN_ADDRESS;\\n    address public lendingPoolProviderAddress;\\n\\n    uint256 public REFERRAL_CODE;\\n    uint256 ADJUST_FOR_FLOAT;\\n    uint256 public channelsCount;\\n\\n    //  @notice Helper Variables for FSRatio Calculation | GROUPS = CHANNELS\\n    uint256 public groupNormalizedWeight;\\n    uint256 public groupHistoricalZ;\\n    uint256 public groupLastUpdate;\\n    uint256 public groupFairShareCount;\\n\\n    // @notice Necessary variables for Keeping track of Funds and Fees\\n    uint256 public POOL_FUNDS;\\n    uint256 public PROTOCOL_POOL_FEES;\\n    uint256 public ADD_CHANNEL_MIN_FEES;\\n    uint256 public CHANNEL_DEACTIVATION_FEES;\\n    uint256 public ADD_CHANNEL_MIN_POOL_CONTRIBUTION;\\n\\n    /* ***************\\n        EVENTS\\n     *************** */\\n    event UpdateChannel(address indexed channel, bytes identity);\\n    event ChannelVerified(address indexed channel, address indexed verifier);\\n    event ChannelVerificationRevoked(address indexed channel, address indexed revoker);\\n\\n    event DeactivateChannel(\\n        address indexed channel,\\n        uint256 indexed amountRefunded\\n    );\\n    event ReactivateChannel(\\n        address indexed channel,\\n        uint256 indexed amountDeposited\\n    );\\n    event ChannelBlocked(\\n        address indexed channel\\n    );\\n    event AddChannel(\\n        address indexed channel,\\n        ChannelType indexed channelType,\\n        bytes identity\\n    );\\n    event ChannelNotifcationSettingsAdded(\\n        address _channel,\\n        uint256 totalNotifOptions,\\n        string _notifSettings,\\n        string _notifDescription\\n    );\\n\\n    /* **************\\n        MODIFIERS\\n    ***************/\\n    modifier onlyPushChannelAdmin() {\\n        require(msg.sender == pushChannelAdmin, \\\"EPNSCoreV1::onlyPushChannelAdmin: Caller not pushChannelAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"EPNSCoreV1::onlyGovernance: Caller not Governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyInactiveChannels(address _channel) {\\n        require(\\n            channels[_channel].channelState == 0,\\n            \\\"EPNSCoreV1::onlyInactiveChannels: Channel already Activated\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyActivatedChannels(address _channel) {\\n        require(\\n            channels[_channel].channelState == 1,\\n            \\\"EPNSCoreV1::onlyActivatedChannels: Channel Deactivated, Blocked or Does Not Exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyDeactivatedChannels(address _channel) {\\n        require(\\n            channels[_channel].channelState == 2,\\n            \\\"EPNSCoreV1::onlyDeactivatedChannels: Channel is not Deactivated Yet\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyUnblockedChannels(address _channel) {\\n        require(\\n            ((channels[_channel].channelState != 3) &&\\n              (channels[_channel].channelState != 0)),\\n            \\\"EPNSCoreV1::onlyUnblockedChannels: Channel is BLOCKED Already or Not Activated Yet\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyChannelOwner(address _channel) {\\n        require(\\n            ((channels[_channel].channelState == 1 && msg.sender == _channel) ||\\n                (msg.sender == pushChannelAdmin &&\\n                    _channel == address(0x0))),\\n            \\\"EPNSCoreV1::onlyChannelOwner: Channel not Exists or Invalid Channel Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyUserAllowedChannelType(ChannelType _channelType) {\\n        require(\\n            (_channelType == ChannelType.InterestBearingOpen ||\\n                _channelType == ChannelType.InterestBearingMutual),\\n            \\\"EPNSCoreV1::onlyUserAllowedChannelType: Channel Type Invalid\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /* ***************\\n        INITIALIZER\\n    *************** */\\n\\n    function initialize(\\n        address _pushChannelAdmin,\\n        address _pushTokenAddress,\\n        address _wethAddress,\\n        address _uniswapRouterAddress,\\n        address _lendingPoolProviderAddress,\\n        address _daiAddress,\\n        address _aDaiAddress,\\n        uint256 _referralCode\\n    ) public initializer returns (bool success) {\\n        // setup addresses\\n        pushChannelAdmin = _pushChannelAdmin;\\n        governance = _pushChannelAdmin; // Will be changed on-Chain governance Address later\\n        daiAddress = _daiAddress;\\n        aDaiAddress = _aDaiAddress;\\n        WETH_ADDRESS = _wethAddress;\\n        REFERRAL_CODE = _referralCode;\\n        PUSH_TOKEN_ADDRESS = _pushTokenAddress;\\n        UNISWAP_V2_ROUTER = _uniswapRouterAddress;\\n        lendingPoolProviderAddress = _lendingPoolProviderAddress;\\n\\n        CHANNEL_DEACTIVATION_FEES = 10 ether; // 10 DAI out of total deposited DAIs is charged for Deactivating a Channel\\n        ADD_CHANNEL_MIN_POOL_CONTRIBUTION = 50 ether; // 50 DAI or above to create the channel\\n        ADD_CHANNEL_MIN_FEES = 50 ether; // can never be below ADD_CHANNEL_MIN_POOL_CONTRIBUTION\\n\\n        ADJUST_FOR_FLOAT = 10**7;\\n        groupLastUpdate = block.number;\\n        groupNormalizedWeight = ADJUST_FOR_FLOAT; // Always Starts with 1 * ADJUST FOR FLOAT\\n\\n        // Create Channel\\n        success = true;\\n    }\\n\\n    /* ***************\\n\\n    SETTER FUNCTIONS\\n\\n    *************** */\\n    function updateWETHAddress(address _newAddress) external onlyPushChannelAdmin() {\\n        WETH_ADDRESS = _newAddress;\\n    }\\n\\n    function updateUniswapRouterAddress(address _newAddress) external onlyPushChannelAdmin() {\\n        UNISWAP_V2_ROUTER = _newAddress;\\n    }\\n\\n    function setEpnsCommunicatorAddress(address _commAddress)\\n        external\\n        onlyPushChannelAdmin()\\n    {\\n        epnsCommunicator = _commAddress;\\n    }\\n\\n    function setGovernanceAddress(address _governanceAddress)\\n        external\\n        onlyPushChannelAdmin()\\n    {\\n      governance = _governanceAddress;\\n    }\\n\\n    function setMigrationComplete() external onlyPushChannelAdmin() {\\n        isMigrationComplete = true;\\n    }\\n\\n    function setChannelDeactivationFees(uint256 _newFees) external onlyGovernance() {\\n        require(\\n            _newFees > 0,\\n            \\\"EPNSCoreV1::setChannelDeactivationFees: Channel Deactivation Fees must be greater than ZERO\\\"\\n        );\\n        CHANNEL_DEACTIVATION_FEES = _newFees;\\n    }\\n    /**\\n      * @notice Allows to set the Minimum amount threshold for Creating Channels\\n      *\\n      * @dev    Minimum required amount can never be below ADD_CHANNEL_MIN_POOL_CONTRIBUTION\\n      *\\n      * @param _newFees new minimum fees required for Channel Creation\\n    **/\\n    function setMinChannelCreationFees(uint256 _newFees) external onlyGovernance() {\\n        require(\\n            _newFees >= ADD_CHANNEL_MIN_POOL_CONTRIBUTION,\\n            \\\"EPNSCoreV1::setMinChannelCreationFees: Fees should be greater than ADD_CHANNEL_MIN_POOL_CONTRIBUTION\\\"\\n        );\\n        ADD_CHANNEL_MIN_FEES = _newFees;\\n    }\\n\\n\\n    function transferPushChannelAdminControl(address _newAdmin) public onlyPushChannelAdmin() {\\n        require(_newAdmin != address(0), \\\"EPNSCoreV1::transferPushChannelAdminControl: Invalid Address\\\");\\n        require(_newAdmin != pushChannelAdmin, \\\"EPNSCoreV1::transferPushChannelAdminControl: Admin address is same\\\");\\n        pushChannelAdmin = _newAdmin;\\n    }\\n\\n    /* ***********************************\\n\\n        CHANNEL RELATED FUNCTIONALTIES\\n\\n    **************************************/\\n    function getChannelState(address _channel) external view returns(uint256 state) {\\n        state = channels[_channel].channelState;\\n    }\\n    /**\\n     * @notice Allows Channel Owner to update their Channel Description/Detail\\n     *\\n     * @dev    Emits an event with the new identity for the respective Channel Address\\n     *         Records the Block Number of the Block at which the Channel is being updated with a New Identity\\n     *\\n     * @param _channel     address of the Channel\\n     * @param _newIdentity bytes Value for the New Identity of the Channel\\n     **/\\n    function updateChannelMeta(address _channel, bytes calldata _newIdentity)\\n        external\\n        onlyChannelOwner(_channel)\\n    {\\n        emit UpdateChannel(_channel, _newIdentity);\\n\\n        _updateChannelMeta(_channel);\\n    }\\n\\n    function _updateChannelMeta(address _channel) internal {\\n        channels[_channel].channelUpdateBlock = block.number;\\n    }\\n\\n    function createChannelForPushChannelAdmin() external onlyPushChannelAdmin() {\\n        require (!oneTimeCheck, \\\"EPNSCoreV1::createChannelForPushChannelAdmin: Channel for Admin is already Created\\\");\\n\\n        // Add EPNS Channels\\n        // First is for all users\\n        // Second is all channel alerter, amount deposited for both is 0\\n        // to save gas, emit both the events out\\n        // identity = payloadtype + payloadhash\\n\\n        // EPNS ALL USERS\\n\\n        _createChannel(pushChannelAdmin, ChannelType.ProtocolNonInterest, 0); // should the owner of the contract be the channel? should it be pushChannelAdmin in this case?\\n         emit AddChannel(\\n            pushChannelAdmin,\\n            ChannelType.ProtocolNonInterest,\\n            \\\"1+QmSbRT16JVF922yAB26YxWFD6DmGsnSHm8VBrGUQnXTS74\\\"\\n        );\\n\\n        // EPNS ALERTER CHANNEL\\n        _createChannel(\\n            address(0x0),\\n            ChannelType.ProtocolNonInterest,\\n            0\\n        );\\n        emit AddChannel(\\n        address(0x0),\\n        ChannelType.ProtocolNonInterest,\\n        \\\"1+QmTCKYL2HRbwD6nGNvFLe4wPvDNuaYGr6RiVeCvWjVpn5s\\\"\\n        );\\n\\n        oneTimeCheck = true;\\n    }\\n\\n    /**\\n     * @notice An external function that allows users to Create their Own Channels by depositing a valid amount of DAI\\n     * @dev    Only allows users to Create One Channel for a specific address.\\n     *         Only allows a Valid Channel Type to be assigned for the Channel Being created.\\n     *         Validates and Transfers the amount of DAI from the Channel Creator to this Contract Address\\n     *         Deposits the Funds the Lending Pool and creates the Channel for the msg.sender.\\n     * @param  _channelType the type of the Channel Being created\\n     * @param  _identity the bytes value of the identity of the Channel\\n     * @param  _amount Amount of DAI to be deposited before Creating the Channel\\n     **/\\n    function createChannelWithFees(\\n        ChannelType _channelType,\\n        bytes calldata _identity,\\n        uint256 _amount\\n    )\\n        external\\n        onlyInactiveChannels(msg.sender)\\n        onlyUserAllowedChannelType(_channelType)\\n    {\\n        // Save gas, Emit the event out\\n        emit AddChannel(msg.sender, _channelType, _identity);\\n\\n        // Bubble down to create channel\\n        _createChannelWithFees(msg.sender, _channelType, _amount);\\n    }\\n\\n    function _createChannelWithFees(\\n        address _channel,\\n        ChannelType _channelType,\\n        uint256 _amount\\n    ) private {\\n        // Check if it's equal or above Channel Pool Contribution\\n        require(\\n            _amount >= ADD_CHANNEL_MIN_FEES,\\n            \\\"EPNSCoreV1::_createChannelWithFees: Insufficient Deposit Amount\\\"\\n        );\\n        IERC20(daiAddress).safeTransferFrom(_channel, address(this), _amount);\\n        _depositFundsToPool(_amount);\\n        _createChannel(_channel, _channelType, _amount);\\n    }\\n\\n      /**\\n     * @notice Migration function that allows pushChannelAdmin to migrate the previous Channel Data to this protocol\\n     *\\n     * @dev   can only be Called by the pushChannelAdmin\\n     *        Channel's identity is simply emitted out\\n     *        Channel's on-Chain details are stored by calling the \\\"_crateChannel\\\" function\\n     *        DAI required for Channel Creation will be PAID by pushChannelAdmin\\n     *\\n     * @param _startIndex       starting Index for the LOOP\\n     * @param _endIndex         Last Index for the LOOP\\n     * @param _channelAddresses array of address of the Channel\\n     * @param _channelTypeList   array of type of the Channel being created\\n     * @param _identityList     array of list of identity Bytes\\n     * @param _amountList       array of amount of DAI to be depositeds\\n    **/\\n    function migrateChannelData(\\n        uint256 _startIndex,\\n        uint256 _endIndex,\\n        address[] calldata _channelAddresses,\\n        ChannelType[] calldata _channelTypeList,\\n        bytes[] calldata _identityList,\\n        uint256[] calldata _amountList\\n    ) external onlyPushChannelAdmin returns (bool) {\\n        require(\\n            !isMigrationComplete,\\n            \\\"EPNSCoreV1::migrateChannelData: Migration is already done\\\"\\n        );\\n\\n        require(\\n            (_channelAddresses.length == _channelTypeList.length) &&\\n            (_channelAddresses.length == _identityList.length) &&\\n            (_channelAddresses.length == _amountList.length),\\n            \\\"EPNSCoreV1::migrateChannelData: Unequal Arrays passed as Argument\\\"\\n        );\\n\\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\\n                if(channels[_channelAddresses[i]].channelState != 0){\\n                    continue;\\n            }else{\\n                IERC20(daiAddress).safeTransferFrom(msg.sender, address(this), _amountList[i]);\\n                _depositFundsToPool(_amountList[i]);\\n                emit AddChannel(_channelAddresses[i], _channelTypeList[i], _identityList[i]);\\n                _createChannel(_channelAddresses[i], _channelTypeList[i], _amountList[i]);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Base Channel Creation Function that allows users to Create Their own Channels and Stores crucial details about the Channel being created\\n     * @dev    -Initializes the Channel Struct\\n     *         -Subscribes the Channel's Owner to Imperative EPNS Channels as well as their Own Channels\\n     *         -Increases Channel Counts and Readjusts the FS of Channels\\n     * @param _channel         address of the channel being Created\\n     * @param _channelType     The type of the Channel\\n     * @param _amountDeposited The total amount being deposited while Channel Creation\\n     **/\\n    function _createChannel(\\n        address _channel,\\n        ChannelType _channelType,\\n        uint256 _amountDeposited\\n    ) private {\\n        // Calculate channel weight\\n        uint256 _channelWeight = _amountDeposited.mul(ADJUST_FOR_FLOAT).div(\\n            ADD_CHANNEL_MIN_POOL_CONTRIBUTION\\n        );\\n\\n        // Next create the channel and mark user as channellized\\n        channels[_channel].channelState = 1;\\n\\n        channels[_channel].poolContribution = _amountDeposited;\\n        channels[_channel].channelType = _channelType;\\n        channels[_channel].channelStartBlock = block.number;\\n        channels[_channel].channelUpdateBlock = block.number;\\n        channels[_channel].channelWeight = _channelWeight;\\n\\n        // Add to map of addresses and increment channel count\\n        channelById[channelsCount] = _channel;\\n        channelsCount = channelsCount.add(1);\\n\\n        // Readjust fair share if interest bearing\\n        if (\\n            _channelType == ChannelType.ProtocolPromotion ||\\n            _channelType == ChannelType.InterestBearingOpen ||\\n            _channelType == ChannelType.InterestBearingMutual\\n        ) {\\n            (\\n                groupFairShareCount,\\n                groupNormalizedWeight,\\n                groupHistoricalZ,\\n                groupLastUpdate\\n            ) = _readjustFairShareOfChannels(\\n                ChannelAction.ChannelAdded,\\n                _channelWeight,\\n                0,\\n                groupFairShareCount,\\n                groupNormalizedWeight,\\n                groupHistoricalZ,\\n                groupLastUpdate\\n            );\\n        }\\n\\n        // Subscribe them to their own channel as well\\n        if (_channel != pushChannelAdmin) {\\n            IEPNSCommV1(epnsCommunicator).subscribeViaCore(\\n                _channel,\\n                _channel\\n            );\\n        }\\n\\n        // All Channels are subscribed to EPNS Alerter as well, unless it's the EPNS Alerter channel iteself\\n        if (_channel != address(0x0)) {\\n            IEPNSCommV1(epnsCommunicator).subscribeViaCore(\\n                address(0x0),\\n                _channel\\n            );\\n            IEPNSCommV1(epnsCommunicator).subscribeViaCore(\\n                _channel,\\n                pushChannelAdmin\\n            );\\n        }\\n    }\\n\\n    /** @notice - Deliminated Notification Settings string contains -> Total Notif Options + Notification Settings\\n     * For instance: 5+1-0+2-50-20-100+1-1+2-78-10-150\\n     *  5 -> Total Notification Options provided by a Channel owner\\n     *\\n     *  For Boolean Type Notif Options\\n     *  1-0 -> 1 stands for BOOLEAN type - 0 stands for Default Boolean Type for that Notifcation(set by Channel Owner), In this case FALSE.\\n     *  1-1 stands for BOOLEAN type - 1 stands for Default Boolean Type for that Notifcation(set by Channel Owner), In this case TRUE.\\n     *\\n     *  For SLIDER TYPE Notif Options\\n     *   2-50-20-100 -> 2 stands for SLIDER TYPE - 50 stands for Default Value for that Option - 20 is the Start Range of that SLIDER - 100 is the END Range of that SLIDER Option\\n     *  2-78-10-150 -> 2 stands for SLIDER TYPE - 78 stands for Default Value for that Option - 10 is the Start Range of that SLIDER - 150 is the END Range of that SLIDER Option\\n     *\\n     *  @param _notifOptions - Total Notification options provided by the Channel Owner\\n     *  @param _notifSettings- Deliminated String of Notification Settings\\n     *  @param _notifDescription - Description of each Notification that depicts the Purpose of that Notification\\n    **/\\n    function createChannelSettings(\\n        uint256 _notifOptions,\\n        string calldata _notifSettings,\\n        string calldata _notifDescription\\n    ) external onlyActivatedChannels(msg.sender) {\\n        string memory notifSetting = string(\\n            abi.encodePacked(\\n                Strings.toString(_notifOptions),\\n                \\\"+\\\",\\n                _notifSettings\\n            )\\n        );\\n        channelNotifSettings[msg.sender] = notifSetting;\\n        emit ChannelNotifcationSettingsAdded(\\n            msg.sender,\\n            _notifOptions,\\n            notifSetting,\\n            _notifDescription\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows Channel Owner to Deactivate his/her Channel for any period of Time. Channels Deactivated can be Activated again.\\n     * @dev    - Function can only be Called by Already Activated Channels\\n     *         - Calculates the Total DAI Deposited by Channel Owner while Channel Creation.\\n     *         - Deducts CHANNEL_DEACTIVATION_FEES from the total Deposited DAI and Transfers back the remaining amount of DAI in the form of PUSH tokens.\\n     *         - Calculates the New Channel Weight and Readjusts the FS Ratio accordingly.\\n     *         - Updates the State of the Channel(channelState) and the New Channel Weight in the Channel's Struct\\n     *         - In case, the Channel Owner wishes to reactivate his/her channel, they need to Deposit at least the Minimum required DAI while reactivating.\\n     **/\\n\\n    function deactivateChannel(uint256 _amountsOutValue) external onlyActivatedChannels(msg.sender) {\\n        Channel storage channelData = channels[msg.sender];\\n\\n        uint256 totalAmountDeposited = channelData.poolContribution;\\n        uint256 totalRefundableAmount = totalAmountDeposited.sub(\\n            CHANNEL_DEACTIVATION_FEES\\n        );\\n\\n        uint256 _oldChannelWeight = channelData.channelWeight;\\n        uint256 _newChannelWeight = CHANNEL_DEACTIVATION_FEES\\n            .mul(ADJUST_FOR_FLOAT)\\n            .div(ADD_CHANNEL_MIN_POOL_CONTRIBUTION);\\n\\n        (\\n            groupFairShareCount,\\n            groupNormalizedWeight,\\n            groupHistoricalZ,\\n            groupLastUpdate\\n        ) = _readjustFairShareOfChannels(\\n            ChannelAction.ChannelUpdated,\\n            _newChannelWeight,\\n            _oldChannelWeight,\\n            groupFairShareCount,\\n            groupNormalizedWeight,\\n            groupHistoricalZ,\\n            groupLastUpdate\\n        );\\n\\n        channelData.channelState = 2;\\n        POOL_FUNDS = POOL_FUNDS.sub(totalRefundableAmount);\\n        channelData.channelWeight = _newChannelWeight;\\n        channelData.poolContribution = CHANNEL_DEACTIVATION_FEES;\\n\\n        swapAndTransferPUSH(msg.sender, totalRefundableAmount, _amountsOutValue);\\n        emit DeactivateChannel(msg.sender, totalRefundableAmount);\\n    }\\n\\n    /**\\n     * @notice Allows Channel Owner to Reactivate his/her Channel again.\\n     * @dev    - Function can only be called by previously Deactivated Channels\\n     *         - Channel Owner must Depost at least minimum amount of DAI to reactivate his/her channel.\\n     *         - Deposited Dai goes thorugh similar procedure and is deposited to AAVE .\\n     *         - Calculation of the new Channel Weight is performed and the FairShare is Readjusted once again with relevant details\\n     *         - Updates the State of the Channel(channelState) in the Channel's Struct.\\n     * @param _amount Amount of Dai to be deposited\\n     **/\\n\\n    function reactivateChannel(uint256 _amount)\\n        external\\n        onlyDeactivatedChannels(msg.sender)\\n    {\\n        require(\\n            _amount >= ADD_CHANNEL_MIN_POOL_CONTRIBUTION,\\n            \\\"EPNSCoreV1::reactivateChannel: Insufficient Funds Passed for Channel Reactivation\\\"\\n        );\\n        IERC20(daiAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n        _depositFundsToPool(_amount);\\n\\n        uint256 _oldChannelWeight = channels[msg.sender].channelWeight;\\n        uint newChannelPoolContribution = _amount.add(CHANNEL_DEACTIVATION_FEES);\\n        uint256 _channelWeight = newChannelPoolContribution.mul(ADJUST_FOR_FLOAT).div(\\n            ADD_CHANNEL_MIN_POOL_CONTRIBUTION\\n        );\\n        (\\n            groupFairShareCount,\\n            groupNormalizedWeight,\\n            groupHistoricalZ,\\n            groupLastUpdate\\n        ) = _readjustFairShareOfChannels(\\n            ChannelAction.ChannelUpdated,\\n            _channelWeight,\\n            _oldChannelWeight,\\n            groupFairShareCount,\\n            groupNormalizedWeight,\\n            groupHistoricalZ,\\n            groupLastUpdate\\n        );\\n\\n        channels[msg.sender].channelState = 1;\\n        channels[msg.sender].poolContribution += _amount;\\n        channels[msg.sender].channelWeight = _channelWeight;\\n\\n        emit ReactivateChannel(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice ALlows the pushChannelAdmin to Block any particular channel Completely.\\n     *\\n     * @dev    - Can only be called by pushChannelAdmin\\n     *         - Can only be Called for Activated Channels\\n     *         - Can only Be Called for NON-BLOCKED Channels\\n     *\\n     *         - Updates channel's state to BLOCKED ('3')\\n     *         - Updates Channel's Pool Contribution to ZERO\\n     *         - Updates Channel's Weight to ZERO\\n     *         - Increases the Protocol Fee Pool\\n     *         - Decreases the Channel Count\\n     *         - Readjusts the FS Ratio\\n     *         - Emit 'ChannelBlocked' Event\\n     * @param _channelAddress Address of the Channel to be blocked\\n     **/\\n\\n     function blockChannel(address _channelAddress)\\n     external\\n     onlyPushChannelAdmin()\\n     onlyUnblockedChannels(_channelAddress){\\n       Channel storage channelData = channels[_channelAddress];\\n\\n       uint256 totalAmountDeposited = channelData.poolContribution;\\n       uint256 totalRefundableAmount = totalAmountDeposited.sub(\\n           CHANNEL_DEACTIVATION_FEES\\n       );\\n\\n       uint256 _oldChannelWeight = channelData.channelWeight;\\n       uint256 _newChannelWeight = CHANNEL_DEACTIVATION_FEES\\n           .mul(ADJUST_FOR_FLOAT)\\n           .div(ADD_CHANNEL_MIN_POOL_CONTRIBUTION);\\n\\n       channelsCount = channelsCount.sub(1);\\n\\n       channelData.channelState = 3;\\n       channelData.channelWeight = _newChannelWeight;\\n       channelData.channelUpdateBlock = block.number;\\n       channelData.poolContribution = CHANNEL_DEACTIVATION_FEES;\\n       PROTOCOL_POOL_FEES = PROTOCOL_POOL_FEES.add(totalRefundableAmount);\\n       (\\n           groupFairShareCount,\\n           groupNormalizedWeight,\\n           groupHistoricalZ,\\n           groupLastUpdate\\n       ) = _readjustFairShareOfChannels(\\n           ChannelAction.ChannelRemoved,\\n           _newChannelWeight,\\n           _oldChannelWeight,\\n           groupFairShareCount,\\n           groupNormalizedWeight,\\n           groupHistoricalZ,\\n           groupLastUpdate\\n       );\\n\\n       emit ChannelBlocked(_channelAddress);\\n     }\\n\\n    /* **************\\n    => CHANNEL VERIFICATION FUNCTIONALTIES <=\\n    *************** */\\n\\n    /**\\n     * @notice    Function is designed to tell if a channel is verified or not\\n     * @dev       Get if channel is verified or not\\n     * @param    _channel Address of the channel to be Verified\\n     * @return   verificationStatus  Returns 0 for not verified, 1 for primary verification, 2 for secondary verification\\n     **/\\n    function getChannelVerfication(address _channel)\\n      public\\n      view\\n      returns (uint8 verificationStatus)\\n    {\\n      address verifiedBy = channels[_channel].verifiedBy;\\n      bool logicComplete = false;\\n\\n      // Check if it's primary verification\\n      if (verifiedBy == pushChannelAdmin || _channel == address(0x0) || _channel == pushChannelAdmin) {\\n        // primary verification, mark and exit\\n        verificationStatus = 1;\\n      }\\n      else {\\n        // can be secondary verification or not verified, dig deeper\\n        while (!logicComplete) {\\n          if (verifiedBy == address(0x0)) {\\n            verificationStatus = 0;\\n            logicComplete = true;\\n          }\\n          else if (verifiedBy == pushChannelAdmin) {\\n            verificationStatus = 2;\\n            logicComplete = true;\\n          }\\n          else {\\n            // Upper drill exists, go up\\n            verifiedBy = channels[verifiedBy].verifiedBy;\\n          }\\n        }\\n      }\\n    }\\n\\n    function batchVerification(uint256 _startIndex, uint256 _endIndex, address[] calldata _channelList) external onlyPushChannelAdmin returns(bool){\\n      for(uint256 i =_startIndex; i < _endIndex; i++){\\n        verifyChannel(_channelList[i]);\\n      }\\n      return true;\\n    }\\n\\n    function batchRevokeVerification(uint256 _startIndex, uint256 _endIndex, address[] calldata _channelList) external onlyPushChannelAdmin returns(bool){\\n      for(uint256 i =_startIndex; i < _endIndex; i++){\\n        unverifyChannel(_channelList[i]);\\n      }\\n      return true;\\n    }\\n    /**\\n     * @notice    Function is designed to verify a channel\\n     * @dev       Channel will be verified by primary or secondary verification, will fail or upgrade if already verified\\n     * @param    _channel Address of the channel to be Verified\\n     **/\\n    function verifyChannel(address _channel) public onlyActivatedChannels(_channel) {\\n      // Check if caller is verified first\\n      uint8 callerVerified = getChannelVerfication(msg.sender);\\n      require(callerVerified > 0, \\\"EPNSCoreV1::verifyChannel: Caller is not verified\\\");\\n\\n      // Check if channel is verified\\n      uint8 channelVerified = getChannelVerfication(_channel);\\n      require(\\n        (callerVerified >= 1 && channelVerified == 0) ||\\n        (msg.sender == pushChannelAdmin),\\n        \\\"EPNSCoreV1::verifyChannel: Channel already verified\\\"\\n      );\\n\\n      // Verify channel\\n      channels[_channel].verifiedBy = msg.sender;\\n\\n      // Emit event\\n      emit ChannelVerified(_channel, msg.sender);\\n    }\\n\\n    /**\\n     * @notice    Function is designed to unverify a channel\\n     * @dev       Channel who verified this channel or Push Channel Admin can only revoke\\n     * @param    _channel Address of the channel to be unverified\\n     **/\\n    function unverifyChannel(address _channel) public {\\n      require(\\n        channels[_channel].verifiedBy == msg.sender || msg.sender == pushChannelAdmin,\\n        \\\"EPNSCoreV1::unverifyChannel: Only channel who verified this or Push Channel Admin can revoke\\\"\\n      );\\n\\n      // Unverify channel\\n      channels[_channel].verifiedBy = address(0x0);\\n\\n      // Emit Event\\n      emit ChannelVerificationRevoked(_channel, msg.sender);\\n    }\\n\\n    /* **************\\n\\n    => DEPOSIT & WITHDRAWAL of FUNDS<=\\n\\n    *************** */\\n    /**\\n     * @notice  Function is used for Handling the entire procedure of Depositing the DAI to Lending POOl\\n     *\\n     * @dev     Updates the Relevant state variable during Deposit of DAI\\n     *          Lends the DAI to AAVE protocol.\\n     * @param   amount - Amount that is to be deposited\\n     **/\\n    function _depositFundsToPool(uint256 amount) private {\\n        POOL_FUNDS = POOL_FUNDS.add(amount);\\n\\n        ILendingPoolAddressesProvider provider = ILendingPoolAddressesProvider(\\n            lendingPoolProviderAddress\\n        );\\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n        IERC20(daiAddress).approve(provider.getLendingPoolCore(), amount);\\n        // Deposit to AAVE\\n        lendingPool.deposit(daiAddress, amount, uint16(REFERRAL_CODE)); // set to 0 in constructor presently\\n    }\\n\\n    /**\\n     * @notice Swaps aDai to PUSH Tokens and Transfers to the USER Address\\n     *\\n     * @param _user address of the user that will recieve the PUSH Tokens\\n     * @param _userAmount the amount of aDai to be swapped and transferred\\n     **/\\n    function swapAndTransferPUSH(address _user, uint256 _userAmount, uint256 _amountsOutValue)\\n        internal\\n        returns (bool)\\n    {\\n        swapADaiForDai(_userAmount);\\n        IERC20(daiAddress).approve(UNISWAP_V2_ROUTER, _userAmount);\\n\\n        address[] memory path = new address[](3);\\n        path[0] = daiAddress;\\n        path[1] = WETH_ADDRESS;\\n        path[2] = PUSH_TOKEN_ADDRESS;\\n\\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\\n            _userAmount,\\n            _amountsOutValue,\\n            path,\\n            _user,\\n            block.timestamp\\n        );\\n        return true;\\n    }\\n\\n    function swapADaiForDai(uint256 _amount) private{\\n      ILendingPoolAddressesProvider provider = ILendingPoolAddressesProvider(\\n        lendingPoolProviderAddress\\n      );\\n      ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\n      IADai(aDaiAddress).redeem(_amount);\\n    }\\n\\n    /* **************\\n\\n    => FAIR SHARE RATIO CALCULATIONS <=\\n\\n    *************** */\\n    /**\\n     * @notice  Helps keeping trakc of the FAIR Share Details whenever a specific Channel Action occur\\n     * @dev     Updates some of the imperative Fair Share Data based whenever a paricular channel action is performed.\\n     *          Takes into consideration 3 major Channel Actions, i.e., Channel Creation, Channel Removal or Channel Deactivation/Reactivation.\\n     *\\n     * @param _action                 The type of Channel action for which the Fair Share is being adjusted\\n     * @param _channelWeight          Weight of the channel on which the Action is being performed.\\n     * @param _oldChannelWeight       Old Weight of the channel on which the Action is being performed.\\n     * @param _groupFairShareCount    Fair share count\\n     * @param _groupNormalizedWeight  Normalized weight value\\n     * @param _groupHistoricalZ       The Historical Constant - Z\\n     * @param _groupLastUpdate        Holds the block number of the last update.\\n     **/\\n    function _readjustFairShareOfChannels(\\n        ChannelAction _action,\\n        uint256 _channelWeight,\\n        uint256 _oldChannelWeight,\\n        uint256 _groupFairShareCount,\\n        uint256 _groupNormalizedWeight,\\n        uint256 _groupHistoricalZ,\\n        uint256 _groupLastUpdate\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 groupNewCount,\\n            uint256 groupNewNormalizedWeight,\\n            uint256 groupNewHistoricalZ,\\n            uint256 groupNewLastUpdate\\n        )\\n    {\\n        // readjusts the group count and do deconstruction of weight\\n        uint256 groupModCount = _groupFairShareCount;\\n        // NormalizedWeight of all Channels at this point\\n        uint256 adjustedNormalizedWeight = _groupNormalizedWeight;\\n        // totalWeight of all Channels at this point\\n        uint256 totalWeight = adjustedNormalizedWeight.mul(groupModCount);\\n\\n        if (_action == ChannelAction.ChannelAdded) {\\n            groupModCount = groupModCount.add(1);\\n            totalWeight = totalWeight.add(_channelWeight);\\n\\n        } else if (_action == ChannelAction.ChannelRemoved) {\\n            groupModCount = groupModCount.sub(1);\\n            totalWeight = totalWeight.add(_channelWeight).sub(_oldChannelWeight);\\n\\n        } else if (_action == ChannelAction.ChannelUpdated) {\\n            totalWeight = totalWeight.add(_channelWeight).sub(_oldChannelWeight);\\n\\n        }\\n        else {\\n            revert(\\\"EPNSCoreV1::_readjustFairShareOfChannels: Invalid Channel Action\\\");\\n        }\\n        // now calculate the historical constant\\n        // z = z + nxw\\n        // z is the historical constant\\n        // n is the previous count of group fair share\\n        // x is the differential between the latest block and the last update block of the group\\n        // w is the normalized average of the group (ie, groupA weight is 1 and groupB is 2 then w is (1+2)/2 = 1.5)\\n        uint256 n = groupModCount;\\n        uint256 x = block.number.sub(_groupLastUpdate);\\n        uint256 w = totalWeight.div(groupModCount);\\n        uint256 z = _groupHistoricalZ;\\n\\n        uint256 nx = n.mul(x);\\n        uint256 nxw = nx.mul(w);\\n\\n        // Save Historical Constant and Update Last Change Block\\n        z = z.add(nxw);\\n\\n        if (n == 1) {\\n            // z should start from here as this is first channel\\n            z = 0;\\n        }\\n\\n        // Update return variables\\n        groupNewCount = groupModCount;\\n        groupNewNormalizedWeight = w;\\n        groupNewHistoricalZ = z;\\n        groupNewLastUpdate = block.number;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPUSH.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IPUSH {\\n  function born() external view returns(uint);\\n  function totalSupply() external view returns(uint);\\n  function resetHolderWeight(address holder) external;\\n  function returnHolderUnits(address account, uint atBlock) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IADai.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IADai {\\n    function redeem(uint256 _amount) external;\\n    function balanceOf(address _user) external view returns(uint256) ;\\n    function principalBalanceOf(address _user) external view returns(uint256);\\n    function getInterestRedirectionAddress(address _user) external view returns(address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface ILendingPool {\\n    function addressesProvider() external view returns (address);\\n    \\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\\n\\n    function redeemUnderlying(address _reserve, address _user, uint256 _amount) external;\\n\\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\\n\\n    function repay(address _reserve, uint256 _amount, address _onBehalfOf) external payable;\\n\\n    function swapBorrowRateMode(address _reserve) external;\\n\\n    function rebalanceFixedBorrowRate(address _reserve, address _user) external;\\n\\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\\n\\n    function liquidationCall(address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken) external payable;\\n\\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\\n\\n    function getReserveConfigurationData(address _reserve) external view returns (uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive);\\n\\n    function getReserveData(address _reserve) external view returns (uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp);\\n\\n    function getUserAccountData(address _user) external view returns (uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor);\\n\\n    function getUserReserveData(address _reserve, address _user) external view returns (uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled);\\n\\n    function getReserves() external view;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n      uint amountIn,\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n    ) external returns (uint[] memory amounts); \\n}\"\r\n    },\r\n    \"contracts/interfaces/IEPNSCommV1.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IEPNSCommV1 {\\n \\tfunction subscribeViaCore(address _channel, address _user) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPoolCore() external view returns (address payable);\\n\\n    function getLendingPool() external view returns (address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum EPNSCoreV1.ChannelType\",\"name\":\"channelType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"identity\",\"type\":\"bytes\"}],\"name\":\"AddChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"ChannelBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNotifOptions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_notifSettings\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_notifDescription\",\"type\":\"string\"}],\"name\":\"ChannelNotifcationSettingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"name\":\"ChannelVerificationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"ChannelVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountRefunded\",\"type\":\"uint256\"}],\"name\":\"DeactivateChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"name\":\"ReactivateChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"identity\",\"type\":\"bytes\"}],\"name\":\"UpdateChannel\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADD_CHANNEL_MIN_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_CHANNEL_MIN_POOL_CONTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHANNEL_DEACTIVATION_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_FUNDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_POOL_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUSH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_channelList\",\"type\":\"address[]\"}],\"name\":\"batchRevokeVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_channelList\",\"type\":\"address[]\"}],\"name\":\"batchVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channelAddress\",\"type\":\"address\"}],\"name\":\"blockChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"channelById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"channelNotifSettings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"enum EPNSCoreV1.ChannelType\",\"name\":\"channelType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"channelState\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"verifiedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelHistoricalZ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelFairShareCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"channelsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createChannelForPushChannelAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notifOptions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_notifSettings\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_notifDescription\",\"type\":\"string\"}],\"name\":\"createChannelSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EPNSCoreV1.ChannelType\",\"name\":\"_channelType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_identity\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createChannelWithFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountsOutValue\",\"type\":\"uint256\"}],\"name\":\"deactivateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epnsCommunicator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"getChannelState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"getChannelVerfication\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"verificationStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupFairShareCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupHistoricalZ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupNormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pushChannelAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pushTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPoolProviderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aDaiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralCode\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_channelAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum EPNSCoreV1.ChannelType[]\",\"name\":\"_channelTypeList\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_identityList\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"migrateChannelData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushChannelAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reactivateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFees\",\"type\":\"uint256\"}],\"name\":\"setChannelDeactivationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commAddress\",\"type\":\"address\"}],\"name\":\"setEpnsCommunicatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"setGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMigrationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFees\",\"type\":\"uint256\"}],\"name\":\"setMinChannelCreationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferPushChannelAdminControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"unverifyChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_newIdentity\",\"type\":\"bytes\"}],\"name\":\"updateChannelMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateWETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"verifyChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EPNSCoreV1","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}