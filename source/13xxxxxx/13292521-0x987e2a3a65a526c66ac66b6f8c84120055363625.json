{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/intf/IDODOApprove.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IDODOApprove {\r\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\r\n    function getDODOProxy() external view returns (address);\r\n}\r\n\r\n// File: contracts/lib/InitializableOwnable.sol\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/SmartRoute/DODOApproveProxy.sol\r\n\r\n\r\n\r\ninterface IDODOApproveProxy {\r\n    function isAllowedProxy(address _proxy) external view returns (bool);\r\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title DODOApproveProxy\r\n * @author DODO Breeder\r\n *\r\n * @notice Allow different version dodoproxy to claim from DODOApprove\r\n */\r\ncontract DODOApproveProxy is InitializableOwnable {\r\n    \r\n    // ============ Storage ============\r\n    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\r\n    mapping (address => bool) public _IS_ALLOWED_PROXY_;\r\n    uint256 public _TIMELOCK_;\r\n    address public _PENDING_ADD_DODO_PROXY_;\r\n    address public immutable _DODO_APPROVE_;\r\n\r\n    // ============ Modifiers ============\r\n    modifier notLocked() {\r\n        require(\r\n            _TIMELOCK_ <= block.timestamp,\r\n            \"SetProxy is timelocked\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address dodoApporve) public {\r\n        _DODO_APPROVE_ = dodoApporve;\r\n    }\r\n\r\n    function init(address owner, address[] memory proxies) external {\r\n        initOwner(owner);\r\n        for(uint i = 0; i < proxies.length; i++) \r\n            _IS_ALLOWED_PROXY_[proxies[i]] = true;\r\n    }\r\n\r\n    function unlockAddProxy(address newDodoProxy) public onlyOwner {\r\n        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\r\n        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\r\n    }\r\n\r\n    function lockAddProxy() public onlyOwner {\r\n       _PENDING_ADD_DODO_PROXY_ = address(0);\r\n       _TIMELOCK_ = 0;\r\n    }\r\n\r\n\r\n    function addDODOProxy() external onlyOwner notLocked() {\r\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\r\n        lockAddProxy();\r\n    }\r\n\r\n    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\r\n        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\r\n    }\r\n    \r\n    function claimTokens(\r\n        address token,\r\n        address who,\r\n        address dest,\r\n        uint256 amount\r\n    ) external {\r\n        require(_IS_ALLOWED_PROXY_[msg.sender], \"DODOApproveProxy:Access restricted\");\r\n        IDODOApprove(_DODO_APPROVE_).claimTokens(\r\n            token,\r\n            who,\r\n            dest,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function isAllowedProxy(address _proxy) external view returns (bool) {\r\n        return _IS_ALLOWED_PROXY_[_proxy];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/intf/IWETH.sol\r\n\r\n\r\n\r\ninterface IWETH {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// File: contracts/CollateralVault/intf/ICollateralVault.sol\r\n\r\n\r\ninterface ICollateralVault {\r\n    function _OWNER_() external returns (address);\r\n\r\n    function init(address owner, string memory name, string memory baseURI) external;\r\n\r\n    function directTransferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: contracts/DODOVendingMachine/intf/IDVM.sol\r\n\r\n\r\ninterface IDVM {\r\n    function init(\r\n        address maintainer,\r\n        address baseTokenAddress,\r\n        address quoteTokenAddress,\r\n        uint256 lpFeeRate,\r\n        address mtFeeRateModel,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n\r\n    function _MT_FEE_RATE_MODEL_() external returns (address);\r\n\r\n    function getVaultReserve() external returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function sellBase(address to) external returns (uint256);\r\n\r\n    function sellQuote(address to) external returns (uint256);\r\n\r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n\r\n    function addressToShortString(address _addr) external pure returns (string memory);\r\n\r\n    function getMidPrice() external view returns (uint256 midPrice);\r\n\r\n    function sellShares(\r\n        uint256 shareAmount,\r\n        address to,\r\n        uint256 baseMinAmount,\r\n        uint256 quoteMinAmount,\r\n        bytes calldata data,\r\n        uint256 deadline\r\n    ) external  returns (uint256 baseAmount, uint256 quoteAmount);\r\n\r\n}\r\n\r\n// File: contracts/GeneralizedFragment/intf/IFragment.sol\r\n\r\n\r\ninterface IFragment {\r\n\r\n    function init(\r\n      address dvm, \r\n      address vaultPreOwner,\r\n      address collateralVault,\r\n      uint256 totalSupply, \r\n      uint256 ownerRatio,\r\n      uint256 buyoutTimestamp,\r\n      address defaultMaintainer,\r\n      address buyoutModel,\r\n      uint256 distributionRatio,\r\n      string memory fragSymbol\r\n    ) external;\r\n\r\n    function buyout(address newVaultOwner) external;\r\n\r\n    function redeem(address to) external;\r\n\r\n    function _QUOTE_() external view returns (address);\r\n\r\n    function _COLLATERAL_VAULT_() external view returns (address);\r\n\r\n    function _DVM_() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Factory/Registries/DODONFTRegistry.sol\r\n\r\n\r\ninterface IDODONFTRegistry {\r\n    function addRegistry(\r\n        address vault,\r\n        address fragment, \r\n        address quoteToken,\r\n        address dvm\r\n    ) external;\r\n\r\n    function removeRegistry(address fragment) external;\r\n}\r\n\r\n/**\r\n * @title DODONFT Registry\r\n * @author DODO Breeder\r\n *\r\n * @notice Register DODONFT Pools \r\n */\r\ncontract DODONFTRegistry is InitializableOwnable, IDODONFTRegistry {\r\n\r\n    mapping (address => bool) public isAdminListed;\r\n    \r\n    // ============ Registry ============\r\n    // Vault -> Frag\r\n    mapping(address => address) public _VAULT_FRAG_REGISTRY_;\r\n\r\n    // base -> quote -> DVM address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n\r\n    // ============ Events ============\r\n\r\n    event NewRegistry(\r\n        address vault,\r\n        address fragment,\r\n        address dvm\r\n    );\r\n\r\n    event RemoveRegistry(address fragment);\r\n\r\n\r\n    // ============ Admin Operation Functions ============\r\n\r\n    function addRegistry(\r\n        address vault,\r\n        address fragment, \r\n        address quoteToken,\r\n        address dvm\r\n    ) override external {\r\n        require(isAdminListed[msg.sender], \"ACCESS_DENIED\");\r\n        _VAULT_FRAG_REGISTRY_[vault] = fragment;\r\n        _REGISTRY_[fragment][quoteToken].push(dvm);\r\n        emit NewRegistry(vault, fragment, dvm);\r\n    }\r\n\r\n    function removeRegistry(address fragment) override external {\r\n        require(isAdminListed[msg.sender], \"ACCESS_DENIED\");\r\n        address vault = IFragment(fragment)._COLLATERAL_VAULT_();\r\n        address dvm = IFragment(fragment)._DVM_();\r\n\r\n        _VAULT_FRAG_REGISTRY_[vault] = address(0);\r\n\r\n        address quoteToken = IDVM(dvm)._QUOTE_TOKEN_();\r\n        address[] memory registryList = _REGISTRY_[fragment][quoteToken];\r\n        for (uint256 i = 0; i < registryList.length; i++) {\r\n            if (registryList[i] == dvm) {\r\n                if(i != registryList.length - 1) {\r\n                    _REGISTRY_[fragment][quoteToken][i] = _REGISTRY_[fragment][quoteToken][registryList.length - 1];\r\n                }                \r\n                _REGISTRY_[fragment][quoteToken].pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit RemoveRegistry(fragment);\r\n    }\r\n\r\n    function addAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = true;\r\n    }\r\n\r\n    function removeAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = false;\r\n    }\r\n\r\n    function getDODOPool(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOPoolBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Pool, address[] memory baseToken1Pool)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).divCeil(target);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n\r\n/**\r\n * @title ReentrancyGuard\r\n * @author DODO Breeder\r\n *\r\n * @notice Protect functions from Reentrancy Attack\r\n */\r\ncontract ReentrancyGuard {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\r\n    // zero-state of _ENTERED_ is false\r\n    bool private _ENTERED_;\r\n\r\n    modifier preventReentrant() {\r\n        require(!_ENTERED_, \"REENTRANT\");\r\n        _ENTERED_ = true;\r\n        _;\r\n        _ENTERED_ = false;\r\n    }\r\n}\r\n\r\n// File: contracts/SmartRoute/proxies/DODONFTProxy.sol\r\n\r\n\r\n\r\n/**\r\n * @title DODONFTProxy\r\n * @author DODO Breeder\r\n *\r\n * @notice Entrance of NFT in DODO platform\r\n */\r\ncontract DODONFTProxy is ReentrancyGuard, InitializableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ============ Storage ============\r\n\r\n    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public immutable _WETH_;\r\n    address public immutable _DODO_APPROVE_PROXY_;\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _NFT_REGISTY_;\r\n\r\n    address public _DEFAULT_MAINTAINER_;\r\n    address public _MT_FEE_RATE_MODEL_;\r\n    address public _VAULT_TEMPLATE_;\r\n    address public _FRAG_TEMPLATE_;\r\n    address public _DVM_TEMPLATE_;\r\n    address public _BUYOUT_MODEL_;\r\n\r\n    // ============ Events ============\r\n    event ChangeVaultTemplate(address newVaultTemplate);\r\n    event ChangeFragTemplate(address newFragTemplate);\r\n    event ChangeDvmTemplate(address newDvmTemplate);\r\n    event ChangeMtFeeRateTemplate(address newMtFeeRateTemplate);\r\n    event ChangeBuyoutModel(address newBuyoutModel);\r\n    event ChangeMaintainer(address newMaintainer);\r\n    event CreateNFTCollateralVault(address creator, address vault, string name, string baseURI);\r\n    event CreateFragment(address vault, address fragment, address dvm);\r\n    event Buyout(address from, address fragment, uint256 amount);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier judgeExpired(uint256 deadLine) {\r\n        require(deadLine >= block.timestamp, \"DODONFTProxy: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address payable weth,\r\n        address dodoApproveProxy,\r\n        address defaultMaintainer,\r\n        address buyoutModel,\r\n        address mtFeeRateModel,\r\n        address vaultTemplate,\r\n        address fragTemplate,\r\n        address dvmTemplate,\r\n        address nftRegistry\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _WETH_ = weth;\r\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\r\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\r\n        _MT_FEE_RATE_MODEL_ = mtFeeRateModel;\r\n        _BUYOUT_MODEL_ = buyoutModel;\r\n        _VAULT_TEMPLATE_ = vaultTemplate;\r\n        _FRAG_TEMPLATE_ = fragTemplate;\r\n        _DVM_TEMPLATE_ = dvmTemplate;\r\n        _NFT_REGISTY_ = nftRegistry;\r\n    }\r\n\r\n    function createNFTCollateralVault(string memory name, string memory baseURI) external returns (address newVault) {\r\n        newVault = ICloneFactory(_CLONE_FACTORY_).clone(_VAULT_TEMPLATE_);\r\n        ICollateralVault(newVault).init(msg.sender, name, baseURI);\r\n        emit CreateNFTCollateralVault(msg.sender, newVault, name, baseURI);\r\n    }\r\n    \r\n    function createFragment(\r\n        address[] calldata addrList, //0 - quoteToken, 1 - vaultPreOwner\r\n        uint256[] calldata params, //(DVM: 0 - lpFeeRate 1 - I, 2 - K) , (FRAG: 3 - totalSupply, 4 - ownerRatio, 5 - buyoutTimestamp, 6 - distributionRatio)\r\n        bool isOpenTwap,\r\n        string memory fragSymbol\r\n    ) external returns (address newFragment, address newDvm) {\r\n        newFragment = ICloneFactory(_CLONE_FACTORY_).clone(_FRAG_TEMPLATE_);\r\n        address _quoteToken = addrList[0] == _ETH_ADDRESS_ ? _WETH_ : addrList[0];\r\n        \r\n        {\r\n        uint256[] memory  _params = params;\r\n        \r\n        newDvm = ICloneFactory(_CLONE_FACTORY_).clone(_DVM_TEMPLATE_);\r\n        IDVM(newDvm).init(\r\n            _DEFAULT_MAINTAINER_,\r\n            newFragment,\r\n            _quoteToken,\r\n            _params[0],\r\n            _MT_FEE_RATE_MODEL_,\r\n            _params[1],\r\n            _params[2],\r\n            isOpenTwap\r\n        );\r\n        IFragment(newFragment).init(\r\n            newDvm, \r\n            addrList[1], \r\n            msg.sender, \r\n            _params[3], \r\n            _params[4], \r\n            _params[5],\r\n            _DEFAULT_MAINTAINER_,\r\n            _BUYOUT_MODEL_,\r\n            _params[6],\r\n            fragSymbol\r\n        );\r\n        }\r\n\r\n        ICollateralVault(msg.sender).directTransferOwnership(newFragment);\r\n        \r\n        IDODONFTRegistry(_NFT_REGISTY_).addRegistry(msg.sender, newFragment, _quoteToken, newDvm);\r\n\r\n        emit CreateFragment(msg.sender, newFragment, newDvm);\r\n    }\r\n\r\n    function buyout(\r\n        address fragment,\r\n        uint256 quoteMaxAmount,\r\n        uint8 flag, // 0 - ERC20, 1 - quoteInETH\r\n        uint256 deadLine\r\n    ) external payable preventReentrant judgeExpired(deadLine) {\r\n        if(flag == 0)\r\n            require(msg.value == 0, \"DODONFTProxy: WE_SAVED_YOUR_MONEY\");\r\n        \r\n        address dvm = IFragment(fragment)._DVM_();\r\n        uint256 fragTotalSupply = IFragment(fragment).totalSupply();\r\n        uint256 buyPrice = IDVM(dvm).getMidPrice();\r\n\r\n        uint256 curRequireQuote = DecimalMath.mulCeil(buyPrice, fragTotalSupply);\r\n\r\n        require(curRequireQuote <= quoteMaxAmount, \"DODONFTProxy: CURRENT_TOTAL_VAULE_MORE_THAN_QUOTEMAX\");\r\n\r\n        _deposit(msg.sender, fragment, IFragment(fragment)._QUOTE_(), curRequireQuote, flag == 1);\r\n        IFragment(fragment).buyout(msg.sender);\r\n\r\n        // IDODONFTRegistry(_NFT_REGISTY_).removeRegistry(fragment);\r\n\r\n        // refund dust eth\r\n        if (flag == 1 && msg.value > curRequireQuote) msg.sender.transfer(msg.value - curRequireQuote);\r\n\r\n        emit Buyout(msg.sender, fragment, curRequireQuote);\r\n    }\r\n\r\n    //============= Owner ===================\r\n    function updateVaultTemplate(address newVaultTemplate) external onlyOwner {\r\n        _VAULT_TEMPLATE_ = newVaultTemplate;\r\n        emit ChangeVaultTemplate(newVaultTemplate);\r\n    }\r\n\r\n    function updateFragTemplate(address newFragTemplate) external onlyOwner {\r\n        _FRAG_TEMPLATE_ = newFragTemplate;\r\n        emit ChangeFragTemplate(newFragTemplate);\r\n    }\r\n\r\n    function updateMtFeeRateTemplate(address newMtFeeRateTemplate) external onlyOwner {\r\n        _MT_FEE_RATE_MODEL_ = newMtFeeRateTemplate;\r\n        emit ChangeMtFeeRateTemplate(newMtFeeRateTemplate);\r\n    }\r\n\r\n    function updateDvmTemplate(address newDvmTemplate) external onlyOwner {\r\n        _DVM_TEMPLATE_ = newDvmTemplate;\r\n        emit ChangeDvmTemplate(newDvmTemplate);\r\n    }\r\n\r\n    function updateBuyoutModel(address newBuyoutModel) external onlyOwner {\r\n        _BUYOUT_MODEL_ = newBuyoutModel;\r\n        emit ChangeBuyoutModel(newBuyoutModel);\r\n    }\r\n\r\n    function updateMaintainer(address newMaintainer) external onlyOwner {\r\n        _DEFAULT_MAINTAINER_ = newMaintainer;\r\n        emit ChangeMaintainer(newMaintainer);\r\n    }\r\n\r\n\r\n    //============= Internal ================\r\n\r\n    function _deposit(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint256 amount,\r\n        bool isETH\r\n    ) internal {\r\n        if (isETH) {\r\n            if (amount > 0) {\r\n                IWETH(_WETH_).deposit{value: amount}();\r\n                if (to != address(this)) SafeERC20.safeTransfer(IERC20(_WETH_), to, amount);\r\n            }\r\n        } else {\r\n            IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(token, from, to, amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMaintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyoutModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mtFeeRateModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fragTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dvmTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buyout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBuyoutModel\",\"type\":\"address\"}],\"name\":\"ChangeBuyoutModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDvmTemplate\",\"type\":\"address\"}],\"name\":\"ChangeDvmTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFragTemplate\",\"type\":\"address\"}],\"name\":\"ChangeFragTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"ChangeMaintainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMtFeeRateTemplate\",\"type\":\"address\"}],\"name\":\"ChangeMtFeeRateTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVaultTemplate\",\"type\":\"address\"}],\"name\":\"ChangeVaultTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dvm\",\"type\":\"address\"}],\"name\":\"CreateFragment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"CreateNFTCollateralVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_BUYOUT_MODEL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DVM_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FRAG_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NFT_REGISTY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_VAULT_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quoteMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"buyout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isOpenTwap\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"fragSymbol\",\"type\":\"string\"}],\"name\":\"createFragment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFragment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDvm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"createNFTCollateralVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyoutModel\",\"type\":\"address\"}],\"name\":\"updateBuyoutModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDvmTemplate\",\"type\":\"address\"}],\"name\":\"updateDvmTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFragTemplate\",\"type\":\"address\"}],\"name\":\"updateFragTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"updateMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMtFeeRateTemplate\",\"type\":\"address\"}],\"name\":\"updateMtFeeRateTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultTemplate\",\"type\":\"address\"}],\"name\":\"updateVaultTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DODONFTProxy","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e5a7b76462e4bdf83aa98795644281bdba80b88000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000335ac99bb3e51bdbf22025f092ebc1cf2c5cc61900000000000000000000000095c4f5b83aa70810d4f142d58e5f7242bd891cb0000000000000000000000000102739e36bc412cf79ff62f3e1efaba9f82964260000000000000000000000005e84190a270333ace5b9202a3f4cebf11b81bb01000000000000000000000000f019b39f3561730451598c813bec823096e132da000000000000000000000000b14da65459db957bceec86a79086036dea6fc3ad0000000000000000000000007ca7b5eaaf526d93705d28c1b47e9739595c90e7000000000000000000000000a7263eb38b9a61b72397c884b5f9bfb5c34a7840","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://42a10cb1e0e458577f359a7d980203ebb6deda78d05860c00b7d9452d1a36017"}]}