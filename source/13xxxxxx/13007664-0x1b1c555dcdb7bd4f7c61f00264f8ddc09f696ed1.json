{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-11\r\n*/\r\n\r\n// File: iface/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: iface/IParassetGovernance.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface IParassetGovernance {\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n// File: ParassetBase.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ParassetBase {\r\n\r\n    // Lock flag\r\n    uint256 _locked;\r\n\r\n\t/// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IParassetGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Log:ParassetBase!initialize\");\r\n        _governance = governance;\r\n        _locked = 0;\r\n    }\r\n\r\n    /// @dev IParassetGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IParassetGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IParassetGovernance(governance).checkGovernance(msg.sender, 0), \"Log:ParassetBase:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Uniform accuracy\r\n    /// @param inputToken Initial token\r\n    /// @param inputTokenAmount Amount of token\r\n    /// @param outputToken Converted token\r\n    /// @return stability Amount of outputToken\r\n    function getDecimalConversion(\r\n        address inputToken, \r\n        uint256 inputTokenAmount, \r\n        address outputToken\r\n    ) public view returns(uint256) {\r\n    \tuint256 inputTokenDec = 18;\r\n    \tuint256 outputTokenDec = 18;\r\n    \tif (inputToken != address(0x0)) {\r\n    \t\tinputTokenDec = IERC20(inputToken).decimals();\r\n    \t}\r\n    \tif (outputToken != address(0x0)) {\r\n    \t\toutputTokenDec = IERC20(outputToken).decimals();\r\n    \t}\r\n    \treturn inputTokenAmount * (10**outputTokenDec) / (10**inputTokenDec);\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IParassetGovernance(_governance).checkGovernance(msg.sender, 0), \"Log:ParassetBase:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_locked == 0, \"Log:ParassetBase:!_locked\");\r\n        _locked = 1;\r\n        _;\r\n        _locked = 0;\r\n    }\r\n}\r\n// File: iface/IPTokenFactory.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPTokenFactory {\r\n    /// @dev View governance address\r\n    /// @return governance address\r\n    function getGovernance() external view returns(address);\r\n\r\n    /// @dev View ptoken operation permissions\r\n    /// @param contractAddress contract address\r\n    /// @return bool\r\n    function getPTokenOperator(address contractAddress) external view returns(bool);\r\n\r\n    /// @dev View ptoken operation permissions\r\n    /// @param pToken ptoken verification\r\n    /// @return bool\r\n    function getPTokenAuthenticity(address pToken) external view returns(bool);\r\n    function getPTokenAddress(uint256 index) external view returns(address);\r\n}\r\n// File: iface/IParasset.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IParasset {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function destroy(uint256 amount, address account) external;\r\n    function issuance(uint256 amount, address account) external;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: PToken.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract PToken is IParasset {\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 public _totalSupply = 0;                                        \r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals = 18;\r\n\r\n    IPTokenFactory pTokenFactory;\r\n\r\n    constructor (string memory _name, \r\n                 string memory _symbol) public {\r\n    \tname = _name;                                                               \r\n    \tsymbol = _symbol;\r\n    \tpTokenFactory = IPTokenFactory(address(msg.sender));\r\n    }\r\n\r\n    //---------modifier---------\r\n\r\n    modifier onlyGovernance() {\r\n        require(address(msg.sender) == pTokenFactory.getGovernance(), \"Log:PToken:!governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n    \trequire(pTokenFactory.getPTokenOperator(address(msg.sender)), \"Log:PToken:!Pool\");\r\n    \t_;\r\n    }\r\n\r\n    //---------view---------\r\n\r\n    // Query factory contract address\r\n    function getPTokenFactory() public view returns(address) {\r\n        return address(pTokenFactory);\r\n    }\r\n\r\n    /// @notice The view of totalSupply\r\n    /// @return The total supply of ntoken\r\n    function totalSupply() override public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev The view of balances\r\n    /// @param owner The address of an account\r\n    /// @return The balance of the account\r\n    function balanceOf(address owner) override public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) override public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    //---------transaction---------\r\n\r\n    function changeFactory(address factory) public onlyGovernance {\r\n        pTokenFactory = IPTokenFactory(address(factory));\r\n    }\r\n\r\n    function rename(string memory _name, \r\n                    string memory _symbol) public onlyGovernance {\r\n        name = _name;                                                               \r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override public returns (bool) \r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) \r\n    {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender] - value;\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender] + addedValue;\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender] - subtractedValue;\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _balances[from] = _balances[from] - value;\r\n        _balances[to] = _balances[to] + value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function destroy(uint256 amount, address account) override external onlyPool{\r\n    \trequire(_balances[account] >= amount, \"Log:PToken:!destroy\");\r\n    \t_balances[account] = _balances[account] - amount;\r\n    \t_totalSupply = _totalSupply - amount;\r\n    \temit Transfer(account, address(0x0), amount);\r\n    }\r\n\r\n    function issuance(uint256 amount, address account) override external onlyPool{\r\n    \t_balances[account] = _balances[account] + amount;\r\n    \t_totalSupply = _totalSupply + amount;\r\n    \temit Transfer(address(0x0), account, amount);\r\n    }\r\n}\r\n// File: PTokenFactory.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract PTokenFactory is ParassetBase, IPTokenFactory {\r\n\r\n    // Governance contract\r\n    address public _owner;\r\n\t// contract address => bool, PToken operation permissions\r\n\tmapping(address=>bool) _allowAddress;\r\n\t// PToken address => bool, PToken verification\r\n\tmapping(address=>bool) _pTokenMapping;\r\n    // PToken address list\r\n    address[] public _pTokenList;\r\n\r\n    event createLog(address pTokenAddress);\r\n    event pTokenOperator(address contractAddress, bool allow);\r\n\r\n    //---------view---------\r\n\r\n    /// @dev Concatenated string\r\n    /// @param _a previous string\r\n    /// @param _b after the string\r\n    /// @return full string\r\n    function strSplicing(string memory _a, string memory _b) public pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length);\r\n        bytes memory bret = bytes(ret);\r\n        uint s = 0;\r\n        for (uint i = 0; i < _ba.length; i++) {\r\n            bret[s++] = _ba[i];\r\n        } \r\n        for (uint i = 0; i < _bb.length; i++) {\r\n            bret[s++] = _bb[i];\r\n        } \r\n        return string(ret);\r\n    }\r\n\r\n    /// @dev View governance address\r\n    /// @return governance address for PToken\r\n    function getGovernance() external override view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @dev View PToken operation permissions\r\n    /// @param contractAddress contract address\r\n    /// @return bool\r\n    function getPTokenOperator(address contractAddress) external override view returns(bool) {\r\n    \treturn _allowAddress[contractAddress];\r\n    }\r\n\r\n    /// @dev View PToken operation permissions\r\n    /// @param pToken PToken verification\r\n    /// @return bool\r\n    function getPTokenAuthenticity(address pToken) external override view returns(bool) {\r\n    \treturn _pTokenMapping[pToken];\r\n    }\r\n\r\n    /// @dev Query PToken address through index\r\n    /// @param index array subscript\r\n    /// @return pToken address\r\n    function getPTokenAddress(uint256 index) external override view returns(address) {\r\n        return _pTokenList[index];\r\n    }\r\n\r\n    //---------governance----------\r\n\r\n    /// @dev Set owner address\r\n    /// @param add new owner address\r\n    function setOwner(address add) external onlyGovernance {\r\n    \t_owner = add;\r\n    }\r\n\r\n    /// @dev Set governance address\r\n    /// @param contractAddress contract address\r\n    /// @param allow bool\r\n    function setPTokenOperator(address contractAddress, \r\n                               bool allow) external onlyGovernance {\r\n        _allowAddress[contractAddress] = allow;\r\n        emit pTokenOperator(contractAddress, allow);\r\n    }\r\n\r\n    /// @dev Add data to the PToken array\r\n    /// @param add pToken address\r\n    function addPTokenList(address add) external onlyGovernance {\r\n        _pTokenList.push(add);\r\n    }\r\n\r\n    /// @dev set PToken mapping\r\n    /// @param add pToken address\r\n    /// @param isTrue pToken authenticity\r\n    function setPTokenMapping(address add, bool isTrue) external onlyGovernance {\r\n        _pTokenMapping[add] = isTrue;\r\n    }\r\n\r\n    /// @dev Create PToken\r\n    /// @param name token name\r\n    function createPToken(string memory name) external onlyGovernance {\r\n    \tPToken pToken = new PToken(strSplicing(\"PToken_\", name), strSplicing(\"P\", name));\r\n    \t_pTokenMapping[address(pToken)] = true;\r\n        _pTokenList.push(address(pToken));\r\n    \temit createLog(address(pToken));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"}],\"name\":\"createLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"pTokenOperator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"addPTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"getDecimalConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"getPTokenAuthenticity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getPTokenOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"}],\"name\":\"setPTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setPTokenOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strSplicing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PTokenFactory","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"6666","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aadc7f04dfc723b1073b81572c678266887ef838d1c0dfc508fa49380dbec2c3"}]}