{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/core/IPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ICurvePool{\r\n  function deposit(uint256 _amount) public;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n\r\n  function earn_crv() public;\r\n\r\n  string public name;\r\n}\r\n\r\ncontract ICurvePoolForETH{\r\n  function deposit() public payable;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n\r\n  function earn_crv() public;\r\n\r\n  string public name;\r\n}\r\n\r\n// File: contracts/utils/TokenClaimer.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract TokenClaimer{\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n  function _claimStdTokens(address _token, address payable to) internal {\r\n        if (_token == address(0x0)) {\r\n            to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n\r\n        (bool status,) = _token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, balance));\r\n        require(status, \"call failed\");\r\n        emit ClaimedTokens(_token, to, balance);\r\n  }\r\n}\r\n\r\n// File: contracts/core/btcpool/IWbtcPoolBase.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PriceInterfaceWbtc{\r\n  function get_virtual_price() public view returns(uint256);\r\n  //function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) public;\r\n  //function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) public;\r\n}\r\n\r\ncontract CRVGaugeInterfaceWbtc{\r\n  function deposit(uint256 _value) public;\r\n  function withdraw(uint256 _value) public;\r\n  function claim_rewards(address _address) public;\r\n}\r\n\r\ncontract MinterInterfaceWbtc{\r\n  function mint(address gauge_addr) public;\r\n}\r\n\r\ncontract IWbtcPoolBase is ICurvePool, TokenClaimer, Ownable{\r\n  address public wbtc;\r\n\r\n  address public crv_token_addr;\r\n  address public controller;\r\n  address public vault;\r\n  address public lp_token_addr;\r\n  address public extra_token_addr;\r\n\r\n  CRVGaugeInterfaceWbtc public crv_gauge_addr;\r\n  MinterInterfaceWbtc public crv_minter_addr;\r\n\r\n  uint256 public lp_balance;\r\n  uint256 public deposit_wbtc_amount;\r\n  uint256 public withdraw_wbtc_amount;\r\n\r\n  modifier onlyController(){\r\n    require((controller == msg.sender)||(vault == msg.sender), \"only controller can call this\");\r\n    _;\r\n  }\r\n\r\n  constructor() public{\r\n\r\n    wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n\r\n    crv_token_addr = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    crv_minter_addr = MinterInterfaceWbtc(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\r\n  }\r\n\r\n  function deposit_wbtc(uint256 _amount) internal;\r\n\r\n  //@_amount: USDC amount\r\n  function deposit(uint256 _amount) public onlyController{\r\n    deposit_wbtc_amount = deposit_wbtc_amount + _amount;\r\n    deposit_wbtc(_amount);\r\n    uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));\r\n    lp_balance = lp_balance + cur;\r\n    deposit_to_gauge();\r\n  }\r\n\r\n  //deposit all lp token to gauage to mine CRV\r\n  function deposit_to_gauge() internal {\r\n    IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);\r\n    uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));\r\n    IERC20(lp_token_addr).approve(address(crv_gauge_addr), cur);\r\n    crv_gauge_addr.deposit(cur);\r\n    require(IERC20(lp_token_addr).balanceOf(address(this)) == 0, \"deposit_to_gauge: unexpected exchanges\");\r\n  }\r\n\r\n  function withdraw_from_curve(uint256 _amount) internal;\r\n\r\n  //@_amount: lp token amount\r\n  function withdraw(uint256 _amount) public onlyController{\r\n    withdraw_from_gauge(_amount);\r\n    withdraw_from_curve(_amount);\r\n    lp_balance = lp_balance - _amount;\r\n\r\n    IERC20(wbtc).transfer(msg.sender, IERC20(wbtc).balanceOf(address(this)));\r\n  }\r\n\r\n  function withdraw_from_gauge(uint256 _amount) internal{\r\n    require(_amount <= lp_balance, \"withdraw_from_gauge: insufficient amount\");\r\n    crv_gauge_addr.withdraw(_amount);\r\n  }\r\n\r\n  function setController(address _controller, address _vault) public onlyOwner{\r\n    controller = _controller;\r\n    vault = _vault;\r\n  }\r\n\r\n  function claimStdToken(address _token, address payable to) public onlyOwner{\r\n    _claimStdTokens(_token, to);\r\n  }\r\n\r\n  function earn_crv() public onlyController{\r\n    require(crv_minter_addr != MinterInterfaceWbtc(0x0), \"no crv minter\");\r\n    crv_minter_addr.mint(address(crv_gauge_addr));\r\n    IERC20(crv_token_addr).transfer(msg.sender, IERC20(crv_token_addr).balanceOf(address(this)));\r\n    if (extra_token_addr != address(0x0)) {\r\n      crv_gauge_addr.claim_rewards(address(this));\r\n      IERC20(extra_token_addr).transfer(msg.sender, IERC20(extra_token_addr).balanceOf(address(this)));\r\n    }\r\n  }\r\n\r\n  function get_lp_token_balance() public view returns(uint256){\r\n    return lp_balance;\r\n  }\r\n\r\n  function get_lp_token_addr() public view returns(address){\r\n    return lp_token_addr;\r\n  }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b <= a, s);\r\n        c = a - b;\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b > 0, s);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/core/btcpool/RenbtcPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\ncontract CurveInterfaceRenbtc{\r\n  function add_liquidity(uint256[2] memory uamounts, uint256 min_mint_amount) public;\r\n  function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_mint_amount) public;\r\n  function get_virtual_price() public view returns(uint256);\r\n}\r\n\r\ncontract RenbtcPoolV2 is IWbtcPoolBase{\r\n  using SafeERC20 for IERC20;\r\n\r\n  CurveInterfaceRenbtc public pool_deposit;\r\n\r\n  constructor() public{\r\n    name = \"Renbtc\";\r\n    lp_token_addr = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\r\n    crv_gauge_addr = CRVGaugeInterfaceWbtc(0xB1F2cdeC61db658F091671F5f199635aEF202CAC);\r\n    pool_deposit = CurveInterfaceRenbtc(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\r\n  }\r\n\r\n  //@_amount: wbtc amount\r\n  function deposit_wbtc(uint256 _amount) internal {\r\n    IERC20(wbtc).transferFrom(msg.sender, address(this), _amount);\r\n    IERC20(wbtc).approve(address(pool_deposit), 0);\r\n    IERC20(wbtc).approve(address(pool_deposit), _amount);\r\n    uint256[2] memory uamounts = [uint256(0), _amount];\r\n    pool_deposit.add_liquidity(uamounts, 0);\r\n  }\r\n\r\n\r\n  function withdraw_from_curve(uint256 _amount) internal{\r\n    require(_amount <= lp_balance, \"withdraw_from_curve: too large amount\");\r\n    pool_deposit.remove_liquidity_one_coin(_amount, 1, 0);\r\n  }\r\n\r\n  function get_virtual_price() public view returns(uint256){\r\n    return pool_deposit.get_virtual_price();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extra_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lp_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit_wbtc_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earn_crv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool_deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_lp_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_wbtc_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lp_token_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_gauge_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_minter_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimStdToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]","ContractName":"RenbtcPoolV2","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e16d2e9aeacf57834e4a2d5cb9e280d75a5fba5a21d0c8dd299a2fe96ca14d1a"}]}