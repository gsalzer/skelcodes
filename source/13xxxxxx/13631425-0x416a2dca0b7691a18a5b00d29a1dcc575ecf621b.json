{"status":"1","message":"OK","result":[{"SourceCode":"{\"GOONappToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract GOONappToken {\\nstring  public name = \\\"GOON Token\\\";\\n    string  public symbol = \\\"GOON\\\";\\n    string  public standard = \\\"GOON Token v1.0\\\";\\n    uint256 public totalSupply;\\n\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    constructor (uint256 _initialSupply) public {\\n        balanceOf[msg.sender] = _initialSupply;\\n        totalSupply = _initialSupply;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);\\n\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n\\n        emit Approval(msg.sender, _spender, _value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= balanceOf[_from]);\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\n\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n\\n        allowance[_from][msg.sender] -= _value;\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\"},\"GOONappTokenSale.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./GOONappToken.sol\\\";\\n\\ncontract GOONappTokenSale {\\n    address payable admin;\\n    GOONappToken public tokenContract;\\n    uint256 public tokenPrice;\\n    uint256 public tokensSold;\\n\\n    event Sell(address _buyer, uint256 _amount);\\n    event Bought(uint256 amount);\\n\\n    constructor (GOONappToken _tokenContract, uint256 _tokenPrice) public payable{\\n        admin = msg.sender;\\n        tokenContract = _tokenContract;\\n        tokenPrice = _tokenPrice;\\n    }\\n\\n    function multiply(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender == admin) {\\n            admin.send(address(this).balance);\\n        }\\n        else {\\n            uint256 amountTobuy = msg.value / tokenPrice;\\n            uint256 dexBalance = tokenContract.balanceOf(address(this));\\n            require(amountTobuy \\u003e 19999, \\\"Minimal amount to buy is 20000\\\");\\n            require(amountTobuy \\u003c= dexBalance, \\\"Not enough tokens in the reserve\\\");\\n            require(tokenContract.transfer(msg.sender, amountTobuy));\\n            tokensSold += amountTobuy;\\n            emit Sell(msg.sender, amountTobuy);\\n        }\\n    }\\n\\n    function buyTokens(uint256 _numberOfTokens) public payable {\\n        require(msg.value == multiply(_numberOfTokens, tokenPrice));\\n        require(tokenContract.balanceOf(address(this)) \\u003e= _numberOfTokens);\\n        require(tokenContract.transfer(msg.sender, _numberOfTokens));\\n        tokensSold += _numberOfTokens;\\n        emit Sell(msg.sender, _numberOfTokens);\\n    }\\n\\n    function endSale() public {\\n        require(msg.sender == admin);\\n        require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\\n        selfdestruct(admin);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract GOONappToken\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract GOONappToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GOONappTokenSale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000003c2f3f1b2d8eea420055d3cf7d0ceabf8432ecf3000000000000000000000000000000000000000000000000000000e8d4a51000","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e80c58d68b2e363c1ce4d475f28dee01511148523809b29fea11a126a82d33fb"}]}