{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Initializable, Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/interfaces/iERC20Fulcrum.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface iERC20Fulcrum {\r\n  function mint(\r\n    address receiver,\r\n    uint256 depositAmount)\r\n    external\r\n    returns (uint256 mintAmount);\r\n\r\n  function burn(\r\n    address receiver,\r\n    uint256 burnAmount)\r\n    external\r\n    returns (uint256 loanAmountPaid);\r\n\r\n  function tokenPrice()\r\n    external\r\n    view\r\n    returns (uint256 price);\r\n\r\n  function supplyInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function rateMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function baseRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function borrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function avgBorrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function protocolInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function spreadMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetBorrow()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextSupplyInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextBorrowInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function nextLoanInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function totalSupplyInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function claimLoanToken()\r\n    external\r\n    returns (uint256 claimedAmount);\r\n\r\n  function dsr()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function chaiPrice()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ILendingProtocol.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface ILendingProtocol {\r\n  function mint() external returns (uint256);\r\n  function redeem(address account) external returns (uint256);\r\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\r\n  function getAPR() external view returns (uint256);\r\n  function getPriceInToken() external view returns (uint256);\r\n  function token() external view returns (address);\r\n  function underlying() external view returns (address);\r\n  function availableLiquidity() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IGovToken.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IGovToken {\r\n  function redeemGovTokens() external;\r\n}\r\n\r\n// File: contracts/interfaces/IIdleTokenV3_1.sol\r\n\r\n/**\r\n * @title: Idle Token interface\r\n * @author: Idle Labs Inc., idle.finance\r\n */\r\npragma solidity 0.5.16;\r\n\r\ninterface IIdleTokenV3_1 {\r\n  // view\r\n  /**\r\n   * IdleToken price calculation, in underlying\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice() external view returns (uint256 price);\r\n\r\n  /**\r\n   * @return : underlying token address\r\n   */\r\n  function token() external view returns (address);\r\n  /**\r\n   * Get APR of every ILendingProtocol\r\n   *\r\n   * @return addresses: array of token addresses\r\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\r\n   */\r\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\r\n\r\n  // external\r\n  // We should save the amount one has deposited to calc interests\r\n\r\n  /**\r\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @param _skipRebalance : flag for skipping rebalance for lower gas price\r\n   * @param _referral : referral address\r\n   * @return mintedTokens : amount of IdleTokens minted\r\n   */\r\n  function mintIdleToken(uint256 _amount, bool _skipRebalance, address _referral) external returns (uint256 mintedTokens);\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\r\n   * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\r\n   *         Ideally one should wait until the black swan event is terminated\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\r\n   * Underlying (eg. DAI) is not redeemed here.\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   */\r\n  function redeemInterestBearingTokens(uint256 _amount) external;\r\n\r\n  /**\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function rebalance() external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IERC3156FlashBorrower {\r\n  /**\r\n   * @dev Receive a flash loan.\r\n   * @param initiator The initiator of the loan.\r\n   * @param token The loan currency.\r\n   * @param amount The amount of tokens lent.\r\n   * @param fee The additional amount of tokens to repay.\r\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n   * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n   */\r\n  function onFlashLoan(\r\n    address initiator,\r\n    address token,\r\n    uint256 amount,\r\n    uint256 fee,\r\n    bytes calldata data\r\n  ) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IAaveIncentivesController.sol\r\n\r\n// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.5.16;\r\ninterface IAaveIncentivesController {\r\n  /**\r\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n   * @param amount Amount of rewards to claim\r\n   * @param to Address that will be receiving the rewards\r\n   * @return Rewards claimed\r\n   **/\r\n  function claimRewards(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev returns the unclaimed rewards of the user\r\n   * @param user the address of the user\r\n   * @return the unclaimed user rewards\r\n   */\r\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n  function getAssetData(address asset) external view returns (uint256, uint256, uint256);\r\n  function getRewardsBalance(address[] calldata assets, address user) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/interfaces/Comptroller.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Comptroller {\r\n  function claimComp(address) external;\r\n  function compSpeeds(address _cToken) external view returns (uint256);\r\n  function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;\r\n}\r\n\r\n// File: contracts/interfaces/CERC20.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface CERC20 {\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n  function comptroller() external view returns (address);\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n  function exchangeRateStored() external view returns (uint256);\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n  function totalReserves() external view returns (uint256);\r\n  function getCash() external view returns (uint256);\r\n  function totalBorrows() external view returns (uint256);\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n  function interestRateModel() external view returns (address);\r\n\r\n  function underlying() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/AToken.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface AToken {\r\n  function getIncentivesController() external view returns (address);\r\n  function redeem(uint256 amount) external;\r\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IdleController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IdleController {\r\n  function idleSpeeds(address _idleToken) external view returns (uint256);\r\n  function claimIdle(address[] calldata holders, address[] calldata idleTokens) external;\r\n  function getAllMarkets() external view returns (address[] memory);\r\n  function _addIdleMarkets(address[] calldata) external;\r\n  function _supportMarkets(address[] calldata) external;\r\n  function _setPriceOracle(address) external;\r\n  function admin() external view returns(address);\r\n}\r\n\r\n// File: contracts/interfaces/IIdleTokenHelper.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IIdleTokenHelper {\r\n  function setIdleTokens(address[] calldata _newIdleTokens) external;\r\n  function getAPR(address _idleToken, address _cToken, address _aToken) external view returns (uint256 avgApr);\r\n  function getCurrentAllocations(address _idleToken) external view returns (uint256[] memory amounts, uint256 total);\r\n  function getAPRs(address _idleToken) external view returns (address[] memory addresses, uint256[] memory aprs);\r\n  function sellGovTokens(address _idleToken, uint256[] calldata _minTokenOut) external;\r\n  function emergencyWithdrawToken(address _token, address _to) external;\r\n}\r\n\r\n// File: contracts/interfaces/GasToken.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface GasToken {\r\n  function freeUpTo(uint256 value) external returns (uint256 freed);\r\n  function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n  function balanceOf(address from) external returns (uint256 balance);\r\n}\r\n\r\n// File: contracts/GST2ConsumerV2.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\ncontract GST2ConsumerV2 is Initializable {\r\n  GasToken public gst2;\r\n\r\n  // Kept for reference\r\n  //\r\n  // function initialize() initializer public {\r\n  //   gst2 = GasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n  // }\r\n  //\r\n  // modifier gasDiscountFrom(address from) {\r\n  //   uint256 initialGasLeft = gasleft();\r\n  //   _;\r\n  //   _makeGasDiscount(initialGasLeft - gasleft(), from);\r\n  // }\r\n  //\r\n  // function _makeGasDiscount(uint256 gasSpent, address from) internal {\r\n  //   // For more info https://gastoken.io/\r\n  //   // 14154 -> FREE_BASE -> base cost of freeing\r\n  //   // 41130 -> 2 * REIMBURSE - FREE_TOKEN -> 2 * 24000 - 6870\r\n  //   uint256 tokens = (gasSpent + 14154) / 41130;\r\n  //   uint256 safeNumTokens;\r\n  //   uint256 gas = gasleft();\r\n  //\r\n  //   // For more info https://github.com/projectchicago/gastoken/blob/master/contract/gst2_free_example.sol\r\n  //   if (gas >= 27710) {\r\n  //     safeNumTokens = (gas - 27710) / 7020;\r\n  //   }\r\n  //\r\n  //   if (tokens > safeNumTokens) {\r\n  //     tokens = safeNumTokens;\r\n  //   }\r\n  //\r\n  //   if (tokens > 0) {\r\n  //     gst2.freeFromUpTo(from, tokens);\r\n  //   }\r\n  // }\r\n}\r\n\r\n// File: contracts/IdleTokenGovernance.sol\r\n\r\n/**\r\n * @title: Idle Token Governance main contract\r\n * @summary: ERC20 that holds pooled user funds together\r\n *           Each token rapresent a share of the underlying pools\r\n *           and with each token user have the right to redeem a portion of these pools\r\n * @author: Idle Labs Inc., idle.finance\r\n */\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdleTokenGovernance is Initializable, ERC20, ERC20Detailed, ReentrancyGuard, Ownable, Pausable, IIdleTokenV3_1, GST2ConsumerV2 {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private constant ONE_18 = 10**18;\r\n  // State variables\r\n  // eg. DAI address\r\n  address public token;\r\n  // eg. iDAI address\r\n  address private iToken;\r\n  // eg. cDAI address\r\n  address private cToken;\r\n  // Idle rebalancer current implementation address\r\n  address public rebalancer;\r\n  // Address collecting underlying fees\r\n  address public feeAddress;\r\n  // Last iToken price, used to pause contract in case of a black swan event\r\n  uint256 public lastITokenPrice;\r\n  // eg. 18 for DAI\r\n  uint256 private tokenDecimals;\r\n  // Max unlent assets percentage for gas friendly swaps\r\n  uint256 public maxUnlentPerc; // 100000 == 100% -> 1000 == 1%\r\n  // Current fee on interest gained\r\n  uint256 public fee;\r\n  // eg. [cTokenAddress, iTokenAddress, ...]\r\n  address[] public allAvailableTokens;\r\n  // eg. [COMPAddress, CRVAddress, ...]\r\n  address[] public govTokens;\r\n  // last fully applied allocations (ie when all liquidity has been correctly placed)\r\n  // eg. [5000, 0, 5000, 0] for 50% in compound, 0% fulcrum, 50% aave, 0 dydx. same order of allAvailableTokens\r\n  uint256[] public lastAllocations;\r\n  // Map that saves avg idleToken price paid for each user, used to calculate earnings\r\n  mapping(address => uint256) public userAvgPrices;\r\n  // eg. cTokenAddress => IdleCompoundAddress\r\n  mapping(address => address) public protocolWrappers;\r\n  // array with last balance recorded for each gov tokens\r\n  mapping (address => uint256) public govTokensLastBalances;\r\n  // govToken -> user_address -> user_index eg. usersGovTokensIndexes[govTokens[0]][msg.sender] = 1111123;\r\n  mapping (address => mapping (address => uint256)) public usersGovTokensIndexes;\r\n  // global indices for each gov tokens used as a reference to calculate a fair share for each user\r\n  mapping (address => uint256) public govTokensIndexes;\r\n  // Map that saves amount with no fee for each user\r\n  mapping(address => uint256) private userNoFeeQty;\r\n  // variable used for avoid the call of mint and redeem in the same tx\r\n  bytes32 private _minterBlock;\r\n\r\n  // Events\r\n  event Rebalance(address _rebalancer, uint256 _amount);\r\n  event Referral(uint256 _amount, address _ref);\r\n\r\n  // ########## IdleToken V4_1 updates\r\n  // Idle governance token\r\n  address public constant IDLE = address(0x875773784Af8135eA0ef43b5a374AaD105c5D39e);\r\n  // Compound governance token\r\n  address public constant COMP = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n  uint256 private constant FULL_ALLOC = 100000;\r\n\r\n  // Idle distribution controller\r\n  address public constant idleController = address(0x275DA8e61ea8E02d51EDd8d0DC5c0E62b4CDB0BE);\r\n  // oracle used for calculating the avgAPR with gov tokens\r\n  address public oracle;\r\n  // eg cDAI -> COMP\r\n  mapping(address => address) private protocolTokenToGov;\r\n  // Whether openRebalance is enabled or not\r\n  bool public isRiskAdjusted;\r\n  // last allocations submitted by rebalancer\r\n  uint256[] private lastRebalancerAllocations;\r\n\r\n  // ########## IdleToken V5 updates\r\n  // Fee for flash loan\r\n  uint256 public flashLoanFee;\r\n  // IdleToken helper address\r\n  address public tokenHelper;\r\n\r\n  /**\r\n  * @dev Emitted on flashLoan()\r\n  * @param target The address of the flash loan receiver contract\r\n  * @param initiator The address initiating the flash loan\r\n  * @param amount The amount flash borrowed\r\n  * @param premium The flash loan fee\r\n  **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    uint256 amount,\r\n    uint256 premium\r\n  );\r\n\r\n  // Addresses for stkAAVE distribution from Aave\r\n  address public constant stkAAVE = address(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\r\n  address private aToken;\r\n  // ########## End IdleToken V5 updates\r\n\r\n  // ERROR MESSAGES:\r\n  // 0 = is 0\r\n  // 1 = already initialized\r\n  // 2 = length is different\r\n  // 3 = Not greater then\r\n  // 4 = lt\r\n  // 5 = too high\r\n  // 6 = not authorized\r\n  // 7 = not equal\r\n  // 8 = error on flash loan execution\r\n  // 9 = Reentrancy\r\n\r\n  // onlyOwner\r\n  /**\r\n   * It allows owner to modify allAvailableTokens array in case of emergency\r\n   * ie if a bug on a interest bearing token is discovered and reset protocolWrappers\r\n   * associated with those tokens.\r\n   *\r\n   * @param protocolTokens : array of protocolTokens addresses (eg [cDAI, iDAI, ...])\r\n   * @param wrappers : array of wrapper addresses (eg [IdleCompound, IdleFulcrum, ...])\r\n   * @param _newGovTokens : array of governance token addresses\r\n   * @param _newGovTokensEqualLen : array of governance token addresses for each\r\n   *  protocolToken (addr0 should be used for protocols with no govToken)\r\n   */\r\n  function setAllAvailableTokensAndWrappers(\r\n    address[] calldata protocolTokens,\r\n    address[] calldata wrappers,\r\n    address[] calldata _newGovTokens,\r\n    address[] calldata _newGovTokensEqualLen\r\n  ) external onlyOwner {\r\n    require(protocolTokens.length == wrappers.length, \"2\");\r\n    require(_newGovTokensEqualLen.length >= protocolTokens.length, '3');\r\n\r\n    govTokens = _newGovTokens;\r\n\r\n    address newGov;\r\n    address protToken;\r\n    for (uint256 i = 0; i < protocolTokens.length; i++) {\r\n      protToken = protocolTokens[i];\r\n      require(protToken != address(0) && wrappers[i] != address(0), \"0\");\r\n      protocolWrappers[protToken] = wrappers[i];\r\n\r\n      // set protocol token to gov token mapping\r\n      newGov = _newGovTokensEqualLen[i];\r\n      if (newGov != IDLE) {\r\n        protocolTokenToGov[protToken] = newGov;\r\n      }\r\n    }\r\n\r\n    allAvailableTokens = protocolTokens;\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the flash loan fee\r\n   *\r\n   * @param _flashFee : new flash loan fee. Max is FULL_ALLOC\r\n   */\r\n  function setFlashLoanFee(uint256 _flashFee)\r\n    external onlyOwner {\r\n      require((flashLoanFee = _flashFee) < FULL_ALLOC, \"4\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the cToken address\r\n   *\r\n   * @param _cToken : new cToken address\r\n   */\r\n  function setCToken(address _cToken)\r\n    external onlyOwner {\r\n      require((cToken = _cToken) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the aToken address\r\n   *\r\n   * @param _aToken : new aToken address\r\n   */\r\n  function setAToken(address _aToken)\r\n    external onlyOwner {\r\n      require((aToken = _aToken) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the tokenHelper address\r\n   *\r\n   * @param _tokenHelper : new tokenHelper address\r\n   */\r\n  function setTokenHelper(address _tokenHelper)\r\n    external onlyOwner {\r\n      require((tokenHelper = _tokenHelper) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the IdleRebalancerV3_1 address\r\n   *\r\n   * @param _rebalancer : new IdleRebalancerV3_1 address\r\n   */\r\n  function setRebalancer(address _rebalancer)\r\n    external onlyOwner {\r\n      require((rebalancer = _rebalancer) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the fee (1000 == 10% of gained interest)\r\n   *\r\n   * @param _fee : fee amount where 100000 is 100%, max settable is 10%\r\n   */\r\n  function setFee(uint256 _fee)\r\n    external onlyOwner {\r\n      // 100000 == 100% -> 10000 == 10%\r\n      require((fee = _fee) <= FULL_ALLOC / 10, \"5\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the fee address\r\n   *\r\n   * @param _feeAddress : fee address\r\n   */\r\n  function setFeeAddress(address _feeAddress)\r\n    external onlyOwner {\r\n      require((feeAddress = _feeAddress) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the oracle address for getting avgAPR\r\n   *\r\n   * @param _oracle : new oracle address\r\n   */\r\n  function setOracleAddress(address _oracle)\r\n    external onlyOwner {\r\n      require((oracle = _oracle) != address(0), \"0\");\r\n  }\r\n\r\n  /**\r\n   * It allows owner to set the max unlent asset percentage (1000 == 1% of unlent asset max)\r\n   *\r\n   * @param _perc : max unlent perc where 100000 is 100%\r\n   */\r\n  function setMaxUnlentPerc(uint256 _perc)\r\n    external onlyOwner {\r\n      require((maxUnlentPerc = _perc) <= 100000, \"5\");\r\n  }\r\n\r\n  /**\r\n   * Used by Rebalancer to set the new allocations\r\n   *\r\n   * @param _allocations : array with allocations in percentages (100% => 100000)\r\n   */\r\n  function setAllocations(uint256[] calldata _allocations) external {\r\n    require(msg.sender == rebalancer || msg.sender == owner(), \"6\");\r\n    _setAllocations(_allocations);\r\n  }\r\n\r\n  /**\r\n   * Used by Rebalancer or in openRebalance to set the new allocations\r\n   *\r\n   * @param _allocations : array with allocations in percentages (100% => 100000)\r\n   */\r\n  function _setAllocations(uint256[] memory _allocations) internal {\r\n    require(_allocations.length == allAvailableTokens.length, \"2\");\r\n    uint256 total;\r\n    for (uint256 i = 0; i < _allocations.length; i++) {\r\n      total = total.add(_allocations[i]);\r\n    }\r\n    lastRebalancerAllocations = _allocations;\r\n    require(total == FULL_ALLOC, \"7\");\r\n  }\r\n\r\n  // view\r\n  /**\r\n   * Get latest allocations submitted by rebalancer\r\n   *\r\n   * @return : array of allocations ordered as allAvailableTokens\r\n   */\r\n  function getAllocations() external view returns (uint256[] memory) {\r\n    return lastRebalancerAllocations;\r\n  }\r\n\r\n  /**\r\n  * Get currently used gov tokens\r\n  *\r\n  * @return : array of govTokens supported\r\n  */\r\n  function getGovTokens() external view returns (address[] memory) {\r\n    return govTokens;\r\n  }\r\n\r\n  /**\r\n  * Get currently used protocol tokens (cDAI, aDAI, ...)\r\n  *\r\n  * @return : array of protocol tokens supported\r\n  */\r\n  function getAllAvailableTokens() external view returns (address[] memory) {\r\n    return allAvailableTokens;\r\n  }\r\n\r\n  /**\r\n  * Get gov token associated to a protocol token eg protocolTokenToGov[cDAI] = COMP\r\n  *\r\n  * @return : address of the gov token\r\n  */\r\n  function getProtocolTokenToGov(address _protocolToken) external view returns (address) {\r\n    return protocolTokenToGov[_protocolToken];\r\n  }\r\n\r\n  /**\r\n   * IdleToken price for a user considering fees, in underlying\r\n   * this is useful when you need to redeem exactly X underlying\r\n   *\r\n   * @return : price in underlying token counting fees for a specific user\r\n   */\r\n  function tokenPriceWithFee(address user)\r\n    external view\r\n    returns (uint256 priceWFee) {\r\n      uint256 userAvgPrice = userAvgPrices[user];\r\n      priceWFee = _tokenPrice();\r\n      if (userAvgPrice != 0 && priceWFee > userAvgPrice) {\r\n        priceWFee = priceWFee.mul(FULL_ALLOC).sub(fee.mul(priceWFee.sub(userAvgPrice))).div(FULL_ALLOC);\r\n      }\r\n  }\r\n\r\n  /**\r\n   * IdleToken price calculation, in underlying\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice()\r\n    external view\r\n    returns (uint256) {\r\n    return _tokenPrice();\r\n  }\r\n\r\n  /**\r\n   * Get APR of every ILendingProtocol\r\n   *\r\n   * @return addresses: array of token addresses\r\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\r\n   */\r\n  function getAPRs()\r\n    external view\r\n    returns (address[] memory, uint256[] memory) {\r\n    return IIdleTokenHelper(tokenHelper).getAPRs(address(this));\r\n  }\r\n\r\n  /**\r\n   * Get current avg APR of this IdleToken\r\n   *\r\n   * @return avgApr: current weighted avg apr\r\n   */\r\n  function getAvgAPR()\r\n    external view\r\n    returns (uint256) {\r\n    return IIdleTokenHelper(tokenHelper).getAPR(address(this), cToken, aToken);\r\n  }\r\n\r\n  /**\r\n   * ERC20 modified transferFrom that also update the avgPrice paid for the recipient and\r\n   * updates user gov idx\r\n   *\r\n   * @param sender : sender account\r\n   * @param recipient : recipient account\r\n   * @param amount : value to transfer\r\n   * @return : flag whether transfer was successful or not\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    _updateUserGovIdxTransfer(sender, recipient, amount);\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, msg.sender, allowance(sender, msg.sender).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n    _updateUserFeeInfo(recipient, amount, userAvgPrices[sender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 modified transfer that also update the avgPrice paid for the recipient and\r\n   * updates user gov idx\r\n   *\r\n   * @param recipient : recipient account\r\n   * @param amount : value to transfer\r\n   * @return : flag whether transfer was successful or not\r\n   */\r\n  function transfer(address recipient, uint256 amount) public returns (bool) {\r\n    _updateUserGovIdxTransfer(msg.sender, recipient, amount);\r\n    _transfer(msg.sender, recipient, amount);\r\n    _updateUserFeeInfo(recipient, amount, userAvgPrices[msg.sender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Helper method for transfer and transferFrom, updates recipient gov indexes\r\n   *\r\n   * @param _from : sender account\r\n   * @param _to : recipient account\r\n   * @param amount : value to transfer\r\n   */\r\n  function _updateUserGovIdxTransfer(address _from, address _to, uint256 amount) internal {\r\n    address govToken;\r\n    uint256 govTokenIdx;\r\n    uint256 sharePerTokenFrom;\r\n    uint256 shareTo;\r\n    uint256 balanceTo = balanceOf(_to);\r\n    for (uint256 i = 0; i < govTokens.length; i++) {\r\n      govToken = govTokens[i];\r\n      if (balanceTo == 0) {\r\n        usersGovTokensIndexes[govToken][_to] = usersGovTokensIndexes[govToken][_from];\r\n      } else {\r\n        govTokenIdx = govTokensIndexes[govToken];\r\n        // calc 1 idleToken value in gov shares for user `_from`\r\n        sharePerTokenFrom = govTokenIdx.sub(usersGovTokensIndexes[govToken][_from]);\r\n        // calc current gov shares (before transfer) for user `_to`\r\n        shareTo = balanceTo.mul(govTokenIdx.sub(usersGovTokensIndexes[govToken][_to])).div(ONE_18);\r\n        // user `_to` should have -> shareTo + (sharePerTokenFrom * amount / 1e18) = (balanceTo + amount) * (govTokenIdx - userIdx) / 1e18\r\n        // so userIdx = govTokenIdx - ((shareTo * 1e18 + (sharePerTokenFrom * amount)) / (balanceTo + amount))\r\n        usersGovTokensIndexes[govToken][_to] = govTokenIdx.sub(\r\n          shareTo.mul(ONE_18).add(sharePerTokenFrom.mul(amount)).div(\r\n            balanceTo.add(amount)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get how many gov tokens a user is entitled to (this may not include eventual undistributed tokens)\r\n   *\r\n   * @param _usr : user address\r\n   * @return : array of amounts for each gov token\r\n   */\r\n  function getGovTokensAmounts(address _usr) external view returns (uint256[] memory _amounts) {\r\n    address govToken;\r\n    uint256 usrBal = balanceOf(_usr);\r\n    _amounts = new uint256[](govTokens.length);\r\n    for (uint256 i = 0; i < _amounts.length; i++) {\r\n      govToken = govTokens[i];\r\n      _amounts[i] = usrBal.mul(govTokensIndexes[govToken].sub(usersGovTokensIndexes[govToken][_usr])).div(ONE_18);\r\n    }\r\n  }\r\n\r\n  // external\r\n  /**\r\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\r\n   * This method triggers a rebalance of the pools if _skipRebalance is set to false\r\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @param : not used anymore\r\n   * @param _referral : referral address\r\n   * @return mintedTokens : amount of IdleTokens minted\r\n   */\r\n  function mintIdleToken(uint256 _amount, bool, address _referral)\r\n    external nonReentrant whenNotPaused\r\n    returns (uint256 mintedTokens) {\r\n    _minterBlock = keccak256(abi.encodePacked(tx.origin, block.number));\r\n    _redeemGovTokens(msg.sender);\r\n    // Get current IdleToken price\r\n    uint256 idlePrice = _tokenPrice();\r\n    // transfer tokens to this contract\r\n    IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    mintedTokens = _amount.mul(ONE_18).div(idlePrice);\r\n    _mint(msg.sender, mintedTokens);\r\n\r\n    // Update avg price and user idx for each gov tokens\r\n    _updateUserInfo(msg.sender, mintedTokens);\r\n    _updateUserFeeInfo(msg.sender, mintedTokens, idlePrice);\r\n\r\n    if (_referral != address(0)) {\r\n      emit Referral(_amount, _referral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method for mintIdleToken, updates minter gov indexes and avg price\r\n   *\r\n   * @param _to : minter account\r\n   * @param _mintedTokens : number of newly minted tokens\r\n   */\r\n  function _updateUserInfo(address _to, uint256 _mintedTokens) internal {\r\n    address govToken;\r\n    uint256 usrBal = balanceOf(_to);\r\n    uint256 _usrIdx;\r\n\r\n    for (uint256 i = 0; i < govTokens.length; i++) {\r\n      govToken = govTokens[i];\r\n      _usrIdx = usersGovTokensIndexes[govToken][_to];\r\n\r\n      // calculate user idx\r\n      usersGovTokensIndexes[govToken][_to] = _usrIdx.add(\r\n        _mintedTokens.mul(govTokensIndexes[govToken].sub(_usrIdx)).div(usrBal)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleToken(uint256 _amount)\r\n    external\r\n    returns (uint256) {\r\n      return _redeemIdleToken(_amount, new bool[](govTokens.length));\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * WARNING: if elements in the `_skipGovTokenRedeem` are set to `true` then the rewards will be GIFTED to the pool\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _skipGovTokenRedeem : array of flags whether to redeem or not specific gov tokens\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleTokenSkipGov(uint256 _amount, bool[] calldata _skipGovTokenRedeem)\r\n    external\r\n    returns (uint256) {\r\n      return _redeemIdleToken(_amount, _skipGovTokenRedeem);\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _skipGovTokenRedeem : array of flag for redeeming or not gov tokens. Funds will be gifted to the pool\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function _redeemIdleToken(uint256 _amount, bool[] memory _skipGovTokenRedeem)\r\n    internal nonReentrant\r\n    returns (uint256 redeemedTokens) {\r\n      _checkMintRedeemSameTx();\r\n      _redeemGovTokensInternal(msg.sender, _skipGovTokenRedeem);\r\n\r\n      if (_amount != 0) {\r\n        uint256 price = _tokenPrice();\r\n        uint256 valueToRedeem = _amount.mul(price).div(ONE_18);\r\n        uint256 balanceUnderlying = _contractBalanceOf(token);\r\n\r\n        if (valueToRedeem > balanceUnderlying) {\r\n          redeemedTokens = _redeemHelper(_amount, balanceUnderlying);\r\n        } else {\r\n          redeemedTokens = valueToRedeem;\r\n        }\r\n        // get eventual performance fee\r\n        redeemedTokens = _getFee(_amount, redeemedTokens, price);\r\n        // burn idleTokens\r\n        _burn(msg.sender, _amount);\r\n        // send underlying minus fee to msg.sender\r\n        _transferTokens(token, msg.sender, redeemedTokens);\r\n      }\r\n  }\r\n\r\n  function _redeemHelper(uint256 _amount, uint256 _balanceUnderlying) private returns (uint256 redeemedTokens) {\r\n    address currToken;\r\n    uint256 idleSupply = totalSupply();\r\n    address[] memory _allAvailableTokens = allAvailableTokens;\r\n\r\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\r\n      currToken = _allAvailableTokens[i];\r\n      redeemedTokens = redeemedTokens.add(\r\n        _redeemProtocolTokens(\r\n          currToken,\r\n          // _amount * protocolPoolBalance / idleSupply\r\n          _amount.mul(_contractBalanceOf(currToken)).div(idleSupply) // amount to redeem\r\n        )\r\n      );\r\n    }\r\n    // and get a portion of the eventual unlent balance\r\n    redeemedTokens = redeemedTokens.add(_amount.mul(_balanceUnderlying).div(idleSupply));\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\r\n   * Underlying (eg. DAI) is not redeemed here.\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   */\r\n  function redeemInterestBearingTokens(uint256 _amount)\r\n    external nonReentrant whenPaused {\r\n      _checkMintRedeemSameTx();\r\n\r\n      _redeemGovTokens(msg.sender);\r\n\r\n      for (uint256 i = 0; i < allAvailableTokens.length; i++) {\r\n        _transferTokens(allAvailableTokens[i], msg.sender, _amount.mul(_contractBalanceOf(allAvailableTokens[i])).div(totalSupply()));\r\n      }\r\n      // Get a portion of the eventual unlent balance\r\n      _transferTokens(token, msg.sender, _amount.mul(_contractBalanceOf(token)).div(totalSupply()));\r\n      _burn(msg.sender, _amount);\r\n  }\r\n\r\n  /**\r\n   * Dynamic allocate all the pool across different lending protocols if needed,\r\n   * rebalance without params\r\n   *\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function rebalance() external returns (bool) {\r\n    return _rebalance();\r\n  }\r\n\r\n  /**\r\n   * @dev The fee to be charged for a given loan.\r\n   * @param _token The loan currency.\r\n   * @param _amount The amount of tokens lent.\r\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n   */\r\n  function flashFee(address _token, uint256 _amount) public view returns (uint256) {\r\n    require(_token == token, '7');\r\n    return _amount.mul(flashLoanFee).div(FULL_ALLOC);\r\n  }\r\n\r\n  /**\r\n   * @dev The amount of currency available to be lent.\r\n   * @param _token The loan currency.\r\n   * @return The amount of `token` that can be borrowed.\r\n   */\r\n  function maxFlashLoan(address _token) external view returns (uint256) {\r\n    if (_token == token) {\r\n      return _tokenPrice().mul(totalSupply()).div(ONE_18);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow any users to borrow funds inside a tx if they return the same amount + `flashLoanFee`\r\n   *\r\n   * @param _receiver : flash loan receiver, should have the IERC3156FlashBorrower interface\r\n   * @param _token : used to check that the requested token is the correct one\r\n   * @param _amount : amount of `token` to borrow\r\n   * @param _params : params that should be passed to the _receiverAddress in the `executeOperation` call\r\n   */\r\n  function flashLoan(\r\n    IERC3156FlashBorrower _receiver,\r\n    address _token,\r\n    uint256 _amount,\r\n    bytes calldata _params\r\n  ) external whenNotPaused nonReentrant returns (bool) {\r\n    address receiverAddr = address(_receiver);\r\n    require(_token == token, \"7\");\r\n    require(receiverAddr != address(0) && _amount > 0, \"0\");\r\n\r\n    // get current underlying unlent balance\r\n    uint256 balance = _contractBalanceOf(token);\r\n\r\n    if (_amount > balance) {\r\n      // Unlent is not enough, some funds needs to be redeemed from underlying protocols\r\n      uint256 toRedeem = _amount.sub(balance);\r\n      uint256 _toRedeemAux;\r\n      address currToken;\r\n      uint256 currBalanceUnderlying;\r\n      uint256 availableLiquidity;\r\n      uint256 redeemed;\r\n      uint256 protocolTokenPrice;\r\n      ILendingProtocol protocol;\r\n      bool isEnough;\r\n      bool haveWeInvestedEnough;\r\n\r\n      // We cycle through interest bearing tokens currently in use (eg [cDAI, aDAI])\r\n      // (ie we cycle each lending protocol where we have some funds currently deposited)\r\n      for (uint256 i = 0; i < allAvailableTokens.length; i++) {\r\n        currToken = allAvailableTokens[i];\r\n        protocol = ILendingProtocol(protocolWrappers[currToken]);\r\n        protocolTokenPrice = protocol.getPriceInToken();\r\n        availableLiquidity = protocol.availableLiquidity();\r\n        currBalanceUnderlying = _contractBalanceOf(currToken).mul(protocolTokenPrice).div(ONE_18);\r\n        // We need to check:\r\n        // 1. if Idle has invested enough in that protocol to cover the user request\r\n        haveWeInvestedEnough = currBalanceUnderlying >= toRedeem;\r\n        // 2. if the current lending protocol has enough liquidity available (not borrowed) to cover the user requested amount\r\n        isEnough = availableLiquidity >= toRedeem;\r\n        // in order to calculate `_toRedeemAux` which is the amount of underlying (eg DAI)\r\n        // that we have to redeem from that lending protocol\r\n        _toRedeemAux = haveWeInvestedEnough ?\r\n          // if we lent enough and that protocol has enough liquidity we redeem `toRedeem` and we are done, otherwise we redeem `availableLiquidity`\r\n          (isEnough ? toRedeem : availableLiquidity) :\r\n          // if we did not lent enough and that liquidity is available then we redeem all what we deposited, otherwise we redeem `availableLiquidity`\r\n          (currBalanceUnderlying <= availableLiquidity ? currBalanceUnderlying : availableLiquidity);\r\n\r\n        // do the actual redeem on the lending protocol\r\n        redeemed = _redeemProtocolTokens(\r\n          currToken,\r\n          // convert amount from underlying to protocol token\r\n          _toRedeemAux.mul(ONE_18).div(protocolTokenPrice)\r\n        );\r\n        // tokens are now in this contract\r\n        if (haveWeInvestedEnough && isEnough) {\r\n          break;\r\n        }\r\n\r\n        toRedeem = toRedeem.sub(redeemed);\r\n      }\r\n    }\r\n\r\n    require(_contractBalanceOf(token) >= _amount, \"3\");\r\n    // transfer funds\r\n    _transferTokens(token, receiverAddr, _amount);\r\n    // calculate fee\r\n    uint256 _flashFee = flashFee(token, _amount);\r\n    // call _receiver `onFlashLoan`\r\n    require(\r\n      _receiver.onFlashLoan(msg.sender, token, _amount, _flashFee, _params) == keccak256(\"ERC3156FlashBorrower.onFlashLoan\"),\r\n      \"8\"\r\n    );\r\n    // transfer _amount + _flashFee from _receiver\r\n    IERC20(token).safeTransferFrom(receiverAddr, address(this), _amount.add(_flashFee));\r\n\r\n    // Put underlyings in lending once again with rebalance\r\n    _rebalance();\r\n\r\n    emit FlashLoan(receiverAddr, msg.sender, _amount, _flashFee);\r\n\r\n    return true;\r\n  }\r\n\r\n  // internal\r\n  /**\r\n   * Get current idleToken price based on net asset value and totalSupply\r\n   *\r\n   * @return price: value of 1 idleToken in underlying\r\n   */\r\n  function _tokenPrice() internal view returns (uint256 price) {\r\n    uint256 totSupply = totalSupply();\r\n    if (totSupply == 0) {\r\n      return 10**(tokenDecimals);\r\n    }\r\n\r\n    address currToken;\r\n    uint256 totNav = _contractBalanceOf(token).mul(ONE_18); // eventual underlying unlent balance\r\n    address[] memory _allAvailableTokens = allAvailableTokens;\r\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\r\n      currToken = _allAvailableTokens[i];\r\n      totNav = totNav.add(\r\n        // NAV = price * poolSupply\r\n        _getPriceInToken(protocolWrappers[currToken]).mul(\r\n          _contractBalanceOf(currToken)\r\n        )\r\n      );\r\n    }\r\n\r\n    price = totNav.div(totSupply); // idleToken price in token wei\r\n  }\r\n\r\n  /**\r\n   * Dynamic allocate all the pool across different lending protocols if needed\r\n   *\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function _rebalance()\r\n    internal whenNotPaused\r\n    returns (bool) {\r\n      // check if we need to rebalance by looking at the last allocations submitted by rebalancer\r\n      uint256[] memory rebalancerLastAllocations = lastRebalancerAllocations;\r\n      uint256[] memory _lastAllocations = lastAllocations;\r\n      uint256 lastLen = _lastAllocations.length;\r\n      bool areAllocationsEqual = rebalancerLastAllocations.length == lastLen;\r\n      if (areAllocationsEqual) {\r\n        for (uint256 i = 0; i < lastLen || !areAllocationsEqual; i++) {\r\n          if (_lastAllocations[i] != rebalancerLastAllocations[i]) {\r\n            areAllocationsEqual = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      uint256 balance = _contractBalanceOf(token);\r\n\r\n      if (areAllocationsEqual && balance == 0) {\r\n        return false;\r\n      }\r\n\r\n      uint256 maxUnlentBalance = _getCurrentPoolValue().mul(maxUnlentPerc).div(FULL_ALLOC);\r\n\r\n      if (areAllocationsEqual) {\r\n        if (balance > maxUnlentBalance) {\r\n          // mint the difference\r\n          _mintWithAmounts(rebalancerLastAllocations, balance.sub(maxUnlentBalance));\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Instead of redeeming everything during rebalance we redeem and mint only what needs\r\n      // to be reallocated\r\n\r\n      // get current allocations in underlying (it does not count unlent underlying)\r\n      (uint256[] memory amounts, uint256 totalInUnderlying) = _getCurrentAllocations();\r\n      // calculate the total amount in underlying that needs to be reallocated\r\n      totalInUnderlying = totalInUnderlying.add(balance);\r\n\r\n      (uint256[] memory toMintAllocations, uint256 totalToMint, bool lowLiquidity) = _redeemAllNeeded(\r\n        amounts,\r\n        // calculate new allocations given the total (not counting unlent balance)\r\n        _amountsFromAllocations(rebalancerLastAllocations, totalInUnderlying.sub(maxUnlentBalance))\r\n      );\r\n      // if some protocol has liquidity that we should redeem, we do not update\r\n      // lastAllocations to force another rebalance next time\r\n      if (!lowLiquidity) {\r\n        // Update lastAllocations with rebalancerLastAllocations\r\n        delete lastAllocations;\r\n        lastAllocations = rebalancerLastAllocations;\r\n      }\r\n\r\n      uint256 totalRedeemd = _contractBalanceOf(token);\r\n\r\n      if (totalRedeemd <= maxUnlentBalance || totalToMint == 0) {\r\n        return false;\r\n      }\r\n\r\n      // Do not mint directly using toMintAllocations check with totalRedeemd\r\n      uint256[] memory tempAllocations = new uint256[](toMintAllocations.length);\r\n      for (uint256 i = 0; i < toMintAllocations.length; i++) {\r\n        // Calc what would have been the correct allocations percentage if all was available\r\n        tempAllocations[i] = toMintAllocations[i].mul(FULL_ALLOC).div(totalToMint);\r\n      }\r\n\r\n      // partial amounts\r\n      _mintWithAmounts(tempAllocations, totalRedeemd.sub(maxUnlentBalance));\r\n\r\n      emit Rebalance(msg.sender, totalInUnderlying);\r\n\r\n      return true; // hasRebalanced\r\n  }\r\n\r\n  /**\r\n   * Redeem unclaimed governance tokens and update governance global index and user index if needed\r\n   * if called during redeem it will send all gov tokens accrued by a user to the user\r\n   *\r\n   * @param _to : user address\r\n   */\r\n  function _redeemGovTokens(address _to) internal {\r\n    _redeemGovTokensInternal(_to, new bool[](govTokens.length));\r\n  }\r\n\r\n  /**\r\n   * Redeem unclaimed governance tokens and update governance global index and user index if needed\r\n   * if called during redeem it will send all gov tokens accrued by a user to the user\r\n   *\r\n   * @param _to : user address\r\n   * @param _skipGovTokenRedeem : array of flag for redeeming or not gov tokens\r\n   */\r\n  function _redeemGovTokensInternal(address _to, bool[] memory _skipGovTokenRedeem) internal {\r\n    address[] memory _govTokens = govTokens;\r\n    if (_govTokens.length == 0) {\r\n      return;\r\n    }\r\n    uint256 supply = totalSupply();\r\n    uint256 usrBal = balanceOf(_to);\r\n    address govToken;\r\n\r\n    if (supply > 0) {\r\n      for (uint256 i = 0; i < _govTokens.length; i++) {\r\n        govToken = _govTokens[i];\r\n\r\n        _redeemGovTokensFromProtocol(govToken);\r\n\r\n        // get current gov token balance\r\n        uint256 govBal = _contractBalanceOf(govToken);\r\n        if (govBal > 0) {\r\n          // update global index with ratio of govTokens per idleToken\r\n          govTokensIndexes[govToken] = govTokensIndexes[govToken].add(\r\n            // check how much gov tokens for each idleToken we gained since last update\r\n            govBal.sub(govTokensLastBalances[govToken]).mul(ONE_18).div(supply)\r\n          );\r\n          // update global var with current govToken balance\r\n          govTokensLastBalances[govToken] = govBal;\r\n        }\r\n\r\n        if (usrBal > 0) {\r\n          uint256 usrIndex = usersGovTokensIndexes[govToken][_to];\r\n          // check if user has accrued something\r\n          uint256 delta = govTokensIndexes[govToken].sub(usrIndex);\r\n          if (delta != 0) {\r\n            uint256 share = usrBal.mul(delta).div(ONE_18);\r\n            uint256 bal = _contractBalanceOf(govToken);\r\n            // To avoid rounding issue\r\n            if (share > bal) {\r\n              share = bal;\r\n            }\r\n            if (_skipGovTokenRedeem[i]) { // -> gift govTokens[i] accrued to the pool\r\n              // update global index with ratio of govTokens per idleToken\r\n              govTokensIndexes[govToken] = govTokensIndexes[govToken].add(\r\n                // check how much gov tokens for each idleToken we gained since last update\r\n                share.mul(ONE_18).div(supply.sub(usrBal))\r\n              );\r\n            } else {\r\n              uint256 feeDue;\r\n              // no fee for IDLE governance token\r\n              if (feeAddress != address(0) && fee > 0 && govToken != IDLE) {\r\n                feeDue = share.mul(fee).div(FULL_ALLOC);\r\n                // Transfer gov token fee to feeAddress\r\n                _transferTokens(govToken, feeAddress, feeDue);\r\n              }\r\n              // Transfer gov token to user\r\n              _transferTokens(govToken, _to, share.sub(feeDue));\r\n              // Update last balance\r\n              govTokensLastBalances[govToken] = _contractBalanceOf(govToken);\r\n            }\r\n          }\r\n        }\r\n        // save current index for this gov token\r\n        usersGovTokensIndexes[govToken][_to] = govTokensIndexes[govToken];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redeem a specific gov token\r\n   *\r\n   * @param _govToken : address of the gov token to redeem\r\n   */\r\n  function _redeemGovTokensFromProtocol(address _govToken) internal {\r\n    // In case new Gov tokens will be supported this should be updated\r\n    if (_govToken == COMP || _govToken == IDLE || _govToken == stkAAVE) {\r\n      address[] memory holders = new address[](1);\r\n      holders[0] = address(this);\r\n\r\n      if (_govToken == IDLE) {\r\n        // For IDLE, the distribution is done only to IdleTokens, so `holders` and\r\n        // `tokens` parameters are the same and equal to address(this)\r\n        IdleController(idleController).claimIdle(holders, holders);\r\n        return;\r\n      }\r\n\r\n      address[] memory tokens = new address[](1);\r\n      if (_govToken == stkAAVE && aToken != address(0)) {\r\n        tokens[0] = aToken;\r\n        IAaveIncentivesController _ctrl = IAaveIncentivesController(AToken(tokens[0]).getIncentivesController());\r\n        _ctrl.claimRewards(tokens, _ctrl.getUserUnclaimedRewards(address(this)), address(this));\r\n        return;\r\n      }\r\n      if (cToken != address(0)) {\r\n        tokens[0] = cToken;\r\n        Comptroller(CERC20(tokens[0]).comptroller()).claimComp(holders, tokens, false, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update receiver userAvgPrice paid for each idle token,\r\n   * receiver will pay fees accrued\r\n   *\r\n   * @param usr : user that should have balance update\r\n   * @param qty : new amount deposited / transferred, in idleToken\r\n   * @param price : sender userAvgPrice\r\n   */\r\n  function _updateUserFeeInfo(address usr, uint256 qty, uint256 price) private {\r\n    uint256 usrBal = balanceOf(usr);\r\n    // ((avgPrice * oldBalance) + (senderAvgPrice * newQty)) / totBalance\r\n    userAvgPrices[usr] = userAvgPrices[usr].mul(usrBal.sub(qty)).add(price.mul(qty)).div(usrBal);\r\n  }\r\n\r\n  /**\r\n   * Calculate fee in underlyings and send them to feeAddress\r\n   *\r\n   * @param amount : in idleTokens\r\n   * @param redeemed : in underlying\r\n   * @param currPrice : current idleToken price\r\n   * @return : net value in underlying\r\n   */\r\n  function _getFee(uint256 amount, uint256 redeemed, uint256 currPrice) internal returns (uint256) {\r\n    uint256 avgPrice = userAvgPrices[msg.sender];\r\n    if (currPrice < avgPrice) {\r\n      return redeemed;\r\n    }\r\n    // 10**23 -> ONE_18 * FULL_ALLOC\r\n    uint256 feeDue = amount.mul(currPrice.sub(avgPrice)).mul(fee).div(10**23);\r\n    _transferTokens(token, feeAddress, feeDue);\r\n    return redeemed.sub(feeDue);\r\n  }\r\n\r\n  /**\r\n   * Mint specific amounts of protocols tokens\r\n   *\r\n   * @param allocations : array of amounts to be minted\r\n   * @param total : total amount\r\n   * @return : net value in underlying\r\n   */\r\n  function _mintWithAmounts(uint256[] memory allocations, uint256 total) internal {\r\n    // mint for each protocol and update currentTokensUsed\r\n    uint256[] memory protocolAmounts = _amountsFromAllocations(allocations, total);\r\n\r\n    uint256 currAmount;\r\n    address protWrapper;\r\n    address[] memory _tokens = allAvailableTokens;\r\n    for (uint256 i = 0; i < protocolAmounts.length; i++) {\r\n      currAmount = protocolAmounts[i];\r\n      if (currAmount != 0) {\r\n        protWrapper = protocolWrappers[_tokens[i]];\r\n        // Transfer _amount underlying token (eg. DAI) to protWrapper\r\n        _transferTokens(token, protWrapper, currAmount);\r\n        ILendingProtocol(protWrapper).mint();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate amounts from percentage allocations (100000 => 100%)\r\n   *\r\n   * @param allocations : array of protocol allocations in percentage\r\n   * @param total : total amount\r\n   * @return : array with amounts\r\n   */\r\n  function _amountsFromAllocations(uint256[] memory allocations, uint256 total)\r\n    internal pure returns (uint256[] memory newAmounts) {\r\n    newAmounts = new uint256[](allocations.length);\r\n    uint256 currBalance;\r\n    uint256 allocatedBalance;\r\n\r\n    for (uint256 i = 0; i < allocations.length; i++) {\r\n      if (i == allocations.length - 1) {\r\n        newAmounts[i] = total.sub(allocatedBalance);\r\n      } else {\r\n        currBalance = total.mul(allocations[i]).div(FULL_ALLOC);\r\n        allocatedBalance = allocatedBalance.add(currBalance);\r\n        newAmounts[i] = currBalance;\r\n      }\r\n    }\r\n    return newAmounts;\r\n  }\r\n\r\n  /**\r\n   * Redeem all underlying needed from each protocol\r\n   *\r\n   * @param amounts : array with current allocations in underlying\r\n   * @param newAmounts : array with new allocations in underlying\r\n   * @return toMintAllocations : array with amounts to be minted\r\n   * @return totalToMint : total amount that needs to be minted\r\n   */\r\n  function _redeemAllNeeded(\r\n    uint256[] memory amounts,\r\n    uint256[] memory newAmounts\r\n    ) internal returns (\r\n      uint256[] memory toMintAllocations,\r\n      uint256 totalToMint,\r\n      bool lowLiquidity\r\n    ) {\r\n    toMintAllocations = new uint256[](amounts.length);\r\n    ILendingProtocol protocol;\r\n    uint256 currAmount;\r\n    uint256 newAmount;\r\n    address currToken;\r\n    address[] memory _tokens = allAvailableTokens;\r\n    // check the difference between amounts and newAmounts\r\n    for (uint256 i = 0; i < amounts.length; i++) {\r\n      currToken = _tokens[i];\r\n      newAmount = newAmounts[i];\r\n      currAmount = amounts[i];\r\n      protocol = ILendingProtocol(protocolWrappers[currToken]);\r\n      if (currAmount > newAmount) {\r\n        uint256 toRedeem = currAmount.sub(newAmount);\r\n        uint256 availableLiquidity = protocol.availableLiquidity();\r\n        if (availableLiquidity < toRedeem) {\r\n          lowLiquidity = true;\r\n          // remove 1% to be sure it's really available (eg for compound-like protocols)\r\n          toRedeem = availableLiquidity.mul(FULL_ALLOC-1000).div(FULL_ALLOC);\r\n        }\r\n        // redeem the difference\r\n        _redeemProtocolTokens(\r\n          currToken,\r\n          // convert amount from underlying to protocol token\r\n          toRedeem.mul(ONE_18).div(protocol.getPriceInToken())\r\n        );\r\n        // tokens are now in this contract\r\n      } else {\r\n        toMintAllocations[i] = newAmount.sub(currAmount);\r\n        totalToMint = totalToMint.add(toMintAllocations[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the contract balance of every protocol currently used\r\n   *\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   * @return total : total AUM in underlying\r\n   */\r\n  function _getCurrentAllocations() internal view\r\n    returns (uint256[] memory amounts, uint256 total) {\r\n      // Get balance of every protocol implemented\r\n      address currentToken;\r\n      address[] memory _tokens = allAvailableTokens;\r\n      uint256 tokensLen = _tokens.length;\r\n      amounts = new uint256[](tokensLen);\r\n      for (uint256 i = 0; i < tokensLen; i++) {\r\n        currentToken = _tokens[i];\r\n        amounts[i] = _getPriceInToken(protocolWrappers[currentToken]).mul(\r\n          _contractBalanceOf(currentToken)\r\n        ).div(ONE_18);\r\n        total = total.add(amounts[i]);\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Get the current pool value in underlying\r\n   *\r\n   * @return total : total AUM in underlying\r\n   */\r\n  function _getCurrentPoolValue() internal view\r\n    returns (uint256 total) {\r\n      // Get balance of every protocol implemented\r\n      address currentToken;\r\n      address[] memory _tokens = allAvailableTokens;\r\n      for (uint256 i = 0; i < _tokens.length; i++) {\r\n        currentToken = _tokens[i];\r\n        total = total.add(_getPriceInToken(protocolWrappers[currentToken]).mul(\r\n          _contractBalanceOf(currentToken)\r\n        ).div(ONE_18));\r\n      }\r\n\r\n      // add unlent balance\r\n      total = total.add(_contractBalanceOf(token));\r\n  }\r\n\r\n  /**\r\n   * Get contract balance of _token\r\n   *\r\n   * @param _token : address of the token to read balance\r\n   * @return total : balance of _token in this contract\r\n   */\r\n  function _contractBalanceOf(address _token) private view returns (uint256) {\r\n    // Original implementation:\r\n    //\r\n    // return IERC20(_token).balanceOf(address(this));\r\n\r\n    // Optimized implementation inspired by uniswap https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/UniswapV3Pool.sol#L144\r\n    //\r\n    // 0x70a08231 -> selector for 'function balanceOf(address) returns (uint256)'\r\n    (bool success, bytes memory data) =\r\n        _token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\r\n    require(success);\r\n    return abi.decode(data, (uint256));\r\n  }\r\n\r\n\r\n  /**\r\n   * Get price of 1 protocol token in underlyings\r\n   *\r\n   * @param _token : address of the protocol token\r\n   * @return price : price of protocol token\r\n   */\r\n  function _getPriceInToken(address _token) private view returns (uint256) {\r\n    return ILendingProtocol(_token).getPriceInToken();\r\n  }\r\n\r\n  /**\r\n   * Check that no mint has been made in the same block from the same EOA\r\n   */\r\n  function _checkMintRedeemSameTx() private view {\r\n    require(keccak256(abi.encodePacked(tx.origin, block.number)) != _minterBlock, \"9\");\r\n  }\r\n\r\n  // ILendingProtocols calls\r\n  /**\r\n   * Redeem underlying tokens through protocol wrapper\r\n   *\r\n   * @param _amount : amount of `_token` to redeem\r\n   * @param _token : protocol token address\r\n   * @return tokens : new tokens minted\r\n   */\r\n  function _redeemProtocolTokens(address _token, uint256 _amount)\r\n    internal\r\n    returns (uint256 tokens) {\r\n      if (_amount != 0) {\r\n        // Transfer _amount of _protocolToken (eg. cDAI) to _wrapperAddr\r\n        address _wrapperAddr = protocolWrappers[_token];\r\n        _transferTokens(_token, _wrapperAddr, _amount);\r\n        tokens = ILendingProtocol(_wrapperAddr).redeem(address(this));\r\n      }\r\n  }\r\n\r\n  function _transferTokens(address _token, address _to, uint256 _amount) internal {\r\n    IERC20(_token).safeTransfer(_to, _amount);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAvailableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAPRs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAvailableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvgAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"getGovTokensAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"}],\"name\":\"getProtocolTokenToGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"govTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govTokensIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govTokensLastBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gst2\",\"outputs\":[{\"internalType\":\"contract GasToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idleController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRiskAdjusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastITokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUnlentPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"mintIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"_skipGovTokenRedeem\",\"type\":\"bool[]\"}],\"name\":\"redeemIdleTokenSkipGov\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemInterestBearingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"}],\"name\":\"setAToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"protocolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newGovTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newGovTokensEqualLen\",\"type\":\"address[]\"}],\"name\":\"setAllAvailableTokensAndWrappers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"setCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flashFee\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"name\":\"setMaxUnlentPerc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHelper\",\"type\":\"address\"}],\"name\":\"setTokenHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenPriceWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceWFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAvgPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersGovTokensIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IdleTokenGovernance","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://060367378e1052e0f6005149cb27288d46efd9166dd1f3c79564e6f496445e07"}]}