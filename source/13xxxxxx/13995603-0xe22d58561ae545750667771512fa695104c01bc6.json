{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/F3kControl.sol\": {\r\n      \"content\": \"// contracts/F3kControl.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IF3K1155.sol\\\";\\nimport \\\"./IF3K721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract Fantasy3KControl is ReentrancyGuard, Ownable {\\n\\n    using Address for address;\\n    event BlindBoxPriceChanged(uint256 _epicBoxPrice, uint256 _LegendBoxPrice);\\n    event SaleConfigChanged (uint256 round, uint256 start, uint256 end, uint256 number, uint256 epicNumber, uint256 epicBoxPrice, uint256 legendNumber, uint256 legendBoxPrice);\\n    event AddWhiteList(address[] whitelist);\\n    event WhiteBlindBox(address to);\\n    event EpicBlindBox(address to);\\n    event LegendBlindBox(address to);\\n    event PayeeAdded(address account, uint256 shares_);\\n    event PaymentReceived(address account, uint256 amount);\\n    event OpenBlindBox(uint256 id);\\n    event MintTokens(address to, uint256 count, uint256 mtype);\\n    event SaleStarted();\\n    event SalePaused();\\n    event MerkleRootChanged(bytes32 merkleRoot);\\n\\n    struct SaleConfig {\\n        uint256 round;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 whiteNumber;\\n        uint256 epicNumber;\\n        uint256 epicBoxPrice;\\n        uint256 legendNumber;\\n        uint256 legendBoxPrice;\\n        uint256 whiteBoxPrice;\\n    }\\n\\n    struct BoxIdx {\\n        uint256 _id;\\n        address _address;\\n        uint256 _round;\\n        uint256 _amount;\\n        uint256 _height;\\n    }\\n\\n    struct OpenBoxIdx {\\n        uint256 _burnId;\\n        uint256 _start;\\n        uint256 _end;\\n        uint256 _height;\\n    }\\n\\n    bytes32 public merkleRoot;\\n    uint256 private immutable whiteListPrice = 0.5 ether; \\n    bool public _isSaleActive = false;\\n    bool public isWhiteListActive = false;\\n    bool public isOpenActive = false;\\n    uint256 public boxLength;\\n    uint256 public openboxLength;\\n    F3K721 private f3k721;\\n    F3K1155 private f3k1155;\\n\\n    mapping (address => bool) public whiteList;\\n    mapping (address => bool) private top10List;\\n    mapping (uint256 => BoxIdx) boxIdxs;\\n    mapping (uint256 => OpenBoxIdx) openBoxIdxs;\\n    mapping (bytes32 => bool) public activity;\\n\\n    address public f3kVault;\\n    SaleConfig public saleConfig;\\n\\n    constructor(\\n        address _f3k721,\\n        address _f3k1155,\\n        address _f3kVault\\n    ) {\\n        f3k721 = F3K721(_f3k721);\\n        f3k1155 = F3K1155(_f3k1155);\\n        f3kVault = _f3kVault;\\n    }\\n\\n    function startSale() external onlyOwner {\\n        require(!_isSaleActive, 'Fantasy3k: Public sale is already began');\\n        _isSaleActive = true;\\n        emit SaleStarted();\\n    }\\n\\n    function pauseSale() external onlyOwner {\\n        require(_isSaleActive, 'Fantasy3k: Public sale is already paused');\\n        _isSaleActive = false;\\n        emit SalePaused();\\n    }\\n\\n    function setIsWhiteListActive(bool _isAllowListActive) external onlyOwner {\\n        isWhiteListActive = _isAllowListActive;\\n    }\\n\\n    function setIsOpenActive(bool _isAllowOpen) external onlyOwner {\\n        isOpenActive = _isAllowOpen;\\n    }\\n\\n    function setBaseURI(string calldata newbaseURI) external onlyOwner {\\n        f3k721.setBaseURI(newbaseURI);\\n    }\\n    \\n    function addWhiteList(address[] memory whitelist) public onlyOwner {\\n\\n        require(whitelist.length == 40, \\\"Fantasy3K: incorrect whiteList length\\\");\\n\\n        for (uint64 i; i < whitelist.length; i++){\\n               whiteList[whitelist[i]] = true;\\n        }\\n    \\n        emit AddWhiteList(whitelist);\\n    }\\n\\n    function whiteListAirDrop(address[] memory droplist, uint32[] memory number) public onlyOwner {\\n\\n        require(droplist.length == 50, \\\"Fantasy3K: incorrect droplist airdrop length\\\");\\n        require(droplist.length == number.length, \\\"Fantasy3K: incorrect droplist or number length\\\");\\n\\n        for (uint64 i; i < droplist.length; i++){\\n            if (number[i] > 1) {\\n                boxUpdate(f3k1155.nextTokenId(), droplist[i], 0, 6);\\n                f3k1155.mint(droplist[i], 6);\\n            } else {\\n                f3k721.mintTokens(droplist[i], 1);\\n            }\\n        }\\n    }\\n\\n    function whiteBlindBox() public payable {\\n        SaleConfig memory _saleConfig = saleConfig;\\n\\n        require(isWhiteListActive, \\\"Fantasy3K: white list is not active\\\");\\n        require(_saleConfig.whiteNumber  > 0, \\\"Fantasy3K: whiteBlindBox has sold out\\\");\\n        require(whiteListPrice == msg.value, \\\"Fantasy3K: incorrect Ether value\\\");\\n        require(whiteList[msg.sender] == true, \\\"Fantasy3K: not whitelist address\\\");\\n        require(block.timestamp < _saleConfig.endTime, \\\"Fantasy3K: whitelist sale is end\\\"); \\n\\n        boxUpdate(f3k1155.nextTokenId(), msg.sender, 0, 6);\\n\\n        saleConfig.whiteNumber -= 1;\\n\\n        f3k1155.mint(msg.sender, 6);\\n        whiteList[msg.sender] = false;\\n        emit WhiteBlindBox(msg.sender);\\n    }\\n\\n    function epicBlindBox() public payable {\\n        SaleConfig memory _saleConfig = saleConfig;\\n\\n        require(_isSaleActive, 'Fantasy3K: sale must be active');\\n        require(_saleConfig.round  > 0, \\\"Fantasy3K: epicBlindBox has not started\\\");\\n        require(_saleConfig.epicBoxPrice == msg.value, \\\"Fantasy3K: incorrect Ether value\\\");\\n        require(_saleConfig.epicNumber  > 0, \\\"Fantasy3K: epicBlindBox has sold out\\\");\\n        require(block.timestamp >= _saleConfig.startTime, \\\"Fantasy3K: sale not started\\\");\\n        require(block.timestamp < _saleConfig.endTime, \\\"Fantasy3K: sale is end\\\");\\n        require(!msg.sender.isContract(), \\\"Fantasy3K: caller can't be a contract\\\");\\n\\n        saleConfig.epicNumber -= 1;\\n\\n        boxUpdate(f3k1155.nextTokenId(), msg.sender, _saleConfig.round, 5);\\n\\n        f3k1155.mint(msg.sender, 5);\\n\\n        emit EpicBlindBox(msg.sender);      \\n    }\\n\\n    function legendBlindBox() public payable {\\n        SaleConfig memory _saleConfig = saleConfig;\\n\\n        require(_isSaleActive, 'Fantasy3K: sale must be active');\\n        require(_saleConfig.round  > 0, \\\"Fantasy3K: legendBlindBox has not started\\\");\\n        require(_saleConfig.legendBoxPrice == msg.value, \\\"Fantasy3K: incorrect Ether value\\\");\\n        require(_saleConfig.legendNumber > 0, \\\"Fantasy3K: legendBlindBox has sold out\\\");\\n        require(block.timestamp >= _saleConfig.startTime, \\\"Fantasy3K: sale not started\\\");\\n        require(block.timestamp < _saleConfig.endTime, \\\"Fantasy3K: sale is end\\\");\\n        require(!msg.sender.isContract(), \\\"Fantasy3K: caller can't be a contract\\\");\\n\\n        saleConfig.legendNumber -= 1;\\n        boxUpdate(f3k1155.nextTokenId(), msg.sender, _saleConfig.round, 50);\\n\\n        f3k1155.mint(msg.sender, 50);\\n        emit LegendBlindBox(msg.sender);\\n    }\\n\\n\\n    function openBlindBox(uint256 id) public {\\n        require(isOpenActive, 'Fantasy3K: Open box not active');\\n        require(f3k1155.balanceOf(msg.sender, id) > 0, \\\"Doesn't own the token\\\"); \\n        \\n        uint256 fromBalance = f3k1155.balanceOf(msg.sender, id);\\n\\n        f3k1155.burnToken(msg.sender, id, fromBalance);\\n\\n        nftUpdate(id, f3k721.nextTokenId(), f3k721.nextTokenId() + fromBalance);\\n\\n        f3k721.mintTokens(msg.sender, fromBalance); \\n        emit OpenBlindBox(id);\\n    }\\n\\n\\n\\n    function nftUpdate(uint256 burnId, uint256 start, uint256 end) private {\\n        uint256 _openBoxLength = openboxLength;\\n\\n        openBoxIdxs[_openBoxLength] = OpenBoxIdx({\\n            _burnId: burnId, \\n            _start: start, \\n            _end: end, \\n            _height: block.number});\\n\\n        openboxLength++;\\n    }\\n\\n    function boxUpdate(uint256 id, address to, uint256 round, uint256 amount) private {\\n        uint256 _boxLength = boxLength;\\n\\n        boxIdxs[_boxLength] = BoxIdx({\\n            _id: id, \\n            _address: to, \\n            _round: round, \\n            _amount: amount,\\n            _height: block.number});\\n\\n        boxLength += 1;\\n\\n    }\\n\\n    function getBoxMap(uint256 index) public view returns(uint256 id, address addr, uint256 round, uint256 amount, uint256 height){\\n        BoxIdx memory b = boxIdxs[index];\\n        return (b._id, b._address, b._round, b._amount, b._height);\\n    }\\n\\n    function getOpenBoxMap(uint256 index) public view returns(uint256 burnId, uint256 start, uint256 end, uint256 height){\\n        OpenBoxIdx memory b = openBoxIdxs[index];\\n        return (b._burnId, b._start, b._end, b._height);\\n    }\\n\\n    function setUpSale(\\n        uint256 round, \\n        uint256 start, \\n        uint256 end, \\n        uint256 whiteNumber, \\n        uint256 epicNumber, \\n        uint256 epicBoxPrice,\\n        uint256 legendNumber,\\n        uint256 legendBoxPrice\\n    ) external onlyOwner {\\n        uint256 _round = round;\\n        uint256 _startTime = start;\\n        uint256 _endTime = end;\\n        uint256 _whiteNumber = whiteNumber;\\n        uint256 _epicNumber = epicNumber;\\n        uint256 _epicBoxPrice = epicBoxPrice;\\n        uint256 _legendNumber = legendNumber;\\n        uint256 _legendBoxPrice = legendBoxPrice;\\n        if (_round > 0) {\\n            require(_epicNumber > 0 && _legendNumber > 0, \\\"Fantasy3k: zero amount\\\");\\n        }\\n        require(start > 0 && _endTime > _startTime, \\\"Fantasy3k: invalid time range\\\");\\n\\n        saleConfig = SaleConfig({\\n            round: _round,\\n            startTime: _startTime,\\n            endTime: _endTime,\\n            whiteNumber: _whiteNumber,\\n            epicNumber: _epicNumber,\\n            epicBoxPrice: _epicBoxPrice,\\n            legendNumber: _legendNumber,\\n            legendBoxPrice: _legendBoxPrice,\\n            whiteBoxPrice: whiteListPrice\\n        });\\n\\n        emit SaleConfigChanged(_round, _startTime, _endTime, _whiteNumber, _epicNumber, _epicBoxPrice, _legendNumber, _legendBoxPrice);\\n    }\\n\\n    function merkleCheck(bytes32 leaf, bytes32[] calldata merkleProof) view public returns (bool, bool) {\\n        bool valid = MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n        return (valid, activity[leaf]);\\n    }\\n\\n    function cooperativeSales(uint256 around, uint256[] memory round, uint256[] memory count, \\n    uint256 mtype, uint256[] memory idx, bytes32[][] calldata merkleProof) public {\\n\\n        for (uint256 i; i < count.length; i++) {\\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender, around, round[i], count[i], mtype, idx[i]));\\n            require(!activity[leaf], \\\"Fantasy: leaf already participate\\\");\\n            bool valid = MerkleProof.verify(merkleProof[i], merkleRoot, leaf);\\n            require(valid, \\\"Fantasy: Valid proof required.\\\");\\n            if (mtype == 1155){\\n                boxUpdate(f3k1155.nextTokenId(), msg.sender, round[i], count[i]);\\n                f3k1155.mint(msg.sender, count[i]);\\n            }else if (mtype == 721) {\\n                f3k721.mintTokens(msg.sender, count[i]);\\n            }\\n            activity[leaf] = true;\\n        }\\n    }\\n\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\\n        merkleRoot = _merkleRoot;\\n        emit MerkleRootChanged(_merkleRoot);\\n    }\\n\\n    function setF3K721Contract(address _f3k721New) external onlyOwner {\\n        f3k721 = F3K721(_f3k721New);\\n    }\\n\\n    function setF3K1155Contract(address _f3k1155New) external onlyOwner {\\n        f3k1155 = F3K1155(_f3k1155New);\\n    }\\n\\n    function setVaultAddress(address _f3kVault) external onlyOwner {\\n        f3kVault = _f3kVault;\\n    }\\n\\n    function withdraw() nonReentrant external {\\n        Address.sendValue(payable(f3kVault), address(this).balance);\\n    }\\n\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IF3K1155.sol\": {\r\n      \"content\": \"// contracts/F3K721.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface F3K1155 {\\n    function mint(address to, uint256 amountToMint) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n    \\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function burnToken(address account, uint256 id, uint256 value) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/IF3K721.sol\": {\r\n      \"content\": \"// contracts/F3K721.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface F3K721 {\\n    function mintTokens(address to, uint256 count) external;\\n\\n    function setBaseURI(string calldata newbaseURI) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3k721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_f3k1155\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_f3kVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"AddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epicBoxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_LegendBoxPrice\",\"type\":\"uint256\"}],\"name\":\"BlindBoxPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EpicBlindBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LegendBlindBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mtype\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OpenBlindBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epicNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epicBoxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"legendNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"legendBoxPrice\",\"type\":\"uint256\"}],\"name\":\"SaleConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WhiteBlindBox\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"activity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"around\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"round\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"count\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"mtype\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idx\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProof\",\"type\":\"bytes32[][]\"}],\"name\":\"cooperativeSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epicBlindBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f3kVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBoxMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOpenBoxMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhiteListActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legendBlindBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"merkleCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"openBlindBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openboxLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicBoxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendBoxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteBoxPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newbaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3k1155New\",\"type\":\"address\"}],\"name\":\"setF3K1155Contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3k721New\",\"type\":\"address\"}],\"name\":\"setF3K721Contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAllowOpen\",\"type\":\"bool\"}],\"name\":\"setIsOpenActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAllowListActive\",\"type\":\"bool\"}],\"name\":\"setIsWhiteListActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicBoxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legendBoxPrice\",\"type\":\"uint256\"}],\"name\":\"setUpSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3kVault\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteBlindBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"droplist\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"number\",\"type\":\"uint32[]\"}],\"name\":\"whiteListAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Fantasy3KControl","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004f9bb332eea75b4a65386ae36f3d0104f9fc1fde0000000000000000000000002eb6c2363b2e9ba124ea324bcffad042365dc1ed000000000000000000000000fe41e99a8efa50c24b1ec6254df6420cc27c23ea","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}