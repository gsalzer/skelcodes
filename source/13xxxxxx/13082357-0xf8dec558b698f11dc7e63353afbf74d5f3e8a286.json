{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract IncreasingTreasuryRelayerLike {\r\n    function modifyParameters(bytes32, address) virtual external;\r\n}\r\ncontract MinimalIncreasingTreasuryRelayerOverlay is GebAuth {\r\n    // --- Variables ---\r\n    mapping(address => uint256) public relayers;\r\n\r\n    // --- Events ---\r\n    event ToggleRelayer(address relayer, uint256 whitelisted);\r\n\r\n    constructor() public GebAuth() {}\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Whitelist/blacklist a relayer contract\r\n    * @param relayer The relayer address\r\n    */\r\n    function toggleRelayer(address relayer) external isAuthorized {\r\n        if (relayers[relayer] == 0) {\r\n          relayers[relayer] = 1;\r\n        } else {\r\n          relayers[relayer] = 0;\r\n        }\r\n        emit ToggleRelayer(relayer, relayers[relayer]);\r\n    }\r\n\r\n    /*\r\n    * @notify Modify \"refundRequestor\"\r\n    * @param relayer The relayer address\r\n    * @param parameter Must be \"refundRequestor\"\r\n    * @param data The new value for refundRequestor\r\n    */\r\n    function modifyParameters(address relayer, bytes32 parameter, address data) external isAuthorized {\r\n        require(relayers[relayer] == 1, \"MinimalIncreasingTreasuryRelayerOverlay/not-whitelisted\");\r\n        if (parameter == \"refundRequestor\") {\r\n          IncreasingTreasuryRelayerLike(relayer).modifyParameters(parameter, data);\r\n        } else revert(\"MinimalIncreasingTreasuryRelayerOverlay/modify-forbidden-param\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whitelisted\",\"type\":\"uint256\"}],\"name\":\"ToggleRelayer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"toggleRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalIncreasingTreasuryRelayerOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://648c5507778dde5351e5ffb5d7cc17495791fcb21b30825c0a1e12f058cc4bd5"}]}