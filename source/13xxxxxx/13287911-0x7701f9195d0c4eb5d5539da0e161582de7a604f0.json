{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function mint(address _to, uint256 _amount) external;\r\n\r\n    function burn(uint256 _amount) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n        emit OwnershipTransferred(owner, _owner);\r\n    }\r\n}\r\n\r\ncontract BurnBridge is Ownable {\r\n    uint256 public feeValues;\r\n    address public adminAddress;\r\n    mapping(address => Token) public tokens;\r\n    mapping(address => mapping(uint256 => Token)) public pairs;\r\n    uint256 public nativeCirculation = 0;\r\n    uint256 public currentChainType;\r\n\r\n    struct Token {\r\n        bool active;\r\n        address tokenAddress;\r\n        bool isERC20; // false: native, true: ERC20\r\n        bool mintable; // false: unlock, true: mint\r\n        bool burnable; // false: lock,   true: burn\r\n        uint256 chainType;\r\n    }\r\n\r\n    event Bridge(\r\n        address indexed _from,\r\n        address indexed _token1,\r\n        address indexed _token2,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 chainType\r\n    );\r\n    event addPair(\r\n        address _token1,\r\n        address _token2,\r\n        uint256 _token1ChainType,\r\n        uint256 _token2ChainType,\r\n        uint256 actionType\r\n    );\r\n\r\n    constructor(uint256 _currentChainType) {\r\n        currentChainType = _currentChainType;\r\n    }\r\n\r\n    function setPair(\r\n        address _token1,\r\n        bool _mintable,\r\n        bool _burnable,\r\n        address _token2,\r\n        uint256 chainType\r\n    ) external onlyOwner returns (bool) {\r\n        Token memory token1 = Token(\r\n            true,\r\n            _token1,\r\n            _token1 == address(0) ? false : true,\r\n            _mintable,\r\n            _burnable,\r\n            currentChainType\r\n        );\r\n        Token memory token2 = Token(\r\n            true,\r\n            _token2,\r\n            _token2 == address(0) ? false : true,\r\n            false,\r\n            false,\r\n            chainType\r\n        );\r\n\r\n        tokens[_token1] = token1;\r\n        pairs[_token1][chainType] = token2;\r\n        emit addPair(_token1, _token2, currentChainType, chainType, 1);\r\n        return true;\r\n    }\r\n\r\n    function removePair(address _token1, uint256 chainType)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        pairs[_token1][chainType] = Token(\r\n            true,\r\n            address(0),\r\n            false,\r\n            false,\r\n            false,\r\n            chainType\r\n        );\r\n        emit addPair(\r\n            _token1,\r\n            pairs[_token1][chainType].tokenAddress,\r\n            currentChainType,\r\n            chainType,\r\n            2\r\n        );\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {\r\n        // Do nothing\r\n    }\r\n\r\n    function deposit(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _chainType\r\n    ) external payable returns (bool) {\r\n        Token memory token1 = tokens[_token];\r\n        Token memory token2 = pairs[_token][_chainType];\r\n        require(token2.active, \"the token is not acceptable\");\r\n\r\n        uint256 feeAmount;\r\n        uint256 transferAmount;\r\n        if (token1.isERC20) {\r\n            IERC20 token = IERC20(_token);\r\n            transferAmount = _amount;\r\n            if (feeValues > 0 && adminAddress != address(0)) {\r\n                feeAmount = (((feeValues) * transferAmount) / (10**5));\r\n                transferAmount = transferAmount - feeAmount;\r\n            }\r\n            token.transferFrom(msg.sender, address(this), transferAmount);\r\n            if (feeAmount > 0) {\r\n                token.transferFrom(msg.sender, adminAddress, feeAmount);\r\n            }\r\n\r\n            if (token1.burnable) {\r\n                token.burn(transferAmount);\r\n            }\r\n        } else {\r\n            token1 = tokens[address(0)];\r\n            token2 = pairs[address(0)][_chainType];\r\n            transferAmount = msg.value;\r\n            if (feeValues > 0 && adminAddress != address(0)) {\r\n                feeAmount = (((feeValues) * transferAmount) / (10**5));\r\n                transferAmount = transferAmount - feeAmount;\r\n            }\r\n            require(msg.value > 0, \"msg.value is zero\");\r\n            require(token2.active, \"the native token is not acceptable\");\r\n            if (feeAmount > 0) {\r\n                (payable(adminAddress)).transfer(feeAmount);\r\n            }\r\n        }\r\n        emit Bridge(\r\n            msg.sender,\r\n            token1.tokenAddress,\r\n            token2.tokenAddress,\r\n            _to,\r\n            transferAmount,\r\n            _chainType\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function trigger(\r\n        address _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) external onlyOwner returns (bool) {\r\n        Token memory token = tokens[_token];\r\n        require(token.active, \"the token is not acceptable\");\r\n\r\n        if (!token.isERC20) {\r\n            // Native token\r\n            _to.transfer(_amount);\r\n        } else if (token.mintable) {\r\n            // Mintable ERC20\r\n            IERC20(token.tokenAddress).mint(_to, _amount);\r\n        } else {\r\n            // Non-mintable ERC20\r\n            IERC20(token.tokenAddress).transfer(_to, _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setFeeValues(uint256 _feeValues) external onlyOwner {\r\n        feeValues = _feeValues;\r\n    }\r\n\r\n    function setAdminAddress(address _adminAddress) external onlyOwner {\r\n        adminAddress = _adminAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentChainType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainType\",\"type\":\"uint256\"}],\"name\":\"Bridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_token1ChainType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_token2ChainType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"addPair\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChainType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainType\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainType\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeValues\",\"type\":\"uint256\"}],\"name\":\"setFeeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burnable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainType\",\"type\":\"uint256\"}],\"name\":\"setPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BurnBridge","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1814c1e70c875f449920c08eaeaca1f89834ea29fd527d8be5ed23a6bd457a7a"}]}