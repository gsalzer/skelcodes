{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.0;\r\n\r\ninterface IERC20 {\r\n     function transferFrom(address _token, address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface ERC20 {\r\n     function allowance(address owner, address spender) external returns (uint256 amount);\r\n}\r\n\r\ninterface INFT {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract Escrow {\r\n    mapping(uint256 => uint256) private amounts;\r\n    mapping(uint256 => address) private owners;\r\n    mapping(uint256 => address) private tokenAddresses;\r\n    INFT nftContract;\r\n    address transferAddress = address(0);\r\n    address nftAddress = address(0);\r\n    address immutable auer = msg.sender;\r\n    \r\n    constructor(){\r\n        \r\n    }\r\n    \r\n    function getAmount(uint256 tokenId) public view virtual returns (uint256){\r\n        return amounts[tokenId];\r\n    }\r\n    \r\n    function getOwner(uint256 tokenId) public view virtual returns (address){\r\n        return owners[tokenId];\r\n    }\r\n    \r\n    function getTokenAddress(uint256 tokenId) public view virtual returns (address){\r\n        return tokenAddresses[tokenId];\r\n    }\r\n    \r\n    function initNFT(address nft,address transfer) public {\r\n        require(auer == msg.sender, \"no author\");\r\n        require(transferAddress == address(0), \"have init\");\r\n        nftAddress = nft;\r\n        nftContract = INFT(nftAddress);\r\n        transferAddress = transfer;\r\n    }\r\n    \r\n    function setNFT(uint256 tokenId,address tokenAddress,uint256 amount,address owner) public {\r\n        require(nftContract.ownerOf(tokenId) == address(this), \"no escrow\");\r\n        require(owners[tokenId] == address(0), \"is selling\");\r\n        amounts[tokenId] = amount;\r\n        owners[tokenId] = owner;\r\n        tokenAddresses[tokenId] = tokenAddress;\r\n    }\r\n    \r\n    function pullNFT(uint256 tokenId) public {\r\n        require(nftContract.ownerOf(tokenId) == address(this), \"no escrow\");\r\n        require(owners[tokenId] == msg.sender, \"no owner\");\r\n        require(amounts[tokenId] > 0, \"amount error\");\r\n        amounts[tokenId] = 0; \r\n        owners[tokenId] = address(0); \r\n        tokenAddresses[tokenId] = address(0); \r\n        nftContract.transferFrom(address(this),msg.sender,tokenId);\r\n    }\r\n    \r\n    function buyNFT(uint256 tokenId) payable public {\r\n        require(nftContract.ownerOf(tokenId) == address(this), \"no escrow\");\r\n        uint256 amount = amounts[tokenId];\r\n        require(amount > 0, \"amount error\");\r\n        address tokenAddress = tokenAddresses[tokenId];\r\n        address owner = owners[tokenId];\r\n        if(tokenAddress == address(0)){\r\n            require(amount == msg.value, \"amount error\");\r\n            amounts[tokenId] = 0; \r\n            owners[tokenId] = address(0); \r\n            tokenAddresses[tokenId] = address(0); \r\n            address(uint160(owner)).transfer(amount);\r\n        }else{\r\n            require(ERC20(tokenAddress).allowance(msg.sender,transferAddress) >= amount,\"approve error\");\r\n            amounts[tokenId] = 0; \r\n            owners[tokenId] = address(0); \r\n            tokenAddresses[tokenId] = address(0); \r\n            IERC20(transferAddress).transferFrom(tokenAddress,msg.sender,owner,amount);\r\n        }\r\n        nftContract.transferFrom(address(this),msg.sender,tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transfer\",\"type\":\"address\"}],\"name\":\"initNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pullNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Escrow","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79cc12f79d3aac586be1c3833e3d62210e2b5645773f280a37e592823f646a4c"}]}