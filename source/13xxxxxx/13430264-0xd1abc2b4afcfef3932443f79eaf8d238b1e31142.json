{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n *  SourceUnit: d:\\repos\\NFTurbo\\contracts\\emptybunnies\\emptybunnies_royalties.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\repos\\NFTurbo\\contracts\\emptybunnies\\emptybunnies_royalties.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\repos\\NFTurbo\\contracts\\emptybunnies\\emptybunnies_royalties.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\repos\\NFTurbo\\contracts\\emptybunnies\\emptybunnies_royalties.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Address.sol\";\r\n////import \"../utils/Context.sol\";\r\n////import \"../utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\r\n * that the Ether will be split in this way, since it is handled transparently by the contract.\r\n *\r\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\r\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\r\n * an amount proportional to the percentage of total shares they were assigned.\r\n *\r\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\r\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\r\n * function.\r\n */\r\ncontract PaymentSplitter is Context {\r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalReleased;\r\n\r\n    mapping(address => uint256) private _shares;\r\n    mapping(address => uint256) private _released;\r\n    address[] private _payees;\r\n\r\n    /**\r\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\r\n     * the matching position in the `shares` array.\r\n     *\r\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\r\n     * duplicates in `payees`.\r\n     */\r\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\r\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\r\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\r\n\r\n        for (uint256 i = 0; i < payees.length; i++) {\r\n            _addPayee(payees[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive() external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by an account.\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to a payee.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the address of the payee number `index`.\r\n     */\r\n    function payee(uint256 index) public view returns (address) {\r\n        return _payees[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\r\n     * total shares and their previous withdrawals.\r\n     */\r\n    function release(address payable account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = address(this).balance + _totalReleased;\r\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _released[account] = _released[account] + payment;\r\n        _totalReleased = _totalReleased + payment;\r\n\r\n        Address.sendValue(account, payment);\r\n        emit PaymentReleased(account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new payee to the contract.\r\n     * @param account The address of the payee to add.\r\n     * @param shares_ The number of shares owned by the payee.\r\n     */\r\n    function _addPayee(address account, uint256 shares_) private {\r\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\r\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\r\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\r\n\r\n        _payees.push(account);\r\n        _shares[account] = shares_;\r\n        _totalShares = _totalShares + shares_;\r\n        emit PayeeAdded(account, shares_);\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: d:\\repos\\NFTurbo\\contracts\\emptybunnies\\emptybunnies_royalties.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\n//\r\n//                               *     (               )                   )     )  (         (\r\n//                             (  `    )\\ )  *   )  ( /(     (          ( /(  ( /(  )\\ )      )\\ )\r\n//                        (    )\\))(  (()/(` )  /(  )\\())  ( )\\     (   )\\()) )\\())(()/( (   (()/(\r\n//                        )\\  ((_)()\\  /(_))( )(_))((_)\\   )((_)    )\\ ((_)\\ ((_)\\  /(_)))\\   /(_))\r\n//                       ((_) (_()((_)(_)) (_(_())__ ((_) ((_)_  _ ((_) _((_) _((_)(_)) ((_) (_))\r\n//                       | __||  \\/  || _ \\|_   _|\\ \\ / /  | _ )| | | || \\| || \\| ||_ _|| __|/ __|\r\n//                       | _| | |\\/| ||  _/  | |   \\ V /   | _ \\| |_| || .` || .` | | | | _| \\__ \\\r\n//                       |___)|_(  |_||_|    |_|    |_|    |___/ \\___/ |_|\\_||_|\\_||___||___||___/\r\n//\r\n//                                                   ( /(  )\\ )   *   )\r\n//                                                   )\\())(()/( ` )  /(\r\n//                                                  ((_)\\  /(_)) ( )(_))\r\n//                                                   _((_)(_))_|(_(_())\r\n//                                                  | \\| || |_  |_   _|\r\n//                                                  | .` || __|   | |\r\n//                                                  |_|\\_||_|     |_|\r\n//\r\n//                                               (--Royalties Contract--)\r\n//\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkOOkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxk0KXNWWXOkO00KKKXKOxxxxxxxxxxxxxxxxxxxxoc;cdxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkOKXNNXOdxXWXKK0Okkxx0Kkxxxxxxxxxxxxxxxdoc;,'.,oxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxOKNNKOdc:;oOkdocc:;:lxKX0kxxxxxxxxxxxxdc;,''',''lxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkkkOOOOOOKNNOlc:cc;;cc:ccccokKXXK0XKkxxxxxxxxxdc,'''..''''lxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkkOKKXK0Okxddxxko:ccccc::cccc;,:odolc:cOXkxxxxxxxxo;.'.....''''lxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkOKXXKOxoc;;,'....';:::::ccc::::;;;::cc:ckNXOkxxxxxxd:......''''.,oxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxO00Odc;,''','..',;:cllccc:::clooddooolc:',oOXNX0kxxxxd;......''''':dxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdl:,,,;,'..................'''''''',;::;,,;;;,'...;oOOOxdddd;.....''..'cdxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxxxdl;'...............'''''''''''''''';:c::;;:,...........',,,,;;'.......':oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxxdl;..'''''......'..''''''''''',,,,,;cc:cc::,;:::,''''''''''''''... .....'cdxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxxd:'.'''''''''''''''''''''''''''clc::cc;,;:::::;;c:,,,,,,,''''''''....'''..';lxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxxd;...'''''''''...''''....''''''',cc;;::::''';l:;:c;'''',,,,,''''......'''','.;dxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxxd:................................';;:c:;:::,;ll:;,'''''',,,,,,,''......'''''.;dxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxxxkl..........''.';::cc:'........,clcccccclllllcc:,'........'''''''''...........'lxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxxx00c..'',,'';::;;okOOOko;,''.....,oOOOOOOOOOOOkkkxd;................'''.........:xxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxxk0NXc';:cc;;ccc:;lllxOkl;,'........,dOOOOOOOOOOOOOOl.........''';:,.............;oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxxkKWNx::ccc;;cccc;cl;:xkl,,,..........ckOOOOOOOOOOOOx,.........',,:dkl,.'.......':oxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxxkKWNx:cccc;;:lcc::oodkOo;,,...........,xOOOOOOOOOOOOl...........';,:xOxoo;. ...'cdxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxxk0NNd:cccc;;:cccc;cdxOOx;,;'...........'oOOOOOOOOOOOk:............,;,lkOkd:......':oxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxxx0NNx:cccc;,:cccc:;okOOOl,;,.............lOOOOOOOOOOOk;.............;,;dOOko........;oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxx0NWk::ccc;';ccccc,:xOOOx;,;'.............lOOOOOOOOOOOx;.............';,cOOOkc.......'cxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxxOXWOc:ccc;',ccccc:':kOOOo,;,.............'lOOOOOOOOOOOk:.............';,:xOOOd'......'lxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxxkKWKl:ccc;',:ccccc;.:kOOkc,;'.............'oOOOOOOOOOOOk:..............,;;dOOOdcc:..'.,oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxx0NNd:ccc:,,;cccccc;.ckOOk:,;'.............,xOOOOOOOOOOOOl..............,;;lOOOdo0Ko,'.,oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxxOXWOc:cc:,,;:cccccc;':kOOx:;;..............:kOOOOOOOOOOOOd,.............';;lOOOddXXOdl;:oxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxk0NXo:ccc;;;;ccccccc;,:xOOx:;,.............'oOOOOOOOOOOOOOk:.............';;lOOOoxXKkxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxxOXWk::cc;;;;:ccccccc;,;oOOx:,,.............;xOOOOOOOOOOOOOOo'............';;lOOkoOXOxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxx0NXo:cc:;;;;cccccccc;;;ckOk:,,............'oOOOOOOOOOOOOOOOk:............',,lOOdd00kxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxkKW0c:cc:;:;;cccccccc;;:;oOkc,,'...........ckOOOOOxcoxllkOOOOd,...........',;dOkokKkxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxOXWx:ccc;;:;;cccccccc;:c::xOd;,'..........:xOOOOxo:,ox:,lkOOOOo,..........,,ckOdd0Oxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxx0NNo:cc:;::;:ccccccc:;:cc;ckkl,'.........:xOOOOkc,,;oxc,;oOOOOOo,........',;dOddOOxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxk0WKl:cc:;::;:ccccccc:;:ccc;lkxc''......'ckOOOOOkxdlcdkocokOOOOOOd;.......',okxdkOkxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkKWO::cc:;c:;:ccccccc:;ccccc:lkxc,....':dOOOOOOOOOOOOOOOOOOOOOOOOOkl,....';okxdOOkxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkXWk::cc::c:;:ccccccc::c:;:cc:lxkxolloxkOkxxkOOOOOOOOOOOOOOOOOOkxkOOkdlcldkkxdOOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkXWk:ccc::c:;:ccccccc:::,',:cc;cddodxxkkkkxxkOOOOOOOOOOOOOOOOOOkxxkkkxxdddxddkkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkXWk::cc:cc:;:ccccc:;::,.',;::lOOdc,,:ccc:cdkkOkxkkdxkkkdxkxkkkko:ccc;,;okOkkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkXWO::cccccc;;ccc:,;:;;'.,;;;l0KkkOxl:;::;;cc:lc;cl::loc;c::lc:l:,,;;cd0XKOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxkKWXl:cccccc:;:c:;,',;,';:c:l0XOxxxkOkdl:,,:::::::::::c:::::;::c;,:dOKK0kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxx0NNx:cccccc:,;:::,'''',:c:l0XOxxxxxxkO0klccc:cl;:loloxool;cl::cloOXKOkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxOXW0c:cccc::c::c::;;,,:c:dKXOxxxxxxxxxxdldxo:ldl:clddddoc:odccdxloxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// dxxxxxxxxxxkKWNd:ccc:lOXx:cc::cc;;ckKKkxxxxxxxxxxxk0KOxolc:,,;:::;'',coxO0Okxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxOXWKl;coOXNWXd:cccc::d0KOxxxxxxxxxxxk0NW0oc:::;'',:c:,''.,:coKWN0kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxOXWKOKNXKO0NXxc:clxO0OkxxxxxxxxxxxOXWNOc:cccc:;;;;;,,'',:cc:cOWWKkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxk0KK0Okxxk0XNKO000Oxxxxxxxxxxxxk0NMNxc:c::cc,;llc;;'.'::::c:ckNWXOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxkO00OkxxxxxxxxxxxxxkKWMXd:cc:,,;,':olc;;;,,;:,,:cc:dXWNOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0WWKl:ccc;';;,;,..,:lc;,:c;':ccc:oKWXkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdx0WW0l:ccc;,::,;;'..,cccllc:,;ccc:l0WNOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkKWWKo;;:;;ccc:;,,;:cclccc:;;:;;oKWN0kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxkKWMNd;:;,;cccccccccccccccc;,;::xNWXkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxONWNOc:c;,;:::::::::::::::::,:c:cON0kxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxOKKOxooolcllllllllllllllllllccllcdkxdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n//\r\n//                         ╔═╗╔╦╗╔═╗╦═╗╔╦╗  ╔═╗╔═╗╔╗╔╔╦╗╦═╗╔═╗╔═╗╔╦╗  ╔═╗╦═╗╔═╗╦  ╦╦╔╦╗╔═╗╔╦╗  ╔╗ ╦ ╦\r\n//                         ╚═╗║║║╠═╣╠╦╝ ║   ║  ║ ║║║║ ║ ╠╦╝╠═╣║   ║   ╠═╝╠╦╝║ ║╚╗╔╝║ ║║║╣  ║║  ╠╩╗╚╦╝\r\n//                         ╚═╝╩ ╩╩ ╩╩╚═ ╩   ╚═╝╚═╝╝╚╝ ╩ ╩╚═╩ ╩╚═╝ ╩   ╩  ╩╚═╚═╝ ╚╝ ╩═╩╝╚═╝═╩╝  ╚═╝ ╩ooo\r\n//\r\n//                      ╔╗╔╔═╗╔╦╗╦ ╦╦═╗╔╗ ╔═╗  ╔═╗╦═╗╦ ╦╔═╗╔╦╗╔═╗  ╔═╗╦═╗╔╦╗╦╔═╗╔╦╗╔═╗  ╔═╗╔═╗╔═╗╔╗╔╔═╗╦ ╦\r\n//                      ║║║╠╣  ║ ║ ║╠╦╝╠╩╗║ ║  ║  ╠╦╝╚╦╝╠═╝ ║ ║ ║  ╠═╣╠╦╝ ║ ║╚═╗ ║ ╚═╗  ╠═╣║ ╦║╣ ║║║║  ╚╦╝\r\n//                      ╝╚╝╚   ╩ ╚═╝╩╚═╚═╝╚═╝  ╚═╝╩╚═ ╩ ╩   ╩ ╚═╝  ╩ ╩╩╚═ ╩ ╩╚═╝ ╩ ╚═╝  ╩ ╩╚═╝╚═╝╝╚╝╚═╝ ╩\r\n//\r\n//                                                ╔╗╔╔═╗╔╦╗╦ ╦╦═╗╔╗ ╔═╗   ╦╔═╗\r\n//                                            ─── ║║║╠╣  ║ ║ ║╠╦╝╠╩╗║ ║   ║║ ║ ───\r\n//                                                ╝╚╝╚   ╩ ╚═╝╩╚═╚═╝╚═╝ o ╩╚═╝\r\n\r\npragma solidity 0.8.7;\r\n\r\n////import \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\r\n\r\ncontract EmptyBunniesRoyalties is PaymentSplitter {\r\n    address[] private _team = [\r\n        0x2868A996089EBEe1Ed1D9E56a373398A907c2dA3, //pt\r\n        0x0f97B0Bd7aD496Bc7E0c1d5A6712E9C4796eECb0, //pt\r\n        0x23D4AA98cb89166D8d5043CA6E8d0aE0B7f70495, //frag\r\n        0xa0260d525e841D5FbA772D69860dF59713992E95 //eb / comm\r\n    ];\r\n\r\n    uint256[] private _teamShares = [5, 5, 50, 40];\r\n\r\n    constructor() payable PaymentSplitter(_team, _teamShares) {}\r\n\r\n    fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EmptyBunniesRoyalties","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb13dd9e2d4a6669d1145deb633036839cda3f2d04813dba157f62ad901fa351"}]}