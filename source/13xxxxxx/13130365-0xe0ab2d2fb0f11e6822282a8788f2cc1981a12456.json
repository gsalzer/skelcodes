{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract ConverterFeedLike {\r\n    function getResultWithValidity() virtual external view returns (uint256,bool);\r\n    function updateResult(address) virtual external;\r\n}\r\n\r\ncontract ConverterFeed {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"ConverterFeed/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- General Vars ---\r\n    // Base feed you want to convert into another currency. ie: (RAI/ETH)\r\n    ConverterFeedLike public targetFeed;\r\n    // Feed user for conversion. (i.e: Using the example above and ETH/USD willoutput RAI price in USD)\r\n    ConverterFeedLike public denominationFeed;\r\n    // This is the denominator for computing\r\n    uint256           public converterFeedScalingFactor;\r\n    // Manual flag that can be set by governance and indicates if a result is valid or not\r\n    uint256           public validityFlag;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailedUpdate(address feed, bytes out);\r\n\r\n    constructor(\r\n      address targetFeed_,\r\n      address denominationFeed_,\r\n      uint256 converterFeedScalingFactor_\r\n    ) public {\r\n        require(targetFeed_ != address(0), \"ConverterFeed/null-target-feed\");\r\n        require(denominationFeed_ != address(0), \"ConverterFeed/null-denomination-feed\");\r\n        require(converterFeedScalingFactor_ > 0, \"ConverterFeed/null-scaling-factor\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        targetFeed                    = ConverterFeedLike(targetFeed_);\r\n        denominationFeed              = ConverterFeedLike(denominationFeed_);\r\n        validityFlag                  = 1;\r\n        converterFeedScalingFactor    = converterFeedScalingFactor_;\r\n\r\n        // Emit events\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(bytes32(\"validityFlag\"), 1);\r\n        emit ModifyParameters(bytes32(\"converterFeedScalingFactor\"), converterFeedScalingFactor_);\r\n        emit ModifyParameters(bytes32(\"targetFeed\"), targetFeed_);\r\n        emit ModifyParameters(bytes32(\"denominationFeed\"), denominationFeed_);\r\n    }\r\n\r\n    // --- General Utils --\r\n    function both(bool x, bool y) private pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    /**\r\n    * @notice Modify uint256 parameters\r\n    * @param parameter Name of the parameter to modify\r\n    * @param data New parameter value\r\n    **/\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"validityFlag\") {\r\n          require(either(data == 1, data == 0), \"ConverterFeed/invalid-data\");\r\n          validityFlag = data;\r\n        } else if (parameter == \"scalingFactor\") {\r\n          require(data > 0, \"ConverterFeed/invalid-data\");\r\n          converterFeedScalingFactor = data;\r\n        }\r\n        else revert(\"ConverterFeed/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /**\r\n    * @notice Modify uint256 parameters\r\n    * @param parameter Name of the parameter to modify\r\n    * @param data New parameter value\r\n    **/\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(data != address(0), \"ConverterFeed/invalid-data\");\r\n        if (parameter == \"targetFeed\") {\r\n          targetFeed = ConverterFeedLike(data);\r\n        } else if (parameter == \"denominationFeed\") {\r\n          denominationFeed = ConverterFeedLike(data);\r\n        }\r\n        else revert(\"ConverterFeed/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n\r\n    /**\r\n    * @notice Updates both feeds\r\n    **/\r\n    function updateResult(address feeReceiver) external {\r\n        try targetFeed.updateResult(feeReceiver) {}\r\n        catch (bytes memory out) {\r\n          emit FailedUpdate(address(targetFeed), out);\r\n        }\r\n        try denominationFeed.updateResult(feeReceiver) {}\r\n        catch (bytes memory out) {\r\n          emit FailedUpdate(address(denominationFeed), out);\r\n        }\r\n    }\r\n\r\n    // --- Getters ---\r\n    /**\r\n    * @notice Fetch the latest medianPrice (for maxWindow) or revert if is is null\r\n    **/\r\n    function read() external view returns (uint256) {\r\n        (uint256 value, bool valid) = getResultWithValidity();\r\n        require(valid, \"ConverterFeed/invalid-price-feed\");\r\n        return value;\r\n    }\r\n    /**\r\n    * @notice Fetch the latest medianPrice and whether it is null or not\r\n    **/\r\n    function getResultWithValidity() public view returns (uint256 value, bool valid) {\r\n        (uint256 targetValue, bool targetValid) = targetFeed.getResultWithValidity();\r\n        (uint256 denominationValue, bool denominationValid) = denominationFeed.getResultWithValidity();\r\n        value = multiply(targetValue, denominationValue) / converterFeedScalingFactor;\r\n        valid = both(\r\n            both(targetValid, denominationValid),\r\n            both(validityFlag == 1, value > 0)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetFeed_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"denominationFeed_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"converterFeedScalingFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"out\",\"type\":\"bytes\"}],\"name\":\"FailedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterFeedScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominationFeed\",\"outputs\":[{\"internalType\":\"contract ConverterFeedLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResultWithValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetFeed\",\"outputs\":[{\"internalType\":\"contract ConverterFeedLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validityFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConverterFeed","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007f4b6e6aea7bb35ace1a495640e6134c8ca9eef6000000000000000000000000750a8709d1811ef1ef9384a82e053c744a6241df0000000000000000000000000000000000000000000000000de0b6b3a7640000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f4ff7c07a2a5ab91d717f608333e13ed6fab0eeed150d6a5abac983e163e8a8b"}]}