{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts\\interfaces\\IWitnetRequest.sol\r\n/// @title The Witnet Data Request basic interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequest {\r\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \r\n    /// a well-formed Witnet Data Request using Protocol Buffers.\r\n    function bytecode() external view returns (bytes memory);\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    function hash() external view returns (bytes32);\r\n}\r\n// File: contracts\\libs\\Witnet.sol\r\nlibrary Witnet {\r\n\r\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\r\n    /// @param _bytecode CBOR-encoded RADON.\r\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\r\n        return sha256(_bytecode);\r\n    }\r\n\r\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\r\n    struct Query {\r\n        Request request;\r\n        Response response;\r\n    }\r\n\r\n    /// Possible status of a Witnet query.\r\n    enum QueryStatus {\r\n        Unknown,\r\n        Posted,\r\n        Reported,\r\n        Deleted\r\n    }\r\n\r\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\r\n    struct Request {\r\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\r\n        address requester;      // Address from which the request was posted.\r\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\r\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\r\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\r\n    }\r\n\r\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\r\n    struct Response {\r\n        address reporter;       // Address from which the result was reported.\r\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\r\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\r\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\r\n    }\r\n\r\n    /// Data struct containing the Witnet-provided result to a Data Request.\r\n    struct Result {\r\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\r\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\r\n    }\r\n\r\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\r\n    struct CBOR {\r\n        Buffer buffer;\r\n        uint8 initialByte;\r\n        uint8 majorType;\r\n        uint8 additionalInformation;\r\n        uint64 len;\r\n        uint64 tag;\r\n    }\r\n\r\n    /// Iterable bytes buffer.\r\n    struct Buffer {\r\n        bytes data;\r\n        uint32 cursor;\r\n    }\r\n\r\n    /// Witnet error codes table.\r\n    enum ErrorCodes {\r\n        // 0x00: Unknown error. Something went really bad!\r\n        Unknown,\r\n        // Script format errors\r\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n        SourceScriptNotCBOR,\r\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n        SourceScriptNotArray,\r\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\r\n        SourceScriptNotRADON,\r\n        /// Unallocated\r\n        ScriptFormat0x04,\r\n        ScriptFormat0x05,\r\n        ScriptFormat0x06,\r\n        ScriptFormat0x07,\r\n        ScriptFormat0x08,\r\n        ScriptFormat0x09,\r\n        ScriptFormat0x0A,\r\n        ScriptFormat0x0B,\r\n        ScriptFormat0x0C,\r\n        ScriptFormat0x0D,\r\n        ScriptFormat0x0E,\r\n        ScriptFormat0x0F,\r\n        // Complexity errors\r\n        /// 0x10: The request contains too many sources.\r\n        RequestTooManySources,\r\n        /// 0x11: The script contains too many calls.\r\n        ScriptTooManyCalls,\r\n        /// Unallocated\r\n        Complexity0x12,\r\n        Complexity0x13,\r\n        Complexity0x14,\r\n        Complexity0x15,\r\n        Complexity0x16,\r\n        Complexity0x17,\r\n        Complexity0x18,\r\n        Complexity0x19,\r\n        Complexity0x1A,\r\n        Complexity0x1B,\r\n        Complexity0x1C,\r\n        Complexity0x1D,\r\n        Complexity0x1E,\r\n        Complexity0x1F,\r\n        // Operator errors\r\n        /// 0x20: The operator does not exist.\r\n        UnsupportedOperator,\r\n        /// Unallocated\r\n        Operator0x21,\r\n        Operator0x22,\r\n        Operator0x23,\r\n        Operator0x24,\r\n        Operator0x25,\r\n        Operator0x26,\r\n        Operator0x27,\r\n        Operator0x28,\r\n        Operator0x29,\r\n        Operator0x2A,\r\n        Operator0x2B,\r\n        Operator0x2C,\r\n        Operator0x2D,\r\n        Operator0x2E,\r\n        Operator0x2F,\r\n        // Retrieval-specific errors\r\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n        HTTP,\r\n        /// 0x31: Retrieval of at least one of the sources timed out.\r\n        RetrievalTimeout,\r\n        /// Unallocated\r\n        Retrieval0x32,\r\n        Retrieval0x33,\r\n        Retrieval0x34,\r\n        Retrieval0x35,\r\n        Retrieval0x36,\r\n        Retrieval0x37,\r\n        Retrieval0x38,\r\n        Retrieval0x39,\r\n        Retrieval0x3A,\r\n        Retrieval0x3B,\r\n        Retrieval0x3C,\r\n        Retrieval0x3D,\r\n        Retrieval0x3E,\r\n        Retrieval0x3F,\r\n        // Math errors\r\n        /// 0x40: Math operator caused an underflow.\r\n        Underflow,\r\n        /// 0x41: Math operator caused an overflow.\r\n        Overflow,\r\n        /// 0x42: Tried to divide by zero.\r\n        DivisionByZero,\r\n        /// Unallocated\r\n        Math0x43,\r\n        Math0x44,\r\n        Math0x45,\r\n        Math0x46,\r\n        Math0x47,\r\n        Math0x48,\r\n        Math0x49,\r\n        Math0x4A,\r\n        Math0x4B,\r\n        Math0x4C,\r\n        Math0x4D,\r\n        Math0x4E,\r\n        Math0x4F,\r\n        // Other errors\r\n        /// 0x50: Received zero reveals\r\n        NoReveals,\r\n        /// 0x51: Insufficient consensus in tally precondition clause\r\n        InsufficientConsensus,\r\n        /// 0x52: Received zero commits\r\n        InsufficientCommits,\r\n        /// 0x53: Generic error during tally execution\r\n        TallyExecution,\r\n        /// Unallocated\r\n        OtherError0x54,\r\n        OtherError0x55,\r\n        OtherError0x56,\r\n        OtherError0x57,\r\n        OtherError0x58,\r\n        OtherError0x59,\r\n        OtherError0x5A,\r\n        OtherError0x5B,\r\n        OtherError0x5C,\r\n        OtherError0x5D,\r\n        OtherError0x5E,\r\n        OtherError0x5F,\r\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n        MalformedReveal,\r\n        /// Unallocated\r\n        OtherError0x61,\r\n        OtherError0x62,\r\n        OtherError0x63,\r\n        OtherError0x64,\r\n        OtherError0x65,\r\n        OtherError0x66,\r\n        OtherError0x67,\r\n        OtherError0x68,\r\n        OtherError0x69,\r\n        OtherError0x6A,\r\n        OtherError0x6B,\r\n        OtherError0x6C,\r\n        OtherError0x6D,\r\n        OtherError0x6E,\r\n        OtherError0x6F,\r\n        // Access errors\r\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n        ArrayIndexOutOfBounds,\r\n        /// 0x71: Tried to access a value from a map using a key that does not exist\r\n        MapKeyNotFound,\r\n        /// Unallocated\r\n        OtherError0x72,\r\n        OtherError0x73,\r\n        OtherError0x74,\r\n        OtherError0x75,\r\n        OtherError0x76,\r\n        OtherError0x77,\r\n        OtherError0x78,\r\n        OtherError0x79,\r\n        OtherError0x7A,\r\n        OtherError0x7B,\r\n        OtherError0x7C,\r\n        OtherError0x7D,\r\n        OtherError0x7E,\r\n        OtherError0x7F,\r\n        OtherError0x80,\r\n        OtherError0x81,\r\n        OtherError0x82,\r\n        OtherError0x83,\r\n        OtherError0x84,\r\n        OtherError0x85,\r\n        OtherError0x86,\r\n        OtherError0x87,\r\n        OtherError0x88,\r\n        OtherError0x89,\r\n        OtherError0x8A,\r\n        OtherError0x8B,\r\n        OtherError0x8C,\r\n        OtherError0x8D,\r\n        OtherError0x8E,\r\n        OtherError0x8F,\r\n        OtherError0x90,\r\n        OtherError0x91,\r\n        OtherError0x92,\r\n        OtherError0x93,\r\n        OtherError0x94,\r\n        OtherError0x95,\r\n        OtherError0x96,\r\n        OtherError0x97,\r\n        OtherError0x98,\r\n        OtherError0x99,\r\n        OtherError0x9A,\r\n        OtherError0x9B,\r\n        OtherError0x9C,\r\n        OtherError0x9D,\r\n        OtherError0x9E,\r\n        OtherError0x9F,\r\n        OtherError0xA0,\r\n        OtherError0xA1,\r\n        OtherError0xA2,\r\n        OtherError0xA3,\r\n        OtherError0xA4,\r\n        OtherError0xA5,\r\n        OtherError0xA6,\r\n        OtherError0xA7,\r\n        OtherError0xA8,\r\n        OtherError0xA9,\r\n        OtherError0xAA,\r\n        OtherError0xAB,\r\n        OtherError0xAC,\r\n        OtherError0xAD,\r\n        OtherError0xAE,\r\n        OtherError0xAF,\r\n        OtherError0xB0,\r\n        OtherError0xB1,\r\n        OtherError0xB2,\r\n        OtherError0xB3,\r\n        OtherError0xB4,\r\n        OtherError0xB5,\r\n        OtherError0xB6,\r\n        OtherError0xB7,\r\n        OtherError0xB8,\r\n        OtherError0xB9,\r\n        OtherError0xBA,\r\n        OtherError0xBB,\r\n        OtherError0xBC,\r\n        OtherError0xBD,\r\n        OtherError0xBE,\r\n        OtherError0xBF,\r\n        OtherError0xC0,\r\n        OtherError0xC1,\r\n        OtherError0xC2,\r\n        OtherError0xC3,\r\n        OtherError0xC4,\r\n        OtherError0xC5,\r\n        OtherError0xC6,\r\n        OtherError0xC7,\r\n        OtherError0xC8,\r\n        OtherError0xC9,\r\n        OtherError0xCA,\r\n        OtherError0xCB,\r\n        OtherError0xCC,\r\n        OtherError0xCD,\r\n        OtherError0xCE,\r\n        OtherError0xCF,\r\n        OtherError0xD0,\r\n        OtherError0xD1,\r\n        OtherError0xD2,\r\n        OtherError0xD3,\r\n        OtherError0xD4,\r\n        OtherError0xD5,\r\n        OtherError0xD6,\r\n        OtherError0xD7,\r\n        OtherError0xD8,\r\n        OtherError0xD9,\r\n        OtherError0xDA,\r\n        OtherError0xDB,\r\n        OtherError0xDC,\r\n        OtherError0xDD,\r\n        OtherError0xDE,\r\n        OtherError0xDF,\r\n        // Bridge errors: errors that only belong in inter-client communication\r\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n        /// are never included into blocks and therefore never get a Tally in response.\r\n        BridgeMalformedRequest,\r\n        /// 0xE1: Witnesses exceeds 100\r\n        BridgePoorIncentives,\r\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n        BridgeOversizedResult,\r\n        /// Unallocated\r\n        OtherError0xE3,\r\n        OtherError0xE4,\r\n        OtherError0xE5,\r\n        OtherError0xE6,\r\n        OtherError0xE7,\r\n        OtherError0xE8,\r\n        OtherError0xE9,\r\n        OtherError0xEA,\r\n        OtherError0xEB,\r\n        OtherError0xEC,\r\n        OtherError0xED,\r\n        OtherError0xEE,\r\n        OtherError0xEF,\r\n        OtherError0xF0,\r\n        OtherError0xF1,\r\n        OtherError0xF2,\r\n        OtherError0xF3,\r\n        OtherError0xF4,\r\n        OtherError0xF5,\r\n        OtherError0xF6,\r\n        OtherError0xF7,\r\n        OtherError0xF8,\r\n        OtherError0xF9,\r\n        OtherError0xFA,\r\n        OtherError0xFB,\r\n        OtherError0xFC,\r\n        OtherError0xFD,\r\n        OtherError0xFE,\r\n        // This should not exist:\r\n        /// 0xFF: Some tally error is not intercepted but should\r\n        UnhandledIntercept\r\n    }\r\n}\r\n// File: contracts\\libs\\WitnetBuffer.sol\r\n/// @title A convenient wrapper around the `bytes memory` type that exposes a buffer-like interface\r\n/// @notice The buffer has an inner cursor that tracks the final offset of every read, i.e. any subsequent read will\r\n/// start with the byte that goes right after the last one in the previous read.\r\n/// @dev `uint32` is used here for `cursor` because `uint16` would only enable seeking up to 8KB, which could in some\r\n/// theoretical use cases be exceeded. Conversely, `uint32` supports up to 512MB, which cannot credibly be exceeded.\r\n/// @author The Witnet Foundation.\r\nlibrary WitnetBuffer {\r\n\r\n  // Ensures we access an existing index in an array\r\n  modifier notOutOfBounds(uint32 index, uint256 length) {\r\n    require(index < length, \"Tried to read from a consumed Buffer (must rewind it first)\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Read and consume a certain amount of bytes from the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _length How many bytes to read and consume from the buffer.\r\n  /// @return A `bytes memory` containing the first `_length` bytes from the buffer, counting from the cursor position.\r\n  function read(Witnet.Buffer memory _buffer, uint32 _length) internal pure returns (bytes memory) {\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_buffer.cursor + _length <= _buffer.data.length, \"Not enough bytes in buffer when reading\");\r\n\r\n    // Create a new `bytes memory destination` value\r\n    bytes memory destination = new bytes(_length);\r\n\r\n    // Early return in case that bytes length is 0\r\n    if (_length != 0) {\r\n      bytes memory source = _buffer.data;\r\n      uint32 offset = _buffer.cursor;\r\n\r\n      // Get raw pointers for source and destination\r\n      uint sourcePointer;\r\n      uint destinationPointer;\r\n      assembly {\r\n        sourcePointer := add(add(source, 32), offset)\r\n        destinationPointer := add(destination, 32)\r\n      }\r\n      // Copy `_length` bytes from source to destination\r\n      memcpy(destinationPointer, sourcePointer, uint(_length));\r\n\r\n      // Move the cursor forward by `_length` bytes\r\n      seek(_buffer, _length, true);\r\n    }\r\n    return destination;\r\n  }\r\n\r\n  /// @notice Read and consume the next byte from the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The next byte in the buffer counting from the cursor position.\r\n  function next(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (bytes1) {\r\n    // Return the byte at the position marked by the cursor and advance the cursor all at once\r\n    return _buffer.data[_buffer.cursor++];\r\n  }\r\n\r\n  /// @notice Move the inner cursor of the buffer to a relative or absolute position.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _offset How many bytes to move the cursor forward.\r\n  /// @param _relative Whether to count `_offset` from the last position of the cursor (`true`) or the beginning of the\r\n  /// buffer (`true`).\r\n  /// @return The final position of the cursor (will equal `_offset` if `_relative` is `false`).\r\n  // solium-disable-next-line security/no-assign-params\r\n  function seek(Witnet.Buffer memory _buffer, uint32 _offset, bool _relative) internal pure returns (uint32) {\r\n    // Deal with relative offsets\r\n    if (_relative) {\r\n      require(_offset + _buffer.cursor > _offset, \"Integer overflow when seeking\");\r\n      _offset += _buffer.cursor;\r\n    }\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_offset <= _buffer.data.length, \"Not enough bytes in buffer when seeking\");\r\n    _buffer.cursor = _offset;\r\n    return _buffer.cursor;\r\n  }\r\n\r\n  /// @notice Move the inner cursor a number of bytes forward.\r\n  /// @dev This is a simple wrapper around the relative offset case of `seek()`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _relativeOffset How many bytes to move the cursor forward.\r\n  /// @return The final position of the cursor.\r\n  function seek(Witnet.Buffer memory _buffer, uint32 _relativeOffset) internal pure returns (uint32) {\r\n    return seek(_buffer, _relativeOffset, true);\r\n  }\r\n\r\n  /// @notice Move the inner cursor back to the first byte in the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  function rewind(Witnet.Buffer memory _buffer) internal pure {\r\n    _buffer.cursor = 0;\r\n  }\r\n\r\n  /// @notice Read and consume the next byte from the buffer as an `uint8`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint8` value of the next byte in the buffer counting from the cursor position.\r\n  function readUint8(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (uint8) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint8 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 1), offset))\r\n    }\r\n    _buffer.cursor++;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 2 bytes from the buffer as an `uint16`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint16` value of the next 2 bytes in the buffer counting from the cursor position.\r\n  function readUint16(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 1, _buffer.data.length) returns (uint16) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint16 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 2), offset))\r\n    }\r\n    _buffer.cursor += 2;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 4 bytes from the buffer as an `uint32`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  function readUint32(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 3, _buffer.data.length) returns (uint32) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint32 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 4), offset))\r\n    }\r\n    _buffer.cursor += 4;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 8 bytes from the buffer as an `uint64`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint64` value of the next 8 bytes in the buffer counting from the cursor position.\r\n  function readUint64(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 7, _buffer.data.length) returns (uint64) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint64 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 8), offset))\r\n    }\r\n    _buffer.cursor += 8;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 16 bytes from the buffer as an `uint128`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint128` value of the next 16 bytes in the buffer counting from the cursor position.\r\n  function readUint128(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 15, _buffer.data.length) returns (uint128) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint128 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 16), offset))\r\n    }\r\n    _buffer.cursor += 16;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 32 bytes from the buffer as an `uint256`.\r\n  /// @return The `uint256` value of the next 32 bytes in the buffer counting from the cursor position.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  function readUint256(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 31, _buffer.data.length) returns (uint256) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint256 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 32), offset))\r\n    }\r\n    _buffer.cursor += 32;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 2 bytes from the buffer as an IEEE 754-2008 floating point number enclosed in an\r\n  /// `int32`.\r\n  /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n  /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `float16`\r\n  /// use cases. In other words, the integer output of this method is 10,000 times the actual value. The input bytes are\r\n  /// expected to follow the 16-bit base-2 format (a.k.a. `binary16`) in the IEEE 754-2008 standard.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  function readFloat16(Witnet.Buffer memory _buffer) internal pure returns (int32) {\r\n    uint32 bytesValue = readUint16(_buffer);\r\n    // Get bit at position 0\r\n    uint32 sign = bytesValue & 0x8000;\r\n    // Get bits 1 to 5, then normalize to the [-14, 15] range so as to counterweight the IEEE 754 exponent bias\r\n    int32 exponent = (int32(bytesValue & 0x7c00) >> 10) - 15;\r\n    // Get bits 6 to 15\r\n    int32 significand = int32(bytesValue & 0x03ff);\r\n\r\n    // Add 1024 to the fraction if the exponent is 0\r\n    if (exponent == 15) {\r\n      significand |= 0x400;\r\n    }\r\n\r\n    // Compute `2 ^ exponent · (1 + fraction / 1024)`\r\n    int32 result = 0;\r\n    if (exponent >= 0) {\r\n      result = int32((int256(1 << uint256(int256(exponent))) * 10000 * int256(uint256(int256(significand)) | 0x400)) >> 10);\r\n    } else {\r\n      result = int32(((int256(uint256(int256(significand)) | 0x400) * 10000) / int256(1 << uint256(int256(- exponent)))) >> 10);\r\n    }\r\n\r\n    // Make the result negative if the sign bit is not 0\r\n    if (sign != 0) {\r\n      result *= - 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /// @notice Copy bytes from one memory address into another.\r\n  /// @dev This function was borrowed from Nick Johnson's `solidity-stringutils` lib, and reproduced here under the terms\r\n  /// of [Apache License 2.0](https://github.com/Arachnid/solidity-stringutils/blob/master/LICENSE).\r\n  /// @param _dest Address of the destination memory.\r\n  /// @param _src Address to the source memory.\r\n  /// @param _len How many bytes to copy.\r\n  // solium-disable-next-line security/no-assign-params\r\n  function memcpy(uint _dest, uint _src, uint _len) private pure {\r\n    require(_len > 0, \"Cannot copy 0 bytes\");\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; _len >= 32; _len -= 32) {\r\n      assembly {\r\n        mstore(_dest, mload(_src))\r\n      }\r\n      _dest += 32;\r\n      _src += 32;\r\n    }\r\n    if (_len > 0) {\r\n      // Copy remaining bytes\r\n      uint mask = 256 ** (32 - _len) - 1;\r\n      assembly {\r\n        let srcpart := and(mload(_src), not(mask))\r\n        let destpart := and(mload(_dest), mask)\r\n        mstore(_dest, or(destpart, srcpart))\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n// File: contracts\\libs\\WitnetDecoderLib.sol\r\n/// @title A minimalistic implementation of “RFC 7049 Concise Binary Object Representation”\r\n/// @notice This library leverages a buffer-like structure for step-by-step decoding of bytes so as to minimize\r\n/// the gas cost of decoding them into a useful native type.\r\n/// @dev Most of the logic has been borrowed from Patrick Gansterer’s cbor.js library: https://github.com/paroga/cbor-js\r\n/// @author The Witnet Foundation.\r\n/// \r\n/// TODO: add support for Array (majorType = 4)\r\n/// TODO: add support for Map (majorType = 5)\r\n/// TODO: add support for Float32 (majorType = 7, additionalInformation = 26)\r\n/// TODO: add support for Float64 (majorType = 7, additionalInformation = 27) \r\n\r\nlibrary WitnetDecoderLib {\r\n\r\n  using WitnetBuffer for Witnet.Buffer;\r\n\r\n  uint32 constant internal _UINT32_MAX = type(uint32).max;\r\n  uint64 constant internal _UINT64_MAX = type(uint64).max;\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `bool` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `bool` value.\r\n  function decodeBool(Witnet.CBOR memory _cborValue) public pure returns(bool) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(_cborValue.majorType == 7, \"Tried to read a `bool` value from a `Witnet.CBOR` with majorType != 7\");\r\n    if (_cborValue.len == 20) {\r\n      return false;\r\n    } else if (_cborValue.len == 21) {\r\n      return true;\r\n    } else {\r\n      revert(\"Tried to read `bool` from a `Witnet.CBOR` with len different than 20 or 21\");\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `bytes` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `bytes` value.   \r\n  function decodeBytes(Witnet.CBOR memory _cborValue) public pure returns(bytes memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == _UINT32_MAX) {\r\n      bytes memory bytesData;\r\n\r\n      // These checks look repetitive but the equivalent loop would be more expensive.\r\n      uint32 itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n      if (itemLength < _UINT32_MAX) {\r\n        bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n        if (itemLength < _UINT32_MAX) {\r\n          bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        }\r\n      }\r\n      return bytesData;\r\n    } else {\r\n      return _cborValue.buffer.read(uint32(_cborValue.len));\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a `fixed16` value.\r\n  /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n  /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`\r\n  /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128` value.\r\n  function decodeFixed16(Witnet.CBOR memory _cborValue) public pure returns(int32) {\r\n    require(_cborValue.majorType == 7, \"Tried to read a `fixed` value from a `WT.CBOR` with majorType != 7\");\r\n    require(_cborValue.additionalInformation == 25, \"Tried to read `fixed16` from a `WT.CBOR` with additionalInformation != 25\");\r\n    return _cborValue.buffer.readFloat16();\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128[]` value whose inner values follow the same convention.\r\n  /// as explained in `decodeFixed16`.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128[]` value.\r\n  function decodeFixed16Array(Witnet.CBOR memory _cborValue) external pure returns(int32[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int32[] memory array = new int32[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeFixed16(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128` value.\r\n  function decodeInt128(Witnet.CBOR memory _cborValue) public pure returns(int128) {\r\n    if (_cborValue.majorType == 1) {\r\n      uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n      return int128(-1) - int128(uint128(length));\r\n    } else if (_cborValue.majorType == 0) {\r\n      // Any `uint64` can be safely casted to `int128`, so this method supports majorType 1 as well so as to have offer\r\n      // a uniform API for positive and negative numbers\r\n      return int128(uint128(decodeUint64(_cborValue)));\r\n    }\r\n    revert(\"Tried to read `int128` from a `Witnet.CBOR` with majorType not 0 or 1\");\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128[]` value.\r\n  function decodeInt128Array(Witnet.CBOR memory _cborValue) external pure returns(int128[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int128[] memory array = new int128[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeInt128(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `string` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `string` value.\r\n  function decodeString(Witnet.CBOR memory _cborValue) public pure returns(string memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == _UINT64_MAX) {\r\n      bytes memory textData;\r\n      bool done;\r\n      while (!done) {\r\n        uint64 itemLength = readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType);\r\n        if (itemLength < _UINT64_MAX) {\r\n          textData = abi.encodePacked(textData, readText(_cborValue.buffer, itemLength / 4));\r\n        } else {\r\n          done = true;\r\n        }\r\n      }\r\n      return string(textData);\r\n    } else {\r\n      return string(readText(_cborValue.buffer, _cborValue.len));\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `string[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `string[]` value.\r\n  function decodeStringArray(Witnet.CBOR memory _cborValue) external pure returns(string[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `string[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    string[] memory array = new string[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeString(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `uint64` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `uint64` value.\r\n  function decodeUint64(Witnet.CBOR memory _cborValue) public pure returns(uint64) {\r\n    require(_cborValue.majorType == 0, \"Tried to read `uint64` from a `Witnet.CBOR` with majorType != 0\");\r\n    return readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `uint64[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `uint64[]` value.\r\n  function decodeUint64Array(Witnet.CBOR memory _cborValue) external pure returns(uint64[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `uint64[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    uint64[] memory array = new uint64[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeUint64(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a Witnet.CBOR structure from raw bytes.\r\n  /// @dev This is the main factory for Witnet.CBOR instances, which can be later decoded into native EVM types.\r\n  /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n  /// @return A `Witnet.CBOR` instance containing a partially decoded value.\r\n  function valueFromBytes(bytes memory _cborBytes) external pure returns(Witnet.CBOR memory) {\r\n    Witnet.Buffer memory buffer = Witnet.Buffer(_cborBytes, 0);\r\n\r\n    return valueFromBuffer(buffer);\r\n  }\r\n\r\n  /// @notice Decode a Witnet.CBOR structure from raw bytes.\r\n  /// @dev This is an alternate factory for Witnet.CBOR instances, which can be later decoded into native EVM types.\r\n  /// @param _buffer A Buffer structure representing a CBOR-encoded value.\r\n  /// @return A `Witnet.CBOR` instance containing a partially decoded value.\r\n  function valueFromBuffer(Witnet.Buffer memory _buffer) public pure returns(Witnet.CBOR memory) {\r\n    require(_buffer.data.length > 0, \"Found empty buffer when parsing CBOR value\");\r\n\r\n    uint8 initialByte;\r\n    uint8 majorType = 255;\r\n    uint8 additionalInformation;\r\n    uint64 tag = _UINT64_MAX;\r\n\r\n    bool isTagged = true;\r\n    while (isTagged) {\r\n      // Extract basic CBOR properties from input bytes\r\n      initialByte = _buffer.readUint8();\r\n      majorType = initialByte >> 5;\r\n      additionalInformation = initialByte & 0x1f;\r\n\r\n      // Early CBOR tag parsing.\r\n      if (majorType == 6) {\r\n        tag = readLength(_buffer, additionalInformation);\r\n      } else {\r\n        isTagged = false;\r\n      }\r\n    }\r\n\r\n    require(majorType <= 7, \"Invalid CBOR major type\");\r\n\r\n    return Witnet.CBOR(\r\n      _buffer,\r\n      initialByte,\r\n      majorType,\r\n      additionalInformation,\r\n      0,\r\n      tag);\r\n  }\r\n\r\n  /// Reads the length of the next CBOR item from a buffer, consuming a different number of bytes depending on the\r\n  /// value of the `additionalInformation` argument.\r\n  function readLength(Witnet.Buffer memory _buffer, uint8 additionalInformation) private pure returns(uint64) {\r\n    if (additionalInformation < 24) {\r\n      return additionalInformation;\r\n    }\r\n    if (additionalInformation == 24) {\r\n      return _buffer.readUint8();\r\n    }\r\n    if (additionalInformation == 25) {\r\n      return _buffer.readUint16();\r\n    }\r\n    if (additionalInformation == 26) {\r\n      return _buffer.readUint32();\r\n    }\r\n    if (additionalInformation == 27) {\r\n      return _buffer.readUint64();\r\n    }\r\n    if (additionalInformation == 31) {\r\n      return _UINT64_MAX;\r\n    }\r\n    revert(\"Invalid length encoding (non-existent additionalInformation value)\");\r\n  }\r\n\r\n  /// Read the length of a CBOR indifinite-length item (arrays, maps, byte strings and text) from a buffer, consuming\r\n  /// as many bytes as specified by the first byte.\r\n  function readIndefiniteStringLength(Witnet.Buffer memory _buffer, uint8 majorType) private pure returns(uint64) {\r\n    uint8 initialByte = _buffer.readUint8();\r\n    if (initialByte == 0xff) {\r\n      return _UINT64_MAX;\r\n    }\r\n    uint64 length = readLength(_buffer, initialByte & 0x1f);\r\n    require(length < _UINT64_MAX && (initialByte >> 5) == majorType, \"Invalid indefinite length\");\r\n    return length;\r\n  }\r\n\r\n  /// Read a text string of a given length from a buffer. Returns a `bytes memory` value for the sake of genericness,\r\n  /// but it can be easily casted into a string with `string(result)`.\r\n  // solium-disable-next-line security/no-assign-params\r\n  function readText(Witnet.Buffer memory _buffer, uint64 _length) private pure returns(bytes memory) {\r\n    bytes memory result;\r\n    for (uint64 index = 0; index < _length; index++) {\r\n      uint8 value = _buffer.readUint8();\r\n      if (value & 0x80 != 0) {\r\n        if (value < 0xe0) {\r\n          value = (value & 0x1f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 1;\r\n        } else if (value < 0xf0) {\r\n          value = (value & 0x0f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 2;\r\n        } else {\r\n          value = (value & 0x0f) << 18 |\r\n            (_buffer.readUint8() & 0x3f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6  |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 3;\r\n        }\r\n      }\r\n      result = abi.encodePacked(result, value);\r\n    }\r\n    return result;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeFixed16\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeFixed16Array\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"\",\"type\":\"int32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeInt128\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeInt128Array\",\"outputs\":[{\"internalType\":\"int128[]\",\"name\":\"\",\"type\":\"int128[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeUint64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"decodeUint64Array\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"_buffer\",\"type\":\"tuple\"}],\"name\":\"valueFromBuffer\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_cborBytes\",\"type\":\"bytes\"}],\"name\":\"valueFromBytes\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"WitnetDecoderLib","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4f6b2d97eb344f1c5e294fbeebeb5776bc6236e452705ee7c2b922190c9e4fde"}]}