{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: payment splitter.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ncontract SPOSPaymentSplitter is Ownable {\r\n\r\n  event PayeeAdded(address account, uint256 shares);\r\n  event PaymentReleased(address to, uint256 amount);\r\n  event PaymentReceived(address from, uint256 amount);\r\n\r\n  uint256 private _totalShares;\r\n  uint256 private _totalReleased;\r\n\r\n  mapping(address => uint256) private _shares;\r\n  mapping(address => uint256) private _released;\r\n  address[] private _payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  constructor(address[] memory payees, uint256[] memory shareAmounts) payable {\r\n    require(payees.length == shareAmounts.length);\r\n    require(payees.length > 0);\r\n\r\n    for (uint256 i = 0; i < payees.length; i++) {\r\n      _addPayee(payees[i], shareAmounts[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev payable fallback\r\n   */\r\n  fallback() external payable {\r\n    emit PaymentReceived(msg.sender, msg.value);\r\n  }\r\n  \r\n  receive() external payable {\r\n    emit PaymentReceived(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @return the total shares of the contract.\r\n   */\r\n  function totalShares() public view returns(uint256) {\r\n    return _totalShares;\r\n  }\r\n\r\n  /**\r\n   * @return the total amount already released.\r\n   */\r\n  function totalReleased() public view returns(uint256) {\r\n    return _totalReleased;\r\n  }\r\n\r\n  /**\r\n   * @return the shares of an account.\r\n   */\r\n  function shares(address account) public view returns(uint256) {\r\n    return _shares[account];\r\n  }\r\n\r\n  /**\r\n   * @return the amount already released to an account.\r\n   */\r\n  function released(address account) public view returns(uint256) {\r\n    return _released[account];\r\n  }\r\n\r\n  /**\r\n   * @return the address of a payee.\r\n   */\r\n  function payee(uint256 index) public view returns(address) {\r\n    return _payees[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Release one of the payee's proportional payment.\r\n   * @param account Whose payments will be released.\r\n   */\r\n  function release(address account) public {\r\n    require(_shares[account] > 0);\r\n\r\n    uint256 totalReceived = address(this).balance + _totalReleased;\r\n    uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\r\n\r\n    require(payment > 0);\r\n\r\n    _released[account] = _released[account] + payment;\r\n    _totalReleased = _totalReleased + payment;\r\n\r\n    payable(account).transfer(payment);\r\n    emit PaymentReleased(account, payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param account The address of the payee to add.\r\n   * @param shares_ The number of shares owned by the payee.\r\n   */\r\n  function _addPayee(address account, uint256 shares_) private {\r\n    require(account != address(0));\r\n    require(shares_ > 0);\r\n    require(_shares[account] == 0);\r\n\r\n    _payees.push(account);\r\n    _shares[account] = shares_;\r\n    _totalShares = _totalShares + shares_;\r\n    emit PayeeAdded(account, shares_);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SPOSPaymentSplitter","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000006868f218ee21d9c0c717495a1ae2f668c4e1840e000000000000000000000000a6d154f5d81565a239d301a41becbb2cf85e95e5000000000000000000000000f049ed4da9e12c6e2a0928fa6c975ebb60c872f300000000000000000000000096a7e4d9796ec600e8b42cd1b0adb71fcf91390b000000000000000000000000c45991cb42b23e7be1f6da1f8958b47a48ebbe1c000000000000000000000000cf145faeae6cb955f107488425c56bbb15cbd65e0000000000000000000000008febca641d8af99b97962b9742e1e307a017de30000000000000000000000000a848e0a67ddbe7c3d62c578cc1a6873af140dfd70000000000000000000000005536d148a86c204377641a7a66844d558118ed72000000000000000000000000eb8180166077d911ce06b97bcdf90060afc4c9e400000000000000000000000068319784de2ec8e0785de5fb8c90239daf29ed86000000000000000000000000b0032435d7f25af56f9bcfc8b0888af7084f273e0000000000000000000000009649e370ee6facc62e1849eab6f4be7a2b5f4a130000000000000000000000005d63310a36bd871441e4bc2c8e63ee3ba74c6ffc000000000000000000000000000000000000000000000000000000000000000eersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c1518210f0c6f3986e7b7bcc6cebc0388b7d44dfa0a3b31502256060a0cbb4e"}]}