{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.7;\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  constructor ()  {\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\ncontract NFTninja is Ownable {\r\n    uint256 private _feeTrader;\r\n    mapping (address => bool) private _isTrader;\r\n    uint256 private _feeNinja;\r\n    mapping (address => bool) private _isNinja;\r\n\r\n    constructor() {\r\n        _feeTrader = 0.10 ether;\r\n        _feeNinja = 1 ether;\r\n        _isTrader[msg.sender] = true;\r\n        _isNinja[msg.sender] = true;\r\n    }\r\n\r\n    function getFeeTrader() external view returns(uint256) {\r\n        return(_feeTrader);\r\n    }\r\n    function isTrader(address account) external view returns(bool) {\r\n        return(_isTrader[account]);\r\n    }\r\n    function getFeeNinja() external view returns(uint256) {\r\n        return(_feeNinja);\r\n    }\r\n    function isNinja(address account) external view returns(bool) {\r\n        return(_isNinja[account]);\r\n    }\r\n    function getOwner() external view returns(address) {\r\n        return(_owner);\r\n    }\r\n\r\n    function setFeeTrader(uint256 feeTrader) external onlyOwner {\r\n        _feeTrader = feeTrader;\r\n    }\r\n    function setFeeNinja(uint256 feeNinja) external onlyOwner {\r\n        _feeNinja = feeNinja;\r\n    }\r\n\r\n    function addTrader() public payable {\r\n        require(!_isTrader[msg.sender], \"User is already a trader\");\r\n        require(msg.value >= _feeTrader, \"ETH amount insufficient\");\r\n        _isTrader[msg.sender] = true;\r\n    }\r\n    function ownerAddTrader(address account) external onlyOwner {\r\n        require(!_isTrader[account], \"User is already a trader\");\r\n        _isTrader[account] = true;\r\n    }\r\n\r\n    function addNinja() public payable {\r\n        require(!_isNinja[msg.sender], \"User is already a ninja\");\r\n        require(msg.value >= _feeNinja, \"ETH amount insufficient\");\r\n        if(!_isTrader[msg.sender]){\r\n          _isTrader[msg.sender] = true;\r\n        }\r\n        _isNinja[msg.sender] = true;\r\n    }\r\n    function ownerAddNinja(address account) external onlyOwner {\r\n        require(!_isNinja[account], \"User is already a ninja\");\r\n        if(!_isTrader[account]){\r\n          _isTrader[account] = true;\r\n        }\r\n        _isNinja[account] = true;\r\n    }\r\n\r\n    function transferOwner(address owner) external onlyOwner {\r\n        _owner = owner;\r\n    }\r\n\r\n    function withdraw(uint256 amount, address receiver) external onlyOwner {\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addNinja\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTrader\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeNinja\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTrader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNinja\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerAddNinja\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerAddTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNinja\",\"type\":\"uint256\"}],\"name\":\"setFeeNinja\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTrader\",\"type\":\"uint256\"}],\"name\":\"setFeeTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTninja","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b920d73c792b2813fb6f39d1c45e738a5383da4c3e10fdf1bb7fc79f68261323"}]}