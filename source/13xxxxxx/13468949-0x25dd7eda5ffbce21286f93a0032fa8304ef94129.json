{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.7;\r\n\r\n//SPDX-License-Identifier: Unlicense\r\n\r\ninterface ISecureVault {\r\n    function withdrawEthToAddress(uint256 _amount, address payable _addressToWithdraw) external;\r\n\r\n    function withdrawTokensToAddress(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _addressToWithdraw\r\n    ) external;\r\n}\r\n\r\ninterface IExchange {\r\n    function calculatePrice(address _token, uint256 _amount) external returns (uint256);\r\n\r\n    function buy(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _addressToSendTokens\r\n    ) external payable;\r\n\r\n    function sell(\r\n        address _token,\r\n        uint256 _amount,\r\n        address payable _addressToSendEther\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface IController {\r\n    function buy(\r\n        address _exchange,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function sell(\r\n        address _exchange,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function transferEth(uint256 _amount, address payable _addressToWithdraw) external;\r\n\r\n    function transferToken(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _addressToWithdraw\r\n    ) external;\r\n\r\n    function getBalance() external returns (int256);\r\n\r\n    function clearBalance() external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract Controller is IController, Initializable, Ownable {\r\n    using SafeMath for uint256;\r\n    event BuyToken(IExchange exchange, address token, uint256 amount, uint256 boughtPrice);\r\n    event SellToken(IExchange exchange, address token, uint256 amount, uint256 soldPrice);\r\n\r\n    address public flashBotCaller;\r\n    ISecureVault public vault;\r\n    int256 public balance;\r\n\r\n    modifier onlyFlashBotCaller() {\r\n        require(msg.sender == flashBotCaller, \"Only the Flash Bot caller can execute this function\");\r\n        _;\r\n    }\r\n\r\n    function initialize(ISecureVault _vault, address _flashBotCaller) public initializer {\r\n        vault = _vault;\r\n        flashBotCaller = _flashBotCaller;\r\n    }\r\n\r\n    function buy(\r\n        address _exchange,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external override onlyFlashBotCaller {\r\n        uint256 priceOfTokens = IExchange(_exchange).calculatePrice(_token, _amount);\r\n        balance = -int256(priceOfTokens);\r\n        vault.withdrawEthToAddress(priceOfTokens, payable(address(this)));\r\n        IExchange(_exchange).buy{value: priceOfTokens}(_token, _amount, address(vault));\r\n        emit BuyToken(IExchange(_exchange), _token, _amount, priceOfTokens);\r\n    }\r\n\r\n    function sell(\r\n        address _exchange,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external override onlyFlashBotCaller {\r\n        vault.withdrawTokensToAddress(_token, _amount, _exchange);\r\n        uint256 sellPrice = IExchange(_exchange).sell(_token, _amount, payable(address(vault)));\r\n        balance += int256(sellPrice);\r\n        emit SellToken(IExchange(_exchange), _token, _amount, sellPrice);\r\n    }\r\n\r\n    function transferEth(uint256 _amount, address payable _addressToWithdraw) external override onlyFlashBotCaller {\r\n        vault.withdrawEthToAddress(_amount, _addressToWithdraw);\r\n    }\r\n\r\n    function transferToken(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _addressToWithdraw\r\n    ) external override onlyFlashBotCaller {\r\n        vault.withdrawTokensToAddress(_token, _amount, _addressToWithdraw);\r\n    }\r\n\r\n    function changeFlashBotCaller(address _flashBotCaller) external onlyOwner {\r\n        flashBotCaller = _flashBotCaller;\r\n    }\r\n\r\n    function changeSecureVault(ISecureVault _vault) external onlyOwner {\r\n        vault = _vault;\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external override onlyFlashBotCaller {\r\n        vault.withdrawEthToAddress(_amount, payable(flashBotCaller));\r\n    }\r\n\r\n    function getBalance() external view override onlyFlashBotCaller returns (int256) {\r\n        return balance;\r\n    }\r\n\r\n    function clearBalance() external override onlyFlashBotCaller {\r\n        _resetBalance();\r\n    }\r\n\r\n    function _resetBalance() private {\r\n        balance = 0;\r\n    }\r\n\r\n    receive() external payable {}\r\n    //transfer(uint256, address)\r\n    //transfer(uint256, string, address)\r\n    //withdraw(uint256)\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtPrice\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldPrice\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashBotCaller\",\"type\":\"address\"}],\"name\":\"changeFlashBotCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISecureVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"changeSecureVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashBotCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISecureVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flashBotCaller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_addressToWithdraw\",\"type\":\"address\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressToWithdraw\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISecureVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Controller","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://57b035f70a1c6a3f1aa46a0013a6858b677c3b873f977f6e1dbdd08144d27f68"}]}