{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"},\"EditionRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary EditionRoyalty {\\n  struct Royalty {\\n    address payable account;\\n    uint256 value;\\n  }\\n\\n  struct Info {\\n    uint256 id;\\n    uint256 totalSupply;\\n    Royalty royalty;\\n  }\\n}\"},\"IAggregatorPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAggregatorPrice {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"},\"IHabitatNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\u0027./EditionRoyalty.sol\\u0027;\\n\\ninterface IHabitatNFT {\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    EditionRoyalty.Royalty memory editionRoyalty,\\n    bytes memory data\\n  ) external;\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n  \\n  function burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n    ) external;\\n}\\n\"},\"PrimaryMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Counters.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ECDSA.sol\\\";\\n\\nimport \\\"./IHabitatNFT.sol\\\";\\nimport \\\"./IAggregatorPrice.sol\\\";\\nimport \\\"./EditionRoyalty.sol\\\";\\n\\ncontract PrimaryMarketplace is ReentrancyGuard, Context {\\n    using ECDSA for bytes32;\\n    using SafeMath for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _itemIds;\\n    IAggregatorPrice private priceFeed;\\n\\n    struct Edition {\\n        uint256 itemId;\\n        address nftContract;\\n        uint256 tokenId;\\n        uint256 totalAmount;\\n        uint256 availableAmount;\\n        address payable seller;\\n        uint256 price;\\n        uint256 royalty;\\n    }\\n\\n    struct Auction {\\n        bool isAuction;\\n        bool transfered;\\n    }\\n\\n    address payable private owner;\\n\\n    mapping(uint256 =\\u003e Edition) private idToEdition;\\n    mapping(uint256 =\\u003e Auction) private itemIdToAuction;\\n    mapping(address =\\u003e bool) private creatorsWhitelist;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == owner, \\\"Only Habitat can execute this\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrCreator() {\\n        require(\\n            creatorsWhitelist[_msgSender()] || _msgSender() == owner,\\n            \\\"Only Habitat and Habitat\\u0027s creators can execute this\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAvailableEdition(uint256 itemId) {\\n        require(\\n            idToEdition[itemId].nftContract != address(0),\\n            \\\"Item doensn\\u0027t exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNonClaimableEdition(uint256 itemId) {\\n        require(idToEdition[itemId].price \\u003e 0, \\\"Can\\u0027t buy this edition\\\");\\n        _;\\n    }\\n\\n    modifier onlyCorrectPriceForEdition(uint256 itemId, uint256 amount) {\\n        uint256 pricePerItemInUSD = idToEdition[itemId].price;\\n        uint256 pricePerItem = pricePerItemInUSD.mul(priceInWEI());\\n        uint256 price = pricePerItem.mul(amount);\\n        require(\\n            msg.value \\u003e= price,\\n            \\\"Please submit the asking price in order to complete the purchase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNonAuction(uint256 itemId) {\\n        require(\\n            itemIdToAuction[itemId].isAuction == false,\\n            \\\"Can\\u0027t buy this edition\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuction(uint256 itemId) {\\n        require(\\n            itemIdToAuction[itemId].isAuction == true,\\n            \\\"This auction edition doesn\\u0027t exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyActiveAuction(uint256 itemId) {\\n        require(\\n            itemIdToAuction[itemId].transfered == false,\\n            \\\"This auction edition is not active\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address priceAggregatorAddress) {\\n        owner = payable(msg.sender);\\n        priceFeed = IAggregatorPrice(priceAggregatorAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function addCreator(address creator) external onlyOwner {\\n        creatorsWhitelist[creator] = true;\\n    }\\n\\n    function addEdition(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 price,\\n        uint256 royalty,\\n        bool isHighestBidAuction\\n    ) external nonReentrant onlyOwnerOrCreator {\\n        _itemIds.increment();\\n        uint256 itemId = _itemIds.current();\\n\\n        EditionRoyalty.Royalty memory editionRoyalty = EditionRoyalty.Royalty(\\n            payable(_msgSender()),\\n            royalty\\n        );\\n\\n        IHabitatNFT(nftContract).mint(\\n            _msgSender(),\\n            tokenId,\\n            amount,\\n            editionRoyalty,\\n            \\\"\\\"\\n        );\\n\\n        idToEdition[itemId] = Edition(\\n            itemId,\\n            nftContract,\\n            tokenId,\\n            amount,\\n            amount,\\n            payable(_msgSender()),\\n            price,\\n            royalty\\n        );\\n\\n        if (isHighestBidAuction == true) {\\n            itemIdToAuction[itemId] = Auction(true, false);\\n        }\\n\\n        emit EditionAdded(\\n            itemId,\\n            nftContract,\\n            tokenId,\\n            amount,\\n            _msgSender(),\\n            price\\n        );\\n    }\\n\\n    function transferEdition(\\n        uint256 itemId,\\n        uint256 amount,\\n        address receiver\\n    )\\n        external\\n        nonReentrant\\n        onlyOwner\\n        onlyAvailableEdition(itemId)\\n        onlyNonAuction(itemId)\\n    {\\n        _safeTransfer(itemId, amount, receiver);\\n        emit EditionTransfered(itemId, receiver);\\n    }\\n\\n    function transferAuction(uint256 itemId, address receiver)\\n        external\\n        nonReentrant\\n        onlyOwner\\n        onlyAuction(itemId)\\n        onlyActiveAuction(itemId)\\n    {\\n        _safeTransfer(itemId, 1, receiver);\\n        itemIdToAuction[itemId].transfered = true;\\n        emit AuctionTransfered(itemId, receiver);\\n    }\\n\\n    function burnToken(uint256 itemId) external onlyOwnerOrCreator {\\n        uint256 amount = idToEdition[itemId].availableAmount;\\n        IHabitatNFT(idToEdition[itemId].nftContract).burn(\\n            idToEdition[itemId].seller,\\n            idToEdition[itemId].tokenId,\\n            amount\\n        );\\n        idToEdition[itemId].availableAmount.sub(amount);\\n        emit BurnedEdition(itemId, amount);\\n    }\\n\\n    function itemPrice(uint256 itemId)\\n        external\\n        view\\n        onlyAvailableEdition(itemId)\\n        returns (uint256)\\n    {\\n        uint256 pricePerItemInUSD = idToEdition[itemId].price;\\n        uint256 pricePerItem = pricePerItemInUSD.mul(priceInWEI());\\n        return pricePerItem;\\n    }\\n\\n    function fetchEditions() external view returns (Edition[] memory) {\\n        uint256 itemCount = _itemIds.current();\\n        uint256 currentIndex = 0;\\n        Edition[] memory items = new Edition[](itemCount);\\n        for (uint256 i = 0; i \\u003c itemCount; i++) {\\n            Edition memory currentItem = idToEdition[i + 1];\\n            items[currentIndex] = currentItem;\\n            currentIndex += 1;\\n        }\\n        return items;\\n    }\\n\\n    function fetchCreatorEditions(address habitatNFTCreatorAddress)\\n        external\\n        view\\n        returns (Edition[] memory)\\n    {\\n        uint256 itemCount = _itemIds.current();\\n        uint256 resultCount = 0;\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 0; i \\u003c itemCount; i++) {\\n            if (idToEdition[i + 1].nftContract == habitatNFTCreatorAddress) {\\n                resultCount += 1;\\n            }\\n        }\\n        Edition[] memory result = new Edition[](resultCount);\\n        for (uint256 i = 0; i \\u003c itemCount; i++) {\\n            if (idToEdition[i + 1].nftContract == habitatNFTCreatorAddress) {\\n                Edition memory currentItem = idToEdition[i + 1];\\n                result[currentIndex] = currentItem;\\n                currentIndex += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function buyEdition(uint256 itemId, uint256 amount)\\n        external\\n        payable\\n        nonReentrant\\n        onlyAvailableEdition(itemId)\\n        onlyNonAuction(itemId)\\n        onlyNonClaimableEdition(itemId)\\n        onlyCorrectPriceForEdition(itemId, amount)\\n    {\\n        _safeTransfer(itemId, amount, _msgSender());\\n        payable(idToEdition[itemId].seller).transfer(msg.value);\\n        emit EditionBought(itemId, _msgSender(), msg.value);\\n    }\\n\\n    function hashTransaction(address account, uint256 price)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 dataHash = keccak256(abi.encodePacked(account, price));\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)\\n            );\\n    }\\n\\n    function recoverSignerAddress(\\n        address account,\\n        uint256 price,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 hash = hashTransaction(account, price);\\n        return hash.recover(signature);\\n    }\\n\\n    function payForBid(\\n        uint256 itemId,\\n        uint256 price,\\n        bytes memory signature\\n    ) external payable nonReentrant onlyActiveAuction(itemId) {\\n        address verifiedSigner = recoverSignerAddress(\\n            _msgSender(),\\n            price,\\n            signature\\n        );\\n\\n        require(verifiedSigner == owner, \\\"You chan\\u0027t buy this\\\");\\n        require(\\n            msg.value \\u003e= price * priceInWEI(),\\n            \\\"Please submit the asking price in order to complete the purchase\\\"\\n        );\\n\\n        _safeTransfer(itemId, 1, _msgSender());\\n        itemIdToAuction[itemId].transfered = true;\\n        payable(idToEdition[itemId].seller).transfer(msg.value);\\n        emit WinnerPaidForBid(itemId, _msgSender(), msg.value);\\n    }\\n\\n    function _safeTransfer(\\n        uint256 itemId,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        uint256 availableAmount = idToEdition[itemId].availableAmount;\\n        require(availableAmount \\u003e 0, \\\"Sold out\\\");\\n        require(availableAmount \\u003e= amount, \\\"Not available quantity\\\");\\n        IHabitatNFT(idToEdition[itemId].nftContract).safeTransferFrom(\\n            idToEdition[itemId].seller,\\n            receiver,\\n            idToEdition[itemId].tokenId,\\n            amount,\\n            \\\"\\\"\\n        );\\n        idToEdition[itemId].availableAmount -= amount;\\n    }\\n\\n    function _priceOfETH() private view returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n        (roundID, startedAt, timeStamp, answeredInRound);\\n        return uint256(price);\\n    }\\n\\n    function priceInWEI() public view returns (uint256) {\\n        return uint256(10**18 / uint256(_priceOfETH() / 10**_decimals()));\\n    }\\n\\n    function _decimals() private view returns (uint256) {\\n        uint256 decimals = uint256(priceFeed.decimals());\\n        return decimals;\\n    }\\n\\n    event EditionAdded(\\n        uint256 indexed itemId,\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        address seller,\\n        uint256 price\\n    );\\n    event EditionBought(\\n        uint256 indexed itemId,\\n        address indexed receiver,\\n        uint256 price\\n    );\\n    event EditionTransfered(uint256 indexed itemId, address indexed receiver);\\n    event AuctionTransfered(uint256 indexed itemId, address indexed receiver);\\n    event BurnedEdition(uint256 indexed itemId, uint256 amount);\\n    event WinnerPaidForBid(\\n        uint256 indexed itemId,\\n        address indexed winner,\\n        uint256 indexed bidAmount\\n    );\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceAggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"AuctionTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EditionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EditionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EditionTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaidForBid\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"addCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHighestBidAuction\",\"type\":\"bool\"}],\"name\":\"addEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEdition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"habitatNFTCreatorAddress\",\"type\":\"address\"}],\"name\":\"fetchCreatorEditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimaryMarketplace.Edition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchEditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimaryMarketplace.Edition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"itemPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"payForBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceInWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PrimaryMarketplace","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4eC3Df9cbd43714FE2740f5E3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67988fcb8ad83605e1b62e1342276d459205e798ca3268ad9e33e16d87f11173"}]}