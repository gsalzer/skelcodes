// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/*
 Crypto MetaValley, just generated by code.
                                                               
 ***    ****             ***        ***                        
 ***    ***              ***        ***                        
 ****   ***              ***        ***                        
  ***  ****              ***        ***                        
  ***  ***               ***        ***                        
  **** ***   *******     ***        ***     *******  ***   *** 
   *** ***  **** ****    ***        ***    **** **** ****  *** 
   *******  **    ***    ***        ***    ***   ***  *** **** 
   ******      ******    ***        ***    *********  *** ***  
   ******    ********    ***        ***    ***        *******  
    *****   ***   ***    ***        ***    ***         ******  
    ****    ***  ****    ***        ***    ***   ***   *****   
    ****    *********    ***        ***     *******     ****   
     ***     ********    ***        ***      *****      ***    
                                                        ***    
                                                      *****

*/

contract MetaValley is ERC721, ERC721Enumerable, Ownable {

    using SafeMath for uint256;

    // only 999 max limited, maybe some will be generated failed
    uint256 public constant maxSupply = 999; 
    // 0.03 ether will be
    uint256 private _price = 0; 
    
    uint256 private _addressMaxMint = 2;
    mapping(address => uint256) private _addressClaimed;

    bool private _saleStarted;
    string public baseURI;

    constructor() ERC721("MetaValley", "MV") {
        _saleStarted = false;
    }

    modifier whenSaleStarted() {
        require(_saleStarted);
        _;
    }

    function mint(uint256 _nbTokens) external payable whenSaleStarted {
        uint256 supply = totalSupply();
        require(_nbTokens > 0, "You cannot mint 0 number!");
        require(supply + _nbTokens <= maxSupply, "Not enough Tokens left.");
        require(_nbTokens * _price <= msg.value, "Inconsistent amount sent!");
        require(_addressClaimed[msg.sender] + _nbTokens <= _addressMaxMint, "You can not mint more than the limit!");
        
        _addressClaimed[msg.sender] += _nbTokens;
        
        for (uint256 i; i < _nbTokens; i++) {
            _safeMint(msg.sender, supply + i);
        }
    }
    
    function gift(uint256 _nbTokens, address _to) external onlyOwner {
        uint256 supply = totalSupply();
        require(supply + _nbTokens <= maxSupply, "Not enough Tokens left.");

        for (uint256 i; i < _nbTokens; i++) {
            _safeMint(_to, supply + i);
        }
    }
    
    function saleStarted() public view returns(bool) {
        return _saleStarted;
    }
    
    function setSaleStarted(bool _isActive) external onlyOwner {
        _saleStarted = _isActive;
    }
    
    function setAddressLimit(uint256 _limit) external onlyOwner {
        _addressMaxMint = _limit;
    }
    
    function setBaseURI(string memory _URI) external onlyOwner {
        baseURI = _URI;
    }

    function _baseURI() internal view override(ERC721) returns(string memory) {
        return baseURI;
    }

    // Make it possible to change the price: just in case
    function setPrice(uint256 _newPrice) external onlyOwner {
        _price = _newPrice;
    }

    function getPrice() public view returns (uint256){
        return _price;
    }

    function withdraw() 
        public 
        onlyOwner 
    {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
