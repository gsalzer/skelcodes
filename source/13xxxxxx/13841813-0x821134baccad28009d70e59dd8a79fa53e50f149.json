{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.4;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\r\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\r\n    function setResolver(bytes32 node, address resolver) external virtual;\r\n    function setOwner(bytes32 node, address owner) external virtual;\r\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\r\n    function setApprovalForAll(address operator, bool approved) external virtual;\r\n    function owner(bytes32 node) external virtual view returns (address);\r\n    function resolver(bytes32 node) external virtual view returns (address);\r\n    function ttl(bytes32 node) external virtual view returns (uint64);\r\n    function recordExists(bytes32 node) external virtual view returns (bool);\r\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\r\n}\r\n\r\n/**\r\n * A registrar that allocates subdomains to the first person to claim them.\r\n */\r\ncontract FIFSRegistrar {\r\n    ENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    modifier only_owner(bytes32 label) {\r\n        address currentOwner = ens.owner(keccak256(abi.encodePacked(rootNode, label)));\r\n        require(currentOwner == address(0x0) || currentOwner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param node The node that this registrar administers.\r\n     */\r\n    constructor(ENS ensAddr, bytes32 node) public {\r\n        ens = ensAddr;\r\n        rootNode = node;\r\n    }\r\n\r\n    /**\r\n     * Register a name, or change the owner of an existing registration.\r\n     * @param label The hash of the label to register.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function register(bytes32 label, address owner) public only_owner(label) {\r\n        ens.setSubnodeOwner(rootNode, label, owner);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FIFSRegistrar","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e74b794ae05e329bb639fee1a079e9d87127db429309f2fc74383addc117f013f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b263f8735ba0656d4188f86bfaa66eb7ebbe22e0b450eaadd12de06b89e7b5f9"}]}