{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/KIA.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract KIA is ERC721Enumerable, Ownable {\r\n    uint256 public constant MAX_KOALAS = 10000;\r\n    uint256 public constant RESERVES = 100;\r\n\r\n    uint256 private _conversionRate = 7;\r\n    uint256 private _maxPerTx = 16; // Set to one higher than actual, to save gas on lte/gte checks.\r\n    uint256 private _price = 50000000000000000; // .05 ETH\r\n    uint256 private _saleTime = 1629757800; // August 23rd @ 6:30 EST\r\n\r\n    // Faciliating the needed functionality for the presale\r\n    mapping(address => bool) addressToPreSaleEntry;\r\n    mapping(address => uint256) addressToPreSaleKoalasMinted;\r\n\r\n    string private _baseTokenURI;\r\n\r\n    constructor(string memory baseURI, address[] memory preSaleWalletAddresses)\r\n        ERC721(\"KIA\", \"KIA\")\r\n    {\r\n        setBaseURI(baseURI);\r\n        for (uint256 i; i < preSaleWalletAddresses.length; i++) {\r\n            addressToPreSaleEntry[preSaleWalletAddresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    modifier preSaleIsOpen() {\r\n        require(\r\n            block.timestamp >= _saleTime - 171900,\r\n            \"The presale has not yet started.\"\r\n        );\r\n        require(\r\n            block.timestamp < _saleTime,\r\n            \"The public sale has already started.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier saleIsOpen() {\r\n        require(block.timestamp >= _saleTime, \"Sale is not yet open.\");\r\n        _;\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI) public onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setSaleTime(uint256 _time) public onlyOwner {\r\n        _saleTime = _time;\r\n    }\r\n\r\n    function getSaleTime() public view returns (uint256) {\r\n        return _saleTime;\r\n    }\r\n\r\n    function setConversionRate(uint256 _val) public onlyOwner {\r\n        _conversionRate = _val;\r\n    }\r\n\r\n    function getConversionRate() public view returns (uint256) {\r\n        return _conversionRate;\r\n    }\r\n\r\n    function setPrice(uint256 _newWEIPrice) public onlyOwner {\r\n        _price = _newWEIPrice;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        return _price;\r\n    }\r\n\r\n    function addWalletToPreSale(address _address) public onlyOwner {\r\n        addressToPreSaleEntry[_address] = true;\r\n    }\r\n\r\n    function isWalletInPreSale(address _address) public view returns (bool) {\r\n        return addressToPreSaleEntry[_address];\r\n    }\r\n\r\n    function preSaleKoalasMinted(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return addressToPreSaleKoalasMinted[_address];\r\n    }\r\n\r\n    function preSaleMint(uint256 _count) public payable preSaleIsOpen {\r\n        uint256 totalSupply = totalSupply();\r\n        require(\r\n            _count <= _conversionRate,\r\n            \"Mint transaction exceeds your available supply.\"\r\n        );\r\n        require(\r\n            addressToPreSaleEntry[msg.sender] == true,\r\n            \"This address is not whitelisted for the presale.\"\r\n        );\r\n        require(\r\n            addressToPreSaleKoalasMinted[msg.sender] + _count <=\r\n                _conversionRate,\r\n            \"Exceeds supply of presale Koalas you can mint.\"\r\n        );\r\n        require(_price * _count <= msg.value, \"Transaction value too low.\");\r\n\r\n        for (uint256 i; i < _count; i++) {\r\n            _safeMint(msg.sender, totalSupply + i);\r\n        }\r\n\r\n        // Keeps track of how many they've minted\r\n        addressToPreSaleKoalasMinted[msg.sender] += _count;\r\n    }\r\n\r\n    function mint(uint256 _count) public payable saleIsOpen {\r\n        uint256 totalSupply = totalSupply();\r\n        require(\r\n            _count < _maxPerTx,\r\n            \"Woah, Nelly. That's way too many Koalas to mint!\"\r\n        );\r\n        require(totalSupply < MAX_KOALAS, \"All Koalas are already minted.\");\r\n        require(\r\n            totalSupply + _count <= MAX_KOALAS,\r\n            \"This amount of Koalas will exceed max supply.\"\r\n        );\r\n        require(_price * _count <= msg.value, \"Transaction value too low.\");\r\n\r\n        for (uint256 i; i < _count; i++) {\r\n            _safeMint(msg.sender, totalSupply + i);\r\n        }\r\n    }\r\n\r\n    function reserveKoalas(uint256 _count) public onlyOwner {\r\n        uint256 totalSupply = totalSupply();\r\n        require(\r\n            block.timestamp < _saleTime - 171900,\r\n            \"Sale has already started.\"\r\n        );\r\n        require(totalSupply + _count <= RESERVES, \"Beyond max limit\");\r\n\r\n        for (uint256 i; i < _count; i++) {\r\n            _safeMint(msg.sender, totalSupply + i);\r\n        }\r\n    }\r\n\r\n    function walletOfOwner(address _owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        }\r\n\r\n        uint256[] memory tokensId = new uint256[](tokenCount);\r\n        for (uint256 i; i < tokenCount; i++) {\r\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n        return tokensId;\r\n    }\r\n\r\n    function withdrawAll() public payable onlyOwner {\r\n        require(payable(msg.sender).send(address(this).balance));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"preSaleWalletAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_KOALAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWalletToPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWalletInPreSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"preSaleKoalasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"preSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"reserveKoalas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWEIPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"KIA","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002e68747470733a2f2f6b6f616c61696e74656c6c6967656e63652e6167656e63792f6170692f6d657461646174612f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d30000000000000000000000000a44c848308db22c59aa537793bec60be075c84300000000000000000000000000d10cf10f38f0d2cf12e6494a63c9cccb9d406f000000000000000000000000012b38ccb3ae97a32cd24088bf9426d4ee5442d300000000000000000000000001c25d1e7f1413509b4e1a733424b97c899fa846000000000000000000000000034bf21afbe50f6804956c69765cc94c0ea6e9000000000000000000000000000372eb65f115f4b79cfcc7f9dc796e4f161cd7f900000000000000000000000004834bbbbaf69d1f67816e4cbca5c891e3b0241d000000000000000000000000052ccb9a85bb05c1c30c0538757ae0487e21fb050000000000000000000000000568169815cb9afc0d60a2fc32fe1bec68245e83000000000000000000000000058f4636435debd9f7c329c4be77d0e1d5f62a7000000000000000000000000006573db40707710d991b2519ca9b5c1a6c5c1efa000000000000000000000000087e14b18e87367a7cc58f04989d749b8a0e71a100000000000000000000000008961517a0e91dbc71c97266c1601a3f566504e500000000000000000000000008c1ac67211b68b0e8d1ddc44771a3ac5d34cbf4000000000000000000000000091999acede7d09637025f3d84c1b911f55effb000000000000000000000000009b4be8825b8e1c65c7d91ee7fb21a1c6d7db0300000000000000000000000000b1c5eeca70c9548813eb56135d9d56d1260527b0000000000000000000000000b964fa63407585876b2217203586fa662fae1d00000000000000000000000000c72d3404dc10d594a7d00086cde7b1c48e4c0d40000000000000000000000000c76c07ba7052cb05bbf29708bc488a1aeff73680000000000000000000000000da6883d1beb1f0d8e1e1a3eb5d369d64d102f680000000000000000000000000df51128328c9112f724012a9aa0751f046a242c0000000000000000000000000e06c4724c70c26fa90020e030b5f6bc7f2b0a460000000000000000000000000ed75d97ddf3794d704de8e7ee9096da0664d1330000000000000000000000000efe42338aa118a920f0539310843919e32eb0650000000000000000000000000f214da206e949aaa1af138cfdc5345bfa45af870000000000000000000000000f8176c597aa2136b54bca3f10e098c668fa2ccb00000000000000000000000010491f92a279883a028e49281265b61040b6b433000000000000000000000000105aba55e51c7496d655d829688e1e2d862e8d280000000000000000000000001087359d80df8a6fd8da26c5987a8e35a6377b6400000000000000000000000010894dc8d769f05e3584c58e64ef1cf2178bf42f00000000000000000000000011c411f661f999c288dfc5278a7170a914c4710a00000000000000000000000011ef20cfeb033a3513d75164175a2e2d68f9c39600000000000000000000000012eaf457f5535913ddefdd3c3b595882c47b98a7000000000000000000000000132fd637c9260f3d74649c6995875473b9dbb0a5000000000000000000000000140a3b9ca50d6378e76f8d85191f873dcc8a0a6e00000000000000000000000015bd815a3f6fb351b06df8b0b82e0be63a52927000000000000000000000000015deb796b90f34b4c3c98995487205b517c78618000000000000000000000000161d3001380d34e4b5a9ea51dc4f3b92fc73f2fe0000000000000000000000001696e1b90c4c0460b78972cc635eb1a1cb7db89d000000000000000000000000174905a1f16f9324e1e4d647f1dda031b95c8b22000000000000000000000000175cbbee12b9c9a726eafb3c6eb7d231a67100b40000000000000000000000001767d77c2c687407466afdbe57a084d26db1f44800000000000000000000000019619fa171688224fef1b0600629b9b29ec288420000000000000000000000001a82a734c55e41f25f19ef8b0883a4c779ce9e200000000000000000000000001b640c003d3f8bba7ad69c9121ccbc94203eb3c40000000000000000000000001b670aa48fda36167accbc4b3e782e6d9bfd98020000000000000000000000001b8dd5c57e0a2f48027c983edfd4a0c2e7a40fe70000000000000000000000001c3046f0cabbe1d82f3b78f3b7747ca12cc271fc0000000000000000000000001c8480a2928002549bcec6a04f71aa07b6130a660000000000000000000000001c859557a94bb6782f9f852028bbe24355aa2a0d0000000000000000000000001cb3fffda02716fab57ba24b289842585f6818230000000000000000000000001d0a10e57bf6e0717623c5a36f555e4a5e5c021c0000000000000000000000001e81fc49f8eff03903f706bb631bdf01003f5d240000000000000000000000001fee466f7a2c714a1fee7d3e1f4326894f87ed0500000000000000000000000020078506e1f25b136ff81ee54ffd517b7ed33a3200000000000000000000000021fc5ffb77f45ed7167fa09b3c65244ccc5e9c9c0000000000000000000000002251901e2973f69af5f5b6faba5cbdc93db2fc4f000000000000000000000000229c3404328e85fd5513d8ba38a0c736d5f211f100000000000000000000000022b72c68ad1d6b50f733986ae499be9da9b7a48900000000000000000000000022e44c61d9daa3dfbe9a592b1a0767d599dd0987000000000000000000000000235c10f1312b957bb990db0e5cf6c561873012a2000000000000000000000000237f07f9d40c4df12a4b3caf56130d83cb0a363a00000000000000000000000023b03bb3e535099598832f02c8035adafb064d17000000000000000000000000252ad4c147630634170971fe0bee72feaf7dfcb3000000000000000000000000255eefd8307b3878be1e620fbd6a0ffa193b1cc500000000000000000000000025fde884481597170e21ceba0e2046590ca6b312000000000000000000000000266e873a0d1e76c63af2f50bc5ca6d25867d4300000000000000000000000000270f5a940dffc76a424c111c8d948858a28024500000000000000000000000002766f8ecf6167720f7f36703467e6ff5aa05b88700000000000000000000000028040944c03fce233c3e6dca4f307e191a73a3ef00000000000000000000000028307f050de1639dccd171243c33a87f28678a400000000000000000000000002856a20e2b169d4b169efba4484132e7fb29037e0000000000000000000000002859cf5dae020a9314f5ff659c8214ff243164c100000000000000000000000028ab643f1da4ee9f3282b70bc6bbd957f9215c3c00000000000000000000000028b5b1803b0c7811bf063c63ed5dea48cf68121000000000000000000000000028bdc7378d6e28e1b7db3578e7553494e609b50600000000000000000000000028eb1c330c7ba43e752d6d734fdd7cf4b54d9f370000000000000000000000002944d48241a36d52623e98812c8bc5aed8e8d6a00000000000000000000000002953d51b45f6e4dd8fe687227baf530691e1bb2a0000000000000000000000002a5cec2f23d62e19f351107c1e563f2ee9ccdcf70000000000000000000000002aa3499cb8de173af7fd5ea3c65c30580caf1ac40000000000000000000000002aba42b4fb232b67265fe37d06f45d8fc86eb7610000000000000000000000002acb86065aeda10fc338f15fcc0fffc5f828f54e0000000000000000000000002b0b54a739a7e7112822501dc49ca589de6af39c0000000000000000000000002b26613ad023b3471925c6991153ab71d27d44580000000000000000000000002b6f63b74660ab40e6d2f73a9adb37c3f08de4db0000000000000000000000002bafc1e12704563e329cbfe8332695d72065ba190000000000000000000000002bba7d62012faaba01c45aec96c742fbfee8ce0e0000000000000000000000002bed5fd1d5c2919c23f5238dc9bc61fc6f7ab6350000000000000000000000002c9addfe2c06030a5bb2aa30a3e091928b5611de0000000000000000000000002cc40cab7ff4a2d221713c96ffb7093f59543aa40000000000000000000000002ce1ae96e47feb776af6658b1e3854f7c8851ae10000000000000000000000002d4eb91cddea03a2a55ccca343147eca764076e20000000000000000000000002d56342ee9ea16711c84cb9d23f23e4a6d3082db0000000000000000000000002d72ca146259f39796187be7e8512880508542f40000000000000000000000002db044957b8944482664d3be0492c455b18bd3af0000000000000000000000002e6ee37e21bfb4a8cc0648008b5d118abd12f95b0000000000000000000000002e9a384ef5dde79ad219ca47974157f5d1c889830000000000000000000000002f489b3255f6dca7ae1e725d9fe47c90a818a0e70000000000000000000000002fecea4aaa2760c9d8ef5920beea789bee6eb5dd000000000000000000000000300b05fb319cb775608de97e1942764f852ab7e200000000000000000000000031082aeb3c6f7df0a1b600133933498e5f6a1b7e00000000000000000000000031e982d2fde760a0780e246e6479608d838db27b00000000000000000000000033b906db87f200505113406c81405d5ce66de6410000000000000000000000003424959e689851133379e6060eb9ecd0e0df7e9f0000000000000000000000003458fd8f327f270b32092cd406ed8ba97405d9f500000000000000000000000034d57dfaec3bd5103c62175e977477dd13936f7100000000000000000000000034f2ac0dd90b768b382e981e50312333a7a1a69d000000000000000000000000359a64e062d08cabf49ee6d6dd1e4aa47d1b62fc000000000000000000000000379cadab8f98bf10121e2e9b7fc02ca802345e8b000000000000000000000000383f95a0c543079aad6d20288eb999eb4b94a592000000000000000000000000384e0f613dfcc82d1c1a53b396e9fd28976462ef000000000000000000000000389458f93e387fc568ca4568c231a64ffd0456d200000000000000000000000038f82e5881835ca39e4ad06a04beaa8f98e6a7d900000000000000000000000039ebfff1c86fb511521538535abda469409cf2060000000000000000000000003b8283e9da7854004abf8dfb9b09ba5a5261f7900000000000000000000000003bac7c5d6f2a01622e40dc42e35bb424123ec1f80000000000000000000000003ca9e32c8500dd200eb272cb98b23fa058500cae0000000000000000000000003caeac7ff83b19f4d14c02cda879c4740b4f03780000000000000000000000003dad3ea8801c87da8bd7a1d9c7f100e239acd08d0000000000000000000000003db1b8097787a2573c2ba1ae20051127975097b80000000000000000000000003dc36bd419ac32566d2a68339e504308ba79284f0000000000000000000000003e6dfcf090a76789835cfa8b5dfc979652ed05130000000000000000000000003f29f65bad535daf128f4f5acf1bfb0dfa2d8b900000000000000000000000004032ab8d5cced1444240c7b973f36d712981fb0000000000000000000000000040671779d3877ef5680d4f59b03988a7c5496970000000000000000000000000413df64315311a3ba09d229189cf6b18ac406b6e00000000000000000000000042701a1a6ec8e3408732d3ed58336cebe42d56f6000000000000000000000000431573685058e5d480fe383dc1fd3b644913c23900000000000000000000000043d5dbdabebefc5ebc040d4328979d51338f5616000000000000000000000000443785ece8fd03c957605bfaf7caf2d7c9a4b23c00000000000000000000000044780f3fa81a7d494d5e0fef95af3a2cbe69658c00000000000000000000000045e6564631809f5531fd008f4829f1c5b0c29a7f00000000000000000000000046c38de2e0020489fcbb5449ad1d8226ef513af000000000000000000000000046e8518eb63ac88ac61f9b00a234f2d31eeabe930000000000000000000000004767d4db19f96fab31e66f6ecd85a4cdc09504bc00000000000000000000000047b349c765751bc36d1a2344d6c38bd70c6b79cb000000000000000000000000481db8e538f86dfd73889089d9408ca52f308ee50000000000000000000000004851ae25872c530829d1677f99c429797beee7360000000000000000000000004a1a30aa847fa4f27e07acf0ad208a2c78f4bbdd0000000000000000000000004a663f9189397d843121e83c274f4ebfea76ade10000000000000000000000004a7c6c73832488b5e2f518f267de65368612d1c70000000000000000000000004acd63bdce72e7f269f5b29a6e03ee2d222a9fc60000000000000000000000004b51c9b697f74c86a2099bfd5f34dc341798d12e0000000000000000000000004b72a4b89313ed03c2f6b6182f6655dc34e0dd330000000000000000000000004beb7e81fbc20476b23a324ed035e538618407da0000000000000000000000004c5776ae1425cdad807a5a4a345c7c3ed8f670010000000000000000000000004c8485cb82f74255d1d0f0f70351c24370e2a7aa0000000000000000000000004ce0f96c459df322df68f393569549d5a54a19290000000000000000000000004e383adfad8a892cfde182eba4aef26d04be16790000000000000000000000004f11dd6b8f36657c378f3e81f85f853fbcbd6e370000000000000000000000004f234ae48179a51e02b0566e885fcc8a1487db020000000000000000000000004f3c114735101ef8edd81760a05bf269d2f048890000000000000000000000004fd0ff2c49671d4fe1927371cf833e8b3b7f44ea000000000000000000000000507f0daa42b215273b8a063b092ff3b6d27767af0000000000000000000000005158b16a1de18451a227a3313d0e4f8102418c6b00000000000000000000000051e518241229a0fa8c87266809e757042cd8bd84000000000000000000000000523ca94b184898c4fd393dbe18883c742677d5eb000000000000000000000000523e801f2e5ee078ade376bae1d62eba702b515b000000000000000000000000539919aed14194f51ba58a4b39ef33085f03d78500000000000000000000000053e0928c6cbab35914a0d17edc4a0c09db9b7c1f000000000000000000000000545adcf5c9e88c19343e16e7ddbf4bf6c3e53bb800000000000000000000000054c9ec594e8996302eec58bb4504d1c8920c04e3000000000000000000000000556e29494ee0401819d7f2f7c6432078811871f000000000000000000000000056147199afbbba3478705f0356e0087ea025aa17000000000000000000000000571d3647c8112ece52f9ee8e15c0e5b35181f2f4000000000000000000000000574d8b6beb835f75c9090e02282df48bd4c2de4f00000000000000000000000058077bc939e7d5464f022a483b53ffe3a0bedcb1000000000000000000000000581a9c5496770f11430180fdd89fe447f22cba990000000000000000000000005821fd6af76b3420412cd3370b452afcefddb030000000000000000000000000587c2fa9802d26628b54e994b73b7d9a0b0724080000000000000000000000005a8ce1fa23ddc0a80510fe12bbabfa02888047510000000000000000000000005ae1bb3c234ce4436133d4c4b6a8665257cc0acb0000000000000000000000005b61e42d41ade278ca722641c5343836af33ace60000000000000000000000005c3e3703e49c092a4712091f98772cd95473a28f0000000000000000000000005e1870f3f6e0603b3cfe26eb4ac9b42ab3ffea030000000000000000000000005e835798876124f5bdea5682a37f15100ee589030000000000000000000000005e92a45225c3925b6180b8672a3cf5dd75bcc4a10000000000000000000000005f3a38bf2cab92a8a347707dd4d9153ba1d821440000000000000000000000005fd77a139ded35e4d9cab8101073a5e3bb5c1a00000000000000000000000000600bd434342a44c488b1925809196204bb2db56100000000000000000000000060876c8f53d217a49a0468a32e769f2a2756038c00000000000000000000000060acf8d95fd365122e56f414b2c13d9dc7742ad700000000000000000000000062e1ab51a839c87dbb6e124c51e714118199cd7e00000000000000000000000063478c70b455133c225b7ead5a89593f67dc39dd00000000000000000000000063898fbe93d7b85be6fef94e32681e287137fd0600000000000000000000000063ab21c9c03573e7db966d6d33c0f3b3dd481e54000000000000000000000000642ed41587a92de1349d4cb02e62967107a7075b00000000000000000000000064786a62ad601a9830ffb48b6b0085b9e8adefd200000000000000000000000064c00aae02e16c7f4ef09e3bac2a5e66c0cc74c500000000000000000000000065140679b45bdacb66b571108c851740bbf13d9600000000000000000000000065172d46bd1543a51d904d1bde6c9b037b55ac59000000000000000000000000665b8d38cd50d83f666e854ef0514483229697320000000000000000000000006683624dad85a46ffd0a6994d25f76f84034863100000000000000000000000067c3097a968db89610825976ec9a5976a966c04400000000000000000000000069451e47b352a37fa15a0899ea60cfc99e3c591500000000000000000000000069983ca837e8895b6bc392c71664cde4ab93bdac0000000000000000000000006a7e7af288d6679a786e7e3df23208950bda2f8d0000000000000000000000006a83cf2fbe719f1a33bd4384ff2570389ffceead0000000000000000000000006b13d274be0483636a5580e3f0d38ea166c7c0650000000000000000000000006bcfb9ee376ccbe2fffd792262cf583528f48f0c0000000000000000000000006c0811f33e278e6ddb0eaeb431a993094b7617e60000000000000000000000006c19c73885199653e8d157bfb85999df2204e4410000000000000000000000006d1e9895665516283b374c16148a8e8d156d7cd10000000000000000000000006d2d42df75d798c6da985078c1d2664890909caa0000000000000000000000006d83eb22808413ea3051af0cb17ca1a6fc9ef97d0000000000000000000000006dc718f33fd6721baa01669f9bf2c89d8e344bf60000000000000000000000006e8ee4656308297ddfece05b32f12ac24b1608e20000000000000000000000006f11e78b1871bdc5c6724134cba9a952b822a7e50000000000000000000000006f245a538ab2952e78d8dff719a28f30d65caffc0000000000000000000000006fc6bb8dfcf17b445e32dcc30538fc2da89d6e990000000000000000000000006fe5c905fcf99c79edf2e01051130fa6378c2cca00000000000000000000000070420b3cbeff378dfb597b6037424033febd9c330000000000000000000000007052280f4230c52a8c21d4d0765c22dec1e95c4d00000000000000000000000073579a6506c4617814c71e7ce70c149fff3c8e8400000000000000000000000074dab8e6e5c4ccad0d05e6565dbb3110f4bfada90000000000000000000000007545e91679a6cc1d744690f136ff5c705c2ddb6700000000000000000000000076291e174532d5f1faf43cc0a849b7de1fe2d65100000000000000000000000076a72e24b4b6fa5bad47d6cc5668c22d5494f21c00000000000000000000000076b1f80d532c7496a95e8b4714df239e299223020000000000000000000000007730dd897420757bfcb388c71244e1d3803ec2cd00000000000000000000000077b47756fa986650a29599fd0046bd25734a0a8300000000000000000000000077c367d7ed5de681f97142479e1ef597f08fd82600000000000000000000000077c4ff1ec5fc3c16a6a2ca8f5ac7561b6016efcf00000000000000000000000079618c411cd6cba60e18a889df289abe0ccd8b6100000000000000000000000079cf2507732df36c6514dcdc1cfb20ae83cf5b5d0000000000000000000000007b15551240bab90895527b12e3074ea56737db7e0000000000000000000000007dcd98a505d7e54ad0cd6e29488c122f870e6dc30000000000000000000000007ff1b64edcebe22365f75b40b84410ca9c8b2bf2000000000000000000000000809023278f4aaf85a330cdf9378960837473b13900000000000000000000000080c3f94b77dd6ff905c131e3466955f87805225a000000000000000000000000812570655808601b9054e8c99d6c922b8766879d000000000000000000000000820b313e1ca73e37adde245fad528b84e0dc3a25000000000000000000000000826c2ae28b65f1edcd24d5fb6999e4f07d148de500000000000000000000000084d87deb81c73a23ff2be2026817503a287fa37100000000000000000000000084eeb01bad234d33cd03d226dc77c7c6bc0334b7000000000000000000000000851f261d6018a6c3788317ed72a21ee86cdb832500000000000000000000000085d61c1858dc6fc1da786a1235c1fcb53ae4531b0000000000000000000000008799f21d47d03c5ee91239f2bf215d8ebb148b2e00000000000000000000000087e2fec43bc4e25d54c2329f293cba87cd9000f100000000000000000000000088815fe6caaee0e987d48c69467d2f35f2bb335e00000000000000000000000088ffb3edf7ba0b31044f7fbb9a9e9d64854f0e150000000000000000000000008987b3a8b60cb626e06e6f4348fb55ff7962374800000000000000000000000089cac0e09432a7b1d9a7294cb68cf81a637f6bcc0000000000000000000000008a362754645c4caf470784e32af25ef7254d8ffa0000000000000000000000008a9816193e1c84ec67db92324d7084192bf9d7110000000000000000000000008beee1a9001f94f77ef2ec5208d721c496625c2f0000000000000000000000008cff45fe10df02143d5ee61b2a22933a491326c50000000000000000000000008d361d3c9fdf8eba265ce453c959e2328e1915fc0000000000000000000000008de7ca9753d5fafcbee95d402c662e1ccc41c5460000000000000000000000008dfaa06afd2703e94a559f3bc7112e4c630956c00000000000000000000000008e1b5525f0995786df57796fbfa584f5d3a8bf660000000000000000000000008e8db32d0c15116ac33ea8d1ae56747b94883e600000000000000000000000009078a0ce313c6ecf06825e50115bb5354723f2c1000000000000000000000000913d5f297095b3e32d1aff25d0f7c6f3e8d61d89000000000000000000000000914cd0594efadba0ddabf56ee2e89317bb6d9b930000000000000000000000009250b2ac03fffb86fd14f6fba9a8dea0dcf18720000000000000000000000000932869078c49e10cef5a96f087aaedcd7c7a9b55000000000000000000000000939f2eb7d2b0ac2865a1ba4056b3c897a52e683800000000000000000000000094577539d81254f11ee203d706d77113ca5f5cd9000000000000000000000000945fc81c9edc66609f54cd19cdb4500713f8a82500000000000000000000000094a465183ff9a939295d3c8cc09b5ca27a63fb9c00000000000000000000000094a5c61eb07ea9930e466b5e14a92aca647d923800000000000000000000000094ef0fef45466ca77da26629e4a249c1155e55440000000000000000000000009570d5e01e7b9bdb33728977f358c97df029f7aa000000000000000000000000965e5987e9a93320de59045761b11851006ed12800000000000000000000000097013995b4866f7279e2bf6dbd7677529b21a76200000000000000000000000097bd7e0335fda79ce030750a7c758227f7456f770000000000000000000000009904f41999042f3d479acd9c0e4722ce0f9fdef30000000000000000000000009968efe1424d802e1f79fd8af8da67b0f08c814d00000000000000000000000099b24bda4c6997361f97ae98efc78bf524554de00000000000000000000000009a44c4ef3c1589e3646a293ffb4e81d8a4fbdcd00000000000000000000000009a8c656fd330c23bec624db0cf98e6a2a086fa0c0000000000000000000000009aab81a1070cf0e25d15c210ab2c66ffce0714700000000000000000000000009b0910f09cf0dd1778730f4cef2eec8d233660c90000000000000000000000009b556d638075a499aa9a7e3edc476498e06d5c450000000000000000000000009b87b23f00d6ae3cef77f5d99cf38a09a5c887d70000000000000000000000009e40b2287506bdf4f849524814e5ebe195e206350000000000000000000000009ee9d35efb7f9a6654e190ddc8cf4ac7acf9300b0000000000000000000000009fd431d36be0df715b0c9582cc2d1ad9b771585a000000000000000000000000a0a2450a404b9a50883964b6cab925a2b460516d000000000000000000000000a23b32c453e29079a826d3b8a3843a9ef9472a21000000000000000000000000a25243821277b10dff17a3276a51a772fd68c9de000000000000000000000000a38b0629be5e2ea38b9907b51e5370dc202fc789000000000000000000000000a3ad532b1bb1cf841079e8f2605551b71170ba05000000000000000000000000a3fcef86cca7a8239b0aea59cb69d0dbe90b4cd8000000000000000000000000a458f9c68d36b3fe1b08ca79c4ddf0b4e27d7e91000000000000000000000000a4eeafb4ef3e94579f307d0d7da1089d5d8971f0000000000000000000000000a531040422f158b6608c21d0b16ab3fdc095693b000000000000000000000000a6e6b2ee95be42af30690ec6e568b010be4ad05e000000000000000000000000a7b5ca022774bd02842932e4358ddcbea0ccaade000000000000000000000000a831ea001e6bb187dfb2ab15bfd0f0cbabaf1e47000000000000000000000000a8331df4b8cba20daa0b0b0612ad4aa6f96c6ff7000000000000000000000000a8b0409e3db5f7cf73a325e58dbec571eb6a552b000000000000000000000000a8ccdcf00933cfeef255f65b39e033c4c6c59b56000000000000000000000000a96d9099a0ded552db285d23de57c476f4581b7f000000000000000000000000ab05f3f15ae1d30329a83d2aa93ef43f1788e18b000000000000000000000000ab268c14e235e65c1c2f4abc673b3b03ae6fbf9e000000000000000000000000ac12c50f76a200b55c91540407f810fa97b2e1b0000000000000000000000000ac57df25f08e67122c2d191546fdf1e027c0127d000000000000000000000000addaf99990b665d8553f08653966fa8995cc1209000000000000000000000000ae1effa0d01febb9490348ca103bb40eeaf86296000000000000000000000000ae607bfda0322ba937710ce0c9a5c879e0ffcbea000000000000000000000000ae8d316e6bde9b35660ea28005f4c748496c55ea000000000000000000000000b0c1384617cf13df72415c557803fe693ddb02a8000000000000000000000000b1bf7ef287f64e4ae14b1712a9e0b72ada2ac5e0000000000000000000000000b2507f0756e2faa4972e761a5331125d78568c1c000000000000000000000000b2ac2f80bf988a6670af324c503322f34bc5c7fd000000000000000000000000b495f14e3809781f528e9da66fe0e0290bfa1f66000000000000000000000000b4e00fe340d19cc31791e2d9119b16d0e5631a3b000000000000000000000000b503c8a636f268e10657dcff0e21fb6cddf804f7000000000000000000000000b583080848d218a461788e6e331e146c8d0585e3000000000000000000000000b6164af04291d3aa4051ee78943618318e3f5cef000000000000000000000000b618b119268b594f1aab218a621a9f7bef27b42f000000000000000000000000b69e9610747520016bde2a89e3407c5992759748000000000000000000000000b85f46a2a0cf8f73cea8ac8542f04b74c04ef969000000000000000000000000b8c63396ccd46c75a0e23f6818c97e5bd67f4ae4000000000000000000000000b916d29516394c58b02ae1a32a9f58b02f643e4c000000000000000000000000b939d8f07a6a79b6f6df134686af7b4529f800db000000000000000000000000ba0b03b7b0be541d3645f689b746f4f7bce93c38000000000000000000000000bbcbb0047a102199bff24c7b95623373178f83d3000000000000000000000000bc66d4ecddf1d633b0058b32c008a22fa321394a000000000000000000000000bcbe9b878543b9d4098497c67f1e95bc44a0b34c000000000000000000000000bd23c75cea773622288304f73f012fb496b8b8e7000000000000000000000000bd41005a610168f5f15dd25719cd15263f50ccde000000000000000000000000bd5ef4bec9ed34a0b306fc31f1284d63921bc150000000000000000000000000bd6a1a26d1ed4bd49f29754683e49f02f27a890c000000000000000000000000be5bf161662f321bc356e646c22dd571d9f7c909000000000000000000000000be79c022d9f2ded8ed3aa445b8791f616e617b77000000000000000000000000bf886208613921d17fa942336a33f5528ea30de9000000000000000000000000bfc69d7a7e47ef6ee8b790010b85d525d9829756000000000000000000000000c1a338cc555137ab2e49e25e304ca667c511d7c8000000000000000000000000c1da309f85ed397a942f9bf212cdd63110e61515000000000000000000000000c2d961bed7c7f5e2b9e82ad7362caed8c0b49df4000000000000000000000000c37b3e7143ef5515eabefe9c7fc2740abc8ddd1f000000000000000000000000c3e0e845e17b9f058bc027d83d16dd7d46a8e9cc000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d000000000000000000000000c47d8fc56e7037ac8d943058a219a03442f0c7e0000000000000000000000000c50f592ea4e02afaeaa6daa84e639b9d2d0ed32f000000000000000000000000c5bd0282073dccae4f5661f2daf49d03c78324f8000000000000000000000000c5db33d39d85cc096d67f4f6b7572edd658b8c2c000000000000000000000000c72c6becab2c1fae45f286bc54878469e8641780000000000000000000000000c761a7a1fe7bd916baa9e38e3a5a219bef93cb17000000000000000000000000c827d9d694a6ab7b4567fc9380662e5c2ee368f6000000000000000000000000c8890f267accbedcfbf5ca8c7b4bac60b6973d73000000000000000000000000c9e2b6d7791c904421cf3d10cfc9e6eb8a258be7000000000000000000000000ca3a56df7deae832841af8d7b983e4c3ab6749e2000000000000000000000000ca857499e7b4c9bb5b4bb892a914bbe004eb273e000000000000000000000000cb0e53aa998be3cfe453b154c1d8496083eabbd2000000000000000000000000cba43058010a7f12d4f2749ac4dc2dc0bbcc5ca0000000000000000000000000cc1b7a424bccb55fcf0f613855f273cfa9b7f42c000000000000000000000000cc7066718a58b2e50f3ccc82e1b27eeeabbe69e3000000000000000000000000cd753b2b8fd9e6f179a85e794631f856bd6370fa000000000000000000000000ce2338975c161ae4ed8f1d5637528b8aabad6705000000000000000000000000ce3d2d83b5b1614c59795852c91f96cc6d2dd320000000000000000000000000ceb992e5e82c718491f776299d4fe775d9214147000000000000000000000000cf1561890d28eae36194e3a589e77b2e98de2f80000000000000000000000000cf34a7fc102cb4c7b9d10986299635d8a853dab9000000000000000000000000cfbc2d6e3565935a67850550b354ea751d4efba5000000000000000000000000d0370f7fe1239914da55b5a3a7198ec6b70fe2ae000000000000000000000000d04cf895a0fdd8259e6accfc228726e5d254d23e000000000000000000000000d06c350939e90795c63e5bec3c981d7a2c9ed6e7000000000000000000000000d083b2e77ff7dac01e9fcd6dd731889409ca9e74000000000000000000000000d0a4918e125963ae3f047344d11436963bad1ef2000000000000000000000000d0e6a7f10b4e002fdf0f22c656656d16f8bd0302000000000000000000000000d18a76f27b7c2f0cdb99ba0bdbbf61bedb133f60000000000000000000000000d1eb5d8cc0dd8f24a23cf0a1bd8fcc3639cf79da000000000000000000000000d35c11f6b2c094ab5e5d143e8b81cbc1715fa92e000000000000000000000000d3b054d0c661b762f764f8e7b973389a41ec868a000000000000000000000000d4543f9f357598e92f45325e6f2f760dc8dbe556000000000000000000000000d56ee5ba5a52e15f309108bdd6247c69b4f624c2000000000000000000000000d6d48727d8835b73f8dc511a5baaf3445a6f65c9000000000000000000000000d717e96bc764e9644e2f09bed46c71e53240748e000000000000000000000000d77d92f3c97b5ce6430560bd1ab298e82ed4e058000000000000000000000000d816815d7b494751b67f1476259f50d6ae98acd7000000000000000000000000d83682d4818d6d044ce613a19f605c2af7ab6729000000000000000000000000d838bcb27dddaf04229339077c6887ea11f8b746000000000000000000000000d997e882f387578e33af9764351fccee8ac2b909000000000000000000000000da32350e688063a07b58e716f3d7ee7e76674db9000000000000000000000000daaf9eb031cba24b1ae41308e91e6402f6a27117000000000000000000000000db24106bfaa506befb1806462332317d638b2d82000000000000000000000000db842c6df048cfd661e8c33a73ba64470bae22aa000000000000000000000000db8ba5a25542cd744482ee5e63d27ade9e7d927c000000000000000000000000dc483ccc88807b4b11392bacd88c085784147a47000000000000000000000000dc64b352884b522c42c7df65dff6fcb001705215000000000000000000000000dd05cf59988c2c2086db9a5f133c80e436a1724a000000000000000000000000dd913f8cc3b66a5b6be595516248c649c688e208000000000000000000000000dda51241e1aa2fd46ab06066e39ad310e1696610000000000000000000000000ddafc3bcde71b1f2f8220068c70555d257b4484b000000000000000000000000de20b0471733026912494effe191c5737ea1a2e6000000000000000000000000df1e3abb229d42a182ad61ce8a63355a8a3eb0f8000000000000000000000000e03af0ab5515b69944c6145b56753d08fc84e9db000000000000000000000000e05adeb7332b8c853892d9504abc662ef869aad8000000000000000000000000e087506511ba6a29612a1b869f5c1caf0d5e8819000000000000000000000000e0f93faf54489c839c17f59bb067118bf22c1f29000000000000000000000000e18a1d42e54dbe84f4942802777d72b37b7d21d5000000000000000000000000e1ed8db33f4f29682b8a12c9af5e8416a092c18a000000000000000000000000e20cff2670a2e10ffc82a9cc2217287f03f30da8000000000000000000000000e239c599eb07b5d4c2a6b4180269b995bf7ab3e1000000000000000000000000e29b6ad7ecb8bbc798c7144dd0e4fdee11917ca8000000000000000000000000e3344898b414a194dda5e8faae4854d8b1ae27a7000000000000000000000000e3d949aa7fd2204835cd19ec3e633c47ef52ffd7000000000000000000000000e495c36e756ba677d5ae8fb868f8c8a41cc51611000000000000000000000000e4bb6f84e5353ce688955d1a17a6a3e3f4cc1106000000000000000000000000e4bdfd2578205a89de369912046c8e2dc0b03099000000000000000000000000e50714a0cb7773f866cbf13fa0c166c75ac7edc7000000000000000000000000e512a710a20bb955dad9596c52acf54efb66d0b8000000000000000000000000e51341e05699ed92c4d0402f4e955862423d3aa8000000000000000000000000e568ca143592df06a7eabfd4d9d563f1289dc607000000000000000000000000e6737b8b6114d58e0f0db6e7fb05d75940bd9a2d000000000000000000000000e68b7db277c1e203d0ecda89c21df738d6719142000000000000000000000000e94227e9d3c2c03a813d6777fa7ab7d4d561a8b0000000000000000000000000ea6f17757172b189342852744d17577408d0f6af000000000000000000000000ea8d9643de809ef963b264f394adc203344e67bb000000000000000000000000ea9952da4c95e6a2f0bcdc96533ef65e27554c21000000000000000000000000eb67a9e45d3d74f3794dd716651d40ef97fc1b51000000000000000000000000ebe7e229783dc3fadfa4dd8b2e3c42e5e9180337000000000000000000000000ec4434b98d3f95a2ac64f0cdbd876855b8ccffbb000000000000000000000000ec879784a66c3359a103e0b645878502ec44ec5d000000000000000000000000ecb4e307d9fc67d03b42fd687316effe38a1f643000000000000000000000000ed721dc63328be92a08b6b7d677e11100c945ea9000000000000000000000000ee1f4b8287665964cae57ecbcb16a3a50aa5bbdf000000000000000000000000ee2cb4cfb8793bd9f225b6a379158e0ceef5c9cf000000000000000000000000ee2defca5d1e0efb62c4195bb88831cb71a2968b000000000000000000000000ee6a9dafc13e3ebb6146fc97b2d37369a81e46cc000000000000000000000000eeca67b79ce17dc9be9fabbc9ae683bb9241bec1000000000000000000000000eeedaf5a12554e49600cac5a3002e6dd4629f4e3000000000000000000000000f07504a96601b35dd702b07ecc57b2b169866f57000000000000000000000000f11d7837b6facfcd468575c2193d789c00d8706c000000000000000000000000f13abd73fbb95effa1064e81951ce8e8b9f85e4e000000000000000000000000f22f98f33ab92bb03d93e2828624d9020566986b000000000000000000000000f2dc8bf24ad10d1a0b03054f96bfc67de07b6d60000000000000000000000000f3a251f6cb52c72ca8f7f41b29530be5c3f538f2000000000000000000000000f4dde6ea673fb810b6f503bf441908bb30b929f8000000000000000000000000f59a24de3145fd57edb409bbbf8a7ac64bb50dde000000000000000000000000f5ca4182a62cb1585a0655abcb671d9efae0d1cd000000000000000000000000f645b44ff5e857d374bedc0b67857b25e38cf4c5000000000000000000000000f752c27e786a309adf56c8d9e5932ea1f4130656000000000000000000000000f89809a6171344bf505a0702476ead62db09dd20000000000000000000000000f95efa9b56a276c4db95b987c42f1a6f27b0b937000000000000000000000000f995231a2e388b7b76f47ae1937c67721d311344000000000000000000000000f99ca71f08aaa464d9d285315103eef13a27d71e000000000000000000000000f9c1b2f3c31b4c5c0ad9ae02de0d7a912987d920000000000000000000000000fa0f8714927504b521dea0b5f3dad9d6fe903148000000000000000000000000fb203c2e544d1d2d889900883b4bd538bc914357000000000000000000000000fb4682abcb4f05daf05294ac906e4b2ec25c3161000000000000000000000000fbf2f43aaf812a9af027fe56471743b98f17bb8e000000000000000000000000fc6ed7164f391d880fc530041b35ac036b5f5f7a000000000000000000000000fc8a641b3a4497791b309d93726a8736b231d71a000000000000000000000000fd4ae32d49c48c62b3b3ceaaf588b7c1315f25b1000000000000000000000000ff6202e15773b4283dfa83d3559e70f293dd20ec000000000000000000000000e76d6f8747a0e41c92567fa634335f97eb1597f40000000000000000000000007e459820cfc9e98ab20331869e54cfe4e2fc53870000000000000000000000007393f09c0c5c1d26d382bb7833d943f314c212c3000000000000000000000000c06057acf5c722e961184d3eb751d93bada7d72c0000000000000000000000003f63edb79398ac75cf2bae41489aa90b34dcb5790000000000000000000000001c9d7559ece44bd86205ef894889effe98fca38b00000000000000000000000096d704a9c0782dda578f6d06290a3cffba7afc78000000000000000000000000eb298223f82ecb1e8b21c9f0ca5e7ba7a98c732e0000000000000000000000004d5c942245a3b04f43aba2e47cc3bdba00297f1b000000000000000000000000e33413bf8928f0a6264608dc14e048515e8ceedd000000000000000000000000923f718a94065f3cb982cc428a5e21fca32aa2040000000000000000000000007cb597141f04d318ffb5752bad4050ba2a2846e50000000000000000000000004da873e0f0dcea7d3bb12a95c5cef991ca9bd8af000000000000000000000000e738052de24cdadb701be3a5f92516b72541f74b000000000000000000000000a6eceab589adeb6ba36718ff4970c31901901a0c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://564623dae5f97bc7617fce262519df8b514e7ac5dc71e0542716a202915ab790"}]}