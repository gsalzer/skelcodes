{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.7;\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\r\n                )\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\ncontract OriginGenie  {\r\n\r\n\r\n // thank you to all the projects and devs that have inspired this!! (openPalette, loot, etc...)\r\n\r\n    constructor(){}\r\n   \r\n\r\n    function generateData(uint _tokenId, string[5] memory _colors, string memory _lat, string memory _long, string memory _dir, string memory _x, string memory _y, string memory _z, string memory _t ) external pure  returns (string memory) {\r\n        \r\n        string[2] memory chunk;\r\n        chunk[0] = _getHead(_colors, _lat, _long); // #aaa #333 #fff #f00 #333\r\n        \r\n        chunk[1] = string(abi.encodePacked(\r\n            _getRects(_colors),   \r\n            text(\"28\", \"172\", \"f\", _dir),\r\n            text(\"241\", \"150\", \"c\",_x),\r\n            text(\"241\", \"170\", \"c\", _y),\r\n            text(\"241\", \"190\", \"c\", _z),\r\n            text(\"24\", \"292\", \"t\", _t),\r\n            '</svg>'\r\n         ));\r\n         \r\n        string memory _image = string(abi.encodePacked(chunk[0], chunk[1]));         \r\n    \r\n        string memory json = Base64.encode(\r\n            bytes(\r\n                string(\r\n                    abi.encodePacked(\r\n                        '{\"name\": \"Origin #',\r\n                        toString(_tokenId),\r\n                        '\", \"description\": \"Origins is an on-chain space & time coordinate generator providing Lat/Long, Compass, Digital (XYZ)',\r\n                        ', and Time (DDD:HH:MM:SS) primitives for use in decentralized applications and games.',\r\n                        '\", \"image\": \"data:image/svg+xml;base64,',\r\n                        Base64.encode(bytes(_image)),\r\n                        '\", \"attributes\" :[',\r\n                         '{\"trait_type\": \"Lat\", \"value\": \"', _lat, '\"},',\r\n                         '{\"trait_type\": \"Long\", \"value\": \"', _long, '\"},',\r\n                         '{\"trait_type\": \"Magnetic\", \"value\": \"', _dir, '\"},',\r\n                         '{\"trait_type\": \"XYZ\", \"value\": \"', _x,', ',_y,', ',_z,', ', '\"},',\r\n                         '{\"trait_type\": \"Time\", \"value\": \"', _t, '\"}',\r\n                        ']}'\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", json));\r\n    \r\n    \r\n    }\r\n\r\n    function _getRects(string[5] memory _colors) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(    \r\n            rect(\"100%\", \"1\",\"0\", \"58\", \"none\", \"e\"),\r\n            rect(\"48%\", \"10%\",\"20\", \"147\", _colors[1], \"d\"),\r\n            rect(\"30%\", \"20%\",\"232\", \"130\", _colors[2], \"d\"),\r\n            rect(\"95%\", \"20%\",\"10\", \"245\", _colors[3], \"d\")\r\n            ));\r\n    }\r\n\r\n    function _getHead(string[5] memory _colors, string memory _lat, string memory _long) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\" class=\"a\">',\r\n            '<style> .a{font-family:\"FreeMono\", monospace;font-weight:800;} .b{fill:white;font-size:25px;} .c{font-size:14px;}',\r\n            ' .t{font-size:42px;font-weight:200;} .m{fill:#080108;} .d{stroke-width:1;} .e{fill:',_colors[0],';} .f{font-size:22px;} </style>',\r\n            rect(\"100%\",\"100%\",\"0\",\"0\",_colors[4],\"m\"),\r\n            text(\"70\", \"50\", \"b\", _lat),\r\n            text(\"70\", \"83\", \"b\", _long)\r\n            ));\r\n    }\r\n    //0top, 1time, 2compass, 3xyz, 4border\r\n    function rect(string memory _width, string memory _height, string memory _x, string memory _y, string memory _fill, string memory _class ) public pure returns(string memory) {\r\n        return string(abi.encodePacked('<rect rx=\"1\" ry=\"1\" class=\"',_class,'\" width=\"',_width,'\" height=\"',_height,'\" x=\"',_x,'\" y=\"',_y,'\" stroke=\"',_fill,'\" /> '));\r\n    }\r\n    \r\n    function text(string memory _x, string memory _y, string memory _class, string memory _text) public pure returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            '<text fill=\"#fff\" x=\"', _x,'\" y=\"',_y,'\" class=\"', _class,'\">',_text,'</text> '));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n    \r\n    // From loot (for adventurers)\r\n    // Inspired by OraclizeAPI's implementation - MIT license\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[5]\",\"name\":\"_colors\",\"type\":\"string[5]\"},{\"internalType\":\"string\",\"name\":\"_lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_long\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dir\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_y\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_z\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_t\",\"type\":\"string\"}],\"name\":\"generateData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_height\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_y\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fill\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_class\",\"type\":\"string\"}],\"name\":\"rect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_y\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"OriginGenie","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7f191ae7943fbbd2f4f597a5c8dc1867109709b4c4b260fc65806685416b883"}]}