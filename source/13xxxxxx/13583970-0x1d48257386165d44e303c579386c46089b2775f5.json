{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nSPDX-License-Identifier: UNLICENSED\r\n(c) Developed by AgroToken\r\nThis work is unlicensed.\r\n*/\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title AgroToken is token that refers to real grains\r\n * AgroToken is a token admnistrated by AgroToken company \r\n * (represented by admin Ethereum address variable in this Smart Contract).\r\n * AgroToken performs all administrative\r\n * functions based on grain documentations and certifications in partnership\r\n * with agro traders (called Grain Oracles) and in complaince with local authorities.\r\n * */\r\ncontract AgroToken is IERC20 {\r\n    //\r\n    // events\r\n    //\r\n    // mint/burn events\r\n    event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n    event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n    // admin events\r\n    event BlockLockSet(uint256 _value);\r\n    event NewAdmin(address _newAdmin);\r\n    event NewManager(address _newManager);\r\n    event GrainStockChanged(\r\n        uint256 indexed contractId,\r\n        string grainCategory,\r\n        string grainContractInfo,\r\n        uint256 amount,\r\n        uint8 status,\r\n        uint256 newTotalSupplyAmount\r\n    );\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Only admin can perform this operation\");\r\n        _;\r\n    }    \r\n\r\n    modifier boardOrAdmin {\r\n        require(\r\n            msg.sender == board || msg.sender == admin,\r\n            \"Only admin or board can perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier blockLock(address _sender) {\r\n        require(\r\n            !isLocked() || _sender == admin,\r\n            \"Contract is locked except for the admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    struct Grain {\r\n        string category;\r\n        string contractInfo;\r\n        uint256 amount;\r\n        uint8 status;\r\n    }\r\n\r\n    uint256 override public totalSupply;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public admin;\r\n    address public board;    \r\n    uint256 public lockedUntilBlock;\r\n    uint256 public tokenizationFee;\r\n    uint256 public deTokenizationFee;\r\n    uint256 public transferFee;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    Grain[] public grains;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor() {\r\n        name = \"AgroToken Wheat Argentina\";\r\n        decimals = 4;\r\n        symbol = \"WHEA\";\r\n        lockedUntilBlock = 0;\r\n        admin = msg.sender;\r\n        board = 0xA01cD92f06f60b9fdcCCdF6280CE9A10803bA720;\r\n        totalSupply = 0;\r\n        balances[address(this)] = totalSupply;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Add new grain contract to portfolio\r\n     * @param _grainCategory - Grain category\r\n     * @param _grainContractInfo - Grain Contract's details\r\n     * @param _grainAmount - amount of grain in tons\r\n     * @return success\r\n     */\r\n    function addNewGrainContract(        \r\n        string memory _grainCategory,\r\n        string memory _grainContractInfo,\r\n        uint256 _grainAmount\r\n    ) public onlyAdmin returns (bool success) {\r\n        Grain memory newGrain = Grain(\r\n            _grainCategory,\r\n            _grainContractInfo,\r\n            _grainAmount,\r\n            1\r\n        );\r\n        grains.push(newGrain);\r\n        _mint(address(this), _grainAmount);\r\n        emit GrainStockChanged(\r\n            grains.length-1,\r\n            _grainCategory,\r\n            _grainContractInfo,\r\n            _grainAmount,\r\n            1,\r\n            totalSupply\r\n        );\r\n        success = true;\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a contract from Portfolio\r\n     * @param _contractIndex - Contract Index within Portfolio\r\n     * @return True if success\r\n     */\r\n    function removeGrainContract(uint256 _contractIndex) public onlyAdmin returns (bool) {\r\n        require(\r\n            _contractIndex < grains.length,\r\n            \"Invalid contract index number. Greater than total grain contracts\"\r\n        );\r\n        Grain storage grain = grains[_contractIndex];\r\n        require(grain.status == 1, \"This contract is no longer active\");\r\n        require(_burn(address(this), grain.amount), \"Could not to burn tokens\");\r\n        grain.status = 0;\r\n        emit GrainStockChanged( \r\n            _contractIndex,           \r\n            grain.category,\r\n            grain.contractInfo,\r\n            grain.amount,\r\n            grain.status,\r\n            totalSupply\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates a Contract\r\n     * @param _contractIndex - Contract Index within Portfolio\r\n     * @param _grainCategory - Grain category\r\n     * @param _grainContractInfo - Grain Contract's details\r\n     * @param _grainAmount - amount of grain in tons\r\n     * @return True if success\r\n     */\r\n    function updateGrainContract(\r\n        uint256 _contractIndex,\r\n        string memory _grainCategory,\r\n        string memory _grainContractInfo,\r\n        uint256 _grainAmount\r\n    ) public onlyAdmin returns (bool) {\r\n        require(\r\n            _contractIndex < grains.length,\r\n            \"Invalid contract index number. Greater than total grain contracts\"\r\n        );\r\n        require(_grainAmount > 0, \"Cannot set zero asset amount\");\r\n        Grain storage grain = grains[_contractIndex];\r\n        require(grain.status == 1, \"This contract is no longer active\");\r\n        grain.category = _grainCategory;\r\n        grain.contractInfo = _grainContractInfo;\r\n        if (grain.amount > _grainAmount) {\r\n            _burn(address(this), grain.amount - _grainAmount);\r\n        } else if (grain.amount < _grainAmount) {\r\n            _mint(address(this), _grainAmount - grain.amount);           \r\n        }\r\n        grain.amount = _grainAmount;\r\n        emit GrainStockChanged(\r\n            _contractIndex,\r\n            grain.category,\r\n            grain.contractInfo,\r\n            grain.amount,\r\n            grain.status,\r\n            totalSupply\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Number of Grain Contracts in Portfolio\r\n     */\r\n    function totalContracts() public view returns (uint256) {\r\n        return grains.length;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 Transfer\r\n     * @param _to - destination address\r\n     * @param _value - value to transfer\r\n     * @return True if success\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        override\r\n        external\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require(\r\n            isTransferValid(from, _to, _value),\r\n            \"Invalid Transfer Operation\"\r\n        );\r\n        balances[from] = balances[from] - _value;\r\n        uint256 serviceAmount = 0;\r\n        uint256 netAmount = _value;      \r\n        (serviceAmount, netAmount) = calcFees(transferFee, _value); \r\n        balances[_to] = balances[_to] + netAmount;\r\n        balances[address(this)] = balances[address(this)] + serviceAmount;\r\n        emit Transfer(from, _to, netAmount);\r\n        emit Transfer(from, address(this), serviceAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev ERC20 TransferFrom\r\n     * @param _from - source address\r\n     * @param _to - destination address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        override\r\n        external\r\n        blockLock(_from)\r\n        returns (bool)\r\n    {\r\n        // check sufficient allowance\r\n        require(\r\n            _value <= allowed[_from][msg.sender],\r\n            \"Value informed is invalid\"\r\n        );\r\n        require(\r\n            isTransferValid(_from, _to, _value),\r\n            \"Invalid Transfer Operation\"\r\n        );\r\n        // transfer tokens\r\n        balances[_from] = balances[_from] - _value;\r\n        uint256 serviceAmount = 0;\r\n        uint256 netAmount = _value;      \r\n        (serviceAmount, netAmount) = calcFees(transferFee, _value); \r\n        balances[_to] = balances[_to] + netAmount;\r\n        balances[address(this)] = balances[address(this)] + serviceAmount;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n\r\n        emit Transfer(_from, _to, netAmount);\r\n        emit Transfer(_from, address(this), serviceAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 Approve token transfers on behalf of other token owner\r\n     * @param _spender - destination address\r\n     * @param _value - value to be approved\r\n     * @return True if success\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n        override\r\n        external\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require((_value == 0) || (allowed[from][_spender] == 0), \"Allowance cannot be increased or decreased if value is different from zero\");\r\n        allowed[from][_spender] = _value;\r\n        emit Approval(from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\r\n        require(_spender != address(0), \"ERC20: decreaseAllowance to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require(allowed[from][_spender] >= _subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(from, _spender, allowed[from][_spender] - _subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\r\n        require(_spender != address(0), \"ERC20: decreaseAllowance to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        _approve(from, _spender, allowed[from][_spender] + _addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowed[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw tokens collected after receive fees \r\n     * @param _to - destination address\r\n     * @param _value - value to transfer\r\n     * @return True if success\r\n     */\r\n    function withdraw(address _to, uint256 _value)\r\n        external\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        address from = address(this);\r\n        require(\r\n            isTransferValid(from, _to, _value),\r\n            \"Invalid Transfer Operation\"\r\n        );\r\n        balances[from] = balances[from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        emit Transfer(from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens. Can only be called by mana\r\n     * @param _to - destination address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function _mint(address _to, uint256 _value)\r\n        internal\r\n        onlyAdmin        \r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"ERC20: mint to the zero address\");\r\n        require(_to != admin, \"Admin cannot mint tokens to herself\");\r\n        uint256 serviceAmount;\r\n        uint256 netAmount;\r\n        (serviceAmount, netAmount) = calcFees(tokenizationFee, _value);\r\n\r\n        balances[_to] = balances[_to] + netAmount;\r\n        balances[address(this)] = balances[address(this)] + serviceAmount;\r\n        totalSupply = totalSupply + _value;\r\n\r\n        emit Mint(_to, netAmount, totalSupply);\r\n        emit Mint(address(this), serviceAmount, totalSupply);\r\n        emit Transfer(address(0), _to, netAmount);\r\n        emit Transfer(address(0), address(this), serviceAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens\r\n     * @param _account - address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function _burn(address _account, uint256 _value)\r\n        internal        \r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 serviceAmount;\r\n        uint256 netAmount;\r\n        (serviceAmount, netAmount) = calcFees(deTokenizationFee, _value);\r\n        totalSupply = totalSupply - netAmount;\r\n        balances[_account] = balances[_account] - _value;\r\n        balances[address(this)] = balances[address(this)] + serviceAmount;\r\n        emit Transfer(_account, address(0), netAmount);\r\n        emit Transfer(_account, address(this), serviceAmount);\r\n        emit Burn(_account, netAmount, totalSupply);        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set block lock. Until that block (exclusive) transfers are disallowed\r\n     * @param _lockedUntilBlock - Block Number\r\n     * @return True if success\r\n     */\r\n    function setBlockLock(uint256 _lockedUntilBlock)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        emit BlockLockSet(_lockedUntilBlock);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Replace current admin with new one\r\n     * @param _newAdmin New token admin\r\n     * @return True if success\r\n     */\r\n    function replaceAdmin(address _newAdmin)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        require(_newAdmin != address(0x0), \"Null address\");\r\n        admin = _newAdmin;\r\n        emit NewAdmin(_newAdmin);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Change AgroToken fee values\r\n    * @param _feeType which fee is being changed. 1 = tokenizationFee, 2 = deTokenizationFee and 3 = transferFee\r\n    * @param _newAmount new fee value\r\n    * @return processing status\r\n    */\r\n    function changeFee(uint8 _feeType, uint256 _newAmount) external boardOrAdmin returns (bool) {\r\n        require(_newAmount<=2, \"Invalid or exceed white paper definition\");\r\n        require(_feeType >0 && _feeType<=3, \"Invalid fee type\");\r\n        if (_feeType == 1) {\r\n            tokenizationFee = _newAmount;\r\n        } else if (_feeType == 2) {\r\n            deTokenizationFee = _newAmount;\r\n        } else if (_feeType == 3) {\r\n            transferFee = _newAmount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 balanceOf\r\n     * @param _owner Owner address\r\n     * @return True if success\r\n     */\r\n    function balanceOf(address _owner) public override view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 allowance\r\n     * @param _owner Owner address\r\n     * @param _spender Address allowed to spend from Owner's balance\r\n     * @return uint256 allowance\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        override\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Are transfers currently disallowed\r\n     * @return True if disallowed\r\n     */\r\n    function isLocked() public view returns (bool) {\r\n        return lockedUntilBlock > block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if transfer parameters are valid\r\n     * @param _from Source address\r\n     * @param _to Destination address\r\n     * @param _amount Amount to check\r\n     * @return True if valid\r\n     */\r\n    function isTransferValid(address _from, address _to, uint256 _amount)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_from == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (_to == address(0) || _to == admin) {\r\n            return false;\r\n        }\r\n\r\n        bool fromOK = true;\r\n        bool toOK = true;\r\n\r\n        return\r\n            balances[_from] >= _amount && // sufficient balance\r\n            fromOK && // a seller holder within the whitelist\r\n            toOK; // a buyer holder within the whitelist\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates AgroToken fees over mint, burn and transfer operations\r\n    * @param _fee value of the fee\r\n    * @param _amount amount involved in the transaction\r\n    * @return serviceAmount value to be paid to AgroToken\r\n    * @return netAmount amount after fees\r\n    */\r\n    function calcFees(uint256 _fee, uint256 _amount) public pure returns(uint256 serviceAmount, uint256 netAmount ) {\r\n        serviceAmount = (_amount * _fee) / 100;\r\n        netAmount = _amount - serviceAmount;\r\n        return (serviceAmount, netAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BlockLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"grainCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"grainContractInfo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"GrainStockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"NewManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_grainCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_grainContractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_grainAmount\",\"type\":\"uint256\"}],\"name\":\"addNewGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"board\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deTokenizationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isTransferValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractIndex\",\"type\":\"uint256\"}],\"name\":\"removeGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setBlockLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_grainCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_grainContractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_grainAmount\",\"type\":\"uint256\"}],\"name\":\"updateGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AgroToken","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c4c6441e856ccf11a816acedd5808063f5c11807907b0d906c101ddf664fbd60"}]}