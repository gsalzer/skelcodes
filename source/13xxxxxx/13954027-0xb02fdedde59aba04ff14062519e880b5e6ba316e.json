{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InterleaveTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\r\\ninterface ERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\r\\nabstract contract ERC1155 {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event TransferSingle(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] amounts\\r\\n    );\\r\\n\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            ERC1155 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             METADATA LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function uri(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ERC1155 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual {\\r\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\r\\n\\r\\n        balanceOf[from][id] -= amount;\\r\\n        balanceOf[to][id] += amount;\\r\\n\\r\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0\\r\\n                ? to != address(0)\\r\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\r\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) public virtual {\\r\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\r\\n\\r\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\r\\n\\r\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < idsLength; ) {\\r\\n            uint256 id = ids[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            balanceOf[from][id] -= amount;\\r\\n            balanceOf[to][id] += amount;\\r\\n\\r\\n            // An array can't have a total length\\r\\n            // larger than the max uint256 value.\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0\\r\\n                ? to != address(0)\\r\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\r\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256[] memory balances)\\r\\n    {\\r\\n        uint256 ownersLength = owners.length; // Saves MLOADs.\\r\\n\\r\\n        require(ownersLength == ids.length, \\\"LENGTH_MISMATCH\\\");\\r\\n\\r\\n        balances = new uint256[](owners.length);\\r\\n\\r\\n        // Unchecked because the only math done is incrementing\\r\\n        // the array index counter which cannot possibly overflow.\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < ownersLength; i++) {\\r\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC165 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\r\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        INTERNAL MINT/BURN LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        balanceOf[to][id] += amount;\\r\\n\\r\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0\\r\\n                ? to != address(0)\\r\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\r\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _batchMint(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\r\\n\\r\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < idsLength; ) {\\r\\n            balanceOf[to][ids[i]] += amounts[i];\\r\\n\\r\\n            // An array can't have a total length\\r\\n            // larger than the max uint256 value.\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0\\r\\n                ? to != address(0)\\r\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\r\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _batchBurn(\\r\\n        address from,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts\\r\\n    ) internal virtual {\\r\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\r\\n\\r\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < idsLength; ) {\\r\\n            balanceOf[from][ids[i]] -= amounts[i];\\r\\n\\r\\n            // An array can't have a total length\\r\\n            // larger than the max uint256 value.\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\r\\n    }\\r\\n\\r\\n    function _burn(\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        balanceOf[from][id] -= amount;\\r\\n\\r\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Interleave is ERC1155, Ownable {\\r\\n\\r\\n    // NFT name\\r\\n    string public name;\\r\\n    // NFT symbol\\r\\n    string public symbol;\\r\\n    // NFT uri per ID\\r\\n    mapping(uint256 => string) private _uri;\\r\\n\\r\\n    // Addresses that can mint new NFTs\\r\\n    mapping(address => bool) public minters;\\r\\n\\r\\n    // Mapping from token ID to token existence\\r\\n    mapping(uint256 => bool) private exists;\\r\\n\\r\\n    // Mapping from token ID to boolean indicating if minting for that ID has been stopped\\r\\n    mapping(uint256 => bool) private unmintable;\\r\\n\\r\\n    // Mapping from token ID to boolean indicating if uri is frozen\\r\\n    mapping(uint256 => bool) private uriFrozen;\\r\\n\\r\\n    // Mapping from token ID to token supply\\r\\n    mapping(uint256 => uint256) private tokenSupply;\\r\\n\\r\\n    // Emitted when allowances of a minter is changed\\r\\n    event SetMinter(address minter, bool enabled);\\r\\n\\r\\n    // Emitted when a new NFT type is added\\r\\n    event Add(uint256 id);\\r\\n\\r\\n    // Emitted when minting of a NFT is stopped\\r\\n    event MintingStopped(uint256 id);\\r\\n\\r\\n    // Emitted when the URI of an ID is updated\\r\\n    event updateUri(string uri, uint256 indexed id);\\r\\n\\r\\n    // Emitted when the URI of an ID is frozen\\r\\n    event PermanentURI(string uri, uint256 indexed id);\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n        //string memory _baseUri\\r\\n    ) ERC1155() {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        //_setURI(_baseUri);\\r\\n    }\\r\\n\\r\\n    function setMinterAccess(address minter, bool enabled) public onlyOwner {\\r\\n        minters[minter] = enabled;\\r\\n        emit SetMinter(minter, enabled);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 id, uint256 amount) external {\\r\\n        require(minters[msg.sender], \\\"Not a minter\\\");\\r\\n        require(exists[id], \\\"ID does not exist\\\");\\r\\n\\r\\n        _mint(to, id, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal override function for minting an NFT including totalSupply update\\r\\n     */\\r\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal override {\\r\\n        super._mint(to, id, amount, data);\\r\\n\\r\\n        tokenSupply[id] += amount;\\r\\n    }\\r\\n\\r\\n    function batchMint(address to, uint256[] calldata ids, uint256[] calldata amounts) external {\\r\\n        require(minters[msg.sender], \\\"Not a minter\\\");\\r\\n        \\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            require(exists[ids[i]], \\\"ID does not exist\\\");\\r\\n        }\\r\\n\\r\\n        _batchMint(to, ids, amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal override function for batch minting an NFT including totalSupply update\\r\\n     */\\r\\n    function _batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal override {\\r\\n        super._batchMint(to, ids, amounts, data);\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            tokenSupply[ids[i]] += amounts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function burn(uint256 id, uint256 amount) external {\\r\\n        require(exists[id], \\\"ID does not exist\\\");\\r\\n        require(balanceOf[msg.sender][id] >= amount, \\\"burn amount exceeds balance\\\");\\r\\n\\r\\n        _burn(msg.sender, id, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal override function for minting an NFT including totalSupply update\\r\\n     */\\r\\n    function _burn(address from, uint256 id, uint256 amount) internal override {\\r\\n        super._burn(from, id, amount);\\r\\n\\r\\n        tokenSupply[id] -= amount;\\r\\n    }\\r\\n\\r\\n    function batchBurn(uint256[] calldata ids, uint256[] calldata amounts) external {\\r\\n        \\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            require(exists[ids[i]], \\\"ID does not exist\\\");\\r\\n            require(balanceOf[msg.sender][ids[i]] >= amounts[i], \\\"burn amount exceeds balance\\\");\\r\\n        }\\r\\n\\r\\n        _batchBurn(msg.sender, ids, amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal override function for batch minting an NFT including totalSupply update\\r\\n     */\\r\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts) internal override {\\r\\n        super._batchBurn(from, ids, amounts);\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            tokenSupply[ids[i]] -= amounts[i];\\r\\n        }\\r\\n    }       \\r\\n\\r\\n    /**\\r\\n     * @dev Adds new collection IDs with their corresponding URI\\r\\n     */\\r\\n    function add(uint256[] calldata ids, string[] calldata uris) external onlyOwner {\\r\\n        require(ids.length == uris.length, \\\"LENGTH_MISMATCH\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            uint256 newId = ids[i];\\r\\n            require(!exists[newId], \\\"ID already exists\\\");\\r\\n            exists[newId] = true;\\r\\n            _uri[newId] = uris[i];\\r\\n            emit Add(newId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stopMinting(uint256[] calldata ids) external onlyOwner {\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            uint256 id = ids[i];\\r\\n            require(exists[id], \\\"ID does not exist\\\");\\r\\n            unmintable[id] = true;\\r\\n            emit MintingStopped(id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setUri(uint256 id, string memory newUri) internal virtual {\\r\\n        _uri[id] = newUri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the URI for all NFT IDs\\r\\n     */\\r\\n    function setUri(uint256 id, string calldata newUri) external onlyOwner {\\r\\n        require(!uriFrozen[id], 'This URI is frozen!');\\r\\n        require(exists[id], \\\"ID does not exist\\\");\\r\\n        _setUri(id, newUri);\\r\\n\\r\\n        emit updateUri(newUri, id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the URI of a token given its ID\\r\\n     * @param id ID of the token to query\\r\\n     * @return uri of the token or an empty string if it does not exist\\r\\n     */\\r\\n    function uri(uint256 id) public view override returns (string memory) {\\r\\n        require(exists[id], \\\"URI query for nonexistent token\\\");\\r\\n\\r\\n        return _uri[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Freezes the metadata for a collection\\r\\n     * @param id ID of the token collection\\r\\n     */\\r\\n    function freezeUri(uint256 id) public onlyOwner {\\r\\n        require(exists[id]);\\r\\n\\r\\n        uriFrozen[id] = true;\\r\\n\\r\\n        emit PermanentURI(_uri[id], id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total quantity for a token ID\\r\\n     * @param id ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function totalSupply(uint256 id) external view returns (uint256) {\\r\\n        return tokenSupply[id];\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MintingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateUri\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"freezeUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinterAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Interleave","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000016496e7465726c656176652050726f64756374696f6e73000000000000000000000000000000000000000000000000000000000000000000000000000000000009494e54455250524f440000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}