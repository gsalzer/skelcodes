{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Nafta.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INafta.sol\\\";\\nimport \\\"./interfaces/IFlashNFTReceiver.sol\\\";\\nimport { ERC721Holder } from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Nafta is INafta, ERC721, ERC721Holder, Ownable {\\n  // WETH9 address\\n  IERC20 immutable WETH9;\\n\\n  /// @dev mapping from token contract to token id to token details/vault\\n  mapping(address => mapping(uint256 => PoolNFT)) internal _poolNFTs;\\n\\n  /// @dev mapping of earnings of each user of the pool (in WETH9)\\n  mapping(address => uint256) public earnings;\\n\\n  /// @dev fee taken by pool on each flashloan or flashlong operation\\n  uint256 public poolFee;\\n  uint256 public poolFeeChangedAtBlock;\\n  \\n  // Newly proposed owner, who will be able to claim the ownership\\n  address public proposedOwner; \\n\\n  // We use a single ERC721 NaftaNFT for both Borrowers and Lenders NFT types.\\n  // Thus we introduce an ID shift for LenderNFTs type, to distinguish their IDs from BorrowerNFTs\\n  // So all IDs below 2**32 are BorrowerNFTs, and all above 2**32 are LenderNFTs\\n\\n  /// @dev keeps track of the next free BorrowerNFT ID (longrent)\\n  /// @dev is in range 1 to 4 294 967 295 and the ID is used as is in NaftaNFT\\n  /// @dev 0 is reserved for N/A\\n  uint256 public borrowerNFTCount = 0;\\n\\n  /// @dev keeps track of the next free LenderNFT ID (when adding to pool)\\n  /// @dev is in range 4 294 967 297 to 8 589 934 591 (subtract 2**32 to get actual count)\\n  /// @dev 4 294 967 296 is reserved for N/A\\n  uint256 public lenderNFTCount = 2**32;\\n\\n  constructor(address owner_, IERC20 WETH9_) ERC721(\\\"NaftaNFT\\\", \\\"NAFTA\\\") {\\n    // WETH9 = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    WETH9 = WETH9_;\\n    Ownable.transferOwnership(owner_);\\n  }\\n\\n  /////////////\\n  // Getters //\\n  /////////////\\n\\n  /// @dev poolNFT storage view function\\n  /// @param nftAddress Address of the NFT contract\\n  /// @param nftId NFT ID\\n  function poolNFTs(address nftAddress, uint256 nftId) external view override returns (PoolNFT memory nft) {\\n    nft = _poolNFTs[nftAddress][nftId];\\n  }\\n\\n  ////////////////////\\n  // Pool functions //\\n  ////////////////////\\n\\n  /// @dev Add your NFT to the pool\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to add\\n  /// @param flashFee - The fee user has to pay for a single rent (in WETH9) [Range: 1gwei-1099.51163 ETH]\\n  /// @param pricePerBlock - If renting longterm - this is the price per block (0 if not renting longterm) [Range: 1gwei-1099.51163 ETH, or 0]\\n  /// @param maxLongtermBlocks - Maximum amount of blocks for longterm rent [Range: 0-16777216]\\n  function addNFT(address nftAddress, uint256 nftId, uint256 flashFee, uint256 pricePerBlock, uint256 maxLongtermBlocks) external {\\n    // Verify that NFT isn't already in the pool\\n    require(_poolNFTs[nftAddress][nftId].lenderNFTId == 0, \\\"NFT is already in the Pool\\\");\\n\\n    // Pull the NFT from the msg.sender using transferFrom\\n    IERC721(nftAddress).safeTransferFrom(msg.sender, address(this), nftId);\\n\\n    uint256 newNFTId = lenderNFTCount + 1;\\n    lenderNFTCount = newNFTId;\\n\\n    // Store newly added NFT renting parameters after packing to struct\\n    _poolNFTs[nftAddress][nftId] = fromBigPoolNFT(\\n             // (flashFee, pricePerBlock, maxLongtermBlocks, inLongtermTillBlock, borrowerNFTId, lenderNFTId)\\n      BigPoolNFT(flashFee, pricePerBlock, maxLongtermBlocks, 0,                   0,             newNFTId)\\n    );\\n\\n    // Mint a new LenderNFT to msg.sender\\n    _safeMint(msg.sender, newNFTId);\\n\\n    // Emit AddNFT event\\n    emit AddNFT(nftAddress, nftId, flashFee, pricePerBlock, maxLongtermBlocks, newNFTId, msg.sender);\\n  }\\n\\n  /// @dev Edit your NFT prices\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you have in the pool\\n  /// @param flashFee - The fee user has to pay for a single rent (in WETH9) [Range: 1gwei-1099.51163 ETH]\\n  /// @param pricePerBlock - If renting longterm - this is the price per block (0 if not renting longterm) [Range: 1gwei-1099.51163 ETH, or 0]\\n  /// @param maxLongtermBlocks - Maximum amount of blocks for longterm rent [Range: 0-16777216]\\n  function editNFT(address nftAddress, uint256 nftId, uint256 flashFee, uint256 pricePerBlock, uint256 maxLongtermBlocks) external {\\n    BigPoolNFT memory bigPoolNFT = toBigPoolNFT(_poolNFTs[nftAddress][nftId]);\\n\\n    // Verify that msg.sender is stored as an owner of this NFT\\n    require(ownerOf(bigPoolNFT.lenderNFTId) == msg.sender, \\\"Only owner of the corresponding LenderNFT can call this\\\");\\n\\n    // Update parameters: flashFee, pricePerBlock, maxLongtermBlocks\\n    bigPoolNFT.flashFee = flashFee;\\n    bigPoolNFT.pricePerBlock = pricePerBlock;\\n    bigPoolNFT.maxLongtermBlocks = maxLongtermBlocks;\\n\\n    // Save the updated NFT back to storage after packing\\n    _poolNFTs[nftAddress][nftId] = fromBigPoolNFT(bigPoolNFT);\\n\\n    // Emit EditNFT event\\n    emit EditNFT(nftAddress, nftId, flashFee, pricePerBlock, maxLongtermBlocks, bigPoolNFT.lenderNFTId, msg.sender);\\n  }\\n\\n  /// @dev Remove your NFT from the pool with earnings\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to remove\\n  function removeNFT(address nftAddress, uint256 nftId) external {\\n    BigPoolNFT memory bigPoolNFT = toBigPoolNFT(_poolNFTs[nftAddress][nftId]);\\n\\n    // Verify that msg.sender is stored as an owner of this NFT\\n    require(ownerOf(bigPoolNFT.lenderNFTId) == msg.sender, \\\"Only owner of the corresponding LenderNFT can call this\\\");\\n    // Verify that it's not rented in longterm right now\\n    require(bigPoolNFT.inLongtermTillBlock < block.number, \\\"Can't remove NFT from the pool while in longterm rent\\\");\\n    // If it's not rented longterm - update longterm rent and burn if needed\\n    actualizeLongterm(nftAddress, nftId);\\n\\n    // Zero the storage of this NFT in the pool and burn the NFT\\n    delete _poolNFTs[nftAddress][nftId];\\n    _burn(bigPoolNFT.lenderNFTId);\\n\\n    // Push the NFT to msg.sender\\n    IERC721(nftAddress).safeTransferFrom(address(this), msg.sender, nftId);\\n\\n    // Emit RemoveNFT event\\n    emit RemoveNFT(nftAddress, nftId, bigPoolNFT.lenderNFTId, msg.sender);\\n  }\\n\\n  /// @dev Withdraw the earnings of your NFT\\n  function withdrawEarnings() external override {\\n    uint256 transferAmount = earnings[msg.sender];\\n\\n    // Verify that earnings > 0\\n    require(transferAmount > 0, \\\"No earnings to withdraw\\\");\\n\\n    // Save and reset earnings before transfer\\n    earnings[msg.sender] = 0;\\n\\n    // Push the WETH9 earnings associated with this NFT to msg.sender (we already verified above that msg.sender == owner)\\n    require(WETH9.transfer(msg.sender, transferAmount), \\\"WETH9 transfer failed\\\");\\n\\n    // Emit withdraw event\\n    emit WithdrawEarnings(transferAmount, msg.sender);\\n  }\\n\\n  /// @dev Execute a Flashloan of NFT\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to flashloan\\n  /// @param maxLoanPrice - Price the user is willing to pay for the flashloan\\n  /// @param receiverAddress - the contract that will receive the NFT (has to implement INFTFlashLoanReceiver interface)\\n  /// @param data - calldata that will be passed to the receiver contract (optional)\\n  function flashloan(address nftAddress, uint256 nftId, uint256 maxLoanPrice, address receiverAddress, bytes calldata data) external {\\n    // Verify that this NFT still exists in the pool\\n    require(IERC721(nftAddress).ownerOf(nftId) == address(this), \\\"NFT should be in the pool\\\");\\n\\n    // Update longterm rent parameters\\n    actualizeLongterm(nftAddress, nftId);\\n\\n    BigPoolNFT memory bigPoolNFT = toBigPoolNFT(_poolNFTs[nftAddress][nftId]);\\n\\n    // Is this NFT already in a longterm rent?\\n    bool longterm = bigPoolNFT.inLongtermTillBlock >= block.number;\\n\\n    // If this NFT is in a longterm rent right now - check if the msg.sender has the BorrowerNFT\\n    if (longterm) {\\n      require(\\n        ownerOf(bigPoolNFT.borrowerNFTId) == msg.sender,\\n        \\\"This NFT is in longterm rent - you can't flashloan it unless you have corresponding BorrowerNFT\\\"\\n      );\\n    }\\n\\n    uint256 lenderFees = longterm ? 0 : bigPoolNFT.flashFee;\\n\\n    require(lenderFees <= maxLoanPrice, \\\"You can't take the flashloan for the indicated price\\\");\\n\\n    // Initialize the Receiver with IFlashNFTReceiver\\n    IFlashNFTReceiver receiver = IFlashNFTReceiver(receiverAddress);\\n\\n    // Push the NFT to Receiver\\n    IERC721(nftAddress).safeTransferFrom(address(this), receiverAddress, nftId);\\n\\n    require(\\n      receiver.executeOperation(nftAddress, nftId, lenderFees, msg.sender, data),\\n      \\\"Error during FlashNFT Execution\\\"\\n    );\\n\\n    // Pull the NFT back from Receiver (will revert if not possible)\\n    IERC721(nftAddress).safeTransferFrom(receiverAddress, address(this), nftId);\\n\\n    // Pull the flashFee fee from Receiver (will revert if not possible)\\n    require(\\n      longterm ||\\n      WETH9.transferFrom(msg.sender, address(this), lenderFees),\\n      \\\"Can't transfer WETH9 lender fees\\\"\\n    );\\n\\n    // Calculate the part of fee that goes to the pool (flashFee * poolFee)\\n    uint256 poolPart = poolFee * lenderFees / 1e18;\\n\\n    // Add poolPart to the pool Owner balance if it's more than zero\\n    if (poolPart > 0) earnings[owner()] += poolPart;\\n\\n    // Add the received (flashFee - poolPart) to NFT owner's earnings\\n    earnings[ownerOf(bigPoolNFT.lenderNFTId)] += lenderFees - poolPart;\\n\\n    // This might be an excess check, because we had a successful \\\"safeTransferFrom\\\" above,\\n    // but for now - better be safe than sorry.\\n    require(IERC721(nftAddress).ownerOf(nftId) == address(this), \\\"NFT should be in the pool\\\");\\n\\n    // Emit a Flashloan event\\n    emit Flashloan(nftAddress, nftId, lenderFees, msg.sender);\\n  }\\n\\n  ///////////////////\\n  // Longterm rent //\\n  ///////////////////\\n\\n  /// @dev Utility function to update the status of longterm rent\\n  /// @dev Is called in some functions as well as can be called by public\\n  /// @dev will reset the values and burn the BorrowerNFT if the longterm rent is over\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to update\\n  function actualizeLongterm(address nftAddress, uint256 nftId) public {\\n    BigPoolNFT memory bigPoolNFT = toBigPoolNFT(_poolNFTs[nftAddress][nftId]);\\n\\n    if (bigPoolNFT.inLongtermTillBlock > 0 && bigPoolNFT.inLongtermTillBlock < block.number) {\\n      _burn(bigPoolNFT.borrowerNFTId);\\n\\n      bigPoolNFT.borrowerNFTId = 0;\\n      bigPoolNFT.inLongtermTillBlock = 0;\\n\\n      _poolNFTs[nftAddress][nftId] = fromBigPoolNFT(bigPoolNFT);\\n    }\\n  }\\n\\n  /// @dev You can buy a longterm rent for any NFT and don't pay fees for each use.\\n  /// @dev Nobody else will be able to use it while your rent lasts (even the original owner!)\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to rent\\n  /// @param maxPricePerBlock - Price the user is willing to pay per block for renting the NFT\\n  /// @param receiverAddress - Who will receive the longterm rent BorrowerNFT\\n  /// @param blocks - How many blocks you want to rent (price is calculated per-block)\\n  function lendLong(\\n    address nftAddress,\\n    uint256 nftId,\\n    uint256 maxPricePerBlock,\\n    address receiverAddress,\\n    uint256 blocks\\n  ) external {\\n    BigPoolNFT memory bigPoolNFT = toBigPoolNFT(_poolNFTs[nftAddress][nftId]);\\n\\n    require(bigPoolNFT.pricePerBlock > 0, \\\"This NFT isn't available for longterm rent\\\");\\n\\n    require(blocks <= bigPoolNFT.maxLongtermBlocks, \\\"NFT can't be rented for that amount of time\\\");\\n    // We don't check for (blocks > 0) because we check it with (longtermPayment >= bigPoolNFT.flashFee) below\\n\\n    actualizeLongterm(nftAddress, nftId);\\n\\n    // Check if it's not in longterm rent already\\n    require(bigPoolNFT.inLongtermTillBlock < block.number, \\\"Can't rent longterm because it's already rented\\\");\\n\\n    require(bigPoolNFT.pricePerBlock <= maxPricePerBlock, \\\"Can't rent the NFT with the selected price\\\");\\n\\n    // Set a new blocknumber for longterm rent\\n    // This shouldn't overflow because we check (blocks <= maxLongtermBlocks) which is 24bit (16 777 215),\\n    // and inLongtermTillBlock is 32 bit (4 294 967 295).\\n    // So theoretically this will be allright until block 4278190080 - which is millenias ahead.\\n    bigPoolNFT.inLongtermTillBlock = block.number + blocks;\\n\\n    uint256 longtermPayment = blocks * bigPoolNFT.pricePerBlock;\\n\\n    // Protecting from cheaters who want to rent longterm for 1 block and pay less than a flash loan fee\\n    require(longtermPayment >= bigPoolNFT.flashFee, \\\"Longterm rent can't be cheaper than flashloan\\\");\\n\\n    // Pull the money from lender\\n    require(WETH9.transferFrom(msg.sender, address(this), longtermPayment), \\\"Can't transfer WETH9 lender fees\\\");\\n\\n    // Calculate the part of fee that goes to the pool (flashFee * poolFee)\\n    uint256 poolPart = poolFee * longtermPayment / 1e18;\\n\\n    // Add poolPart to the pool Owner balance if it's more than zero\\n    if (poolPart > 0) earnings[owner()] += poolPart;\\n\\n    // Add the rest (flashFee - calculatedPoolFee) to NFT owner's earnings\\n    earnings[ownerOf(bigPoolNFT.lenderNFTId)] += longtermPayment - poolPart;\\n\\n    uint256 newNFTId = borrowerNFTCount + 1;\\n    borrowerNFTCount = newNFTId;\\n\\n    bigPoolNFT.borrowerNFTId = newNFTId;\\n    _poolNFTs[nftAddress][nftId] = fromBigPoolNFT(bigPoolNFT);\\n\\n    _safeMint(receiverAddress, newNFTId);\\n\\n    emit LongtermRent(nftAddress, nftId, blocks, longtermPayment, newNFTId, msg.sender);\\n  }\\n\\n  /////////////////////\\n  // Admin Functions //\\n  /////////////////////\\n\\n  /// @dev Change the pool fee (admin only)\\n  /// @dev Only admin should be able to do that\\n  /// @dev Only once per block and for 1 percentage point - to prevent frontrunning\\n  //\\n  /// @param newPoolFee - The new pool fee value (percentage, where 100% is 1e18)\\n  function changePoolFee(uint256 newPoolFee) external onlyOwner {\\n    uint256 diff = newPoolFee > poolFee ? (newPoolFee - poolFee) : (poolFee - newPoolFee);\\n    require(diff <= 1e16, \\\"Can't change the pool fee more than one percentage point in one step\\\");\\n    require(block.number != poolFeeChangedAtBlock, \\\"Can't change the pool fee more than once in a block\\\");\\n    poolFee = newPoolFee;\\n    poolFeeChangedAtBlock = block.number;\\n    emit PoolFeeChanged(newPoolFee);\\n  }\\n\\n  /// @dev Propose a new owner, who will be able to claim ownership over this contract\\n  /// @param newOwner New owner who will be able to claim ownership over this contract\\n  function proposeNewOwner(address newOwner) external onlyOwner {\\n    proposedOwner = newOwner;\\n  }\\n\\n  /// @dev Claims the ownership of the contract if msg.sender is proposedOwner\\n  function claimOwnership() external {\\n    require(msg.sender == proposedOwner, \\\"Only proposed owner can claim the ownership\\\");\\n    Ownable._transferOwnership(msg.sender);\\n  }\\n\\n  ///////////////////////\\n  // Utility Functions //\\n  ///////////////////////\\n\\n  /// @dev Converts packed PoolNFT struct to unpacked BigPoolNFT struct (uint256)\\n  /// @param poolNFT packed PoolNFT struct\\n  /// @return unpacked BigPoolNFT struct\\n  function toBigPoolNFT(PoolNFT memory poolNFT) public pure returns (BigPoolNFT memory) {\\n    return BigPoolNFT(\\n      uint256(poolNFT.flashFee),\\n      uint256(poolNFT.pricePerBlock),\\n      uint256(poolNFT.maxLongtermBlocks),\\n      uint256(poolNFT.inLongtermTillBlock),\\n      uint256(poolNFT.borrowerNFTId),\\n      uint256(poolNFT.lenderNFTId) + 2**32\\n    );\\n  }\\n\\n  /// @dev Converts unpacked BigPoolNFT struct (uint256) to packed PoolNFT struct\\n  /// @param bigPoolNFT unpacked BigPoolNFT struct\\n  /// @return packed PoolNFT struct\\n  function fromBigPoolNFT(BigPoolNFT memory bigPoolNFT) public pure returns (PoolNFT memory) {\\n    // Check for overflows before downcasting (yes, Solidity 0.8 still doesn't revert during downcast!)\\n    require(bigPoolNFT.flashFee <= type(uint72).max, \\\"flashFee doesn't fit in uint72\\\");\\n    require(bigPoolNFT.pricePerBlock <= type(uint72).max, \\\"pricePerBlock doesn't fit in uint72\\\");\\n    require(bigPoolNFT.maxLongtermBlocks <= type(uint24).max, \\\"maxLongtermBlocks doesn't fit in uint24\\\");\\n    require(bigPoolNFT.inLongtermTillBlock <= type(uint32).max, \\\"inLongtermTillBlock doesn't fit in uint32\\\");\\n    require(bigPoolNFT.borrowerNFTId <= type(uint32).max, \\\"borrowerNFTId doesn't fit in uint32\\\");\\n    require(bigPoolNFT.lenderNFTId - 2**32 <= type(uint32).max, \\\"lenderNFTId doesn't fit in uint32\\\");\\n\\n    return PoolNFT(\\n      uint72(bigPoolNFT.flashFee),\\n      uint72(bigPoolNFT.pricePerBlock),\\n      uint24(bigPoolNFT.maxLongtermBlocks),\\n      uint32(bigPoolNFT.inLongtermTillBlock),\\n      uint32(bigPoolNFT.borrowerNFTId),\\n      uint32(bigPoolNFT.lenderNFTId - 2**32)\\n    );\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INafta.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface INafta {\\n  event AddNFT(address nftAddress, uint256 nftId, uint256 flashFee, uint256 pricePerBlock, uint256 maxLongtermBlocks, uint256 lenderNFTId, address msgSender);\\n  event EditNFT(address nftAddress, uint256 nftId, uint256 flashFee, uint256 pricePerBlock, uint256 maxLongtermBlocks, uint256 lenderNFTId, address msgSender);\\n  event RemoveNFT(address nftAddress, uint256 nftId, uint256 lenderNFTId, address msgSender);\\n  event WithdrawEarnings(uint256 earnings, address msgSender);\\n  event Flashloan(address nftAddress, uint256 nftId, uint256 earnedFees, address msgSender);\\n  event PoolFeeChanged(uint256 newPoolFee);\\n  event LongtermRent(address nftAddress, uint256 nftId, uint256 blocks, uint256 earnedFees, uint256 borrowerNFTId, address msgSender);\\n\\n  // NFT Struct in the Pool (optimized to fit within 256 bits)\\n  struct PoolNFT {\\n    uint72 flashFee;            // 72 bit - up to 4722.36648 ETH      // fee for a single rent in WETH,\\n    uint72 pricePerBlock;       // 72 bit - up to 4722.36648 ETH      // price per block of longterm rent (0 if not available)\\n    uint24 maxLongtermBlocks;   // 24 bit - up to 16 777 215 blocks   // maximum amount of blocks for longterm rent (0 if not available)\\n    uint32 inLongtermTillBlock; // 32 bit - up to block 4 294 967 295 // This NFT is in longterm rent till this block\\n    uint32 borrowerNFTId;       // 32 bit - up to ID 4 294 967 296    // ID of BorrowerNFT\\n    uint32 lenderNFTId;         // 32 bit - up to ID 4 294 967 296    // ID of LenderNFT (subtracted 2**32 to fit)\\n  }\\n\\n  // BIG NFT Struct in the Pool (all values converted to uin256 for the ease of use)\\n  struct BigPoolNFT {\\n    uint256 flashFee;            // originally 72 bit - up to 4722.36648 ETH      // fee for a single rent in WETH,\\n    uint256 pricePerBlock;       // originally 72 bit - up to 4722.36648 ETH      // price per block of longterm rent (0 if not available)\\n    uint256 maxLongtermBlocks;   // originally 24 bit - up to 16 777 215 blocks   // maximum amount of blocks for longterm rent (0 if not available)\\n    uint256 inLongtermTillBlock; // originally 32 bit - up to block 4 294 967 295 // This NFT is in longterm rent till this block\\n    uint256 borrowerNFTId;       // originally 32 bit - up to ID 4 294 967 296    // ID of BorrowerNFT\\n    uint256 lenderNFTId;         // originally 32 bit - up to ID 4 294 967 296    // ID of LenderNFT (add 2**32 to separate from BorrowerNFT)\\n  }\\n\\n  // Getters\\n  function earnings(address userAddress) external returns (uint256);\\n\\n  function poolNFTs(address nftAddress, uint256 nftId) external view returns (PoolNFT memory nft);\\n\\n  function poolFee() external view returns (uint256 poolFee);\\n  function poolFeeChangedAtBlock() external view returns(uint256 poolFeeChangedAtBlock);\\n\\n  function proposedOwner() external view returns(address proposedOwner);\\n\\n  function borrowerNFTCount() external view returns (uint256 borrowerNFTCount);\\n  function lenderNFTCount() external view returns (uint256 lenderNFTCount);\\n\\n  ////////////////////\\n  // Pool functions //\\n  ////////////////////\\n\\n  /// @dev Add your NFT to the pool\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to add\\n  /// @param flashFee - The fee user has to pay for a single rent (in WETH)\\n  /// @param pricePerBlock - If renting longterm - this is the price per block (0 if not renting longterm)\\n  /// @param maxLongtermBlocks - Maximum amount of blocks for longterm rent\\n  function addNFT(\\n    address nftAddress,\\n    uint256 nftId,\\n    uint256 flashFee,\\n    uint256 pricePerBlock,\\n    uint256 maxLongtermBlocks\\n  ) external;\\n\\n  /// @dev Edit your NFT prices\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you have in the pool\\n  /// @param flashFee - The fee user has to pay for a single rent (in WETH)\\n  /// @param pricePerBlock - If renting longterm - this is the price per block (0 if not renting longterm)\\n  /// @param maxLongtermBlocks - Maximum amount of blocks for longterm rent\\n  function editNFT(\\n    address nftAddress,\\n    uint256 nftId,\\n    uint256 flashFee,\\n    uint256 pricePerBlock,\\n    uint256 maxLongtermBlocks\\n  ) external;\\n\\n  /// @dev Remove your NFT from the pool with earnings\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to remove\\n  function removeNFT(address nftAddress, uint256 nftId) external;\\n\\n  /// @dev Withdraw your earnings\\n  function withdrawEarnings() external;\\n\\n  /// @dev Execute a Flashloan of NFT\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to flashloan\\n  /// @param maxLoanPrice - Price the user is willing to pay for the flashloan\\n  /// @param receiverAddress - the contract that will receive the NFT (has to implement INFTFlashLoanReceiver interface)\\n  /// @param data - calldata that will be passed to the receiver contract (optional)\\n  function flashloan(\\n    address nftAddress,\\n    uint256 nftId,\\n    uint256 maxLoanPrice,\\n    address receiverAddress,\\n    bytes calldata data\\n  ) external;\\n\\n  ///////////////\\n  // Flashlong //\\n  ///////////////\\n\\n  /// @dev Utility function to update the status of longterm rent\\n  /// @dev Is called in some functions as well as can be called by public\\n  /// @dev will burn the BorrowerNFT if the longterm rent is over\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to update\\n  function actualizeLongterm(address nftAddress, uint256 nftId) external;\\n\\n  /// @dev You can buy a longterm rent for any NFT and don't pay fees for each use, and nobody else will be able to lend it while your rent lasts\\n  //\\n  /// @param nftAddress - The address of NFT contract\\n  /// @param nftId - ID of the NFT token you want to rent\\n  /// @param maxPricePerBlock - Price the user is willing to pay per block for renting the NFT\\n  /// @param receiverAddress - Who will receive the longterm rent BorrowerNFT\\n  /// @param blocks - How many blocks you want to rent (price is calculated per-block)\\n  function lendLong(\\n    address nftAddress,\\n    uint256 nftId,\\n    uint256 maxPricePerBlock,\\n    address receiverAddress,\\n    uint256 blocks\\n  ) external;\\n\\n  /////////////////////\\n  // Admin Functions //\\n  /////////////////////\\n\\n  /// @dev Change the pool fee (admin only)\\n  /// @dev Only admin should be able to do that\\n  //\\n  /// @param newPoolFee - The new pool fee value (percentage)\\n  function changePoolFee(uint256 newPoolFee) external;\\n\\n  /// @dev Propose a new owner, who will be able to claim ownership over this contract\\n  /// @param newOwner New owner who will be able to claim ownership over this contract\\n  function proposeNewOwner(address newOwner) external;\\n\\n  /// @dev Claims the ownership of the contract if msg.sender is proposedOwner\\n  function claimOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashNFTReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./INafta.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface IFlashNFTReceiver is IERC721Receiver {\\n    function executeOperation(address nftAddress, uint256 nftId, uint256 feeInWeth, address msgSender, bytes calldata data) external returns (bool);\\n\\n    function NAFTA_POOL() external view returns (INafta);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0-rc.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH9_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderNFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"AddNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderNFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"EditNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"Flashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowerNFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"LongtermRent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoolFee\",\"type\":\"uint256\"}],\"name\":\"PoolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lenderNFTId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"RemoveNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"WithdrawEarnings\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"actualizeLongterm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"}],\"name\":\"addNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPoolFee\",\"type\":\"uint256\"}],\"name\":\"changePoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"}],\"name\":\"editNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inLongtermTillBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerNFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderNFTId\",\"type\":\"uint256\"}],\"internalType\":\"struct INafta.BigPoolNFT\",\"name\":\"bigPoolNFT\",\"type\":\"tuple\"}],\"name\":\"fromBigPoolNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"flashFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pricePerBlock\",\"type\":\"uint72\"},{\"internalType\":\"uint24\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"inLongtermTillBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowerNFTId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lenderNFTId\",\"type\":\"uint32\"}],\"internalType\":\"struct INafta.PoolNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPricePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"lendLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeChangedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"poolNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"flashFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pricePerBlock\",\"type\":\"uint72\"},{\"internalType\":\"uint24\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"inLongtermTillBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowerNFTId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lenderNFTId\",\"type\":\"uint32\"}],\"internalType\":\"struct INafta.PoolNFT\",\"name\":\"nft\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"removeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"flashFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pricePerBlock\",\"type\":\"uint72\"},{\"internalType\":\"uint24\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"inLongtermTillBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowerNFTId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lenderNFTId\",\"type\":\"uint32\"}],\"internalType\":\"struct INafta.PoolNFT\",\"name\":\"poolNFT\",\"type\":\"tuple\"}],\"name\":\"toBigPoolNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLongtermBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inLongtermTillBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerNFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderNFTId\",\"type\":\"uint256\"}],\"internalType\":\"struct INafta.BigPoolNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nafta","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"000000000000000000000000a94db69502920a657f8685978e62d3e3b9762adf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}