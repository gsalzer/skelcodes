{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"DataStorageProxy.sol\":{\"content\":\"/*\\n* SPDX-License-Identifier: UNLICENSED\\n* Copyright Â© 2021 Blocksquare d.o.o.\\n*/\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface DataStorageProxyHelpers {\\n    function hasSystemAdminRights(address addr) external view returns (bool);\\n\\n    function getUserBytesFromWallet(address wallet) external view returns (bytes32);\\n\\n    function getCPBytesFromWallet(address wallet) external view returns (bytes32);\\n\\n    function isUserWhitelisted(bytes32 cp, bytes32 user) external view returns (bool);\\n\\n    function isCertifiedPartner(address addr) external view returns (bool);\\n\\n    function canCertifiedPartnerDistributeRent(address addr) external view returns (bool);\\n\\n    function isCPAdmin(address admin, address cp) external view returns (bool);\\n}\\n\\n/// @title Data Storage Proxy\\ncontract DataStorageProxy is Ownable {\\n\\n    struct Fee {\\n        uint256 licencedIssuerFee;\\n        uint256 blocksquareFee;\\n        uint256 certifiedPartnerFee;\\n    }\\n\\n    mapping(bytes32 =\\u003e bool) _cpFrozen;\\n    mapping(address =\\u003e bool) _propertyFrozen;\\n    mapping(address =\\u003e address) _propertyToCP;\\n    mapping(address =\\u003e bool) _whitelistedContract;\\n\\n    address private _factory;\\n    address private _roles;\\n    address private _users;\\n    address private _certifiedPartners;\\n    address private _blocksquare;\\n    address private _oceanPoint;\\n    address private _government;\\n\\n    address private _specialWallet;\\n\\n    bool private _systemFrozen;\\n\\n    Fee private _fee;\\n\\n    modifier onlySystemAdmin {\\n        require(DataStorageProxyHelpers(_roles).hasSystemAdminRights(msg.sender), \\\"DataStorageProxy: You need to have system admin rights!\\\");\\n        _;\\n    }\\n\\n    event TransferPropertyToCP(address property, address CP);\\n    event FreezeProperty(address property, bool frozen);\\n\\n    constructor(address roles, address CP, address users, address specialWallet) public {\\n        // 5 means 0.5 percent of whole transaction value\\n        _fee = Fee(5, 5, 5);\\n        _blocksquare = msg.sender;\\n        _roles = roles;\\n        _users = users;\\n        _certifiedPartners = CP;\\n        _specialWallet = specialWallet;\\n    }\\n\\n    function changeSpecialWallet(address specialWallet) public onlyOwner {\\n        _specialWallet = specialWallet;\\n    }\\n\\n    function changeFactory(address factory) public onlyOwner {\\n        _factory = factory;\\n    }\\n\\n\\n    function changeRoles(address roles) public onlyOwner {\\n        _roles = roles;\\n    }\\n\\n    function changeUsers(address users) public onlyOwner {\\n        _users = users;\\n    }\\n\\n    function changeGovernmentContract(address government) public onlyOwner {\\n        _government = government;\\n    }\\n\\n    function changeCertifiedPartners(address certifiedPartners) public onlyOwner {\\n        _certifiedPartners = certifiedPartners;\\n    }\\n\\n    function changeOceanPointContract(address oceanPoint) public onlyOwner {\\n        _oceanPoint = oceanPoint;\\n    }\\n\\n    /// @notice change whether contr can be used as minting of burning contract\\n    /// @param contr Contract address\\n    /// @param isWhitelisted Whether contract can be used or not\\n    function changeWhitelistedContract(address contr, bool isWhitelisted) public onlySystemAdmin {\\n        _whitelistedContract[contr] = isWhitelisted;\\n    }\\n\\n    function changeFees(uint256 licencedIssuerFee, uint256 blocksquareFee, uint256 certifiedPartnerFee) public onlyOwner {\\n        require(_msgSender() == owner() || _msgSender() == _government, \\\"DataStorageProxy: You can\\u0027t change fee\\\");\\n        require(licencedIssuerFee + blocksquareFee + certifiedPartnerFee \\u003c= 10000, \\\"DataStorageProxy: Fee needs to be equal or bellow 100\\\");\\n        _fee = Fee(licencedIssuerFee, blocksquareFee, certifiedPartnerFee);\\n    }\\n\\n    function changeBlocksquareAddress(address blocksquare) public onlyOwner {\\n        _blocksquare = blocksquare;\\n    }\\n\\n    /// @notice register prop to cp, can only be invoked by property factory contract\\n    /// @param prop Property contract address\\n    /// @param cp Certified Partner wallet (this wallet will receive fee from property)\\n    function addPropertyToCP(address prop, address cp) public {\\n        require(_factory == msg.sender, \\\"DataHolder: Only factory can add properties\\\");\\n        _propertyToCP[prop] = cp;\\n        _propertyFrozen[prop] = true;\\n    }\\n\\n    /// @notice change Certified Partner of property\\n    /// @param prop Property contract address\\n    /// @param cp Certified Partner wallet (this wallet will receive fee from property)\\n    function changePropertyToCP(address prop, address cp) public onlySystemAdmin {\\n        require(isCertifiedPartner(cp), \\\"DataStorageProxy: Can only assign property to Certified Partner\\\");\\n        _propertyToCP[prop] = cp;\\n        emit TransferPropertyToCP(prop, cp);\\n    }\\n\\n    function freezeSystem() public onlyOwner {\\n        _systemFrozen = true;\\n    }\\n\\n    function unfreezeSystem() public onlyOwner {\\n        _systemFrozen = false;\\n    }\\n\\n    /// @notice freeze Certified Partner (stops transactions for all Certified Partners properties)\\n    /// @param cp Certified Partner wallet\\n    function freezeCP(address cp) public onlySystemAdmin {\\n        bytes32 cpBytes = DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(cp);\\n        _cpFrozen[cpBytes] = true;\\n    }\\n\\n    /// @notice unfreeze Certified Partner (allowing transactions for all Certified Partners properties)\\n    /// @param cp Certified Partner wallet\\n    function unfreezeCP(address cp) public onlySystemAdmin {\\n        bytes32 cpBytes = DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(cp);\\n        _cpFrozen[cpBytes] = false;\\n    }\\n\\n    /// @notice freeze property (stopping transactions for property)\\n    /// @param prop Property contract address\\n    function freezeProperty(address prop) public {\\n        require(_propertyToCP[msg.sender] != address(0), \\\"DataHolder: Sender must be property that belongs to a CP!\\\");\\n        require(msg.sender == prop, \\\"DataHolder: Only property can freeze itself!\\\");\\n        _propertyFrozen[prop] = true;\\n        emit FreezeProperty(prop, true);\\n    }\\n\\n    /// @notice unfreeze property (allowing transactions for property)\\n    /// @param prop Property contract address\\n    function unfreezeProperty(address prop) public {\\n        require(_propertyToCP[msg.sender] != address(0), \\\"DataHolder: Sender must be property that belongs to a CP!\\\");\\n        require(msg.sender == prop, \\\"DataHolder: Only property can unfreeze itself!\\\");\\n        _propertyFrozen[prop] = false;\\n        emit FreezeProperty(prop, false);\\n    }\\n\\n    /// @notice checks if system is frozen\\n    function isSystemFrozen() public view returns (bool) {\\n        return _systemFrozen;\\n    }\\n\\n    /// @notice checks if Certified Partner is frozen\\n    /// @param cp Certified Partner wallet address\\n    function isCPFrozen(address cp) public view returns (bool) {\\n        bytes32 cpBytes = DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(cp);\\n        return _systemFrozen || _cpFrozen[cpBytes];\\n    }\\n\\n    /// @notice checks if property is frozen\\n    /// @param property Property contract address\\n    function isPropTokenFrozen(address property) public view returns (bool) {\\n        bytes32 cpBytes = DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(_propertyToCP[property]);\\n        return _systemFrozen || _cpFrozen[cpBytes] || _propertyFrozen[property];\\n    }\\n\\n    /// @notice retrieves roles contract address\\n    function getRolesAddress() public view returns (address) {\\n        return _roles;\\n    }\\n\\n    /// @notice retrieves property factory contract address\\n    function getPropertiesFactoryAddress() public view returns (address) {\\n        return _factory;\\n    }\\n\\n    /// @notice retrieves users contract address\\n    function getUsersAddress() public view returns (address) {\\n        return _users;\\n    }\\n\\n    /// @notice retrieves government contract address\\n    function getGovernmentAddress() public view returns (address) {\\n        return _government;\\n    }\\n\\n    /// @notice checks if wallet has system admin rights\\n    /// @param sender Wallet address to check\\n    function hasSystemAdminRights(address sender) public view returns (bool) {\\n        return DataStorageProxyHelpers(_roles).hasSystemAdminRights(sender);\\n    }\\n\\n    /// @notice retrieves certified partners contract address\\n    function getCertifiedPartnersAddress() public view returns (address) {\\n        return _certifiedPartners;\\n    }\\n\\n    /// @notice retrieves blocksquare wallet address which receives fee\\n    function getBlocksquareAddress() public view returns (address) {\\n        return _blocksquare;\\n    }\\n\\n    /// @notice retrieves Certified Partner\\u0027s wallet address that receives fee for given property\\n    /// @param prop Property contract address\\n    /// @return wallet address\\n    function getCPOfProperty(address prop) public view returns (address) {\\n        return _propertyToCP[prop];\\n    }\\n\\n    /// @notice checks if wallet belongs to Certified Partner\\n    /// @param addr Wallet address to check\\n    function isCertifiedPartner(address addr) public view returns (bool) {\\n        return DataStorageProxyHelpers(_certifiedPartners).isCertifiedPartner(addr);\\n    }\\n\\n    /// @notice check if wallet can distribute revenue\\n    /// @param cpWallet Wallet address to check\\n    function canDistributeRent(address cpWallet) public view returns (bool) {\\n        return DataStorageProxyHelpers(_roles).hasSystemAdminRights(cpWallet) || DataStorageProxyHelpers(_certifiedPartners).canCertifiedPartnerDistributeRent(cpWallet);\\n    }\\n\\n    /// @notice check if admin wallet address is admin of property\\n    /// @param admin Admin wallet address\\n    /// @param property Property contract address\\n    function isCPAdminOfProperty(address admin, address property) public view returns (bool) {\\n        address cp = _propertyToCP[property];\\n        return DataStorageProxyHelpers(_certifiedPartners).isCPAdmin(admin, cp);\\n    }\\n\\n    /// @notice check if wallet address can edit property\\n    /// @param wallet Wallet address\\n    /// @param property Property contract address\\n    function canEditProperty(address wallet, address property) public view returns (bool) {\\n        address propOwner = getCPOfProperty(property);\\n        return propOwner == wallet ||\\n        isCPAdminOfProperty(wallet, property) ||\\n        DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(wallet) == DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(propOwner) ||\\n        DataStorageProxyHelpers(_roles).hasSystemAdminRights(wallet);\\n    }\\n\\n    /// @notice retrieves ocean point contracts\\n    function getOceanPointContract() public view returns (address) {\\n        return _oceanPoint;\\n    }\\n\\n    /// @notice retrieves Certified Partner fee\\n    function getCertifiedPartnerFee() public view returns (uint256) {\\n        return _fee.certifiedPartnerFee;\\n    }\\n\\n    /// @notice retrieves Licenced Issuer fee\\n    function getLicencedIssuerFee() public view returns (uint256) {\\n        return _fee.licencedIssuerFee;\\n    }\\n\\n    /// @notice retrieves Blocksquare fee\\n    function getBlocksquareFee() public view returns (uint256) {\\n        return _fee.blocksquareFee;\\n    }\\n\\n    /// @notice retrieves special wallet address\\n    function getSpecialWallet() public view returns (address) {\\n        return _specialWallet;\\n    }\\n\\n    /// @notice checks if contract address can be used for minting and burning\\n    /// @param cont Contract address\\n    function isContractWhitelisted(address cont) public view returns (bool) {\\n        return _whitelistedContract[cont];\\n    }\\n\\n    /// @notice checks if property tokens can be transfered to wallet\\n    /// @param wallet Wallet address\\n    /// @param property Property contract address\\n    function canTransferPropTokensTo(address wallet, address property) public view returns (bool) {\\n        if (wallet == address(0)) {\\n            return false;\\n        }\\n        address cp = getCPOfProperty(property);\\n        bytes32 cpBytes = DataStorageProxyHelpers(_certifiedPartners).getCPBytesFromWallet(cp);\\n        bytes32 userBytes = DataStorageProxyHelpers(_users).getUserBytesFromWallet(wallet);\\n        if (DataStorageProxyHelpers(_certifiedPartners).isUserWhitelisted(cpBytes, userBytes)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"users\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"specialWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeProperty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"CP\",\"type\":\"address\"}],\"name\":\"TransferPropertyToCP\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"addPropertyToCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cpWallet\",\"type\":\"address\"}],\"name\":\"canDistributeRent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"canEditProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"canTransferPropTokensTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blocksquare\",\"type\":\"address\"}],\"name\":\"changeBlocksquareAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"certifiedPartners\",\"type\":\"address\"}],\"name\":\"changeCertifiedPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"changeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"licencedIssuerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksquareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"certifiedPartnerFee\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"government\",\"type\":\"address\"}],\"name\":\"changeGovernmentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oceanPoint\",\"type\":\"address\"}],\"name\":\"changeOceanPointContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"changePropertyToCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roles\",\"type\":\"address\"}],\"name\":\"changeRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specialWallet\",\"type\":\"address\"}],\"name\":\"changeSpecialWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"users\",\"type\":\"address\"}],\"name\":\"changeUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"changeWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"freezeCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prop\",\"type\":\"address\"}],\"name\":\"freezeProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocksquareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocksquareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prop\",\"type\":\"address\"}],\"name\":\"getCPOfProperty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCertifiedPartnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCertifiedPartnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLicencedIssuerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOceanPointContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPropertiesFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRolesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpecialWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"hasSystemAdminRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"isCPAdminOfProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"isCPFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCertifiedPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"isContractWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"isPropTokenFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSystemFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"unfreezeCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prop\",\"type\":\"address\"}],\"name\":\"unfreezeProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DataStorageProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cddd81a19cfd74281c7c5f83415e195b44953ec40000000000000000000000008dbb99cc3721f5c9cc7c9e92db260813cf78cdd300000000000000000000000013344d0cb96b17df81c4171ce47e14ff6c1975f7000000000000000000000000daf5b91755600466d97fc94e520ba31536b6a22c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3d1c261aa9958c9336d80ae0bb6d380e17bbdba77d1078b2e8745af98a7464f1"}]}