{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Metadata {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interface/ITreasuryConfig.sol\r\n\r\n\r\ninterface ITreasuryConfig {\r\n    function treasury() external returns (address payable);\r\n\r\n    function distributionModel() external returns (address);\r\n}\r\n\r\n\r\n// File contracts/interface/IMirrorTreasury.sol\r\n\r\n\r\ninterface IMirrorTreasury {\r\n    function transferFunds(address payable to, uint256 value) external;\r\n\r\n    function transferERC20(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function contributeWithTributary(address tributary) external payable;\r\n\r\n    function contribute(uint256 amount) external payable;\r\n}\r\n\r\n\r\n// File contracts/lib/Ownable.sol\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address private nextOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNextOwner() {\r\n        require(isNextOwner(), \"current owner must set caller as next owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract by setting transaction submitter as initial owner.\r\n     */\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Initiate ownership transfer by setting nextOwner.\r\n     */\r\n    function transferOwnership(address nextOwner_) external onlyOwner {\r\n        require(nextOwner_ != address(0), \"Next owner is the zero address.\");\r\n\r\n        nextOwner = nextOwner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel ownership transfer by deleting nextOwner.\r\n     */\r\n    function cancelOwnershipTransfer() external onlyOwner {\r\n        delete nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership transfer by setting owner.\r\n     */\r\n    function acceptOwnership() external onlyNextOwner {\r\n        delete nextOwner;\r\n\r\n        owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Renounce ownership by setting owner to zero address.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n\r\n        emit OwnershipTransferred(owner, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the next owner.\r\n     */\r\n    function isNextOwner() public view returns (bool) {\r\n        return msg.sender == nextOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/interface/IGovernable.sol\r\n\r\n\r\ninterface IGovernable {\r\n    function changeGovernor(address governor_) external;\r\n\r\n    function isGovernor() external view returns (bool);\r\n\r\n    function governor() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/lib/Governable.sol\r\n\r\n\r\n\r\ncontract Governable is Ownable, IGovernable {\r\n    // ============ Mutable Storage ============\r\n\r\n    // Mirror governance contract.\r\n    address public override governor;\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyGovernance() {\r\n        require(isOwner() || isGovernor(), \"caller is not governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(isGovernor(), \"caller is not governor\");\r\n        _;\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(address owner_) Ownable(owner_) {}\r\n\r\n    // ============ Administration ============\r\n\r\n    function changeGovernor(address governor_) public override onlyGovernance {\r\n        governor = governor_;\r\n    }\r\n\r\n    // ============ Utility Functions ============\r\n\r\n    function isGovernor() public view override returns (bool) {\r\n        return msg.sender == governor;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/Reentrancy.sol\r\n\r\n\r\ncontract Reentrancy {\r\n    // ============ Constants ============\r\n\r\n    uint256 internal constant REENTRANCY_NOT_ENTERED = 1;\r\n    uint256 internal constant REENTRANCY_ENTERED = 2;\r\n\r\n    // ============ Mutable Storage ============\r\n\r\n    uint256 internal reentrancyStatus;\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(reentrancyStatus != REENTRANCY_ENTERED, \"Reentrant call\");\r\n        // Any calls to nonReentrant after this point will fail\r\n        reentrancyStatus = REENTRANCY_ENTERED;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip2200)\r\n        reentrancyStatus = REENTRANCY_NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/producers/editions/allocated/AllocatedEditions.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AllocatedEditions\r\n * @author MirrorXYZ\r\n */\r\ncontract AllocatedEditions is IERC721, IERC165, IERC721Metadata, Governable, Reentrancy {\r\n    // ============ Constants ============\r\n\r\n    // Upon `withdrawFunds`, 2.5% of the contract's balance will\r\n    // be sent to the Mirror DAO treasury. The tributary will\r\n    // be allocated voting power in DAO governance once registered.\r\n    uint256 internal constant feePercentage = 250;\r\n\r\n    // ============ Structs ============\r\n\r\n    // Contains general data about the NFT.\r\n    struct NFTMetadata {\r\n        string name;\r\n        string symbol;\r\n        string baseURI;\r\n        bytes32 contentHash;\r\n    }\r\n\r\n    // Contains information pertaining to the edition spec.\r\n    struct EditionData {\r\n        // The number of tokens pre-allocated to the minter.\r\n        uint256 allocation;\r\n        // The maximum number of tokens that can be sold.\r\n        uint256 quantity;\r\n        // The price at which each token will be sold, in ETH.\r\n        uint256 price;\r\n    }\r\n\r\n    // ============ Storage for Setup ============\r\n\r\n    // From `NFTMetadata`\r\n    string public override name;\r\n    string public override symbol;\r\n    string public baseURI;\r\n    bytes32 immutable contentHash;\r\n\r\n    // From `EditionData`\r\n    uint256 public immutable allocation;\r\n    uint256 public immutable quantity;\r\n    uint256 public immutable price;\r\n\r\n    // Treasury Config, provided at setup, for finding the treasury address.\r\n    address immutable treasuryConfig;\r\n    // Operator of this contract, receives premint.\r\n    address public immutable operator;\r\n    // Address that receive gov tokens via treasury.\r\n    address public immutable tributary;\r\n    // The account that will receive sales revenue.\r\n    address payable immutable fundingRecipient;\r\n\r\n    // ============ Mutable Runtime Storage ============\r\n\r\n    // `nextTokenId` increments with each token purchased, globally across all editions.\r\n    uint256 private nextTokenId;\r\n    // The number of tokens that have moved outside of the pre-mint allocation.\r\n    uint256 private allocationsTransferred = 0;\r\n    // A special mapping of burned tokens, to take care of burning within\r\n    // the tokenId range of the allocation.\r\n    mapping(uint256 => bool) internal _burned;\r\n\r\n    // ============ Events ============\r\n\r\n    event EditionPurchased(\r\n        uint256 indexed tokenId,\r\n        uint256 amountPaid,\r\n        address buyer,\r\n        address receiver\r\n    );\r\n\r\n    event EditionCreatorChanged(\r\n        address indexed previousCreator,\r\n        address indexed newCreator\r\n    );\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        NFTMetadata memory metadata,\r\n        EditionData memory editionData,\r\n        address owner_,\r\n        address treasuryConfig_,\r\n        address operator_,\r\n        address tributary_,\r\n        address payable fundingRecipient_\r\n        \r\n    ) Governable(owner_) {\r\n        // NFT Metadata\r\n        name = metadata.name;\r\n        symbol = metadata.symbol;\r\n        baseURI = metadata.baseURI;\r\n        contentHash = metadata.contentHash;\r\n\r\n        // Edition Data.\r\n        allocation = editionData.allocation;\r\n        nextTokenId = editionData.allocation;\r\n        quantity = editionData.quantity;\r\n        price = editionData.price;\r\n\r\n        // Administration config.\r\n        treasuryConfig = treasuryConfig_;\r\n        tributary = tributary_;\r\n        operator = operator_;\r\n        fundingRecipient = fundingRecipient_;\r\n    }\r\n\r\n    // ============ Edition Methods ============\r\n\r\n    function purchase(address recipient)\r\n        external\r\n        payable\r\n        returns (uint256 tokenId)\r\n    {\r\n        // Check that enough funds have been sent to purchase an edition.\r\n        require(msg.value >= price, \"Insufficient funds sent\");\r\n        // Track and update token id.\r\n        tokenId = nextTokenId;\r\n        nextTokenId++;\r\n        // Check that there are still tokens available to purchase.\r\n        require(tokenId < quantity, \"This edition is sold out\");\r\n        // Mint a new token for the sender, using the `tokenId`.\r\n        _mint(recipient, tokenId);\r\n        emit EditionPurchased(tokenId, msg.value, msg.sender, recipient);\r\n        return tokenId;\r\n    }\r\n\r\n    // ============ NFT Methods ============\r\n\r\n    function balanceOf(address owner_) public view override returns (uint256) {\r\n        if (owner_ == operator) {\r\n            return _balances[owner_] + allocation - allocationsTransferred;\r\n        }\r\n\r\n        require(\r\n            owner_ != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n\r\n        return _balances[owner_];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        // The owner if the operator if the token hasn't been transferred or\r\n        // bought, and it's within the range of the allocation.\r\n        if (\r\n            _owners[tokenId] == address(0) &&\r\n            tokenId < allocation &&\r\n            !_burned[tokenId]\r\n        ) {\r\n            return operator;\r\n        }\r\n\r\n        address _owner = _owners[tokenId];\r\n\r\n        require(\r\n            _owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n\r\n        return _owner;\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        require(\r\n            _isApprovedOrOwner(msg.sender, tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(baseURI, _toString(tokenId)));\r\n    }\r\n\r\n    // Returns e.g. https://mirror-api.com/editions/metadata\r\n    function contractURI() public view returns (string memory) {\r\n        return string(abi.encodePacked(baseURI, \"metadata\"));\r\n    }\r\n\r\n    // The hash of the given content for the NFT. Can be used\r\n    // for IPFS storage, verifying authenticity, etc.\r\n    function getContentHash(uint256) public view returns (bytes32) {\r\n        return contentHash;\r\n    }\r\n\r\n    function getRoyaltyRecipient(uint256) public view returns (address) {\r\n        return fundingRecipient;\r\n    }\r\n\r\n    // ============ Operational Methods ============\r\n\r\n    function withdrawFunds() external Reentrancy.nonReentrant {\r\n        // Transfer the fee to the treasury.\r\n        // Treasury fee is paid first for efficiency, so we don't have to calculate\r\n        // the fee and the revenue amount. Also prevents a reentrancy attack scenario that\r\n        // avoids paying treasury.\r\n        IMirrorTreasury(ITreasuryConfig(treasuryConfig).treasury())\r\n            .contributeWithTributary{value: feeAmount(address(this).balance)}(\r\n            tributary\r\n        );\r\n\r\n        // Transfer the remaining available balance to the fundingRecipient.\r\n        _sendFunds(fundingRecipient, address(this).balance);\r\n    }\r\n\r\n    function feeAmount(uint256 amount) public pure returns (uint256) {\r\n        return (feePercentage * amount) / 10000;\r\n    }\r\n\r\n    // ============ Admin Methods ============\r\n\r\n    function changeBaseURI(string memory baseURI_) public onlyGovernance {\r\n        baseURI = baseURI_;\r\n    }\r\n\r\n    // ============ Private Methods ============\r\n\r\n    // From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\r\n    function _toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function _sendFunds(address payable recipient, uint256 amount) private {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Insufficient balance for send\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Unable to send value: recipient may have reverted\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        if (tokenId < allocation && !_burned[tokenId]) {\r\n            return true;\r\n        }\r\n\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        address owner_ = ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        if (_balances[owner_] > 0) {\r\n            _balances[owner_] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        _burned[tokenId] = true;\r\n\r\n        emit Transfer(owner_, address(0), tokenId);\r\n\r\n        if (tokenId < allocation) {}\r\n    }\r\n\r\n    mapping(uint256 => address) internal _owners;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(uint256 => address) internal _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address approver, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(approver != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][approver] = approved;\r\n        emit ApprovalForAll(msg.sender, approver, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator_];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(msg.sender, tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(msg.sender, tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(\r\n            to != address(0),\r\n            \"ERC721: transfer to the zero address (use burn instead)\"\r\n        );\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        if (_balances[from] > 0) {\r\n            _balances[from] -= 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        if (from == operator && tokenId < allocation) {\r\n            allocationsTransferred += 1;\r\n            _balances[to] += 1;\r\n        } else if (to == operator && tokenId < allocation) {\r\n            allocationsTransferred -= 1;\r\n        } else {\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (isContract(to)) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7f6a1666fac8ecff5dd467d0938069bc221ea9e0/contracts/utils/Address.sol\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct AllocatedEditions.NFTMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct AllocatedEditions.EditionData\",\"name\":\"editionData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryConfig_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tributary_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"fundingRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"EditionCreatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EditionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"changeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getContentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNextOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tributary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AllocatedEditions","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000002330ee705ffd040bb0cba8cb7734dfe00e7c4b5700000000000000000000000021a93be569666527dae0fdbfbe7715299dec1202000000000000000000000000b96e81f80b3aeef65cb6d0e280b15fd5dbe71937000000000000000000000000467aadc88d99b4e978a8d3d4f0a9017dcaecaabf000000000000000000000000b96e81f80b3aeef65cb6d0e280b15fd5dbe71937000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100c72fbc577db445cdaafc0592ec8cf968e52428b7b21a7e658858746cbdeabc9e0000000000000000000000000000000000000000000000000000000000000016476f6c64656e20546f6b656e3a204e657720596f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000447544e5900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c68747470733a2f2f6d6972726f722d6170692e636f6d2f65646974696f6e732f637573746f6d2f67746e792f0000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9c4ae821d6787292ef8d04b8974bc2da85dcf4f0dd0b472b0b6d6c380f624f9"}]}