{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/libs/LeniaDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @title The library to get the Lenia metadata\\n\\n/**********************************************\\n *                        .                   *\\n *                          ,,                *\\n *                      ......*#*             *\\n *                 .......    ..*%%,          *\\n *          .,,****,..             ,#(.       *\\n *         .,**((((*,.               .*(.     *\\n *          .**((**,,,,,,,             .*,    *\\n *        .......,,**(((((((*.          .,,   *\\n *       ...      ,*((##%&&&&@&(,        .,.  *\\n *       ..        ,((#&&@@@@@@@@&(*.  ..,,.  *\\n *    ,. ..          ,#&@@@@@@@@@@@%#(*,,,,.  *\\n *      ((,.           *%@@@@&%%%&&%#(((*,,.  *\\n *        (&*            *%@@@&&%%##(((**,.   *\\n *          (&(           .*(#%%##(((**,,.    *\\n *            .((,         .,*(((((**,..      *\\n *               .,*,,.....,,,,*,,,..         *\\n *                    ..........              *\\n**********************************************/\\n\\npragma solidity ^0.8.6;\\n\\nlibrary LeniaDescriptor {\\n    string public constant NAME_PREFIX = \\\"Lenia #\\\";\\n    string public constant DESCRIPTION = \\\"A beautiful lifeform creature known as Lenia.\\\";\\n    string public constant EXTERNAL_LINK = \\\"https://lenia.world\\\";\\n\\n    struct LeniaAttribute {\\n        uint16 traitType;\\n        uint16 value;\\n        string numericalValue;\\n    }\\n\\n    struct LeniaParams {\\n        string m;\\n        string s;\\n        bytes cells;\\n    }\\n\\n    struct LeniaMetadata {\\n        bool metadataReady;\\n        string stringID;\\n        string imageURL;\\n        string animationURL;\\n        LeniaAttribute[] leniaAttributes;\\n    }\\n\\n    /**\\n     * @notice Construct an ERC721 token URI.\\n     */\\n    function constructTokenURI(LeniaMetadata memory metadata, LeniaParams memory leniaParams)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory nameField = abi.encodePacked(\\n            '\\\"name\\\":\\\"', NAME_PREFIX, metadata.stringID, '\\\"'\\n        );\\n        bytes memory descField = abi.encodePacked(\\n            '\\\"description\\\":\\\"', DESCRIPTION, '\\\"'\\n        );\\n        bytes memory extLinkField = abi.encodePacked(\\n            '\\\"external_link\\\":\\\"', EXTERNAL_LINK, '\\\"'\\n        );\\n        bytes memory imgField = abi.encodePacked(\\n            '\\\"image\\\":\\\"', metadata.imageURL, '\\\"'\\n        );\\n        bytes memory animationField = abi.encodePacked(\\n            '\\\"animation_url\\\":\\\"', metadata.animationURL, '\\\"'\\n        );\\n        bytes memory attrField = abi.encodePacked(\\n            '\\\"attributes\\\":', getAttributesJSON(metadata)\\n        );\\n        bytes memory configField = abi.encodePacked(\\n            '\\\"config\\\": ', getConfigJSON(leniaParams)\\n        );\\n\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json,\\\",\\n                abi.encodePacked(\\n                    \\\"{\\\",\\n                        nameField, \\\",\\\",\\n                        descField, \\\",\\\",\\n                        extLinkField, \\\",\\\",\\n                        imgField, \\\",\\\",\\n                        animationField, \\\",\\\",\\n                        attrField, \\\",\\\",\\n                        configField,\\n                    \\\"}\\\"\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the Lenia attributes\\n     */\\n    function getAttributesJSON(LeniaMetadata memory metadata)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory output = \\\"[\\\";\\n        for (uint256 index = 0; index < metadata.leniaAttributes.length; index++) {\\n            if (bytes(output).length == 1) {\\n                output = string(abi.encodePacked(\\n                    output,\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            } else {\\n                output = string(abi.encodePacked(\\n                    output, \\\",\\\",\\n                    getAttributeJSON(metadata.leniaAttributes[index])\\n                ));\\n            }\\n\\n        }\\n        string memory v;\\n        if (metadata.leniaAttributes.length > 0){\\n            v = ',';\\n        } else {\\n            v = '';\\n        }\\n        output = string(abi.encodePacked(\\n            output,\\n            v,\\n            '{\\\"value\\\": \\\"oui\\\", \\\"trait_type\\\":\\\"On Chain\\\"}',\\n            \\\"]\\\"\\n        ));\\n\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get one Lenia attribute\\n     */\\n    function getAttributeJSON(LeniaAttribute memory attr)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        string memory currentTraitType = getTraitType(attr.traitType);\\n        bytes32 currentTraitTypeHash = keccak256(bytes(currentTraitType));\\n        string memory currentValue;\\n        if (currentTraitTypeHash == keccak256(bytes(\\\"Colormap\\\"))) {\\n            currentValue = getColormap(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Family\\\"))) {\\n            currentValue = getFamily(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Ki\\\"))) {\\n            currentValue = getKi(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Aura\\\"))) {\\n            currentValue = getAura(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Weight\\\"))) {\\n            currentValue = getWeight(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Robustness\\\"))) {\\n            currentValue = getRobustness(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Avoidance\\\"))) {\\n            currentValue = getAvoidance(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Velocity\\\"))) {\\n            currentValue = getVelocity(attr.value);\\n        } else if (currentTraitTypeHash == keccak256(bytes(\\\"Spread\\\"))) {\\n            currentValue = getSpread(attr.value);\\n        }\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"value\\\":\\\"', currentValue, '\\\",',\\n                '\\\"trait_type\\\":\\\"', currentTraitType, '\\\",',\\n                '\\\"numerical_value\\\":', attr.numericalValue,\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the trait type\\n     */\\n    function getTraitType(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[9] memory traitTypes = [\\n            \\\"Colormap\\\", \\\"Family\\\", \\\"Ki\\\", \\\"Aura\\\", \\\"Weight\\\", \\\"Robustness\\\", \\\"Avoidance\\\", \\\"Velocity\\\", \\\"Spread\\\"\\n        ];\\n\\n        return traitTypes[index];\\n    }\\n\\n    /**\\n     * @notice Get the colormap type\\n     */\\n     function getColormap(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[10] memory colormaps = [\\n            \\\"Black White\\\", \\\"Carmine Blue\\\", \\\"Carmine Green\\\", \\\"Cinnamon\\\", \\\"Golden\\\", \\\"Msdos\\\", \\\"Rainbow\\\", \\\"Rainbow_transparent\\\", \\\"Salvia\\\", \\\"White Black\\\"\\n        ];\\n\\n        return colormaps[index];\\n    }\\n\\n    /**\\n     * @notice Get the family\\n     */\\n    function getFamily(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[12] memory families = [\\n            \\\"Genesis\\\", \\\"Aquarium\\\", \\\"Terrarium\\\", \\\"Aerium\\\", \\\"Ignis\\\", \\\"Maelstrom\\\", \\\"Amphibium\\\", \\\"Pulsium\\\", \\\"Etherium\\\", \\\"Nexus\\\", \\\"Oscillium\\\", \\\"Kaleidium\\\"\\n        ];\\n\\n        return families[index];\\n    }\\n\\n    /**\\n     * @notice Get the ki\\n     */\\n    function getKi(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[4] memory kis = [\\n            \\\"Kiai\\\", \\\"Kiroku\\\", \\\"Kihaku\\\", \\\"Hibiki\\\"\\n        ];\\n\\n        return kis[index];\\n    }\\n\\n    /**\\n     * @notice Get the aura\\n     */\\n    function getAura(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory auras = [\\n            \\\"Etheric\\\", \\\"Mental\\\", \\\"Astral\\\", \\\"Celestial\\\", \\\"Spiritual\\\"\\n        ];\\n\\n        return auras[index];\\n    }\\n\\n    /**\\n     * @notice Get the weight\\n     */\\n    function getWeight(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory weights = [\\n            \\\"Fly\\\", \\\"Feather\\\", \\\"Welter\\\", \\\"Cruiser\\\", \\\"Heavy\\\"\\n        ];\\n\\n        return weights[index];\\n    }\\n\\n    /**\\n     * @notice Get the robustness\\n     */\\n    function getRobustness(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory robustnesss = [\\n            \\\"Aluminium\\\", \\\"Iron\\\", \\\"Steel\\\", \\\"Tungsten\\\", \\\"Vibranium\\\"\\n        ];\\n\\n        return robustnesss[index];\\n    }\\n\\n    /**\\n     * @notice Get the avoidance\\n     */\\n    function getAvoidance(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory avoidances = [\\n            \\\"Kawarimi\\\", \\\"Shunshin\\\", \\\"Raiton\\\", \\\"Hiraishin\\\", \\\"Kamui\\\"\\n        ];\\n\\n        return avoidances[index];\\n    }\\n\\n    /**\\n     * @notice Get the velocity\\n     */\\n    function getVelocity(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory velocitys = [\\n            \\\"Immovable\\\", \\\"Unrushed\\\", \\\"Swift\\\", \\\"Turbo\\\", \\\"Flash\\\"\\n        ];\\n\\n        return velocitys[index];\\n    }\\n\\n    /**\\n     * @notice Get the spread\\n     */\\n    function getSpread(uint16 index)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string[5] memory spreads = [\\n            \\\"Demie\\\", \\\"Standard\\\", \\\"Magnum\\\", \\\"Jeroboam\\\", \\\"Balthazar\\\"\\n        ];\\n\\n        return spreads[index];\\n    }\\n\\n    /**\\n     * @notice Get the Lenia configuration\\n     */\\n    function getConfigJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        // We can't return cells here because cells are raw bytes which can't be easily converted to utf8 string\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"kernels_params\\\":', getKernelParamsJSON(leniaParams), ',',\\n                '\\\"world_params\\\":', getWorldParamsJSON(),\\n            \\\"}\\\"\\n        ));\\n    }\\n\\n    /**\\n     * @notice Get the Lenia world_params\\n     */\\n    function getWorldParamsJSON()\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return '{\\\"R\\\": 13, \\\"T\\\": 10, \\\"nb_channels\\\": 1, \\\"nb_dims\\\": 2, \\\"scale\\\": 1}';\\n    }\\n\\n    /**\\n     * @notice Get the Lenia kernels_metadata\\n     */\\n    function getKernelParamsJSON(LeniaParams memory leniaParams)\\n        private\\n        pure\\n        returns (string memory json)\\n    {\\n        return string(abi.encodePacked(\\n            \\\"[\\\",\\n                '{\\\"b\\\": \\\"1\\\", \\\"c_in\\\": 0, \\\"c_out\\\": 0, \\\"gf_id\\\": 0, \\\"h\\\": 1, \\\"k_id\\\": 0,',\\n                '\\\"m\\\": ', leniaParams.m, ',',\\n                '\\\"q\\\": 4, \\\"r\\\": 1,',\\n                '\\\"s\\\": ', leniaParams.s, '}',\\n            \\\"]\\\"\\n        ));\\n    }\\n\\n    function isReady(LeniaMetadata memory metadata, LeniaParams memory leniaParams)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool paramsReady = leniaParams.cells.length != 0 && bytes(leniaParams.m).length != 0 && bytes(leniaParams.s).length != 0;\\n\\n        return metadata.metadataReady && paramsReady;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTERNAL_LINK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"metadataReady\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"stringID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"leniaAttributes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LeniaDescriptor.LeniaMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"cells\",\"type\":\"bytes\"}],\"internalType\":\"struct LeniaDescriptor.LeniaParams\",\"name\":\"leniaParams\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"metadataReady\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"stringID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"traitType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"numericalValue\",\"type\":\"string\"}],\"internalType\":\"struct LeniaDescriptor.LeniaAttribute[]\",\"name\":\"leniaAttributes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LeniaDescriptor.LeniaMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"cells\",\"type\":\"bytes\"}],\"internalType\":\"struct LeniaDescriptor.LeniaParams\",\"name\":\"leniaParams\",\"type\":\"tuple\"}],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"LeniaDescriptor","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}