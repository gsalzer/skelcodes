{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MatrixPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/MatrixPoolInterface.sol\\\";\\nimport \\\"./interfaces/MatrixPoolFactoryInterface.sol\\\";\\n\\ncontract MatrixPoolActions {\\n  struct Args {\\n    uint256 minWeightPerSecond;\\n    uint256 maxWeightPerSecond;\\n    uint256 swapFee;\\n    uint256 communitySwapFee;\\n    uint256 communityJoinFee;\\n    uint256 communityExitFee;\\n    address communityFeeReceiver;\\n    bool finalize;\\n  }\\n\\n  struct TokenConfig {\\n    address token;\\n    uint256 balance;\\n    uint256 targetDenorm;\\n    uint256 fromTimestamp;\\n    uint256 targetTimestamp;\\n  }\\n\\n  function create(\\n    MatrixPoolFactoryInterface factory,\\n    string calldata name,\\n    string calldata symbol,\\n    Args calldata args,\\n    TokenConfig[] calldata tokens\\n  ) external returns (MatrixPoolInterface pool) {\\n    pool = factory.newPool(name, symbol, address(this), args.minWeightPerSecond, args.maxWeightPerSecond);\\n    pool.setSwapFee(args.swapFee);\\n    pool.setCommunityFeeAndReceiver(\\n      args.communitySwapFee,\\n      args.communityJoinFee,\\n      args.communityExitFee,\\n      args.communityFeeReceiver\\n    );\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      TokenConfig memory tokenConfig = tokens[i];\\n      IERC20 token = IERC20(tokenConfig.token);\\n      require(token.transferFrom(msg.sender, address(this), tokenConfig.balance), \\\"ERR_TRANSFER_FAILED\\\");\\n      if (token.allowance(address(this), address(pool)) > 0) {\\n        token.approve(address(pool), 0);\\n      }\\n      token.approve(address(pool), tokenConfig.balance);\\n      pool.bind(\\n        tokenConfig.token,\\n        tokenConfig.balance,\\n        tokenConfig.targetDenorm,\\n        tokenConfig.fromTimestamp,\\n        tokenConfig.targetTimestamp\\n      );\\n    }\\n\\n    if (args.finalize) {\\n      pool.finalize();\\n      require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    pool.setController(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MatrixPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BPoolInterface.sol\\\";\\n\\ninterface MatrixPoolInterface is BPoolInterface {\\n  function initialize(\\n    string calldata name,\\n    string calldata symbol,\\n    uint256 minWeightPerSecond,\\n    uint256 maxWeightPerSecond\\n  ) external;\\n\\n  function bind(\\n    address,\\n    uint256,\\n    uint256,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function setDynamicWeight(\\n    address token,\\n    uint256 targetDenorm,\\n    uint256 fromTimestamp,\\n    uint256 targetTimestamp\\n  ) external;\\n\\n  function getDynamicWeightSettings(address token)\\n    external\\n    view\\n    returns (\\n      uint256 fromTimestamp,\\n      uint256 targetTimestamp,\\n      uint256 fromDenorm,\\n      uint256 targetDenorm\\n    );\\n\\n  function getMinWeight() external view override returns (uint256);\\n\\n  function getWeightPerSecondBounds() external view returns (uint256, uint256);\\n\\n  function setWeightPerSecondBounds(uint256, uint256) external;\\n\\n  function setWrapper(address, bool) external;\\n\\n  function getWrapperMode() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/MatrixPoolFactoryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./MatrixPoolInterface.sol\\\";\\n\\ninterface MatrixPoolFactoryInterface {\\n  function newPool(\\n    string calldata _name,\\n    string calldata _symbol,\\n    address _controller,\\n    uint256 _minWeightPerSecond,\\n    uint256 _maxWeightPerSecond\\n  ) external returns (MatrixPoolInterface);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/BPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BMathInterface.sol\\\";\\n\\ninterface BPoolInterface is IERC20, BMathInterface {\\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n  function swapExactAmountIn(\\n    address,\\n    uint256,\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256, uint256);\\n\\n  function swapExactAmountOut(\\n    address,\\n    uint256,\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256, uint256);\\n\\n  function joinswapExternAmountIn(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function joinswapPoolAmountOut(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function exitswapPoolAmountIn(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function exitswapExternAmountOut(\\n    address,\\n    uint256,\\n    uint256\\n  ) external returns (uint256);\\n\\n  function getDenormalizedWeight(address) external view returns (uint256);\\n\\n  function getBalance(address) external view returns (uint256);\\n\\n  function getSwapFee() external view returns (uint256);\\n\\n  function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n  function getCommunityFee()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      address\\n    );\\n\\n  function calcAmountWithCommunityFee(\\n    uint256,\\n    uint256,\\n    address\\n  ) external view returns (uint256, uint256);\\n\\n  function getRestrictions() external view returns (address);\\n\\n  function isSwapsDisabled() external view returns (bool);\\n\\n  function isFinalized() external view returns (bool);\\n\\n  function isBound(address t) external view returns (bool);\\n\\n  function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n  function getFinalTokens() external view returns (address[] memory tokens);\\n\\n  function setSwapFee(uint256) external;\\n\\n  function setCommunityFeeAndReceiver(\\n    uint256,\\n    uint256,\\n    uint256,\\n    address\\n  ) external;\\n\\n  function setController(address) external;\\n\\n  function setSwapsDisabled(bool) external;\\n\\n  function finalize() external;\\n\\n  function bind(\\n    address,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function rebind(\\n    address,\\n    uint256,\\n    uint256\\n  ) external;\\n\\n  function unbind(address) external;\\n\\n  function gulp(address) external;\\n\\n  function callVoting(\\n    address voting,\\n    bytes4 signature,\\n    bytes calldata args,\\n    uint256 value\\n  ) external;\\n\\n  function getMinWeight() external view returns (uint256);\\n\\n  function getMaxBoundTokens() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/BMathInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface BMathInterface {\\n  function calcInGivenOut(\\n    uint256 tokenBalanceIn,\\n    uint256 tokenWeightIn,\\n    uint256 tokenBalanceOut,\\n    uint256 tokenWeightOut,\\n    uint256 tokenAmountOut,\\n    uint256 swapFee\\n  ) external pure returns (uint256 tokenAmountIn);\\n\\n  function calcSingleInGivenPoolOut(\\n    uint256 tokenBalanceIn,\\n    uint256 tokenWeightIn,\\n    uint256 poolSupply,\\n    uint256 totalWeight,\\n    uint256 poolAmountOut,\\n    uint256 swapFee\\n  ) external pure returns (uint256 tokenAmountIn);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract MatrixPoolFactoryInterface\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minWeightPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeightPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communitySwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityJoinFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityExitFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"communityFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"internalType\":\"struct MatrixPoolActions.Args\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetDenorm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MatrixPoolActions.TokenConfig[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract MatrixPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MatrixPoolActions","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}