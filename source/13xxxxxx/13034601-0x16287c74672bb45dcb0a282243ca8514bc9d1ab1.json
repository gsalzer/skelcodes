{"status":"1","message":"OK","result":[{"SourceCode":"{\"MomaFactoryProxy.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MomaFactoryStorage.sol\\\";\\n/**\\n * @title MomaFactoryProxy\\n * @dev Storage for the MomaFactory is at this address, while execution is delegated to the `momaFactoryImplementation`.\\n */\\n\\ncontract MomaFactoryProxy is MomaFactoryProxyStorage {\\n\\n    /**\\n      * @notice Emitted when pendingMomaFactoryImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingMomaFactoryImplementation is accepted, which means momaFactory implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n        feeAdmin = msg.sender;\\n        defualtFeeReceiver = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public {\\n\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n\\n        address oldPendingImplementation = pendingMomaFactoryImplementation;\\n\\n        pendingMomaFactoryImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaFactoryImplementation);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of momaFactory. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it\\u0027s role as implementation\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\n        require(msg.sender == pendingMomaFactoryImplementation \\u0026\\u0026 msg.sender != address(0), \\u0027MomaFactory: pendingImplementation check\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = momaFactoryImplementation;\\n        address oldPendingImplementation = pendingMomaFactoryImplementation;\\n\\n        momaFactoryImplementation = pendingMomaFactoryImplementation;\\n\\n        pendingMomaFactoryImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, momaFactoryImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaFactoryImplementation);\\n\\n        return 0;\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      */\\n    function _acceptAdmin() public {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        require(msg.sender == pendingAdmin \\u0026\\u0026 msg.sender != address(0), \\u0027MomaFactory: pendingAdmin check\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = momaFactoryImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"},\"MomaFactoryStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\ncontract MomaFactoryProxyStorage {\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    address public momaFactoryImplementation;\\n    address public pendingMomaFactoryImplementation;\\n\\n    address public feeAdmin;\\n    address payable public defualtFeeReceiver;\\n}\\n\\n\\ncontract MomaFactoryStorage is MomaFactoryProxyStorage {\\n\\n    address public momaFarming;\\n    address public farmingDelegate;\\n\\n    address public oracle;\\n    address public timelock;\\n    address public momaMaster;\\n    address public mEther;\\n    address public mErc20;\\n    address public mEtherImplementation;\\n    address public mErc20Implementation;\\n\\n    uint public defualtFeeFactorMantissa;\\n    uint public lendingPoolNum;\\n    bool public allowUpgrade;\\n\\n    struct PoolInfo {\\n        address creator;\\n        address poolFeeAdmin;\\n        address payable poolFeeReceiver;\\n        uint feeFactor;\\n        bool noFee;\\n        bool isLending;\\n        bool allowUpgrade;\\n    }\\n\\n    mapping(address =\\u003e bool) public noFeeTokens;\\n    mapping(address =\\u003e uint) public tokenFeeFactors;\\n    mapping(address =\\u003e PoolInfo) public pools;\\n    address[] public allPools;\\n\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defualtFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"momaFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMomaFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MomaFactoryProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0xe0a1034f382948068f9d0ec40ed743cd8c712e14","SwarmSource":"bzzr://700de50b061e8e05085f1c9e95a6ec7544c55ab37d34b6aa9750076c78940908"}]}