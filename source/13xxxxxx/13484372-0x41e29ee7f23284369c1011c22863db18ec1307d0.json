{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IVersion {\r\n    /**\r\n     * @dev Returns version based on semantic versioning format.\r\n     */\r\n    function version() external pure returns (string memory);\r\n}\r\n\r\ncontract FlexPaymentDivider is Ownable, IVersion {\r\n    using Address for address payable;\r\n\r\n    uint256 private _recipientCount;\r\n    mapping(uint256 => address payable) private _recipientsById;\r\n    mapping(address => uint256) private _percentagesByRecipient;\r\n    mapping(address => uint256) private _balancesByRecipient;\r\n    mapping(address => uint256) private _changeByRecipient;\r\n    // 0 = false, 1 = true\r\n    mapping(address => uint8) private _isWithdrawingByAccount;\r\n\r\n    /**\r\n     * @notice Sets recipients and the percentage of each deposit sent to them.\r\n     * @dev {_setupRecipients} is only used once--here, upon deployment.\r\n     * @param recipients_ Accounts to receive percentage of deposits.\r\n     * @param percentages_ Percentage of deposit each account should receive.\r\n     * Order matters.\r\n     */\r\n    constructor(\r\n        address payable[] memory recipients_,\r\n        uint256[] memory percentages_\r\n    ) {\r\n        _setupRecipients(recipients_, percentages_);\r\n    }\r\n\r\n    function version() external pure override returns (string memory) {\r\n        return \"1.0.0\";\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of recipients each deposit is divided by.\r\n     * @return Number of recipients.\r\n     */\r\n    function recipientCount() public view returns (uint256) {\r\n        return _recipientCount;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns recipient with the given id.\r\n     * @param id Integer.\r\n     * @return Ethereum account address.\r\n     */\r\n    function recipientById(uint256 id) public view returns (address) {\r\n        return _recipientsById[id];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the percentage of each deposit the recipient receives.\r\n     * @param recipient Ethereum account address.\r\n     * @return Amount of 100.\r\n     */\r\n    function percentage(address recipient) public view returns (uint256) {\r\n        return _percentagesByRecipient[recipient];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the balance the recipient has accumulated.\r\n     * @param recipient Ethereum account address.\r\n     * @return Amount of wei.\r\n     */\r\n    function accumulatedBalance(address recipient) public view returns (uint256) {\r\n        return _balancesByRecipient[recipient];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the amount of change the recipient has accumulated.\r\n     * @param recipient Ethereum account address.\r\n     * @return Fraction of wei as an amount out of 100.\r\n     */\r\n    function accumulatedChange(address recipient) public view returns (uint256) {\r\n        return _changeByRecipient[recipient];\r\n    }\r\n\r\n    /**\r\n     * @notice Increases balance for each recipient by their designated\r\n     * percenatage of the Ether sent with this call.\r\n     * @custom:require Caller must be owner.\r\n     * @custom:require Message value must be greater than 0.\r\n     * @dev Solidity rounds towards zero so we accumulate change here that is\r\n     * transferred once it exceeds a fractional amount of wei.\r\n     *\r\n     * @custom:warning\r\n     * ===============\r\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\r\n     * sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     */\r\n    function deposit() public payable onlyOwner {\r\n        require(\r\n            msg.value > 0,\r\n            \"FlexPaymentDivider: Insufficient message value\"\r\n        );\r\n        for (uint256 i = 0; i < _recipientCount; i++) {\r\n            address payable recipient = _recipientsById[i];\r\n            uint256 change = (msg.value * _percentagesByRecipient[recipient]) % 100;\r\n            uint256 amount = (msg.value * _percentagesByRecipient[recipient]) / 100;\r\n            uint256 totalChange = _changeByRecipient[recipient] + change;\r\n            _changeByRecipient[recipient] = totalChange;\r\n            if (totalChange >= 100) {\r\n                _changeByRecipient[recipient] = totalChange % 100;\r\n                amount += (totalChange / 100);\r\n            }\r\n            _balancesByRecipient[recipient] += amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers to each recipient their designated percenatage of the\r\n     * Ether held by this contract.\r\n     * @custom:require Caller must be owner.\r\n     *\r\n     * @custom:warning\r\n     * ===============\r\n     * A denial of service attack is possible if any of the recipients revert.\r\n     * The {withdraw} method can be used in the event of this attack.\r\n     *\r\n     * @custom:warning\r\n     * ===============\r\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\r\n     * sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     */\r\n    function disperse() public onlyOwner {\r\n        for (uint256 i = 0; i < _recipientCount; i++) {\r\n            address payable recipient = _recipientsById[i];\r\n            withdraw(recipient);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers to recipient their designated percentage of the Ether\r\n     * held in this contract.\r\n     * @custom:require Caller must not already be withdrawing.\r\n     * @custom:require Balance to withdraw must be above 0.\r\n     *\r\n     * @custom:warning\r\n     * ===============\r\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\r\n     * sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     */\r\n    function withdraw(address payable recipient) public {\r\n        require(\r\n            !isWithdrawing(_msgSender()),\r\n            \"FlexPaymentDivider: Can not reenter\"\r\n        );\r\n        _isWithdrawingByAccount[_msgSender()] = 1;\r\n\r\n        uint256 amount = _balancesByRecipient[recipient];\r\n        // IMPORTANT: Do not revert here so `disperse` can not have DoS when a\r\n        // recipient does not yet have a balance to withdraw.\r\n        if (amount > 0) {\r\n            _balancesByRecipient[recipient] = 0;\r\n            recipient.sendValue(amount);\r\n        }\r\n\r\n        _isWithdrawingByAccount[_msgSender()] = 0;\r\n    }\r\n\r\n    /* INTERNAL */\r\n\r\n    /**\r\n     * @dev Sets mappings for recipients and respective percentages.\r\n     * This method is only used once in the constructor. Recipients and\r\n     * percentages can not be modified after deployment.\r\n     * @custom:require Input lengths must be equal. Order matters.\r\n     * @custom:require Each percentage must be above 0 and below 100.\r\n     * @custom:require The sum of all percentages must be 100.\r\n     * @param recipients_ Account addresses receiving a percentage of deposited\r\n     * funds.\r\n     * @param percentages_ Amounts for accounts at the same index in the\r\n     * {recipients} parameter to allocate from deposited funds.\r\n     *\r\n     * @custom:warning\r\n     * ===============\r\n     * Recipient accounts should be trusted.\r\n     */\r\n    function _setupRecipients(\r\n        address payable[] memory recipients_,\r\n        uint256[] memory percentages_\r\n    ) internal {\r\n        require(\r\n            recipients_.length == percentages_.length,\r\n            \"FlexPaymentDivider: Unequal input lengths\"\r\n        );\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < recipients_.length; i++) {\r\n            require(\r\n                percentages_[i] > 0,\r\n                \"FlexPaymentDivider: Percentage must exceed 0\"\r\n            );\r\n            require(\r\n                percentages_[i] <= 100,\r\n                \"FlexPaymentDivider: Percentage must not exceed 100\"\r\n            );\r\n            sum += percentages_[i];\r\n            _recipientCount += 1;\r\n            _recipientsById[i] = recipients_[i];\r\n            _percentagesByRecipient[_recipientsById[i]] = percentages_[i];\r\n        }\r\n        require(sum == 100, \"FlexPaymentDivider: Percentages must sum to 100\");\r\n    }\r\n\r\n    function isWithdrawing(address account) internal view returns (bool) {\r\n        return _isWithdrawingByAccount[account] == 1;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"accumulatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"accumulatedChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"recipientById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlexPaymentDivider","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f8f3b85602dd8b4effd5868c881305ec305c590c00000000000000000000000037df9c15af093878a22fda7a4d0a2b721838bdf30000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f266f3fe04b0d61f6ea4386db0d3e2aa8bdf2a84f3d25fe034a0b53b397a8b4b"}]}