{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/pirate/PirateGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"./interfaces/IFleet.sol\\\";\\r\\nimport \\\"./interfaces/ICACAO.sol\\\";\\r\\nimport \\\"./interfaces/IPnG.sol\\\";\\r\\n\\r\\nimport \\\"./utils/Accessable.sol\\\";\\r\\nimport \\\"./utils/Wnitelist.sol\\\";\\r\\n\\r\\n\\r\\ncontract PirateGame is Accessable, Whitelist, ReentrancyGuard, Pausable {\\r\\n\\r\\n    event MintCommitted(address indexed owner, uint256 indexed amount);\\r\\n    event MintRevealed(address indexed owner, uint256 indexed amount);\\r\\n\\r\\n    //$CACAO cost \\r\\n    uint256[3] private _cacaoCost = [20000 ether, 40000 ether, 80000 ether];\\r\\n    uint16 public maxBunchSize = 10;\\r\\n\\r\\n    bool public allowCommits = true;\\r\\n\\r\\n    bool public isWhitelistSale = true;\\r\\n    bool public isPublicSale = false;\\r\\n    uint256 public presalePrice = 0.06 ether;\\r\\n    uint256 public treasureChestTypeId;\\r\\n\\r\\n\\r\\n    uint256 public startedTime = 0;\\r\\n\\r\\n    uint256 private maxPrice = 0.3266 ether;\\r\\n    uint256 private minPrice = 0.0666 ether;\\r\\n    uint256 private priceDecrementAmt = 0.01 ether;\\r\\n    uint256 private timeToDecrementPrice = 30 minutes;\\r\\n\\r\\n\\r\\n\\r\\n    mapping(address => uint16) public whitelistMinted;\\r\\n    uint16 public whitelistAmountPerUser = 5;\\r\\n\\r\\n    struct MintCommit {\\r\\n        bool exist;\\r\\n        uint16 amount;\\r\\n        uint256 blockNumber;\\r\\n        bool stake;\\r\\n    }\\r\\n    mapping(address => MintCommit) private _mintCommits;\\r\\n    uint16 private _commitsAmount;\\r\\n\\r\\n    struct MintCommitReturn {\\r\\n        bool exist;\\r\\n        bool notExpired;\\r\\n        bool nextBlockReached;\\r\\n        uint16 amount;\\r\\n        uint256 blockNumber;\\r\\n        bool stake;\\r\\n    }\\r\\n\\r\\n\\r\\n    IFleet public fleet;\\r\\n    ICACAO public cacao;\\r\\n    IPnG public nftContract;\\r\\n\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /** CRITICAL TO SETUP */\\r\\n\\r\\n    function setContracts(address _cacao, address _nft, address _fleet) external onlyAdmin {\\r\\n        cacao = ICACAO(_cacao);\\r\\n        nftContract = IPnG(_nft);\\r\\n        fleet = IFleet(_fleet);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function currentEthPriceToMint() view public returns(uint256) {        \\r\\n        uint16 minted = nftContract.minted();\\r\\n        uint256 paidTokens = nftContract.getPaidTokens();\\r\\n\\r\\n        if (minted >= paidTokens) {\\r\\n            return 0;\\r\\n        }\\r\\n        \\r\\n        uint256 numDecrements = (block.timestamp - startedTime) / timeToDecrementPrice;\\r\\n        uint256 decrementAmt = (priceDecrementAmt * numDecrements);\\r\\n        if(decrementAmt > maxPrice) {\\r\\n            return minPrice;\\r\\n        }\\r\\n        uint256 adjPrice = maxPrice - decrementAmt;\\r\\n        return adjPrice;\\r\\n    }\\r\\n\\r\\n    function whitelistPrice() view public returns(uint256) {\\r\\n        uint16 minted = nftContract.minted();\\r\\n        uint256 paidTokens = nftContract.getPaidTokens();\\r\\n\\r\\n        if (minted >= paidTokens) {\\r\\n            return 0;\\r\\n        }\\r\\n        return presalePrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    function avaliableWhitelistTokens(address user, bytes32[] memory whitelistProof) external view returns (uint256) {\\r\\n        if (!inWhitelist(user, whitelistProof) || !isWhitelistSale)\\r\\n            return 0;\\r\\n        return whitelistAmountPerUser - whitelistMinted[user];\\r\\n    }\\r\\n\\r\\n\\r\\n    function mintCommitWhitelist(uint16 amount, bool isStake, bytes32[] memory whitelistProof) \\r\\n        external payable\\r\\n        nonReentrant\\r\\n        publicSaleStarted\\r\\n    {   \\r\\n        require(isWhitelistSale, \\\"Whitelist sale disabled\\\");\\r\\n        require(whitelistMinted[_msgSender()] + amount <= whitelistAmountPerUser, \\\"Too many mints\\\");\\r\\n        require(inWhitelist(_msgSender(), whitelistProof), \\\"Not in whitelist\\\");\\r\\n        whitelistMinted[_msgSender()] += amount;\\r\\n        return _commit(amount, isStake, presalePrice);\\r\\n    }\\r\\n\\r\\n    function mintCommit(uint16 amount, bool isStake) \\r\\n        external payable \\r\\n        nonReentrant\\r\\n        publicSaleStarted\\r\\n    {\\r\\n        return _commit(amount, isStake, currentEthPriceToMint());\\r\\n    }\\r\\n\\r\\n    function _mintCommitAirdrop(uint16 amount) \\r\\n        external payable \\r\\n        nonReentrant\\r\\n        onlyAdmin\\r\\n    {\\r\\n        return _commit(amount, false, 0);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _commit(uint16 amount, bool isStake, uint256 price) internal\\r\\n        whenNotPaused \\r\\n        onlyEOA\\r\\n        commitsEnabled\\r\\n    {\\r\\n        require(amount > 0 && amount <= maxBunchSize, \\\"Invalid mint amount\\\");\\r\\n        require( !_hasCommits(_msgSender()), \\\"Already have commit\\\");\\r\\n\\r\\n        uint16 minted = nftContract.minted() + _commitsAmount;\\r\\n        uint256 maxTokens = nftContract.getMaxTokens();\\r\\n        require( minted + amount <= maxTokens, \\\"All tokens minted\\\");\\r\\n\\r\\n        uint256 paidTokens = nftContract.getPaidTokens();\\r\\n\\r\\n        if (minted < paidTokens) {\\r\\n            require(minted + amount <= paidTokens, \\\"All tokens on-sale already sold\\\");\\r\\n            uint256 price_ = amount * price;\\r\\n            require(msg.value >= price_, \\\"Invalid payment amount\\\");\\r\\n\\r\\n            if (msg.value > price_) {\\r\\n                payable(_msgSender()).transfer(msg.value - price_);\\r\\n            }\\r\\n        } \\r\\n        else {\\r\\n            require(msg.value == 0, \\\"\\\");\\r\\n            uint256 totalCacaoCost = 0;\\r\\n             // YCDB\\r\\n            for (uint16 i = 1; i <= amount; i++) {\\r\\n                totalCacaoCost += mintCost(minted + i, maxTokens);\\r\\n            }\\r\\n            if (totalCacaoCost > 0) {\\r\\n                cacao.burn(_msgSender(), totalCacaoCost);\\r\\n                cacao.updateInblockGuard();\\r\\n            }           \\r\\n        }\\r\\n\\r\\n        _mintCommits[_msgSender()] = MintCommit(true, amount, block.number, isStake);\\r\\n        _commitsAmount += amount;\\r\\n        emit MintCommitted(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function mintReveal() external \\r\\n        whenNotPaused \\r\\n        nonReentrant \\r\\n        onlyEOA\\r\\n    {\\r\\n        return reveal(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _mintRevealAirdrop(address _to)  external\\r\\n        whenNotPaused \\r\\n        nonReentrant\\r\\n        onlyAdmin\\r\\n        onlyEOA\\r\\n    {\\r\\n        return reveal(_to);\\r\\n    }\\r\\n\\r\\n\\r\\n    function reveal(address addr) internal {\\r\\n        require(_hasCommits(addr), \\\"No pending commit\\\");\\r\\n        uint16 minted = nftContract.minted();\\r\\n        uint256 paidTokens = nftContract.getPaidTokens();\\r\\n        MintCommit memory commit = _mintCommits[addr];\\r\\n\\r\\n        uint16[] memory tokenIds = new uint16[](commit.amount);\\r\\n        uint16[] memory tokenIdsToStake = new uint16[](commit.amount);\\r\\n\\r\\n        uint256 seed = uint256(blockhash(commit.blockNumber));\\r\\n        for (uint k = 0; k < commit.amount; k++) {\\r\\n            minted++;\\r\\n            // scramble the random so the steal / treasure mechanic are different per mint\\r\\n            seed = uint256(keccak256(abi.encode(seed, addr)));\\r\\n            address recipient = selectRecipient(seed, minted, paidTokens);\\r\\n            tokenIds[k] = minted;\\r\\n            if (!commit.stake || recipient != addr) {\\r\\n                nftContract.mint(recipient, seed);\\r\\n            } else {\\r\\n                nftContract.mint(address(fleet), seed);\\r\\n                tokenIdsToStake[k] = minted;\\r\\n            }\\r\\n        }\\r\\n        // nftContract.updateOriginAccess(tokenIds);\\r\\n        if(commit.stake) {\\r\\n            fleet.addManyToFleet(addr, tokenIdsToStake);\\r\\n        }\\r\\n\\r\\n        _commitsAmount -= commit.amount;\\r\\n        delete _mintCommits[addr];\\r\\n        emit MintRevealed(addr, tokenIds.length);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /** \\r\\n     * @param tokenId the ID to check the cost of to mint\\r\\n     * @return the cost of the given token ID\\r\\n     */\\r\\n    function mintCost(uint256 tokenId, uint256 maxTokens) public view returns (uint256) {\\r\\n        if (tokenId <= nftContract.getPaidTokens()) return 0;\\r\\n        if (tokenId <= maxTokens * 2 / 5) return _cacaoCost[0];\\r\\n        if (tokenId <= maxTokens * 4 / 5) return _cacaoCost[1];\\r\\n        return _cacaoCost[2];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /** ADMIN */\\r\\n\\r\\n    function _setPaused(bool _paused) external requireContractsSet onlyAdmin {\\r\\n        if (_paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n    function _setCacaoCost(uint256[3] memory costs) external onlyAdmin {\\r\\n        _cacaoCost = costs;\\r\\n    }\\r\\n\\r\\n    function _setAllowCommits(bool allowed) external onlyAdmin {\\r\\n        allowCommits = allowed;\\r\\n    }\\r\\n\\r\\n    function _setPublicSaleStart(bool started) external onlyAdmin {\\r\\n        isPublicSale = started;\\r\\n        if(isPublicSale) {\\r\\n            startedTime = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setWhitelistSale(bool isSale) external onlyAdmin {\\r\\n        isWhitelistSale = isSale;\\r\\n    }\\r\\n\\r\\n    function _setMaxBunchSize(uint16 size) external onlyAdmin {\\r\\n        maxBunchSize = size;\\r\\n    }\\r\\n\\r\\n    function _setWhitelistAmountPerUser(uint16 amount) external onlyAdmin {\\r\\n        whitelistAmountPerUser = amount;\\r\\n    }\\r\\n\\r\\n    function _cancelCommit(address user) external onlyAdmin {\\r\\n        _commitsAmount -= _mintCommits[user].amount;\\r\\n        delete _mintCommits[user];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /************************************* */\\r\\n\\r\\n\\r\\n    /**\\r\\n     * the first 20% (ETH purchases) go to the minter\\r\\n     * the remaining 80% have a 10% chance to be given to a random staked pirate\\r\\n     * @param seed a random value to select a recipient from\\r\\n     * @return the address of the recipient (either the minter or the Pirate thief's owner)\\r\\n     */\\r\\n    function selectRecipient(uint256 seed, uint256 minted, uint256 paidTokens) internal view returns (address) { //TODO\\r\\n        if (minted <= paidTokens || ((seed >> 245) % 10) != 0) // top 10 bits haven't been used\\r\\n            return _msgSender(); \\r\\n\\r\\n        address thief = address(fleet) == address(0) ? address(0) : fleet.randomPirateOwner(seed >> 144); // 144 bits reserved for trait selection\\r\\n        if (thief == address(0)) \\r\\n            return _msgSender();\\r\\n        else\\r\\n            return thief;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**----------------------------- */\\r\\n\\r\\n    function getTotalPendingCommits() external view returns (uint256) {\\r\\n        return _commitsAmount;\\r\\n    }\\r\\n\\r\\n    function getCommit(address addr) external view returns (MintCommitReturn memory) {\\r\\n        MintCommit memory m = _mintCommits[addr];\\r\\n        (bool ex, bool ne, bool nb) = _commitStatus(m);\\r\\n        return MintCommitReturn(ex, ne, nb, m.amount, m.blockNumber, m.stake);\\r\\n    }\\r\\n\\r\\n    function hasMintPending(address addr) external view returns (bool) {\\r\\n        return _hasCommits(addr);\\r\\n    }\\r\\n\\r\\n    function canMint(address addr) external view returns (bool) {\\r\\n        return _hasCommits(addr);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _hasCommits(address addr) internal view returns (bool) {\\r\\n        MintCommit memory m = _mintCommits[addr];\\r\\n        (bool a, bool b, bool c) = _commitStatus(m);\\r\\n        return a && b && c;\\r\\n    }\\r\\n\\r\\n    function _commitStatus(MintCommit memory m) \\r\\n        internal view \\r\\n        returns (bool exist, bool notExpired, bool nextBlockReached) \\r\\n    {        \\r\\n        exist = m.blockNumber != 0;\\r\\n        notExpired = blockhash(m.blockNumber) != bytes32(0);\\r\\n        nextBlockReached = block.number > m.blockNumber;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * allows owner to withdraw funds from minting\\r\\n     */\\r\\n    function _withdrawAll() external onlyTokenClaimer {\\r\\n        payable(_msgSender()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 amount) external onlyTokenClaimer {\\r\\n        payable(_msgSender()).transfer(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    modifier requireContractsSet() {\\r\\n        require(\\r\\n            address(cacao) != address(0) && address(nftContract) != address(0) && address(fleet) != address(0),\\r\\n            \\\"Contracts not set\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyEOA() {\\r\\n        require(_msgSender() == tx.origin, \\\"Only EOA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier commitsEnabled() {\\r\\n        require(allowCommits, \\\"Adding minting commits disalolwed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier publicSaleStarted() {\\r\\n        require(isPublicSale, \\\"Public sale not started yet\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/utils/Wnitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"./Accessable.sol\\\";\\r\\n\\r\\n\\r\\ncontract Whitelist is Accessable {\\r\\n    bytes32 _whitelistRoot = 0;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _setWhitelistRoot(bytes32 root) external onlyAdmin {\\r\\n        _whitelistRoot = root;\\r\\n    }\\r\\n\\r\\n    function isWhitelistRootSeted() public view returns(bool){\\r\\n        return (_whitelistRoot != bytes32(0));\\r\\n    }\\r\\n\\r\\n    function inWhitelist(address addr, bytes32[] memory proof) public view returns (bool) {\\r\\n        require(isWhitelistRootSeted(), \\\"Whitelist merkle proof root not setted\\\");\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(addr));\\r\\n        return MerkleProof.verify(proof, _whitelistRoot, leaf);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/utils/Accessable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n\\r\\ncontract Owned is Context {\\r\\n    address private _contractOwner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() { \\r\\n        _contractOwner = payable(_msgSender()); \\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns(address) {\\r\\n        return _contractOwner;\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Owned: Address can not be 0x0\\\");\\r\\n        __transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _renounceOwnership() external virtual onlyOwner {\\r\\n        __transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function __transferOwnership(address _to) internal {\\r\\n        emit OwnershipTransferred(owner(), _to);\\r\\n        _contractOwner = _to;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_msgSender() == _contractOwner, \\\"Owned: Only owner can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract Accessable is Owned {\\r\\n    mapping(address => bool) private _admins;\\r\\n    mapping(address => bool) private _tokenClaimers;\\r\\n\\r\\n    constructor() {\\r\\n        _admins[_msgSender()] = true;\\r\\n        _tokenClaimers[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address user) public view returns(bool) {\\r\\n        return _admins[user];\\r\\n    }\\r\\n\\r\\n    function isTokenClaimer(address user) public view returns(bool) {\\r\\n        return _tokenClaimers[user];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setAdmin(address _user, bool _isAdmin) external onlyOwner {\\r\\n        _admins[_user] = _isAdmin;\\r\\n        require( _admins[owner()], \\\"Accessable: Contract owner must be an admin\\\" );\\r\\n    }\\r\\n\\r\\n    function _setTokenClaimer(address _user, bool _isTokenCalimer) external onlyOwner {\\r\\n        _tokenClaimers[_user] = _isTokenCalimer;\\r\\n        require( _tokenClaimers[owner()], \\\"Accessable: Contract owner must be an token claimer\\\" );\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admins[_msgSender()], \\\"Accessable: Only admin can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenClaimer() {\\r\\n        require(_tokenClaimers[_msgSender()], \\\"Accessable: Only Token Claimer can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IPnG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IPnG is IERC721 {\\r\\n\\r\\n    struct GalleonPirate {\\r\\n        bool isGalleon;\\r\\n\\r\\n        // Galleon traits\\r\\n        uint8 base;\\r\\n        uint8 deck;\\r\\n        uint8 sails;\\r\\n        uint8 crowsNest;\\r\\n        uint8 decor;\\r\\n        uint8 flags;\\r\\n        uint8 bowsprit;\\r\\n\\r\\n        // Pirate traits\\r\\n        uint8 skin;\\r\\n        uint8 clothes;\\r\\n        uint8 hair;\\r\\n        uint8 earrings;\\r\\n        uint8 mouth;\\r\\n        uint8 eyes;\\r\\n        uint8 weapon;\\r\\n        uint8 hat;\\r\\n        uint8 alphaIndex;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\r\\n\\r\\n    function totalSupply() external view returns(uint256);\\r\\n\\r\\n    function mint(address recipient, uint256 seed) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function minted() external view returns (uint16);\\r\\n\\r\\n    function getMaxTokens() external view returns (uint256);\\r\\n    function getPaidTokens() external view returns (uint256);\\r\\n    function getTokenTraits(uint256 tokenId) external view returns (GalleonPirate memory);\\r\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\r\\n    function isGalleon(uint256 tokenId) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IInblockGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IInblockGuard {\\r\\n    function updateInblockGuard() external;\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IFleet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFleet {\\r\\n    function addManyToFleet(address account, uint16[] calldata tokenIds) external;\\r\\n    function randomPirateOwner(uint256 seed) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/ICACAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IInblockGuard.sol\\\";\\r\\n\\r\\n\\r\\ninterface ICACAO is IInblockGuard {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n    function burn(address from, uint256 amount) external;\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"_cancelCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"_mintCommitAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"_mintRevealAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"_setAllowCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"costs\",\"type\":\"uint256[3]\"}],\"name\":\"_setCacaoCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"name\":\"_setMaxBunchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"_setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"name\":\"_setPublicSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTokenCalimer\",\"type\":\"bool\"}],\"name\":\"_setTokenClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"_setWhitelistAmountPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"_setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"_transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowCommits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"whitelistProof\",\"type\":\"bytes32[]\"}],\"name\":\"avaliableWhitelistTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cacao\",\"outputs\":[{\"internalType\":\"contract ICACAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEthPriceToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fleet\",\"outputs\":[{\"internalType\":\"contract IFleet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCommit\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"notExpired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nextBlockReached\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"internalType\":\"struct PirateGame.MintCommitReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingCommits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasMintPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"inWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isTokenClaimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistRootSeted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBunchSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isStake\",\"type\":\"bool\"}],\"name\":\"mintCommit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isStake\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"whitelistProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintCommitWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IPnG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cacao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fleet\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isSale\",\"type\":\"bool\"}],\"name\":\"setWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureChestTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAmountPerUser\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PirateGame","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}