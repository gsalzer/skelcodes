{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\ninterface IMlpDeployer {\r\n    function createMlp(\r\n        address _feesController,\r\n        address _uniswapPair,\r\n        address _submitter,\r\n        uint256 _endDate,\r\n        address _uniswapRouter,\r\n        address _rewardManager,\r\n        address _safetyPair0,\r\n        address _safetyPair1,\r\n        bool _isFirstTokenInPair0,\r\n        bool _isFirstTokenInPair1,\r\n        bool _doCheckSafetyPairs,\r\n        address _owner\r\n    ) external returns(address);\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\ninterface IProxyDeployer {\r\n    function admin() external returns (address);\r\n    function deployProxy(address _logic) external returns (address);\r\n    function deployProxy(address _logic, bytes calldata _data) external returns (address);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\nabstract contract IMlp {\r\n    function makeOffer(address _token, uint _amount, uint _unlockDate, uint _endDate, uint _slippageTolerancePpm, uint _maxPriceVariationPpm) external virtual returns (uint offerId);\r\n\r\n    function takeOffer(uint _pendingOfferId, uint _amount, uint _deadline) external virtual returns (uint activeOfferId);\r\n\r\n    function cancelOffer(uint _offerId) external virtual;\r\n\r\n    function release(uint256 _offerId, uint256 amount0Min, uint256 amount1Min, uint256 slippage, uint256 _deadline) external virtual;\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\nabstract contract IFeesController {\r\n    function feesTo() public view virtual returns (address);\r\n    function setFeesTo(address) public virtual;\r\n\r\n    function feesPpm() public view virtual returns (uint);\r\n    function setFeesPpm(uint) public virtual;\r\n\r\n    function candyFarmBurnPpm() public view virtual returns (uint);\r\n    function setCandyFarmBurnPpm(uint) public virtual;\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\nabstract contract IRewardManager {\r\n    function add(uint256 _allocPoint, address _newMlp) public virtual;\r\n    function notifyDeposit(address _account, uint256 _amount) public virtual;\r\n    function notifyWithdraw(address _account, uint256 _amount) public virtual;\r\n    function getPoolSupply(address pool) public view virtual returns(uint);\r\n    function getUserAmount(address pool, address user) public view virtual returns(uint);\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\ncontract Mlp is IMlp, Initializable, OwnableUpgradeSafe {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant private RATIO_MULTIPLIER = 10**18;\r\n    uint256 constant public FULL_SLIPPAGE = 1000;\r\n    uint256 constant public MAX_SLIPPAGE_TOLERANCE = 75;\r\n\r\n    uint256 public endDate;\r\n    address public submitter;\r\n    uint256 public exceedingLiquidity;\r\n    uint256 public bonusToken0;\r\n    uint256 public reward0Rate;\r\n    uint256 public reward0PerTokenStored;\r\n    uint256 public bonusToken1;\r\n    uint256 public reward1Rate;\r\n    uint256 public reward1PerTokenStored;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public pendingOfferCount;\r\n    uint256 public activeOfferCount;\r\n\r\n    IRewardManager public rewardManager;\r\n    IUniswapV2Pair public uniswapPair;\r\n    IFeesController public feesController;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    IUniswapV2Pair public safetyPair0;\r\n    bool public isFirstTokenInSafetyPair0;\r\n    IUniswapV2Pair public safetyPair1;\r\n    bool public isFirstTokenInSafetyPair1;\r\n\r\n    bool public doCheckSafetyPools;\r\n\r\n    // ######## LEGACY STORAGE ########\r\n    mapping(address => uint256) private userReward0PerTokenPaid; // Legacy variable\r\n    mapping(address => uint256) private userRewards0; // Legacy variable\r\n    mapping(address => uint256) private userReward1PerTokenPaid; // Legacy variable\r\n    mapping(address => uint256) private userRewards1; // Legacy variable\r\n    // ################################\r\n\r\n    mapping(address => uint256) public directStakeBalances;\r\n    mapping(uint256 => PendingOffer) public getPendingOffer;\r\n    mapping(uint256 => ActiveOffer) public getActiveOffer;\r\n\r\n    enum OfferStatus {PENDING, TAKEN, CANCELED}\r\n\r\n    event OfferMade(uint256 id);\r\n    event OfferTaken(uint256 pendingOfferId, uint256 activeOfferId);\r\n    event OfferCanceled(uint256 id);\r\n    event OfferReleased(uint256 offerId);\r\n    event PayReward(uint256 amount0, uint256 amount1);\r\n\r\n    struct PendingOffer {\r\n        address owner;\r\n        address token;\r\n        uint256 amount;\r\n        uint256 unlockDate;\r\n        uint256 endDate;\r\n        OfferStatus status;\r\n        uint256 slippageTolerancePpm;\r\n        uint256 maxPriceVariationPpm;\r\n    }\r\n\r\n    struct ActiveOffer {\r\n        address user0;\r\n        uint256 originalAmount0;\r\n        address user1;\r\n        uint256 originalAmount1;\r\n        uint256 unlockDate;\r\n        uint256 liquidity;\r\n        bool released;\r\n        uint256 maxPriceVariationPpm;\r\n    }\r\n\r\n    function initialize (\r\n        address _feesController,\r\n        address _uniswapPair,\r\n        address _submitter,\r\n        uint256 _endDate,\r\n        address _uniswapRouter,\r\n        address _rewardManager,\r\n        address _safetyPair0,\r\n        address _safetyPair1,\r\n        bool _isFirstTokenInPair0,\r\n        bool _isFirstTokenInPair1,\r\n        bool _doCheckSafetyPairs\r\n    ) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        feesController = IFeesController(_feesController);\r\n        uniswapPair = IUniswapV2Pair(_uniswapPair);\r\n        endDate = _endDate;\r\n        submitter = _submitter;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\r\n        rewardManager = IRewardManager(_rewardManager);\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        safetyPair0 = IUniswapV2Pair(_safetyPair0);\r\n        isFirstTokenInSafetyPair0 = _isFirstTokenInPair0;\r\n        safetyPair1 = IUniswapV2Pair(_safetyPair1);\r\n        isFirstTokenInSafetyPair1 = _isFirstTokenInPair1;\r\n\r\n        doCheckSafetyPools = _doCheckSafetyPairs;\r\n    }\r\n\r\n    function _notifyDeposit(address account, uint256 amount) internal {\r\n        rewardManager.notifyDeposit(account, amount);\r\n    }\r\n\r\n    function _notifyWithdraw(address account, uint256 amount) internal {\r\n        rewardManager.notifyWithdraw(account, amount);\r\n    }\r\n\r\n    function makeOffer(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _unlockDate,\r\n        uint256 _endDate,\r\n        uint256 _slippageTolerancePpm,\r\n        uint256 _maxPriceVariationPpm\r\n    ) external override returns (uint256 offerId) {\r\n        require(_amount > 0, \"makeOffer: ZERO_AMOUNT\");\r\n        require(_endDate > now, \"makeOffer: END_DATE_MORE_THAN_NOW\");\r\n        require(_endDate <= _unlockDate, \"makeOffer: END_DATE_LESS_THAN_UNLOCK_DATE\");\r\n        require(\r\n            _token == address(uniswapPair.token0()) || \r\n            _token == address(uniswapPair.token1()),\r\n            \"unknown token\");\r\n        offerId = pendingOfferCount;\r\n        pendingOfferCount++;\r\n        getPendingOffer[offerId] = PendingOffer(\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            _unlockDate,\r\n            _endDate,\r\n            OfferStatus.PENDING,\r\n            _slippageTolerancePpm,\r\n            _maxPriceVariationPpm\r\n        );\r\n\r\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit OfferMade(offerId);\r\n    }\r\n\r\n    struct ProviderInfo {\r\n        address user;\r\n        uint256 amount;\r\n        IERC20 token;\r\n    }\r\n\r\n    struct OfferInfo {\r\n        uint256 deadline;\r\n        uint256 slippageTolerancePpm;\r\n    }\r\n\r\n    function takeOffer(\r\n        uint256 _pendingOfferId,\r\n        uint256 _amount,\r\n        uint256 _deadline\r\n    ) external override returns (uint256 activeOfferId) {\r\n        PendingOffer storage pendingOffer = getPendingOffer[_pendingOfferId];\r\n        require(pendingOffer.status == OfferStatus.PENDING);\r\n        require(pendingOffer.endDate > now);\r\n        pendingOffer.status = OfferStatus.TAKEN;\r\n\r\n        // Sort the users, tokens, and amount\r\n        ProviderInfo memory provider0;\r\n        ProviderInfo memory provider1;\r\n        {\r\n            if (pendingOffer.token == uniswapPair.token0()) {\r\n                provider0 = ProviderInfo(\r\n                    pendingOffer.owner,\r\n                    pendingOffer.amount,\r\n                    IERC20(uniswapPair.token0())\r\n                );\r\n                provider1 = ProviderInfo(\r\n                    msg.sender,\r\n                    _amount,\r\n                    IERC20(uniswapPair.token1())\r\n                );\r\n\r\n                provider1.token.safeTransferFrom(\r\n                    provider1.user,\r\n                    address(this),\r\n                    provider1.amount\r\n                );\r\n            } else {\r\n                provider0 = ProviderInfo(\r\n                    msg.sender,\r\n                    _amount,\r\n                    IERC20(uniswapPair.token0())\r\n                );\r\n                provider1 = ProviderInfo(\r\n                    pendingOffer.owner,\r\n                    pendingOffer.amount,\r\n                    IERC20(uniswapPair.token1())\r\n                );\r\n\r\n                provider0.token.safeTransferFrom(\r\n                    provider0.user,\r\n                    address(this),\r\n                    provider0.amount\r\n                );\r\n            }\r\n        }\r\n\r\n        // calculate fees\r\n        uint256 feesAmount0 =\r\n            provider0.amount.mul(feesController.feesPpm()) / 1000;\r\n        uint256 feesAmount1 =\r\n            provider1.amount.mul(feesController.feesPpm()) / 1000;\r\n\r\n        // take fees\r\n        provider0.amount = provider0.amount.sub(feesAmount0);\r\n        provider1.amount = provider1.amount.sub(feesAmount1);\r\n\r\n        // send fees\r\n        provider0.token.safeTransfer(feesController.feesTo(), feesAmount0);\r\n        provider1.token.safeTransfer(feesController.feesTo(), feesAmount1);\r\n\r\n        uint256 spentAmount0;\r\n        uint256 spentAmount1;\r\n        uint256 liquidity;\r\n        uint256[] memory returnedValues = new uint256[](3);\r\n\r\n        // send tokens to uniswap\r\n        {\r\n            returnedValues = _provideLiquidity(\r\n                provider0,\r\n                provider1,\r\n                OfferInfo(_deadline, pendingOffer.slippageTolerancePpm)\r\n            );\r\n            liquidity = returnedValues[0];\r\n            spentAmount0 = returnedValues[1];\r\n            spentAmount1 = returnedValues[2];\r\n        }\r\n\r\n        // stake liquidity\r\n        _notifyDeposit(provider0.user, liquidity / 2);\r\n        _notifyDeposit(provider1.user, liquidity / 2);\r\n\r\n        if (liquidity % 2 != 0) {\r\n            exceedingLiquidity = exceedingLiquidity.add(1);\r\n        }\r\n\r\n        // Record the active offer\r\n        activeOfferId = activeOfferCount;\r\n        activeOfferCount++;\r\n\r\n        getActiveOffer[activeOfferId] = ActiveOffer(\r\n            provider0.user,\r\n            spentAmount0,\r\n            provider1.user,\r\n            spentAmount1,\r\n            pendingOffer.unlockDate,\r\n            liquidity,\r\n            false,\r\n            pendingOffer.maxPriceVariationPpm\r\n        );\r\n\r\n        emit OfferTaken(_pendingOfferId, activeOfferId);\r\n\r\n        return activeOfferId;\r\n    }\r\n\r\n    function _provideLiquidity(\r\n        ProviderInfo memory _provider0,\r\n        ProviderInfo memory _provider1,\r\n        OfferInfo memory _info\r\n    ) internal returns (uint256[] memory) {\r\n        _provider0.token.safeApprove(address(uniswapRouter), 0);\r\n        _provider1.token.safeApprove(address(uniswapRouter), 0);\r\n\r\n        _provider0.token.safeApprove(address(uniswapRouter), _provider0.amount);\r\n        _provider1.token.safeApprove(address(uniswapRouter), _provider1.amount);\r\n\r\n        uint256 amountMin0 =\r\n            _provider0.amount.sub(\r\n                _provider0.amount.mul(_info.slippageTolerancePpm) / 1000\r\n            );\r\n        uint256 amountMin1 =\r\n            _provider1.amount.sub(\r\n                _provider1.amount.mul(_info.slippageTolerancePpm) / 1000\r\n            );\r\n\r\n        // Add the liquidity to Uniswap\r\n        uint256 spentAmount0;\r\n        uint256 spentAmount1;\r\n        uint256 liquidity;\r\n        {\r\n            (spentAmount0, spentAmount1, liquidity) = uniswapRouter\r\n                .addLiquidity(\r\n                address(_provider0.token),\r\n                address(_provider1.token),\r\n                _provider0.amount,\r\n                _provider1.amount,\r\n                amountMin0,\r\n                amountMin1,\r\n                address(this),\r\n                _info.deadline\r\n            );\r\n        }\r\n        // Give back the exceeding tokens\r\n        if (spentAmount0 < _provider0.amount) {\r\n            _provider0.token.safeTransfer(\r\n                _provider0.user,\r\n                _provider0.amount - spentAmount0\r\n            );\r\n        }\r\n        if (spentAmount1 < _provider1.amount) {\r\n            _provider1.token.safeTransfer(\r\n                _provider1.user,\r\n                _provider1.amount - spentAmount1\r\n            );\r\n        }\r\n        uint256[] memory liq = new uint256[](3);\r\n        liq[0] = liquidity;\r\n        liq[1] = spentAmount0;\r\n        liq[2] = spentAmount1;\r\n        return (liq);\r\n    }\r\n\r\n    function cancelOffer(uint256 _offerId) external override {\r\n        PendingOffer storage pendingOffer = getPendingOffer[_offerId];\r\n        require(pendingOffer.status == OfferStatus.PENDING);\r\n        pendingOffer.status = OfferStatus.CANCELED;\r\n        IERC20(pendingOffer.token).safeTransfer(\r\n            pendingOffer.owner,\r\n            pendingOffer.amount\r\n        );\r\n        emit OfferCanceled(_offerId);\r\n    }\r\n\r\n    function release(uint256 _offerId, uint256 amount0Min, uint256 amount1Min, uint256 slippageTolerance, uint256 _deadline) external override {\r\n        ActiveOffer storage offer = getActiveOffer[_offerId];\r\n\r\n        require(\r\n            msg.sender == offer.user0 || msg.sender == offer.user1,\r\n            \"unauthorized\"\r\n        );\r\n        require(now > offer.unlockDate, \"locked\");\r\n        require(!offer.released, \"already released\");\r\n        require(slippageTolerance <= MAX_SLIPPAGE_TOLERANCE, \"release: SLIPPAGE_TOO_BIG\");\r\n\r\n        // check if ETH or USDT pools are in correct ratio\r\n        if (doCheckSafetyPools) {\r\n            uint256 totalSlippage = _getPriceSlippage();\r\n            require(totalSlippage <= slippageTolerance, \"release: BAD_SLIPPAGE_RATIO\");\r\n        }\r\n\r\n        offer.released = true;\r\n\r\n        IERC20 token0 = IERC20(uniswapPair.token0());\r\n        IERC20 token1 = IERC20(uniswapPair.token1());\r\n\r\n        IERC20(address(uniswapPair)).safeApprove(address(uniswapRouter), 0);\r\n\r\n        IERC20(address(uniswapPair)).safeApprove(\r\n            address(uniswapRouter),\r\n            offer.liquidity\r\n        );\r\n        (uint256 amount0, uint256 amount1) =\r\n            uniswapRouter.removeLiquidity(\r\n                address(token0),\r\n                address(token1),\r\n                offer.liquidity,\r\n                amount0Min,\r\n                amount1Min,\r\n                address(this),\r\n                _deadline\r\n            );\r\n\r\n        _notifyWithdraw(offer.user0, offer.liquidity / 2);\r\n        _notifyWithdraw(offer.user1, offer.liquidity / 2);\r\n\r\n        if (\r\n            _getPriceVariation(offer.originalAmount0, amount0) >\r\n            offer.maxPriceVariationPpm\r\n        ) {\r\n            if (amount0 > offer.originalAmount0) {\r\n                uint256 toSwap = amount0.sub(offer.originalAmount0);\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(token0);\r\n                path[1] = address(token1);\r\n                token0.safeApprove(address(uniswapRouter), 0);\r\n                token0.safeApprove(address(uniswapRouter), toSwap);\r\n\r\n                uint256[] memory newAmounts =\r\n                    uniswapRouter.swapExactTokensForTokens(\r\n                        toSwap,\r\n                        0,\r\n                        path,\r\n                        address(this),\r\n                        _deadline\r\n                    );\r\n                amount0 = amount0.sub(toSwap);\r\n                amount1 = amount1.add(newAmounts[1]);\r\n            }\r\n        }\r\n        if (\r\n            _getPriceVariation(offer.originalAmount1, amount1) >\r\n            offer.maxPriceVariationPpm\r\n        ) {\r\n            if (amount1 > offer.originalAmount1) {\r\n                uint256 toSwap = amount1.sub(offer.originalAmount1);\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(token1);\r\n                path[1] = address(token0);\r\n                token1.safeApprove(address(uniswapRouter), 0);\r\n                token1.safeApprove(address(uniswapRouter), toSwap);\r\n                uint256[] memory newAmounts =\r\n                    uniswapRouter.swapExactTokensForTokens(\r\n                        toSwap,\r\n                        0,\r\n                        path,\r\n                        address(this),\r\n                        _deadline\r\n                    );\r\n                amount1 = amount1.sub(toSwap);\r\n                amount0 = amount0.add(newAmounts[1]);\r\n            }\r\n        }\r\n\r\n        token0.safeTransfer(offer.user0, amount0);\r\n        token1.safeTransfer(offer.user1, amount1);\r\n\r\n        emit OfferReleased(_offerId);\r\n    }\r\n\r\n    function setDoCheckSafetyPools(bool _doCheckSafetyPools) external onlyOwner {\r\n        doCheckSafetyPools = _doCheckSafetyPools;\r\n    }\r\n\r\n    function _getPriceSlippage() private view returns (uint256) {\r\n\r\n        uint256 safetyRatio0 = _calculateSafetyPairRatio(safetyPair0, isFirstTokenInSafetyPair0);\r\n        uint256 safetyRatio1 = _calculateSafetyPairRatio(safetyPair1, isFirstTokenInSafetyPair1);\r\n\r\n        uint256 safetyRatio = safetyRatio0.mul(RATIO_MULTIPLIER) / safetyRatio1;\r\n        uint256 mlpTokensRatio = _calculateMlpPairRatio();\r\n\r\n        uint256 totalSlippage = _getAbsoluteSubstraction(safetyRatio, mlpTokensRatio).mul(FULL_SLIPPAGE) / safetyRatio;\r\n\r\n        return totalSlippage;\r\n    }\r\n\r\n    function _getAbsoluteSubstraction(uint256 x, uint256 y) private pure returns (uint256) {\r\n        if (x > y) {\r\n            return x - y;\r\n        } else {\r\n            return y - x;\r\n        }\r\n    }\r\n\r\n    function _calculateSafetyPairRatio(IUniswapV2Pair safetyPair, bool isFirstTokenInPair) private view returns(uint256) {\r\n        uint112 mlpTokenReserve;\r\n        uint112 safetyTokenReserve;\r\n\r\n        if (isFirstTokenInPair) {\r\n            (mlpTokenReserve, safetyTokenReserve,) = safetyPair.getReserves();\r\n        } else {\r\n            (safetyTokenReserve, mlpTokenReserve,) = safetyPair.getReserves();\r\n        }\r\n\r\n        return (uint256(mlpTokenReserve)).mul(RATIO_MULTIPLIER) / (uint256(safetyTokenReserve));\r\n    }\r\n\r\n    function _calculateMlpPairRatio() private view returns(uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = uniswapPair.getReserves();\r\n\r\n        return (uint256(reserve0)).mul(RATIO_MULTIPLIER) / (uint256(reserve1));\r\n    }\r\n\r\n    function _getPriceVariation(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 sub;\r\n        if (a > b) {\r\n            sub = a.sub(b);\r\n            return sub.mul(1000) / a;\r\n        } else {\r\n            sub = b.sub(a);\r\n            return sub.mul(1000) / b;\r\n        }\r\n    }\r\n\r\n    function directStake(uint256 _amount) external {\r\n        require(_amount > 0, \"cannot stake 0\");\r\n        IERC20(address(uniswapPair)).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        // calculate fees\r\n        uint256 feesAmount = _amount.mul(feesController.feesPpm()) / 1000;\r\n\r\n        // take fees\r\n        uint256 stakeAmount = _amount.sub(feesAmount);\r\n\r\n        // send fees\r\n        IERC20(address(uniswapPair)).safeTransfer(feesController.feesTo(), feesAmount);\r\n\r\n        _notifyDeposit(msg.sender, stakeAmount);\r\n        directStakeBalances[msg.sender] = directStakeBalances[msg.sender].add(\r\n            stakeAmount\r\n        );\r\n    }\r\n\r\n    function directWithdraw(uint256 _amount) external {\r\n        require(_amount > 0, \"cannot withdraw 0\");\r\n        _notifyWithdraw(msg.sender, _amount);\r\n        directStakeBalances[msg.sender] = directStakeBalances[msg.sender].sub(\r\n            _amount\r\n        );\r\n        IERC20(address(uniswapPair)).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    function transferExceedingLiquidity() external {\r\n        require(exceedingLiquidity != 0);\r\n        IERC20(address(uniswapPair)).safeTransfer(\r\n            feesController.feesTo(),\r\n            exceedingLiquidity\r\n        );\r\n        exceedingLiquidity = 0;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\ncontract MlpDeployer is IMlpDeployer {\r\n    IProxyDeployer public immutable proxyFactory;\r\n    address public mlpImpl;\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == proxyFactory.admin(), \"isAdmin: Caller not an admin!\");\r\n        _;\r\n    }\r\n\r\n    constructor(IProxyDeployer _proxyFactory, address _mlpImpl) public {\r\n        require(address(_proxyFactory) != address(0), \"constructor: _proxyFactory is zero\");\r\n        require(_mlpImpl != address(0), \"constructor: _mlpImpl is zero\");\r\n        proxyFactory = _proxyFactory;\r\n        mlpImpl = _mlpImpl;\r\n    }\r\n\r\n    function createMlp(\r\n        address _feesController,\r\n        address _uniswapPair,\r\n        address _submitter,\r\n        uint256 _endDate,\r\n        address _uniswapRouter,\r\n        address _rewardManager,\r\n        address _safetyPair0,\r\n        address _safetyPair1,\r\n        bool _isFirstTokenInPair0,\r\n        bool _isFirstTokenInPair1,\r\n        bool _doCheckSafetyPairs,\r\n        address _owner\r\n    ) external override returns(address) {\r\n        Mlp newMlp = deployProxy();\r\n\r\n        newMlp.initialize(\r\n            _feesController,\r\n            _uniswapPair,\r\n            _submitter,\r\n            _endDate,\r\n            _uniswapRouter,\r\n            _rewardManager,\r\n            _safetyPair0,\r\n            _safetyPair1,\r\n            _isFirstTokenInPair0,\r\n            _isFirstTokenInPair1,\r\n            _doCheckSafetyPairs\r\n        );\r\n\r\n        newMlp.transferOwnership(_owner);\r\n\r\n        return address(newMlp);\r\n    }\r\n\r\n    function deployProxy() private returns(Mlp) {\r\n        address mlpProxyAddress = proxyFactory.deployProxy(mlpImpl);\r\n        return Mlp(mlpProxyAddress);\r\n    }\r\n\r\n    function changeMlpImplementation(address _mlpImpl) external isAdmin {\r\n        require(_mlpImpl != address(0), \"changeMlpImplementation: _mlpImpl is zero\");\r\n        mlpImpl = _mlpImpl;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IProxyDeployer\",\"name\":\"_proxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlpImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mlpImpl\",\"type\":\"address\"}],\"name\":\"changeMlpImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safetyPair0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safetyPair1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFirstTokenInPair0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isFirstTokenInPair1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_doCheckSafetyPairs\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createMlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlpImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"contract IProxyDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MlpDeployer","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"000000000000000000000000eea5906291bed7e9d7ef19c58a6ac6b41dd4b5fd0000000000000000000000007e059a515b33a5aa685d502e4e23462a8a3070b7","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://27a11a2adfc67469d9427f1494b29726ed307d5e9d820494e94e3e7e1f1042f1"}]}