{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Fodl/connectors/ResetAccountConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport './interfaces/IResetAccountConnector.sol';\\nimport '../modules/FoldingAccount/FoldingAccountStorage.sol';\\nimport '../modules/StopLoss/StopLossStorage.sol';\\n\\ncontract ResetAccountConnector is IResetAccountConnector, FoldingAccountStorage, StopLossStorage {\\n    function resetAccount(\\n        address oldOwner,\\n        address newOwner,\\n        uint256\\n    ) external override onlyNFTContract {\\n        emit OwnerChanged(aStore().owner, newOwner);\\n        aStore().owner = newOwner;\\n        if (oldOwner != address(0)) {\\n            StopLossStore storage store = stopLossStore();\\n            store.unwindFactor = 0;\\n            store.slippageIncentive = 0;\\n            store.collateralUsageLimit = 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Fodl/connectors/interfaces/IResetAccountConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IResetAccountConnector {\\n    event OwnerChanged(address oldOwner, address newOwner);\\n\\n    function resetAccount(\\n        address oldOwner,\\n        address newOwner,\\n        uint256 accountId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract FoldingAccountStorage {\\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\\n\\n    /**\\n     * entryCaller:         address of the caller of the account, during a transaction\\n     *\\n     * callbackTarget:      address of logic to be run when expecting a callback\\n     *\\n     * expectedCallbackSig: signature of function to be run when expecting a callback\\n     *\\n     * foldingRegistry      address of factory creating FoldingAccount\\n     *\\n     * nft:                 address of the nft contract.\\n     *\\n     * owner:               address of the owner of this FoldingAccount.\\n     */\\n    struct AccountStore {\\n        address entryCaller;\\n        address callbackTarget;\\n        bytes4 expectedCallbackSig;\\n        address foldingRegistry;\\n        address nft;\\n        address owner;\\n    }\\n\\n    modifier onlyAccountOwner() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner, 'FA2');\\n        _;\\n    }\\n\\n    modifier onlyNFTContract() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.nft, 'FA3');\\n        _;\\n    }\\n\\n    modifier onlyAccountOwnerOrRegistry() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\\n        _;\\n    }\\n\\n    function aStore() internal pure returns (AccountStore storage s) {\\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function accountOwner() internal view returns (address) {\\n        return aStore().owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Fodl/modules/StopLoss/StopLossStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract StopLossStorage {\\n    bytes32 constant STOP_LOSS_LIMIT_STORAGE_POSITION = keccak256('folding.storage.stopLoss');\\n\\n    /**\\n     * collateralUsageLimit:    when the position collateral usage surpasses this threshold,\\n     *                          anyone will be able to trigger the stop loss\\n     *\\n     * slippageIncentive:       when the bot repays the debt, it will be able to take\\n     *                          an amount of supply token equivalent to the repaid debt plus\\n     *                          this incentive specified in percentage.\\n     *                          It has to be carefully configured with unwind factor\\n     *\\n     * unwindFactor:            percentage of debt that can be repaid when the position is\\n     *                          eligible for stop loss\\n     */\\n    struct StopLossStore {\\n        uint256 collateralUsageLimit; // ranges from 0 to 1e18\\n        uint256 slippageIncentive; // ranges from 0 to 1e18\\n        uint256 unwindFactor; // ranges from 0 to 1e18\\n    }\\n\\n    function stopLossStore() internal pure returns (StopLossStore storage s) {\\n        bytes32 position = STOP_LOSS_LIMIT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resetAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ResetAccountConnector","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}