{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"contracts/interfaces/IAMM.sol\\\";\\nimport \\\"contracts/interfaces/ILPToken.sol\\\";\\nimport \\\"contracts/interfaces/IFutureVault.sol\\\";\\nimport \\\"contracts/interfaces/IRewarder.sol\\\";\\n\\n// MasterChef is the master of APW. He can make APW and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once APW is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MasterChef is OwnableUpgradeable, ERC1155HolderUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for ILPToken;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 periodId;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of APWs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accAPWPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. User receives the pending reward sent to his/her address for this pool.\\n        //   2. User's `amount` gets updated.\\n        //   3. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 allocPoint; // How many allocation points assigned to this pool. APWs to distribute per block.\\n        uint256 accAPWPerShare; // Accumulated APWs per share, times 1e12. See below.\\n        uint256 lastRewardBlock; // Last block number that APWs distribution occurs.\\n        uint256 ammId;\\n        uint256 pairId;\\n    }\\n\\n    EnumerableSetUpgradeable.UintSet internal activePools; // list of tokenId to update\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) internal poolToPeriodId; // ammid => paird => period\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(uint256 => mapping(address => UserInfo))) public userInfo; // ammid => pairId => user address => user info\\n\\n    mapping(uint256 => address) public lpIDToFutureAddress;\\n\\n    mapping(uint256 => uint256) public nextUpgradeAllocPoint;\\n\\n    mapping(uint256 => IRewarder) public rewarders;\\n    uint256 private constant TOKEN_PRECISION = 1e12;\\n    // The APW TOKEN!\\n    IERC20Upgradeable public apw;\\n    // The APWine LP token\\n    ILPToken public lpToken;\\n    // APW tokens created per block.\\n    uint256 public apwPerBlock;\\n    // Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    // ERC-165 identifier for the main token standard.\\n    bytes4 public constant ERC1155_ERC165 = 0xd9b67a26;\\n\\n    mapping(address => EnumerableSetUpgradeable.UintSet) internal userLpTokensIds;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    // The block number when APW mining starts.\\n    uint256 public startBlock;\\n\\n    modifier validPool(uint256 _lpTokenId) {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        require(poolToPeriodId[ammId][pairId] != 0, \\\"MasterChef: invalid pool id\\\");\\n        _;\\n    }\\n\\n    event Deposit(address indexed user, uint256 indexed lpTokenId, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed lpTokenId, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed lpTokenId, uint256 amount);\\n    event NextAllocPointSet(uint256 indexed previousLpTokenId, uint256 nextAllocPoint);\\n    event Harvest(address indexed user, uint256 indexed lpTokenId, uint256 amount);\\n\\n    function initialize(\\n        address _apw,\\n        address _lpToken,\\n        uint256 _apwPerBlock,\\n        uint256 _startBlock\\n    ) external initializer {\\n        require(_apw != address(0), \\\"MasterChef: Invalid APW address provided\\\");\\n        require(_lpToken != address(0), \\\"MasterChef: Invalid LPToken address provided\\\");\\n        require(_apwPerBlock > 0, \\\"MasterChef: !apwPerBlock-0\\\");\\n\\n        apw = IERC20Upgradeable(_apw);\\n        lpToken = ILPToken(_lpToken);\\n        apwPerBlock = _apwPerBlock;\\n        startBlock = _startBlock;\\n        totalAllocPoint = 0;\\n        __Ownable_init();\\n        _registerInterface(ERC1155_ERC165);\\n    }\\n\\n    // Add a new LP token to the pool. Can only be called by the owner.\\n    // Cannot add same LP token twice.\\n    function add(\\n        uint256 _allocPoint,\\n        uint256 _lpTokenId,\\n        IRewarder _rewarder,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // TODO: Slipping zero check for allocPoint, that scenario is considered and will not cause a problem\\n        _add(_allocPoint, _lpTokenId, _rewarder, _withUpdate);\\n    }\\n\\n    function _add(\\n        uint256 _allocPoint,\\n        uint256 _lpTokenId,\\n        IRewarder _rewarder,\\n        bool _withUpdate\\n    ) internal {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        uint64 periodId = lpToken.getPeriodIndex(_lpTokenId);\\n        address ammAddress = lpToken.amms(ammId);\\n        require(ammAddress != address(0), \\\"MasterChef: LPTokenId Invalid\\\");\\n        require(poolToPeriodId[ammId][pairId] != periodId, \\\"MasterChef: LP Token already added\\\");\\n        address futureAddress = IAMM(ammAddress).getFutureAddress();\\n        uint256 lastPeriodId = IFutureVault(futureAddress).getCurrentPeriodIndex();\\n        require(periodId == lastPeriodId, \\\"MasterChef: Invalid period ID for LP Token\\\");\\n        lpIDToFutureAddress[_lpTokenId] = futureAddress;\\n        rewarders[_lpTokenId] = _rewarder;\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo[_lpTokenId] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accAPWPerShare: 0,\\n            ammId: ammId,\\n            pairId: pairId\\n        });\\n        activePools.add(_lpTokenId);\\n        poolToPeriodId[ammId][pairId] = periodId;\\n    }\\n\\n    // Update the given pool's APW allocation point. Can only be called by the owner.\\n    /// @param _lpTokenId The lpTokenId of the pool\\n    /// @param _allocPoint New AP of the pool.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\n    function set(\\n        uint256 _lpTokenId,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // TODO: Slipping zero check for allocPoint, that scenario is considered and will not cause a problem\\n        _set(_lpTokenId, _allocPoint, _rewarder, overwrite, _withUpdate);\\n    }\\n\\n    function _set(\\n        uint256 _lpTokenId,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite,\\n        bool _withUpdate\\n    ) internal validPool(_lpTokenId) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_lpTokenId].allocPoint).add(_allocPoint);\\n        poolInfo[_lpTokenId].allocPoint = _allocPoint;\\n        if (overwrite) {\\n            rewarders[_lpTokenId] = _rewarder;\\n        }\\n    }\\n\\n    // View function to see pending APWs on frontend.\\n    function pendingAPW(uint256 _lpTokenId, address _user) external view validPool(_lpTokenId) returns (uint256) {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        UserInfo storage user = userInfo[ammId][pairId][_user];\\n        PoolInfo storage pool = poolInfo[_lpTokenId];\\n        uint256 accAPWPerShare = pool.accAPWPerShare;\\n        uint256 lpSupply = lpToken.balanceOf(address(this), _lpTokenId);\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\\n            uint256 apwReward =\\n                (block.number.sub(pool.lastRewardBlock)).mul(apwPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n\\n            accAPWPerShare = accAPWPerShare.add(apwReward.mul(TOKEN_PRECISION).div(lpSupply));\\n        }\\n\\n        return user.amount.mul(accAPWPerShare).div(TOKEN_PRECISION).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = activePools.length();\\n        for (uint256 i = 0; i < length; ++i) {\\n            updatePool(activePools.at(i));\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _lpTokenId) public validPool(_lpTokenId) {\\n        PoolInfo storage pool = poolInfo[_lpTokenId];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = lpToken.balanceOf(address(this), _lpTokenId);\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 apwReward =\\n            totalAllocPoint == 0\\n                ? 0\\n                : (block.number.sub(pool.lastRewardBlock)).mul(apwPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        pool.accAPWPerShare = pool.accAPWPerShare.add(apwReward.mul(TOKEN_PRECISION).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Update pool rewards, setting previous at 0 and creating a new one with the same parameters\\n    function _upgradePoolRewardsIfNeeded(uint64 _ammId, uint256 _pairId) internal returns (bool) {\\n        address ammAddress = lpToken.amms(_ammId);\\n        uint256 lastPeriodId = IFutureVault(IAMM(ammAddress).getFutureAddress()).getCurrentPeriodIndex();\\n        uint256 previousPeriodId = poolToPeriodId[_ammId][_pairId];\\n        uint previousLpTokenId = IAMM(ammAddress).getLPTokenId(_ammId, previousPeriodId, _pairId);\\n        if (lastPeriodId > previousPeriodId) {\\n            _set(previousLpTokenId, 0, IRewarder(0x0), false, false); // remove rewards for old period\\n            uint256 newLpTokenId = IAMM(ammAddress).getLPTokenId(_ammId, lastPeriodId, _pairId);\\n            activePools.remove(previousLpTokenId); // remove old pool from active ones\\n            IRewarder rewarder = rewarders[previousLpTokenId];\\n            _add(nextUpgradeAllocPoint[previousLpTokenId], newLpTokenId, rewarder, false); // add rewards for the new period\\n            if (address(rewarder) != address(0x0)) rewarder.renewPool(previousLpTokenId, newLpTokenId);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Deposit LP tokens to MasterChef for APW allocation.\\n    function deposit(uint256 _lpTokenId, uint256 _amount) external validPool(_lpTokenId) {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        _upgradePoolRewardsIfNeeded(ammId, pairId);\\n\\n        uint256 periodOfToken = lpToken.getPeriodIndex(_lpTokenId);\\n        uint256 lastPeriodId = IFutureVault(lpIDToFutureAddress[_lpTokenId]).getCurrentPeriodIndex();\\n        require(periodOfToken == lastPeriodId, \\\"Masterchef: Invalid period Id for Token\\\");\\n\\n        updatePool(_lpTokenId);\\n\\n        PoolInfo storage pool = poolInfo[_lpTokenId];\\n        UserInfo storage user = userInfo[ammId][pairId][msg.sender];\\n\\n        if (user.amount > 0) {\\n            uint256 lastUserLpTokenId = IAMM(lpToken.amms(ammId)).getLPTokenId(ammId, user.periodId, pairId);\\n            uint256 accAPWPerShare =\\n                (user.periodId != 0 && user.periodId < periodOfToken)\\n                    ? poolInfo[lastUserLpTokenId].accAPWPerShare\\n                    : pool.accAPWPerShare;\\n            uint256 pending = user.amount.mul(accAPWPerShare).div(TOKEN_PRECISION).sub(user.rewardDebt);\\n\\n            if (pending > 0) require(safeAPWTransfer(msg.sender, pending), \\\"Masterchef: SafeTransfer APW failed\\\");\\n        }\\n        if (user.periodId != periodOfToken) {\\n            userLpTokensIds[msg.sender].remove(IAMM(lpToken.amms(ammId)).getLPTokenId(ammId, pairId, user.periodId));\\n            user.amount = 0;\\n            user.rewardDebt = 0;\\n            user.periodId = periodOfToken;\\n        }\\n\\n        if (_amount > 0) lpToken.safeTransferFrom(address(msg.sender), address(this), _lpTokenId, _amount, \\\"\\\");\\n        user.amount = user.amount.add(_amount);\\n        userLpTokensIds[msg.sender].add(_lpTokenId);\\n        user.rewardDebt = user.amount.mul(pool.accAPWPerShare).div(TOKEN_PRECISION);\\n\\n        IRewarder _rewarder = rewarders[_lpTokenId];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onAPWReward(_lpTokenId, msg.sender, msg.sender, user.amount);\\n        }\\n\\n        emit Deposit(msg.sender, _lpTokenId, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _lpTokenId, uint256 _amount) external validPool(_lpTokenId) {\\n        PoolInfo storage pool = poolInfo[_lpTokenId];\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        UserInfo storage user = userInfo[ammId][pairId][msg.sender];\\n        if (totalAllocPoint != 0) updatePool(_lpTokenId);\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        uint256 pending = user.amount.mul(pool.accAPWPerShare).div(TOKEN_PRECISION).sub(user.rewardDebt);\\n        if (pending > 0) require(safeAPWTransfer(msg.sender, pending), \\\"Masterchef: SafeTransfer APW failed\\\");\\n        user.amount = user.amount.sub(_amount);\\n        if (user.amount == 0) userLpTokensIds[msg.sender].remove(_lpTokenId);\\n        user.rewardDebt = user.amount.mul(pool.accAPWPerShare).div(TOKEN_PRECISION);\\n        IRewarder _rewarder = rewarders[_lpTokenId];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onAPWReward(_lpTokenId, msg.sender, msg.sender, user.amount);\\n        }\\n        if (_amount > 0) lpToken.safeTransferFrom(address(this), address(msg.sender), _lpTokenId, _amount, \\\"\\\");\\n        emit Withdraw(msg.sender, _lpTokenId, _amount);\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\n    /// @param _lpTokenId The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of SUSHI rewards.\\n    function harvest(uint256 _lpTokenId, address to) public {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        UserInfo storage user = userInfo[ammId][pairId][msg.sender];\\n\\n        require(user.amount != 0, \\\"Masterchef: invalid lp address\\\");\\n\\n        uint256 accumulatedAPW = uint256(user.amount.mul(poolInfo[_lpTokenId].accAPWPerShare) / TOKEN_PRECISION);\\n        uint256 _pendingAPW = accumulatedAPW.sub(user.rewardDebt);\\n\\n        // Effects\\n        user.rewardDebt = accumulatedAPW;\\n\\n        // Interactions\\n        if (_pendingAPW != 0) {\\n            safeAPWTransfer(to, _pendingAPW);\\n        }\\n\\n        IRewarder _rewarder = rewarders[_lpTokenId];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onAPWReward(_lpTokenId, msg.sender, to, user.amount);\\n        }\\n\\n        emit Harvest(msg.sender, _lpTokenId, _pendingAPW);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _lpTokenId) external validPool(_lpTokenId) {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        UserInfo storage user = userInfo[ammId][pairId][msg.sender];\\n        uint256 userAmount = user.amount;\\n        if (userAmount > 0) lpToken.safeTransferFrom(address(this), address(msg.sender), _lpTokenId, userAmount, \\\"\\\");\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        IRewarder _rewarder = rewarders[_lpTokenId];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onAPWReward(_lpTokenId, msg.sender, msg.sender, 0);\\n        }\\n        userLpTokensIds[msg.sender].remove(_lpTokenId);\\n        emit EmergencyWithdraw(msg.sender, _lpTokenId, userAmount);\\n    }\\n\\n    // Safe apw transfer function, just in case if rounding error causes pool to not have enough APWs.\\n    function safeAPWTransfer(address _to, uint256 _amount) internal returns (bool success) {\\n        uint256 apwBal = apw.balanceOf(address(this));\\n        uint256 transferAmount = (_amount > apwBal) ? apwBal : _amount;\\n        success = apw.transfer(_to, transferAmount);\\n    }\\n\\n    // **** Additional functions separate from the original masterchef contract ****\\n    function setAPWPerBlock(uint256 _apwPerBlock) external onlyOwner {\\n        massUpdatePools();\\n        require(_apwPerBlock > 0, \\\"!apwPerBlock-0\\\");\\n        apwPerBlock = _apwPerBlock;\\n    }\\n\\n    // Withdraw APWs on the contract\\n    function withdrawAPW(address _recipient, uint256 _amount) external onlyOwner {\\n        if (_amount > 0) apw.transfer(_recipient, _amount);\\n    }\\n\\n    // Set the next allocPoint on period upgrade\\n    function setNextUpgradeAllocPoint(uint256 _lpTokenId, uint256 _nextAllocPoint) external validPool(_lpTokenId) onlyOwner {\\n        uint64 ammId = lpToken.getAMMId(_lpTokenId);\\n        uint256 pairId = lpToken.getPairId(_lpTokenId);\\n        uint256 periodId = lpToken.getPeriodIndex(_lpTokenId);\\n        require(periodId == poolToPeriodId[ammId][pairId], \\\"Masterchef: pool already upgraded\\\");\\n        nextUpgradeAllocPoint[_lpTokenId] = _nextAllocPoint;\\n        emit NextAllocPointSet(_lpTokenId, _nextAllocPoint);\\n    }\\n\\n    function isRegisteredPoolId(uint256 _poolId) external view returns (bool) {\\n        return activePools.contains(_poolId);\\n    }\\n\\n    function poolIdsLength() external view returns (uint256) {\\n        return activePools.length();\\n    }\\n\\n    function poolIdAt(uint256 _id) external view returns (uint256) {\\n        return activePools.at(_id);\\n    }\\n\\n    function getUserLpTokenIdList(address _user) external view returns (uint256[] memory) {\\n        uint256 length = userLpTokensIds[_user].length();\\n        uint256[] memory _userLpTokenIds = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _userLpTokenIds[i] = userLpTokensIds[_user].at(i);\\n        }\\n        return _userLpTokenIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IAMM {\\n    /* Struct */\\n    struct Pair {\\n        address tokenAddress; // first is always PT\\n        uint256[2] weights;\\n        uint256[2] balances;\\n        bool liquidityIsInitialized;\\n    }\\n\\n    /**\\n     * @notice finalize the initialization of the amm\\n     * @dev must be called during the first period the amm is supposed to be active\\n     */\\n    function finalize() external;\\n\\n    /**\\n     * @notice switch period\\n     * @dev must be called after each new period switch\\n     * @dev the switch will auto renew part of the tokens and update the weights accordingly\\n     */\\n    function switchPeriod() external;\\n\\n    /**\\n     * @notice toggle amm pause for pausing/resuming all user functionalities\\n     */\\n    function togglePauseAmm() external;\\n\\n    /**\\n     * @notice Withdraw expired LP tokens\\n     */\\n    function withdrawExpiredToken(address _user, uint256 _lpTokenId) external;\\n\\n    /**\\n     * @notice Getter for redeemable expired tokens info\\n     * @param _user the address of the user to check the redeemable tokens of\\n     * @param _lpTokenId the lp token id\\n     * @return the amount, the period id and the pair id of the expired tokens of the user\\n     */\\n    function getExpiredTokensInfo(address _user, uint256 _lpTokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function swapExactAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Create liquidity on the pair setting an initial price\\n     */\\n    function createLiquidity(uint256 _pairID, uint256[2] memory _tokenAmounts) external;\\n\\n    function addLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountOut,\\n        uint256[2] memory _maxAmountsIn\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountIn,\\n        uint256[2] memory _minAmountsOut\\n    ) external;\\n\\n    function joinSwapExternAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinSwapPoolAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _poolAmountOut,\\n        uint256 _maxAmountIn\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitSwapPoolAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _poolAmountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitSwapExternAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _maxPoolAmountIn\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function setSwappingFees(uint256 _swapFee) external;\\n\\n    /* Getters */\\n    function calcOutAndSpotGivenIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut\\n    ) external view returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function calcInAndSpotGivenOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut\\n    ) external view returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Getter for the spot price of a pair\\n     * @param _pairID the id of the pair\\n     * @param _tokenIn the id of the tokens sent\\n     * @param _tokenOut the id of the tokens received\\n     * @return the sport price of the pair\\n     */\\n    function getSpotPrice(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenOut\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the corresponding future vault\\n     * @return the address of the future vault\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the pt address\\n     * @return the pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the address of the underlying token of the ibt\\n     * @return the address of the underlying token of the ibt\\n     */\\n    function getUnderlyingOfIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the fyt address\\n     * @return the fyt address\\n     */\\n    function getFYTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the PT weight in the first pair (0)\\n     * @return the weight of the pt\\n     */\\n    function getPTWeightInPair() external view returns (uint256);\\n\\n    function getPairWithID(uint256 _pairID) external view returns (Pair memory);\\n\\n    function getLPTokenId(\\n        uint256 _ammId,\\n        uint256 _periodIndex,\\n        uint256 _pairID\\n    ) external pure returns (uint256);\\n\\n    function ammId() external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"contracts/interfaces/IERC1155.sol\\\";\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILPToken is IERC1155 {\\n    function amms(uint64 _ammId) external view returns (address);\\n\\n    /**\\n     * @notice Getter for AMM id\\n     * @param _id the id of the LP Token\\n     * @return AMM id\\n     */\\n    function getAMMId(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PeriodIndex\\n     * @param _id the id of the LP Token\\n     * @return period index\\n     */\\n    function getPeriodIndex(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PairId\\n     * @param _id the index of the Pair\\n     * @return pair index\\n     */\\n    function getPairId(uint256 _id) external pure returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IPT.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/interfaces/IFutureWallet.sol\\\";\\n\\ninterface IFutureVault {\\n    /* Events */\\n    event NewPeriodStarted(uint256 _newPeriodIndex);\\n    event FutureWalletSet(address _futureWallet);\\n    event RegistrySet(IRegistry _registry);\\n    event FundsDeposited(address _user, uint256 _amount);\\n    event FundsWithdrawn(address _user, uint256 _amount);\\n    event PTSet(IPT _pt);\\n    event LiquidityTransfersPaused();\\n    event LiquidityTransfersResumed();\\n    event DelegationCreated(address _delegator, address _receiver, uint256 _amount);\\n    event DelegationRemoved(address _delegator, address _receiver, uint256 _amount);\\n\\n    /* Params */\\n    /**\\n     * @notice Getter for the PERIOD future parameter\\n     * @return returns the period duration of the future\\n     */\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the PLATFORM_NAME future parameter\\n     * @return returns the platform of the future\\n     */\\n    function PLATFORM_NAME() external view returns (string memory);\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() external;\\n\\n    /**\\n     * @notice Update the state of the user and mint claimable pt\\n     * @param _user user adress\\n     */\\n    function updateUserState(address _user) external;\\n\\n    /**\\n     * @notice Send the user their owed FYT (and pt if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\\n     */\\n    function deposit(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their pt holding\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdraw(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Create a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to delegate\\n     */\\n    function createFYTDelegationTo(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Remove a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to remove from the delegation\\n     */\\n    function withdrawFYTDelegationFrom(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter the total number of FYTs on address is delegating\\n     * @param _delegator the delegating address\\n     * @return totalDelegated the number of FYTs delegated\\n     */\\n    function getTotalDelegated(address _delegator) external view returns (uint256 totalDelegated);\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for current period index\\n     * @return current period index\\n     * @dev index starts at 1\\n     */\\n    function getCurrentPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of pt that the user can claim\\n     * @param _user user to check the check the claimable pt of\\n     * @return the amount of pt claimable by the user\\n     */\\n    function getClaimablePT(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned\\n     * @param _user user adress\\n     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation\\n     */\\n    function getUserEarlyUnlockablePremium(address _user)\\n        external\\n        view\\n        returns (uint256 premiumLocked, uint256 amountRequired);\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user the user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user the user to check the claimable FYT of\\n     * @param _periodIndex period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the yield currently generated by one pt for the current period\\n     * @return the amount of yield (in IBT) generated during the current period\\n     */\\n    function getUnrealisedYieldPerPT() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\\n     * @param _amount the amount to of IBT to deposit\\n     * @return the number of pt that can be minted for that amount\\n     */\\n    function getPTPerAmountDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit\\n     * @param _amount the amount of underlying deposited\\n     * @return the number of underlying of the ibt deposited that will be redeemable\\n     */\\n    function getPremiumPerUnderlyingDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for total underlying deposited in the vault\\n     * @return the total amount of funds deposited in the vault (in underlying)\\n     */\\n    function getTotalUnderlyingDeposited() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the total yield generated during one period\\n     * @param _periodID the period id\\n     * @return the total yield in underlying value\\n     */\\n    function getYieldOfPeriod(uint256 _periodID) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future pt address\\n     * @return pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the terminated state of the future\\n     * @return true if this vault is terminated\\n     */\\n    function isTerminated() external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of the current period\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getPerformanceFeeFactor() external view returns (uint256);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the vault\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllVaultRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemVaultRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Add a token to the list of reward tokens\\n     * @param _token the reward token to add to the list\\n     * @dev the token must be different than the ibt\\n     */\\n    function addRewardsToken(address _token) external;\\n\\n    /**\\n     * @notice Getter to check if a token is in the reward tokens list\\n     * @param _token the token to check if it is in the list\\n     * @return true if the token is a reward token\\n     */\\n    function isRewardToken(address _token) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the reward token at an index\\n     * @param _index the index of the reward token in the list\\n     * @return the address of the token at this index\\n     */\\n    function getRewardTokenAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the size of the list of reward tokens\\n     * @return the number of token in the list\\n     */\\n    function getRewardTokensCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Set futureWallet address\\n     */\\n    function setFutureWallet(IFutureWallet _futureWallet) external;\\n\\n    /**\\n     * @notice Set Registry\\n     */\\n    function setRegistry(IRegistry _registry) external;\\n\\n    /**\\n     * @notice Pause liquidity transfers\\n     */\\n    function pauseLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Resume liquidity transfers\\n     */\\n    function resumeLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Convert an amount of IBTs in its equivalent in underlying tokens\\n     * @param _amount the amount of IBTs\\n     * @return the corresponding amount of underlying\\n     */\\n    function convertIBTToUnderlying(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Convert an amount of underlying tokens in its equivalent in IBTs\\n     * @param _amount the amount of underlying tokens\\n     * @return the corresponding amount of IBTs\\n     */\\n    function convertUnderlyingtoIBT(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onAPWReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 apwAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user) external view returns (IERC20[] memory, uint256[] memory);\\n\\n    function renewPool(uint256 _oldPid, uint256 _newPid) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function mint(\\n        address to,\\n        uint64 _ammId,\\n        uint64 _periodIndex,\\n        uint32 _pairId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external returns (uint256 id);\\n\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IPT is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Returns the current balance of one user (without the claimable amount)\\n     * @param account the address of the account to check the balance of\\n     * @return the current pt balance of this address\\n     */\\n    function recordedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current balance of one user including the pt that were not claimed yet\\n     * @param account the address of the account to check the balance of\\n     * @return the total pt balance of one address\\n     */\\n    function balanceOf(address account) external view override returns (uint256);\\n\\n    /**\\n     * @notice Getter for the future vault link to this pt\\n     * @return the address of the future vault\\n     */\\n    function futureVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRegistry {\\n    /**\\n     * @notice Initializer of the contract\\n     * @param _admin the address of the admin of the contract\\n     */\\n    function initialize(address _admin) external;\\n\\n    /* Setters */\\n    /**\\n     * @notice Setter for the treasury address\\n     * @param _newTreasury the address of the new treasury\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice Setter for the controller address\\n     * @param _newController the address of the new controller\\n     */\\n    function setController(address _newController) external;\\n\\n    /**\\n     * @notice Setter for the APW token address\\n     * @param _newAPW the address of the APW token\\n     */\\n    function setAPW(address _newAPW) external;\\n\\n    /**\\n     * @notice Setter for the proxy factory address\\n     * @param _proxyFactory the address of the new proxy factory\\n     */\\n    function setProxyFactory(address _proxyFactory) external;\\n\\n    /**\\n     * @notice Setter for the APWine IBT logic address\\n     * @param _PTLogic the address of the new APWine IBT logic\\n     */\\n    function setPTLogic(address _PTLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine FYT logic address\\n     * @param _FYTLogic the address of the new APWine FYT logic\\n     */\\n    function setFYTLogic(address _FYTLogic) external;\\n\\n    /**\\n     * @notice Setter for the maths utils address\\n     * @param _mathsUtils the address of the new math utils\\n     */\\n    function setMathsUtils(address _mathsUtils) external;\\n\\n    /**\\n     * @notice Setter for the naming utils address\\n     * @param _namingUtils the address of the new naming utils\\n     */\\n    function setNamingUtils(address _namingUtils) external;\\n\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the treasury address\\n     * @return the address of the treasury\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the tokens factory address\\n     * @return the address of the tokens factory\\n     */\\n    function getTokensFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the DAO address\\n     * @return the address of the DAO that has admin rights on the APW token\\n     */\\n    function getDAOAddress() external returns (address);\\n\\n    /**\\n     * @notice Getter for the APW token address\\n     * @return the address the APW token\\n     */\\n    function getAPWAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the AMM factory address\\n     * @return the AMM factory address\\n     */\\n    function getAMMFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the token factory address\\n     * @return the token factory address\\n     */\\n    function getTokenFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the proxy factory address\\n     * @return the proxy factory address\\n     */\\n    function getProxyFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine IBT logic address\\n     * @return the APWine IBT logic address\\n     */\\n    function getPTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine FYT logic address\\n     * @return the APWine FYT logic address\\n     */\\n    function getFYTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine AMM logic address\\n     * @return the APWine AMM logic address\\n     */\\n    function getAMMLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine AMM LP token logic address\\n     * @return the APWine AMM LP token logic address\\n     */\\n    function getAMMLPTokenLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for math utils address\\n     * @return the math utils address\\n     */\\n    function getMathsUtils() external view returns (address);\\n\\n    /**\\n     * @notice Getter for naming utils address\\n     * @return the naming utils address\\n     */\\n    function getNamingUtils() external view returns (address);\\n\\n    /* Futures */\\n    /**\\n     * @notice Add a future to the registry\\n     * @param _future the address of the future to add to the registry\\n     */\\n    function addFuture(address _future) external;\\n\\n    /**\\n     * @notice Remove a future from the registry\\n     * @param _future the address of the future to remove from the registry\\n     */\\n    function removeFuture(address _future) external;\\n\\n    /**\\n     * @notice Getter to check if a future is registered\\n     * @param _future the address of the future to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFuture(address _future) external view returns (bool);\\n\\n    /**\\n     * @notice Getter to check if an AMM is registered\\n     * @param _ammAddress the address of the amm to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredAMM(address _ammAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future registered at an index\\n     * @param _index the index of the future to return\\n     * @return the address of the corresponding future\\n     */\\n    function getFutureAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future registered\\n     * @return the number of future registered\\n     */\\n    function futureCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IFutureWallet {\\n    /**\\n     * @notice Intializer\\n     * @param _futureAddress the address of the corresponding future\\n     * @param _adminAddress the address of the ACR admin\\n     */\\n    function initialize(address _futureAddress, address _adminAddress) external;\\n\\n    /**\\n     * @notice register the yield of an expired period\\n     * @param _amount the amount of yield to be registered\\n     */\\n    function registerExpiredFuture(uint256 _amount) external;\\n\\n    /**\\n     * @notice redeem the yield of the underlying yield of the FYT held by the sender\\n     * @param _periodIndex the index of the period to redeem the yield from\\n     */\\n    function redeemYield(uint256 _periodIndex) external;\\n\\n    /**\\n     * @notice return the yield that could be redeemed by an address for a particular period\\n     * @param _periodIndex the index of the corresponding period\\n     * @param _tokenHolder the FYT holder\\n     * @return the yield that could be redeemed by the token holder for this period\\n     */\\n    function getRedeemableYield(uint256 _periodIndex, address _tokenHolder) external view returns (uint256);\\n\\n    /**\\n     * @notice getter for the address of the future corresponding to this future wallet\\n     * @return the address of the future\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice getter for the address of the IBT corresponding to this future wallet\\n     * @return the address of the IBT\\n     */\\n    function getIBTAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousLpTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAllocPoint\",\"type\":\"uint256\"}],\"name\":\"NextAllocPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155_ERC165\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apw\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apwPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLpTokenIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apw\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apwPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"isRegisteredPoolId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpIDToFutureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ILPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextUpgradeAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAPW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"poolIdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAPWPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ammId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarders\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apwPerBlock\",\"type\":\"uint256\"}],\"name\":\"setAPWPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextAllocPoint\",\"type\":\"uint256\"}],\"name\":\"setNextUpgradeAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAPW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterChef","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}