{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FoxGames_v3.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"./IFoxGame.sol\\\";\\nimport \\\"./IFoxGameCarrot.sol\\\";\\nimport \\\"./IFoxGameCrown.sol\\\";\\nimport \\\"./IFoxGameNFT.sol\\\";\\n\\ncontract FoxGames_v3 is IFoxGame, OwnableUpgradeable, IERC721ReceiverUpgradeable,\\n                    PausableUpgradeable, ReentrancyGuardUpgradeable {\\n  using ECDSAUpgradeable for bytes32; // signature verification helpers\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet; // iterable staked tokens\\n\\n  /****\\n   * Thanks for checking out our contracts.\\n   * If you're interested in working with us, you can find us on\\n   * discord (https://discord.gg/foxgame). We also have a bug bounty\\n   * program and are available at @officialfoxgame or bugs@fox.game.\\n   ***/\\n\\n  // Advantage score adjustments for both foxes and hunters\\n  uint8 public constant MAX_ADVANTAGE = 8;\\n  uint8 public constant MIN_ADVANTAGE = 5;\\n\\n  // Foxes take a 40% tax on all rabbiot $CARROT claimed\\n  uint8 public constant RABBIT_CLAIM_TAX_PERCENTAGE = 40;\\n\\n  // Hunters have a 5% chance of stealing a fox as it unstakes\\n  uint8 private hunterStealFoxProbabilityMod;\\n\\n  // Cut between hunters and foxes\\n  uint8 private hunterTaxCutPercentage;\\n\\n  // Total hunter marksman scores staked\\n  uint16 public totalMarksmanPointsStaked;\\n\\n  // Total fox cunning scores staked\\n  uint16 public totalCunningPointsStaked;\\n\\n  // Number of Rabbit staked\\n  uint32 public totalRabbitsStaked;\\n\\n  // Number of Foxes staked\\n  uint32 public totalFoxesStaked;\\n\\n  // Number of Hunters staked\\n  uint32 public totalHuntersStaked;\\n\\n  // The last time $CARROT was claimed\\n  uint48 public lastClaimTimestamp;\\n\\n  // Rabbits must have 2 days worth of $CARROT to unstake or else it's too cold\\n  uint48 public constant RABBIT_MINIMUM_TO_EXIT = 2 days;\\n\\n  // There will only ever be (roughly) 2.5 billion $CARROT earned through staking\\n  uint128 public constant MAXIMUM_GLOBAL_CARROT = 2500000000 ether;\\n\\n  // amount of $CARROT earned so far\\n  uint128 public totalCarrotEarned;\\n\\n  // Collected rewards before any foxes staked\\n  uint128 public unaccountedFoxRewards;\\n\\n  // Collected rewards before any foxes staked\\n  uint128 public unaccountedHunterRewards;\\n\\n  // Amount of $CARROT due for each cunning point staked\\n  uint128 public carrotPerCunningPoint;\\n\\n  // Amount of $CARROT due for each marksman point staked\\n  uint128 public carrotPerMarksmanPoint;\\n\\n  // Rabbit earn 10000 $CARROT per day\\n  uint128 public constant RABBIT_EARNING_RATE = 115740740740740740; // 10000 ether / 1 days;\\n\\n  // Hunters earn 20000 $CARROT per day\\n  uint128 public constant HUNTER_EARNING_RATE = 231481481481481470; // 20000 ether / 1 days;\\n\\n  // Staking state for both time-based and point-based rewards\\n  struct TimeStake { uint16 tokenId; uint48 time; address owner; }\\n  struct EarningStake { uint16 tokenId; uint128 earningRate; address owner; }\\n\\n  // Events\\n  event TokenStaked(string kind, uint16 tokenId, address owner);\\n  event TokenUnstaked(string kind, uint16 tokenId, address owner, uint128 earnings);\\n  event FoxStolen(uint16 foxTokenId, address thief, address victim);\\n\\n  // Signature to prove membership and randomness\\n  address private signVerifier;\\n\\n  // External contract reference\\n  IFoxGameNFT private foxNFT;\\n  IFoxGameCarrot private foxCarrot;\\n\\n  // Staked rabbits\\n  mapping(uint16 => TimeStake) public rabbitStakeByToken;\\n\\n  // Staked foxes\\n  mapping(uint8 => EarningStake[]) public foxStakeByCunning; // foxes grouped by cunning\\n  mapping(uint16 => uint16) public foxHierarchy; // fox location within cunning group\\n\\n  // Staked hunters\\n  mapping(uint16 => TimeStake) public hunterStakeByToken;\\n  mapping(uint8 => EarningStake[]) public hunterStakeByMarksman; // hunter grouped by markman\\n  mapping(uint16 => uint16) public hunterHierarchy; // hunter location within marksman group\\n\\n  // FoxGame membership date\\n  mapping(address => uint48) public membershipDate;\\n  mapping(address => uint32) public memberNumber;\\n  event MemberJoined(address member, uint32 memberCount);\\n  uint32 public membershipCount;\\n\\n  // External contract reference\\n  IFoxGameNFT private foxNFTGen1;\\n\\n  // Mapping for staked tokens\\n  mapping(address => EnumerableSetUpgradeable.UintSet) private _stakedTokens;\\n\\n  // Bool to store staking data\\n  bool private _storeStaking;\\n\\n  // Use seed instead\\n  uint256 private _seed;\\n\\n  // Reference to phase 2 utility token\\n  IFoxGameCrown private foxCrown;\\n\\n  // amount of $CROWN earned so far\\n  uint128 public totalCrownEarned;\\n\\n  // Cap CROWN earnings after 2.5 billion has been distributed\\n  uint128 public constant MAXIMUM_GLOBAL_CROWN = 2500000000 ether;\\n\\n  // Entropy storage for future events that require randomness (claim, unstake).\\n  // Address => OP (claim/unstake) => TokenID => BlockNumber\\n  mapping(address => mapping(uint8 => mapping(uint16 => uint32))) private _stakeClaimBlock;\\n\\n  // Op keys for Entropy storage\\n  uint8 private constant UNSTAKE_AND_CLAIM_IDX = 0;\\n  uint8 private constant CLAIM_IDX = 1;\\n\\n  // Cost of a barrel in CARROT\\n  uint256 public barrelPrice;\\n\\n  // Track account purchase of barrels\\n  mapping(address => uint48) private barrelPurchaseDate;\\n\\n  // Barrel event purchase\\n  event BarrelPurchase(address account, uint256 price, uint48 timestamp);\\n\\n  // Date when corruption begins to spread... 2 things happen:\\n  // 1. Carrot begins to burning\\n  // 2. Game risks go up\\n  uint48 public corruptionStartDate;\\n\\n  // The last time $CROWN was claimed\\n  uint48 public lastCrownClaimTimestamp;\\n\\n  // Phase 2 start date with 3 meanings:\\n  // - the date carrot will no long accrue rewards\\n  // - the date crown will start acruing rewards\\n  // - the start of a 24-hour countdown for corruption\\n  uint48 public divergenceTime;\\n\\n  // Corruption percent rate per second\\n  uint128 public constant CORRUPTION_BURN_PERCENT_RATE = 1157407407407; // 10% burned per day\\n\\n  // Events for token claiming in phase 2\\n  event ClaimCarrot(IFoxGameNFT.Kind, uint16 tokenId, address owner, uint128 reward, uint128 corruptedCarrot);\\n  event CrownClaimed(string kind, uint16 tokenId, address owner, bool unstake, uint128 reward, uint128 tax, bool elevatedRisk);\\n\\n  // Store a bool per token to ensure we dont double claim carrot\\n  mapping(uint16 => bool) private tokenCarrotClaimed;\\n\\n  // < Placeholder >\\n  uint48 private ___;\\n\\n  // Amount of $CROWN due for each cunning point staked\\n  uint128 public crownPerCunningPoint;\\n\\n  // Amount of $CROWN due for each marksman point staked\\n  uint128 public crownPerMarksmanPoint;\\n\\n  // Indicator of which users are still grandfathered into the ground floor of\\n  // $CROWN earnings.\\n  mapping(uint16 => bool) private hasRecentEarningPoint;\\n\\n  /**\\n   * Set the date for phase 2 launch.\\n   * @param timestamp Timestamp\\n   */\\n  function setDivergenceTime(uint48 timestamp) external onlyOwner {\\n    divergenceTime = timestamp;\\n  }\\n\\n  /**\\n   * Init contract upgradability (only called once).\\n   */\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n\\n    hunterStealFoxProbabilityMod = 20; // 100/5=20\\n    hunterTaxCutPercentage = 30; // whole number %\\n\\n    // Pause staking on init\\n    _pause();\\n  }\\n\\n  /**\\n   * Returns the corruption start date.\\n   */\\n  function getCorruptionEnabled() external view returns (bool) {\\n    return corruptionStartDate != 0 && corruptionStartDate < block.timestamp;\\n  }\\n\\n  /**\\n   * Sets the date when corruption will begin to destroy carrot.\\n   * @param timestamp time.\\n   */\\n  function setCorruptionStartTime(uint48 timestamp) external onlyOwner {\\n    corruptionStartDate = timestamp;\\n  }\\n\\n  /**\\n   * Helper functions for validating random seeds.\\n   */\\n  function getClaimSigningHash(address recipient, uint16[] calldata tokenIds, bool unstake, uint32[] calldata blocknums, uint256[] calldata seeds) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(recipient, tokenIds, unstake, blocknums, seeds));\\n  }\\n  function getMintSigningHash(address recipient, uint8 token, uint32 blocknum, uint256 seed) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(recipient, token, blocknum, seed));\\n  }\\n  function isValidMintSignature(address recipient, uint8 token, uint32 blocknum, uint256 seed, bytes memory sig) public view returns (bool) {\\n    bytes32 message = getMintSigningHash(recipient, token, blocknum, seed).toEthSignedMessageHash();\\n    return ECDSAUpgradeable.recover(message, sig) == signVerifier;\\n  }\\n  function isValidClaimSignature(address recipient, uint16[] calldata tokenIds, bool unstake, uint32[] calldata blocknums, uint256[] calldata seeds, bytes memory sig) public view returns (bool) {\\n    bytes32 message = getClaimSigningHash(recipient, tokenIds, unstake, blocknums, seeds).toEthSignedMessageHash();\\n    return ECDSAUpgradeable.recover(message, sig) == signVerifier;\\n  }\\n\\n  /**\\n   * Set the purchase price of Barrels.\\n   * @param price Cost in CARROT\\n   */\\n  function setBarrelPrice(uint256 price) external onlyOwner {\\n    barrelPrice = price;\\n  }\\n\\n  /**\\n   * Allow accounts to purchase barrels using CARROT.\\n   */\\n  function purchaseBarrel() external nonReentrant {\\n    require(tx.origin == msg.sender, \\\"eos\\\");\\n    require(barrelPurchaseDate[msg.sender] == 0, \\\"one barrel per account\\\");\\n\\n    barrelPurchaseDate[msg.sender] = uint48(block.timestamp);\\n    foxCarrot.burn(msg.sender, barrelPrice);\\n    emit BarrelPurchase(msg.sender, barrelPrice, uint48(block.timestamp));\\n  }\\n\\n  /**\\n   * Exposes user barrel purchase date.\\n   * @param account Account to query.\\n   */\\n  function ownsBarrel(address account) external view returns (bool) {\\n    return barrelPurchaseDate[account] != 0;\\n  }\\n\\n  /**\\n   * Return the appropriate contract interface for token.\\n   */\\n  function getTokenContract(uint16 tokenId) private view returns (IFoxGameNFT) {\\n    return tokenId <= 10000 ? foxNFT : foxNFTGen1;\\n  }\\n\\n  /**\\n   * Helper method to fetch rotating entropy used to generate random seeds off-chain.\\n   * @param tokenIds List of token IDs.\\n   * @return entropies List of stored blocks per token.\\n   */\\n  function getEntropies(address recipient, uint16[] calldata tokenIds) external view returns (uint32[2][] memory entropies) {\\n    require(tx.origin == msg.sender, \\\"eos\\\");\\n\\n    entropies = new uint32[2][](tokenIds.length);\\n    for (uint8 i; i < tokenIds.length; i++) {\\n      uint16 tokenId = tokenIds[i];\\n      entropies[i] = [\\n        _stakeClaimBlock[recipient][UNSTAKE_AND_CLAIM_IDX][tokenId],\\n        _stakeClaimBlock[recipient][CLAIM_IDX][tokenId]\\n      ];\\n    }\\n  }\\n\\n  /**\\n   * Adds Rabbits, Foxes and Hunters to their respective safe homes.\\n   * @param account the address of the staker\\n   * @param tokenIds the IDs of the Rabbit and Foxes to stake\\n   */\\n  function stakeTokens(address account, uint16[] calldata tokenIds) external nonReentrant _updateEarnings {\\n    require((account == msg.sender && tx.origin == msg.sender) || msg.sender == address(foxNFTGen1), \\\"not approved\\\");\\n    \\n    IFoxGameNFT nftContract;\\n    uint32 blocknum = uint32(block.number);\\n    mapping(uint16 => uint32) storage senderUnstakeBlock = _stakeClaimBlock[msg.sender][UNSTAKE_AND_CLAIM_IDX];\\n    for (uint16 i; i < tokenIds.length; i++) {\\n      uint16 tokenId = tokenIds[i];\\n\\n      // Thieves abound and leave minting gaps\\n      if (tokenId == 0) {\\n        continue;\\n      }\\n\\n      // Set unstake entropy\\n      senderUnstakeBlock[tokenId] = blocknum;\\n\\n      // Add to respective safe homes\\n      nftContract = getTokenContract(tokenId);\\n      IFoxGameNFT.Kind kind = _getKind(nftContract, tokenId);\\n      if (kind == IFoxGameNFT.Kind.RABBIT) {\\n        _addRabbitToKeep(account, tokenId);\\n      } else if (kind == IFoxGameNFT.Kind.FOX) {\\n        _addFoxToDen(nftContract, account, tokenId);\\n      } else { // HUNTER\\n        _addHunterToCabin(nftContract, account, tokenId);\\n      }\\n\\n      // Transfer into safe house\\n      if (msg.sender != address(foxNFTGen1)) { // dont do this step if its a mint + stake\\n        require(nftContract.ownerOf(tokenId) == msg.sender, \\\"not owner\\\");\\n        nftContract.transferFrom(msg.sender, address(this), tokenId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Adds Rabbit to the Keep.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Rabbit to add to the Barn\\n   */\\n  function _addRabbitToKeep(address account, uint16 tokenId) internal {\\n    rabbitStakeByToken[tokenId] = TimeStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      time: uint48(block.timestamp)\\n    });\\n    totalRabbitsStaked += 1;\\n    emit TokenStaked(\\\"RABBIT\\\", tokenId, account);\\n  }\\n\\n  /**\\n   * Add Fox to the Den.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Fox\\n   */\\n  function _addFoxToDen(IFoxGameNFT nftContract, address account, uint16 tokenId) internal {\\n    uint8 cunningIndex = _getAdvantagePoints(nftContract, tokenId);\\n    totalCunningPointsStaked += cunningIndex;\\n    // Store fox by rating\\n    foxHierarchy[tokenId] = uint16(foxStakeByCunning[cunningIndex].length);\\n    // Add fox to their cunning group\\n    foxStakeByCunning[cunningIndex].push(EarningStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      earningRate: crownPerCunningPoint\\n    }));\\n    // Phase 2 - Mark earning point as valid\\n    hasRecentEarningPoint[tokenId] = true;\\n    totalFoxesStaked += 1;\\n    emit TokenStaked(\\\"FOX\\\", tokenId, account);\\n  }\\n\\n  /**\\n   * Adds Hunter to the Cabin.\\n   * @param account the address of the staker\\n   * @param tokenId the ID of the Hunter\\n   */\\n  function _addHunterToCabin(IFoxGameNFT nftContract, address account, uint16 tokenId) internal {\\n    uint8 marksmanIndex = _getAdvantagePoints(nftContract, tokenId);\\n    totalMarksmanPointsStaked += marksmanIndex;\\n    // Store hunter by rating\\n    hunterHierarchy[tokenId] = uint16(hunterStakeByMarksman[marksmanIndex].length);\\n    // Add hunter to their marksman group\\n    hunterStakeByMarksman[marksmanIndex].push(EarningStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      earningRate: crownPerMarksmanPoint\\n    }));\\n    hunterStakeByToken[tokenId] = TimeStake({\\n      owner: account,\\n      tokenId: tokenId,\\n      time: uint48(block.timestamp)\\n    });\\n    // Phase 2 - Mark earning point as valid\\n    hasRecentEarningPoint[tokenId] = true;\\n    totalHuntersStaked += 1;\\n    emit TokenStaked(\\\"HUNTER\\\", tokenId, account);\\n  }\\n\\n  // NB: Param struct is a workaround for too many variables error\\n  struct Param {\\n    IFoxGameNFT nftContract;\\n    uint16 tokenId;\\n    bool unstake;\\n    uint256 seed;\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings and optionally unstake tokens.\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   * @param blocknums list of blocks each token previously was staked or claimed.\\n   * @param seeds random (off-chain) seeds provided for one-time use.\\n   * @param sig signature verification.\\n   */\\n  function claimRewardsAndUnstake(bool unstake, uint16[] calldata tokenIds, uint32[] calldata blocknums, uint256[] calldata seeds,  bytes calldata sig) external nonReentrant _updateEarnings {\\n    require(tx.origin == msg.sender, \\\"eos\\\");\\n    require(isValidClaimSignature(msg.sender, tokenIds, unstake, blocknums, seeds, sig), \\\"invalid signature\\\");\\n    require(tokenIds.length == blocknums.length && blocknums.length == seeds.length, \\\"seed mismatch\\\");\\n\\n    // Risk factors\\n    bool elevatedRisk =\\n      (corruptionStartDate != 0 && corruptionStartDate < block.timestamp) && // corrupted\\n      (barrelPurchaseDate[msg.sender] == 0);                                 // does not have barrel\\n\\n    // Calculate rewards for each token\\n    uint128 reward;\\n    mapping(uint16 => uint32) storage senderBlocks = _stakeClaimBlock[msg.sender][unstake ? UNSTAKE_AND_CLAIM_IDX : CLAIM_IDX];\\n    Param memory params;\\n    for (uint8 i; i < tokenIds.length; i++) {\\n      uint16 tokenId = tokenIds[i];\\n\\n      // Confirm previous block matches seed generation\\n      require(senderBlocks[tokenId] == blocknums[i], \\\"seed not match\\\");\\n\\n      // Set new entropy for next claim (dont bother if unstaking)\\n      if (!unstake) {\\n        senderBlocks[tokenId] = uint32(block.number);\\n      }\\n\\n      // NB: Param struct is a workaround for too many variables\\n      params.nftContract = getTokenContract(tokenId);\\n      params.tokenId = tokenId;\\n      params.unstake = unstake;\\n      params.seed = seeds[i];\\n\\n      IFoxGameNFT.Kind kind = _getKind(params.nftContract, params.tokenId);\\n      if (kind == IFoxGameNFT.Kind.RABBIT) {\\n        reward += _claimRabbitsFromKeep(params.nftContract, params.tokenId, params.unstake, params.seed, elevatedRisk);\\n      } else if (kind == IFoxGameNFT.Kind.FOX) {\\n        reward += _claimFoxFromDen(params.nftContract, params.tokenId, params.unstake, params.seed, elevatedRisk);\\n      } else { // HUNTER\\n        reward += _claimHunterFromCabin(params.nftContract, params.tokenId, params.unstake);\\n      }\\n    }\\n\\n    // Disburse rewards\\n    if (reward != 0) {\\n      foxCrown.mint(msg.sender, reward);\\n    }\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Rabbit and optionally unstake it\\n   * if not unstaking, pay a 20% tax to the staked foxes\\n   * if unstaking, there is a 50% chance all $CARROT is stolen\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Rabbit to claim earnings from\\n   * @param unstake whether or not to unstake the Rabbit\\n   * @param seed account seed\\n   * @param elevatedRisk true if the user is facing higher risk of losing their token\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimRabbitsFromKeep(IFoxGameNFT nftContract, uint16 tokenId, bool unstake, uint256 seed, bool elevatedRisk) internal returns (uint128 reward) {\\n    TimeStake storage stake = rabbitStakeByToken[tokenId];\\n    require(stake.owner == msg.sender, \\\"not owner\\\");\\n    uint48 time = uint48(block.timestamp);\\n    uint48 stakeStart = stake.time < divergenceTime ? divergenceTime : stake.time; // phase 2 reset\\n    require(!(unstake && time - stakeStart < RABBIT_MINIMUM_TO_EXIT), \\\"needs 2 days of crown\\\");\\n\\n    // $CROWN time-based rewards\\n    if (totalCrownEarned < MAXIMUM_GLOBAL_CROWN) {\\n      reward = (time - stakeStart) * RABBIT_EARNING_RATE;\\n    } else if (stakeStart <= lastCrownClaimTimestamp) {\\n      // stop earning additional $CROWN if it's all been earned\\n      reward = (lastCrownClaimTimestamp - stakeStart) * RABBIT_EARNING_RATE;\\n    }\\n\\n    // Update reward based on game rules\\n    uint128 tax;\\n    if (unstake) {\\n      // Chance of all $CROWN stolen (normal=50% vs corrupted=75%)\\n      if (((seed >> 245) % 100) < (elevatedRisk ? 75 : 50)) {\\n        _payTaxToPredators(reward, true);\\n        tax = reward;\\n        reward = 0;\\n      }\\n      delete rabbitStakeByToken[tokenId];\\n      totalRabbitsStaked -= 1;\\n      // send back Rabbit\\n      nftContract.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } else {\\n      // Pay foxes their tax\\n      tax = reward * RABBIT_CLAIM_TAX_PERCENTAGE / 100;\\n      _payTaxToPredators(tax, false);\\n      reward = reward * (100 - RABBIT_CLAIM_TAX_PERCENTAGE) / 100;\\n      // Update last earned time\\n      rabbitStakeByToken[tokenId] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n\\n    emit CrownClaimed(\\\"RABBIT\\\", tokenId, stake.owner, unstake, reward, tax, elevatedRisk);\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Fox and optionally unstake it\\n   * foxes earn $CARROT proportional to their Alpha rank\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param unstake whether or not to unstake the Fox\\n   * @param seed account seed\\n   * @param elevatedRisk true if the user is facing higher risk of losing their token\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimFoxFromDen(IFoxGameNFT nftContract, uint16 tokenId, bool unstake, uint256 seed, bool elevatedRisk) internal returns (uint128 reward) {\\n    require(nftContract.ownerOf(tokenId) == address(this), \\\"not staked\\\");\\n    uint8 cunningIndex = _getAdvantagePoints(nftContract, tokenId);\\n    EarningStake storage stake = foxStakeByCunning[cunningIndex][foxHierarchy[tokenId]];\\n    require(stake.owner == msg.sender, \\\"not owner\\\");\\n\\n    // Calculate advantage-based rewards\\n    uint128 migratedEarningPoint = hasRecentEarningPoint[tokenId] ? stake.earningRate : 0; // phase 2 reset\\n    if (crownPerCunningPoint > migratedEarningPoint) {\\n      reward = (MAX_ADVANTAGE - cunningIndex + MIN_ADVANTAGE) * (crownPerCunningPoint - migratedEarningPoint);\\n    }\\n    if (unstake) {\\n      totalCunningPointsStaked -= cunningIndex; // Remove Alpha from total staked\\n      EarningStake storage lastStake = foxStakeByCunning[cunningIndex][foxStakeByCunning[cunningIndex].length - 1];\\n      foxStakeByCunning[cunningIndex][foxHierarchy[tokenId]] = lastStake; // Shuffle last Fox to current position\\n      foxHierarchy[lastStake.tokenId] = foxHierarchy[tokenId];\\n      foxStakeByCunning[cunningIndex].pop(); // Remove duplicate\\n      delete foxHierarchy[tokenId]; // Delete old mapping\\n      totalFoxesStaked -= 1;\\n\\n      // Determine if Fox should be stolen by hunter (normal=5% vs corrupted=20%)\\n      address recipient = msg.sender;\\n      if (((seed >> 245) % (elevatedRisk ? 5 : hunterStealFoxProbabilityMod)) == 0) {\\n        recipient = _randomHunterOwner(seed);\\n        if (recipient == address(0x0)) {\\n          recipient = msg.sender;\\n        } else if (recipient != msg.sender) {\\n          emit FoxStolen(tokenId, recipient, msg.sender);\\n        }\\n      }\\n      nftContract.safeTransferFrom(address(this), recipient, tokenId, \\\"\\\");\\n    } else {\\n      // Update earning point\\n      foxStakeByCunning[cunningIndex][foxHierarchy[tokenId]] = EarningStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        earningRate: crownPerCunningPoint\\n      });\\n      hasRecentEarningPoint[tokenId] = true;\\n    }\\n\\n    emit CrownClaimed(\\\"FOX\\\", tokenId, stake.owner, unstake, reward, 0, elevatedRisk);\\n  }\\n\\n  /**\\n   * realize $CARROT earnings for a single Fox and optionally unstake it\\n   * foxes earn $CARROT proportional to their Alpha rank\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param unstake whether or not to unstake the Fox\\n   * @return reward - the amount of $CARROT earned\\n   */\\n  function _claimHunterFromCabin(IFoxGameNFT nftContract, uint16 tokenId, bool unstake) internal returns (uint128 reward) {\\n    require(foxNFTGen1.ownerOf(tokenId) == address(this), \\\"not staked\\\");\\n    uint8 marksmanIndex = _getAdvantagePoints(nftContract, tokenId);\\n    EarningStake storage earningStake = hunterStakeByMarksman[marksmanIndex][hunterHierarchy[tokenId]];\\n    require(earningStake.owner == msg.sender, \\\"not owner\\\");\\n    uint48 time = uint48(block.timestamp);\\n\\n    // Calculate advantage-based rewards\\n    uint128 migratedEarningPoint = hasRecentEarningPoint[tokenId] ? earningStake.earningRate : 0; // phase 2 reset\\n    if (crownPerMarksmanPoint > migratedEarningPoint) {\\n      reward = (MAX_ADVANTAGE - marksmanIndex + MIN_ADVANTAGE) * (crownPerMarksmanPoint - migratedEarningPoint);\\n    }\\n    if (unstake) {\\n      totalMarksmanPointsStaked -= marksmanIndex; // Remove Alpha from total staked\\n      EarningStake storage lastStake = hunterStakeByMarksman[marksmanIndex][hunterStakeByMarksman[marksmanIndex].length - 1];\\n      hunterStakeByMarksman[marksmanIndex][hunterHierarchy[tokenId]] = lastStake; // Shuffle last Fox to current position\\n      hunterHierarchy[lastStake.tokenId] = hunterHierarchy[tokenId];\\n      hunterStakeByMarksman[marksmanIndex].pop(); // Remove duplicate\\n      delete hunterHierarchy[tokenId]; // Delete old mapping\\n    } else {\\n      // Update earning point\\n      hunterStakeByMarksman[marksmanIndex][hunterHierarchy[tokenId]] = EarningStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        earningRate: crownPerMarksmanPoint\\n      });\\n      hasRecentEarningPoint[tokenId] = true;\\n    }\\n\\n    // Calcuate time-based rewards\\n    TimeStake storage timeStake = hunterStakeByToken[tokenId];\\n    require(timeStake.owner == msg.sender, \\\"not owner\\\");\\n    uint48 stakeStart = timeStake.time < divergenceTime ? divergenceTime : timeStake.time; // phase 2 reset\\n    if (totalCrownEarned < MAXIMUM_GLOBAL_CROWN) {\\n      reward += (time - stakeStart) * HUNTER_EARNING_RATE;\\n    } else if (stakeStart <= lastCrownClaimTimestamp) {\\n      // stop earning additional $CARROT if it's all been earned\\n      reward += (lastCrownClaimTimestamp - stakeStart) * HUNTER_EARNING_RATE;\\n    }\\n    if (unstake) {\\n      delete hunterStakeByToken[tokenId];\\n      totalHuntersStaked -= 1;\\n      // Unstake to owner\\n      foxNFTGen1.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } else {\\n      // Update last earned time\\n      hunterStakeByToken[tokenId] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n\\n    emit CrownClaimed(\\\"HUNTER\\\", tokenId, earningStake.owner, unstake, reward, 0, false);\\n  }\\n\\n  // Struct to abstract away calculation of rewards from claiming rewards\\n  struct TokenReward {\\n    address owner;\\n    IFoxGameNFT.Kind kind;\\n    uint128 reward;\\n    uint128 corruptedCarrot;\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings. There's no risk nor tax involed other than corruption. \\n   * @param tokenId the token ID\\n   * @param time current time\\n   * @return claim reward information \\n   */\\n  function getCarrotReward(uint16 tokenId, uint48 time) private view returns (TokenReward memory claim) {\\n    IFoxGameNFT nftContract = getTokenContract(tokenId);\\n    claim.kind = _getKind(nftContract, tokenId);\\n    if (claim.kind == IFoxGameNFT.Kind.RABBIT) {\\n      claim = _getCarrotForRabbit(tokenId, time);\\n    } else if (claim.kind == IFoxGameNFT.Kind.FOX) {\\n      claim = _getCarrotForFox(nftContract, tokenId, time);\\n    } else { // HUNTER\\n      claim = _getCarrotForHunter(nftContract, tokenId, time);\\n    }\\n  }\\n\\n  /**\\n   * Calculate carrot rewards for the given tokens.\\n   * @param tokenIds list of tokens\\n   * @return claims list of reward objects\\n   */\\n  function getCarrotRewards(uint16[] calldata tokenIds) external view returns (TokenReward[] memory claims) {\\n    uint48 time = uint48(block.timestamp);\\n    claims = new TokenReward[](tokenIds.length);\\n    for (uint8 i; i < tokenIds.length; i++) {\\n      if (!tokenCarrotClaimed[tokenIds[i]]) {\\n        claims[i] = getCarrotReward(tokenIds[i], time);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings. There's no risk nor tax involed other than corruption. \\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n  function claimCarrotRewards(uint16[] calldata tokenIds) external  {\\n    require(tx.origin == msg.sender, \\\"eos\\\");\\n\\n    uint128 reward;\\n    TokenReward memory claim;\\n    uint48 time = uint48(block.timestamp);\\n    for (uint8 i; i < tokenIds.length; i++) {\\n      if (!tokenCarrotClaimed[tokenIds[i]]) {\\n        claim = getCarrotReward(tokenIds[i], time);\\n        require(claim.owner == msg.sender, \\\"not owner\\\");\\n        reward += claim.reward;\\n        emit ClaimCarrot(claim.kind, tokenIds[i], claim.owner, claim.reward, claim.corruptedCarrot);\\n        tokenCarrotClaimed[tokenIds[i]] = true;\\n      }\\n    }\\n\\n    // Disburse rewards\\n    if (reward != 0) {\\n      foxCarrot.mint(msg.sender, reward);\\n    }\\n  }\\n\\n  /**\\n   * Calculate the carrot accumulated per token.\\n   * @param time current time\\n   */\\n  function calculateCorruptedCarrot(address account, uint128 reward, uint48 time) private view returns (uint128 corruptedCarrot) {\\n    // If user has rewards and corruption has started\\n    if (reward > 0 && corruptionStartDate != 0 && time > corruptionStartDate) {\\n      // Calulate time that corruption was in effect\\n      uint48 barrelTime = barrelPurchaseDate[account];\\n      uint128 unsafeElapsed = (barrelTime == 0 ? time - corruptionStartDate     // never bought barrel\\n          : barrelTime > corruptionStartDate ? barrelTime - corruptionStartDate // bought after corruption\\n          : 0                                                                   // bought before corruption\\n      );\\n      // Subtract from reward\\n      if (unsafeElapsed > 0) {\\n        corruptedCarrot = uint128((reward * unsafeElapsed * uint256(CORRUPTION_BURN_PERCENT_RATE)) / 1000000000000000000 /* 1eth */);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings for a single Rabbit\\n   * @param tokenId the ID of the Rabbit to claim earnings from\\n   * @param time current time\\n   * @return claim carrot claim object\\n   */\\n  function _getCarrotForRabbit(uint16 tokenId, uint48 time) private view returns (TokenReward memory claim) {\\n    // Carrot time-based rewards\\n    uint128 reward;\\n    TimeStake storage stake = rabbitStakeByToken[tokenId];\\n    if (divergenceTime == 0 || time < divergenceTime) { // divergence has't yet started\\n      reward = (time - stake.time) * RABBIT_EARNING_RATE;\\n    } else if (stake.time < divergenceTime) { // last moment to accrue carrot\\n      reward = (divergenceTime - stake.time) * RABBIT_EARNING_RATE;\\n    }\\n\\n    claim.corruptedCarrot = calculateCorruptedCarrot(msg.sender, reward, time);\\n    claim.reward = reward - claim.corruptedCarrot;\\n    claim.owner = stake.owner;\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings for a single Fox\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param time current time\\n   * @return claim carrot claim object\\n   */\\n  function _getCarrotForFox(IFoxGameNFT nftContract, uint16 tokenId, uint48 time) private view returns (TokenReward memory claim) {\\n    uint8 cunningIndex = _getAdvantagePoints(nftContract, tokenId);\\n    EarningStake storage stake = foxStakeByCunning[cunningIndex][foxHierarchy[tokenId]];\\n\\n    // Calculate advantage-based rewards\\n    uint128 reward;\\n    if (!hasRecentEarningPoint[tokenId] && carrotPerCunningPoint > stake.earningRate) {\\n      reward = (MAX_ADVANTAGE - cunningIndex + MIN_ADVANTAGE) * (carrotPerCunningPoint - stake.earningRate);\\n    }\\n\\n    // Remove corrupted carrot\\n    claim.corruptedCarrot = calculateCorruptedCarrot(msg.sender, reward, time);\\n    claim.reward = reward - claim.corruptedCarrot;\\n    claim.owner = stake.owner;\\n  }\\n\\n  /**\\n   * Realize $CARROT earnings for a single hunter\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param time current time\\n   * @return claim carrot claim object\\n   */\\n  function _getCarrotForHunter(IFoxGameNFT nftContract, uint16 tokenId, uint48 time) private view returns (TokenReward memory claim) {\\n    require(foxNFTGen1.ownerOf(tokenId) == address(this), \\\"not staked\\\");\\n    uint8 marksman = _getAdvantagePoints(nftContract, tokenId);\\n    EarningStake storage earningStake = hunterStakeByMarksman[marksman][hunterHierarchy[tokenId]];\\n    require(earningStake.owner == msg.sender, \\\"not owner\\\");\\n \\n    // Calculate advantage-based rewards\\n    uint128 reward;\\n    if (!hasRecentEarningPoint[tokenId] && carrotPerMarksmanPoint > earningStake.earningRate) {\\n      reward = marksman * (carrotPerMarksmanPoint - earningStake.earningRate);\\n    }\\n\\n    // Carrot time-based rewards\\n    TimeStake storage timeStake = hunterStakeByToken[tokenId];\\n    if (divergenceTime == 0 || time < divergenceTime) {\\n      reward += (time - timeStake.time) * HUNTER_EARNING_RATE;\\n    } else if (timeStake.time < divergenceTime) {\\n      reward += (divergenceTime - timeStake.time) * HUNTER_EARNING_RATE;\\n    }\\n\\n    // Remove corrupted carrot\\n    claim.corruptedCarrot = calculateCorruptedCarrot(msg.sender, reward, time);\\n    claim.reward = reward - claim.corruptedCarrot;\\n    claim.owner = earningStake.owner;\\n  }\\n\\n  /** \\n   * Add $CARROT claimable pots for hunters and foxes\\n   * @param amount $CARROT to add to the pot\\n   * @param includeHunters true if hunters take a cut of the spoils\\n   */\\n  function _payTaxToPredators(uint128 amount, bool includeHunters) internal {\\n    uint128 amountDueFoxes = amount;\\n\\n    // Hunters take their cut first\\n    if (includeHunters) {\\n      uint128 amountDueHunters = amount * hunterTaxCutPercentage / 100;\\n      amountDueFoxes -= amountDueHunters;\\n\\n      // Update hunter pools\\n      if (totalMarksmanPointsStaked == 0) {\\n        unaccountedHunterRewards += amountDueHunters;\\n      } else {\\n        crownPerMarksmanPoint += (amountDueHunters + unaccountedHunterRewards) / totalMarksmanPointsStaked;\\n        unaccountedHunterRewards = 0;\\n      }\\n    }\\n\\n    // Update fox pools\\n    if (totalCunningPointsStaked == 0) {\\n      unaccountedFoxRewards += amountDueFoxes;\\n    } else {\\n      // makes sure to include any unaccounted $CARROT \\n      crownPerCunningPoint += (amountDueFoxes + unaccountedFoxRewards) / totalCunningPointsStaked;\\n      unaccountedFoxRewards = 0;\\n    }\\n  }\\n\\n  /**\\n   * Tracks $CARROT earnings to ensure it stops once 2.4 billion is eclipsed\\n   */\\n  modifier _updateEarnings() {\\n    uint48 time = uint48(block.timestamp);\\n    // CROWN - Capped by supply\\n    if (totalCrownEarned < MAXIMUM_GLOBAL_CROWN) {\\n      uint48 elapsed = time - lastCrownClaimTimestamp;\\n      totalCrownEarned +=\\n        (elapsed * totalRabbitsStaked * RABBIT_EARNING_RATE) +\\n        (elapsed * totalHuntersStaked * HUNTER_EARNING_RATE);\\n      lastCrownClaimTimestamp = time;\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * Get token kind (rabbit, fox, hunter)\\n   * @param tokenId the ID of the token to check\\n   * @return kind\\n   */\\n  function _getKind(IFoxGameNFT nftContract, uint16 tokenId) internal view returns (IFoxGameNFT.Kind) {\\n    return nftContract.getTraits(tokenId).kind;\\n  }\\n\\n  /**\\n   * gets the alpha score for a Fox\\n   * @param tokenId the ID of the Fox to get the alpha score for\\n   * @return the alpha score of the Fox (5-8)\\n   */\\n  function _getAdvantagePoints(IFoxGameNFT nftContract, uint16 tokenId) internal view returns (uint8) {\\n    return MAX_ADVANTAGE - nftContract.getTraits(tokenId).advantage; // alpha index is 0-3\\n  }\\n\\n  /**\\n   * chooses a random Fox thief when a newly minted token is stolen\\n   * @param seed a random value to choose a Fox from\\n   * @return the owner of the randomly selected Fox thief\\n   */\\n  function randomFoxOwner(uint256 seed) external view returns (address) {\\n    if (totalCunningPointsStaked == 0) {\\n      return address(0x0); // use 0x0 to return to msg.sender\\n    }\\n    // choose a value from 0 to total alpha staked\\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalCunningPointsStaked;\\n    uint256 cumulative;\\n    seed >>= 32;\\n    // loop through each cunning bucket of Foxes\\n    for (uint8 i = MAX_ADVANTAGE - 3; i <= MAX_ADVANTAGE; i++) {\\n      cumulative += foxStakeByCunning[i].length * i;\\n      // if the value is not inside of that bucket, keep going\\n      if (bucket >= cumulative) continue;\\n      // get the address of a random Fox with that alpha score\\n      return foxStakeByCunning[i][seed % foxStakeByCunning[i].length].owner;\\n    }\\n    return address(0x0);\\n  }\\n\\n  /**\\n   * Chooses a random Hunter to steal a fox.\\n   * @param seed a random value to choose a Hunter from\\n   * @return the owner of the randomly selected Hunter thief\\n   */\\n  function _randomHunterOwner(uint256 seed) internal view returns (address) {\\n    if (totalMarksmanPointsStaked == 0) {\\n      return address(0x0); // use 0x0 to return to msg.sender\\n    }\\n    // choose a value from 0 to total alpha staked\\n    uint256 bucket = (seed & 0xFFFFFFFF) % totalMarksmanPointsStaked;\\n    uint256 cumulative;\\n    seed >>= 32;\\n    // loop through each cunning bucket of Foxes\\n    for (uint8 i = MAX_ADVANTAGE - 3; i <= MAX_ADVANTAGE; i++) {\\n      cumulative += hunterStakeByMarksman[i].length * i;\\n      // if the value is not inside of that bucket, keep going\\n      if (bucket >= cumulative) continue;\\n      // get the address of a random Fox with that alpha score\\n      return hunterStakeByMarksman[i][seed % hunterStakeByMarksman[i].length].owner;\\n    }\\n    return address(0x0);\\n  }\\n\\n  /**\\n   * Realize $CROWN earnings\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n  function calculateRewards(uint16[] calldata tokenIds) external view returns (TokenReward[] memory tokenRewards) {\\n    require(tx.origin == msg.sender, \\\"eos only\\\");\\n\\n    IFoxGameNFT.Kind kind;\\n    IFoxGameNFT nftContract;\\n    tokenRewards = new TokenReward[](tokenIds.length);\\n    uint48 time = uint48(block.timestamp);\\n    for (uint8 i = 0; i < tokenIds.length; i++) {\\n      nftContract = getTokenContract(tokenIds[i]);\\n      kind = _getKind(nftContract, tokenIds[i]);\\n      if (kind == IFoxGameNFT.Kind.RABBIT) {\\n        tokenRewards[i] = _calculateRabbitReward(tokenIds[i], time);\\n      } else if (kind == IFoxGameNFT.Kind.FOX) {\\n        tokenRewards[i] = _calculateFoxReward(nftContract, tokenIds[i]);\\n      } else { // HUNTER\\n        tokenRewards[i] = _calculateHunterReward(nftContract, tokenIds[i], time);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate rabbit reward.\\n   * @param tokenId the ID of the Rabbit to claim earnings from\\n   * @param time currnet block time\\n   * @return tokenReward token reward response\\n   */\\n  function _calculateRabbitReward(uint16 tokenId, uint48 time) internal view returns (TokenReward memory tokenReward) {\\n    TimeStake storage stake = rabbitStakeByToken[tokenId];\\n    uint48 stakeStart = stake.time < divergenceTime ? divergenceTime : stake.time; // phase 2 reset\\n\\n    // Calcuate time-based rewards\\n    uint128 reward;\\n    if (totalCrownEarned < MAXIMUM_GLOBAL_CROWN) {\\n      reward = (time - stakeStart) * RABBIT_EARNING_RATE;\\n    } else if (stakeStart <= lastCrownClaimTimestamp) {\\n      // stop earning additional $CROWN if it's all been earned\\n      reward = (lastCrownClaimTimestamp - stakeStart) * RABBIT_EARNING_RATE;\\n    }\\n\\n    // Compose reward object\\n    tokenReward.owner = stake.owner;\\n    tokenReward.reward = reward * (100 - RABBIT_CLAIM_TAX_PERCENTAGE) / 100;\\n  }\\n\\n  /**\\n   * Calculate fox reward.\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @return tokenReward token reward response\\n   */\\n  function _calculateFoxReward(IFoxGameNFT nftContract, uint16 tokenId) internal view returns (TokenReward memory tokenReward) {\\n    uint8 cunningIndex = _getAdvantagePoints(nftContract, tokenId);\\n    EarningStake storage stake = foxStakeByCunning[cunningIndex][foxHierarchy[tokenId]];\\n\\n    // Calculate advantage-based rewards\\n    uint128 reward;\\n    uint128 migratedEarningPoint = hasRecentEarningPoint[tokenId] ? stake.earningRate : 0; // phase 2 reset\\n    if (crownPerCunningPoint > migratedEarningPoint) {\\n      reward = (MAX_ADVANTAGE - cunningIndex + MIN_ADVANTAGE) * (crownPerCunningPoint - migratedEarningPoint);\\n    }\\n\\n    // Compose reward object\\n    tokenReward.owner = stake.owner;\\n    tokenReward.reward = reward;\\n  }\\n\\n  /**\\n   * Calculate hunter reward.\\n   * @param nftContract Contract belonging to the token\\n   * @param tokenId the ID of the Fox to claim earnings from\\n   * @param time currnet block time\\n   * @return tokenReward token reward response\\n   */\\n  function _calculateHunterReward(IFoxGameNFT nftContract, uint16 tokenId, uint48 time) internal view returns (TokenReward memory tokenReward) {\\n    uint8 marksmanIndex = _getAdvantagePoints(nftContract, tokenId);\\n\\n    EarningStake storage earningStake = hunterStakeByMarksman[marksmanIndex][hunterHierarchy[tokenId]];\\n\\n    // Calculate advantage-based rewards\\n    uint128 reward;\\n    uint128 migratedEarningPoint = hasRecentEarningPoint[tokenId] ? earningStake.earningRate : 0; // phase 2 reset\\n    if (crownPerMarksmanPoint > migratedEarningPoint) {\\n      reward = (MAX_ADVANTAGE - marksmanIndex + MIN_ADVANTAGE) * (crownPerMarksmanPoint - migratedEarningPoint);\\n    }\\n\\n    // Calcuate time-based rewards\\n    TimeStake storage timeStake = hunterStakeByToken[tokenId];\\n    uint48 stakeStart = timeStake.time < divergenceTime ? divergenceTime : timeStake.time; // phase 2 reset\\n    require(timeStake.owner == msg.sender, \\\"not owner\\\");\\n    if (totalCrownEarned < MAXIMUM_GLOBAL_CROWN) {\\n      reward += (time - stakeStart) * HUNTER_EARNING_RATE;\\n    } else if (stakeStart <= lastCrownClaimTimestamp) {\\n      reward += (lastCrownClaimTimestamp - stakeStart) * HUNTER_EARNING_RATE;\\n    }\\n\\n    // Compose reward object\\n    tokenReward.owner = earningStake.owner;\\n    tokenReward.reward = reward;\\n  }\\n\\n  /**\\n   * Interface support to allow player staking.\\n   */\\n  function onERC721Received(address, address from, uint256, bytes calldata) external pure override returns (bytes4) {    \\n    require(from == address(0x0));\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGame.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGame {\\n  function stakeTokens(address, uint16[] calldata) external;\\n  function randomFoxOwner(uint256) external view returns (address);\\n  function isValidMintSignature(address, uint8, uint32, uint256, bytes memory) external view returns (bool);\\n  function ownsBarrel(address) external view returns (bool);\\n  function getCorruptionEnabled() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/IFoxGameCarrot.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameCarrot {\\n  function mint(address to, uint256 amount) external;\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameCrown.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameCrown {\\n  function mint(address to, uint256 amount) external;\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameNFT.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameNFT {\\n  enum Kind { RABBIT, FOX, HUNTER }\\n  enum Coin { CARROT, CROWN }\\n  struct Traits { Kind kind; uint8 advantage; uint8[7] traits; }\\n  function getMaxGEN0Players() external pure returns (uint16);\\n  function getTraits(uint16) external view returns (Traits memory);\\n  function ownerOf(uint256) external view returns (address owner);\\n  function transferFrom(address, address, uint256) external;\\n  function safeTransferFrom(address, address, uint256, bytes memory) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"}],\"name\":\"BarrelPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IFoxGameNFT.Kind\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"corruptedCarrot\",\"type\":\"uint128\"}],\"name\":\"ClaimCarrot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tax\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"elevatedRisk\",\"type\":\"bool\"}],\"name\":\"CrownClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"foxTokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"victim\",\"type\":\"address\"}],\"name\":\"FoxStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"memberCount\",\"type\":\"uint32\"}],\"name\":\"MemberJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"earnings\",\"type\":\"uint128\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORRUPTION_BURN_PERCENT_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNTER_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_CARROT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_CROWN\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADVANTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ADVANTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"barrelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IFoxGameNFT.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"corruptedCarrot\",\"type\":\"uint128\"}],\"internalType\":\"struct FoxGames_v3.TokenReward[]\",\"name\":\"tokenRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carrotPerCunningPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carrotPerMarksmanPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"claimCarrotRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[]\",\"name\":\"blocknums\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seeds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corruptionStartDate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crownPerCunningPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crownPerMarksmanPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divergenceTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"foxHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"foxStakeByCunning\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"earningRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"getCarrotRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IFoxGameNFT.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"corruptedCarrot\",\"type\":\"uint128\"}],\"internalType\":\"struct FoxGames_v3.TokenReward[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"blocknums\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seeds\",\"type\":\"uint256[]\"}],\"name\":\"getClaimSigningHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCorruptionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"getEntropies\",\"outputs\":[{\"internalType\":\"uint32[2][]\",\"name\":\"entropies\",\"type\":\"uint32[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blocknum\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getMintSigningHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"hunterHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hunterStakeByMarksman\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"earningRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"hunterStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"blocknums\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seeds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"isValidClaimSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blocknum\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"isValidMintSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCrownClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"membershipDate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownsBarrel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseBarrel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rabbitStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomFoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBarrelPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"}],\"name\":\"setCorruptionStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"}],\"name\":\"setDivergenceTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCarrotEarned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCrownEarned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCunningPointsStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFoxesStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHuntersStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarksmanPointsStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRabbitsStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedFoxRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedHunterRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FoxGames_v3","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}