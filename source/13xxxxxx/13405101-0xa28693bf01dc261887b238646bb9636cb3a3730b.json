{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/governance/GROVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IMintable {\\n    function mint(address _receiver, uint256 _amount) external;\\n}\\n\\ninterface IMigrator {\\n    function migrate(\\n        address account,\\n        uint256 total,\\n        uint256 startTime\\n    ) external;\\n}\\n\\ninterface IHodler {\\n    function add(uint256 amount) external;\\n}\\n\\ncontract GROVesting is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n\\n    uint256 internal constant ONE_YEAR_SECONDS = 31556952; // average year (including leap years) in seconds\\n    uint256 private constant DEFAULT_MAX_LOCK_PERIOD = ONE_YEAR_SECONDS * 1; // 1 years period\\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = 10000; // BP\\n    uint256 internal constant TWO_WEEKS = 604800; // two weeks in seconds\\n    uint256 private lockPeriodFactor = PERCENTAGE_DECIMAL_FACTOR;\\n\\n    IMintable public distributer;\\n    // percentage of tokens that are available immediatly when a vesting postiion is created\\n    uint256 public immutable initUnlockedPercent;\\n    // Active airdrops and liquidity pools\\n    mapping(address => bool) public vesters;\\n\\n    uint256 public totalLockedAmount;\\n    // vesting actions\\n    uint256 constant CREATE = 0;\\n    uint256 constant ADD = 1;\\n    uint256 constant EXIT = 2;\\n    uint256 constant EXTEND = 3;\\n\\n    address public hodlerClaims;\\n\\n    IMigrator public migrator;\\n\\n    struct AccountInfo {\\n        uint256 total;\\n        uint256 startTime;\\n    }\\n\\n    mapping(address => AccountInfo) public accountInfos;\\n    mapping(address => uint256) public withdrawals;\\n    // Start time for the global vesting curve\\n    uint256 public globalStartTime;\\n\\n    event LogVester(address vester, bool status);\\n    event LogMaxLockPeriod(uint256 newMaxPeriod);\\n    event LogNewMigrator(address newMigrator);\\n    event LogNewDistributer(address newDistributer);\\n    event LogNewBonusContract(address bonusContract);\\n\\n    event LogVest(address indexed user, uint256 totalLockedAmount, uint256 amount, AccountInfo vesting);\\n    event LogExit(address indexed user, uint256 totalLockedAmount, uint256 vesting, uint256 unlocked, uint256 penalty);\\n    event LogExtend(address indexed user, uint256 newPeriod, AccountInfo newVesting);\\n    event LogMigrate(address indexed user, AccountInfo vesting);\\n\\n    constructor(uint256 _initUnlockedPercent) {\\n        initUnlockedPercent = _initUnlockedPercent;\\n        globalStartTime = block.timestamp;\\n    }\\n\\n    function setDistributer(address _distributer) external onlyOwner {\\n        distributer = IMintable(_distributer);\\n        emit LogNewDistributer(_distributer);\\n    }\\n\\n    // @notice Estimation for how much groove is in the vesting contract\\n    // @dev Total groove is estimated by multiplying the total gro amount with the % amount has vested\\n    //  according to the global vesting curve. As time passes, there will be less global groove, as\\n    //  each individual users position will vest. The vesting can be estimated by continiously shifting,\\n    //  The global vesting curves start date (and end date by extension), which gets updated whenever user\\n    //  interacts with the vesting contract ( see updateGlobalTime )\\n    function totalGroove() external view returns (uint256) {\\n        uint256 _maxLock = maxLockPeriod();\\n        uint256 _globalEndTime = (globalStartTime + _maxLock);\\n        uint256 _now = block.timestamp;\\n        if (_now >= _globalEndTime) {\\n            return 0;\\n        }\\n\\n        uint256 total = totalLockedAmount;\\n\\n        return\\n            ((total * ((PERCENTAGE_DECIMAL_FACTOR - initUnlockedPercent) * (_globalEndTime - _now))) / _maxLock) /\\n                PERCENTAGE_DECIMAL_FACTOR;\\n    }\\n\\n    // @notice Calculate the start point of the global vesting curve\\n    // @param amount gro token amount\\n    // @param startTime users position startTime\\n    // @param newStartTime users new startime if applicable, 0 otherwise.\\n    // @param action user interaction with the vesting contract : 0) create/add position 1) exit position 2) extend position\\n    // @dev The global vesting curve is an estimation to the amount of groove in the contract. The curve dictates a linear decline\\n    //  of the amount of groove in the contract. As users interact with the contract the start date of the curve gets adjusted to\\n    //  capture changes in individual users vesting position at that specific point in time. depending on the type of interaction\\n    //  the user takes, the new curve will be defined as:\\n    //      Create position:\\n    //          g_st = g_st * (g_amt - u_amt) / (g_amt) + (u_st * u_amt) / (g_amt)\\n    //\\n    //      Add to position:\\n    //          (g_st * g_amt - u_old_st * u_tot + u_new_st * (u_tot + u_amt)) / (g_amt + u_amt)          \\n    //          \\n    //      Exit position:\\n    //          g_st = g_st + (g_st - u_st) * u_amt / (g_amt)\\n    //\\n    //      Extend position:\\n    //          g_st = g_st + (u_tot * u_st) / (g_amt)\\n    //\\n    //      Where:\\n    //          g_st : global vesting curve start time\\n    //          u_st : user start time\\n    //          g_amt : global gro amount\\n    //          u_amt : user gro amount added\\n    //          u_tot : user current gro amount\\n    //\\n    //  Special care needs to be taken as positions that dont exit will cause this to drift, when a user with an position that\\n    //  has 'overvested' takes an action, this needs to be accounted for. Unaccounted for drift (users that dont interact with the contract\\n    //  after their vesting period has expired) will have to be dealt with offchain.\\n    function updateGlobalTime(\\n        uint256 amount,\\n        uint256 startTime,\\n        uint256 userTotal,\\n        uint256 newStartTime,\\n        uint256 action\\n    ) internal {\\n        uint256 _totalLockedAmount = totalLockedAmount;\\n        if (action == CREATE) {\\n            // When creating a position we need to add the new amount to the global total\\n            _totalLockedAmount = _totalLockedAmount + amount;\\n        } else if (action == EXIT) {\\n            // When exiting we remove from the global total\\n            _totalLockedAmount = _totalLockedAmount - amount;\\n        } else if (_totalLockedAmount == userTotal) {\\n            globalStartTime = startTime;\\n            return;\\n        }\\n        uint256 _globalStartTime = globalStartTime;\\n\\n        if (_totalLockedAmount == 0) {\\n            return;\\n        }\\n\\n        if (action == ADD) {\\n            // adding to an existing position\\n            // formula for calculating add to position, including dealing with any drift caused by over vesting:\\n            //      (g_st * g_amt - u_old_st * u_tot + u_new_st * (u_tot + u_amt)) / (g_amt + u_amt)\\n            // this removes the impact of the users old position, and adds in the\\n            //  new position (user old amount + user added amount) based on the new start date. \\nuint256 newWeightedTimeSum = (_globalStartTime * _totalLockedAmount + newStartTime * (userTotal + amount)) - startTime * userTotal;\\n            globalStartTime = newWeightedTimeSum / (_totalLockedAmount + amount);\\n\\n        } else if (action == EXIT) {\\n            // exiting an existing position\\n            // note that g_amt = prev_g_amt - u_amt\\n            // g_st = g_st + (g_st - u_st) * u_amt / (g_amt)\\n            globalStartTime = uint256(\\n                int256(_globalStartTime) +\\n                    ((int256(_globalStartTime) - int256(startTime)) * int256(amount)) /\\n                    int256(_totalLockedAmount)\\n            );\\n        } else if (action == EXTEND) {\\n            // extending an existing position\\n            // g_st = g_st + (u_tot * (u_new_st - u_st)) / (g_amt)\\n            globalStartTime = _globalStartTime +\\n                    (userTotal * (newStartTime - startTime)) /\\n                    _totalLockedAmount;\\n        } else {\\n            // Createing new vesting positions\\n            // note that g_amt = prev_g_amt + u_amt\\n            // g_st = g_st + (g_amt - u_amt) / (g_amt) + (u_st * u_amt) / (g_amt)\\n            globalStartTime =\\n                (_globalStartTime * (_totalLockedAmount - amount)) /\\n                _totalLockedAmount +\\n                (startTime * amount) /\\n                _totalLockedAmount;\\n        }\\n    }\\n\\n    /// @notice Set the vesting bonus contract\\n    /// @param _hodlerClaims Address of vesting bonus contract\\n    function setHodlerClaims(address _hodlerClaims) external onlyOwner {\\n        hodlerClaims = _hodlerClaims;\\n        emit LogNewBonusContract(_hodlerClaims);\\n    }\\n\\n    /// @notice Get the current max lock period - dictates the end date of users vests\\n    function maxLockPeriod() public view returns (uint256) {\\n        return (DEFAULT_MAX_LOCK_PERIOD * lockPeriodFactor) / PERCENTAGE_DECIMAL_FACTOR;\\n    }\\n\\n    // Adds a new contract that can create vesting positions\\n    function setVester(address vester, bool status) public onlyOwner {\\n        vesters[vester] = status;\\n        emit LogVester(vester, status);\\n    }\\n\\n    /// @notice Sets amount of time the vesting lasts\\n    /// @param maxPeriodFactor Factor to apply to the vesting period\\n    function setMaxLockPeriod(uint256 maxPeriodFactor) external onlyOwner {\\n        // cant extend the vesting period more than 200%\\n        require(maxPeriodFactor <= 20000, \\\"adjustLockPeriod: newFactor > 20000\\\");\\n        // max Lock period needs to be longer than a month\\n        require(maxPeriodFactor * DEFAULT_MAX_LOCK_PERIOD / PERCENTAGE_DECIMAL_FACTOR > TWO_WEEKS * 2, \\\"adjustLockPeriod: newFactor to small\\\");\\n        lockPeriodFactor = maxPeriodFactor;\\n        emit LogMaxLockPeriod(maxLockPeriod());\\n    }\\n\\n    /// @notice Set the new vesting contract that users can migrate to\\n    /// @param _migrator Address of new vesting contract\\n    function setMigrator(address _migrator) external onlyOwner {\\n        migrator = IMigrator(_migrator);\\n        emit LogNewMigrator(_migrator);\\n    }\\n\\n    /// @notice Create or modify a vesting position\\n    /// @param account Account which to add vesting position for\\n    /// @param amount Amount to add to vesting position\\n    function vest(address account, uint256 amount) external {\\n        require(vesters[msg.sender], \\\"vest: !vester\\\");\\n        require(account != address(0), \\\"vest: !account\\\");\\n        require(amount > 0, \\\"vest: !amount\\\");\\n\\n        AccountInfo memory ai = accountInfos[account];\\n        uint256 _maxLock = maxLockPeriod();\\n\\n        if (ai.startTime == 0) {\\n            // If no position exists, create a new one\\n            ai.startTime = block.timestamp;\\n            updateGlobalTime(amount, ai.startTime, 0, 0, CREATE);\\n        } else {\\n            // If a position exists, update user's startdate by weighting current time based on GRO being added\\n            uint256 newStartTime = (ai.startTime * ai.total + block.timestamp * amount) / (ai.total + amount);\\n            if (newStartTime + _maxLock <= block.timestamp) {\\n                newStartTime = block.timestamp - (_maxLock) + TWO_WEEKS;\\n            }\\n            updateGlobalTime(amount, ai.startTime, ai.total, newStartTime, ADD);\\n            ai.startTime = newStartTime;\\n        }\\n\\n        // update user position\\n        ai.total += amount;\\n        accountInfos[account] = ai;\\n        totalLockedAmount += amount;\\n\\n        emit LogVest(account, totalLockedAmount, amount, ai);\\n    }\\n\\n    /// @notice Extend vesting period\\n    /// @param extension extension to current vesting period\\n    function extend(uint256 extension) external {\\n        require(extension <= PERCENTAGE_DECIMAL_FACTOR, \\\"extend: extension > 100%\\\");\\n        AccountInfo storage ai = accountInfos[msg.sender];\\n\\n        // check if user has a position before extending\\n        uint256 total = ai.total;\\n        require(total > 0, \\\"extend: no vesting\\\");\\n\\n        uint256 _maxLock = maxLockPeriod();\\n        uint256 startTime = ai.startTime;\\n        uint256 newPeriod;\\n        uint256 newStartTime;\\n\\n        // if the position is over vested, set the extension by moving the start time back from the current\\n        //  block by (max lock time) - (desired extension).\\n        if (startTime + _maxLock < block.timestamp) {\\n            newPeriod = _maxLock - ((_maxLock * extension) / PERCENTAGE_DECIMAL_FACTOR);\\n            newStartTime = block.timestamp - newPeriod;\\n        } else {\\n            newPeriod = (_maxLock * extension) / PERCENTAGE_DECIMAL_FACTOR;\\n            // Cannot extend pass max lock period, just set startTime to current block\\n            if (startTime + newPeriod >= block.timestamp) {\\n                newStartTime = block.timestamp;\\n            } else {\\n                newStartTime = startTime + newPeriod;\\n            }\\n        }\\n\\n        ai.startTime = newStartTime;\\n        accountInfos[msg.sender] = ai;\\n        // Calculate the difference between the original start time and the new\\n        updateGlobalTime(0, startTime, total, newStartTime, EXTEND);\\n\\n        emit LogExtend(msg.sender, newStartTime, ai);\\n    }\\n\\n    /// @notice Claim all vested tokens, transfering any unclaimed to the hodler pool\\n    function exit() external {\\n        (uint256 total, uint256 unlocked, uint256 startTime, ) = unlockedBalance(msg.sender);\\n        require(total > 0, \\\"exit: no vesting\\\");\\n        uint256 penalty = total - unlocked;\\n\\n        delete accountInfos[msg.sender];\\n        // record account total withdrawal\\n        withdrawals[msg.sender] += unlocked;\\n\\n        updateGlobalTime(total, startTime, 0, 0, EXIT);\\n        totalLockedAmount -= total;\\n\\n        if (penalty > 0) {\\n            IHodler(hodlerClaims).add(penalty);\\n        }\\n        distributer.mint(msg.sender, unlocked);\\n\\n        emit LogExit(msg.sender, totalLockedAmount, total, unlocked, penalty);\\n    }\\n\\n    /// @notice Migrate sender's vesting data into a new contract\\n    function migrate() external {\\n        require(address(migrator) != address(0), \\\"migrate: !migrator\\\");\\n        AccountInfo memory ai = accountInfos[msg.sender];\\n        require(ai.total > 0, \\\"migrate: no vesting\\\");\\n        migrator.migrate(msg.sender, ai.total, ai.startTime);\\n        emit LogMigrate(msg.sender, ai);\\n    }\\n\\n    /// @notice See the amount of vested assets the account has accumulated\\n    /// @param account Account to get vested amount for\\n    function unlockedBalance(address account)\\n        private\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 unlocked,\\n            uint256 startTime,\\n            uint256 _endTime\\n        )\\n    {\\n        AccountInfo memory ai = accountInfos[account];\\n        startTime = ai.startTime;\\n        total = ai.total;\\n        if (startTime > 0) {\\n            _endTime = startTime + maxLockPeriod();\\n            if (_endTime > block.timestamp) {\\n                unlocked = (total * initUnlockedPercent) / PERCENTAGE_DECIMAL_FACTOR;\\n                unlocked = unlocked + ((total - unlocked) * \\n                                       (block.timestamp - startTime)) / (_endTime - startTime);\\n            } else {\\n                unlocked = ai.total;\\n            }\\n        }\\n    }\\n\\n    /// @notice Get total size of position, vested + vesting\\n    /// @param account Target account\\n    function totalBalance(address account) public view returns (uint256 unvested) {\\n        AccountInfo memory ai = accountInfos[account];\\n        unvested = ai.total;\\n    }\\n\\n    /// @notice Get current unlocked (vested) amount\\n    /// @param account Target account\\n    function vestedBalance(address account) external view returns (uint256 unvested) {\\n        ( , uint256 unlocked, , ) = unlockedBalance(account);\\n        return unlocked;\\n    }\\n\\n    /// @notice Get the current locked (vesting amount\\n    /// @param account Target account\\n    function vestingBalance(address account) external view returns (uint256) {\\n        (uint256 total, uint256 unlocked, , ) = unlockedBalance(account);\\n        return total - unlocked;\\n    }\\n\\n    /// @notice Get total amount of gro minted to user\\n    /// @param account Target account\\n    /// @dev As users can exit and create new vesting positions, this will\\n    ///     tell the user how much gro they've accrued over all.\\n    function totalWithdrawn(address account) external view returns (uint256) {\\n        return withdrawals[account];\\n    }\\n\\n    /// @notice Get the start and end date for a vesting position\\n    /// @param account Target account\\n    /// @dev userfull for showing the amount of time you've got left\\n    function getVestingDates(address account) external view returns (uint256, uint256) {\\n        AccountInfo storage ai = accountInfos[account];\\n        uint256 _startDate = ai.startTime;\\n        require(_startDate > 0, 'getVestingDates: No active position');\\n        uint256 _endDate = _startDate + maxLockPeriod();\\n\\n        return (_startDate, _endDate);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initUnlockedPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GROVesting.AccountInfo\",\"name\":\"newVesting\",\"type\":\"tuple\"}],\"name\":\"LogExtend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPeriod\",\"type\":\"uint256\"}],\"name\":\"LogMaxLockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GROVesting.AccountInfo\",\"name\":\"vesting\",\"type\":\"tuple\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonusContract\",\"type\":\"address\"}],\"name\":\"LogNewBonusContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributer\",\"type\":\"address\"}],\"name\":\"LogNewDistributer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMigrator\",\"type\":\"address\"}],\"name\":\"LogNewMigrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GROVesting.AccountInfo\",\"name\":\"vesting\",\"type\":\"tuple\"}],\"name\":\"LogVest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogVester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributer\",\"outputs\":[{\"internalType\":\"contract IMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVestingDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlerClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initUnlockedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributer\",\"type\":\"address\"}],\"name\":\"setDistributer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hodlerClaims\",\"type\":\"address\"}],\"name\":\"setHodlerClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPeriodFactor\",\"type\":\"uint256\"}],\"name\":\"setMaxLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setVester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGroove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GROVesting","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6959ccef81a4dd5c75fca0b0e07867a370f00ded4cc81b7a205ae3670b73489c"}]}