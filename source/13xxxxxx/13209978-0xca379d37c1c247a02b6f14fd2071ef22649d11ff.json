{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\nimport \\\"./Interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./Interfaces/IWETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Myobu Shrine Contract (V2)\\r\\n * @author Myobu Devs\\r\\n */\\r\\ncontract ShrineV2 {\\r\\n    /**\\r\\n     * @dev\\r\\n     * WETH: Wrapped ether contract\\r\\n     * PAIR: The Uniswap V2 Pair for Myobu - WETH\\r\\n     */\\r\\n    IWETH private constant WETH =\\r\\n        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    \\r\\n    IUniswapV2Pair private constant PAIR =\\r\\n        IUniswapV2Pair(0xF2FBafE0fB235F80b6551918f8dF505A5dBD4d5e);\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps all ETH in the contract to WETH and then sends it to the pair contract\\r\\n     * then calls sync() to the pair contract\\r\\n     */\\r\\n    function sendWETHToPair() external {\\r\\n        WETH.deposit{value: address(this).balance}();\\r\\n        WETH.transfer(address(PAIR), WETH.balanceOf(address(this)));\\r\\n        PAIR.sync();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function so that the contract can recieve Ether\\r\\n     */\\r\\n    // solhint-disable-next-line\\r\\n    receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"Interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function balanceOf(address addr) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"Interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"sendWETHToPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ShrineV2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}