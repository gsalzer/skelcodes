{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/legacy/v-mUSD.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IBoostedVaultWithLockup {\\n    /**\\n     * @dev Stakes a given amount of the StakingToken for the sender\\n     * @param _amount Units of StakingToken\\n     */\\n    function stake(uint256 _amount) external;\\n\\n    /**\\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\\n     * @param _beneficiary Staked tokens are credited to this address\\n     * @param _amount      Units of StakingToken\\n     */\\n    function stake(address _beneficiary, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function exit() external;\\n\\n    /**\\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function exit(uint256 _first, uint256 _last) external;\\n\\n    /**\\n     * @dev Withdraws given stake amount from the pool\\n     * @param _amount Units of the staked token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external;\\n\\n    /**\\n     * @dev Claims only the tokens that have been immediately unlocked, not including\\n     * those that are in the lockers.\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Claims all unlocked rewards for sender.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\\n     * rewards and also locked rewards past their time lock.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function claimRewards(uint256 _first, uint256 _last) external;\\n\\n    /**\\n     * @dev Pokes a given account to reset the boost\\n     */\\n    function pokeBoost(address _account) external;\\n\\n    /**\\n     * @dev Gets the RewardsToken\\n     */\\n    function getRewardToken() external view returns (IERC20);\\n\\n    /**\\n     * @dev Gets the last applicable timestamp for this reward period\\n     */\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\\n     * and sums with stored to give the new cumulative reward per token\\n     * @return 'Reward' per staked token\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\\n     * does NOT include the majority of rewards which will be locked up.\\n     * @param _account User address\\n     * @return Total reward amount earned\\n     */\\n    function earned(address _account) external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\\n     * and those that have passed their time lock.\\n     * @param _account User address\\n     * @return amount Total units of unclaimed rewards\\n     * @return first Index of the first userReward that has unlocked\\n     * @return last Index of the last userReward that has unlocked\\n     */\\n    function unclaimedRewards(address _account)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 first,\\n            uint256 last\\n        );\\n}\\n\\ncontract ModuleKeys {\\n    // Governance\\n    // ===========\\n    // keccak256(\\\"Governance\\\");\\n    bytes32 internal constant KEY_GOVERNANCE =\\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\\n    //keccak256(\\\"Staking\\\");\\n    bytes32 internal constant KEY_STAKING =\\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\\n    //keccak256(\\\"ProxyAdmin\\\");\\n    bytes32 internal constant KEY_PROXY_ADMIN =\\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\\n\\n    // mStable\\n    // =======\\n    // keccak256(\\\"OracleHub\\\");\\n    bytes32 internal constant KEY_ORACLE_HUB =\\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\\n    // keccak256(\\\"Manager\\\");\\n    bytes32 internal constant KEY_MANAGER =\\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\\n    //keccak256(\\\"Recollateraliser\\\");\\n    bytes32 internal constant KEY_RECOLLATERALISER =\\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\\n    //keccak256(\\\"MetaToken\\\");\\n    bytes32 internal constant KEY_META_TOKEN =\\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\\n    // keccak256(\\\"SavingsManager\\\");\\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\\n    // keccak256(\\\"Liquidator\\\");\\n    bytes32 internal constant KEY_LIQUIDATOR =\\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\\n}\\n\\ninterface INexus {\\n    function governor() external view returns (address);\\n\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n\\n    function cancelProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n\\n    function cancelLockModule(bytes32 _key) external;\\n\\n    function lockModule(bytes32 _key) external;\\n}\\n\\ncontract InitializableModule2 is ModuleKeys {\\n    INexus public constant nexus = INexus(0xAFcE80b19A8cE13DEc0739a1aaB7A028d6845Eb3);\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\\ninterface IRewardsDistributionRecipient {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n}\\n\\ncontract InitializableRewardsDistributionRecipient is\\n    IRewardsDistributionRecipient,\\n    InitializableModule2\\n{\\n    // @abstract\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n\\n    // This address has the ability to distribute the rewards\\n    address public rewardsDistributor;\\n\\n    /** @dev Recipient is a module, governed by mStable governance */\\n    function _initialize(address _rewardsDistributor) internal {\\n        rewardsDistributor = _rewardsDistributor;\\n    }\\n\\n    /**\\n     * @dev Only the rewards distributor can notify about rewards\\n     */\\n    modifier onlyRewardsDistributor() {\\n        require(msg.sender == rewardsDistributor, \\\"Caller is not reward distributor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Change the rewardsDistributor - only called by mStable governor\\n     * @param _rewardsDistributor   Address of the new distributor\\n     */\\n    function setRewardsDistribution(address _rewardsDistributor) external onlyGovernor {\\n        rewardsDistributor = _rewardsDistributor;\\n    }\\n}\\n\\ncontract IERC20WithCheckpointing {\\n    function balanceOf(address _owner) public view returns (uint256);\\n\\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256);\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256);\\n}\\n\\ncontract IIncentivisedVotingLockup is IERC20WithCheckpointing {\\n    function getLastUserPoint(address _addr)\\n        external\\n        view\\n        returns (\\n            int128 bias,\\n            int128 slope,\\n            uint256 ts\\n        );\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function withdraw() external;\\n\\n    function increaseLockAmount(uint256 _value) external;\\n\\n    function increaseLockLength(uint256 _unlockTime) external;\\n\\n    function eject(address _user) external;\\n\\n    function expireContract() external;\\n\\n    function claimReward() public;\\n\\n    function earned(address _account) public view returns (uint256);\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\ncontract InitializableReentrancyGuard {\\n    bool private _notEntered;\\n\\n    function _initialize() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /**\\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\\n     * @dev bAsset ratio unit for use in exact calculations,\\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\\n     */\\n    uint256 private constant RATIO_SCALE = 1e8;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Provides an interface to the ratio unit\\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\\n     */\\n    function getRatioScale() internal pure returns (uint256) {\\n        return RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\\n        return x.mul(FULL_SCALE);\\n    }\\n\\n    /***************************************\\n              PRECISE ARITHMETIC\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n\\n    /***************************************\\n                  RATIO FUNCS\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\\n     */\\n    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, rounding up the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              ratio scale, rounded up to the closest base unit.\\n     */\\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\\n        // e.g. How much mAsset should I burn for this bAsset (x)?\\n        // 1e18 * 1e8 = 1e26\\n        uint256 scaled = x.mul(ratio);\\n        // 1e26 + 9.99e7 = 100..00.999e8\\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\\n        // return 100..00.999e8 / 1e8 = 1e18\\n        return ceil.div(RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\\n     *      i.e. How much bAsset is this mAsset worth?\\n     * @param x     Left hand operand in division\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\\n        // e.g. 1e14 * 1e8 = 1e22\\n        uint256 y = x.mul(RATIO_SCALE);\\n        // return 1e22 / 1e12 = 1e10\\n        return y.div(ratio);\\n    }\\n\\n    /***************************************\\n                    HELPERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\\nlibrary Root {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Returns the square root of a given number\\n     * @param x Input\\n     * @return y Square root of Input\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) {\\n                xx >>= 128;\\n                r <<= 64;\\n            }\\n            if (xx >= 0x10000000000000000) {\\n                xx >>= 64;\\n                r <<= 32;\\n            }\\n            if (xx >= 0x100000000) {\\n                xx >>= 32;\\n                r <<= 16;\\n            }\\n            if (xx >= 0x10000) {\\n                xx >>= 16;\\n                r <<= 8;\\n            }\\n            if (xx >= 0x100) {\\n                xx >>= 8;\\n                r <<= 4;\\n            }\\n            if (xx >= 0x10) {\\n                xx >>= 4;\\n                r <<= 2;\\n            }\\n            if (xx >= 0x8) {\\n                r <<= 1;\\n            }\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1;\\n            r = (r.add(x.div(r))) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x.div(r);\\n\\n            return uint256(r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\\ninterface IBoostDirector {\\n    function getBalance(address _user) external returns (uint256);\\n\\n    function setDirection(\\n        address _old,\\n        address _new,\\n        bool _pokeNew\\n    ) external;\\n\\n    function whitelistVaults(address[] calldata _vaults) external;\\n}\\n\\ncontract BoostedTokenWrapper is InitializableReentrancyGuard {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public constant stakingToken = IERC20(0x30647a72Dc82d7Fbb1123EA74716aB8A317Eac19);\\n    // mStable MTA Staking contract via the BoostDirectorV2\\n    IBoostDirector public constant boostDirector =\\n        IBoostDirector(0xBa05FD2f20AE15B0D3f20DDc6870FeCa6ACd3592);\\n\\n    uint256 private _totalBoostedSupply;\\n    mapping(address => uint256) private _boostedBalances;\\n    mapping(address => uint256) private _rawBalances;\\n\\n    // Vars for use in the boost calculations\\n    uint256 private constant MIN_DEPOSIT = 1e18;\\n    uint256 private constant MAX_VMTA = 600000e18;\\n    uint256 private constant MAX_BOOST = 3e18;\\n    uint256 private constant MIN_BOOST = 1e18;\\n    uint256 private constant FLOOR = 98e16;\\n    uint256 public constant boostCoeff = 9;\\n    uint256 public constant priceCoeff = 1e17;\\n\\n    /**\\n     * @dev TokenWrapper constructor\\n     **/\\n    function _initialize() internal {\\n        InitializableReentrancyGuard._initialize();\\n    }\\n\\n    /**\\n     * @dev Get the total boosted amount\\n     * @return uint256 total supply\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalBoostedSupply;\\n    }\\n\\n    /**\\n     * @dev Get the boosted balance of a given account\\n     * @param _account User for which to retrieve balance\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        return _boostedBalances[_account];\\n    }\\n\\n    /**\\n     * @dev Get the RAW balance of a given account\\n     * @param _account User for which to retrieve balance\\n     */\\n    function rawBalanceOf(address _account) public view returns (uint256) {\\n        return _rawBalances[_account];\\n    }\\n\\n    /**\\n     * @dev Read the boost for the given address\\n     * @param _account User for which to return the boost\\n     * @return boost where 1x == 1e18\\n     */\\n    function getBoost(address _account) public view returns (uint256) {\\n        return balanceOf(_account).divPrecisely(rawBalanceOf(_account));\\n    }\\n\\n    /**\\n     * @dev Deposits a given amount of StakingToken from sender\\n     * @param _amount Units of StakingToken\\n     */\\n    function _stakeRaw(address _beneficiary, uint256 _amount) internal nonReentrant {\\n        _rawBalances[_beneficiary] = _rawBalances[_beneficiary].add(_amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws a given stake from sender\\n     * @param _amount Units of StakingToken\\n     */\\n    function _withdrawRaw(uint256 _amount) internal nonReentrant {\\n        _rawBalances[msg.sender] = _rawBalances[msg.sender].sub(_amount);\\n        stakingToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Updates the boost for the given address according to the formula\\n     * boost = min(0.5 + c * vMTA_balance / imUSD_locked^(7/8), 1.5)\\n     * If rawBalance <= MIN_DEPOSIT, boost is 0\\n     * @param _account User for which to update the boost\\n     */\\n    function _setBoost(address _account) internal {\\n        uint256 rawBalance = _rawBalances[_account];\\n        uint256 boostedBalance = _boostedBalances[_account];\\n        uint256 boost = MIN_BOOST;\\n\\n        // Check whether balance is sufficient\\n        // is_boosted is used to minimize gas usage\\n        uint256 scaledBalance = (rawBalance * priceCoeff) / 1e18;\\n        if (rawBalance >= MIN_DEPOSIT) {\\n            uint256 votingWeight = boostDirector.getBalance(_account);\\n            boost = _computeBoost(scaledBalance, votingWeight);\\n        }\\n\\n        uint256 newBoostedBalance = rawBalance.mulTruncate(boost);\\n\\n        if (newBoostedBalance != boostedBalance) {\\n            _totalBoostedSupply = _totalBoostedSupply.sub(boostedBalance).add(newBoostedBalance);\\n            _boostedBalances[_account] = newBoostedBalance;\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the boost for\\n     * boost = min(m, max(1, 0.95 + c * min(voting_weight, f) / deposit^(3/4)))\\n     * @param _scaledDeposit deposit amount in terms of USD\\n     */\\n    function _computeBoost(uint256 _scaledDeposit, uint256 _votingWeight)\\n        private\\n        view\\n        returns (uint256 boost)\\n    {\\n        if (_votingWeight == 0) return MIN_BOOST;\\n\\n        // Compute balance to the power 3/4\\n        uint256 sqrt1 = Root.sqrt(_scaledDeposit * 1e6);\\n        uint256 sqrt2 = Root.sqrt(sqrt1);\\n        uint256 denominator = sqrt1 * sqrt2;\\n        boost =\\n            (((StableMath.min(_votingWeight, MAX_VMTA) * boostCoeff) / 10) * 1e18) /\\n            denominator;\\n        boost = StableMath.min(MAX_BOOST, StableMath.max(MIN_BOOST, FLOOR + boost));\\n    }\\n}\\n\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n}\\n\\n// Internal\\n// Libs\\n/**\\n * @title  BoostedSavingsVault\\n * @author Stability Labs Pty. Ltd.\\n * @notice Accrues rewards second by second, based on a users boosted balance\\n * @dev    Forked from rewards/staking/StakingRewards.sol\\n *         Changes:\\n *          - Lockup implemented in `updateReward` hook (20% unlock immediately, 80% locked for 6 months)\\n *          - `updateBoost` hook called after every external action to reset a users boost\\n *          - Struct packing of common data\\n *          - Searching for and claiming of unlocked rewards\\n */\\ncontract BoostedSavingsVault is\\n    IBoostedVaultWithLockup,\\n    Initializable,\\n    InitializableRewardsDistributionRecipient,\\n    BoostedTokenWrapper\\n{\\n    using StableMath for uint256;\\n    using SafeCast for uint256;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount, address payer);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event Poked(address indexed user);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    IERC20 public constant rewardsToken = IERC20(0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2);\\n\\n    uint64 public constant DURATION = 7 days;\\n    // Length of token lockup, after rewards are earned\\n    uint256 public constant LOCKUP = 26 weeks;\\n    // Percentage of earned tokens unlocked immediately\\n    uint64 public constant UNLOCK = 2e17;\\n\\n    // Timestamp for current period finish\\n    uint256 public periodFinish;\\n    // RewardRate for the rest of the PERIOD\\n    uint256 public rewardRate;\\n    // Last time any user took action\\n    uint256 public lastUpdateTime;\\n    // Ever increasing rewardPerToken rate, based on % of total supply\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => UserData) public userData;\\n    // Locked reward tracking\\n    mapping(address => Reward[]) public userRewards;\\n    mapping(address => uint64) public userClaim;\\n\\n    struct UserData {\\n        uint128 rewardPerTokenPaid;\\n        uint128 rewards;\\n        uint64 lastAction;\\n        uint64 rewardCount;\\n    }\\n\\n    struct Reward {\\n        uint64 start;\\n        uint64 finish;\\n        uint128 rate;\\n    }\\n\\n    /**\\n     * @dev StakingRewards is a TokenWrapper and RewardRecipient\\n     * Constants added to bytecode at deployTime to reduce SLOAD cost\\n     */\\n    function initialize(address _rewardsDistributor) external initializer {\\n        InitializableRewardsDistributionRecipient._initialize(_rewardsDistributor);\\n        BoostedTokenWrapper._initialize();\\n    }\\n\\n    /**\\n     * @dev Updates the reward for a given address, before executing function.\\n     * Locks 80% of new rewards up for 6 months, vesting linearly from (time of last action + 6 months) to\\n     * (now + 6 months). This allows rewards to be distributed close to how they were accrued, as opposed\\n     * to locking up for a flat 6 months from the time of this fn call (allowing more passive accrual).\\n     */\\n    modifier updateReward(address _account) {\\n        _updateReward(_account);\\n        _;\\n    }\\n\\n    function _updateReward(address _account) internal {\\n        uint256 currentTime = block.timestamp;\\n        uint64 currentTime64 = SafeCast.toUint64(currentTime);\\n\\n        // Setting of global vars\\n        (uint256 newRewardPerToken, uint256 lastApplicableTime) = _rewardPerToken();\\n        // If statement protects against loss in initialisation case\\n        if (newRewardPerToken > 0) {\\n            rewardPerTokenStored = newRewardPerToken;\\n            lastUpdateTime = lastApplicableTime;\\n\\n            // Setting of personal vars based on new globals\\n            if (_account != address(0)) {\\n                UserData memory data = userData[_account];\\n                uint256 earned = _earned(_account, data.rewardPerTokenPaid, newRewardPerToken);\\n\\n                // If earned == 0, then it must either be the initial stake, or an action in the\\n                // same block, since new rewards unlock after each block.\\n                if (earned > 0) {\\n                    uint256 unlocked = earned.mulTruncate(UNLOCK);\\n                    uint256 locked = earned.sub(unlocked);\\n\\n                    userRewards[_account].push(\\n                        Reward({\\n                            start: SafeCast.toUint64(LOCKUP.add(data.lastAction)),\\n                            finish: SafeCast.toUint64(LOCKUP.add(currentTime)),\\n                            rate: SafeCast.toUint128(locked.div(currentTime.sub(data.lastAction)))\\n                        })\\n                    );\\n\\n                    userData[_account] = UserData({\\n                        rewardPerTokenPaid: SafeCast.toUint128(newRewardPerToken),\\n                        rewards: SafeCast.toUint128(unlocked.add(data.rewards)),\\n                        lastAction: currentTime64,\\n                        rewardCount: data.rewardCount + 1\\n                    });\\n                } else {\\n                    userData[_account] = UserData({\\n                        rewardPerTokenPaid: SafeCast.toUint128(newRewardPerToken),\\n                        rewards: data.rewards,\\n                        lastAction: currentTime64,\\n                        rewardCount: data.rewardCount\\n                    });\\n                }\\n            }\\n        } else if (_account != address(0)) {\\n            // This should only be hit once, for first staker in initialisation case\\n            userData[_account].lastAction = currentTime64;\\n        }\\n    }\\n\\n    /** @dev Updates the boost for a given address, after the rest of the function has executed */\\n    modifier updateBoost(address _account) {\\n        _;\\n        _setBoost(_account);\\n    }\\n\\n    /***************************************\\n                ACTIONS - EXTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @dev Stakes a given amount of the StakingToken for the sender\\n     * @param _amount Units of StakingToken\\n     */\\n    function stake(uint256 _amount) external updateReward(msg.sender) updateBoost(msg.sender) {\\n        _stake(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\\n     * @param _beneficiary Staked tokens are credited to this address\\n     * @param _amount      Units of StakingToken\\n     */\\n    function stake(address _beneficiary, uint256 _amount)\\n        external\\n        updateReward(_beneficiary)\\n        updateBoost(_beneficiary)\\n    {\\n        _stake(_beneficiary, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function exit() external updateReward(msg.sender) updateBoost(msg.sender) {\\n        _withdraw(rawBalanceOf(msg.sender));\\n        (uint256 first, uint256 last) = _unclaimedEpochs(msg.sender);\\n        _claimRewards(first, last);\\n    }\\n\\n    /**\\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function exit(uint256 _first, uint256 _last)\\n        external\\n        updateReward(msg.sender)\\n        updateBoost(msg.sender)\\n    {\\n        _withdraw(rawBalanceOf(msg.sender));\\n        _claimRewards(_first, _last);\\n    }\\n\\n    /**\\n     * @dev Withdraws given stake amount from the pool\\n     * @param _amount Units of the staked token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external updateReward(msg.sender) updateBoost(msg.sender) {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Claims only the tokens that have been immediately unlocked, not including\\n     * those that are in the lockers.\\n     */\\n    function claimReward() external updateReward(msg.sender) updateBoost(msg.sender) {\\n        uint256 unlocked = userData[msg.sender].rewards;\\n        userData[msg.sender].rewards = 0;\\n\\n        if (unlocked > 0) {\\n            rewardsToken.safeTransfer(msg.sender, unlocked);\\n            emit RewardPaid(msg.sender, unlocked);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claims all unlocked rewards for sender.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function claimRewards() external updateReward(msg.sender) updateBoost(msg.sender) {\\n        (uint256 first, uint256 last) = _unclaimedEpochs(msg.sender);\\n\\n        _claimRewards(first, last);\\n    }\\n\\n    /**\\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\\n     * rewards and also locked rewards past their time lock.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function claimRewards(uint256 _first, uint256 _last)\\n        external\\n        updateReward(msg.sender)\\n        updateBoost(msg.sender)\\n    {\\n        _claimRewards(_first, _last);\\n    }\\n\\n    /**\\n     * @dev Pokes a given account to reset the boost\\n     */\\n    function pokeBoost(address _account) external updateReward(_account) updateBoost(_account) {\\n        emit Poked(_account);\\n    }\\n\\n    /***************************************\\n                ACTIONS - INTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\\n     * rewards and also locked rewards past their time lock.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function _claimRewards(uint256 _first, uint256 _last) internal {\\n        (uint256 unclaimed, uint256 lastTimestamp) = _unclaimedRewards(msg.sender, _first, _last);\\n        userClaim[msg.sender] = uint64(lastTimestamp);\\n\\n        uint256 unlocked = userData[msg.sender].rewards;\\n        userData[msg.sender].rewards = 0;\\n\\n        uint256 total = unclaimed.add(unlocked);\\n\\n        if (total > 0) {\\n            rewardsToken.safeTransfer(msg.sender, total);\\n\\n            emit RewardPaid(msg.sender, total);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internally stakes an amount by depositing from sender,\\n     * and crediting to the specified beneficiary\\n     * @param _beneficiary Staked tokens are credited to this address\\n     * @param _amount      Units of StakingToken\\n     */\\n    function _stake(address _beneficiary, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Cannot stake 0\\\");\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary address\\\");\\n\\n        _stakeRaw(_beneficiary, _amount);\\n        emit Staked(_beneficiary, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Withdraws raw units from the sender\\n     * @param _amount      Units of StakingToken\\n     */\\n    function _withdraw(uint256 _amount) internal {\\n        require(_amount > 0, \\\"Cannot withdraw 0\\\");\\n        _withdrawRaw(_amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    /***************************************\\n                    GETTERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Gets the RewardsToken\\n     */\\n    function getRewardToken() external view returns (IERC20) {\\n        return rewardsToken;\\n    }\\n\\n    /**\\n     * @dev Gets the last applicable timestamp for this reward period\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return StableMath.min(block.timestamp, periodFinish);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\\n     * and sums with stored to give the new cumulative reward per token\\n     * @return 'Reward' per staked token\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        (uint256 rewardPerToken_, ) = _rewardPerToken();\\n        return rewardPerToken_;\\n    }\\n\\n    function _rewardPerToken()\\n        internal\\n        view\\n        returns (uint256 rewardPerToken_, uint256 lastTimeRewardApplicable_)\\n    {\\n        uint256 lastApplicableTime = lastTimeRewardApplicable(); // + 1 SLOAD\\n        uint256 timeDelta = lastApplicableTime.sub(lastUpdateTime); // + 1 SLOAD\\n        // If this has been called twice in the same block, shortcircuit to reduce gas\\n        if (timeDelta == 0) {\\n            return (rewardPerTokenStored, lastApplicableTime);\\n        }\\n        // new reward units to distribute = rewardRate * timeSinceLastUpdate\\n        uint256 rewardUnitsToDistribute = rewardRate.mul(timeDelta); // + 1 SLOAD\\n        uint256 supply = totalSupply(); // + 1 SLOAD\\n        // If there is no StakingToken liquidity, avoid div(0)\\n        // If there is nothing to distribute, short circuit\\n        if (supply == 0 || rewardUnitsToDistribute == 0) {\\n            return (rewardPerTokenStored, lastApplicableTime);\\n        }\\n        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\\n        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(supply);\\n        // return summed rate\\n        return (rewardPerTokenStored.add(unitsToDistributePerToken), lastApplicableTime); // + 1 SLOAD\\n    }\\n\\n    /**\\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\\n     * does NOT include the majority of rewards which will be locked up.\\n     * @param _account User address\\n     * @return Total reward amount earned\\n     */\\n    function earned(address _account) public view returns (uint256) {\\n        uint256 newEarned = _earned(\\n            _account,\\n            userData[_account].rewardPerTokenPaid,\\n            rewardPerToken()\\n        );\\n        uint256 immediatelyUnlocked = newEarned.mulTruncate(UNLOCK);\\n        return immediatelyUnlocked.add(userData[_account].rewards);\\n    }\\n\\n    /**\\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\\n     * and those that have passed their time lock.\\n     * @param _account User address\\n     * @return amount Total units of unclaimed rewards\\n     * @return first Index of the first userReward that has unlocked\\n     * @return last Index of the last userReward that has unlocked\\n     */\\n    function unclaimedRewards(address _account)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 first,\\n            uint256 last\\n        )\\n    {\\n        (first, last) = _unclaimedEpochs(_account);\\n        (uint256 unlocked, ) = _unclaimedRewards(_account, first, last);\\n        amount = unlocked.add(earned(_account));\\n    }\\n\\n    /** @dev Returns only the most recently earned rewards */\\n    function _earned(\\n        address _account,\\n        uint256 _userRewardPerTokenPaid,\\n        uint256 _currentRewardPerToken\\n    ) internal view returns (uint256) {\\n        // current rate per token - rate user previously received\\n        uint256 userRewardDelta = _currentRewardPerToken.sub(_userRewardPerTokenPaid); // + 1 SLOAD\\n        // Short circuit if there is nothing new to distribute\\n        if (userRewardDelta == 0) {\\n            return 0;\\n        }\\n        // new reward = staked tokens * difference in rate\\n        uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta); // + 1 SLOAD\\n        // add to previous rewards\\n        return userNewReward;\\n    }\\n\\n    /**\\n     * @dev Gets the first and last indexes of array elements containing unclaimed rewards\\n     */\\n    function _unclaimedEpochs(address _account)\\n        internal\\n        view\\n        returns (uint256 first, uint256 last)\\n    {\\n        uint64 lastClaim = userClaim[_account];\\n\\n        uint256 firstUnclaimed = _findFirstUnclaimed(lastClaim, _account);\\n        uint256 lastUnclaimed = _findLastUnclaimed(_account);\\n\\n        return (firstUnclaimed, lastUnclaimed);\\n    }\\n\\n    /**\\n     * @dev Sums the cumulative rewards from a valid range\\n     */\\n    function _unclaimedRewards(\\n        address _account,\\n        uint256 _first,\\n        uint256 _last\\n    ) internal view returns (uint256 amount, uint256 latestTimestamp) {\\n        uint256 currentTime = block.timestamp;\\n        uint64 lastClaim = userClaim[_account];\\n\\n        // Check for no rewards unlocked\\n        uint256 totalLen = userRewards[_account].length;\\n        if (_first == 0 && _last == 0) {\\n            if (totalLen == 0 || currentTime <= userRewards[_account][0].start) {\\n                return (0, currentTime);\\n            }\\n        }\\n        // If there are previous unlocks, check for claims that would leave them untouchable\\n        if (_first > 0) {\\n            require(\\n                lastClaim >= userRewards[_account][_first.sub(1)].finish,\\n                \\\"Invalid _first arg: Must claim earlier entries\\\"\\n            );\\n        }\\n\\n        uint256 count = _last.sub(_first).add(1);\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 id = _first.add(i);\\n            Reward memory rwd = userRewards[_account][id];\\n\\n            require(currentTime >= rwd.start && lastClaim <= rwd.finish, \\\"Invalid epoch\\\");\\n\\n            uint256 endTime = StableMath.min(rwd.finish, currentTime);\\n            uint256 startTime = StableMath.max(rwd.start, lastClaim);\\n            uint256 unclaimed = endTime.sub(startTime).mul(rwd.rate);\\n\\n            amount = amount.add(unclaimed);\\n        }\\n\\n        // Calculate last relevant timestamp here to allow users to avoid issue of OOG errors\\n        // by claiming rewards in batches.\\n        latestTimestamp = StableMath.min(currentTime, userRewards[_account][_last].finish);\\n    }\\n\\n    /**\\n     * @dev Uses binarysearch to find the unclaimed lockups for a given account\\n     */\\n    function _findFirstUnclaimed(uint64 _lastClaim, address _account)\\n        internal\\n        view\\n        returns (uint256 first)\\n    {\\n        uint256 len = userRewards[_account].length;\\n        if (len == 0) return 0;\\n        // Binary search\\n        uint256 min = 0;\\n        uint256 max = len - 1;\\n        // Will be always enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (min >= max) break;\\n            uint256 mid = (min.add(max).add(1)).div(2);\\n            if (_lastClaim > userRewards[_account][mid].start) {\\n                min = mid;\\n            } else {\\n                max = mid.sub(1);\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /**\\n     * @dev Uses binarysearch to find the unclaimed lockups for a given account\\n     */\\n    function _findLastUnclaimed(address _account) internal view returns (uint256 first) {\\n        uint256 len = userRewards[_account].length;\\n        if (len == 0) return 0;\\n        // Binary search\\n        uint256 min = 0;\\n        uint256 max = len - 1;\\n        // Will be always enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (min >= max) break;\\n            uint256 mid = (min.add(max).add(1)).div(2);\\n            if (now > userRewards[_account][mid].start) {\\n                min = mid;\\n            } else {\\n                max = mid.sub(1);\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @dev Notifies the contract that new rewards have been added.\\n     * Calculates an updated rewardRate based on the rewards in period.\\n     * @param _reward Units of RewardToken that have been added to the pool\\n     */\\n    function notifyRewardAmount(uint256 _reward)\\n        external\\n        onlyRewardsDistributor\\n        updateReward(address(0))\\n    {\\n        require(_reward < 1e24, \\\"Cannot notify with more than a million units\\\");\\n\\n        uint256 currentTime = block.timestamp;\\n        // If previous period over, reset rewardRate\\n        if (currentTime >= periodFinish) {\\n            rewardRate = _reward.div(DURATION);\\n        }\\n        // If additional reward to existing period, calc sum\\n        else {\\n            uint256 remaining = periodFinish.sub(currentTime);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = _reward.add(leftover).div(DURATION);\\n        }\\n\\n        lastUpdateTime = currentTime;\\n        periodFinish = currentTime.add(DURATION);\\n\\n        emit RewardAdded(_reward);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Poked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostCoeff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boostDirector\",\"outputs\":[{\"internalType\":\"contract IBoostDirector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pokeBoost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCoeff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"rawBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaim\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastAction\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rewardCount\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finish\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BoostedSavingsVault","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}