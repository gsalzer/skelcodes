{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title cToken Burner\r\n@notice redeem cToken and send underlyings to receiver\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface cERC20:\r\n    def redeem(redeemTokens: uint256) -> uint256: nonpayable\r\n    def underlying() -> address: view\r\n\r\ninterface Burner:\r\n    def burn(_coin:address) -> bool: nonpayable\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\nusdc_burner: public(address)\r\n\r\nUSDC: constant(address) = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n\r\n\r\n@external\r\ndef __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address, _usdc_burner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an `UnderlyingBurner` deployment.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    @param _usdc_burner usdc burner\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n    self.usdc_burner = _usdc_burner\r\n\r\n\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice convert _coin\r\n    @param _coin Address of the coin being unwrapped\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(_coin).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(_coin).balanceOf(self)\r\n\r\n    if amount != 0:\r\n        # unwrap cTokens for underlying asset\r\n        assert cERC20(_coin).redeem(amount) == 0\r\n        underlying: address = cERC20(_coin).underlying()\r\n        receiver: address = self.receiver\r\n\r\n        if underlying == USDC:\r\n            receiver = self.usdc_burner\r\n        amount = ERC20(underlying).balanceOf(self)\r\n\r\n        # transfer underlying to underlying burner\r\n        response: Bytes[32] = raw_call(\r\n            underlying,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(receiver, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"},{\"type\":\"address\",\"name\":\"_usdc_burner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":10487},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":7673},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36323},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37574},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36383},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36309},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36443},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36369},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1301},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"usdc_burner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000020d5d319c2964ecb52e1b006a4c059b7f6d6ad0a0000000000000000000000006d5a7597896a703fe8c85775b23395a48f9713050000000000000000000000006d5a7597896a703fe8c85775b23395a48f971305000000000000000000000000197939c1ca20c2b506d6811d8b6cdb33944710740000000000000000000000005dc3a30d8c5937f1529c3c93507c16d86a17072a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}