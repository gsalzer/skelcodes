{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/instadapp/resolvers/universe/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { DSMath } from \\\"../../../utils/dsmath.sol\\\";\\n\\nimport  \\\"./interface.sol\\\";\\n\\ncontract Helpers is DSMath {\\n\\n    address constant internal universeReslover = 0x7466420dC366DF67b55daeDf19f8d37a346Fa7C8;\\n\\n    function _depositAmount(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal view returns(uint256, uint256){\\n        return IVaultV3(universeVault).getShares(amount0, amount1);\\n    }\\n\\n    function _withdrawAmount(\\n        address universeVault,\\n        uint256 share0,\\n        uint256 share1\\n    ) internal view returns(uint256, uint256){\\n        return IVaultV3(universeVault).getBals(share0, share1);\\n    }\\n\\n    function _userShareAmount(\\n        address universeVault,\\n        address user\\n    ) internal view returns(uint256, uint256) {\\n        return IVaultV3(universeVault).getUserShares(user);\\n    }\\n\\n    struct VaultData {\\n        address token0;\\n        address token1;\\n        uint256 maxToken0Amt;\\n        uint256 maxToken1Amt;\\n        uint256 maxSingeDepositAmt0;\\n        uint256 maxSingeDepositAmt1;\\n        uint256 total0;\\n        uint256 total1;\\n        uint256 utilizationRate0;\\n        uint256 utilizationRate1;\\n    }\\n\\n    function _vaultDetail(address universeVault) internal view returns (VaultData memory vaultData) {\\n        IVaultV3 vault = IVaultV3(universeVault);\\n        vaultData.token0 = vault.token0();\\n        vaultData.token1 = vault.token1();\\n        IVaultV3.MaxShares memory maxShare = vault.maxShares();\\n        vaultData.maxToken0Amt = maxShare.maxToken0Amt;\\n        vaultData.maxToken1Amt = maxShare.maxToken1Amt;\\n        vaultData.maxSingeDepositAmt0 = maxShare.maxSingeDepositAmt0;\\n        vaultData.maxSingeDepositAmt1 = maxShare.maxSingeDepositAmt1;\\n        (uint256 total0, uint256 total1, , , uint256 utilizationRate0, uint256 utilizationRate1) = vault.getTotalAmounts();\\n        vaultData.total0 = total0;\\n        vaultData.total1 = total1;\\n        vaultData.utilizationRate0 = utilizationRate0;\\n        vaultData.utilizationRate1 = utilizationRate1;\\n    }\\n\\n    function _officialVaults() internal view returns(address[] memory vaults) {\\n        return IUniverseResolver(universeReslover).getAllVaultAddress();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/instadapp/resolvers/universe/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniverseAdapter {\\n\\n    function depositProxy(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external returns(uint256, uint256);\\n\\n}\\n\\ninterface IUniverseResolver {\\n\\n    function getAllVaultAddress() external view returns(address[] memory vaults);\\n\\n    function checkUniverseVault(address universeVault) external view returns(bool status);\\n\\n}\\n\\ninterface IVaultV3 {\\n\\n    function getShares(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired\\n    ) external view returns (uint256 share0, uint256 share1);\\n\\n    function getBals(\\n        uint256 share0,\\n        uint256 share1\\n    ) external view returns (uint256 amount0, uint256 amount1);\\n\\n    function getUserShares(address user) external view returns (uint256 share0, uint256 share1);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    struct MaxShares {\\n        uint256 maxToken0Amt;\\n        uint256 maxToken1Amt;\\n        uint256 maxSingeDepositAmt0;\\n        uint256 maxSingeDepositAmt1;\\n    }\\n\\n    function maxShares() external view returns (MaxShares memory);\\n\\n    function getTotalAmounts() external view returns (\\n        uint256 total0,\\n        uint256 total1,\\n        uint256 free0,\\n        uint256 free1,\\n        uint256 utilizationRate0,\\n        uint256 utilizationRate1\\n    );\\n\\n    function getPNL() external view returns (uint256 rate, uint256 param);\\n}\\n\"\r\n    },\r\n    \"/contracts/instadapp/resolvers/universe/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport {Helpers} from \\\"./helpers.sol\\\";\\n\\nabstract contract UniverseFinanceResolver is Helpers {\\n\\n    /**\\n     * @notice get all Universe Working Vaults\\n     * @return address list\\n     */\\n    function getAllVault() external view returns(address[] memory) {\\n        return _officialVaults();\\n    }\\n\\n    /**\\n     * @notice get universe vault detail info\\n     * @param universeVault the Universe Vault Address\\n     * @return [token0Address, token1Address, vaultMaxToken0Amount, vaultMaxToken1Amount, maxSingleDepositFofToken0,\\n     maxSingleDepositFofToken1, totalToken0Amount, totalTotal1Amount, utilizationOfToken0, utilizationOfToken1]\\n     */\\n    function getVaultDetail(address universeVault) external view returns(VaultData memory) {\\n        return _vaultDetail(universeVault);\\n    }\\n\\n    /**\\n     * @notice get user share info\\n     * @param universeVault the Universe Vault Address\\n     * @param user the user address\\n     * @return shareToken0Amount and shareToken1Amount\\n     */\\n    function getUserShareAmount(address universeVault, address user) external view returns(uint256, uint256) {\\n        return _userShareAmount(universeVault, user);\\n    }\\n\\n    /**\\n    * @notice get user share info list\\n    * @param universeVaults the Universe Vault Address arrays\\n    * @param user the user address\\n    */\\n    function getUserShareAmountList(address[] memory universeVaults, address user) external view returns(uint256[2][] memory data) {\\n        uint len = universeVaults.length;\\n        if(len > 0){\\n            data = new uint256[2][](len);\\n            for(uint i; i < len; i++){\\n                (uint256 share0, uint256 share1) = _userShareAmount(universeVaults[i], user);\\n                data[i] = [share0, share1];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get user can withdraw amount\\n     * @param universeVault the Universe Vault Address\\n     * @param user the user address\\n     * @return token0Amount  token1Amount\\n     */\\n    function getUserWithdrawAmount(address universeVault, address user) external view returns(uint256, uint256) {\\n        (uint256 share0, uint256 share1) = _userShareAmount(universeVault, user);\\n        return _withdrawAmount(universeVault, share0, share1);\\n    }\\n\\n    /**\\n     * @notice get user can get share when deposit amount0 and amount1\\n     * @param universeVault the Universe Vault Address\\n     * @param amount0 the token0 amount\\n     * @param amount1 the token1 amount\\n     * @return shareToken0Amount and shareToken1Amount\\n     */\\n    function getUserDepositAmount(\\n        address universeVault,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns(uint256, uint256) {\\n        return _depositAmount(universeVault, amount0, amount1);\\n    }\\n\\n}\\n\\ncontract ResolverV2UniverseFinance is UniverseFinanceResolver {\\n    string public constant name = \\\"UniverseFinance-v1\\\";\\n}\"\r\n    },\r\n    \"/contracts/utils/dsmath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x - y <= x ? x - y : 0;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"getAllVault\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"universeVaults\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareAmountList\",\"outputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"data\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"universeVault\",\"type\":\"address\"}],\"name\":\"getVaultDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxToken0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToken1Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSingeDepositAmt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate1\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.VaultData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ResolverV2UniverseFinance","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}