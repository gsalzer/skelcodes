{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @title CrowdfundWithPodiumEditionsStorage\r\n * @author MirrorXYZ\r\n */\r\ncontract CrowdfundWithPodiumEditionsStorage {\r\n    // The two states that this contract can exist in. \"FUNDING\" allows\r\n    // contributors to add funds.\r\n    enum Status {\r\n        FUNDING,\r\n        TRADING\r\n    }\r\n\r\n    // ============ Constants ============\r\n\r\n    // The factor by which ETH contributions will multiply into crowdfund tokens.\r\n    uint16 internal constant TOKEN_SCALE = 1000;\r\n    uint256 internal constant REENTRANCY_NOT_ENTERED = 1;\r\n    uint256 internal constant REENTRANCY_ENTERED = 2;\r\n    uint16 public constant PODIUM_TIME_BUFFER = 900;\r\n    uint8 public constant decimals = 18;\r\n\r\n    // ============ Immutable Storage ============\r\n\r\n    // The operator has a special role to change contract status.\r\n    address payable public operator;\r\n    address payable public fundingRecipient;\r\n    address public treasuryConfig;\r\n    // We add a hard cap to prevent raising more funds than deemed reasonable.\r\n    uint256 public fundingCap;\r\n    uint256 public feePercentage;\r\n    // The operator takes some equity in the tokens, represented by this percent.\r\n    uint256 public operatorPercent;\r\n    string public symbol;\r\n    string public name;\r\n\r\n    // ============ Mutable Storage ============\r\n\r\n    // Represents the current state of the campaign.\r\n    Status public status;\r\n    uint256 internal reentrancy_status;\r\n\r\n\r\n    // Podium storage\r\n    uint256 public podiumStartTime;\r\n    uint256 public podiumDuration;\r\n\r\n    // ============ Mutable ERC20 Attributes ============\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    // ============ Delegation logic ============\r\n    address public logic;\r\n\r\n    // ============ Tiered Campaigns ============\r\n    // Address of the editions contract to purchase from.\r\n    address public editions;\r\n}\r\n\r\n\r\n// File contracts/producers/crowdfunds/crowdfund-with-podium-editions/interface/ICrowdfundWithPodiumEditions.sol\r\n\r\n\r\ninterface ICrowdfundWithPodiumEditions {\r\n    struct Edition {\r\n        // The maximum number of tokens that can be sold.\r\n        uint256 quantity;\r\n        // The price at which each token will be sold, in ETH.\r\n        uint256 price;\r\n        // The account that will receive sales revenue.\r\n        address payable fundingRecipient;\r\n        // The number of tokens sold so far.\r\n        uint256 numSold;\r\n        bytes32 contentHash;\r\n    }\r\n\r\n    struct EditionTier {\r\n        // The maximum number of tokens that can be sold.\r\n        uint256 quantity;\r\n        // The price at which each token will be sold, in ETH.\r\n        uint256 price;\r\n        bytes32 contentHash;\r\n    }\r\n\r\n    function buyEdition(uint256 editionId, address recipient)\r\n        external\r\n        payable\r\n        returns (uint256 tokenId);\r\n\r\n    function editionPrice(uint256 editionId) external view returns (uint256);\r\n\r\n    function createEditions(\r\n        EditionTier[] memory tier,\r\n        // The account that should receive the revenue.\r\n        address payable fundingRecipient,\r\n        address minter\r\n    ) external;\r\n\r\n    function contractURI() external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/interface/ITreasuryConfig.sol\r\n\r\n\r\ninterface ITreasuryConfig {\r\n    function treasury() external returns (address payable);\r\n\r\n    function distributionModel() external returns (address);\r\n}\r\n\r\n\r\n// File contracts/producers/crowdfunds/crowdfund-with-podium-editions/CrowdfundWithPodiumEditionsLogic.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CrowdfundWithPodiumEditionsLogic\r\n * @author MirrorXYZ\r\n *\r\n * Crowdfund the creation of NFTs by issuing ERC20 tokens that\r\n * can be redeemed for the underlying value of the NFT once sold.\r\n */\r\ncontract CrowdfundWithPodiumEditionsLogic is\r\n    CrowdfundWithPodiumEditionsStorage\r\n{\r\n    // ============ Events ============\r\n\r\n    event ReceivedERC721(uint256 tokenId, address sender);\r\n    event Contribution(address contributor, uint256 amount);\r\n    event ContributionForEdition(\r\n        address contributor,\r\n        uint256 amount,\r\n        uint256 editionId,\r\n        uint256 tokenId\r\n    );\r\n\r\n    event FundingClosed(uint256 amountRaised, uint256 creatorAllocation);\r\n    event BidAccepted(uint256 amount);\r\n    event Redeemed(address contributor, uint256 amount);\r\n    // ERC20 Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // Podium Events\r\n    event PodiumDurationExtended(uint256 editionId);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    /**\r\n     * @dev Modifier to check whether the `msg.sender` is the operator.\r\n     * If it is, it will run the function. Otherwise, it will revert.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator);\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(reentrancy_status != REENTRANCY_ENTERED, \"Reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        reentrancy_status = REENTRANCY_ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        reentrancy_status = REENTRANCY_NOT_ENTERED;\r\n    }\r\n\r\n    // ============ Crowdfunding Methods ============\r\n\r\n    function contributeForPodium(\r\n        address payable backer,\r\n        uint256 editionId,\r\n        uint256 amount\r\n    ) external payable nonReentrant {\r\n        _contribute(backer, editionId, amount, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints tokens for the sender propotional to the\r\n     *  amount of ETH sent in the transaction.\r\n     * @dev Emits the Contribution event.\r\n     */\r\n    function contribute(\r\n        address payable backer,\r\n        uint256 editionId,\r\n        uint256 amount\r\n    ) external payable nonReentrant {\r\n        _contribute(backer, editionId, amount, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the sender's tokens and redeems underlying ETH.\r\n     * @dev Emits the Redeemed event.\r\n     */\r\n    function redeem(uint256 tokenAmount) external nonReentrant {\r\n        // Prevent backers from accidently redeeming when balance is 0.\r\n        require(\r\n            address(this).balance > 0,\r\n            \"Crowdfund: No ETH available to redeem\"\r\n        );\r\n        // Check\r\n        require(\r\n            balanceOf[msg.sender] >= tokenAmount,\r\n            \"Crowdfund: Insufficient balance\"\r\n        );\r\n        require(status == Status.TRADING, \"Crowdfund: Funding must be trading\");\r\n        // Effect\r\n        uint256 redeemable = redeemableFromTokens(tokenAmount);\r\n        _burn(msg.sender, tokenAmount);\r\n        // Safe version of transfer.\r\n        sendValue(payable(msg.sender), redeemable);\r\n        emit Redeemed(msg.sender, redeemable);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the amount of ETH that is redeemable for tokenAmount.\r\n     */\r\n    function redeemableFromTokens(uint256 tokenAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (tokenAmount * address(this).balance) / totalSupply;\r\n    }\r\n\r\n    function valueToTokens(uint256 value) public pure returns (uint256 tokens) {\r\n        tokens = value * TOKEN_SCALE;\r\n    }\r\n\r\n    function tokensToValue(uint256 tokenAmount)\r\n        internal\r\n        pure\r\n        returns (uint256 value)\r\n    {\r\n        value = tokenAmount / TOKEN_SCALE;\r\n    }\r\n\r\n    // ============ Operator Methods ============\r\n\r\n    /**\r\n     * @notice Transfers all funds to operator, and mints tokens for the operator.\r\n     *  Updates status to TRADING.\r\n     * @dev Emits the FundingClosed event.\r\n     */\r\n    function closeFunding() external onlyOperator nonReentrant {\r\n        require(status == Status.FUNDING, \"Crowdfund: Funding must be open\");\r\n        // Close funding status, move to tradable.\r\n        status = Status.TRADING;\r\n        // Mint the operator a percent of the total supply.\r\n        uint256 operatorTokens = (operatorPercent * totalSupply) /\r\n            (100 - operatorPercent);\r\n        _mint(operator, operatorTokens);\r\n        // Announce that funding has been closed.\r\n        emit FundingClosed(address(this).balance, operatorTokens);\r\n        // Transfer the fee to the treasury.\r\n        sendValue(\r\n            ITreasuryConfig(treasuryConfig).treasury(),\r\n            computeFee(address(this).balance)\r\n        );\r\n        // Transfer available balance to the fundingRecipient.\r\n        sendValue(fundingRecipient, address(this).balance);\r\n    }\r\n\r\n    function computeFee(uint256 amount) public view returns (uint256 fee) {\r\n        fee = (feePercentage * amount) / (100 * 100);\r\n    }\r\n\r\n    // ============ Utility Methods ============\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    // ============ ERC20 Spec ============\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply + value;\r\n        balanceOf[to] = balanceOf[to] + value;\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from] - value;\r\n        totalSupply = totalSupply - value;\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from] - value;\r\n        balanceOf[to] = balanceOf[to] + value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        allowance[from][msg.sender] = allowance[from][msg.sender] - value;\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // ============ Tiered Campaigns ============\r\n\r\n    function buyEdition(\r\n        uint256 amount,\r\n        uint256 editionId,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        // Check that the sender is paying the correct amount.\r\n        require(\r\n            amount >=\r\n                ICrowdfundWithPodiumEditions(editions).editionPrice(editionId),\r\n            \"Unable purchase edition with available amount\"\r\n        );\r\n        // We don't need to transfer the value to the NFT contract here,\r\n        // since that contract trusts this one to check before minting.\r\n        // I.E. this contract has minting privileges.\r\n        return\r\n            ICrowdfundWithPodiumEditions(editions).buyEdition(\r\n                editionId,\r\n                recipient\r\n            );\r\n    }\r\n\r\n    function buyEditionForPodium(\r\n        uint256 amount,\r\n        uint256 editionId,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        // Check that the sender is paying the correct amount.\r\n        require(\r\n            amount >=\r\n                ICrowdfundWithPodiumEditions(editions).editionPrice(editionId),\r\n            \"Unable purchase edition with available amount\"\r\n        );\r\n\r\n        if (podiumStartTime == 0) {\r\n            podiumStartTime = block.timestamp;\r\n        }\r\n\r\n        uint256 podiumEnds = podiumStartTime + podiumDuration;\r\n\r\n        require(podiumEnds >= block.timestamp, \"podium closed\");\r\n\r\n        if (podiumEnds < block.timestamp + PODIUM_TIME_BUFFER) {\r\n            // Extend duration.\r\n            podiumDuration += block.timestamp + PODIUM_TIME_BUFFER - podiumEnds;\r\n            emit PodiumDurationExtended(editionId);\r\n        }\r\n\r\n        // We don't need to transfer the value to the NFT contract here,\r\n        // since that contract trusts this one to check before minting.\r\n        // I.E. this contract has minting privileges.\r\n        return\r\n            ICrowdfundWithPodiumEditions(editions).buyEdition(\r\n                editionId,\r\n                recipient\r\n            );\r\n    }\r\n\r\n    function _contribute(\r\n        address payable backer,\r\n        uint256 editionId,\r\n        uint256 amount,\r\n        bool forPodium\r\n    ) private {\r\n        require(status == Status.FUNDING, \"Crowdfund: Funding must be open\");\r\n        require(amount == msg.value, \"Crowdfund: Amount is not value sent\");\r\n        // This first case is the happy path, so we will keep it efficient.\r\n        // The balance, which includes the current contribution, is less than or equal to cap.\r\n        if (address(this).balance <= fundingCap) {\r\n            // Mint equity for the contributor.\r\n            _mint(backer, valueToTokens(amount));\r\n\r\n            // Editions start at 1, so a \"0\" edition means the user wants to contribute without\r\n            // purchasing a token.\r\n            if (editionId > 0) {\r\n                emit ContributionForEdition(\r\n                    backer,\r\n                    amount,\r\n                    editionId,\r\n                    forPodium\r\n                        ? buyEditionForPodium(amount, editionId, backer)\r\n                        : buyEdition(amount, editionId, backer)\r\n                );\r\n            } else {\r\n                emit Contribution(backer, amount);\r\n            }\r\n        } else {\r\n            // Compute the balance of the crowdfund before the contribution was made.\r\n            uint256 startAmount = address(this).balance - amount;\r\n            // If that amount was already greater than the funding cap, then we should revert immediately.\r\n            require(\r\n                startAmount < fundingCap,\r\n                \"Crowdfund: Funding cap already reached\"\r\n            );\r\n            // Otherwise, the contribution helped us reach the funding cap. We should\r\n            // take what we can until the funding cap is reached, and refund the rest.\r\n            uint256 eligibleAmount = fundingCap - startAmount;\r\n            // Otherwise, we process the contribution as if it were the minimal amount.\r\n            _mint(backer, valueToTokens(eligibleAmount));\r\n\r\n            if (editionId > 0) {\r\n                emit ContributionForEdition(\r\n                    backer,\r\n                    eligibleAmount,\r\n                    editionId,\r\n                    // Attempt to purchase edition with eligible amount.\r\n                    forPodium\r\n                        ? buyEditionForPodium(eligibleAmount, editionId, backer)\r\n                        : buyEdition(eligibleAmount, editionId, backer)\r\n                );\r\n            } else {\r\n                emit Contribution(backer, eligibleAmount);\r\n            }\r\n            // Refund the sender with their contribution (e.g. 2.5 minus the diff - e.g. 1.5 = 1 ETH)\r\n            sendValue(backer, amount - eligibleAmount);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ContributionForEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorAllocation\",\"type\":\"uint256\"}],\"name\":\"FundingClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"PodiumDurationExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ReceivedERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PODIUM_TIME_BUFFER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"computeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"backer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"backer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contributeForPodium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podiumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podiumStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"redeemableFromTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum CrowdfundWithPodiumEditionsStorage.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"valueToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"CrowdfundWithPodiumEditionsLogic","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5d9048012b7588097ea25e95c49c1842057509211fae605cb30b7e3548b1bfad"}]}