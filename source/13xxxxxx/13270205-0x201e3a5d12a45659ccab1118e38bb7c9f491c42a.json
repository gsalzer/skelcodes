{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./TokenFactory.sol\\\";\\n\\n/**\\n * FOR THE AUDITOR\\n * This contract was designed with the idea that it would be owned by\\n * another multi-party governance-like contract such as a multi-sig\\n * or a yet-to-be researched governance protocol to be placed on top of\\n */\\n\\n/**\\n * @title Manager contract for receiving proposals and creating tokens\\n * @dev For receiving token proposals and creating said tokens from such parameters.\\n * @dev State is separated onto Registry contract\\n * @dev To set up a working version of the entire platform, first create TokenFactory,\\n * Registry, then transfer ownership to the Manager contract. Ensure as well that TokenVesting is\\n * created for a valid TokenFactory. See the hardhat\\n * test, especially test/manager.js to understand how this would be done offline.\\n */\\ncontract Manager is Initializable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\n\\tRegistry public RegistryInstance;\\n\\tTokenFactory public TokenFactoryInstance;\\n\\n\\tevent LogTokenFactoryChanged(address oldTF, address newTF);\\n\\tevent LogRegistryChanged(address oldR, address newR);\\n\\tevent LogManagerMigrated(address indexed newManager);\\n\\n\\t/**\\n\\t * @dev Constructor on Manager\\n\\t * @param _registry address Address of Registry contract\\n\\t * @param _tokenFactory address Address of TokenFactory contract\\n\\t * @notice It is recommended that all the component contracts be launched before Manager\\n\\t */\\n\\tfunction initialize(address _registry, address _tokenFactory)\\n\\t\\tpublic\\n\\t\\tinitializer\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_registry != address(0) && _tokenFactory != address(0),\\n\\t\\t\\t\\\"Params can't be ZERO\\\"\\n\\t\\t);\\n\\t\\t__Ownable_init();\\n\\t\\tTokenFactoryInstance = TokenFactory(_tokenFactory);\\n\\t\\tRegistryInstance = Registry(_registry);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Submit Token Proposal\\n\\t * @param _name string Name parameter of Token\\n\\t * @param _symbol string Symbol parameter of Token\\n\\t * @param _decimals uint8 Decimals parameter of Token, restricted to < 18\\n\\t * @param _totalSupply uint256 Total Supply paramter of Token\\n\\t * @param _initialPercentage uint8 Initial percentage of total supply that the Vesting Beneficiary will receive from launch, restricted to < 100\\n\\t * @param _vestingPeriodInDays uint256 Number of days that the remaining of total supply will be linearly vested for, restricted to > 1\\n\\t * @param _vestingBeneficiary address Address of the Vesting Beneficiary\\n\\t * @param _initialPlatformPercentage Roll 1.5\\n\\t * @return hashIndex bytes32 Hash Index which is composed by the keccak256(name, symbol, msg.sender)\\n\\t */\\n\\n\\tfunction submitProposal(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _totalSupply,\\n\\t\\tuint8 _initialPercentage,\\n\\t\\tuint256 _vestingPeriodInDays,\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\tuint8 _initialPlatformPercentage\\n\\t)\\n\\t\\tpublic\\n\\t\\tvalidatePercentage(_initialPercentage)\\n\\t\\tvalidatePercentage(_initialPlatformPercentage)\\n\\t\\tvalidateDecimals(_decimals)\\n\\t\\tisInitialized()\\n\\t\\treturns (bytes32 hashIndex)\\n\\t{\\n\\t\\thashIndex = RegistryInstance.submitProposal(\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_decimals,\\n\\t\\t\\t_totalSupply,\\n\\t\\t\\t_initialPercentage,\\n\\t\\t\\t_vestingPeriodInDays,\\n\\t\\t\\t_vestingBeneficiary,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_initialPlatformPercentage\\n\\t\\t);\\n\\t}\\n\\n\\tfunction submitReferral(\\n\\t\\tbytes32 _hashIndex,\\n\\t\\taddress _referral,\\n\\t\\tuint8 _referralPercentage\\n\\t) public validatePercentage(_referralPercentage) isInitialized() {\\n\\t\\tRegistryInstance.submitProposalReferral(\\n\\t\\t\\t_hashIndex,\\n\\t\\t\\t_referral,\\n\\t\\t\\t_referralPercentage\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve Token Proposal\\n\\t * @param _hashIndex bytes32 Hash Index of Token Proposal, given by keccak256(name, symbol, msg.sender)\\n\\t */\\n\\tfunction approveProposal(bytes32 _hashIndex)\\n\\t\\texternal\\n\\t\\tisInitialized()\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tRegistry.Creator memory approvedProposal =\\n\\t\\t\\tRegistryInstance.getCreatorByIndex(_hashIndex);\\n\\n\\t\\tRegistry.CreatorReferral memory approvedProposalReferral =\\n\\t\\t\\tRegistryInstance.getCreatorReferralByIndex(_hashIndex);\\n\\n\\t\\tuint16 initialPercentage =\\n\\t\\t\\tuint16(approvedProposal.initialPercentage) +\\n\\t\\t\\t\\tuint16(approvedProposal.initialPlatformPercentage) +\\n\\t\\t\\t\\tuint16(approvedProposalReferral.referralPercentage);\\n\\t\\trequire(\\n\\t\\t\\tinitialPercentage <= uint16(type(uint8).max),\\n\\t\\t\\t\\\"Invalid uint8 value\\\"\\n\\t\\t);\\n\\t\\tvalidatePercentageFunc(uint8(initialPercentage));\\n\\n\\t\\taddress ac =\\n\\t\\t\\tTokenFactoryInstance.createToken(\\n\\t\\t\\t\\tapprovedProposal.name,\\n\\t\\t\\t\\tapprovedProposal.symbol,\\n\\t\\t\\t\\tapprovedProposal.decimals,\\n\\t\\t\\t\\tapprovedProposal.totalSupply,\\n\\t\\t\\t\\tapprovedProposal.initialPercentage,\\n\\t\\t\\t\\tapprovedProposal.vestingPeriodInDays,\\n\\t\\t\\t\\tapprovedProposal.vestingBeneficiary,\\n\\t\\t\\t\\tapprovedProposal.initialPlatformPercentage,\\n\\t\\t\\t\\tapprovedProposalReferral.referral,\\n\\t\\t\\t\\tapprovedProposalReferral.referralPercentage\\n\\t\\t\\t);\\n\\t\\tbool success = RegistryInstance.approveProposal(_hashIndex, ac);\\n\\t\\trequire(success, \\\"Registry approve proposal has to succeed\\\");\\n\\t}\\n\\n\\t/*\\n\\t * CHANGE PLATFORM VARIABLES AND INSTANCES\\n\\t */\\n\\n\\tfunction setPlatformWallet(address _newPlatformWallet)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\tisInitialized()\\n\\t{\\n\\t\\tTokenFactoryInstance.setPlatformWallet(_newPlatformWallet);\\n\\t}\\n\\n\\t/*\\n\\t * CHANGE VESING BENEFICIARY\\n\\t */\\n\\n\\tfunction setVestingAddress(address _token, address _vestingBeneficiary)\\n\\t\\tpublic\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_vestingBeneficiary != address(0),\\n\\t\\t\\t\\\"MANAGER: beneficiary can not be zero\\\"\\n\\t\\t);\\n\\t\\tTokenFactoryInstance.setVestingAddress(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_token,\\n\\t\\t\\t_vestingBeneficiary\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setVestingReferral(address _token, address _vestingReferral)\\n\\t\\tpublic\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_vestingReferral != address(0),\\n\\t\\t\\t\\\"MANAGER: beneficiary can not be zero\\\"\\n\\t\\t);\\n\\t\\tTokenFactoryInstance.setVestingReferral(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_token,\\n\\t\\t\\t_vestingReferral\\n\\t\\t);\\n\\t}\\n\\n\\t// --------------------------------------------\\n\\t// This are to keep compatibility with Owner version sol050\\n\\t// --------------------------------------------\\n\\tfunction parseAddr(bytes memory data) public pure returns (address parsed) {\\n\\t\\tassembly {\\n\\t\\t\\tparsed := mload(add(data, 32))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getTokenVestingStatic(address tokenFactoryContract)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (address)\\n\\t{\\n\\t\\tbytes memory callcodeTokenVesting =\\n\\t\\t\\tabi.encodeWithSignature(\\\"getTokenVesting()\\\");\\n\\t\\t(bool success, bytes memory returnData) =\\n\\t\\t\\taddress(tokenFactoryContract).staticcall(callcodeTokenVesting);\\n\\t\\trequire(\\n\\t\\t\\tsuccess,\\n\\t\\t\\t\\\"input address has to be a valid TokenFactory contract\\\"\\n\\t\\t);\\n\\t\\treturn parseAddr(returnData);\\n\\t}\\n\\n\\t// --------------------------------------------\\n\\t// --------------------------------------------\\n\\n\\tfunction setTokenFactory(address _newTokenFactory) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tOwnableUpgradeable(_newTokenFactory).owner() == address(this),\\n\\t\\t\\t\\\"new TokenFactory has to be owned by Manager\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tgetTokenVestingStatic(_newTokenFactory) ==\\n\\t\\t\\t\\taddress(TokenFactoryInstance.TokenVestingInstance()),\\n\\t\\t\\t\\\"TokenVesting has to be the same\\\"\\n\\t\\t);\\n\\t\\tTokenFactoryInstance.migrateTokenFactory(_newTokenFactory);\\n\\t\\trequire(\\n\\t\\t\\tOwnableUpgradeable(getTokenVestingStatic(_newTokenFactory))\\n\\t\\t\\t\\t.owner() == address(_newTokenFactory),\\n\\t\\t\\t\\\"TokenFactory does not own TokenVesting\\\"\\n\\t\\t);\\n\\t\\temit LogTokenFactoryChanged(\\n\\t\\t\\taddress(TokenFactoryInstance),\\n\\t\\t\\taddress(_newTokenFactory)\\n\\t\\t);\\n\\t\\tTokenFactoryInstance = TokenFactory(_newTokenFactory);\\n\\t}\\n\\n\\tfunction setRegistry(address _newRegistry) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tOwnableUpgradeable(_newRegistry).owner() == address(this),\\n\\t\\t\\t\\\"new Registry has to be owned by Manager\\\"\\n\\t\\t);\\n\\t\\temit LogRegistryChanged(address(RegistryInstance), _newRegistry);\\n\\t\\tRegistryInstance = Registry(_newRegistry);\\n\\t}\\n\\n\\tfunction setTokenVesting(address _newTokenVesting) external onlyOwner {\\n\\t\\tTokenFactoryInstance.setTokenVesting(_newTokenVesting);\\n\\t}\\n\\n\\tfunction migrateManager(address _newManager)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\tisInitialized()\\n\\t{\\n\\t\\tRegistryInstance.transferOwnership(_newManager);\\n\\t\\tTokenFactoryInstance.transferOwnership(_newManager);\\n\\t\\temit LogManagerMigrated(_newManager);\\n\\t}\\n\\n\\tfunction validatePercentageFunc(uint8 percentage) internal pure {\\n\\t\\trequire(\\n\\t\\t\\tpercentage >= 0 && percentage <= 100,\\n\\t\\t\\t\\\"has to be above 0 and below 100\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tmodifier validatePercentage(uint8 percentage) {\\n\\t\\trequire(\\n\\t\\t\\tpercentage >= 0 && percentage <= 100,\\n\\t\\t\\t\\\"has to be above 0 and below 100\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier validateDecimals(uint8 decimals) {\\n\\t\\trequire(\\n\\t\\t\\tdecimals >= 0 && decimals <= 18,\\n\\t\\t\\t\\\"has to be above or equal 0 and below 19\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isInitialized() {\\n\\t\\trequire(initialized(), \\\"manager not initialized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction initialized() public view returns (bool) {\\n\\t\\taddress tokenVestingInstance =\\n\\t\\t\\taddress(TokenFactoryInstance.TokenVestingInstance());\\n\\t\\treturn\\n\\t\\t\\t(RegistryInstance.owner() == address(this)) &&\\n\\t\\t\\t(TokenFactoryInstance.owner() == address(this));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tfunction __Ownable_init() internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained();\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained() internal initializer {\\n\\t\\taddress msgSender = _msgSender();\\n\\t\\t_owner = msgSender;\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tnewOwner != address(0),\\n\\t\\t\\t\\\"Ownable: new owner is the zero address\\\"\\n\\t\\t);\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private _initialized;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private _initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to protect an initializer function from being invoked twice.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\trequire(\\n\\t\\t\\t_initializing || !_initialized,\\n\\t\\t\\t\\\"Initializable: contract is already initialized\\\"\\n\\t\\t);\\n\\n\\t\\tbool isTopLevelCall = !_initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\t_initializing = true;\\n\\t\\t\\t_initialized = true;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\t_initializing = false;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../openzeppelin/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ILegacyRegistry.sol\\\";\\n\\n/**\\n * @title Registry contract for storing token proposals\\n * @dev For storing token proposals. This can be understood as a state contract with minimal CRUD logic.\\n */\\ncontract Registry is Initializable, OwnableUpgradeable {\\n\\tstruct Creator {\\n\\t\\taddress token;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\tuint256 totalSupply;\\n\\t\\tuint256 vestingPeriodInDays;\\n\\t\\taddress proposer;\\n\\t\\taddress vestingBeneficiary;\\n\\t\\tuint8 initialPlatformPercentage;\\n\\t\\tuint8 decimals;\\n\\t\\tuint8 initialPercentage;\\n\\t\\tbool approved;\\n\\t}\\n\\n\\tstruct CreatorReferral {\\n\\t\\taddress referral;\\n\\t\\tuint8 referralPercentage;\\n\\t}\\n\\n\\tmapping(bytes32 => Creator) public rolodex;\\n\\tmapping(bytes32 => CreatorReferral) public creatorReferral;\\n\\tmapping(string => bytes32) nameToIndex;\\n\\tmapping(string => bytes32) symbolToIndex;\\n\\n\\taddress legacyRegistry;\\n\\n\\tevent LogProposalSubmit(\\n\\t\\tstring name,\\n\\t\\tstring symbol,\\n\\t\\taddress proposer,\\n\\t\\tbytes32 indexed hashIndex\\n\\t);\\n\\n\\tevent LogProposalReferralSubmit(\\n\\t\\taddress referral,\\n\\t\\tuint8 referralPercentage,\\n\\t\\tbytes32 indexed hashIndex\\n\\t);\\n\\n\\tevent LogProposalImported(\\n\\t\\tstring name,\\n\\t\\tstring symbol,\\n\\t\\taddress proposer,\\n\\t\\tbytes32 indexed hashIndex\\n\\t);\\n\\tevent LogProposalApprove(string name, address indexed tokenAddress);\\n\\n\\tfunction initialize() public initializer {\\n\\t\\t__Ownable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Submit token proposal to be stored, only called by Owner, which is set to be the Manager contract\\n\\t * @param _name string Name of token\\n\\t * @param _symbol string Symbol of token\\n\\t * @param _decimals uint8 Decimals of token\\n\\t * @param _totalSupply uint256 Total Supply of token\\n\\t * @param _initialPercentage uint8 Initial Percentage of total supply to Vesting Beneficiary\\n\\t * @param _vestingPeriodInDays uint256 Number of days that the remaining of total supply will be linearly vested for\\n\\t * @param _vestingBeneficiary address Address of Vesting Beneficiary\\n\\t * @param _proposer address Address of Proposer of Token, also the msg.sender of function call in Manager contract\\n\\t * @param _initialPlatformPercentage Roll 1.5\\n\\t * @return hashIndex bytes32 It will return a hash index which is calculated as keccak256(_name, _symbol, _proposer)\\n\\t */\\n\\tfunction submitProposal(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _totalSupply,\\n\\t\\tuint8 _initialPercentage,\\n\\t\\tuint256 _vestingPeriodInDays,\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _proposer,\\n\\t\\tuint8 _initialPlatformPercentage\\n\\t) public onlyOwner returns (bytes32 hashIndex) {\\n\\t\\tnameDoesNotExist(_name);\\n\\t\\tsymbolDoesNotExist(_symbol);\\n\\t\\thashIndex = keccak256(abi.encodePacked(_name, _symbol, _proposer));\\n\\t\\trolodex[hashIndex] = Creator({\\n\\t\\t\\ttoken: address(0),\\n\\t\\t\\tname: _name,\\n\\t\\t\\tsymbol: _symbol,\\n\\t\\t\\tdecimals: _decimals,\\n\\t\\t\\ttotalSupply: _totalSupply,\\n\\t\\t\\tproposer: _proposer,\\n\\t\\t\\tvestingBeneficiary: _vestingBeneficiary,\\n\\t\\t\\tinitialPercentage: _initialPercentage,\\n\\t\\t\\tvestingPeriodInDays: _vestingPeriodInDays,\\n\\t\\t\\tapproved: false,\\n\\t\\t\\tinitialPlatformPercentage: _initialPlatformPercentage\\n\\t\\t});\\n\\n\\t\\temit LogProposalSubmit(_name, _symbol, msg.sender, hashIndex);\\n\\t}\\n\\n\\tfunction submitProposalReferral(\\n\\t\\tbytes32 _hashIndex,\\n\\t\\taddress _referral,\\n\\t\\tuint8 _referralPercentage\\n\\t) public onlyOwner {\\n\\t\\tcreatorReferral[_hashIndex] = CreatorReferral({\\n\\t\\t\\treferral: _referral,\\n\\t\\t\\treferralPercentage: _referralPercentage\\n\\t\\t});\\n\\t\\temit LogProposalReferralSubmit(\\n\\t\\t\\t_referral,\\n\\t\\t\\t_referralPercentage,\\n\\t\\t\\t_hashIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve token proposal, only called by Owner, which is set to be the Manager contract\\n\\t * @param _hashIndex bytes32 Hash Index of Token proposal\\n\\t * @param _token address Address of Token which has already been launched\\n\\t * @return bool Whether it has completed the function\\n\\t * @dev Notice that the only things that have changed from an approved proposal to one that is not\\n\\t * is simply the .token and .approved object variables.\\n\\t */\\n\\tfunction approveProposal(bytes32 _hashIndex, address _token)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tCreator memory c = rolodex[_hashIndex];\\n\\t\\tnameDoesNotExist(c.name);\\n\\t\\tsymbolDoesNotExist(c.symbol);\\n\\t\\trolodex[_hashIndex].token = _token;\\n\\t\\trolodex[_hashIndex].approved = true;\\n\\t\\tnameToIndex[c.name] = _hashIndex;\\n\\t\\tsymbolToIndex[c.symbol] = _hashIndex;\\n\\t\\temit LogProposalApprove(c.name, _token);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t//Getters\\n\\n\\tfunction getIndexByName(string memory _name) public view returns (bytes32) {\\n\\t\\treturn nameToIndex[_name];\\n\\t}\\n\\n\\tfunction getIndexBySymbol(string memory _symbol)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn symbolToIndex[_symbol];\\n\\t}\\n\\n\\tfunction getCreatorByIndex(bytes32 _hashIndex)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Creator memory)\\n\\t{\\n\\t\\treturn rolodex[_hashIndex];\\n\\t}\\n\\n\\tfunction getCreatorReferralByIndex(bytes32 _hashIndex)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (CreatorReferral memory)\\n\\t{\\n\\t\\treturn creatorReferral[_hashIndex];\\n\\t}\\n\\n\\tfunction getCreatorByName(string memory _name)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Creator memory)\\n\\t{\\n\\t\\tbytes32 _hashIndex = nameToIndex[_name];\\n\\t\\treturn rolodex[_hashIndex];\\n\\t}\\n\\n\\tfunction getCreatorBySymbol(string memory _symbol)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Creator memory)\\n\\t{\\n\\t\\tbytes32 _hashIndex = symbolToIndex[_symbol];\\n\\t\\treturn rolodex[_hashIndex];\\n\\t}\\n\\n\\t//Assertive functions\\n\\n\\tfunction nameDoesNotExist(string memory _name) internal view {\\n\\t\\trequire(nameToIndex[_name] == 0x0, \\\"Name already exists\\\");\\n\\t}\\n\\n\\tfunction symbolDoesNotExist(string memory _name) internal view {\\n\\t\\trequire(symbolToIndex[_name] == 0x0, \\\"Symbol already exists\\\");\\n\\t}\\n\\n\\t// Import functions\\n\\tfunction importByIndex(bytes32 _hashIndex, address _oldRegistry)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tRegistry old = Registry(_oldRegistry);\\n\\t\\tCreator memory proposal = old.getCreatorByIndex(_hashIndex);\\n\\t\\tnameDoesNotExist(proposal.name);\\n\\t\\tsymbolDoesNotExist(proposal.symbol);\\n\\n\\t\\trolodex[_hashIndex] = proposal;\\n\\t\\tif (proposal.approved) {\\n\\t\\t\\tnameToIndex[proposal.name] = _hashIndex;\\n\\t\\t\\tsymbolToIndex[proposal.symbol] = _hashIndex;\\n\\t\\t}\\n\\t\\temit LogProposalImported(\\n\\t\\t\\tproposal.name,\\n\\t\\t\\tproposal.symbol,\\n\\t\\t\\tproposal.proposer,\\n\\t\\t\\t_hashIndex\\n\\t\\t);\\n\\t}\\n\\n\\t// Legacy registry tools\\n\\n\\tfunction setLegacyRegistryAddress(address _legacyRegistry)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tlegacyRegistry = _legacyRegistry;\\n\\t}\\n\\n\\tfunction legacyProposalsByIndex(bytes32 hashIndex)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Creator memory)\\n\\t{\\n\\t\\tILegacyRegistry legacy = ILegacyRegistry(legacyRegistry);\\n\\t\\tILegacyRegistry.Creator memory legacyCreator =\\n\\t\\t\\tlegacy.rolodex(hashIndex);\\n\\t\\tCreator memory creator =\\n\\t\\t\\tCreator({\\n\\t\\t\\t\\ttoken: legacyCreator.token,\\n\\t\\t\\t\\tname: legacyCreator.name,\\n\\t\\t\\t\\tsymbol: legacyCreator.symbol,\\n\\t\\t\\t\\tdecimals: legacyCreator.decimals,\\n\\t\\t\\t\\ttotalSupply: legacyCreator.totalSupply,\\n\\t\\t\\t\\tproposer: legacyCreator.proposer,\\n\\t\\t\\t\\tvestingBeneficiary: legacyCreator.vestingBeneficiary,\\n\\t\\t\\t\\tinitialPercentage: legacyCreator.initialPercentage,\\n\\t\\t\\t\\tvestingPeriodInDays: legacyCreator.vestingPeriodInWeeks * 7,\\n\\t\\t\\t\\tapproved: legacyCreator.approved,\\n\\t\\t\\t\\tinitialPlatformPercentage: 0\\n\\t\\t\\t});\\n\\n\\t\\treturn creator;\\n\\t}\\n\\n\\tfunction legacyProposals(string memory _name)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Creator memory)\\n\\t{\\n\\t\\tILegacyRegistry legacy = ILegacyRegistry(legacyRegistry);\\n\\t\\tbytes32 hashIndex = legacy.getIndexSymbol(_name);\\n\\t\\treturn this.legacyProposalsByIndex(hashIndex);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/TokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../openzeppelin/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../openzeppelin/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../token/SocialMoney.sol\\\";\\nimport \\\"./ITokenVesting.sol\\\";\\n\\n/**\\n * @title TokenFactory contract for creating tokens from token proposals\\n * @dev For creating tokens from pre-set parameters. This can be understood as a contract factory.\\n */\\ncontract TokenFactory is Initializable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\n\\taddress public rollWallet;\\n\\tITokenVesting public TokenVestingInstance;\\n\\n\\tevent LogTokenCreated(\\n\\t\\tstring name,\\n\\t\\tstring symbol,\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary\\n\\t);\\n\\n\\t// ===============================\\n\\t// Aux functions\\n\\t// ===============================\\n\\tfunction calculateProportions(\\n\\t\\tuint256 _totalSupply,\\n\\t\\tuint8 _initialPercentage,\\n\\t\\tuint8 _initialPlatformPercentage,\\n\\t\\tuint8 _referralPercentage\\n\\t) public pure returns (uint256[4] memory proportions) {\\n\\t\\tproportions[0] = (_totalSupply).mul(_initialPercentage).div(100); //Initial Supply to Creator\\n\\t\\tproportions[1] = 0; //Supply to Platform\\n\\t\\tproportions[3] = 0; //Supply to Referral\\n\\t\\tproportions[2] = (_totalSupply).sub(proportions[0]); // Remaining Supply to vest on\\n\\t}\\n\\n\\tfunction validateProportions(\\n\\t\\tuint256[4] memory proportions,\\n\\t\\tuint256 _totalSupply\\n\\t) private pure {\\n\\t\\trequire(\\n\\t\\t\\tproportions[0].add(proportions[1]).add(proportions[2]).add(\\n\\t\\t\\t\\tproportions[3]\\n\\t\\t\\t) == _totalSupply,\\n\\t\\t\\t\\\"The supply must be same as the proportion, sanity check.\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction validateTokenVestingOwner(address a1, address a2) public view {\\n\\t\\trequire(\\n\\t\\t\\tOwnableUpgradeable(a1).owner() == a2,\\n\\t\\t\\t\\\"new TokenVesting not owned by TokenFactory\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Scale some percentages to a new 100%\\n\\t * @dev Calculates the percentage of each param as part of a total. If all are zero consider the first one as a 100%.\\n\\t */\\n\\tfunction scalePercentages(\\n\\t\\tuint256 _totalSupply,\\n\\t\\tuint8 p0,\\n\\t\\tuint8 p1,\\n\\t\\tuint8 p2\\n\\t) public pure returns (uint256[3] memory proportions) {\\n\\t\\tuint256 _vestingSupply = _totalSupply.sub(\\n\\t\\t\\t(_totalSupply).mul(p0).div(100)\\n\\t\\t);\\n\\n\\t\\tproportions[1] = 0;\\n\\t\\tproportions[2] = 0;\\n\\t\\tif (p1 > 0) {\\n\\t\\t\\tproportions[1] = _totalSupply.mul(p1).div(100);\\n\\t\\t}\\n\\t\\tif (p2 > 0) {\\n\\t\\t\\tproportions[2] = _totalSupply.mul(p2).div(100);\\n\\t\\t}\\n\\t\\tproportions[0] = _vestingSupply.sub(proportions[1]).sub(proportions[2]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Constructor method\\n\\t * @param _tokenVesting address Address of tokenVesting contract. If set to address(0), it will create one instead.\\n\\t * @param _rollWallet address Roll Wallet address for sending out proportion of tokens alloted to it.\\n\\t */\\n\\tfunction initialize(address _tokenVesting, address _rollWallet)\\n\\t\\tpublic\\n\\t\\tinitializer\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_rollWallet != address(0),\\n\\t\\t\\t\\\"Roll Wallet address must be non zero\\\"\\n\\t\\t);\\n\\t\\t__Ownable_init();\\n\\t\\trollWallet = _rollWallet;\\n\\t\\tTokenVestingInstance = ITokenVesting(_tokenVesting);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Create token method\\n\\t * @param _name string Name parameter of Token\\n\\t * @param _symbol string Symbol parameter of Token\\n\\t * @param _decimals uint8 Decimals parameter of Token, restricted to < 18\\n\\t * @param _totalSupply uint256 Total Supply paramter of Token\\n\\t * @param _initialPercentage uint8 Initial percentage of total supply that the Vesting Beneficiary will receive from launch, restricted to < 100\\n\\t * @param _vestingPeriodInDays uint256 Number of days that the remaining of total supply will be linearly vested for, restricted to > 1\\n\\t * @param _vestingBeneficiary address Address of the Vesting Beneficiary\\n\\t * @param _initialPlatformPercentage Roll 1.5\\n\\t * @return token address Address of token that has been created by those parameters\\n\\t */\\n\\tfunction createToken(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _totalSupply,\\n\\t\\tuint8 _initialPercentage,\\n\\t\\tuint256 _vestingPeriodInDays,\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\tuint8 _initialPlatformPercentage,\\n\\t\\taddress _referral,\\n\\t\\tuint8 _referralPercentage\\n\\t) public onlyOwner returns (address token) {\\n\\t\\tuint256 totalPerc =\\n\\t\\t\\tuint256(_initialPercentage)\\n\\t\\t\\t\\t.add(uint256(_initialPlatformPercentage))\\n\\t\\t\\t\\t.add(uint256(_referralPercentage));\\n\\n\\t\\trequire(\\n\\t\\t\\t_initialPercentage == 100 ||\\n\\t\\t\\t\\t(_initialPercentage < 100 && _vestingPeriodInDays > 0),\\n\\t\\t\\t\\\"Not valid vesting percentage\\\"\\n\\t\\t);\\n\\n\\t\\tuint256[4] memory proportions =\\n\\t\\t\\tcalculateProportions(\\n\\t\\t\\t\\t_totalSupply,\\n\\t\\t\\t\\t_initialPercentage,\\n\\t\\t\\t\\t_initialPlatformPercentage,\\n\\t\\t\\t\\t_referralPercentage\\n\\t\\t\\t);\\n\\t\\tvalidateProportions(proportions, _totalSupply);\\n\\t\\tSocialMoney sm =\\n\\t\\t\\tnew SocialMoney(\\n\\t\\t\\t\\t_name,\\n\\t\\t\\t\\t_symbol,\\n\\t\\t\\t\\t_decimals,\\n\\t\\t\\t\\tproportions,\\n\\t\\t\\t\\t_vestingBeneficiary,\\n\\t\\t\\t\\trollWallet,\\n\\t\\t\\t\\taddress(TokenVestingInstance),\\n\\t\\t\\t\\t_referral\\n\\t\\t\\t);\\n\\n\\t\\tif (_vestingPeriodInDays > 0) {\\n\\t\\t\\tTokenVestingInstance.addToken(\\n\\t\\t\\t\\taddress(sm),\\n\\t\\t\\t\\t[_vestingBeneficiary, rollWallet, _referral],\\n\\t\\t\\t\\tscalePercentages(\\n\\t\\t\\t\\t\\t_totalSupply,\\n\\t\\t\\t\\t\\t_initialPercentage,\\n\\t\\t\\t\\t\\t_initialPlatformPercentage,\\n\\t\\t\\t\\t\\t_referralPercentage\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\t_vestingPeriodInDays\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\ttoken = address(sm);\\n\\t\\temit LogTokenCreated(_name, _symbol, address(sm), _vestingBeneficiary);\\n\\t}\\n\\n\\tfunction setPlatformWallet(address _newPlatformWallet) external onlyOwner {\\n\\t\\trequire(_newPlatformWallet != address(0), \\\"Wallet can't be ZERO\\\");\\n\\t\\trollWallet = _newPlatformWallet;\\n\\t}\\n\\n\\tfunction migrateTokenFactory(address _newTokenFactory) external onlyOwner {\\n\\t\\tOwnableUpgradeable(address(TokenVestingInstance)).transferOwnership(\\n\\t\\t\\t_newTokenFactory\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setTokenVesting(address _newTokenVesting) external onlyOwner {\\n\\t\\tvalidateTokenVestingOwner(_newTokenVesting, address(this));\\n\\t\\tTokenVestingInstance = ITokenVesting(_newTokenVesting);\\n\\t}\\n\\n\\tfunction getTokenVesting() external view returns (address) {\\n\\t\\treturn address(TokenVestingInstance);\\n\\t}\\n\\n\\tfunction setVestingAddress(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _newVestingBeneficiary\\n\\t) external onlyOwner {\\n\\t\\tTokenVestingInstance.setVestingAddress(\\n\\t\\t\\t_vestingBeneficiary,\\n\\t\\t\\t_token,\\n\\t\\t\\t_newVestingBeneficiary\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setVestingReferral(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _vestingReferral\\n\\t) external onlyOwner {\\n\\t\\tTokenVestingInstance.setVestingReferral(\\n\\t\\t\\t_vestingBeneficiary,\\n\\t\\t\\t_token,\\n\\t\\t\\t_vestingReferral\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n\\tfunction __Context_init() internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t}\\n\\n\\tfunction __Context_init_unchained() internal initializer {}\\n\\n\\tfunction _msgSender() internal view virtual returns (address) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes calldata) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/ILegacyRegistry.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title LegacyRegistry contract interface\\n * @dev Just for to have the interface to read old contracts\\n */\\n\\ninterface ILegacyRegistry {\\n\\tstruct Creator {\\n\\t\\taddress token;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\tuint8 decimals;\\n\\t\\tuint256 totalSupply;\\n\\t\\taddress proposer;\\n\\t\\taddress vestingBeneficiary;\\n\\t\\tuint8 initialPercentage;\\n\\t\\tuint256 vestingPeriodInWeeks;\\n\\t\\tbool approved;\\n\\t}\\n\\n\\tfunction rolodex(bytes32) external view returns (Creator memory);\\n\\n\\tfunction getIndexSymbol(string memory _symbol)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryAdd(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tuint256 c = a + b;\\n\\t\\tif (c < a) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction trySub(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b > a) return (false, 0);\\n\\t\\treturn (true, a - b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMul(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) return (true, 0);\\n\\t\\tuint256 c = a * b;\\n\\t\\tif (c / a != b) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryDiv(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a / b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMod(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a % b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0) return 0;\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: division by zero\\\");\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: modulo by zero\\\");\\n\\t\\treturn a % b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryDiv}.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting with custom message when dividing by zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/token/SocialMoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title Template contract for social money, to be used by TokenFactory\\n */\\n\\ncontract SocialMoney is ERC20 {\\n\\tusing SafeMath for uint256;\\n\\n\\t/**\\n     * @dev Constructor on SocialMoney\\n     * @param _name string Name parameter of Token\\n     * @param _symbol string Symbol parameter of Token\\n     * @param _decimals uint8 Decimals parameter of Token\\n     * @param _proportions uint256[3] Parameter that dictates how totalSupply will be divvied up,\\n                            _proportions[0] = Vesting Beneficiary Initial Supply\\n                            _proportions[1] = Roll Supply\\n                            _proportions[2] = Vesting Beneficiary Vesting Supply\\n\\t\\t\\t\\t\\t\\t\\t_proportions[3] = Referral\\n     * @param _vestingBeneficiary address Address of the Vesting Beneficiary\\n     * @param _platformWallet Address of Roll platform wallet\\n     * @param _tokenVestingInstance address Address of Token Vesting contract\\n\\t * @param _referral Roll 1.5\\n     */\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256[4] memory _proportions,\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _platformWallet,\\n\\t\\taddress _tokenVestingInstance,\\n\\t\\taddress _referral\\n\\t) ERC20(_name, _symbol) {\\n\\t\\t_setupDecimals(_decimals);\\n\\n\\t\\tuint256 totalProportions =\\n\\t\\t\\t_proportions[0].add(_proportions[1]).add(_proportions[2]).add(\\n\\t\\t\\t\\t_proportions[3]\\n\\t\\t\\t);\\n\\n\\t\\t_mint(_vestingBeneficiary, _proportions[0]);\\n\\t\\t_mint(_platformWallet, _proportions[1]);\\n\\t\\t_mint(_tokenVestingInstance, _proportions[2]);\\n\\t\\tif (_referral != address(0)) {\\n\\t\\t\\t_mint(_referral, _proportions[3]);\\n\\t\\t}\\n\\n\\t\\t//Sanity check that the totalSupply is exactly where we want it to be\\n\\t\\trequire(totalProportions == totalSupply(), \\\"Error on totalSupply\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/ITokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokenVesting {\\n\\tevent Released(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent LogTokenAdded(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary,\\n\\t\\tuint256 vestingPeriodInDays\\n\\t);\\n\\n\\tevent LogBeneficiaryUpdated(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary\\n\\t);\\n\\n\\tstruct VestingInfo {\\n\\t\\taddress vestingBeneficiary;\\n\\t\\tuint256 totalBalance;\\n\\t\\tuint256 beneficiariesCount;\\n\\t\\tuint256 start;\\n\\t\\tuint256 stop;\\n\\t}\\n\\n\\tstruct Beneficiary {\\n\\t\\taddress beneficiary;\\n\\t\\tuint256 proportion;\\n\\t\\tuint256 streamId;\\n\\t\\tuint256 remaining;\\n\\t}\\n\\n\\tfunction addToken(\\n\\t\\taddress _token,\\n\\t\\taddress[3] calldata _beneficiaries,\\n\\t\\tuint256[3] calldata _proportions,\\n\\t\\tuint256 _vestingPeriodInDays\\n\\t) external;\\n\\n\\tfunction release(address _token, address _beneficiary) external;\\n\\n\\tfunction releaseableAmount(address _token) external view returns (uint256);\\n\\n\\tfunction releaseableAmountByAddress(address _token, address _beneficiary)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction vestedAmount(address _token) external view returns (uint256);\\n\\n\\tfunction getVestingInfo(address _token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (VestingInfo memory);\\n\\n\\tfunction setVestingAddress(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _newVestingBeneficiary\\n\\t) external;\\n\\n\\tfunction setVestingReferral(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _vestingReferral\\n\\t) external;\\n\\n\\tfunction getAllTokensByBeneficiary(address _beneficiary)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address[] memory);\\n\\n\\tfunction releaseAll(address _beneficiary) external;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/math/SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\tuint8 private _decimals;\\n\\n\\t/**\\n\\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n\\t * a default value of 18.\\n\\t *\\n\\t * To select a different value for {decimals}, use {_setupDecimals}.\\n\\t *\\n\\t * All three of these values are immutable: they can only be set once during\\n\\t * construction.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_decimals = 18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n\\t * called.\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view virtual returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for ``sender``'s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tsender,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_allowances[sender][_msgSender()].sub(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"ERC20: transfer amount exceeds allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].add(addedValue)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].sub(\\n\\t\\t\\t\\tsubtractedValue,\\n\\t\\t\\t\\t\\\"ERC20: decreased allowance below zero\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves tokens `amount` from `sender` to `recipient`.\\n\\t *\\n\\t * This is internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\t_balances[sender] = _balances[sender].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: transfer amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_balances[recipient] = _balances[recipient].add(amount);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\n\\t\\t_balances[account] = _balances[account].add(amount);\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\t_balances[account] = _balances[account].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: burn amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t *\\n\\t * This internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets {decimals} to a value other than the default one of 18.\\n\\t *\\n\\t * WARNING: This function should only be called from the constructor. Most\\n\\t * applications that interact with token contracts will not expect\\n\\t * {decimals} to ever change, and may work incorrectly if it does.\\n\\t */\\n\\tfunction _setupDecimals(uint8 decimals_) internal virtual {\\n\\t\\t_decimals = decimals_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * will be to transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"LogManagerMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldR\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newR\",\"type\":\"address\"}],\"name\":\"LogRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTF\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTF\",\"type\":\"address\"}],\"name\":\"LogTokenFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RegistryInstance\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenFactoryInstance\",\"outputs\":[{\"internalType\":\"contract TokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashIndex\",\"type\":\"bytes32\"}],\"name\":\"approveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"migrateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"parseAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parsed\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPlatformWallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRegistry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenFactory\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenVesting\",\"type\":\"address\"}],\"name\":\"setTokenVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingBeneficiary\",\"type\":\"address\"}],\"name\":\"setVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingReferral\",\"type\":\"address\"}],\"name\":\"setVestingReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_initialPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_initialPlatformPercentage\",\"type\":\"uint8\"}],\"name\":\"submitProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashIndex\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashIndex\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_referralPercentage\",\"type\":\"uint8\"}],\"name\":\"submitReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Manager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}