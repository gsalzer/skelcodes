{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KetherNFTRenderV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport \\\"./IKetherHomepage.sol\\\";\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\ninterface ITokenRenderer {\\n    function tokenURI(IKetherHomepage instance, uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract KetherNFTRenderV2 is ITokenRenderer {\\n  using Strings for uint;\\n\\n  string baseURI;\\n\\n  constructor(string memory _baseURI) {\\n    baseURI = _baseURI;\\n  }\\n\\n  // Thanks to @townsendsam for giving us this reference https://gist.github.com/townsendsam/df2c420accb5ae786e856c97d13a2de6\\n  function _generateAttributes(uint x, uint y, uint width, uint height, bool NSFW, bool forceNSFW) internal pure returns (string memory) {\\n    string memory filter = '';\\n\\n    if (NSFW || forceNSFW) {\\n      filter = ',{\\\"trait_type\\\": \\\"Filter\\\", \\\"value\\\": \\\"NSFW\\\"}';\\n    }\\n\\n    string memory adminOverride = '';\\n\\n    if (forceNSFW) {\\n      adminOverride = ',{\\\"trait_type\\\": \\\"Admin Override\\\", \\\"value\\\": \\\"Forced NSFW\\\"}';\\n    }\\n\\n    return string(abi.encodePacked(\\n      '[',\\n         '{',\\n            '\\\"trait_type\\\": \\\"X\\\",',\\n            '\\\"value\\\": ', x.toString(),\\n          '},',\\n          '{',\\n              '\\\"trait_type\\\": \\\"Y\\\",',\\n              '\\\"value\\\": ', y.toString(),\\n          '},',\\n          '{',\\n              '\\\"trait_type\\\": \\\"Width\\\",',\\n              '\\\"value\\\": ', width.toString(),\\n          '},',\\n          '{',\\n              '\\\"trait_type\\\": \\\"Height\\\",',\\n              '\\\"value\\\": ', height.toString(),\\n          '},',\\n          '{',\\n              '\\\"trait_type\\\": \\\"Pixels\\\",',\\n              '\\\"value\\\": ', (height * width).toString(),\\n          '}',\\n          filter,\\n          adminOverride,\\n      ']'\\n    ));\\n  }\\n\\n\\n  function tokenURI(IKetherHomepage instance, uint256 tokenId) public view override(ITokenRenderer) returns (string memory) {\\n    (,uint x,uint y,uint width,uint height,,,,bool NSFW,bool forceNSFW) = instance.ads(tokenId);\\n\\n    // Units are 1/10\\n    x *= 10;\\n    y *= 10;\\n    width *= 10;\\n    height *= 10;\\n\\n    return string(\\n      abi.encodePacked(\\n        'data:application/json;base64,',\\n        Base64.encode(bytes(abi.encodePacked(\\n              '{\\\"name\\\":\\\"Ad #', tokenId.toString(), ': ', width.toString(), 'x', height.toString(), ' at [', x.toString(), ',', y.toString(), ']\\\"',\\n              ',\\\"description\\\":\\\"This NFT represents an ad unit on thousandetherhomepage.com, the owner of the NFT controls the content of this ad unit.\\\"',\\n              ',\\\"external_url\\\":\\\"https://thousandetherhomepage.com\\\"',\\n              ',\\\"image\\\":\\\"', baseURI, tokenId.toString(), '.svg\\\"',\\n              ',\\\"attributes\\\":', _generateAttributes(x, y, width, height, NSFW, forceNSFW),\\n              '}'\\n        )))\\n      )\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IKetherHomepage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IKetherHomepage {\\n    struct Ad {\\n        address owner;\\n        uint x;\\n        uint y;\\n        uint width;\\n        uint height;\\n        string link;\\n        string image;\\n        string title;\\n        bool NSFW;\\n        bool forceNSFW;\\n    }\\n\\n    /// Buy is emitted when an ad unit is reserved.\\n    event Buy(\\n        uint indexed idx,\\n        address owner,\\n        uint x,\\n        uint y,\\n        uint width,\\n        uint height\\n    );\\n\\n    /// Publish is emitted whenever the contents of an ad is changed.\\n    event Publish(\\n        uint indexed idx,\\n        string link,\\n        string image,\\n        string title,\\n        bool NSFW\\n    );\\n\\n    /// SetAdOwner is emitted whenever the ownership of an ad is transfered\\n    event SetAdOwner(\\n        uint indexed idx,\\n        address from,\\n        address to\\n    );\\n\\n    /// ads are stored in an array, the id of an ad is its index in this array.\\n    function ads(uint _idx) external view returns (address,uint,uint,uint,uint,string memory,string memory,string memory,bool,bool);\\n\\n    function buy(uint _x, uint _y, uint _width, uint _height) external payable returns (uint idx);\\n\\n    function publish(uint _idx, string calldata _link, string calldata _image, string calldata _title, bool _NSFW) external;\\n\\n    function setAdOwner(uint _idx, address _newOwner) external;\\n\\n    function forceNSFW(uint _idx, bool _NSFW) external;\\n\\n    function withdraw() external;\\n\\n    function getAdsLength() view external returns (uint);\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IKetherHomepage\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KetherNFTRenderV2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d585a7444674e4279346b4c366d654763764e4871677247464356377565723668336978467931426a434d72372f00000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}