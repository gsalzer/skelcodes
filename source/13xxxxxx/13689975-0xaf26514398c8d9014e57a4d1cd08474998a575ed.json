{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/BlindBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"./GenerativeBB.sol\\\";\\nimport \\\"./NonGenerativeBB.sol\\\";\\n\\ncontract BlindBox is NonGenerativeBB {\\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    struct Series1 {\\n        string name;\\n        string seriesURI;\\n        string boxName;\\n        string boxURI;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address collection; \\n    }\\n    struct Series2 {\\n        uint256 maxBoxes;\\n        uint256 perBoxNftMint;\\n        uint256 perBoxPrice;\\n        address bankAddress;\\n        uint256 baseCurrency;\\n        uint256[] allowedCurrencies; \\n    }\\n    /** \\n    @dev constructor initializing blindbox\\n    */\\n    constructor() payable  {\\n\\n    }\\n\\n    /** \\n    @dev this function is to start new series of blindbox\\n    @param isGenerative flag to show either newely started series is of Generative blindbox type or Non-Generative\\n    @notice only owner of the contract can trigger this function.\\n    */\\n    function StartSeries(\\n        address[] memory addressData, // [collection, bankAddress]\\n        string[] memory stringsData, // [name, seriesURI, boxName, boxURI]\\n       uint256[] memory integerData, //[startTime, endTime, maxBoxes, perBoxNftMint, perBoxPrice, baseCurrency]\\n       uint256[] memory allowedCurrencies,\\n        bool isGenerative,  address bankAddress, uint256 royalty ) onlyOwner public {\\n            Series1 memory series = Series1( stringsData[0], stringsData[1], stringsData[2], stringsData[3], integerData[0], integerData[1],addressData[0]);\\n        if(isGenerative){\\n            // start generative series\\n            // generativeSeriesId.increment();\\n            generativeSeries(addressData[0],  stringsData[0], stringsData[1], stringsData[2], stringsData[3], integerData[0], integerData[1], royalty);\\n            \\n            // emit SeriesInputValue(series,generativeSeriesId.current(), isGenerative,  royalty);\\n\\n        } else {\\n            nonGenerativeSeriesId.increment();\\n            // start non-generative series\\n            nonGenerativeSeries(addressData[0], stringsData[0], stringsData[1], stringsData[2], stringsData[3], integerData[0], integerData[1], royalty);\\n            emit SeriesInputValue(series,nonGenerativeSeriesId.current(), isGenerative, royalty );\\n        }\\n       extraPsrams(integerData, bankAddress, allowedCurrencies, isGenerative);\\n        \\n    }\\n    function extraPsrams(uint256[] memory integerData, //[startTime, endTime, maxBoxes, perBoxNftMint, perBoxPrice, baseCurrency]\\n         address bankAddress,\\n        uint256[] memory allowedCurrencies, bool isGenerative) internal {\\n        if(isGenerative){\\n      setExtraParamsGen(integerData[5], allowedCurrencies, bankAddress, integerData[4], integerData[2], integerData[3]);  \\n\\n        } else {\\n      setExtraParams(integerData[5], allowedCurrencies, bankAddress, integerData[4], integerData[2], integerData[3]);  \\n\\n        }\\n        Series2 memory series = Series2(integerData[2], integerData[3], integerData[4], bankAddress, integerData[5], allowedCurrencies );\\n        emit Series1InputValue(series,nonGenerativeSeriesId.current(), isGenerative );\\n    }\\n    // add URIs/attributes in series [handled in respective BBs]\\n\\n    /** \\n    @dev this function is to buy box of any type.\\n    @param seriesId id of the series of whom box to bought.\\n    @param isGenerative flag to show either blindbox to be bought is of Generative blindbox type or Non-Generative\\n    \\n    */\\n    function buyBox(uint256 seriesId, bool isGenerative, uint256 currencyType) public {\\n        if(isGenerative){\\n            // buyGenerativeBox(seriesId, currencyType);\\n        } else {\\n            buyNonGenBox(seriesId, currencyType);\\n        }\\n    }\\n    function buyBoxPayable(uint256 seriesId, bool isGenerative) payable public {\\n        if(isGenerative){\\n            // buyGenBoxPayable(seriesId);\\n        } else {\\n            buyNonGenBoxPayable(seriesId);\\n        }\\n    }\\n\\n    /** \\n    @dev this function is to open blindbox of any type.\\n    @param boxId id of the box to be opened.\\n    @param isGenerative flag to show either blindbox to be opened is of Generative blindbox type or Non-Generative\\n    \\n    */\\n    function openBox(uint256 boxId, bool isGenerative) public {\\n        if(isGenerative){\\n            // openGenBox(boxId);\\n        } else {\\n            openNonGenBox(boxId);\\n        }\\n    }\\n    fallback() payable external {}\\n    receive() payable external {}\\n    event SeriesInputValue(Series1 _series, uint256 seriesId, bool isGenerative, uint256 royalty);\\n    event Series1InputValue(Series2 _series, uint256 seriesId, bool isGenerative);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/VRF/IRand.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IRand {\\n    function getRandomNumber() external returns (bytes32 requestId);\\n    function getRandomVal() external view returns (uint256); \\n\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proxy/BlindboxStorage.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\n\\ncontract Utils is Ownable, BlindboxStorage{\\n    \\n    using SafeMath for uint256;\\n    address internal gasFeeCollector;\\n    uint256 internal gasFee;\\n    constructor() {\\n       \\n\\n    }\\n    function init() public {\\n         MATIC = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); //for eth chain wrapped ethereum \\n        USD = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n        platform = 0x9c427ea9cE5fd3101a273815Ff8530f2AC75Db37;\\n        nft = INFT(0x54994ba4b4A42297B3B88E27185CDe1F51DcA288);\\n        dex = IDEX(0x9d5dc3cc15E5618434A2737DBF76158C59CA1e65);\\n        _setOwner(_msgSender());\\n    }\\n    function setVRF(address _vrf) onlyOwner public {\\n        vrf = IRand(_vrf);\\n        emit VRF(address(vrf));\\n    }\\n    function setGaseFeeData(address _address, uint256 gasFeeInUSDT ) onlyOwner public  {\\n       gasFeeCollector = _address;\\n       gasFee = gasFeeInUSDT;\\n    }\\n    function getRand() internal returns(uint256) {\\n\\n        vrf.getRandomNumber();\\n        uint256 rndm = vrf.getRandomVal();\\n        return rndm.mod(100); // taking to limit value within range of 0 - 99\\n    }\\n    function blindCreateCollection(string memory name_, string memory symbol_) onlyOwner public {\\n        dex.createCollection(name_, symbol_);\\n    }\\n\\n    function transferOwnerShipCollection(address[] memory collections, address newOwner) onlyOwner public {\\n       for (uint256 index = 0; index < collections.length; index++) {\\n            dex.transferCollectionOwnership(collections[index], newOwner);\\n       }\\n    }\\n\\n    // event\\n    event VRF(address indexed vrf);\\n    \\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Proxy/BlindboxStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../IERC20.sol';\\nimport '../VRF/IRand.sol';\\nimport '../INFT.sol';\\nimport '../IDEX.sol';\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n/**\\n * @title DexStorage\\n * @dev Defining dex storage for the proxy contract.\\n */\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract BlindboxStorage {\\n using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    address a;\\n    address b;\\n    address c;\\n\\n    IRand vrf;\\n    IERC20 ALIA;\\n    IERC20 ETH;\\n    IERC20 USD;\\n    IERC20 MATIC;\\n    INFT nft;\\n    IDEX dex;\\n    address platform;\\n    IERC20 internal token;\\n    \\n    Counters.Counter internal _boxId;\\n\\n Counters.Counter public generativeSeriesId;\\n\\n    struct Attribute {\\n        string name;\\n        string uri;\\n        uint256 rarity;\\n    }\\n\\n    struct GenerativeBox {\\n        string name;\\n        string boxURI;\\n        uint256 series; // to track start end Time\\n        uint256 countNFTs;\\n        // uint256[] attributes;\\n        // uint256 attributesRarity;\\n        bool isOpened;\\n    }\\n\\n    struct GenSeries {\\n        string name;\\n        string seriesURI;\\n        string boxName;\\n        string boxURI;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 maxBoxes;\\n        uint256 perBoxNftMint;\\n        uint256 price; // in ALIA\\n        Counters.Counter boxId; // to track series's boxId (upto minted so far)\\n        Counters.Counter attrType; // attribute Type IDs\\n        Counters.Counter attrId; // attribute's ID\\n        // attributeType => attributeId => Attribute\\n        mapping ( uint256 => mapping( uint256 => Attribute)) attributes;\\n        // attributes combination hash => flag\\n        mapping ( bytes32 => bool) blackList;\\n    }\\n\\n    struct NFT {\\n        // attrType => attrId\\n        mapping (uint256 => uint256) attribute;\\n    }\\n\\n    // seriesId => Series\\n    mapping ( uint256 => GenSeries) public genSeries;\\n   mapping ( uint256 => uint256) public genseriesRoyalty;\\n    mapping ( uint256 => uint256[]) _allowedCurrenciesGen;\\n    mapping ( uint256 => address) public bankAddressGen;\\n    mapping ( uint256 => uint256) public baseCurrencyGen;\\n    mapping (uint256=>address) public genCollection;\\n    // boxId => attributeType => attributeId => Attribute\\n    // mapping( uint256 => mapping ( uint256 => mapping( uint256 => Attribute))) public attributes;\\n    // boxId => Box\\n    mapping ( uint256 => GenerativeBox) public boxesGen;\\n    // attributes combination => flag\\n    // mapping ( bytes => bool) public blackList;\\n    // boxId => boxOpener => array of combinations to be minted\\n    // mapping ( uint256 => mapping ( address => bytes[] )) public nftToMint;\\n    // boxId => owner\\n    mapping ( uint256 => address ) public genBoxOwner;\\n    // boxId => NFT index => attrType => attribute\\n    mapping (uint256 => mapping( uint256 => mapping (uint256 => uint256))) public nftsToMint;\\n  \\n\\n    Counters.Counter public nonGenerativeSeriesId;\\n    // mapping(address => Counters.Counter) public nonGenerativeSeriesIdByAddress;\\n    struct URI {\\n        string name;\\n        string uri;\\n        uint256 rarity;\\n        uint256 copies;\\n    }\\n\\n    struct NonGenerativeBox {\\n        string name;\\n        string boxURI;\\n        uint256 series; // to track start end Time\\n        uint256 countNFTs;\\n        // uint256[] attributes;\\n        // uint256 attributesRarity;\\n        bool isOpened;\\n    }\\n\\n    struct NonGenSeries {\\n        address collection;\\n        string name;\\n        string seriesURI;\\n        string boxName;\\n        string boxURI;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 maxBoxes;\\n        uint256 perBoxNftMint;\\n        uint256 price; \\n        Counters.Counter boxId; // to track series's boxId (upto minted so far)\\n        Counters.Counter attrId; \\n        // uriId => URI \\n        mapping ( uint256 => URI) uris;\\n    }\\n\\n    struct IDs {\\n        Counters.Counter attrType;\\n        Counters.Counter attrId;\\n    }\\n\\n    struct CopiesData{\\n        \\n        uint256 total;\\n        mapping(uint256 => uint256) nftCopies;\\n    }\\n    mapping (uint256 => CopiesData) public _CopiesData;\\n    \\n    // seriesId => NonGenSeries\\n    mapping ( uint256 => NonGenSeries) public nonGenSeries;\\n\\n   mapping ( uint256 => uint256[]) _allowedCurrencies;\\n   mapping ( uint256 => address) public bankAddress;\\n   mapping ( uint256 => uint256) public nonGenseriesRoyalty;\\n   mapping ( uint256 => uint256) public baseCurrency;\\n    // boxId => IDs\\n    // mapping (uint256 => IDs) boxIds;\\n    // boxId => attributeType => attributeId => Attribute\\n    // mapping( uint256 => mapping ( uint256 => mapping( uint256 => Attribute))) public attributes;\\n    // boxId => Box\\n    mapping ( uint256 => NonGenerativeBox) public boxesNonGen;\\n    // attributes combination => flag\\n    // mapping ( bytes => bool) public blackList;\\n    // boxId => boxOpener => array of combinations to be minted\\n    // mapping ( uint256 => mapping ( address => bytes[] )) public nftToMint;\\n    // boxId => owner\\n    mapping ( uint256 => address ) public nonGenBoxOwner;\\n    // boxId => NFT index => attrType => attribute\\n    // mapping (uint256 => mapping( uint256 => mapping (uint256 => uint256))) public nfts;\\n    mapping(address => mapping(bool => uint256[])) seriesIdsByCollection;\\n    uint256 deployTime;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/NonGenerativeBB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './GenerativeBB.sol';\\n\\ncontract NonGenerativeBB is GenerativeBB {\\n\\n   using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    constructor() public {\\n\\n    }\\n\\n/** \\n    @dev function to add URIs in given series\\n        @param seriesId - id of the series in whom URIs to be added\\n        @param name - array of URI names to be added/updated\\n        @param uri - array of URIs to be added/updated\\n        @param rarity - array of URI rarity to be added/updated\\n    @notice\\n        1. all arrays should be of same length & sequence\\n        2. only owner of the smartcontract can add/update URIs\\n        3. you can not update one URI, should provide all to ensure data integrity & rarities\\n    */\\n    function setURIs(uint256 seriesId, string[] memory name, string[] memory uri, uint256[] memory rarity, uint256 copies) onlyOwner public {\\n        // uint256 totalRarity = 0;\\n        require(abi.encode(nonGenSeries[seriesId].name).length != 0,\\\"Non-GenerativeSeries doesn't exist\\\");\\n        require(name.length == uri.length && name.length == rarity.length, \\\"URIs length mismatched\\\");\\n        Counters.Counter storage _attrId = nonGenSeries[seriesId].attrId;\\n        // _attrId.reset();\\n        \\n        uint256 from = _attrId.current() + 1;\\n        for (uint256 index = 0; index < name.length; index++) {\\n            // totalRarity = totalRarity + rarity[index];\\n            // require( totalRarity <= 100, \\\"Rarity sum of URIs can't exceed 100\\\");\\n            _attrId.increment();\\n            nonGenSeries[seriesId].uris[_attrId.current()] = URI(name[index], uri[index], rarity[index], copies);\\n            \\n        }\\n        _CopiesData[seriesId].total = _attrId.current();\\n        // require( totalRarity == 100, \\\"Rarity sum of URIs should be equal to 100\\\");\\n        emit URIsAdded(seriesId,from, _attrId.current(), uri, name, rarity);\\n    }\\n/** \\n    @dev function to start new NonGenerative Series\\n        @param name - name of the series\\n        @param seriesURI - series metadata tracking URI\\n        @param boxName - name of the boxes to be created in this series\\n        @param boxURI - blindbox's URI tracking its metadata\\n        @param startTime - start time of the series, (from whom its boxes will be available to get bought)\\n        @param endTime - end time of the series, (after whom its boxes will not be available to get bought)\\n        \\n       @notice only owner of smartcontract can trigger this function\\n    */\\n    function nonGenerativeSeries(address bCollection,string memory name, string memory seriesURI, string memory boxName, string memory boxURI, uint256 startTime, uint256 endTime, uint256 royalty) onlyOwner internal {\\n        require(startTime < endTime, \\\"invalid series endTime\\\");\\n        nonGenSeries[nonGenerativeSeriesId.current()].collection = bCollection;\\n        seriesIdsByCollection[bCollection][false].push(nonGenerativeSeriesId.current());\\n        nonGenSeries[nonGenerativeSeriesId.current()].name = name;\\n        nonGenSeries[nonGenerativeSeriesId.current()].seriesURI = seriesURI;\\n        nonGenSeries[nonGenerativeSeriesId.current()].boxName = boxName;\\n        nonGenSeries[nonGenerativeSeriesId.current()].boxURI = boxURI;\\n        nonGenSeries[nonGenerativeSeriesId.current()].startTime = startTime;\\n        nonGenSeries[nonGenerativeSeriesId.current()].endTime = endTime;\\n        nonGenseriesRoyalty[nonGenerativeSeriesId.current()] = royalty;\\n\\n        emit NewNonGenSeries( nonGenerativeSeriesId.current(), name, startTime, endTime);\\n    }\\n    function setExtraParams(uint256 _baseCurrency, uint256[] memory allowedCurrecny, address _bankAddress, uint256 boxPrice, uint256 maxBoxes, uint256 perBoxNftMint) internal {\\n        baseCurrency[nonGenerativeSeriesId.current()] = _baseCurrency;\\n        _allowedCurrencies[nonGenerativeSeriesId.current()] = allowedCurrecny;\\n        bankAddress[nonGenerativeSeriesId.current()] = _bankAddress;\\n        nonGenSeries[nonGenerativeSeriesId.current()].price = boxPrice;\\n        nonGenSeries[nonGenerativeSeriesId.current()].maxBoxes = maxBoxes;\\n        nonGenSeries[nonGenerativeSeriesId.current()].perBoxNftMint = perBoxNftMint;\\n    }\\n    function getAllowedCurrencies(uint256 seriesId) public view returns(uint256[] memory) {\\n        return _allowedCurrencies[seriesId];\\n    }\\n    /** \\n    @dev utility function to mint NonGenerative BlindBox\\n        @param seriesId - id of NonGenerative Series whose box to be opened\\n    @notice given series should not be ended or its max boxes already minted.\\n    */\\n    function mintNonGenBox(uint256 seriesId) private {\\n        require(nonGenSeries[seriesId].startTime <= block.timestamp, \\\"series not started\\\");\\n        require(nonGenSeries[seriesId].endTime >= block.timestamp, \\\"series ended\\\");\\n        require(nonGenSeries[seriesId].maxBoxes > nonGenSeries[seriesId].boxId.current(),\\\"max boxes minted of this series\\\");\\n        nonGenSeries[seriesId].boxId.increment(); // incrementing boxCount minted\\n        _boxId.increment(); // incrementing to get boxId\\n\\n        boxesNonGen[_boxId.current()].name = nonGenSeries[seriesId].boxName;\\n        boxesNonGen[_boxId.current()].boxURI = nonGenSeries[seriesId].boxURI;\\n        boxesNonGen[_boxId.current()].series = seriesId;\\n        boxesNonGen[_boxId.current()].countNFTs = nonGenSeries[seriesId].perBoxNftMint;\\n       \\n        // uint256[] attributes;    // attributes setting in another mapping per boxId. note: series should've all attributes [Done]\\n        // uint256 attributesRarity; // rarity should be 100, how to ensure ? \\n                                    //from available attrubets fill them in 100 index of array as per their rarity. divide all available rarites into 100\\n        emit BoxMintNonGen(_boxId.current(), seriesId);\\n\\n    }\\n    modifier validateCurrencyType(uint256 seriesId, uint256 currencyType, bool isPayable) {\\n        bool isValid = false;\\n        uint256[] storage allowedCurrencies = _allowedCurrencies[seriesId];\\n        for (uint256 index = 0; index < allowedCurrencies.length; index++) {\\n            if(allowedCurrencies[index] == currencyType){\\n                isValid = true;\\n            }\\n        }\\n        require(isValid, \\\"123\\\");\\n        require((isPayable && currencyType == 1) || currencyType < 1, \\\"126\\\");\\n        _;\\n    }\\n/** \\n    @dev function to buy NonGenerative BlindBox\\n        @param seriesId - id of NonGenerative Series whose box to be bought\\n    @notice given series should not be ended or its max boxes already minted.\\n    */\\n    function buyNonGenBox(uint256 seriesId, uint256 currencyType) validateCurrencyType(seriesId,currencyType, false) internal {\\n        require(abi.encodePacked(nonGenSeries[seriesId].name).length > 0,\\\"Series doesn't exist\\\"); \\n        require(nonGenSeries[seriesId].maxBoxes > nonGenSeries[seriesId].boxId.current(),\\\"boxes sold out\\\");\\n        require(nonGenSeries[seriesId].attrId.current() > nonGenSeries[seriesId].boxId.current(),\\\"boxes sold out\\\");\\n        mintNonGenBox(seriesId);\\n            token = USD;\\n        \\n        uint256 price = dex.calculatePrice(nonGenSeries[seriesId].price , baseCurrency[seriesId], currencyType, 0, address(this), address(this));\\n        uint256 price2 = dex.calculatePrice(gasFee ,0, currencyType, 0, address(this), address(this));\\n        // if(currencyType == 0){\\n            price = SafeMath.div(price,1000000000000);\\n            price2 = SafeMath.div(price2,1000000000000);\\n\\n        // }\\n        // escrow alia\\n        token.transferFrom(msg.sender, bankAddress[seriesId], price);\\n        token.transferFrom(msg.sender, gasFeeCollector, price2);\\n        // transfer box to buyer\\n        nonGenBoxOwner[_boxId.current()] = msg.sender;\\n        emitBuyBoxNonGen(seriesId, currencyType, price);\\n       \\n    }\\n    function timeTester() internal {\\n    if(deployTime+ 7 days <= block.timestamp)\\n    {\\n      deployTime = block.timestamp;\\n      vrf.getRandomNumber();\\n    }\\n  }\\n    function buyNonGenBoxPayable(uint256 seriesId) validateCurrencyType(seriesId,1, true)  internal {\\n        require(abi.encodePacked(nonGenSeries[seriesId].name).length > 0,\\\"Series doesn't exist\\\"); \\n        require(nonGenSeries[seriesId].maxBoxes > nonGenSeries[seriesId].boxId.current(),\\\"boxes sold out\\\");\\n        uint256 before_bal = MATIC.balanceOf(address(this));\\n        MATIC.deposit{value : msg.value}();\\n        uint256 after_bal = MATIC.balanceOf(address(this));\\n        uint256 depositAmount = after_bal - before_bal;\\n        uint256 price = dex.calculatePrice(nonGenSeries[seriesId].price , baseCurrency[seriesId], 1, 0, address(this), address(this));\\n        uint256 price2 = dex.calculatePrice(gasFee , 0, 1, 0, address(this), address(this));\\n        require(price + price2 <= depositAmount, \\\"NFT 108\\\");\\n        chainTransfer(bankAddress[seriesId], 1000, price);\\n        chainTransfer(gasFeeCollector, 1000, price2);\\n        if((depositAmount - (price + price2)) > 0) chainTransfer(msg.sender, 1000, (depositAmount - (price + price2)));\\n        mintNonGenBox(seriesId);\\n        // transfer box to buyer\\n        nonGenBoxOwner[_boxId.current()] = msg.sender;\\n        emitBuyBoxNonGen(seriesId, 1, price);\\n      }\\n    function emitBuyBoxNonGen(uint256 seriesId, uint256 currencyType, uint256 price) private{\\n    emit BuyBoxNonGen(_boxId.current(), seriesId, nonGenSeries[seriesId].price, currencyType, nonGenSeries[seriesId].collection, msg.sender, baseCurrency[seriesId], price);\\n    }\\n//     function chainTransfer(address _address, uint256 percentage, uint256 price) private {\\n//       address payable newAddress = payable(_address);\\n//       uint256 initialBalance;\\n//       uint256 newBalance;\\n//       initialBalance = address(this).balance;\\n//       MATIC.withdraw(SafeMath.div(SafeMath.mul(price,percentage), 1000));\\n//       newBalance = address(this).balance.sub(initialBalance);\\n//     //   newAddress.transfer(newBalance);\\n//     (bool success, ) = newAddress.call{value: newBalance}(\\\"\\\");\\n//     require(success, \\\"Failed to send Ether\\\");\\n//   }\\n/** \\n    @dev function to open NonGenerative BlindBox\\n        @param boxId - id of blind box to be opened\\n    @notice given box should not be already opened.\\n    */\\n    function openNonGenBox(uint256 boxId) public {\\n        require(nonGenBoxOwner[boxId] == msg.sender, \\\"Box not owned\\\");\\n        require(!boxesNonGen[boxId].isOpened, \\\"Box already opened\\\");\\n        _openNonGenBox(boxId);\\n\\n        emit BoxOpenedNonGen(boxId);\\n    }\\n/** \\n    @dev utility function to open NonGenerative BlindBox\\n        @param boxId - id of blind box to be opened\\n    @notice given box should not be already opened.\\n    */\\n    function _openNonGenBox(uint256 boxId) private {\\n        uint256 sId = boxesNonGen[boxId].series;\\n        address collection = nonGenSeries[sId].collection;\\n    timeTester();\\n        // uint256 attrType = nonGenSeries[sId].attrType.current();\\n        uint256 rand =  vrf.getRandomVal();\\n        uint256 rand1;\\n        // uint256[] memory uris = new uint256[](_CopiesData[sId].total);\\n        uint256 tokenId;\\n        // uris = getRandURIs(sId, _CopiesData[sId].total);\\n        for (uint256 j = 0; j < boxesNonGen[boxId].countNFTs; j++) {\\n          rand1 = uint256(keccak256(abi.encodePacked(block.coinbase, rand, msg.sender, j))).mod(_CopiesData[sId].total); // to keep each iteration further randomize and reducing fee of invoking VRF on each iteration.\\n          tokenId = dex.mintWithCollection(collection, msg.sender, nonGenSeries[sId].uris[rand1].uri, nonGenseriesRoyalty[sId] );\\n          _CopiesData[sId].nftCopies[rand1]++;\\n          if(_CopiesData[sId].nftCopies[rand1] >= nonGenSeries[sId].uris[rand1].copies){\\n              URI storage temp = nonGenSeries[sId].uris[rand1];\\n            nonGenSeries[sId].uris[rand1] = nonGenSeries[sId].uris[_CopiesData[sId].total];\\n            nonGenSeries[sId].uris[_CopiesData[sId].total] = temp;\\n            _CopiesData[sId].total--;\\n            \\n          }\\n          emit NonGenNFTMinted(boxId, tokenId, msg.sender, collection, rand1);\\n        }\\n        boxesNonGen[boxId].isOpened = true;\\n       \\n    }\\n/** \\n    @dev utility function to get Random URIs of given series based on URI's rarities.\\n        @param seriesId - id of nongenerative series\\n        @param countNFTs - total NFTs to be randomly selected and minted.\\n    */\\n    function getRandURIs(uint256 seriesId, uint256 countNFTs) internal view returns(uint256[] memory) {\\n        uint256[] memory URIs = new uint256[](countNFTs);\\n        // uint256[] memory uris = new uint256[](100);\\n        URI memory uri;\\n        uint256 occurence;\\n        uint256 i = 0;\\n        // populate attributes in array as per their rarity\\n        for (uint256 uriId = 1; uriId <= nonGenSeries[seriesId].attrId.current(); uriId++) {\\n            uri = nonGenSeries[seriesId].uris[uriId];\\n            // occurence = getOccurency(attr, attrType);\\n            occurence = uri.rarity;\\n            for (uint256 index = 0; index < occurence; index++) {\\n                URIs[i] = uriId;\\n                i++;\\n            }\\n        }\\n        // generate rand num through VRF out of 100 (size of array) can increase size or decrase based on attributes quantity\\n        \\n        // pic thos uriIds and return\\n        return URIs;\\n    }\\n    \\n    // events\\n    event NewNonGenSeries(uint256 indexed seriesId, string name, uint256 startTime, uint256 endTime);\\n    event BoxMintNonGen(uint256 boxId, uint256 seriesId);\\n    // event AttributesAdded(uint256 indexed boxId, uint256 indexed attrType, uint256 fromm, uint256 to);\\n    event URIsAdded(uint256 indexed boxId, uint256 from, uint256 to, string[] uris, string[] name, uint256[] rarity);\\n    event BuyBoxNonGen(uint256 boxId, uint256 seriesId, uint256 orignalPrice, uint256 currencyType, address collection, address from,uint256 baseCurrency, uint256 calculated);\\n    event BoxOpenedNonGen(uint256 indexed boxId);\\n    event NonGenNFTMinted(uint256 indexed boxId, uint256 tokenId, address from, address collection, uint256 uriIndex );\\n    // event BlackList(uint256 indexed seriesId, bytes32 indexed combHash, bool flag);\\n    \\n\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/INFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface INFT {\\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\\n    function transferFrom(address owner, address to, uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n     function withdraw(uint) external;\\n    function deposit() payable external;\\n}\\n\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/IDEX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IDEX {\\n   function calculatePrice(uint256 _price, uint256 base, uint256 currencyType, uint256 tokenId, address seller, address nft_a) external view returns(uint256);\\n   function mintWithCollection(address collection, address to, string memory tokesnURI, uint256 royalty ) external returns(uint256);\\n   function createCollection(string calldata name_, string calldata symbol_) external;\\n   function transferCollectionOwnership(address collection, address newOwner) external;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/GenerativeBB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Utils.sol';\\n/**\\n@title GenerativeBB \\n- this contract of blindbox's type Generative. which deals with all the operations of Generative blinboxes & series\\n */\\ncontract GenerativeBB is Utils {\\n    \\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n    constructor()  {\\n\\n    }\\n\\n\\n    /** \\n    @dev function to add attributes/traits in given series\\n        @param seriesId - id of the series in whom attributes to be added\\n        @param attrType - attribute Type id whose variants(attributes) to be updated, pass attrType=0 is want to add new attributeType.\\n        @param name - array of attributes names to be added/updated\\n        @param uri - array of attributes URIs to be added/updated\\n        @param rarity - array of attributes rarity to be added/updated\\n    @notice\\n        1. all arrays should be of same length & sequence\\n        2. only owner of the smartcontract can add/update attributes\\n        3. you can not update one attribute, should provide all to attributes of given attrType# ensure data integrity & rarities\\n    */\\n    function setAttributes(uint256 seriesId, uint256 attrType, string[] memory name, string[] memory uri, uint256[] memory rarity) onlyOwner public {\\n        uint256 totalRarity = 0;\\n        if(attrType == 0){\\n            genSeries[seriesId].attrType.increment(); // should do +=\\n            attrType = genSeries[seriesId].attrType.current();\\n        }else {\\n            require(abi.encodePacked(genSeries[seriesId].attributes[attrType][1].name).length != 0,\\\"attrType doesn't exists, please pass attrType=0 for new attrType\\\");\\n        }\\n        require(name.length == uri.length && name.length == rarity.length, \\\"attributes length mismatched\\\");\\n        Counters.Counter storage _attrId = genSeries[seriesId].attrId; // need to reset so rarity sum calc could be exact to avoid rarity issues\\n        _attrId.reset(); // reseting attrIds to overwrite\\n        // delete genSeries[seriesId].attributes[attrType];\\n        uint256 from = _attrId.current() + 1;\\n        for (uint256 index = 0; index < name.length; index++) {\\n            totalRarity = totalRarity + rarity[index];\\n            require( totalRarity <= 100, \\\"Rarity sum of attributes can't exceed 100\\\");\\n            _attrId.increment();\\n            genSeries[seriesId].attributes[attrType][_attrId.current()] = Attribute(name[index], uri[index], rarity[index]);\\n        }\\n\\n        require( totalRarity == 100, \\\"Rarity sum of attributes shoud be equal to 100\\\");\\n        emit AttributesAdded(seriesId, attrType,from, _attrId.current());\\n    }\\n/** \\n    @dev function to start new Generative Series\\n        @param name - name of the series\\n        @param seriesURI - series metadata tracking URI\\n        @param boxName - name of the boxes to be created in this series\\n        @param boxURI - blindbox's URI tracking its metadata\\n        @param startTime - start time of the series, (from whom its boxes will be available to get bought)\\n        @param endTime - end time of the series, (after whom its boxes will not be available to get bought)\\n\\n    */\\n    function generativeSeries(address bCollection, string memory name, string memory seriesURI, string memory boxName, string memory boxURI, uint256 startTime, uint256 endTime, uint256 royalty) onlyOwner internal {\\n        require(startTime < endTime, \\\"invalid series endTime\\\");\\n        seriesIdsByCollection[bCollection][true].push(generativeSeriesId.current());\\n        genCollection[generativeSeriesId.current()] = bCollection;\\n        genSeries[generativeSeriesId.current()].name = name;\\n        genSeries[generativeSeriesId.current()].seriesURI = seriesURI;\\n        genSeries[generativeSeriesId.current()].boxName = boxName;\\n        genSeries[generativeSeriesId.current()].boxURI = boxURI;\\n        genSeries[generativeSeriesId.current()].startTime = startTime;\\n        genSeries[generativeSeriesId.current()].endTime = endTime;\\n\\n        emit NewGenSeries( generativeSeriesId.current(), name, startTime, endTime);\\n    }\\n    function setExtraParamsGen(uint256 _baseCurrency, uint256[] memory allowedCurrecny, address _bankAddress, uint256 boxPrice, uint256 maxBoxes, uint256 perBoxNftMint) internal {\\n        baseCurrencyGen[generativeSeriesId.current()] = _baseCurrency;\\n        _allowedCurrenciesGen[generativeSeriesId.current()] = allowedCurrecny;\\n        bankAddressGen[generativeSeriesId.current()] = _bankAddress;\\n        genSeries[generativeSeriesId.current()].price = boxPrice;\\n        genSeries[generativeSeriesId.current()].maxBoxes = maxBoxes;\\n        genSeries[generativeSeriesId.current()].perBoxNftMint = perBoxNftMint;\\n    }\\n    /** \\n    @dev utility function to mint Generative BlindBox\\n        @param seriesId - id of Generative Series whose box to be opened\\n    @notice given series should not be ended or its max boxes already minted.\\n    */\\n    function mintGenBox(uint256 seriesId) private {\\n        require(genSeries[seriesId].endTime >= block.timestamp, \\\"series ended\\\");\\n        require(genSeries[seriesId].maxBoxes > genSeries[seriesId].boxId.current(),\\\"max boxes minted of this series\\\");\\n        genSeries[seriesId].boxId.increment(); // incrementing boxCount minted\\n        _boxId.increment(); // incrementing to get boxId\\n\\n        boxesGen[_boxId.current()].name = genSeries[seriesId].boxName;\\n        boxesGen[_boxId.current()].boxURI = genSeries[seriesId].boxURI;\\n        boxesGen[_boxId.current()].series = seriesId;\\n        boxesGen[_boxId.current()].countNFTs = genSeries[seriesId].perBoxNftMint;\\n       \\n        // uint256[] attributes;    // attributes setting in another mapping per boxId. note: series should've all attributes [Done]\\n        // uint256 attributesRarity; // rarity should be 100, how to ensure ? \\n                                    //from available attrubets fill them in 100 index of array as per their rarity. divide all available rarites into 100\\n        emit BoxMintGen(_boxId.current(), seriesId);\\n\\n    }\\n     modifier validateCurrencyTypeGen(uint256 seriesId, uint256 currencyType, bool isPayable) {\\n        bool isValid = false;\\n        uint256[] storage allowedCurrencies = _allowedCurrenciesGen[seriesId];\\n        for (uint256 index = 0; index < allowedCurrencies.length; index++) {\\n            if(allowedCurrencies[index] == currencyType){\\n                isValid = true;\\n            }\\n        }\\n        require(isValid, \\\"123\\\");\\n        require((isPayable && currencyType == 1) || currencyType < 1, \\\"126\\\");\\n        _;\\n    }\\n/** \\n    @dev function to buy Generative BlindBox\\n        @param seriesId - id of Generative Series whose box to be bought\\n    @notice given series should not be ended or its max boxes already minted.\\n    */\\n    function buyGenerativeBox(uint256 seriesId, uint256 currencyType) validateCurrencyTypeGen(seriesId, currencyType, false) internal {\\n        require(abi.encode(genSeries[seriesId].name).length > 0,\\\"Series doesn't exist\\\"); \\n        require(genSeries[seriesId].maxBoxes > genSeries[seriesId].boxId.current(),\\\"boxes sold out\\\");\\n        mintGenBox(seriesId);\\n       token = USD;\\n        \\n        uint256 price = dex.calculatePrice(genSeries[seriesId].price , baseCurrencyGen[seriesId], currencyType, 0, address(this), address(this));\\n        // if(currencyType == 0){\\n            price = price / 1000000000000;\\n        // }\\n        // escrow alia\\n        token.transferFrom(msg.sender, bankAddressGen[seriesId], price);\\n        genBoxOwner[_boxId.current()] = msg.sender;\\n\\n        emit BuyBoxGen(_boxId.current(), seriesId);\\n    }\\n    function buyGenBoxPayable(uint256 seriesId) validateCurrencyTypeGen(seriesId,1, true) internal {\\n        require(abi.encode(genSeries[seriesId].name).length > 0,\\\"Series doesn't exist\\\"); \\n        require(genSeries[seriesId].maxBoxes > genSeries[seriesId].boxId.current(),\\\"boxes sold out\\\");\\n        uint256 before_bal = MATIC.balanceOf(address(this));\\n        MATIC.deposit{value : msg.value}();\\n        uint256 after_bal = MATIC.balanceOf(address(this));\\n        uint256 depositAmount = after_bal - before_bal;\\n        uint256 price = dex.calculatePrice(genSeries[seriesId].price , baseCurrencyGen[seriesId], 1, 0, address(this), address(this));\\n        require(price <= depositAmount, \\\"NFT 108\\\");\\n        chainTransfer(bankAddressGen[seriesId], 1000, price);\\n        if(depositAmount - price > 0) chainTransfer(msg.sender, 1000, (depositAmount - price));\\n        mintGenBox(seriesId);\\n        // transfer box to buyer\\n        genBoxOwner[_boxId.current()] = msg.sender;\\n\\n        emit BuyBoxGen(_boxId.current(), seriesId);\\n    }\\n    function chainTransfer(address _address, uint256 percentage, uint256 price) internal {\\n      address payable newAddress = payable(_address);\\n      uint256 initialBalance;\\n      uint256 newBalance;\\n      initialBalance = address(this).balance;\\n      MATIC.withdraw(SafeMath.div(SafeMath.mul(price,percentage), 1000));\\n      newBalance = address(this).balance.sub(initialBalance);\\n    //   newAddress.transfer(newBalance);\\n    (bool success, ) = newAddress.call{value: newBalance}(\\\"\\\");\\n    require(success, \\\"Failed to send Ether\\\");\\n  }\\n/** \\n    @dev function to open Generative BlindBox\\n        @param boxId - id of blind box to be opened\\n    @notice given box should not be already opened.\\n    */\\n    function openGenBox(uint256 boxId) internal {\\n        require(genBoxOwner[boxId] == msg.sender, \\\"Box not owned\\\");\\n        require(!boxesGen[boxId].isOpened, \\\"Box already opened\\\");\\n        _openGenBox(boxId);\\n\\n        emit BoxOpenedGen(boxId);\\n\\n    }\\n    event Msg(string msg);\\n    event Value(uint256 value);\\n    /** \\n    @dev utility function to open Generative BlindBox\\n        @param boxId - id of blind box to be opened\\n    @notice given box should not be already opened.\\n    */\\n    function _openGenBox(uint256 boxId) private {\\n        uint256 sId = boxesGen[boxId].series;\\n        uint256 attrType = genSeries[sId].attrType.current();\\n        \\n        uint256 rand = getRand(); // should get random number within range of 100\\n        // NFT[] storage nft = NFT[](boxesGen[boxId].countNFTs);\\n        uint256 i;\\n        uint256 j;\\n        bytes32 combHash;\\n        uint256 rand1;\\n        for ( i = 1; i <= boxesGen[boxId].countNFTs; i++) {\\n            emit Msg(\\\"into NFT loop\\\");\\n            combHash = bytes32(0); // reset combHash for next iteration of possible NFT\\n            // combHash = keccak256(abi.encode(sId,boxId)); // to keep combHash of each box unique [no needed, as list is per series]\\n            \\n            for ( j = 1; j <= attrType; j++){\\n                // select one random attribute from each attribute type\\n                // set in mapping against boxId\\n                emit Msg(\\\"into attrType loop\\\");\\n                rand1 = uint256(keccak256(abi.encodePacked(block.coinbase, rand, msg.sender, i,j))).mod(100); // to keep each iteration further randomize and reducing fee of invoking VRF on each iteration.\\n                emit Value(rand1);\\n                nftsToMint[boxId][i][j] = getRandAttr(sId, boxId, j, rand1);\\n                // nftsToMint[i].attribute[j] = getRandAttr(sId, boxId, j);\\n                // generate hash of comb decided so far\\n                combHash = keccak256(abi.encode(combHash, nftsToMint[boxId][i][j])); // TODO: need to test if hash appending work same like hashing with all values at once. [DONE]\\n            }\\n                // bytes32 comb = keccak256(abi.encode())\\n            // check if selected attr comibination is blacklisted\\n            if( isBlackListed(sId, combHash)){\\n                // same iteration should run again\\n                i = i - 1;\\n                j = j - 1;\\n                rand = getRand(); // getting new random number to skip blacklisted comb on same iteration.\\n                // delete nftsToMint[boxId][i]; // deleting blacklisted comb NFT [need to delete each j's entry] TODO: what if left as it is to be replaced in next iteration with same i\\n            }\\n        }\\n\\n        boxesGen[boxId].isOpened = true;\\n    }\\n\\n    /** \\n    @dev utility function to get Random attribute of given attribute Type based on attributes rarities.\\n        @param seriesId - id of generative series\\n        @param boxId - id of blindbox whose\\n        @param attrType - attribute type whose random attribute to be selected\\n        @param rand - random number on whose basis random attribute to be selected\\n    */\\n    function getRandAttr(uint256 seriesId, uint256 boxId, uint256 attrType, uint256 rand) private returns(uint256) {\\n        uint256[] memory attrs = new uint256[](100);\\n        Attribute memory attr;\\n        uint256 occurence;\\n        uint256 i = 0;\\n        // populate attributes in array as per their rarity\\n        for (uint256 attrId = 1; attrId <= genSeries[seriesId].attrId.current(); attrId++) {\\n            attr = genSeries[seriesId].attributes[attrType][attrId];\\n            // occurence = getOccurency(attr, attrType);\\n            occurence = attr.rarity;\\n            for (uint256 index = 0; index < occurence; index++) {\\n                attrs[i] = attrId;\\n                i++;\\n                if( i > rand ){\\n                    break;\\n                }\\n            }\\n        }\\n        // generate rand num through VRF out of 100 (size of array) can increase size or decrase based on attributes quantity\\n        // pic that index's attributeId and return\\n        // emit Attr(attrType, attrs[rand]);\\n        return attrs[rand];\\n    }\\n\\n    /** \\n    @dev function to check is given combination of attributes of specific series is blacklisted or not\\n        @param seriesId series Id whose blacklist to be checked against given combHash\\n        @param combHash hash of attributes combination which is to be checked\\n    */\\n    function isBlackListed(uint256 seriesId, bytes32 combHash) public view returns(bool) {\\n        return genSeries[seriesId].blackList[combHash];\\n    }\\n    /** \\n    @dev function to get hash of given attributes combination.\\n        @param seriesId series Id whose attributes combination\\n        @param boxId hash of attributes combination which is to be checked\\n    */\\n    function getCombHash(uint256 seriesId, uint256 boxId, uint256[] memory attrTypes, uint256[] memory attrIds) public pure returns(bytes32) {\\n        bytes32 combHash = bytes32(0);\\n        // for (uint256 i = 0; i < attrTypes.length; i++) {\\n            for (uint256 j = 0; j < attrIds.length; j++) {\\n                combHash = keccak256(abi.encode(combHash,attrIds[j]));\\n            }\\n            \\n        // }\\n        return combHash;\\n    }\\n/** \\n    @dev function to blacklist given attributes combination.\\n        @param seriesId series Id whose attributes combination to be blacklisted\\n        @param combHash hash of attributes combination to be blacklisted\\n        @param flag flag to blacklist or not.\\n    */\\n    function blackListAttribute(uint256 seriesId, bytes32 combHash, bool flag) public onlyOwner {\\n        genSeries[seriesId].blackList[combHash] = flag;\\n        emit BlackList(seriesId, combHash, flag);\\n    }\\n   /** \\n    @dev function to mint NFTs by sumbitting finalized URIs of comibation attributes, randomly calculated at the time of box was opened.\\n        @param boxId boxId whose randomly calculated NFTs to be minted\\n        @param uris Generated array of URIs to be minted.\\n    @notice only owner of the contract can trigger this function\\n    */\\n    function mintGenerativeNFTs(address collection, uint256 boxId, string[] memory uris) public onlyOwner {\\n        require(nftsToMint[boxId][1][1] > 0, \\\"boxId isn't opened\\\");\\n        require(boxesGen[boxId].countNFTs == uris.length, \\\"insufficient URIs to mint\\\");\\n         for (uint256 i = 0; i < uris.length; i++) {\\n            dex.mintWithCollection(collection, genBoxOwner[boxId], uris[i], genseriesRoyalty[boxesGen[boxId].series]);\\n         }\\n         uint256 countNFTs = boxesGen[boxId].countNFTs;\\n         delete boxesGen[boxId]; // deleting box to avoid duplicate NFTs mint\\n         emit NFTsMinted(boxId, genBoxOwner[boxId], countNFTs);\\n    }\\n /** \\n    @dev function to mint NFTs by sumbitting finalized URIs of comibation attributes, randomly calculated at the time of box was opened.\\n        @param seriesId ID of series whose attributes to be fetched.\\n        @param attrType attribute Type of which attributes to be fetched.\\n        @param attrId attribute ID to be fetched.\\n    */\\n    function getAttributes(uint256 seriesId, uint256 attrType, uint256 attrId) public view returns(Attribute memory){\\n        return genSeries[seriesId].attributes[attrType][attrId];\\n    }\\n    \\n    // events\\n    event NewGenSeries(uint256 indexed seriesId, string name, uint256 startTime, uint256 endTime);\\n    event BoxMintGen(uint256 boxId, uint256 seriesId);\\n    event AttributesAdded(uint256 indexed seriesId, uint256 indexed attrType, uint256 from, uint256 to);\\n    event BuyBoxGen(uint256 boxId, uint256 seriesId);\\n    event BoxOpenedGen(uint256 indexed boxId);\\n    event BlackList(uint256 indexed seriesId, bytes32 indexed combHash, bool flag);\\n    event NFTsMinted(uint256 indexed boxId, address owner, uint256 countNFTs);\\n    \\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attrType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"AttributesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"combHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"BlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"BoxMintGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"BoxMintNonGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"BoxOpenedGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"BoxOpenedNonGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"BuyBoxGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orignalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calculated\",\"type\":\"uint256\"}],\"name\":\"BuyBoxNonGen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Msg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countNFTs\",\"type\":\"uint256\"}],\"name\":\"NFTsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"NewGenSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"NewNonGenSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uriIndex\",\"type\":\"uint256\"}],\"name\":\"NonGenNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxBoxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxNftMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct BlindBox.Series2\",\"name\":\"_series\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"}],\"name\":\"Series1InputValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct BlindBox.Series1\",\"name\":\"_series\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"SeriesInputValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rarity\",\"type\":\"uint256[]\"}],\"name\":\"URIsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vrf\",\"type\":\"address\"}],\"name\":\"VRF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Value\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressData\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"stringsData\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"integerData\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"StartSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_CopiesData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankAddressGen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseCurrencyGen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"combHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"blackListAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"blindCreateCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxesGen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNFTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxesNonGen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNFTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"buyBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"}],\"name\":\"buyBoxPayable\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genBoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genSeries\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxNftMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"boxId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrId\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generativeSeriesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genseriesRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"getAllowedCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attrType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attrId\",\"type\":\"uint256\"}],\"name\":\"getAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"internalType\":\"struct BlindboxStorage.Attribute\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"attrTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"attrIds\",\"type\":\"uint256[]\"}],\"name\":\"getCombHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"combHash\",\"type\":\"bytes32\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintGenerativeNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenBoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxNftMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"boxId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrId\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonGenerativeSeriesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenseriesRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenerative\",\"type\":\"bool\"}],\"name\":\"openBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"openNonGenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attrType\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"uri\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rarity\",\"type\":\"uint256[]\"}],\"name\":\"setAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeInUSDT\",\"type\":\"uint256\"}],\"name\":\"setGaseFeeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"uri\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rarity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"copies\",\"type\":\"uint256\"}],\"name\":\"setURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrf\",\"type\":\"address\"}],\"name\":\"setVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShipCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BlindBox","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}