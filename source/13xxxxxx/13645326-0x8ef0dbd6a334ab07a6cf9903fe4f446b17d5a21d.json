{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract AGVSeed {\r\n\r\n    address public owner;\r\n    address private AGV_address;\r\n    uint256 private tokenGenerateTime;\r\n    uint256 private vestingDuration;      // In months\r\n    uint256 private vestingTimeStartFrom;  //  Claim cannot start before vestingTimeStart from \r\n    uint256 public totalInvestment;\r\n    uint256 public totalRelease;\r\n    uint256 public tgePercentage;\r\n    uint256 public claimPercentage;\r\n    \r\n    struct Investor {\r\n        uint256 lockedAgv;        //  Locked balance\r\n        uint256 releasedAgv;       // relesed balance\r\n        uint256 previousClaimTime;\r\n        uint256 claimCounter;\r\n        bool isTokenGenerated;\r\n        uint256 balance;     // remaining balance\r\n    }\r\n\r\n    mapping(address => Investor) public investors;\r\n    \r\n    event AddInvestor(address indexed investor, uint256 indexed amount);\r\n    event Claim(address indexed sender, address indexed investor, uint256 indexed amount);\r\n    \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    constructor() {\r\n        tokenGenerateTime = 1640217600; //23 dec 2021\r\n        vestingTimeStartFrom = 1643587200; //31 jan 2022\r\n        vestingDuration = 24;\r\n        tgePercentage = 5;\r\n        claimPercentage = 396;\r\n        owner = _msgSender();\r\n        AGV_address = 0xf4F618Eff5eF36Cde2FCa4FBD86554c62Fb1382B;\r\n    }\r\n    \r\n    modifier isValidAddress(address _address ){\r\n        require(_address != address(0),\"Address cannot be empty\");\r\n        _;\r\n    }\r\n    \r\n    modifier isInvestorExist(){\r\n        require(investors[_msgSender()].lockedAgv != 0,\" Invalid investor. \");\r\n        _;\r\n    }\r\n    \r\n    modifier isValidAmount(uint256 _amount){\r\n        require(_amount != 0,\" Amount not found. \");\r\n        _;\r\n    }\r\n    \r\n    modifier isValidDate(uint256 _date){\r\n        require(_date != 0,\" Date is not valid. \");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender() , \"Only owner access\");\r\n        _;\r\n    }\r\n    \r\n    function isTokenGenerateEventStarted() public view returns(bool){\r\n        if(block.timestamp > tokenGenerateTime)\r\n            return true;       // if date is after TGE time\r\n        else\r\n            return false;      // if date is before TGE time\r\n    }\r\n    \r\n    function isVestingTimeStarted() public view returns(bool){\r\n        if(block.timestamp > vestingTimeStartFrom)\r\n            return true;       // vesting Time started\r\n        else\r\n            return false;      // or not\r\n    }\r\n    \r\n    function modifyVestingDuration(uint256 _month) public onlyOwner {\r\n        bool isVestingTimeStart = isVestingTimeStarted();\r\n        require(isVestingTimeStart == false,\" Vesting duration cannot be changed when vesting period started.\");\r\n        vestingDuration = _month;\r\n    }\r\n    \r\n    function modifyVestingTimeStartFrom(uint256 _date) public onlyOwner isValidDate(_date) {\r\n        bool isVestingTimeStart = isVestingTimeStarted();\r\n        require(isVestingTimeStart == false,\" Vesting time cannot be changed when vesting period started.\");\r\n        require(_date >= tokenGenerateTime, \"Vesting time cannot start before token generate event.\");\r\n        vestingTimeStartFrom = _date;\r\n    }\r\n    \r\n    function modifyTokenGenerateTime(uint256 _date) public onlyOwner isValidDate(_date) {\r\n        bool isTokenGenerateStarted = isTokenGenerateEventStarted();\r\n        require(isTokenGenerateStarted == false,\"Token generate time cannot be changed when token generate event started.\");\r\n        require(_date <= vestingTimeStartFrom, \"Token generate event time must be less than vesting time.\");\r\n        tokenGenerateTime = _date;\r\n    }\r\n\r\n    function withdrawAgv(address _address, uint256 _amount) public onlyOwner isValidAmount(_amount) {\r\n        uint256 contractBalance = IERC20(AGV_address).balanceOf(address(this));\r\n        require(contractBalance >= _amount,\" Insufficient AGV token balance.\");\r\n        transferAGV(_address,_amount);\r\n    }\r\n\r\n    function decreaseInvestorAllowance(address _address, uint256 _amount) public onlyOwner isValidAddress(_address) isValidAmount(_amount) {\r\n        require(_amount < investors[_address].balance,\"Not enough token\");\r\n        investors[_address].lockedAgv -= _amount;\r\n        investors[_address].balance -= _amount;\r\n        totalInvestment -= _amount;\r\n    }\r\n    \r\n    function changeAgvAddress(address _address) external onlyOwner isValidAddress(_address) {\r\n        AGV_address = _address;\r\n    }\r\n    \r\n    function transferOwnership(address _address) external onlyOwner isValidAddress(_address){\r\n        owner = _address;\r\n    }\r\n    \r\n    function getTokenGenerateTime() public view returns (uint256){\r\n        return tokenGenerateTime;\r\n    }\r\n    function getVestingTime() public view returns (uint256){\r\n        return vestingTimeStartFrom;\r\n    }\r\n    \r\n    function getInvestor(address _address) public view returns (uint256 lockedAgv, uint256 releasedAgv, uint256 balance, uint256 totalClaim, uint256 previousClaimTime, bool tokenGenerated){\r\n        if(investors[_address].lockedAgv != 0){\r\n            return (\r\n                investors[_address].lockedAgv,\r\n                investors[_address].releasedAgv,\r\n                investors[_address].balance,\r\n                investors[_address].claimCounter,\r\n                investors[_address].previousClaimTime,\r\n                investors[_address].isTokenGenerated\r\n            );\r\n        } else {\r\n            return (0,0,0,0,0,false);\r\n        }\r\n    }\r\n    \r\n    function isEligibleForClaim() public view isInvestorExist returns(bool _res){\r\n        bool isTokenGenerateStarted = isTokenGenerateEventStarted();\r\n        bool isVestingTime = isVestingTimeStarted();\r\n        if(isTokenGenerateStarted == true){\r\n            if(isVestingTime == true){\r\n                if(investors[_msgSender()].releasedAgv < investors[_msgSender()].lockedAgv){\r\n                    if(investors[_msgSender()].claimCounter < vestingDuration){\r\n                        if(investors[_msgSender()].previousClaimTime != 0){\r\n                            if(block.timestamp > investors[_msgSender()].previousClaimTime + 30*24*60*60) return true;\r\n                            else return false;\r\n                        } else {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }      \r\n            } \r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function addInvestor(address _address, uint256 _amount) external onlyOwner isValidAddress(_address) isValidAmount(_amount) {\r\n        bool isTGETime = isTokenGenerateEventStarted();\r\n        require(isTGETime == false,\" Cannot add investor after Token generation started.\");\r\n        totalInvestment += _amount;\r\n        if(investors[_address].lockedAgv != 0){\r\n            investors[_address].lockedAgv += _amount;\r\n            investors[_address].balance += _amount;\r\n        } else {\r\n            investors[_address] = Investor ({\r\n                lockedAgv:_amount,\r\n                releasedAgv:0,\r\n                previousClaimTime:0,\r\n                claimCounter:0,\r\n                isTokenGenerated:false,\r\n                balance:_amount\r\n            });\r\n            emit AddInvestor(_address,_amount);\r\n        }\r\n    }\r\n    \r\n    function transferAGV(address _receiver, uint256 _amount) internal returns(bool _res){\r\n        bool responce = IERC20(AGV_address).transfer(_receiver,_amount);\r\n        return responce;\r\n    }\r\n    \r\n    function generateToken() external isInvestorExist {\r\n        bool isTokenGenerateStarted = isTokenGenerateEventStarted();\r\n        address _address = _msgSender();\r\n        \r\n        require(isTokenGenerateStarted == true,\"Token generate event not started.\");\r\n        \r\n        require(investors[_address].isTokenGenerated == false,\"Token already generated.\");\r\n        \r\n        uint256 _amount = (investors[_address].lockedAgv * tgePercentage)/100;\r\n        \r\n        uint256 contractBalance = IERC20(AGV_address).balanceOf(address(this));\r\n        require(contractBalance >= _amount,\" Insufficient AGV token balance.\");\r\n        \r\n        transferAGV(_address,_amount);\r\n        totalRelease += _amount;\r\n        \r\n        investors[_address].releasedAgv += _amount;\r\n        investors[_address].balance = investors[_address].lockedAgv - investors[_address].releasedAgv;\r\n        investors[_address].isTokenGenerated = true;\r\n    }\r\n    \r\n    function claimAgv() external isInvestorExist {\r\n        \r\n        bool isVestingTimeStart = isVestingTimeStarted();\r\n        require(isVestingTimeStart == true,\"Claim cannot be started before the vesting time started.\");\r\n        \r\n        bool isEligible = isEligibleForClaim();\r\n        require(isEligible == true,\"Not eligible for claim.\");\r\n        \r\n        uint256 contractBalance = IERC20(AGV_address).balanceOf(address(this));\r\n        \r\n        address _address = _msgSender();\r\n        \r\n        uint256 _transferAmount  = ( investors[_address].lockedAgv*claimPercentage)/10000;\r\n        \r\n        require(contractBalance >= _transferAmount,\" Insufficient AGV token balance.\");\r\n        require(investors[_address].isTokenGenerated == true,\"Token not generated.\");\r\n        \r\n        if(investors[_address].claimCounter == vestingDuration-1){\r\n            _transferAmount = investors[_address].balance;\r\n        }\r\n       \r\n        transferAGV(_address,_transferAmount);\r\n        investors[_address].previousClaimTime = block.timestamp;\r\n        investors[_address].releasedAgv += _transferAmount;\r\n        investors[_address].claimCounter++;\r\n        investors[_address].balance = investors[_address].lockedAgv - investors[_address].releasedAgv; \r\n        totalRelease += _transferAmount;\r\n       \r\n        emit Claim(address(this),_address,_transferAmount);\r\n       \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAgvAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAgv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseInvestorAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAgv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAgv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tokenGenerated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenGenerateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAgv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAgv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCounter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTokenGenerated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEligibleForClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_res\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenGenerateEventStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVestingTimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"modifyTokenGenerateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"modifyVestingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"modifyVestingTimeStartFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAgv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AGVSeed","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ff7f9f7b271a01d6471fa2521cd2b7673e4346f38851450e2cd2705ee06b4796"}]}