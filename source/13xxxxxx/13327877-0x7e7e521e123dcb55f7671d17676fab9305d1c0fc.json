{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/Helper.sol\r\n\r\n\r\n// pragma solidity >=0.8.6 <0.9.0;\r\n\r\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\n\r\nlibrary Helper {\r\n  function safeApprove(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::safeApprove: approve failed'\r\n    );\r\n  }\r\n\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::safeTransfer: transfer failed'\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::transferFrom: transferFrom failed'\r\n    );\r\n  }\r\n\r\n  function safeTransferETH(address to, uint256 value) internal {\r\n    (bool success, ) = to.call{value: value}(new bytes(0));\r\n    require(success, 'Helper::safeTransferETH: ETH transfer failed');\r\n  }\r\n\r\n  function verifyCallResult(\r\n      bool success,\r\n      bytes memory returndata,\r\n      string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Root file: contracts/DePayRouterV1ApproveAndCallContractAddressAmountBoolean01.sol\r\n\r\n\r\npragma solidity >=0.8.6 <0.9.0;\r\npragma abicoder v2;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import 'contracts/libraries/Helper.sol';\r\n\r\ncontract DePayRouterV1ApproveAndCallContractAddressAmountBoolean01 {\r\n\r\n  // Address representating NATIVE currency\r\n  address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  // Indicates that this plugin requires delegate call\r\n  bool public immutable delegate = true;\r\n  \r\n  // Call another smart contract to deposit an amount for a given address while making sure the amount passed to the contract is approved.\r\n  //\r\n  // Approves the amount at index 1 of amounts (amounts[1])\r\n  // for the token at the last position of path (path[path.length-1])\r\n  // to be used by the smart contract at index 1 of addresses (addresses[1]).\r\n  // \r\n  // Afterwards, calls the smart contract at index 1 of addresses (addresses[1]),\r\n  // passing the address at index 0 of addresses (addresses[0])\r\n  // and passing the amount at index 1 of amounts (amounts[1])\r\n  // to the method with the signature provided in data at index 0 (data[0]).\r\n  function execute(\r\n    address[] calldata path,\r\n    uint[] calldata amounts,\r\n    address[] calldata addresses,\r\n    string[] calldata data\r\n  ) external payable returns(bool) {\r\n\r\n    // Approve the amount to be passed to the smart contract be called.\r\n    if(path[path.length-1] != NATIVE) {\r\n      Helper.safeApprove(\r\n        path[path.length-1],\r\n        addresses[1],\r\n        amounts[1]\r\n      );\r\n    }\r\n\r\n    // Call the smart contract which is receiver of the payment.\r\n    bytes memory returnData;\r\n    bool success;\r\n    if(path[path.length-1] == NATIVE) {\r\n      // Make sure to send the NATIVE along with the call in case of sending NATIVE.\r\n      (success, returnData) = addresses[1].call{value: amounts[1]}(\r\n        abi.encodeWithSignature(\r\n          data[0],\r\n          addresses[0],\r\n          amounts[1],\r\n          keccak256(bytes(data[1])) == keccak256(bytes(\"true\"))\r\n        )\r\n      );\r\n    } else {\r\n      (success, returnData) = addresses[1].call(\r\n        abi.encodeWithSignature(\r\n          data[0],\r\n          addresses[0],\r\n          amounts[1],\r\n          keccak256(bytes(data[1])) == keccak256(bytes(\"true\"))\r\n        )\r\n      );\r\n    }\r\n\r\n    Helper.verifyCallResult(success, returnData, \"Calling smart contract payment receiver failed!\");\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"DePayRouterV1ApproveAndCallContractAddressAmountBoolean01","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee5680359fa85671a1102a7a0a4d237676d7543e87d945fc1e03e02b23737272"}]}