{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/jobs/v2/TendV2Keep3rJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./V2Keep3rPublicJob.sol\\\";\\n\\ncontract TendV2Keep3rJob is V2Keep3rPublicJob {\\n    constructor(\\n        address _mechanicsRegistry,\\n        address _yOracle,\\n        address _keep3r,\\n        address _bond,\\n        uint256 _minBond,\\n        uint256 _earned,\\n        uint256 _age,\\n        bool _onlyEOA,\\n        address _v2Keeper,\\n        uint256 _workCooldown\\n    )\\n        V2Keep3rPublicJob(_mechanicsRegistry, _yOracle, _keep3r, _bond, _minBond, _earned, _age, _onlyEOA, _v2Keeper, _workCooldown)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    function workable(address _strategy) external view override returns (bool) {\\n        return _workable(_strategy);\\n    }\\n\\n    function _workable(address _strategy) internal view override returns (bool) {\\n        if (!super._workable(_strategy)) return false;\\n        return IBaseStrategy(_strategy).tendTrigger(_getCallCosts(_strategy));\\n    }\\n\\n    function _work(address _strategy) internal override {\\n        lastWorkAt[_strategy] = block.timestamp;\\n        V2Keeper.tend(_strategy);\\n    }\\n\\n    // Keep3r actions\\n    function work(address _strategy) external override notPaused onlyKeeper(msg.sender) returns (uint256 _credits) {\\n        _credits = _workInternal(_strategy);\\n        _paysKeeperAmount(msg.sender, _credits);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/jobs/v2/V2Keep3rPublicJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./V2Keep3rJob.sol\\\";\\n\\nimport \\\"../../interfaces/jobs/v2/IV2Keep3rPublicJob.sol\\\";\\n\\nabstract contract V2Keep3rPublicJob is V2Keep3rJob, IV2Keep3rPublicJob {\\n    constructor(\\n        address _mechanicsRegistry,\\n        address _yOracle,\\n        address _keep3r,\\n        address _bond,\\n        uint256 _minBond,\\n        uint256 _earned,\\n        uint256 _age,\\n        bool _onlyEOA,\\n        address _v2Keeper,\\n        uint256 _workCooldown\\n    ) V2Keep3rJob(_mechanicsRegistry, _yOracle, _keep3r, _bond, _minBond, _earned, _age, _onlyEOA, _v2Keeper, _workCooldown) {}\\n\\n    // Mechanics keeper bypass\\n    function forceWork(address _strategy) external override onlyGovernorOrMechanic {\\n        _forceWork(_strategy);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/jobs/v2/V2Keep3rJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@lbertenasco/contract-utils/contracts/abstract/MachineryReady.sol\\\";\\nimport \\\"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1Helper.sol\\\";\\nimport \\\"@lbertenasco/contract-utils/contracts/keep3r/Keep3rAbstract.sol\\\";\\n\\nimport \\\"../../interfaces/jobs/v2/IV2Keeper.sol\\\";\\nimport \\\"../../interfaces/jobs/v2/IV2Keep3rJob.sol\\\";\\n\\nimport \\\"../../interfaces/yearn/IBaseStrategy.sol\\\";\\nimport \\\"../../interfaces/oracle/IYOracle.sol\\\";\\nimport \\\"../../interfaces/keep3r/IChainLinkFeed.sol\\\";\\n\\nabstract contract V2Keep3rJob is MachineryReady, Keep3r, IV2Keep3rJob {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public override fastGasOracle = 0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\\n\\n    uint256 public constant PRECISION = 1_000;\\n    uint256 public constant MAX_REWARD_MULTIPLIER = 1 * PRECISION; // 1x max reward multiplier\\n    uint256 public override rewardMultiplier = 950;\\n\\n    IV2Keeper public V2Keeper;\\n\\n    address public yOracle;\\n\\n    EnumerableSet.AddressSet internal _availableStrategies;\\n\\n    mapping(address => uint256) public requiredAmount;\\n    mapping(address => uint256) public lastWorkAt;\\n\\n    // custom cost oracle calcs\\n    mapping(address => address) public costToken;\\n    mapping(address => address) public costPair;\\n\\n    uint256 public workCooldown;\\n\\n    constructor(\\n        address _mechanicsRegistry,\\n        address _yOracle,\\n        address _keep3r,\\n        address _bond,\\n        uint256 _minBond,\\n        uint256 _earned,\\n        uint256 _age,\\n        bool _onlyEOA,\\n        address _v2Keeper,\\n        uint256 _workCooldown\\n    ) MachineryReady(_mechanicsRegistry) Keep3r(_keep3r) {\\n        _setYOracle(_yOracle);\\n        _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\\n        V2Keeper = IV2Keeper(_v2Keeper);\\n        if (_workCooldown > 0) _setWorkCooldown(_workCooldown);\\n    }\\n\\n    // Keep3r Setters\\n    function setKeep3r(address _keep3r) external override onlyGovernor {\\n        _setKeep3r(_keep3r);\\n    }\\n\\n    function setV2Keep3r(address _v2Keeper) external override onlyGovernor {\\n        V2Keeper = IV2Keeper(_v2Keeper);\\n    }\\n\\n    function setYOracle(address _yOracle) external override onlyGovernor {\\n        _setYOracle(_yOracle);\\n    }\\n\\n    function _setYOracle(address _yOracle) internal {\\n        yOracle = _yOracle;\\n    }\\n\\n    function setFastGasOracle(address _fastGasOracle) external override onlyGovernor {\\n        require(_fastGasOracle != address(0), \\\"V2Keep3rJob::set-fas-gas-oracle:not-zero-address\\\");\\n        fastGasOracle = _fastGasOracle;\\n    }\\n\\n    function setKeep3rRequirements(\\n        address _bond,\\n        uint256 _minBond,\\n        uint256 _earned,\\n        uint256 _age,\\n        bool _onlyEOA\\n    ) external override onlyGovernor {\\n        _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\\n    }\\n\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external override onlyGovernorOrMechanic {\\n        _setRewardMultiplier(_rewardMultiplier);\\n        emit SetRewardMultiplier(_rewardMultiplier);\\n    }\\n\\n    function _setRewardMultiplier(uint256 _rewardMultiplier) internal {\\n        require(_rewardMultiplier <= MAX_REWARD_MULTIPLIER, \\\"V2Keep3rJob::set-reward-multiplier:multiplier-exceeds-max\\\");\\n        rewardMultiplier = _rewardMultiplier;\\n    }\\n\\n    // Setters\\n    function setWorkCooldown(uint256 _workCooldown) external override onlyGovernorOrMechanic {\\n        _setWorkCooldown(_workCooldown);\\n    }\\n\\n    function _setWorkCooldown(uint256 _workCooldown) internal {\\n        require(_workCooldown > 0, \\\"V2Keep3rJob::set-work-cooldown:should-not-be-zero\\\");\\n        workCooldown = _workCooldown;\\n    }\\n\\n    // Governor\\n    function addStrategies(\\n        address[] calldata _strategies,\\n        uint256[] calldata _requiredAmounts,\\n        address[] calldata _costTokens,\\n        address[] calldata _costPairs\\n    ) external override onlyGovernorOrMechanic {\\n        require(_strategies.length == _requiredAmounts.length, \\\"V2Keep3rJob::add-strategies:strategies-required-amounts-different-length\\\");\\n        for (uint256 i; i < _strategies.length; i++) {\\n            _addStrategy(_strategies[i], _requiredAmounts[i], _costTokens[i], _costPairs[i]);\\n        }\\n    }\\n\\n    function addStrategy(\\n        address _strategy,\\n        uint256 _requiredAmount,\\n        address _costToken,\\n        address _costPair\\n    ) external override onlyGovernorOrMechanic {\\n        _addStrategy(_strategy, _requiredAmount, _costToken, _costPair);\\n    }\\n\\n    function _addStrategy(\\n        address _strategy,\\n        uint256 _requiredAmount,\\n        address _costToken,\\n        address _costPair\\n    ) internal {\\n        require(!_availableStrategies.contains(_strategy), \\\"V2Keep3rJob::add-strategy:strategy-already-added\\\");\\n        _setRequiredAmount(_strategy, _requiredAmount);\\n        _setCostTokenAndPair(_strategy, _costToken, _costPair);\\n        emit StrategyAdded(_strategy, _requiredAmount);\\n        _availableStrategies.add(_strategy);\\n    }\\n\\n    function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts)\\n        external\\n        override\\n        onlyGovernorOrMechanic\\n    {\\n        require(_strategies.length == _requiredAmounts.length, \\\"V2Keep3rJob::update-strategies:strategies-required-amounts-different-length\\\");\\n        for (uint256 i; i < _strategies.length; i++) {\\n            _updateRequiredAmount(_strategies[i], _requiredAmounts[i]);\\n        }\\n    }\\n\\n    function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external override onlyGovernorOrMechanic {\\n        _updateRequiredAmount(_strategy, _requiredAmount);\\n    }\\n\\n    function _updateRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\\n        require(_availableStrategies.contains(_strategy), \\\"V2Keep3rJob::update-required-amount:strategy-not-added\\\");\\n        _setRequiredAmount(_strategy, _requiredAmount);\\n        emit StrategyModified(_strategy, _requiredAmount);\\n    }\\n\\n    function updateCostTokenAndPair(\\n        address _strategy,\\n        address _costToken,\\n        address _costPair\\n    ) external override onlyGovernorOrMechanic {\\n        _updateCostTokenAndPair(_strategy, _costToken, _costPair);\\n    }\\n\\n    function _updateCostTokenAndPair(\\n        address _strategy,\\n        address _costToken,\\n        address _costPair\\n    ) internal {\\n        require(_availableStrategies.contains(_strategy), \\\"V2Keep3rJob::update-required-amount:strategy-not-added\\\");\\n        _setCostTokenAndPair(_strategy, _costToken, _costPair);\\n    }\\n\\n    function removeStrategy(address _strategy) external override onlyGovernorOrMechanic {\\n        require(_availableStrategies.contains(_strategy), \\\"V2Keep3rJob::remove-strategy:strategy-not-added\\\");\\n        delete requiredAmount[_strategy];\\n        _availableStrategies.remove(_strategy);\\n        emit StrategyRemoved(_strategy);\\n    }\\n\\n    function _setRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\\n        requiredAmount[_strategy] = _requiredAmount;\\n    }\\n\\n    function _setCostTokenAndPair(\\n        address _strategy,\\n        address _costToken,\\n        address _costPair\\n    ) internal {\\n        costToken[_strategy] = _costToken;\\n        costPair[_strategy] = _costPair;\\n    }\\n\\n    // Getters\\n    function strategies() public view override returns (address[] memory _strategies) {\\n        _strategies = new address[](_availableStrategies.length());\\n        for (uint256 i; i < _availableStrategies.length(); i++) {\\n            _strategies[i] = _availableStrategies.at(i);\\n        }\\n    }\\n\\n    // Keeper view actions (internal)\\n    function _workable(address _strategy) internal view virtual returns (bool) {\\n        require(_availableStrategies.contains(_strategy), \\\"V2Keep3rJob::workable:strategy-not-added\\\");\\n        if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\\n        return false;\\n    }\\n\\n    // Get eth costs\\n    function _getCallCosts(address _strategy) internal view returns (uint256 _callCost) {\\n        if (requiredAmount[_strategy] == 0) return 0;\\n        uint256 _ethCost = requiredAmount[_strategy] * uint256(IChainLinkFeed(fastGasOracle).latestAnswer());\\n        if (costToken[_strategy] == address(0)) return _ethCost;\\n        return IYOracle(yOracle).getAmountOut(costPair[_strategy], WETH, _ethCost, costToken[_strategy]);\\n    }\\n\\n    // Keep3r actions\\n    function _workInternal(address _strategy) internal returns (uint256 _credits) {\\n        uint256 _initialGas = gasleft();\\n        require(_workable(_strategy), \\\"V2Keep3rJob::work:not-workable\\\");\\n\\n        _work(_strategy);\\n\\n        _credits = _calculateCredits(_initialGas);\\n\\n        emit Worked(_strategy, msg.sender, _credits);\\n    }\\n\\n    function _calculateCredits(uint256 _initialGas) internal view returns (uint256 _credits) {\\n        // Gets default credits from KP3R_Helper and applies job reward multiplier\\n        return (_getQuoteLimitFor(msg.sender, _initialGas) * rewardMultiplier) / PRECISION;\\n    }\\n\\n    function _forceWork(address _strategy) internal {\\n        _work(_strategy);\\n        emit ForceWorked(_strategy);\\n    }\\n\\n    function _work(address _strategy) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/jobs/v2/IV2Keep3rPublicJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IV2Keep3rPublicJob {}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/abstract/MachineryReady.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './UtilsReady.sol';\\nimport '../utils/Machinery.sol';\\n\\nabstract\\ncontract MachineryReady is UtilsReady, Machinery {\\n\\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) UtilsReady() {\\n  }\\n\\n  // Machinery: restricted-access\\n  function setMechanicsRegistry(address _mechanicsRegistry) external override onlyGovernor {\\n    _setMechanicsRegistry(_mechanicsRegistry);\\n  }\\n\\n  // Machinery: modifiers\\n  modifier onlyGovernorOrMechanic() {\\n    require(isGovernor(msg.sender) || isMechanic(msg.sender), \\\"Machinery::onlyGovernorOrMechanic:invalid-msg-sender\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IKeep3rV1Helper {\\n    function quote(uint256 eth) external view returns (uint256);\\n\\n    function getFastGas() external view returns (uint256);\\n\\n    function bonds(address keeper) external view returns (uint256);\\n\\n    function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\\n\\n    function getQuoteLimitFor(address origin, uint256 gasUsed) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/keep3r/Keep3rAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/keep3r/IKeep3rV1.sol';\\nimport '../../interfaces/keep3r/IKeep3r.sol';\\n\\nabstract\\ncontract Keep3r is IKeep3r {\\n\\n  IKeep3rV1 internal _Keep3r;\\n  address public override bond;\\n  uint256 public override minBond;\\n  uint256 public override earned;\\n  uint256 public override age;\\n  bool public override onlyEOA;\\n\\n  constructor(address _keep3r) {\\n    _setKeep3r(_keep3r);\\n  }\\n\\n  // Setters\\n  function _setKeep3r(address _keep3r) internal {\\n    _Keep3r = IKeep3rV1(_keep3r);\\n    emit Keep3rSet(_keep3r);\\n  }\\n\\n  function _setKeep3rRequirements(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA) internal {\\n    bond = _bond;\\n    minBond = _minBond;\\n    earned = _earned;\\n    age = _age;\\n    onlyEOA = _onlyEOA;\\n    emit Keep3rRequirementsSet(_bond, _minBond, _earned, _age, _onlyEOA);\\n  }\\n\\n  // Modifiers\\n  // Only checks if caller is a valid keeper, payment should be handled manually\\n  modifier onlyKeeper(address _keeper) {\\n    _isKeeper(_keeper);\\n    _;\\n  }\\n\\n  // view\\n  function keep3r() external view override returns (address _keep3r) {\\n    return address(_Keep3r);\\n  }\\n\\n  // handles default payment after execution\\n  modifier paysKeeper(address _keeper) {\\n    _;\\n    _paysKeeper(_keeper);\\n  }\\n\\n  // Internal helpers\\n  function _isKeeper(address _keeper) internal {\\n    if (onlyEOA) require(_keeper == tx.origin, \\\"keep3r::isKeeper:keeper-is-not-eoa\\\");\\n    if (minBond == 0 && earned == 0 && age == 0) {\\n      // If no custom keeper requirements are set, just evaluate if sender is a registered keeper\\n      require(_Keep3r.isKeeper(_keeper), \\\"keep3r::isKeeper:keeper-is-not-registered\\\");\\n    } else {\\n      if (bond == address(0)) {\\n        // Checks for min KP3R, earned and age.\\n        require(_Keep3r.isMinKeeper(_keeper, minBond, earned, age), \\\"keep3r::isKeeper:keeper-not-min-requirements\\\");\\n      } else {\\n        // Checks for min custom-bond, earned and age.\\n        require(_Keep3r.isBondedKeeper(_keeper, bond, minBond, earned, age), \\\"keep3r::isKeeper:keeper-not-custom-min-requirements\\\");\\n      }\\n    }\\n  }\\n\\n  function _getQuoteLimitFor(address _for, uint256 _initialGas) internal view returns (uint256 _credits) {\\n    return _Keep3r.KPRH().getQuoteLimitFor(_for, _initialGas - gasleft());\\n  }\\n\\n  // pays in bonded KP3R after execution\\n  function _paysKeeper(address _keeper) internal {\\n    _Keep3r.worked(_keeper);\\n  }\\n  // pays _amount in KP3R after execution\\n  function _paysKeeperInTokens(address _keeper, uint256 _amount) internal {\\n    _Keep3r.receipt(address(_Keep3r), _keeper, _amount);\\n  }\\n  // pays _amount in bonded KP3R after execution\\n  function _paysKeeperAmount(address _keeper, uint256 _amount) internal {\\n    _Keep3r.workReceipt(_keeper, _amount);\\n  }\\n  // pays _amount in _credit after execution\\n  function _paysKeeperCredit(address _credit, address _keeper, uint256 _amount) internal {\\n    _Keep3r.receipt(_credit, _keeper, _amount);\\n  }\\n  // pays _amount in ETH after execution\\n  function _paysKeeperEth(address _keeper, uint256 _amount) internal {\\n    _Keep3r.receiptETH(_keeper, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/jobs/v2/IV2Keeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IV2Keeper {\\n    // Getters\\n    function jobs() external view returns (address[] memory);\\n\\n    event JobAdded(address _job);\\n    event JobRemoved(address _job);\\n\\n    // Setters\\n    function addJobs(address[] calldata _jobs) external;\\n\\n    function addJob(address _job) external;\\n\\n    function removeJob(address _job) external;\\n\\n    // Jobs actions\\n    function tend(address _strategy) external;\\n\\n    function harvest(address _strategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/jobs/v2/IV2Keep3rJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\nimport \\\"../IKeep3rJob.sol\\\";\\n\\ninterface IV2Keep3rJob is IKeep3rJob {\\n    // event Keep3rSet(address keep3r);\\n    event Keep3rHelperSet(address keep3rHelper);\\n    event SlidingOracleSet(address slidingOracle);\\n\\n    // Setters\\n    event StrategyAdded(address _strategy, uint256 _requiredAmount);\\n    event StrategyModified(address _strategy, uint256 _requiredAmount);\\n    event StrategyRemoved(address _strategy);\\n\\n    // Actions by Keeper\\n    event Worked(address _strategy, address _keeper, uint256 _credits);\\n\\n    // Actions forced by governor\\n    event ForceWorked(address _strategy);\\n\\n    // Getters\\n    function fastGasOracle() external view returns (address _fastGasOracle);\\n\\n    function strategies() external view returns (address[] memory);\\n\\n    function workable(address _strategy) external view returns (bool);\\n\\n    // Setters\\n    function setV2Keep3r(address _v2Keeper) external;\\n\\n    function setYOracle(address _v2Keeper) external;\\n\\n    function setFastGasOracle(address _fastGasOracle) external;\\n\\n    function setWorkCooldown(uint256 _workCooldown) external;\\n\\n    function addStrategies(\\n        address[] calldata _strategy,\\n        uint256[] calldata _requiredAmount,\\n        address[] calldata _costTokens,\\n        address[] calldata _costPairs\\n    ) external;\\n\\n    function addStrategy(\\n        address _strategy,\\n        uint256 _requiredAmount,\\n        address _costToken,\\n        address _costPair\\n    ) external;\\n\\n    function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external;\\n\\n    function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external;\\n\\n    function updateCostTokenAndPair(\\n        address _strategy,\\n        address _costToken,\\n        address _costPair\\n    ) external;\\n\\n    function removeStrategy(address _strategy) external;\\n\\n    // Keeper actions\\n    function work(address _strategy) external returns (uint256 _credits);\\n\\n    // Mechanics keeper bypass\\n    function forceWork(address _strategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/yearn/IBaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBaseStrategy {\\n    function vault() external view returns (address _vault);\\n\\n    function strategist() external view returns (address _strategist);\\n\\n    function rewards() external view returns (address _rewards);\\n\\n    function keeper() external view returns (address _keeper);\\n\\n    function want() external view returns (address _want);\\n\\n    function name() external view returns (string memory _name);\\n\\n    function profitFactor() external view returns (uint256 _profitFactor);\\n\\n    function maxReportDelay() external view returns (uint256 _maxReportDelay);\\n\\n    // custom view\\n    function crv() external view returns (address _crv);\\n\\n    // Setters\\n    function setStrategist(address _strategist) external;\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function setRewards(address _rewards) external;\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function setBorrowCollateralizationRatio(uint256 _c) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/oracle/IYOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IYOracle {\\n    function defaultOracle() external view returns (address _defaultOracle);\\n\\n    function pairOracle(address _pair) external view returns (address _oracle);\\n\\n    function setPairOracle(address _pair, address _oracle) external;\\n\\n    function setDefaultOracle(address _oracle) external;\\n\\n    function getAmountOut(\\n        address _pair,\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut\\n    ) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/keep3r/IChainLinkFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IChainLinkFeed {\\n    function latestAnswer() external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/abstract/UtilsReady.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../utils/Governable.sol';\\nimport '../utils/CollectableDust.sol';\\nimport '../utils/Pausable.sol';\\n\\nabstract\\ncontract UtilsReady is Governable, CollectableDust, Pausable {\\n\\n  constructor() Governable(msg.sender) { }\\n\\n  // Governable: restricted-access\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Collectable Dust: restricted-access\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override virtual onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n\\n  // Pausable: restricted-access\\n  function pause(bool _paused) external override onlyGovernor {\\n    _pause(_paused);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/Machinery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport '../../interfaces/utils/IMachinery.sol';\\nimport '../../interfaces/mechanics/IMechanicsRegistry.sol';\\n\\ncontract Machinery is IMachinery {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMechanicsRegistry internal _mechanicsRegistry;\\n\\n  constructor(address __mechanicsRegistry) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  modifier onlyMechanic {\\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\\n    _;\\n  }\\n\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // View helpers\\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\\n    return address(_mechanicsRegistry);\\n  }\\n\\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\\n    return _mechanicsRegistry.isMechanic(_mechanic);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external virtual override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../interfaces/utils/ICollectableDust.sol';\\n\\nabstract\\ncontract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/utils/IPausable.sol';\\n\\nabstract\\ncontract Pausable is IPausable {\\n  bool public paused;\\n\\n  constructor() {}\\n  \\n  modifier notPaused() {\\n    require(!paused, 'paused');\\n    _;\\n  }\\n\\n  function _pause(bool _paused) internal {\\n    require(paused != _paused, 'no-change');\\n    paused = _paused;\\n    emit Paused(_paused);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/ICollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(address _to, address _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPausable {\\n  event Paused(bool _paused);\\n\\n  function pause(bool _paused) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/IMachinery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IMachinery {\\n    // View helpers\\n    function mechanicsRegistry() external view returns (address _mechanicsRegistry);\\n    function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n    // Setters\\n    function setMechanicsRegistry(address _mechanicsRegistry) external;\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/mechanics/IMechanicsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IMechanicsRegistry {\\n    event MechanicAdded(address _mechanic);\\n    event MechanicRemoved(address _mechanic);\\n\\n    function addMechanic(address _mechanic) external;\\n\\n    function removeMechanic(address _mechanic) external;\\n\\n    function mechanics() external view returns (address[] memory _mechanicsList);\\n\\n    function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IKeep3rV1Helper.sol\\\";\\n\\ninterface IKeep3rV1 is IERC20 {\\n    function name() external returns (string memory);\\n    function KPRH() external view returns (IKeep3rV1Helper);\\n\\n    function isKeeper(address _keeper) external returns (bool);\\n    function isMinKeeper(address _keeper, uint256 _minBond, uint256 _earned, uint256 _age) external returns (bool);\\n    function isBondedKeeper(address _keeper, address _bond, uint256 _minBond, uint256 _earned, uint256 _age) external returns (bool);\\n    function addKPRCredit(address _job, uint256 _amount) external;\\n    function addJob(address _job) external;\\n    function removeJob(address _job) external;\\n    function addVotes(address voter, uint256 amount) external;\\n    function removeVotes(address voter, uint256 amount) external;\\n    function revoke(address keeper) external;\\n\\n    function worked(address _keeper) external;\\n    function workReceipt(address _keeper, uint256 _amount) external;\\n    function receipt(address credit, address _keeper, uint256 _amount) external;\\n    function receiptETH(address _keeper, uint256 _amount) external;\\n\\n    function addLiquidityToJob(address liquidity, address job, uint amount) external;\\n    function applyCreditToJob(address provider, address liquidity, address job) external;\\n    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external;\\n    function removeLiquidityFromJob(address liquidity, address job) external;\\n\\n    function jobs(address _job) external view returns (bool);\\n    function jobList(uint256 _index) external view returns (address _job);\\n    function credits(address _job, address _credit) external view returns (uint256 _amount);\\n\\n    function liquidityAccepted(address _liquidity) external view returns (bool);\\n\\n    function liquidityProvided(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityApplied(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityAmount(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    \\n    function liquidityUnbonding(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityAmountsUnbonding(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n\\n    function bond(address bonding, uint256 amount) external;\\n    function activate(address bonding) external;\\n    function unbond(address bonding, uint256 amount) external;\\n    function withdraw(address bonding) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\ninterface IKeep3r {\\n    event Keep3rSet(address _keep3r);\\n    event Keep3rRequirementsSet(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA);\\n    \\n    function keep3r() external view returns (address _keep3r);\\n    function bond() external view returns (address _bond);\\n    function minBond() external view returns (uint256 _minBond);\\n    function earned() external view returns (uint256 _earned);\\n    function age() external view returns (uint256 _age);\\n    function onlyEOA() external view returns (bool _onlyEOA);\\n\\n    function setKeep3r(address _keep3r) external;\\n    function setKeep3rRequirements(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/jobs/IKeep3rJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IKeep3rJob {\\n    event SetRewardMultiplier(uint256 _rewardMultiplier);\\n\\n    function rewardMultiplier() external view returns (uint256 _rewardMultiplier);\\n\\n    function setRewardMultiplier(uint256 _rewardMultiplier) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"ForceWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keep3rHelper\",\"type\":\"address\"}],\"name\":\"Keep3rHelperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"Keep3rRequirementsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"Keep3rSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"SetRewardMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slidingOracle\",\"type\":\"address\"}],\"name\":\"SlidingOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2Keeper\",\"outputs\":[{\"internalType\":\"contract IV2Keeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_requiredAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_costTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_costPairs\",\"type\":\"address[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_costToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_costPair\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"age\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"costPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"costToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastGasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"forceWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanic\",\"type\":\"address\"}],\"name\":\"isMechanic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMechanic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWorkAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mechanicsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fastGasOracle\",\"type\":\"address\"}],\"name\":\"setFastGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"setKeep3rRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"}],\"name\":\"setMechanicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"}],\"name\":\"setV2Keep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"}],\"name\":\"setWorkCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yOracle\",\"type\":\"address\"}],\"name\":\"setYOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_costToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_costPair\",\"type\":\"address\"}],\"name\":\"updateCostTokenAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"updateRequiredAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_requiredAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRequiredAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TendV2Keep3rJob","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e8d5a85758fe98f7dce251cad552691d49b499bb000000000000000000000000d1f5aee3f025d2f4e42dd74dec17d5faa4707cbc0000000000000000000000001ceb5cb57c4d4e2b2433641b95dd330a33185a440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000736d7e3c5a6cb2ce3b764300140abf476f6cfccf000000000000000000000000000000000000000000000000000000000000012c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}