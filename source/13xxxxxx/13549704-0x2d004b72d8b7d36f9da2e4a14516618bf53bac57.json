{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Furballs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./editions/IFurballEdition.sol\\\";\\nimport \\\"./engines/ILootEngine.sol\\\";\\nimport \\\"./engines/EngineA.sol\\\";\\nimport \\\"./utils/FurLib.sol\\\";\\nimport \\\"./utils/FurDefs.sol\\\";\\nimport \\\"./utils/FurProxy.sol\\\";\\nimport \\\"./utils/Moderated.sol\\\";\\nimport \\\"./utils/Governance.sol\\\";\\nimport \\\"./Fur.sol\\\";\\nimport \\\"./Furgreement.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title Furballs\\n/// @author LFG Gaming LLC\\n/// @notice Mints Furballs on the Ethereum blockchain\\n/// @dev https://furballs.com/contract\\ncontract Furballs is ERC721Enumerable, Moderated {\\n  Fur public fur;\\n\\n  IFurballEdition[] public editions;\\n\\n  ILootEngine public engine;\\n\\n  Governance public governance;\\n\\n  Furgreement public furgreement;\\n\\n  // tokenId => furball data\\n  mapping(uint256 => FurLib.Furball) public furballs;\\n\\n  // tokenId => all rewards assigned to that Furball\\n  mapping(uint256 => FurLib.Rewards) public collect;\\n\\n  // The amount of time over which FUR/EXP is accrued (usually 3600=>1hour); used with test servers\\n  uint256 public intervalDuration;\\n\\n  // When play/collect runs, returns rewards\\n  event Collection(uint256 tokenId, uint256 responseId);\\n\\n  // Inventory change event\\n  event Inventory(uint256 tokenId, uint128 lootId, uint16 dropped);\\n\\n  constructor(uint256 interval) ERC721(\\\"Furballs\\\", \\\"FBL\\\") {\\n    intervalDuration = interval;\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Public transactions\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice Mints a new furball from the current edition (if there are any remaining)\\n  /// @dev Limits and fees are set by IFurballEdition\\n  function mint(address[] memory to, uint8 editionIndex, address actor) external {\\n    (address sender, uint8 permissions) = _approvedSender(actor);\\n    require(to.length == 1 || permissions >= FurLib.PERMISSION_MODERATOR, \\\"MULT\\\");\\n\\n    for (uint8 i=0; i<to.length; i++) {\\n      fur.purchaseMint(sender, permissions, to[i], editions[editionIndex]);\\n      _spawn(to[i], editionIndex, 0);\\n    }\\n  }\\n\\n  /// @notice Feeds the furball a snack\\n  /// @dev Delegates logic to fur\\n  function feed(FurLib.Feeding[] memory feedings, address actor) external {\\n    (address sender, uint8 permissions) = _approvedSender(actor);\\n    uint256 len = feedings.length;\\n\\n    for (uint256 i=0; i<len; i++) {\\n      fur.purchaseSnack(sender, permissions, feedings[i].tokenId, feedings[i].snackId, feedings[i].count);\\n    }\\n  }\\n\\n  /// @notice Begins exploration mode with the given furballs\\n  /// @dev Multiple furballs accepted at once to reduce gas fees\\n  /// @param tokenIds The furballs which should start exploring\\n  /// @param zone The explore zone (otherwize, zero for battle mode)\\n  function playMany(uint256[] memory tokenIds, uint32 zone, address actor) external {\\n    (address sender, uint8 permissions) = _approvedSender(actor);\\n\\n    for (uint256 i=0; i<tokenIds.length; i++) {\\n      // Run reward collection\\n      _collect(tokenIds[i], sender, permissions);\\n\\n      // Set new zone (if allowed; enterZone may throw)\\n      furballs[tokenIds[i]].zone = uint32(engine.enterZone(tokenIds[i], zone, tokenIds));\\n    }\\n  }\\n\\n  /// @notice Re-dropping loot allows players to pay $FUR to re-roll an inventory slot\\n  /// @param tokenId The furball in question\\n  /// @param lootId The lootId in its inventory to re-roll\\n  function upgrade(\\n    uint256 tokenId, uint128 lootId, uint8 chances, address actor\\n  ) external {\\n    // Attempt upgrade (random chance).\\n    (address sender, uint8 permissions) = _approvedSender(actor);\\n    uint128 up = fur.purchaseUpgrade(_baseModifiers(tokenId), sender, permissions, tokenId, lootId, chances);\\n    if (up != 0) {\\n      _drop(tokenId, lootId, 1);\\n      _pickup(tokenId, up);\\n    }\\n  }\\n\\n  /// @notice The LootEngine can directly send loot to a furball!\\n  /// @dev This allows for gameplay expansion, i.e., new game modes\\n  /// @param tokenId The furball to gain the loot\\n  /// @param lootId The loot ID being sent\\n  function pickup(uint256 tokenId, uint128 lootId) external gameAdmin {\\n    _pickup(tokenId, lootId);\\n  }\\n\\n  /// @notice The LootEngine can cause a furball to drop loot!\\n  /// @dev This allows for gameplay expansion, i.e., new game modes\\n  /// @param tokenId The furball\\n  /// @param lootId The item to drop\\n  /// @param count the number of that item to drop\\n  function drop(uint256 tokenId, uint128 lootId, uint8 count) external gameAdmin {\\n    _drop(tokenId, lootId, count);\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Internal\\n  // -----------------------------------------------------------------------------------------------\\n\\n  function _slotNum(uint256 tokenId, uint128 lootId) internal view returns(uint256) {\\n    for (uint8 i=0; i<furballs[tokenId].inventory.length; i++) {\\n      if (furballs[tokenId].inventory[i] / 256 == lootId) {\\n        return i + 1;\\n      }\\n    }\\n    return 0;\\n  }\\n\\n  /// @notice Remove an inventory item from a furball\\n  function _drop(uint256 tokenId, uint128 lootId, uint8 count) internal {\\n    uint256 slot = _slotNum(tokenId, lootId);\\n    require(slot > 0 && slot <= uint32(furballs[tokenId].inventory.length), \\\"SLOT\\\");\\n\\n    slot -= 1;\\n    uint8 stackSize = uint8(furballs[tokenId].inventory[slot] % 0x100);\\n\\n    if (count == 0 || count >= stackSize) {\\n      // Drop entire stack\\n      uint16 len = uint16(furballs[tokenId].inventory.length);\\n      if (len > 1) {\\n        furballs[tokenId].inventory[slot] = furballs[tokenId].inventory[len - 1];\\n      }\\n      furballs[tokenId].inventory.pop();\\n      count = stackSize;\\n    } else {\\n      stackSize -= count;\\n      furballs[tokenId].inventory[slot] = uint256(lootId) * 0x100 + stackSize;\\n    }\\n\\n    furballs[tokenId].weight -= count * engine.weightOf(lootId);\\n    emit Inventory(tokenId, lootId, count);\\n  }\\n\\n  /// @notice Internal implementation of adding a single known loot item to a Furball\\n  function _pickup(uint256 tokenId, uint128 lootId) internal {\\n    require(lootId > 0, \\\"LOOT\\\");\\n    uint256 slotNum = _slotNum(tokenId, lootId);\\n    uint8 stackSize = 1;\\n    if (slotNum == 0) {\\n      furballs[tokenId].inventory.push(uint256(lootId) * 0x100 + stackSize);\\n    } else {\\n      stackSize += uint8(furballs[tokenId].inventory[slotNum - 1] % 0x100);\\n      require(stackSize < 0x100, \\\"STACK\\\");\\n      furballs[tokenId].inventory[slotNum - 1] = uint256(lootId) * 0x100 + stackSize;\\n    }\\n\\n    furballs[tokenId].weight += engine.weightOf(lootId);\\n    emit Inventory(tokenId, lootId, 0);\\n  }\\n\\n  /// @notice Calculates full reward modifier stack for a furball in a zone.\\n  function _rewardModifiers(\\n    FurLib.Furball memory fb, uint256 tokenId, address ownerContext, uint256 snackData\\n  ) internal view returns(FurLib.RewardModifiers memory reward) {\\n    uint16 energy = uint16(FurLib.extractBytes(snackData, FurLib.SNACK_BYTE_ENERGY, 2));\\n    uint16 happiness = uint16(FurLib.extractBytes(snackData, FurLib.SNACK_BYTE_HAPPINESS, 2));\\n\\n    bool context = ownerContext != address(0);\\n    uint32 editionIndex = uint32(tokenId % 0x100);\\n\\n    reward = FurLib.RewardModifiers(\\n      uint16(100 + fb.rarity),\\n      uint16(100 + fb.rarity - (editionIndex < 4 ? (editionIndex * 20) : 80)),\\n      uint16(100),\\n      happiness,\\n      energy,\\n      context ? fb.zone : 0\\n    );\\n\\n    // Engine will consider inventory and team size in zone (17k)\\n    return engine.modifyReward(\\n      fb,\\n      editions[editionIndex].modifyReward(reward, tokenId),\\n      governance.getAccount(ownerContext),\\n      context\\n    );\\n  }\\n\\n  /// @notice Common version of _rewardModifiers which excludes contextual data\\n  function _baseModifiers(uint256 tokenId) internal view returns(FurLib.RewardModifiers memory) {\\n    return _rewardModifiers(furballs[tokenId], tokenId, address(0), 0);\\n  }\\n\\n  /// @notice Ends the current explore/battle and dispenses rewards\\n  /// @param tokenId The furball\\n  function _collect(uint256 tokenId, address sender, uint8 permissions) internal {\\n    FurLib.Furball memory furball = furballs[tokenId];\\n    address owner = ownerOf(tokenId);\\n\\n    // The engine is allowed to force furballs into exploration mode\\n    // This allows it to end a battle early, which will be necessary in PvP\\n    require(owner == sender || permissions >= FurLib.PERMISSION_ADMIN, \\\"OWN\\\");\\n\\n    // Scale duration to the time the edition has been live\\n    if (furball.last == 0) {\\n      uint64 launchedAt = uint64(editions[tokenId % 0x100].liveAt());\\n      require(launchedAt > 0 && launchedAt < uint64(block.timestamp), \\\"PRE\\\");\\n      furball.last = furball.birth > launchedAt ? furball.birth : launchedAt;\\n    }\\n\\n    // Calculate modifiers to be used with this collection\\n    FurLib.RewardModifiers memory mods =\\n      _rewardModifiers(furball, tokenId, owner, fur.cleanSnacks(tokenId));\\n\\n    // Reset the collection for this furball\\n    uint32 duration = uint32(uint64(block.timestamp) - furball.last);\\n    collect[tokenId].fur = 0;\\n    collect[tokenId].experience = 0;\\n    collect[tokenId].levels = 0;\\n\\n    if (mods.zone >= 0x10000) {\\n      // Battle zones earn FUR and assign to the owner\\n      uint32 f = uint32(_calculateReward(duration, FurLib.FUR_PER_INTERVAL, mods.furPercent));\\n      if (f > 0) {\\n        fur.earn(owner, f);\\n        collect[tokenId].fur = f;\\n      }\\n    } else {\\n      // Explore zones earn EXP...\\n      uint32 exp = uint32(_calculateReward(duration, FurLib.EXP_PER_INTERVAL, mods.expPercent));\\n      (uint32 totalExp, uint16 levels) = engine.onExperience(furballs[tokenId], owner, exp);\\n\\n      collect[tokenId].experience = exp;\\n      collect[tokenId].levels = levels;\\n\\n      furballs[tokenId].level += levels;\\n      furballs[tokenId].experience = totalExp;\\n    }\\n\\n    // Generate loot and assign to furball\\n    uint32 interval = uint32(intervalDuration);\\n    uint128 lootId = engine.dropLoot(duration / interval, mods);\\n    collect[tokenId].loot = lootId;\\n    if (lootId > 0) {\\n      _pickup(tokenId, lootId);\\n    }\\n\\n    // Timestamp the last interaction for next cycle.\\n    furballs[tokenId].last = uint64(block.timestamp);\\n\\n    // Emit the reward ID for frontend\\n    uint32 moves = furball.moves + 1;\\n    furballs[tokenId].moves = moves;\\n    emit Collection(tokenId, moves);\\n  }\\n\\n  /// @notice Mints a new furball\\n  /// @dev Recursive function; generates randomization seed for the edition\\n  /// @param to The recipient of the furball\\n  /// @param nonce A recursive counter to prevent infinite loops\\n  function _spawn(address to, uint8 editionIndex, uint8 nonce) internal {\\n    require(nonce < 10, \\\"SUPPLY\\\");\\n    require(editionIndex < editions.length, \\\"ED\\\");\\n\\n    IFurballEdition edition = editions[editionIndex];\\n\\n    // Generate a random furball tokenId; if it fails to be unique, recurse!\\n    (uint256 tokenId, uint16 rarity) = edition.spawn();\\n    tokenId += editionIndex;\\n    if (_exists(tokenId)) return _spawn(to, editionIndex, nonce + 1);\\n\\n    // Ensure that this wallet has not exceeded its per-edition mint-cap\\n    uint32 owned = edition.minted(to);\\n    require(owned < edition.maxMintable(to), \\\"LIMIT\\\");\\n\\n    // Check the current edition's constraints (caller should have checked costs)\\n    uint16 cnt = edition.count();\\n    require(cnt < edition.maxCount(), \\\"MAX\\\");\\n\\n    // Initialize the memory struct that represents the furball\\n    furballs[tokenId].number = uint32(totalSupply() + 1);\\n    furballs[tokenId].count = cnt;\\n    furballs[tokenId].rarity = rarity;\\n    furballs[tokenId].birth = uint64(block.timestamp);\\n\\n    // Finally, mint the token and increment internal counters\\n    _mint(to, tokenId);\\n\\n    edition.addCount(to, 1);\\n  }\\n\\n  /// @notice Happens each time a furball changes wallets\\n  /// @dev Keeps track of the furball timestamp\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    // Update internal data states\\n    furballs[tokenId].trade = uint64(block.timestamp);\\n\\n    // Delegate other logic to the engine\\n    engine.onTrade(furballs[tokenId], from, to);\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Game Engine & Moderation\\n  // -----------------------------------------------------------------------------------------------\\n\\n  function stats(uint256 tokenId, bool contextual) public view returns(FurLib.FurballStats memory) {\\n    // Base stats are calculated without team size so this doesn't effect public metadata\\n    FurLib.Furball memory furball = furballs[tokenId];\\n    FurLib.RewardModifiers memory mods =\\n      _rewardModifiers(\\n        furball,\\n        tokenId,\\n        contextual ? ownerOf(tokenId) : address(0),\\n        contextual ? fur.snackEffects(tokenId) : 0\\n      );\\n\\n    return FurLib.FurballStats(\\n      uint16(_calculateReward(intervalDuration, FurLib.EXP_PER_INTERVAL, mods.expPercent)),\\n      uint16(_calculateReward(intervalDuration, FurLib.FUR_PER_INTERVAL, mods.furPercent)),\\n      mods,\\n      furball,\\n      fur.snacks(tokenId)\\n    );\\n  }\\n\\n  /// @notice This utility function is useful because it force-casts arguments to uint256\\n  function _calculateReward(\\n    uint256 duration, uint256 perInterval, uint256 percentBoost\\n  ) internal view returns(uint256) {\\n    uint256 interval = intervalDuration;\\n    return (duration * percentBoost * perInterval) / (100 * interval);\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Public Views/Accessors (for outside world)\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice Provides the OpenSea storefront\\n  /// @dev see https://docs.opensea.io/docs/contract-level-metadata\\n  function contractURI() public view returns (string memory) {\\n    return governance.metaURI();\\n  }\\n\\n  /// @notice Provides the on-chain Furball asset\\n  /// @dev see https://docs.opensea.io/docs/metadata-standards\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId));\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", FurLib.encode(abi.encodePacked(\\n      editions[tokenId % 0x100].tokenMetadata(\\n        engine.attributesMetadata(tokenId),\\n        tokenId,\\n        furballs[tokenId].number\\n      )\\n    ))));\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // OpenSea Proxy\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice Whitelisting the proxy registies for secondary market transactions\\n  /// @dev See OpenSea ERC721Tradable\\n  function isApprovedForAll(address owner, address operator)\\n      override\\n      public\\n      view\\n      returns (bool)\\n  {\\n    return engine.canProxyTrades(owner, operator) || super.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @notice This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n  /// @dev See OpenSea ContentMixin\\n  function _msgSender()\\n    internal\\n    override\\n    view\\n    returns (address sender)\\n  {\\n    if (msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n        sender := and(\\n          mload(add(array, index)),\\n          0xffffffffffffffffffffffffffffffffffffffff\\n        )\\n      }\\n    } else {\\n      sender = msg.sender;\\n    }\\n    return sender;\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Configuration / Admin\\n  // -----------------------------------------------------------------------------------------------\\n\\n  function setFur(address furAddress) external onlyAdmin {\\n    fur = Fur(furAddress);\\n  }\\n\\n  function setFurgreement(address furgAddress) external onlyAdmin {\\n    furgreement = Furgreement(furgAddress);\\n  }\\n\\n  function setGovernance(address addr) public onlyAdmin {\\n    governance = Governance(payable(addr));\\n  }\\n\\n  function setEngine(address addr) public onlyAdmin {\\n    engine = ILootEngine(addr);\\n  }\\n\\n  function addEdition(address addr, uint8 idx) public onlyAdmin {\\n    if (idx >= editions.length) {\\n      editions.push(IFurballEdition(addr));\\n    } else {\\n      editions[idx] = IFurballEdition(addr);\\n    }\\n  }\\n\\n  function _isReady() internal view returns(bool) {\\n    return address(engine) != address(0) && editions.length > 0\\n      && address(fur) != address(0) && address(governance) != address(0);\\n  }\\n\\n  /// @notice Handles auth of msg.sender against cheating and/or banning.\\n  /// @dev Pass nonzero sender to act as a proxy against the furgreement\\n  function _approvedSender(address sender) internal view returns (address, uint8) {\\n    // No sender (for gameplay) is approved until the necessary parts are online\\n    require(_isReady(), \\\"!RDY\\\");\\n\\n    if (sender != address(0) && sender != msg.sender) {\\n      // Only the furgreement may request a proxied sender.\\n      require(msg.sender == address(furgreement), \\\"PROXY\\\");\\n    } else {\\n      // Zero input triggers sender calculation from msg args\\n      sender = _msgSender();\\n    }\\n\\n    // All senders are validated thru engine logic.\\n    uint8 permissions = uint8(engine.approveSender(sender));\\n\\n    // Zero-permissions indicate unauthorized.\\n    require(permissions > 0, \\\"PLR\\\");\\n\\n    return (sender, permissions);\\n  }\\n\\n  modifier gameAdmin() {\\n    (address sender, uint8 permissions) = _approvedSender(address(0));\\n    require(permissions >= FurLib.PERMISSION_ADMIN, \\\"GAME\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/editions/IFurballEdition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utils/FurLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title IFurballEdition\\n/// @author LFG Gaming LLC\\n/// @notice Interface for a single edition within Furballs\\ninterface IFurballEdition is IERC165 {\\n  function index() external view returns(uint8);\\n  function count() external view returns(uint16);\\n  function maxCount() external view returns (uint16); // total max count in this edition\\n  function addCount(address to, uint16 amount) external returns(bool);\\n\\n  function liveAt() external view returns(uint64);\\n  function minted(address addr) external view returns(uint16);\\n  function maxMintable(address addr) external view returns(uint16);\\n  function maxAdoptable() external view returns (uint16); // how many can be adopted, out of the max?\\n  function purchaseFur() external view returns(uint256); // amount of FUR for buying\\n\\n  function spawn() external returns (uint256, uint16);\\n\\n  /// @notice Calculates the effects of the loot in a Furball's inventory\\n  function modifyReward(\\n    FurLib.RewardModifiers memory modifiers, uint256 tokenId\\n  ) external view returns(FurLib.RewardModifiers memory);\\n\\n  /// @notice Renders a JSON object for tokenURI\\n  function tokenMetadata(\\n    bytes memory attributes, uint256 tokenId, uint256 number\\n  ) external view returns(bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/engines/ILootEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../editions/IFurballEdition.sol\\\";\\nimport \\\"../utils/FurLib.sol\\\";\\n\\n/// @title ILootEngine\\n/// @author LFG Gaming LLC\\n/// @notice The loot engine is patchable by replacing the Furballs' engine with a new version\\ninterface ILootEngine is IERC165 {\\n  /// @notice When a Furball comes back from exploration, potentially give it some loot.\\n  function dropLoot(uint32 intervals, FurLib.RewardModifiers memory mods) external returns(uint128);\\n\\n  /// @notice Players can pay to re-roll their loot drop on a Furball\\n  function upgradeLoot(\\n    FurLib.RewardModifiers memory modifiers,\\n    address owner,\\n    uint128 lootId,\\n    uint8 chances\\n  ) external returns(uint128);\\n\\n  /// @notice Some zones may have preconditions\\n  function enterZone(uint256 tokenId, uint32 zone, uint256[] memory team) external returns(uint256);\\n\\n  /// @notice Calculates the effects of the loot in a Furball's inventory\\n  function modifyReward(\\n    FurLib.Furball memory furball,\\n    FurLib.RewardModifiers memory baseModifiers,\\n    FurLib.Account memory account,\\n    bool contextual\\n  ) external view returns(FurLib.RewardModifiers memory);\\n\\n  /// @notice Loot can have different weight to help prevent over-powering a furball\\n  function weightOf(uint128 lootId) external pure returns (uint16);\\n\\n  /// @notice JSON object for displaying metadata on OpenSea, etc.\\n  function attributesMetadata(uint256 tokenId) external view returns(bytes memory);\\n\\n  /// @notice Get a potential snack for the furball by its ID\\n  function getSnack(uint32 snack) external view returns(FurLib.Snack memory);\\n\\n  /// @notice Proxy registries are allowed to act as 3rd party trading platforms\\n  function canProxyTrades(address owner, address operator) external view returns(bool);\\n\\n  /// @notice Authorization mechanics are upgradeable to account for security patches\\n  function approveSender(address sender) external view returns(uint);\\n\\n  /// @notice Called when a Furball is traded to update delegate logic\\n  function onTrade(\\n    FurLib.Furball memory furball, address from, address to\\n  ) external;\\n\\n  /// @notice Handles experience gain during collection\\n  function onExperience(\\n    FurLib.Furball memory furball, address owner, uint32 experience\\n  ) external returns(uint32 totalExp, uint16 level);\\n\\n  /// @notice Gets called at the beginning of token render; could add underlaid artwork\\n  function render(uint256 tokenId) external view returns(string memory);\\n\\n  /// @notice The loot engine can add descriptions to furballs metadata\\n  function furballDescription(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/engines/EngineA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./LootEngine.sol\\\";\\n\\n/// @title EngineA\\n/// @author LFG Gaming LLC\\n/// @notice Concrete implementation of LootEngine\\ncontract EngineA is LootEngine {\\n  constructor(address furballs, address tradeProxy, address companyProxy)\\n    LootEngine(furballs, tradeProxy, companyProxy) { }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FurLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title FurLib\\n/// @author LFG Gaming LLC\\n/// @notice Utilities for Furballs\\n/// @dev Each of the structs are designed to fit within 256\\nlibrary FurLib {\\n  // Metadata about a wallet.\\n  struct Account {\\n    uint64 created;       // First time this account received a furball\\n    uint32 numFurballs;   // Number of furballs it currently holds\\n    uint32 maxFurballs;   // Max it has ever held\\n    uint16 maxLevel;      // Max level of any furball it currently holds\\n    uint16 reputation;    // Value assigned by moderators to boost standing\\n    uint16 standing;      // Computed current standing\\n    uint8 permissions;    // 0 = user, 1 = moderator, 2 = admin, 3 = owner\\n  }\\n\\n  // Key data structure given to clients for high-level furball access (furballs.stats)\\n  struct FurballStats {\\n    uint16 expRate;\\n    uint16 furRate;\\n    RewardModifiers modifiers;\\n    Furball definition;\\n    Snack[] snacks;\\n  }\\n\\n  // The response from a single play session indicating rewards\\n  struct Rewards {\\n    uint16 levels;\\n    uint32 experience;\\n    uint32 fur;\\n    uint128 loot;\\n  }\\n\\n  // Stored data structure in Furballs master contract which keeps track of mutable data\\n  struct Furball {\\n    uint32 number;        // Overall number, starting with 1\\n    uint16 count;         // Index within the collection\\n    uint16 rarity;        // Total rarity score for later boosts\\n    uint32 experience;    // EXP\\n    uint32 zone;          // When exploring, the zone number. Otherwise, battling.\\n    uint16 level;         // Current EXP => level; can change based on level up during collect\\n    uint16 weight;        // Total weight (number of items in inventory)\\n    uint64 birth;         // Timestamp of furball creation\\n    uint64 trade;         // Timestamp of last furball trading wallets\\n    uint64 last;          // Timestamp of last action (battle/explore)\\n    uint32 moves;         // The size of the collection array for this furball, which is move num.\\n    uint256[] inventory;  // IDs of items in inventory\\n  }\\n\\n  // A runtime-calculated set of properties that can affect Furball production during collect()\\n  struct RewardModifiers {\\n    uint16 expPercent;\\n    uint16 furPercent;\\n    uint16 luckPercent;\\n    uint16 happinessPoints;\\n    uint16 energyPoints;\\n    uint32 zone;\\n  }\\n\\n  // For sale via loot engine.\\n  struct Snack {\\n    uint32 snackId;       // Unique ID\\n    uint32 duration;      // How long it lasts, !expressed in intervals!\\n    uint16 furCost;       // How much FUR\\n    uint16 happiness;     // +happiness bost points\\n    uint16 energy;        // +energy boost points\\n    uint16 count;         // How many in stack?\\n    uint64 fed;           // When was it fed (if it is active)?\\n  }\\n\\n  // Input to the feed() function for multi-play\\n  struct Feeding {\\n    uint256 tokenId;\\n    uint32 snackId;\\n    uint16 count;\\n  }\\n\\n  uint32 public constant Max32 = type(uint32).max;\\n\\n  uint8 public constant PERMISSION_USER = 1;\\n  uint8 public constant PERMISSION_MODERATOR = 2;\\n  uint8 public constant PERMISSION_ADMIN = 4;\\n  uint8 public constant PERMISSION_OWNER = 5;\\n  uint8 public constant PERMISSION_CONTRACT = 0x10;\\n\\n  uint32 public constant EXP_PER_INTERVAL = 500;\\n  uint32 public constant FUR_PER_INTERVAL = 100;\\n\\n  uint8 public constant LOOT_BYTE_STAT = 1;\\n  uint8 public constant LOOT_BYTE_RARITY = 2;\\n\\n  uint8 public constant SNACK_BYTE_ENERGY = 0;\\n  uint8 public constant SNACK_BYTE_HAPPINESS = 2;\\n\\n  uint256 public constant OnePercent = 1000;\\n  uint256 public constant OneHundredPercent = 100000;\\n\\n  /// @notice Shortcut for equations that saves gas\\n  /// @dev The expression (0x100 ** byteNum) is expensive; this covers byte packing for editions.\\n  function bytePower(uint8 byteNum) internal pure returns (uint256) {\\n    if (byteNum == 0) return 0x1;\\n    if (byteNum == 1) return 0x100;\\n    if (byteNum == 2) return 0x10000;\\n    if (byteNum == 3) return 0x1000000;\\n    if (byteNum == 4) return 0x100000000;\\n    if (byteNum == 5) return 0x10000000000;\\n    if (byteNum == 6) return 0x1000000000000;\\n    if (byteNum == 7) return 0x100000000000000;\\n    if (byteNum == 8) return 0x10000000000000000;\\n    if (byteNum == 9) return 0x1000000000000000000;\\n    if (byteNum == 10) return 0x100000000000000000000;\\n    if (byteNum == 11) return 0x10000000000000000000000;\\n    if (byteNum == 12) return 0x1000000000000000000000000;\\n    return (0x100 ** byteNum);\\n  }\\n\\n  /// @notice Helper to get a number of bytes from a value\\n  function extractBytes(uint value, uint8 startAt, uint8 numBytes) internal pure returns (uint) {\\n    return (value / bytePower(startAt)) % bytePower(numBytes);\\n  }\\n\\n  /// @notice Converts exp into a sqrt-able number.\\n  function expToLevel(uint32 exp, uint32 maxExp) internal pure returns(uint256) {\\n    exp = exp > maxExp ? maxExp : exp;\\n    return sqrt(exp < 100 ? 0 : ((exp + exp - 100) / 100));\\n  }\\n\\n  /// @notice Simple square root function using the Babylonian method\\n  function sqrt(uint32 x) internal pure returns(uint256) {\\n    if (x < 1) return 0;\\n    if (x < 4) return 1;\\n    uint z = (x + 1) / 2;\\n    uint y = x;\\n    while (z < y) {\\n      y = z;\\n      z = (x / z + z) / 2;\\n    }\\n    return y;\\n  }\\n\\n  /// @notice Convert bytes into a hex str, e.g., an address str\\n  function bytesHex(bytes memory data) internal pure returns(string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(data.length * 2);\\n    for (uint i = 0; i < data.length; i++) {\\n        str[i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n        str[1 + i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint j = _i;\\n    uint len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint k = len;\\n    while (_i != 0) {\\n      k = k-1;\\n      uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      mstore(result, encodedLen)\\n      let tablePtr := add(table, 1)\\n\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n        let input := mload(dataPtr)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n          resultPtr,\\n          shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FurDefs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title FurLib\\n/// @author LFG Gaming LLC\\n/// @notice Public utility library around game-specific equations and constants\\nlibrary FurDefs {\\n  function rarityName(uint8 rarity) internal pure returns(string memory) {\\n    if (rarity == 0) return \\\"Common\\\";\\n    if (rarity == 1) return \\\"Elite\\\";\\n    if (rarity == 2) return \\\"Mythic\\\";\\n    if (rarity == 3) return \\\"Legendary\\\";\\n    return \\\"Ultimate\\\";\\n  }\\n\\n  function raritySuffix(uint8 rarity) internal pure returns(string memory) {\\n    return rarity == 0 ? \\\"\\\" : string(abi.encodePacked(\\\" (\\\", rarityName(rarity), \\\")\\\"));\\n  }\\n\\n  function renderPoints(uint64 ptr, bytes memory data) internal pure returns (uint64, bytes memory) {\\n    uint8 cnt = uint8(data[ptr]);\\n    ptr++;\\n    bytes memory points = \\\"\\\";\\n    for (uint256 i=0; i<cnt; i++) {\\n      uint16 x = uint8(data[ptr]) * 256 + uint8(data[ptr + 1]);\\n      uint16 y = uint8(data[ptr + 2]) * 256 + uint8(data[ptr + 3]);\\n      points = abi.encodePacked(points, FurLib.uint2str(x), ',', FurLib.uint2str(y), i == (cnt - 1) ? '': ' ');\\n      ptr += 4;\\n    }\\n    return (ptr, abi.encodePacked('points=\\\"', points, '\\\" '));\\n  }\\n\\n  function renderTransform(uint64 ptr, bytes memory data) internal pure returns (uint64, bytes memory) {\\n    uint8 len = uint8(data[ptr]);\\n    ptr++;\\n    bytes memory points = \\\"\\\";\\n    for (uint256 i=0; i<len; i++) {\\n      bytes memory point = \\\"\\\";\\n      (ptr, point) =  unpackFloat(ptr, data);\\n      points = i == (len - 1) ? abi.encodePacked(points, point) : abi.encodePacked(points, point, ' ');\\n    }\\n    return (ptr, abi.encodePacked('transform=\\\"matrix(', points, ')\\\" '));\\n  }\\n\\n  function renderDisplay(uint64 ptr, bytes memory data) internal pure returns (uint64, bytes memory) {\\n    string[2] memory vals = ['inline', 'none'];\\n    return (ptr + 1, abi.encodePacked('display=\\\"', vals[uint8(data[ptr])], '\\\" '));\\n  }\\n\\n  function renderFloat(uint64 ptr, bytes memory data) internal pure returns (uint64, bytes memory) {\\n    uint8 propType = uint8(data[ptr]);\\n    string[2] memory floatMap = ['opacity', 'offset'];\\n    bytes memory floatVal = \\\"\\\";\\n    (ptr, floatVal) =  unpackFloat(ptr + 1, data);\\n    return (ptr, abi.encodePacked(floatMap[propType], '=\\\"', floatVal,'\\\" '));\\n  }\\n\\n  function  unpackFloat(uint64 ptr, bytes memory data) internal pure returns(uint64, bytes memory) {\\n    uint8 decimals = uint8(data[ptr]);\\n    ptr++;\\n    if (decimals == 0) return (ptr, '0');\\n    uint8 hi = decimals / 16;\\n    uint16 wholeNum = 0;\\n    decimals = decimals % 16;\\n    if (hi >= 10) {\\n      wholeNum = uint16(uint8(data[ptr]) * 256 + uint8(data[ptr + 1]));\\n      ptr += 2;\\n    } else if (hi >= 8) {\\n      wholeNum = uint16(uint8(data[ptr]));\\n      ptr++;\\n    }\\n    if (decimals == 0) return (ptr, abi.encodePacked(hi % 2 == 1 ? '-' : '', FurLib.uint2str(wholeNum)));\\n\\n    bytes memory remainder = new bytes(decimals);\\n    for (uint8 d=0; d<decimals; d+=2) {\\n      remainder[d] = bytes1(48 + uint8(data[ptr] >> 4));\\n      if ((d + 1) < decimals) {\\n        remainder[d+1] = bytes1(48 + uint8(data[ptr] & 0x0f));\\n      }\\n      ptr++;\\n    }\\n    return (ptr, abi.encodePacked(hi % 2 == 1 ? '-' : '', FurLib.uint2str(wholeNum), '.', remainder));\\n  }\\n\\n  function renderInt(uint64 ptr, bytes memory data) internal pure returns (uint64, bytes memory) {\\n    uint8 propType = uint8(data[ptr]);\\n    string[13] memory intMap = ['cx', 'cy', 'x', 'x1', 'x2', 'y', 'y1', 'y2', 'r', 'rx', 'ry', 'width', 'height'];\\n    uint16 val = uint16(uint8(data[ptr + 1]) * 256) + uint8(data[ptr + 2]);\\n    if (val >= 0x8000) {\\n      return (ptr + 3, abi.encodePacked(intMap[propType], '=\\\"-', FurLib.uint2str(uint32(0x10000 - val)),'\\\" '));\\n    }\\n    return (ptr + 3, abi.encodePacked(intMap[propType], '=\\\"', FurLib.uint2str(val),'\\\" '));\\n  }\\n\\n  function renderStr(uint64 ptr, bytes memory data) internal pure returns(uint64, bytes memory) {\\n    string[4] memory strMap = ['id', 'enable-background', 'gradientUnits', 'gradientTransform'];\\n    uint8 t = uint8(data[ptr]);\\n    require(t < 4, 'STR');\\n    bytes memory str = \\\"\\\";\\n    (ptr, str) =  unpackStr(ptr + 1, data);\\n    return (ptr, abi.encodePacked(strMap[t], '=\\\"', str, '\\\" '));\\n  }\\n\\n  function unpackStr(uint64 ptr, bytes memory data) internal pure returns(uint64, bytes memory) {\\n    uint8 len = uint8(data[ptr]);\\n    bytes memory str = bytes(new string(len));\\n    for (uint8 i=0; i<len; i++) {\\n      str[i] = data[ptr + 1 + i];\\n    }\\n    return (ptr + 1 + len, str);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FurProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"../Furballs.sol\\\";\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title FurProxy\\n/// @author LFG Gaming LLC\\n/// @notice Manages a link from a sub-contract back to the master Furballs contract\\n/// @dev Provides permissions by means of proxy\\nabstract contract FurProxy {\\n  Furballs public furballs;\\n\\n  constructor(address furballsAddress) {\\n    furballs = Furballs(furballsAddress);\\n  }\\n\\n  /// @notice Allow upgrading contract links\\n  function setFurballs(address addr) external onlyOwner {\\n    furballs = Furballs(addr);\\n  }\\n\\n  /// @notice Proxied from permissions lookup\\n  modifier onlyOwner() {\\n    require(_permissions(msg.sender) >= FurLib.PERMISSION_OWNER, \\\"OWN\\\");\\n    _;\\n  }\\n\\n  /// @notice Permission modifier for moderators (covers owner)\\n  modifier gameAdmin() {\\n    require(_permissions(msg.sender) >= FurLib.PERMISSION_ADMIN, \\\"GAME\\\");\\n    _;\\n  }\\n\\n  /// @notice Permission modifier for moderators (covers admin)\\n  modifier gameModerators() {\\n    require(_permissions(msg.sender) >= FurLib.PERMISSION_MODERATOR, \\\"MOD\\\");\\n    _;\\n  }\\n\\n  modifier onlyFurballs() {\\n    require(msg.sender == address(furballs), \\\"FBL\\\");\\n    _;\\n  }\\n\\n  /// @notice Generalized permissions flag for a given address\\n  function _permissions(address addr) internal view returns (uint8) {\\n    // User permissions will return \\\"zero\\\" quickly if this didn't come from a wallet.\\n    uint8 permissions = _userPermissions(addr);\\n    if (permissions > 0) return permissions;\\n\\n    if (addr == address(furballs) ||\\n      addr == address(furballs.engine()) ||\\n      addr == address(furballs.furgreement()) ||\\n      addr == address(furballs.governance()) ||\\n      addr == address(furballs.fur())\\n    ) {\\n      return FurLib.PERMISSION_CONTRACT;\\n    }\\n    return 0;\\n  }\\n\\n  function _userPermissions(address addr) internal view returns (uint8) {\\n    // Invalid addresses include contracts an non-wallet interactions, which have no permissions\\n    if (addr == address(0)) return 0;\\n    uint256 size;\\n    assembly { size := extcodesize(addr) }\\n    if (addr != tx.origin || size != 0) return 0;\\n\\n    if (addr == furballs.owner()) return FurLib.PERMISSION_OWNER;\\n    if (furballs.isAdmin(addr)) return FurLib.PERMISSION_ADMIN;\\n    if (furballs.isModerator(addr)) return FurLib.PERMISSION_MODERATOR;\\n    return FurLib.PERMISSION_USER;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Moderated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Moderated\\n/// @author LFG Gaming LLC\\n/// @notice Administration & moderation permissions utilities\\nabstract contract Moderated is Ownable {\\n  mapping (address => bool) public admins;\\n  mapping (address => bool) public moderators;\\n\\n  function setAdmin(address addr, bool set) external onlyOwner {\\n    require(addr != address(0));\\n    admins[addr] = set;\\n  }\\n\\n  /// @notice Moderated ownables may not be renounced (only transferred)\\n  function renounceOwnership() public override onlyOwner {\\n    require(false, 'OWN');\\n  }\\n\\n  function setModerator(address mod, bool set) external onlyAdmin {\\n    require(mod != address(0));\\n    moderators[mod] = set;\\n  }\\n\\n  function isAdmin(address addr) public virtual view returns(bool) {\\n    return owner() == addr || admins[addr];\\n  }\\n\\n  function isModerator(address addr) public virtual view returns(bool) {\\n    return isAdmin(addr) || moderators[addr];\\n  }\\n\\n  modifier onlyModerators() {\\n    require(isModerator(msg.sender), 'MOD');\\n    _;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender), 'ADMIN');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Stakeholders.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title Governance\\n/// @author LFG Gaming LLC\\n/// @notice Meta-tracker for Furballs; looks at the ecosystem (metadata, wallet counts, etc.)\\n/// @dev Shares is an ERC20; stakeholders is a payable\\ncontract Governance is Stakeholders {\\n  /// @notice Where transaction fees are deposited\\n  address payable public treasury;\\n\\n  /// @notice How much is the transaction fee, in basis points?\\n  uint16 public transactionFee = 250;\\n\\n  /// @notice Used in contractURI for Furballs itself.\\n  string public metaName = \\\"Furballs.com (Official)\\\";\\n\\n  /// @notice Used in contractURI for Furballs itself.\\n  string public metaDescription =\\n    \\\"Furballs are entirely on-chain, with a full interactive gameplay experience at Furballs.com. \\\"\\n    \\\"There are 88 billion+ possible furball combinations in the first edition, each with their own special abilities\\\"\\n    \\\"... but only thousands minted per edition. Each edition has new artwork, game modes, and surprises.\\\";\\n\\n  // Tracks the MAX which are ever owned by a given address.\\n  mapping(address => FurLib.Account) private _account;\\n\\n  // List of all addresses which have ever owned a furball.\\n  address[] public accounts;\\n\\n  Community public community;\\n\\n  constructor(address furballsAddress) Stakeholders(furballsAddress) {\\n    treasury = payable(this);\\n  }\\n\\n  /// @notice Generic form of contractURI for on-chain packing.\\n  /// @dev Proxied from Furballs, but not called contractURI so as to not imply this ERC20 is tradeable.\\n  function metaURI() public view returns(string memory) {\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", FurLib.encode(abi.encodePacked(\\n      '{\\\"name\\\": \\\"', metaName,'\\\", \\\"description\\\": \\\"', metaDescription,'\\\"',\\n      ', \\\"external_link\\\": \\\"https://furballs.com\\\"',\\n      ', \\\"image\\\": \\\"https://furballs.com/images/pfp.png\\\"',\\n      ', \\\"seller_fee_basis_points\\\": ', FurLib.uint2str(transactionFee),\\n      ', \\\"fee_recipient\\\": \\\"0x', FurLib.bytesHex(abi.encodePacked(treasury)), '\\\"}'\\n    ))));\\n  }\\n\\n  /// @notice total count of accounts\\n  function numAccounts() external view returns(uint256) {\\n    return accounts.length;\\n  }\\n\\n  /// @notice Update metadata for main contractURI\\n  function setMeta(string memory nameVal, string memory descVal) external gameAdmin {\\n    metaName = nameVal;\\n    metaDescription = descVal;\\n  }\\n\\n  /// @notice The transaction fee can be adjusted\\n  function setTransactionFee(uint16 basisPoints) external gameAdmin {\\n    transactionFee = basisPoints;\\n  }\\n\\n  /// @notice The treasury can be changed in only rare circumstances.\\n  function setTreasury(address treasuryAddress) external onlyOwner {\\n    treasury = payable(treasuryAddress);\\n  }\\n\\n  /// @notice The treasury can be changed in only rare circumstances.\\n  function setCommunity(address communityAddress) external onlyOwner {\\n    community = Community(communityAddress);\\n  }\\n\\n  /// @notice public accessor updates permissions\\n  function getAccount(address addr) external view returns (FurLib.Account memory) {\\n    FurLib.Account memory acc = _account[addr];\\n    acc.permissions = _userPermissions(addr);\\n    return acc;\\n  }\\n\\n  /// @notice Public function allowing manual update of standings\\n  function updateStandings(address[] memory addrs) public {\\n    for (uint32 i=0; i<addrs.length; i++) {\\n      _updateStanding(addrs[i]);\\n    }\\n  }\\n\\n  /// @notice Moderators may assign reputation to accounts\\n  function setReputation(address addr, uint16 rep) external gameModerators {\\n    _account[addr].reputation = rep;\\n  }\\n\\n  /// @notice Tracks the max level an account has *obtained*\\n  function updateMaxLevel(address addr, uint16 level) external gameAdmin {\\n    if (_account[addr].maxLevel >= level) return;\\n    _account[addr].maxLevel = level;\\n    _updateStanding(addr);\\n  }\\n\\n  /// @notice Recompute max stats for the account.\\n  function updateAccount(address addr, uint256 numFurballs) external gameAdmin {\\n    FurLib.Account memory acc = _account[addr];\\n\\n    // Recompute account permissions for internal rewards\\n    uint8 permissions = _userPermissions(addr);\\n    if (permissions != acc.permissions) _account[addr].permissions = permissions;\\n\\n    // New account created?\\n    if (acc.created == 0) _account[addr].created = uint64(block.timestamp);\\n    if (acc.numFurballs != numFurballs) _account[addr].numFurballs = uint32(numFurballs);\\n\\n    // New max furballs?\\n    if (numFurballs > acc.maxFurballs) {\\n      if (acc.maxFurballs == 0) accounts.push(addr);\\n      _account[addr].maxFurballs = uint32(numFurballs);\\n    }\\n    _updateStanding(addr);\\n  }\\n\\n  /// @notice Re-computes the account's standing\\n  function _updateStanding(address addr) internal {\\n    uint256 standing = 0;\\n    FurLib.Account memory acc = _account[addr];\\n\\n    if (address(community) != address(0)) {\\n      // If community is patched in later...\\n      standing = community.update(acc, addr);\\n    } else {\\n      // Default computation of standing\\n      uint32 num = acc.numFurballs;\\n      if (num > 0) {\\n        standing = num * 10 + acc.maxLevel + acc.reputation;\\n      }\\n    }\\n\\n    _account[addr].standing = uint16(standing);\\n  }\\n}\"\r\n    },\r\n    \"contracts/Fur.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Furballs.sol\\\";\\nimport \\\"./editions/IFurballEdition.sol\\\";\\nimport \\\"./utils/FurProxy.sol\\\";\\n\\n/// @title Fur\\n/// @author LFG Gaming LLC\\n/// @notice Utility token for in-game rewards in Furballs\\ncontract Fur is ERC20, FurProxy {\\n  // n.b., this contract has some unusual tight-coupling between FUR and Furballs\\n  // Simple reason: this contract had more space, and is the only other allowed to know about ownership\\n  // Thus it serves as a sort of shop meta-store for Furballs\\n\\n  // tokenId => mapping of fed _snacks\\n  mapping(uint256 => FurLib.Snack[]) public _snacks;\\n\\n  // Internal cache for speed.\\n  uint256 private _intervalDuration;\\n\\n  constructor(address furballsAddress) FurProxy(furballsAddress) ERC20(\\\"Fur\\\", \\\"FUR\\\") {\\n    _intervalDuration = furballs.intervalDuration();\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Public\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice Returns the snacks currently applied to a Furball\\n  function snacks(uint256 tokenId) external view returns(FurLib.Snack[] memory) {\\n    return _snacks[tokenId];\\n  }\\n\\n  /// @notice Write-function to cleanup the snacks for a token (remove expired)\\n  function cleanSnacks(uint256 tokenId) public returns (uint256) {\\n    if (_snacks[tokenId].length == 0) return 0;\\n    return _cleanSnack(tokenId, 0);\\n  }\\n\\n  /// @notice The public accessor calculates the snack boosts\\n  function snackEffects(uint256 tokenId) external view returns(uint256) {\\n    uint16 hap = 0;\\n    uint16 en = 0;\\n\\n    for (uint32 i=0; i<_snacks[tokenId].length && i <= FurLib.Max32; i++) {\\n      uint256 remaining = _snackTimeRemaning(_snacks[tokenId][i]);\\n      if (remaining > 0) {\\n        hap += _snacks[tokenId][i].happiness;\\n        en += _snacks[tokenId][i].energy;\\n      }\\n    }\\n\\n    return (hap * 0x10000) + (en);\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // GameAdmin\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice FUR can only be minted by furballs doing battle.\\n  function earn(address addr, uint256 amount) external gameAdmin {\\n    if (amount == 0) return;\\n    _mint(addr, amount);\\n  }\\n\\n  /// @notice FUR can be spent by Furballs, or by the LootEngine (shopping, in the future)\\n  function spend(address addr, uint256 amount) external gameAdmin {\\n    _burn(addr, amount);\\n  }\\n\\n  /// @notice Pay any necessary fees to mint a furball\\n  /// @dev Delegated logic from Furballs;\\n  function purchaseMint(\\n    address from, uint8 permissions, address to, IFurballEdition edition\\n  ) external gameAdmin returns (bool) {\\n    require(edition.maxMintable(to) > 0, \\\"LIVE\\\");\\n    uint32 cnt = edition.count();\\n\\n    uint32 adoptable = edition.maxAdoptable();\\n    bool requiresPurchase = cnt >= adoptable;\\n\\n    if (requiresPurchase) {\\n      // _gift will throw if cannot gift or cannot afford cost\\n      _gift(from, permissions, to, edition.purchaseFur());\\n    }\\n    return requiresPurchase;\\n  }\\n\\n  /// @notice Attempts to purchase an upgrade for a loot item\\n  /// @dev Delegated logic from Furballs\\n  function purchaseUpgrade(\\n    FurLib.RewardModifiers memory modifiers,\\n    address from, uint8 permissions, uint256 tokenId, uint128 lootId, uint8 chances\\n  ) external gameAdmin returns(uint128) {\\n    address owner = furballs.ownerOf(tokenId);\\n\\n    // _gift will throw if cannot gift or cannot afford cost\\n    _gift(from, permissions, owner, 500 * uint256(chances));\\n\\n    return furballs.engine().upgradeLoot(modifiers, owner, lootId, chances);\\n  }\\n\\n  /// @notice Attempts to purchase a snack using templates found in the engine\\n  /// @dev Delegated logic from Furballs\\n  function purchaseSnack(\\n    address from, uint8 permissions, uint256 tokenId, uint32 snackId, uint16 count\\n  ) external gameAdmin {\\n    FurLib.Snack memory snack = furballs.engine().getSnack(snackId);\\n    require(snack.count > 0, \\\"COUNT\\\");\\n    require(snack.fed == 0, \\\"FED\\\");\\n\\n    // _gift will throw if cannot gift or cannot afford costQ\\n    _gift(from, permissions, furballs.ownerOf(tokenId), snack.furCost * count);\\n\\n    uint256 snackData = _cleanSnack(tokenId, snack.snackId);\\n    uint32 existingSnackNumber = uint32(snackData / 0x100000000);\\n    snack.count *= count;\\n    if (existingSnackNumber > 0) {\\n      // Adding count effectively adds duration to the active snack\\n      _snacks[tokenId][existingSnackNumber - 1].count += snack.count;\\n    } else {\\n      // A new snack just gets pushed onto the array\\n      snack.fed = uint64(block.timestamp);\\n      _snacks[tokenId].push(snack);\\n    }\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Internal\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice Both removes inactive _snacks from a token and searches for a specific snack Id index\\n  /// @dev Both at once saves some size & ensures that the _snacks are frequently cleaned.\\n  /// @return The index+1 of the existing snack\\n  function _cleanSnack(uint256 tokenId, uint32 snackId) internal returns(uint256) {\\n    uint32 ret = 0;\\n    uint16 hap = 0;\\n    uint16 en = 0;\\n    for (uint32 i=1; i<=_snacks[tokenId].length && i <= FurLib.Max32; i++) {\\n      FurLib.Snack memory snack = _snacks[tokenId][i-1];\\n      // Has the snack transitioned from active to inactive?\\n      if (_snackTimeRemaning(snack) == 0) {\\n        if (_snacks[tokenId].length > 1) {\\n          _snacks[tokenId][i-1] = _snacks[tokenId][_snacks[tokenId].length - 1];\\n        }\\n        _snacks[tokenId].pop();\\n        i--; // Repeat this idx\\n        continue;\\n      }\\n      hap += snack.happiness;\\n      en += snack.energy;\\n      if (snackId != 0 && snack.snackId == snackId) {\\n        ret = i;\\n      }\\n    }\\n    return (ret * 0x100000000) + (hap * 0x10000) + (en);\\n  }\\n\\n  /// @notice Check if the snack is active; returns 0 if inactive, otherwise the duration\\n  function _snackTimeRemaning(FurLib.Snack memory snack) internal view returns(uint256) {\\n    if (snack.fed == 0) return 0;\\n    uint256 expiresAt = uint256(snack.fed + (snack.count * snack.duration * _intervalDuration));\\n    return expiresAt <= block.timestamp ? 0 : (expiresAt - block.timestamp);\\n  }\\n\\n  /// @notice Enforces (requires) only admins/game may give gifts\\n  /// @param to Whom is this being sent to?\\n  /// @return If this is a gift or not.\\n  function _gift(address from, uint8 permissions, address to, uint256 furCost) internal returns(bool) {\\n    bool isGift = to != from;\\n\\n    // Only admins or game engine can send gifts (to != self), which are always free.\\n    require(!isGift || permissions >= FurLib.PERMISSION_ADMIN, \\\"GIFT\\\");\\n\\n    if (!isGift && furCost > 0) {\\n      _burn(from, furCost);\\n    }\\n\\n    return isGift;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Furgreement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Furballs.sol\\\";\\nimport \\\"./utils/FurProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/// @title Furballs\\n/// @author LFG Gaming LLC\\n/// @notice Has permissions to act as a proxy to the Furballs contract\\n/// @dev https://soliditydeveloper.com/ecrecover\\ncontract Furgreement is EIP712, FurProxy {\\n  mapping(address => uint256) private nonces;\\n\\n  address[] public addressQueue;\\n\\n  mapping(address => PlayMove) public pendingMoves;\\n\\n  // A \\\"move to be made\\\" in the sig queue\\n  struct PlayMove {\\n    uint32 zone;\\n    uint256[] tokenIds;\\n  }\\n\\n  constructor(address furballsAddress) EIP712(\\\"Furgreement\\\", \\\"1\\\") FurProxy(furballsAddress) { }\\n\\n  /// @notice Proxy playMany to Furballs contract\\n  function playFromSignature(\\n    bytes memory signature,\\n    address owner,\\n    PlayMove memory move,\\n    uint256 deadline\\n  ) external {\\n    bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n      keccak256(\\\"playMany(address owner,PlayMove memory move,uint256 nonce,uint256 deadline)\\\"),\\n      owner,\\n      move,\\n      nonces[owner],\\n      deadline\\n    )));\\n\\n    address signer = ECDSA.recover(digest, signature);\\n    require(signer == owner, \\\"playMany: invalid signature\\\");\\n    require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n    require(block.timestamp < deadline, \\\"playMany: signed transaction expired\\\");\\n    nonces[owner]++;\\n\\n    if (pendingMoves[owner].tokenIds.length == 0) {\\n      addressQueue.push(owner);\\n    }\\n    pendingMoves[owner] = move;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/engines/LootEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ILootEngine.sol\\\";\\nimport \\\"../editions/IFurballEdition.sol\\\";\\nimport \\\"../Furballs.sol\\\";\\nimport \\\"../utils/FurLib.sol\\\";\\nimport \\\"../utils/FurProxy.sol\\\";\\nimport \\\"../utils/ProxyRegistry.sol\\\";\\nimport \\\"../utils/Dice.sol\\\";\\nimport \\\"../utils/Governance.sol\\\";\\nimport \\\"../utils/MetaData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/// @title LootEngine\\n/// @author LFG Gaming LLC\\n/// @notice Base implementation of the loot engine\\nabstract contract LootEngine is ERC165, ILootEngine, Dice, FurProxy {\\n  ProxyRegistry private _proxies;\\n\\n  // An address which may act on behalf of the owner (company)\\n  address public companyWalletProxy;\\n\\n  // snackId to \\\"definition\\\" of the snack\\n  mapping(uint32 => FurLib.Snack) private _snacks;\\n\\n  uint32 maxExperience = 2010000;\\n\\n  constructor(\\n    address furballsAddress, address tradeProxy, address companyProxy\\n  ) FurProxy(furballsAddress) {\\n    _proxies = ProxyRegistry(tradeProxy);\\n    companyWalletProxy = companyProxy;\\n\\n    _defineSnack(0x100, 24    ,  250, 15, 0);\\n    _defineSnack(0x200, 24 * 3,  750, 20, 0);\\n    _defineSnack(0x300, 24 * 7, 1500, 25, 0);\\n  }\\n\\n  /// @notice Allows admins to configure the snack store.\\n  function setSnack(\\n    uint32 snackId, uint32 duration, uint16 furCost, uint16 hap, uint16 en\\n  ) external gameAdmin {\\n    _defineSnack(snackId, duration, furCost, hap, en);\\n  }\\n\\n  /// @notice Loot can have different weight to help prevent over-powering a furball\\n  /// @dev Each point of weight can be offset by a point of energy; the result reduces luck\\n  function weightOf(uint128 lootId) external virtual override pure returns (uint16) {\\n    return 2;\\n  }\\n\\n  /// @notice Gets called for Metadata\\n  function furballDescription(uint256 tokenId) external virtual override view returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /// @notice Gets called at the beginning of token render; could add underlaid artwork\\n  function render(uint256 tokenId) external virtual override view returns(string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /// @notice Checking the zone may use _require to detect preconditions.\\n  function enterZone(\\n    uint256 tokenId, uint32 zone, uint256[] memory team\\n  ) external virtual override returns(uint256) {\\n    // Nothing to see here.\\n    return uint256(zone);\\n  }\\n\\n  /// @notice Proxy logic is presently delegated to OpenSea-like contract\\n  function canProxyTrades(\\n    address owner, address operator\\n  ) external virtual override view onlyFurballs returns(bool) {\\n    if (address(_proxies) == address(0)) return false;\\n    return address(_proxies.proxies(owner)) == operator;\\n  }\\n\\n  /// @notice Allow a player to play? Throws on error if not.\\n  /// @dev This is core gameplay security logic\\n  function approveSender(address sender) external virtual override view onlyFurballs returns(uint) {\\n    if (sender == companyWalletProxy && sender != address(0)) return FurLib.PERMISSION_OWNER;\\n    return _permissions(sender);\\n  }\\n\\n  /// @notice Calculates new level for experience\\n  function onExperience(\\n    FurLib.Furball memory furball, address owner, uint32 experience\\n  ) external virtual override onlyFurballs returns(uint32 totalExp, uint16 levels) {\\n    if (experience == 0) return (0, 0);\\n\\n    uint32 has = furball.experience;\\n    uint32 max = maxExperience;\\n    totalExp = (experience < max && has < (max - experience)) ? (has + experience) : max;\\n\\n    // Calculate new level & check for level-up\\n    uint16 oldLevel = furball.level;\\n    uint16 level = uint16(FurLib.expToLevel(totalExp, max));\\n    levels = level > oldLevel ? (level - oldLevel) : 0;\\n\\n    if (levels > 0) {\\n      // Update community standing\\n      furballs.governance().updateMaxLevel(owner, level);\\n    }\\n\\n    return (totalExp, levels);\\n  }\\n\\n  /// @notice The trade hook can update balances or assign rewards\\n  function onTrade(\\n    FurLib.Furball memory furball, address from, address to\\n  ) external virtual override onlyFurballs {\\n    Governance gov = furballs.governance();\\n    if (from != address(0)) gov.updateAccount(from, furballs.balanceOf(from) - 1);\\n    if (to != address(0)) gov.updateAccount(to, furballs.balanceOf(to) + 1);\\n  }\\n\\n  /// @notice Attempt to upgrade a given piece of loot (item ID)\\n  function upgradeLoot(\\n    FurLib.RewardModifiers memory modifiers,\\n    address owner,\\n    uint128 lootId,\\n    uint8 chances\\n  ) external virtual override returns(uint128) {\\n    (uint8 rarity, uint8 stat) = _itemRarityStat(lootId);\\n\\n    require(rarity > 0 && rarity < 3, \\\"RARITY\\\");\\n    uint32 chance = (rarity == 1 ? 75 : 25) * uint32(chances) + uint32(modifiers.luckPercent * 10);\\n\\n    // Remove the 100% from loot, with 5% minimum chance\\n    chance = chance > 1050 ? (chance - 1000) : 50;\\n\\n    // Even with many chances, odds are capped:\\n    if (chance > 750) chance = 750;\\n\\n    uint32 threshold = (FurLib.Max32 / 1000) * (1000 - chance);\\n    uint256 rolled = (uint256(roll(modifiers.expPercent)));\\n\\n    return rolled < threshold ? 0 : _packLoot(rarity + 1, stat);\\n  }\\n\\n  /// @notice Main loot-drop functionm\\n  function dropLoot(\\n    uint32 intervals,\\n    FurLib.RewardModifiers memory modifiers\\n  ) external virtual override onlyFurballs returns(uint128) {\\n    // Only battles drop loot.\\n    if (modifiers.zone >= 0x10000) return 0;\\n\\n    (uint8 rarity, uint8 stat) = rollRarityStat(\\n      uint32((intervals * uint256(modifiers.luckPercent)) /100), 0);\\n    return _packLoot(rarity, stat);\\n  }\\n\\n  function _packLoot(uint16 rarity, uint16 stat) internal pure returns(uint128) {\\n    return rarity == 0 ? 0 : (uint16(rarity) * 0x10000) + (stat * 0x100);\\n  }\\n\\n  /// @notice Core loot drop rarity randomization\\n  /// @dev exposes an interface helpful for the unit tests, but is not otherwise called publicly\\n  function rollRarityStat(uint32 chance, uint32 seed) public returns(uint8, uint8) {\\n    if (chance == 0) return (0, 0);\\n    uint32 threshold = 4320;\\n    uint32 rolled = roll(seed) % threshold;\\n    uint8 stat = uint8(rolled % 2);\\n\\n    if (chance > threshold || rolled >= (threshold - chance)) return (3, stat);\\n    threshold -= chance;\\n    if (chance * 3 > threshold || rolled >= (threshold - chance * 3)) return (2, stat);\\n    threshold -= chance * 3;\\n    if (chance * 6 > threshold || rolled >= (threshold - chance * 6)) return (1, stat);\\n    return (0, stat);\\n  }\\n\\n  /// @notice The snack shop has IDs for each snack definition\\n  function getSnack(uint32 snackId) external view virtual override returns(FurLib.Snack memory) {\\n    return _snacks[snackId];\\n  }\\n\\n  /// @notice Layers on LootEngine modifiers to rewards\\n  function modifyReward(\\n    FurLib.Furball memory furball,\\n    FurLib.RewardModifiers memory modifiers,\\n    FurLib.Account memory account,\\n    bool contextual\\n  ) external virtual override view returns(FurLib.RewardModifiers memory) {\\n    // Use temporary variables instead of re-assignment\\n    uint16 energy = modifiers.energyPoints;\\n    uint16 weight = furball.weight;\\n    uint16 expPercent = modifiers.expPercent + modifiers.happinessPoints;\\n    uint16 luckPercent = modifiers.luckPercent + modifiers.happinessPoints;\\n    uint16 furPercent = modifiers.furPercent + _furBoost(furball.level) + energy;\\n\\n    // First add in the inventory\\n    for (uint256 i=0; i<furball.inventory.length; i++) {\\n      uint128 lootId = uint128(furball.inventory[i] / 0x100);\\n      uint32 stackSize = uint32(furball.inventory[i] % 0x100);\\n      (uint8 rarity, uint8 stat) = _itemRarityStat(lootId);\\n      uint16 boost = uint16(_lootRarityBoost(rarity) * stackSize);\\n      if (stat == 0) {\\n        expPercent += boost;\\n      } else {\\n        furPercent += boost;\\n      }\\n    }\\n\\n    // Team size boosts!\\n    uint256 teamSize = account.permissions < 2 ? account.numFurballs : 0;\\n    if (teamSize < 10 && teamSize > 1) {\\n      uint16 amt = uint16(2 * (teamSize - 1));\\n      expPercent += amt;\\n      furPercent += amt;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------\\n    // Negative impacts come last, so subtraction does not underflow.\\n    // ---------------------------------------------------------------------------------------------\\n\\n    // Penalties for whales.\\n    if (teamSize > 10) {\\n      uint16 amt = uint16(5 * (teamSize > 20 ? 10 : (teamSize - 10)));\\n      expPercent -= amt;\\n      furPercent -= amt;\\n    }\\n\\n    // Calculate weight & reduce luck\\n    if (weight > 0) {\\n      if (energy > 0) {\\n        weight = (energy >= weight) ? 0 : (weight - energy);\\n      }\\n      if (weight > 0) {\\n        luckPercent = weight >= luckPercent ? 0 : (luckPercent - weight);\\n      }\\n    }\\n\\n    modifiers.expPercent = expPercent;\\n    modifiers.furPercent = furPercent;\\n    modifiers.luckPercent = luckPercent;\\n\\n    return modifiers;\\n  }\\n\\n  /// @notice OpenSea metadata\\n  function attributesMetadata(\\n    uint256 tokenId\\n  ) external virtual override view returns(bytes memory) {\\n    FurLib.FurballStats memory stats = furballs.stats(tokenId, false);\\n    return abi.encodePacked(\\n      MetaData.traitValue(\\\"Level\\\", stats.definition.level),\\n      MetaData.traitValue(\\\"Rare Genes Boost\\\", stats.definition.rarity),\\n      MetaData.traitNumber(\\\"Edition\\\", (tokenId % 0x100) + 1),\\n      MetaData.traitNumber(\\\"Unique Loot Collected\\\", stats.definition.inventory.length),\\n      MetaData.traitBoost(\\\"EXP Boost\\\", stats.modifiers.expPercent),\\n      MetaData.traitBoost(\\\"FUR Boost\\\", stats.modifiers.furPercent),\\n      MetaData.traitDate(\\\"Acquired\\\", stats.definition.trade),\\n      MetaData.traitDate(\\\"Birthday\\\", stats.definition.birth)\\n    );\\n  }\\n\\n  /// @notice Store a new snack definition\\n  function _defineSnack(\\n    uint32 snackId, uint32 duration, uint16 furCost, uint16 hap, uint16 en\\n  ) internal {\\n    _snacks[snackId].snackId = snackId;\\n    _snacks[snackId].duration = duration;\\n    _snacks[snackId].furCost = furCost;\\n    _snacks[snackId].happiness = hap;\\n    _snacks[snackId].energy = en;\\n    _snacks[snackId].count = 1;\\n    _snacks[snackId].fed = 0;\\n  }\\n\\n  function _lootRarityBoost(uint16 rarity) internal pure returns (uint16) {\\n    if (rarity == 1) return 5;\\n    else if (rarity == 2) return 15;\\n    else if (rarity == 3) return 30;\\n    return 0;\\n  }\\n\\n  /// @notice Gets the FUR boost for a given level\\n  function _furBoost(uint16 level) internal pure returns (uint16) {\\n    if (level >= 200) return 581;\\n    if (level < 25) return (2 * level);\\n    if (level < 50) return (5000 + (level - 25) * 225) / 100;\\n    if (level < 75) return (10625 + (level - 50) * 250) / 100;\\n    if (level < 100) return (16875 + (level - 75) * 275) / 100;\\n    if (level < 125) return (23750 + (level - 100) * 300) / 100;\\n    if (level < 150) return (31250 + (level - 125) * 325) / 100;\\n    if (level < 175) return (39375 + (level - 150) * 350) / 100;\\n    return (48125 + (level - 175) * 375) / 100;\\n  }\\n\\n  /// @notice Unpacks an item, giving its rarity + stat\\n  function _itemRarityStat(uint128 lootId) internal pure returns (uint8, uint8) {\\n    return (\\n      uint8(FurLib.extractBytes(lootId, FurLib.LOOT_BYTE_RARITY, 1)),\\n      uint8(FurLib.extractBytes(lootId, FurLib.LOOT_BYTE_STAT, 1)));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(ILootEngine).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ProxyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// Contract doesn't really provide anything...\\ncontract OwnableDelegateProxy {}\\n\\n// Required format for OpenSea of proxy delegate store\\n// https://github.com/ProjectOpenSea/opensea-creatures/blob/f7257a043e82fae8251eec2bdde37a44fee474c4/contracts/ERC721Tradable.sol\\n// https://etherscan.io/address/0xa5409ec958c83c3f309868babaca7c86dcb077c1#code\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Dice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title Dice\\n/// @author LFG Gaming LLC\\n/// @notice Math utility functions that leverage storage and thus cannot be pure\\nabstract contract Dice {\\n  uint32 private LAST = 0; // Re-seed for PRNG\\n\\n  /// @notice A PRNG which re-seeds itself with block information & another PRNG\\n  /// @dev This is unit-tested with monobit (frequency) and longestRunOfOnes\\n  function roll(uint32 seed) public returns (uint32) {\\n    LAST = uint32(uint256(keccak256(\\n      abi.encodePacked(block.timestamp, block.basefee, _prng(LAST == 0 ? seed : LAST)))\\n    ));\\n    return LAST;\\n  }\\n\\n  /// @notice A PRNG based upon a Lehmer (Park-Miller) method\\n  /// @dev https://en.wikipedia.org/wiki/Lehmer_random_number_generator\\n  function _prng(uint32 seed) internal view returns (uint32) {\\n    uint64 nonce = seed == 0 ? uint32(block.timestamp) : seed;\\n    uint64 product = uint64(nonce) * 48271;\\n    uint32 x = uint32((product % 0x7fffffff) + (product >> 31));\\n    return (x & 0x7fffffff) + (x >> 31);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MetaData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title MetaData\\n/// @author LFG Gaming LLC\\n/// @notice Utilities for creating MetaData (e.g., OpenSea)\\nlibrary MetaData {\\n  function trait(string memory traitType, string memory value) internal pure returns (bytes memory) {\\n    return abi.encodePacked('{\\\"trait_type\\\": \\\"', traitType,'\\\", \\\"value\\\": \\\"', value, '\\\"}, ');\\n  }\\n\\n  function traitNumberDisplay(\\n    string memory traitType, string memory displayType, uint256 value\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(\\n      '{\\\"trait_type\\\": \\\"', traitType,\\n      bytes(displayType).length > 0 ? '\\\", \\\"display_type\\\": \\\"' : '', displayType,\\n      '\\\", \\\"value\\\": ', FurLib.uint2str(value), '}, '\\n    );\\n  }\\n\\n  function traitValue(string memory traitType, uint256 value) internal pure returns (bytes memory) {\\n    return traitNumberDisplay(traitType, \\\"\\\", value);\\n  }\\n\\n  /// @notice Convert a modifier percentage (120%) into a metadata +20% boost\\n  function traitBoost(\\n    string memory traitType, uint256 percent\\n  ) internal pure returns (bytes memory) {\\n    return traitNumberDisplay(traitType, \\\"boost_percentage\\\", percent > 100 ? (percent - 100) : 0);\\n  }\\n\\n  function traitNumber(\\n    string memory traitType, uint256 value\\n  ) internal pure returns (bytes memory) {\\n    return traitNumberDisplay(traitType, \\\"number\\\", value);\\n  }\\n\\n  function traitDate(\\n    string memory traitType, uint256 value\\n  ) internal pure returns (bytes memory) {\\n    return traitNumberDisplay(traitType, \\\"date\\\", value);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Stakeholders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FurProxy.sol\\\";\\nimport \\\"./FurLib.sol\\\";\\nimport \\\"../Furballs.sol\\\";\\n\\n/// @title Stakeholders\\n/// @author LFG Gaming LLC\\n/// @notice Tracks \\\"percent ownership\\\" of a smart contract, paying out according to schedule\\n/// @dev Acts as a treasury, receiving ETH funds and distributing them to stakeholders\\nabstract contract Stakeholders is FurProxy {\\n  // stakeholder values, in 1/1000th of a percent (received during withdrawls)\\n  mapping(address => uint64) public stakes;\\n\\n  // List of stakeholders.\\n  address[] public stakeholders;\\n\\n  // Where any remaining funds should be deposited. Defaults to contract creator.\\n  address payable public poolAddress;\\n\\n  constructor(address furballsAddress) FurProxy(furballsAddress) {\\n    poolAddress = payable(msg.sender);\\n  }\\n\\n  /// @notice Overflow pool of funds. Contains remaining funds from withdrawl.\\n  function setPool(address addr) public onlyOwner {\\n    poolAddress = payable(addr);\\n  }\\n\\n  /// @notice Changes payout percentages.\\n  function setStakeholder(address addr, uint64 stake) public onlyOwner {\\n    if (!_hasStakeholder(addr)) {\\n      stakeholders.push(addr);\\n    }\\n    uint64 percent = stake;\\n    for (uint256 i=0; i<stakeholders.length; i++) {\\n      if (stakeholders[i] != addr) {\\n        percent += stakes[stakeholders[i]];\\n      }\\n    }\\n\\n    require(percent <= FurLib.OneHundredPercent, \\\"Invalid stake (exceeds 100%)\\\");\\n    stakes[addr] = stake;\\n  }\\n\\n  /// @notice Empties this contract's balance, paying out to stakeholders.\\n  function withdraw() external gameAdmin {\\n    uint256 balance = address(this).balance;\\n    require(balance >= FurLib.OneHundredPercent, \\\"Insufficient balance\\\");\\n\\n    for (uint256 i=0; i<stakeholders.length; i++) {\\n      address addr = stakeholders[i];\\n      uint256 payout = balance * uint256(stakes[addr]) / FurLib.OneHundredPercent;\\n      if (payout > 0) {\\n        payable(addr).transfer(payout);\\n      }\\n    }\\n    uint256 remaining = address(this).balance;\\n    poolAddress.transfer(remaining);\\n  }\\n\\n  /// @notice Check\\n  function _hasStakeholder(address addr) internal view returns(bool) {\\n    for (uint256 i=0; i<stakeholders.length; i++) {\\n      if (stakeholders[i] == addr) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  // -----------------------------------------------------------------------------------------------\\n  // Payable\\n  // -----------------------------------------------------------------------------------------------\\n\\n  /// @notice This contract can be paid transaction fees, e.g., from OpenSea\\n  /// @dev The contractURI specifies itself as the recipient of transaction fees\\n  receive() external payable { }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Community.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\n/// @title Vote checkpointing for an ERC-721 token\\n\\n/// @dev This ERC20 has been adopted from\\n///  https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/base/ERC721Checkpointable.sol\\n\\n/*********************************\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░██░░░████░░██░░░████░░░ *\\n * ░░██████░░░████████░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n *********************************/\\n\\n// LICENSE\\n// Community.sol uses and modifies part of Compound Lab's Comp.sol:\\n// https://github.com/compound-finance/compound-protocol/blob/ae4388e780a8d596d97619d9704a931a2752c2bc/contracts/Governance/Comp.sol\\n//\\n// Comp.sol source code Copyright 2020 Compound Labs, Inc. licensed under the BSD-3-Clause license.\\n// With modifications by Nounders DAO.\\n//\\n// Additional conditions of BSD-3-Clause can be found here: https://opensource.org/licenses/BSD-3-Clause\\n//\\n// MODIFICATIONS\\n// Checkpointing logic from Comp.sol has been used with the following modifications:\\n// - `delegates` is renamed to `_delegates` and is set to private\\n// - `delegates` is a public function that uses the `_delegates` mapping look-up, but unlike\\n//   Comp.sol, returns the delegator's own address if there is no delegate.\\n//   This avoids the delegator needing to \\\"delegate to self\\\" with an additional transaction\\n// - `_transferTokens()` is renamed `_beforeTokenTransfer()` and adapted to hook into OpenZeppelin's ERC721 hooks.\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./FurLib.sol\\\";\\n\\n/// @title Community\\n/// @author LFG Gaming LLC\\n/// @notice This is a derived token; it represents a weighted balance of the ERC721 token (Furballs).\\n/// @dev There is no fiscal interest in Community. This is simply a measured value of community voice.\\ncontract Community is ERC20 {\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) private _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    constructor() ERC20(\\\"FurballsCommunity\\\", \\\"FBLS\\\") { }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @notice The votes a delegator can delegate, which is the current balance of the delegator.\\n     * @dev Used when calling `_delegate()`\\n     */\\n    function votesToDelegate(address delegator) public view returns (uint96) {\\n        return safe96(balanceOf(delegator), 'Community::votesToDelegate: amount exceeds 96 bits');\\n    }\\n\\n    /**\\n     * @notice Overrides the standard `Comp.sol` delegates mapping to return\\n     * the delegator's own address if they haven't delegated.\\n     * This avoids having to delegate to oneself.\\n     */\\n    function delegates(address delegator) public view returns (address) {\\n        address current = _delegates[delegator];\\n        return current == address(0) ? delegator : current;\\n    }\\n\\n\\n      /// @notice Sets the addresses' standing directly\\n      function update(FurLib.Account memory account, address addr) external returns (uint256) {\\n        require(false, 'NEED SECURITY');\\n        // uint256 balance = balanceOf(addr);\\n        // if (standing > balance) {\\n        //   _mint(addr, standing - balance);\\n        // } else if (standing < balance) {\\n        //   _burn(addr, balance - standing);\\n        // }\\n      }\\n\\n    /**\\n     * @notice Adapted from `_transferTokens()` in `Comp.sol` to update delegate votes.\\n     * @dev hooks into OpenZeppelin's `ERC721._transfer`\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(from == address(0), \\\"Votes may not be traded.\\\");\\n\\n        /// @notice Differs from `_transferTokens()` to use `delegates` override method to simulate auto-delegation\\n        _moveDelegates(delegates(from), delegates(to), uint96(amount));\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        if (delegatee == address(0)) delegatee = msg.sender;\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), 'Community::delegateBySig: invalid signature');\\n        require(nonce == nonces[signatory]++, 'Community::delegateBySig: invalid nonce');\\n        require(block.timestamp <= expiry, 'Community::delegateBySig: signature expired');\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, 'Community::getPriorVotes: not yet determined');\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        /// @notice differs from `_delegate()` in `Comp.sol` to use `delegates` override method to simulate auto-delegation\\n        address currentDelegate = delegates(delegator);\\n\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        uint96 amount = votesToDelegate(delegator);\\n\\n        _moveDelegates(currentDelegate, delegatee, amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, 'Community::_moveDelegates: amount underflows');\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, 'Community::_moveDelegates: amount overflows');\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            'Community::_writeCheckpoint: block number exceeds 32 bits'\\n        );\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"responseId\",\"type\":\"uint256\"}],\"name\":\"Collection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"lootId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dropped\",\"type\":\"uint16\"}],\"name\":\"Inventory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"name\":\"addEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"levels\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fur\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"loot\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lootId\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"editions\",\"outputs\":[{\"internalType\":\"contract IFurballEdition\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engine\",\"outputs\":[{\"internalType\":\"contract ILootEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"snackId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"internalType\":\"struct FurLib.Feeding[]\",\"name\":\"feedings\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fur\",\"outputs\":[{\"internalType\":\"contract Fur\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"furballs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rarity\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zone\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"birth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"trade\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"last\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"moves\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"furgreement\",\"outputs\":[{\"internalType\":\"contract Furgreement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isModerator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"editionIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lootId\",\"type\":\"uint128\"}],\"name\":\"pickup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"zone\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"playMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"furAddress\",\"type\":\"address\"}],\"name\":\"setFur\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"furgAddress\",\"type\":\"address\"}],\"name\":\"setFurgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mod\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"contextual\",\"type\":\"bool\"}],\"name\":\"stats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"expRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"furRate\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"expPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"furPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"luckPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"happinessPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"energyPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"zone\",\"type\":\"uint32\"}],\"internalType\":\"struct FurLib.RewardModifiers\",\"name\":\"modifiers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rarity\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zone\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"birth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"trade\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"last\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"moves\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"inventory\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FurLib.Furball\",\"name\":\"definition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"snackId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"furCost\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"happiness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"energy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"fed\",\"type\":\"uint64\"}],\"internalType\":\"struct FurLib.Snack[]\",\"name\":\"snacks\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FurLib.FurballStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lootId\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"chances\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Furballs","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000e10","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}