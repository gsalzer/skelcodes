{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UnipilotFarm.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Unipilot Yield Farming\\r\\n/// @author Asim Raza\\r\\n/// @notice You can use this contract for earn reward on staking nft\\r\\n/// @dev All function calls are currently implemented without side effects\\r\\n\\r\\n//Utility imports\\r\\nimport \\\"./interfaces/IUnipilotFarm.sol\\\";\\r\\nimport \\\"./interfaces/uniswap/IUniswapLiquidityManager.sol\\\";\\r\\nimport \\\"./interfaces/IUnipilot.sol\\\";\\r\\nimport \\\"./interfaces/IFarmV1.sol\\\";\\r\\nimport \\\"./interfaces/IUnipilotStake.sol\\\";\\r\\n\\r\\n//Uniswap v3 core imports\\r\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\r\\n\\r\\n//Openzeppelin imports\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract UnipilotFarm is IUnipilotFarm, ReentrancyGuard, IERC721Receiver {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bool public isFarmingActive;\\r\\n    bool public backwardCompatible;\\r\\n    address public governance;\\r\\n    uint256 public pilotPerBlock = 1e18;\\r\\n    uint256 public farmingGrowthBlockLimit;\\r\\n    uint256 public totalRewardSent;\\r\\n\\r\\n    address private ulm;\\r\\n    address private stakeContract;\\r\\n    address private deprecated;\\r\\n\\r\\n    address private constant PILOT_TOKEN = 0x37C997B35C619C21323F3518B9357914E8B99525;\\r\\n    address private constant UNIPILOT = 0xde5bF92E3372AA59C73Ca7dFc6CEc599E1B2b08C;\\r\\n\\r\\n    address[] public poolListed;\\r\\n\\r\\n    // farming status --> tokenId => bool\\r\\n    mapping(uint256 => bool) public farmingActive;\\r\\n\\r\\n    // exist in whitelist or not --> pool address => bool\\r\\n    mapping(address => bool) public poolWhitelist;\\r\\n\\r\\n    // poolinfo address =>Poolinfo struct\\r\\n    mapping(address => PoolInfo) public poolInfo;\\r\\n\\r\\n    // poolAltInfo address => PoolAltInfo struct\\r\\n    mapping(address => PoolAltInfo) public poolAltInfo;\\r\\n\\r\\n    // userinfo user --> tokenId nft => user info\\r\\n    mapping(uint256 => UserInfo) public userInfo;\\r\\n\\r\\n    //user address => pool address => tokenId[]\\r\\n    mapping(address => mapping(address => uint256[])) public userToPoolToTokenIds;\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(msg.sender == governance, \\\"NA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isActive() {\\r\\n        require(isFarmingActive, \\\"FNA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isLimitActive() {\\r\\n        require(farmingGrowthBlockLimit == 0, \\\"LA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(uint256 _tokenId) {\\r\\n        require(IERC721(UNIPILOT).ownerOf(_tokenId) == msg.sender, \\\"NO\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isPoolRewardActive(address pool) {\\r\\n        require(poolInfo[pool].isRewardActive, \\\"RNA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStake() {\\r\\n        require(msg.sender == stakeContract, \\\"NS\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _ulm,\\r\\n        address _governance,\\r\\n        address _deprecated\\r\\n    ) {\\r\\n        governance = _governance;\\r\\n\\r\\n        ulm = _ulm;\\r\\n\\r\\n        isFarmingActive = true;\\r\\n\\r\\n        deprecated = _deprecated;\\r\\n\\r\\n        backwardCompatible = true;\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw NFT with reward\\r\\n    /// @dev only owner of nft can withdraw\\r\\n    /// @param _tokenId unstake tokenID\\r\\n    function withdrawNFT(uint256 _tokenId) external override {\\r\\n        UserInfo storage userState = userInfo[_tokenId];\\r\\n\\r\\n        PoolInfo storage poolState = poolInfo[userState.pool];\\r\\n\\r\\n        PoolAltInfo storage poolAltState = poolAltInfo[userState.pool];\\r\\n\\r\\n        withdrawReward(_tokenId);\\r\\n\\r\\n        poolState.totalLockedLiquidity = poolState.totalLockedLiquidity.sub(\\r\\n            userState.liquidity\\r\\n        );\\r\\n\\r\\n        IERC721(UNIPILOT).safeTransferFrom(address(this), msg.sender, _tokenId);\\r\\n\\r\\n        farmingActive[_tokenId] = false;\\r\\n\\r\\n        emit WithdrawNFT(\\r\\n            userState.pool,\\r\\n            userState.user,\\r\\n            _tokenId,\\r\\n            poolState.totalLockedLiquidity\\r\\n        );\\r\\n\\r\\n        if (poolState.totalLockedLiquidity == 0) {\\r\\n            poolState.startBlock = block.number;\\r\\n            poolState.lastRewardBlock = block.number;\\r\\n            poolState.globalReward = 0;\\r\\n\\r\\n            poolAltState.startBlock = block.number;\\r\\n            poolAltState.lastRewardBlock = block.number;\\r\\n            poolAltState.globalReward = 0;\\r\\n        }\\r\\n\\r\\n        uint256 index = callIndex(userState.pool, _tokenId);\\r\\n\\r\\n        updateNFTList(index, userState.user, userState.pool);\\r\\n\\r\\n        delete userInfo[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw NFT without reward claiming\\r\\n    /// @param _tokenId unstake this tokenID\\r\\n    function emergencyNFTWithdraw(uint256 _tokenId) external {\\r\\n        UserInfo storage userState = userInfo[_tokenId];\\r\\n\\r\\n        require(userState.user == msg.sender, \\\"NOO\\\");\\r\\n\\r\\n        PoolInfo storage poolState = poolInfo[userState.pool];\\r\\n\\r\\n        PoolAltInfo storage poolAltState = poolAltInfo[userState.pool];\\r\\n\\r\\n        poolState.totalLockedLiquidity = poolState.totalLockedLiquidity.sub(\\r\\n            userState.liquidity\\r\\n        );\\r\\n\\r\\n        IERC721(UNIPILOT).safeTransferFrom(address(this), userState.user, _tokenId);\\r\\n\\r\\n        if (poolState.totalLockedLiquidity == 0) {\\r\\n            poolState.startBlock = block.number;\\r\\n            poolState.lastRewardBlock = block.number;\\r\\n            poolState.globalReward = 0;\\r\\n\\r\\n            poolAltState.startBlock = block.number;\\r\\n            poolAltState.lastRewardBlock = block.number;\\r\\n            poolAltState.globalReward = 0;\\r\\n        }\\r\\n        uint256 index = callIndex(userState.pool, _tokenId);\\r\\n        updateNFTList(index, userState.user, userState.pool);\\r\\n        delete userInfo[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// @notice Migrate funds to Governance address or in new Contract\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _newContract address of new contract or wallet address\\r\\n    /// @param _tokenAddress address of token which want to migrate\\r\\n    /// @param _amount withdraw that amount which are required\\r\\n    function migrateFunds(\\r\\n        address _newContract,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external onlyGovernance {\\r\\n        require(_newContract != address(0), \\\"CNE\\\");\\r\\n        IERC20(_tokenAddress).safeTransfer(_newContract, _amount);\\r\\n        emit MigrateFunds(_newContract, _tokenAddress, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Use to blacklist pools\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _pools addresses to be blacklisted\\r\\n    function blacklistPools(address[] memory _pools) external override onlyGovernance {\\r\\n        for (uint256 i = 0; i < _pools.length; i++) {\\r\\n            poolWhitelist[_pools[i]] = false;\\r\\n\\r\\n            emit BlacklistPool(_pools[i], poolWhitelist[_pools[i]], block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Use to update ULM address\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _ulm new address of ULM\\r\\n    function updateULM(address _ulm) external override onlyGovernance {\\r\\n        emit UpdateULM(ulm, ulm = _ulm, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Updating pilot per block for every pool\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _value new value of pilot per block\\r\\n    function updatePilotPerBlock(uint256 _value) external override onlyGovernance {\\r\\n        address[] memory pools = poolListed;\\r\\n        pilotPerBlock = _value;\\r\\n        for (uint256 i = 0; i < pools.length; i++) {\\r\\n            if (poolWhitelist[pools[i]]) {\\r\\n                if (poolInfo[pools[i]].totalLockedLiquidity != 0) {\\r\\n                    updatePoolState(pools[i]);\\r\\n                }\\r\\n                emit UpdatePilotPerBlock(pools[i], pilotPerBlock);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updating multiplier for single pool\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _pool pool address\\r\\n    /// @param _value new value of multiplier of pool\\r\\n    function updateMultiplier(address _pool, uint256 _value)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        updatePoolState(_pool);\\r\\n\\r\\n        emit UpdateMultiplier(\\r\\n            _pool,\\r\\n            poolInfo[_pool].rewardMultiplier,\\r\\n            poolInfo[_pool].rewardMultiplier = _value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice User total nft(s) with respect to pool\\r\\n    /// @param _user particular user address\\r\\n    /// @param _pool particular pool address\\r\\n    /// @return tokenCount count of nft(s)\\r\\n    /// @return tokenIds array of tokenID\\r\\n    function totalUserNftWRTPool(address _user, address _pool)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 tokenCount, uint256[] memory tokenIds)\\r\\n    {\\r\\n        tokenCount = userToPoolToTokenIds[_user][_pool].length;\\r\\n        tokenIds = userToPoolToTokenIds[_user][_pool];\\r\\n    }\\r\\n\\r\\n    /// @notice NFT token ID farming status\\r\\n    /// @param _tokenId particular tokenId\\r\\n    function nftStatus(uint256 _tokenId) external view override returns (bool) {\\r\\n        return farmingActive[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// @notice User can call tx to deposit nft\\r\\n    /// @dev pool address must be exist in whitelisted pools\\r\\n    /// @param _tokenId tokenID which want to deposit\\r\\n    /// @return status of farming is active for particular tokenID\\r\\n    function depositNFT(uint256 _tokenId)\\r\\n        external\\r\\n        override\\r\\n        isActive\\r\\n        isLimitActive\\r\\n        onlyOwner(_tokenId)\\r\\n        returns (bool)\\r\\n    {\\r\\n        address sender = msg.sender;\\r\\n        IUniswapLiquidityManager.Position memory positions = IUniswapLiquidityManager(ulm)\\r\\n            .userPositions(_tokenId);\\r\\n\\r\\n        (address pool, uint256 liquidity) = (positions.pool, positions.liquidity);\\r\\n\\r\\n        require(poolWhitelist[pool], \\\"PNW\\\");\\r\\n\\r\\n        IUniswapLiquidityManager.LiquidityPosition\\r\\n            memory liquidityPositions = IUniswapLiquidityManager(ulm).poolPositions(pool);\\r\\n\\r\\n        uint256 totalLiquidity = liquidityPositions.totalLiquidity;\\r\\n\\r\\n        require(totalLiquidity >= liquidity && liquidity > 0, \\\"IL\\\");\\r\\n\\r\\n        PoolInfo storage poolState = poolInfo[pool];\\r\\n\\r\\n        if (poolState.lastRewardBlock != poolState.startBlock) {\\r\\n            uint256 blockDifference = (block.number).sub(poolState.lastRewardBlock);\\r\\n\\r\\n            poolState.globalReward = getGlobalReward(\\r\\n                pool,\\r\\n                blockDifference,\\r\\n                pilotPerBlock,\\r\\n                poolState.rewardMultiplier,\\r\\n                poolState.globalReward\\r\\n            );\\r\\n        }\\r\\n\\r\\n        poolState.totalLockedLiquidity = poolState.totalLockedLiquidity.add(liquidity);\\r\\n\\r\\n        userInfo[_tokenId] = UserInfo({\\r\\n            pool: pool,\\r\\n            liquidity: liquidity,\\r\\n            user: sender,\\r\\n            reward: poolState.globalReward,\\r\\n            altReward: userInfo[_tokenId].altReward,\\r\\n            boosterActive: false\\r\\n        });\\r\\n\\r\\n        userToPoolToTokenIds[sender][pool].push(_tokenId);\\r\\n\\r\\n        farmingActive[_tokenId] = true; // user's farming active\\r\\n\\r\\n        IERC721(UNIPILOT).safeTransferFrom(sender, address(this), _tokenId);\\r\\n\\r\\n        if (poolState.isAltActive) {\\r\\n            altGR(pool, _tokenId);\\r\\n        }\\r\\n\\r\\n        poolState.lastRewardBlock = block.number;\\r\\n\\r\\n        emit Deposit(\\r\\n            pool,\\r\\n            _tokenId,\\r\\n            userInfo[_tokenId].liquidity,\\r\\n            poolState.totalLockedLiquidity,\\r\\n            poolState.globalReward,\\r\\n            poolState.rewardMultiplier,\\r\\n            pilotPerBlock\\r\\n        );\\r\\n        return farmingActive[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// @notice toggle alt token state on pool\\r\\n    /// @dev only governance can call this\\r\\n    /// @param _pool pool address for alt token\\r\\n    function toggleActiveAlt(address _pool) external onlyGovernance returns (bool) {\\r\\n        require(poolAltInfo[_pool].altToken != address(0), \\\"TNE\\\");\\r\\n        emit UpdateAltState(\\r\\n            poolInfo[_pool].isAltActive,\\r\\n            poolInfo[_pool].isAltActive = !poolInfo[_pool].isAltActive,\\r\\n            _pool\\r\\n        );\\r\\n\\r\\n        if (poolInfo[_pool].isAltActive) {\\r\\n            updateAltPoolState(_pool);\\r\\n        } else {\\r\\n            poolAltInfo[_pool].lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        return poolInfo[_pool].isAltActive;\\r\\n    }\\r\\n\\r\\n    ///@notice Updating address of alt token\\r\\n    ///@dev only Governance can call this\\r\\n    function updateAltToken(address _pool, address _altToken) external onlyGovernance {\\r\\n        emit UpdateActiveAlt(\\r\\n            poolAltInfo[_pool].altToken,\\r\\n            poolAltInfo[_pool].altToken = _altToken,\\r\\n            _pool\\r\\n        );\\r\\n\\r\\n        PoolAltInfo memory poolAltState = poolAltInfo[_pool];\\r\\n        poolAltState = PoolAltInfo({\\r\\n            globalReward: 0,\\r\\n            lastRewardBlock: block.number,\\r\\n            altToken: poolAltInfo[_pool].altToken,\\r\\n            startBlock: block.number\\r\\n        });\\r\\n\\r\\n        poolAltInfo[_pool] = poolAltState;\\r\\n    }\\r\\n\\r\\n    /// @dev onlyGovernance can call this\\r\\n    /// @param _pools The pools to make whitelist or initialize\\r\\n    /// @param _multipliers multiplier of pools\\r\\n    function initializer(address[] memory _pools, uint256[] memory _multipliers)\\r\\n        public\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        require(_pools.length == _multipliers.length, \\\"LNS\\\");\\r\\n        for (uint256 i = 0; i < _pools.length; i++) {\\r\\n            if (\\r\\n                !poolWhitelist[_pools[i]] && poolInfo[_pools[i]].totalLockedLiquidity == 0\\r\\n            ) {\\r\\n                insertPool(_pools[i], _multipliers[i]);\\r\\n            } else {\\r\\n                poolWhitelist[_pools[i]] = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Generic function to calculating global reward\\r\\n    /// @param pool pool address\\r\\n    /// @param blockDifference difference of block from current block to last reward block\\r\\n    /// @param rewardPerBlock reward on per block\\r\\n    /// @param multiplier multiplier value\\r\\n    /// @return globalReward calculating global reward\\r\\n    function getGlobalReward(\\r\\n        address pool,\\r\\n        uint256 blockDifference,\\r\\n        uint256 rewardPerBlock,\\r\\n        uint256 multiplier,\\r\\n        uint256 _globalReward\\r\\n    ) public view returns (uint256 globalReward) {\\r\\n        uint256 tvl;\\r\\n        if (backwardCompatible) {\\r\\n            tvl = IUnipilotFarmV1(deprecated).poolInfo(pool).totalLockedLiquidity.add(\\r\\n                poolInfo[pool].totalLockedLiquidity\\r\\n            );\\r\\n        } else {\\r\\n            tvl = poolInfo[pool].totalLockedLiquidity;\\r\\n        }\\r\\n        uint256 temp = FullMath.mulDiv(rewardPerBlock, multiplier, 1e18);\\r\\n        globalReward = FullMath.mulDiv(blockDifference.mul(temp), 1e18, tvl).add(\\r\\n            _globalReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Generic function to calculating reward of tokenId\\r\\n    /// @param _tokenId find current reward of tokenID\\r\\n    /// @return pilotReward calculate pilot reward\\r\\n    /// @return globalReward calculate global reward\\r\\n    /// @return globalAltReward calculate global reward of alt token\\r\\n    /// @return altReward calculate reward of alt token\\r\\n    function currentReward(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 pilotReward,\\r\\n            uint256 globalReward,\\r\\n            uint256 globalAltReward,\\r\\n            uint256 altReward\\r\\n        )\\r\\n    {\\r\\n        UserInfo memory userState = userInfo[_tokenId];\\r\\n        PoolInfo memory poolState = poolInfo[userState.pool];\\r\\n        PoolAltInfo memory poolAltState = poolAltInfo[userState.pool];\\r\\n\\r\\n        DirectTo check = DirectTo.GRforPilot;\\r\\n\\r\\n        if (isFarmingActive) {\\r\\n            globalReward = checkLimit(_tokenId, check);\\r\\n\\r\\n            if (poolState.isAltActive) {\\r\\n                check = DirectTo.GRforAlt;\\r\\n                globalAltReward = checkLimit(_tokenId, check);\\r\\n            } else {\\r\\n                globalAltReward = poolAltState.globalReward;\\r\\n            }\\r\\n        } else {\\r\\n            globalReward = poolState.globalReward;\\r\\n            globalAltReward = poolAltState.globalReward;\\r\\n        }\\r\\n\\r\\n        uint256 userReward = globalReward.sub(userState.reward);\\r\\n        uint256 _reward = (userReward.mul(userState.liquidity)).div(1e18);\\r\\n        if (userState.boosterActive) {\\r\\n            uint256 multiplier = IUnipilotStake(stakeContract).getBoostMultiplier(\\r\\n                userState.user,\\r\\n                userState.pool,\\r\\n                _tokenId\\r\\n            );\\r\\n            uint256 boostedReward = (_reward.mul(multiplier)).div(1e18);\\r\\n            pilotReward = _reward.add((boostedReward));\\r\\n        } else {\\r\\n            pilotReward = _reward;\\r\\n        }\\r\\n\\r\\n        _reward = globalAltReward.sub(userState.altReward);\\r\\n        altReward = (_reward.mul(userState.liquidity)).div(1e18);\\r\\n    }\\r\\n\\r\\n    /// @notice Generic function to check limit of global reward of token Id\\r\\n    function checkLimit(uint256 _tokenId, DirectTo _check)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 globalReward)\\r\\n    {\\r\\n        address pool = userInfo[_tokenId].pool;\\r\\n\\r\\n        TempInfo memory poolState;\\r\\n\\r\\n        if (_check == DirectTo.GRforPilot) {\\r\\n            poolState = TempInfo({\\r\\n                globalReward: poolInfo[pool].globalReward,\\r\\n                lastRewardBlock: poolInfo[pool].lastRewardBlock,\\r\\n                rewardMultiplier: poolInfo[pool].rewardMultiplier\\r\\n            });\\r\\n        } else if (_check == DirectTo.GRforAlt) {\\r\\n            poolState = TempInfo({\\r\\n                globalReward: poolAltInfo[pool].globalReward,\\r\\n                lastRewardBlock: poolAltInfo[pool].lastRewardBlock,\\r\\n                rewardMultiplier: poolInfo[pool].rewardMultiplier\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            poolState.lastRewardBlock < farmingGrowthBlockLimit &&\\r\\n            block.number > farmingGrowthBlockLimit\\r\\n        ) {\\r\\n            globalReward = getGlobalReward(\\r\\n                pool,\\r\\n                farmingGrowthBlockLimit.sub(poolState.lastRewardBlock),\\r\\n                pilotPerBlock,\\r\\n                poolState.rewardMultiplier,\\r\\n                poolState.globalReward\\r\\n            );\\r\\n        } else if (\\r\\n            poolState.lastRewardBlock > farmingGrowthBlockLimit &&\\r\\n            farmingGrowthBlockLimit > 0\\r\\n        ) {\\r\\n            globalReward = poolState.globalReward;\\r\\n        } else {\\r\\n            uint256 blockDifference = (block.number).sub(poolState.lastRewardBlock);\\r\\n            globalReward = getGlobalReward(\\r\\n                pool,\\r\\n                blockDifference,\\r\\n                pilotPerBlock,\\r\\n                poolState.rewardMultiplier,\\r\\n                poolState.globalReward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw reward of token Id\\r\\n    /// @dev only owner of nft can withdraw\\r\\n    /// @param _tokenId withdraw reward of this tokenID\\r\\n    function withdrawReward(uint256 _tokenId)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        isPoolRewardActive(userInfo[_tokenId].pool)\\r\\n    {\\r\\n        UserInfo storage userState = userInfo[_tokenId];\\r\\n        PoolInfo storage poolState = poolInfo[userState.pool];\\r\\n\\r\\n        require(userState.user == msg.sender, \\\"NO\\\");\\r\\n        require(poolWhitelist[userState.pool], \\\"PIBL\\\");\\r\\n        (\\r\\n            uint256 pilotReward,\\r\\n            uint256 globalReward,\\r\\n            uint256 globalAltReward,\\r\\n            uint256 altReward\\r\\n        ) = currentReward(_tokenId);\\r\\n\\r\\n        require(IERC20(PILOT_TOKEN).balanceOf(address(this)) >= pilotReward, \\\"IF\\\");\\r\\n\\r\\n        poolState.globalReward = globalReward;\\r\\n        poolState.lastRewardBlock = block.number;\\r\\n        userState.reward = globalReward;\\r\\n\\r\\n        totalRewardSent += pilotReward;\\r\\n\\r\\n        IERC20(PILOT_TOKEN).safeTransfer(userInfo[_tokenId].user, pilotReward);\\r\\n\\r\\n        if (poolState.isAltActive) {\\r\\n            altWithdraw(_tokenId, globalAltReward, altReward);\\r\\n        }\\r\\n\\r\\n        emit WithdrawReward(\\r\\n            userState.pool,\\r\\n            _tokenId,\\r\\n            userState.liquidity,\\r\\n            userState.reward,\\r\\n            poolState.globalReward,\\r\\n            poolState.totalLockedLiquidity,\\r\\n            pilotReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice internal function use for initialize struct values of single pool\\r\\n    /// @dev generalFunction to add pools\\r\\n    /// @param _pool pool address\\r\\n    function insertPool(address _pool, uint256 _multiplier) internal {\\r\\n        poolWhitelist[_pool] = true;\\r\\n        poolListed.push(_pool);\\r\\n        poolInfo[_pool] = PoolInfo({\\r\\n            startBlock: block.number,\\r\\n            globalReward: 0,\\r\\n            lastRewardBlock: block.number,\\r\\n            totalLockedLiquidity: 0,\\r\\n            rewardMultiplier: _multiplier,\\r\\n            isRewardActive: true,\\r\\n            isAltActive: poolInfo[_pool].isAltActive\\r\\n        });\\r\\n\\r\\n        emit NewPool(\\r\\n            _pool,\\r\\n            pilotPerBlock,\\r\\n            poolInfo[_pool].rewardMultiplier,\\r\\n            poolInfo[_pool].lastRewardBlock,\\r\\n            poolWhitelist[_pool]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Use to update state of alt token\\r\\n    function altGR(address _pool, uint256 _tokenId) internal {\\r\\n        PoolAltInfo storage poolAltState = poolAltInfo[_pool];\\r\\n\\r\\n        if (poolAltState.lastRewardBlock != poolAltState.startBlock) {\\r\\n            uint256 blockDifference = (block.number).sub(poolAltState.lastRewardBlock);\\r\\n\\r\\n            poolAltState.globalReward = getGlobalReward(\\r\\n                _pool,\\r\\n                blockDifference,\\r\\n                pilotPerBlock,\\r\\n                poolInfo[_pool].rewardMultiplier,\\r\\n                poolAltState.globalReward\\r\\n            );\\r\\n        }\\r\\n\\r\\n        poolAltState.lastRewardBlock = block.number;\\r\\n\\r\\n        userInfo[_tokenId].altReward = poolAltState.globalReward;\\r\\n    }\\r\\n\\r\\n    /// @notice Use for pool tokenId to find its index\\r\\n    function callIndex(address pool, uint256 _tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 index)\\r\\n    {\\r\\n        uint256[] memory tokens = userToPoolToTokenIds[msg.sender][pool];\\r\\n        for (uint256 i = 0; i <= tokens.length; i++) {\\r\\n            if (_tokenId == userToPoolToTokenIds[msg.sender][pool][i]) {\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /// @notice Use to update list of NFT(s)\\r\\n    function updateNFTList(\\r\\n        uint256 _index,\\r\\n        address user,\\r\\n        address pool\\r\\n    ) internal {\\r\\n        require(_index < userToPoolToTokenIds[user][pool].length, \\\"IOB\\\");\\r\\n        uint256 temp = userToPoolToTokenIds[user][pool][\\r\\n            userToPoolToTokenIds[user][pool].length.sub(1)\\r\\n        ];\\r\\n        userToPoolToTokenIds[user][pool][_index] = temp;\\r\\n        userToPoolToTokenIds[user][pool].pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Use to toggle farming state of contract\\r\\n    function toggleFarmingActive() external override onlyGovernance {\\r\\n        emit FarmingStatus(\\r\\n            isFarmingActive,\\r\\n            isFarmingActive = !isFarmingActive,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Use to withdraw alt tokens of token Id (internal)\\r\\n    function altWithdraw(\\r\\n        uint256 _tokenId,\\r\\n        uint256 altGlobalReward,\\r\\n        uint256 altReward\\r\\n    ) internal {\\r\\n        PoolAltInfo storage poolAltState = poolAltInfo[userInfo[_tokenId].pool];\\r\\n        require(\\r\\n            IERC20(poolAltState.altToken).balanceOf(address(this)) >= altReward,\\r\\n            \\\"IF\\\"\\r\\n        );\\r\\n        poolAltState.lastRewardBlock = block.number;\\r\\n        poolAltState.globalReward = altGlobalReward;\\r\\n        userInfo[_tokenId].altReward = altGlobalReward;\\r\\n        IERC20(poolAltState.altToken).safeTransfer(userInfo[_tokenId].user, altReward);\\r\\n    }\\r\\n\\r\\n    /// @notice Use to toggle state of reward of pool\\r\\n    function toggleRewardStatus(address _pool) external override onlyGovernance {\\r\\n        if (poolInfo[_pool].isRewardActive) {\\r\\n            updatePoolState(_pool);\\r\\n        } else {\\r\\n            poolInfo[_pool].lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        emit RewardStatus(\\r\\n            _pool,\\r\\n            poolInfo[_pool].isRewardActive,\\r\\n            poolInfo[_pool].isRewardActive = !poolInfo[_pool].isRewardActive\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Use to update pool state (internal)\\r\\n    function updatePoolState(address _pool) internal {\\r\\n        PoolInfo storage poolState = poolInfo[_pool];\\r\\n        if (poolState.totalLockedLiquidity > 0) {\\r\\n            uint256 currentGlobalReward = getGlobalReward(\\r\\n                _pool,\\r\\n                (block.number).sub(poolState.lastRewardBlock),\\r\\n                pilotPerBlock,\\r\\n                poolState.rewardMultiplier,\\r\\n                poolState.globalReward\\r\\n            );\\r\\n\\r\\n            poolState.globalReward = currentGlobalReward;\\r\\n            poolState.lastRewardBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Use to update alt token state (internal)\\r\\n    function updateAltPoolState(address _pool) internal {\\r\\n        PoolAltInfo storage poolAltState = poolAltInfo[_pool];\\r\\n        if (poolInfo[_pool].totalLockedLiquidity > 0) {\\r\\n            uint256 currentGlobalReward = getGlobalReward(\\r\\n                _pool,\\r\\n                (block.number).sub(poolAltState.lastRewardBlock),\\r\\n                pilotPerBlock,\\r\\n                poolInfo[_pool].rewardMultiplier,\\r\\n                poolAltState.globalReward\\r\\n            );\\r\\n\\r\\n            poolAltState.globalReward = currentGlobalReward;\\r\\n            poolAltState.lastRewardBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Use to stop staking NFT(s) in contract after block limit\\r\\n    function updateFarmingLimit(uint256 _blockNumber) external onlyGovernance {\\r\\n        require(_blockNumber > block.number, \\\"WN\\\");\\r\\n        emit UpdateFarmingLimit(\\r\\n            farmingGrowthBlockLimit,\\r\\n            farmingGrowthBlockLimit = _blockNumber\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice toggle booster status of token Id\\r\\n    function toggleBooster(uint256 tokenId) external onlyStake {\\r\\n        emit ToggleBooster(\\r\\n            tokenId,\\r\\n            userInfo[tokenId].boosterActive,\\r\\n            userInfo[tokenId].boosterActive = !userInfo[tokenId].boosterActive\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice set stake contract address\\r\\n    function setStake(address _stakeContract) external onlyGovernance {\\r\\n        emit Stake(stakeContract, stakeContract = _stakeContract);\\r\\n    }\\r\\n\\r\\n    /// @notice toggle backward compayibility status of FarmingV1\\r\\n    function toggleBackwardCompatibility() external onlyGovernance {\\r\\n        emit BackwardCompatible(\\r\\n            backwardCompatible,\\r\\n            backwardCompatible = !backwardCompatible\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice governance can update new address of governance\\r\\n    function updateGovernance(address _governance) external onlyGovernance {\\r\\n        emit GovernanceUpdated(governance, governance = _governance);\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        //payable\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotFarm.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IUnipilotFarm {\\r\\n    struct PoolInfo {\\r\\n        uint256 startBlock;\\r\\n        uint256 globalReward;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 totalLockedLiquidity;\\r\\n        uint256 rewardMultiplier;\\r\\n        bool isRewardActive;\\r\\n        bool isAltActive;\\r\\n    }\\r\\n\\r\\n    struct PoolAltInfo {\\r\\n        address altToken;\\r\\n        uint256 startBlock;\\r\\n        uint256 globalReward;\\r\\n        uint256 lastRewardBlock;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        bool boosterActive;\\r\\n        address pool;\\r\\n        address user;\\r\\n        uint256 reward;\\r\\n        uint256 altReward;\\r\\n        uint256 liquidity;\\r\\n    }\\r\\n\\r\\n    struct TempInfo {\\r\\n        uint256 globalReward;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 rewardMultiplier;\\r\\n    }\\r\\n\\r\\n    enum DirectTo {\\r\\n        GRforPilot,\\r\\n        GRforAlt\\r\\n    }\\r\\n\\r\\n    event Deposit(\\r\\n        address pool,\\r\\n        uint256 tokenId,\\r\\n        uint256 liquidity,\\r\\n        uint256 totalSupply,\\r\\n        uint256 globalReward,\\r\\n        uint256 rewardMultiplier,\\r\\n        uint256 rewardPerBlock\\r\\n    );\\r\\n    event WithdrawReward(\\r\\n        address pool,\\r\\n        uint256 tokenId,\\r\\n        uint256 liquidity,\\r\\n        uint256 reward,\\r\\n        uint256 globalReward,\\r\\n        uint256 totalSupply,\\r\\n        uint256 lastRewardTransferred\\r\\n    );\\r\\n    event WithdrawNFT(\\r\\n        address pool,\\r\\n        address userAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 totalSupply\\r\\n    );\\r\\n\\r\\n    event NewPool(\\r\\n        address pool,\\r\\n        uint256 rewardPerBlock,\\r\\n        uint256 rewardMultiplier,\\r\\n        uint256 lastRewardBlock,\\r\\n        bool status\\r\\n    );\\r\\n\\r\\n    event BlacklistPool(address pool, bool status, uint256 time);\\r\\n\\r\\n    event UpdateULM(address oldAddress, address newAddress, uint256 time);\\r\\n\\r\\n    event UpdatePilotPerBlock(address pool, uint256 updated);\\r\\n\\r\\n    event UpdateMultiplier(address pool, uint256 old, uint256 updated);\\r\\n\\r\\n    event UpdateActiveAlt(address old, address updated, address pool);\\r\\n\\r\\n    event UpdateAltState(bool old, bool updated, address pool);\\r\\n\\r\\n    event UpdateFarmingLimit(uint256 old, uint256 updated);\\r\\n\\r\\n    event RewardStatus(address pool, bool old, bool updated);\\r\\n\\r\\n    event MigrateFunds(address account, address token, uint256 amount);\\r\\n\\r\\n    event FarmingStatus(bool old, bool updated, uint256 time);\\r\\n\\r\\n    event Stake(address old, address updated);\\r\\n\\r\\n    event ToggleBooster(uint256 tokenId, bool old, bool updated);\\r\\n\\r\\n    event UserBooster(uint256 tokenId, uint256 booster);\\r\\n\\r\\n    event BackwardCompatible(bool old, bool updated);\\r\\n\\r\\n    event GovernanceUpdated(address old, address updated);\\r\\n\\r\\n    function initializer(address[] memory pools, uint256[] memory _multipliers) external;\\r\\n\\r\\n    function blacklistPools(address[] memory pools) external;\\r\\n\\r\\n    function updatePilotPerBlock(uint256 value) external;\\r\\n\\r\\n    function updateMultiplier(address pool, uint256 value) external;\\r\\n\\r\\n    function updateULM(address _ULM) external;\\r\\n\\r\\n    function totalUserNftWRTPool(address userAddress, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 tokenCount, uint256[] memory tokenIds);\\r\\n\\r\\n    function nftStatus(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function depositNFT(uint256 tokenId) external returns (bool);\\r\\n\\r\\n    function withdrawNFT(uint256 tokenId) external;\\r\\n\\r\\n    function withdrawReward(uint256 tokenId) external;\\r\\n\\r\\n    function currentReward(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 pilotReward,\\r\\n            uint256 globalReward,\\r\\n            uint256 globalAltReward,\\r\\n            uint256 altReward\\r\\n        );\\r\\n\\r\\n    function toggleRewardStatus(address pool) external;\\r\\n\\r\\n    function toggleFarmingActive() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapLiquidityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IULMEvents.sol\\\";\\r\\n\\r\\ninterface IUniswapLiquidityManager is IULMEvents {\\r\\n    struct LiquidityPosition {\\r\\n        // base order position\\r\\n        int24 baseTickLower;\\r\\n        int24 baseTickUpper;\\r\\n        uint128 baseLiquidity;\\r\\n        // range order position\\r\\n        int24 rangeTickLower;\\r\\n        int24 rangeTickUpper;\\r\\n        uint128 rangeLiquidity;\\r\\n        // accumulated fees\\r\\n        uint256 fees0;\\r\\n        uint256 fees1;\\r\\n        uint256 feeGrowthGlobal0;\\r\\n        uint256 feeGrowthGlobal1;\\r\\n        // total liquidity\\r\\n        uint256 totalLiquidity;\\r\\n        // pool premiums\\r\\n        bool feesInPilot;\\r\\n        // oracle address for tokens to fetch prices from\\r\\n        address oracle0;\\r\\n        address oracle1;\\r\\n        // rebase\\r\\n        uint256 timestamp;\\r\\n        uint8 counter;\\r\\n        bool status;\\r\\n        bool managed;\\r\\n    }\\r\\n\\r\\n    struct Position {\\r\\n        uint256 nonce;\\r\\n        address pool;\\r\\n        uint256 liquidity;\\r\\n        uint256 feeGrowth0;\\r\\n        uint256 feeGrowth1;\\r\\n        uint256 tokensOwed0;\\r\\n        uint256 tokensOwed1;\\r\\n    }\\r\\n\\r\\n    struct ReadjustVars {\\r\\n        bool zeroForOne;\\r\\n        address poolAddress;\\r\\n        int24 currentTick;\\r\\n        uint160 sqrtPriceX96;\\r\\n        uint160 exactSqrtPriceImpact;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n        uint128 baseLiquidity;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        uint256 amountIn;\\r\\n        uint256 amount0Added;\\r\\n        uint256 amount1Added;\\r\\n        uint256 amount0Range;\\r\\n        uint256 amount1Range;\\r\\n        uint256 currentTimestamp;\\r\\n        uint256 gasUsed;\\r\\n        uint256 pilotAmount;\\r\\n    }\\r\\n\\r\\n    struct VarsEmerency {\\r\\n        address token;\\r\\n        address pool;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint128 liquidity;\\r\\n    }\\r\\n\\r\\n    struct WithdrawVars {\\r\\n        address recipient;\\r\\n        uint256 amount0Removed;\\r\\n        uint256 amount1Removed;\\r\\n        uint256 userAmount0;\\r\\n        uint256 userAmount1;\\r\\n        uint256 pilotAmount;\\r\\n    }\\r\\n\\r\\n    struct WithdrawTokenOwedParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 tokensOwed0;\\r\\n        uint256 tokensOwed1;\\r\\n    }\\r\\n\\r\\n    struct MintCallbackData {\\r\\n        address payer;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    struct UnipilotProtocolDetails {\\r\\n        uint8 swapPercentage;\\r\\n        uint24 swapPriceThreshold;\\r\\n        uint256 premium;\\r\\n        uint256 gasPriceLimit;\\r\\n        uint256 userPilotPercentage;\\r\\n        uint256 feesPercentageIndexFund;\\r\\n        uint24 readjustFrequencyTime;\\r\\n        uint16 poolCardinalityDesired;\\r\\n        address pilotWethPair;\\r\\n        address oracle;\\r\\n        address indexFund; // 10%\\r\\n        address uniStrategy;\\r\\n        address unipilot;\\r\\n    }\\r\\n\\r\\n    struct SwapCallbackData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    struct AddLiquidityParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n    }\\r\\n\\r\\n    struct RemoveLiquidity {\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        uint128 liquidityRemoved;\\r\\n        uint256 feesCollected0;\\r\\n        uint256 feesCollected1;\\r\\n    }\\r\\n\\r\\n    struct Tick {\\r\\n        int24 baseTickLower;\\r\\n        int24 baseTickUpper;\\r\\n        int24 bidTickLower;\\r\\n        int24 bidTickUpper;\\r\\n        int24 rangeTickLower;\\r\\n        int24 rangeTickUpper;\\r\\n    }\\r\\n\\r\\n    struct TokenDetails {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 currentTick;\\r\\n        uint16 poolCardinality;\\r\\n        uint128 baseLiquidity;\\r\\n        uint128 bidLiquidity;\\r\\n        uint128 rangeLiquidity;\\r\\n        uint256 amount0Added;\\r\\n        uint256 amount1Added;\\r\\n    }\\r\\n\\r\\n    struct DistributeFeesParams {\\r\\n        bool pilotToken;\\r\\n        bool wethToken;\\r\\n        address pool;\\r\\n        address recipient;\\r\\n        uint256 tokenId;\\r\\n        uint256 liquidity;\\r\\n        uint256 amount0Removed;\\r\\n        uint256 amount1Removed;\\r\\n    }\\r\\n\\r\\n    struct AddLiquidityManagerParams {\\r\\n        address pool;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 shares;\\r\\n    }\\r\\n\\r\\n    struct DepositVars {\\r\\n        uint24 fee;\\r\\n        address pool;\\r\\n        uint256 amount0Base;\\r\\n        uint256 amount1Base;\\r\\n        uint256 amount0Range;\\r\\n        uint256 amount1Range;\\r\\n    }\\r\\n\\r\\n    struct RangeLiquidityVars {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        uint128 rangeLiquidity;\\r\\n        uint256 amount0Range;\\r\\n        uint256 amount1Range;\\r\\n    }\\r\\n\\r\\n    struct IncreaseParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 currentTick;\\r\\n        uint128 baseLiquidity;\\r\\n        uint256 baseAmount0;\\r\\n        uint256 baseAmount1;\\r\\n        uint128 rangeLiquidity;\\r\\n        uint256 rangeAmount0;\\r\\n        uint256 rangeAmount1;\\r\\n    }\\r\\n\\r\\n    /// @notice Pull in tokens from sender. Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\r\\n    /// @dev In the implementation you must pay to the pool for the minted liquidity.\\r\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\r\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\r\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\r\\n    function uniswapV3MintCallback(\\r\\n        uint256 amount0Owed,\\r\\n        uint256 amount1Owed,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Called to `msg.sender` after minting swaping from IUniswapV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay to the pool for swap.\\r\\n    /// @param amount0Delta The amount of token0 due to the pool for the swap\\r\\n    /// @param amount1Delta The amount of token1 due to the pool for the swap\\r\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\r\\n    function uniswapV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Returns the user position information associated with a given token ID.\\r\\n    /// @param tokenId The ID of the token that represents the position\\r\\n    /// @return Position\\r\\n    /// - nonce The nonce for permits\\r\\n    /// - pool Address of the uniswap V3 pool\\r\\n    /// - liquidity The liquidity of the position\\r\\n    /// - feeGrowth0 The fee growth of token0 as of the last action on the individual position\\r\\n    /// - feeGrowth1 The fee growth of token1 as of the last action on the individual position\\r\\n    /// - tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\r\\n    /// - tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\r\\n    function userPositions(uint256 tokenId) external view returns (Position memory);\\r\\n\\r\\n    /// @notice Returns the vault information of unipilot base & range orders\\r\\n    /// @param pool Address of the Uniswap pool\\r\\n    /// @return LiquidityPosition\\r\\n    /// - baseTickLower The lower tick of the base position\\r\\n    /// - baseTickUpper The upper tick of the base position\\r\\n    /// - baseLiquidity The total liquidity of the base position\\r\\n    /// - rangeTickLower The lower tick of the range position\\r\\n    /// - rangeTickUpper The upper tick of the range position\\r\\n    /// - rangeLiquidity The total liquidity of the range position\\r\\n    /// - fees0 Total amount of fees collected by unipilot positions in terms of token0\\r\\n    /// - fees1 Total amount of fees collected by unipilot positions in terms of token1\\r\\n    /// - feeGrowthGlobal0 The fee growth of token0 collected per unit of liquidity for\\r\\n    /// the entire life of the unipilot vault\\r\\n    /// - feeGrowthGlobal1 The fee growth of token1 collected per unit of liquidity for\\r\\n    /// the entire life of the unipilot vault\\r\\n    /// - totalLiquidity Total amount of liquidity of vault including base & range orders\\r\\n    function poolPositions(address pool) external view returns (LiquidityPosition memory);\\r\\n\\r\\n    /// @notice Calculates the vault's total holdings of token0 and token1 - in\\r\\n    /// other words, how much of each token the vault would hold if it withdrew\\r\\n    /// all its liquidity from Uniswap.\\r\\n    /// @param _pool Address of the uniswap pool\\r\\n    /// @return amount0 Total amount of token0 in vault\\r\\n    /// @return amount1 Total amount of token1 in vault\\r\\n    /// @return totalLiquidity Total liquidity of the vault\\r\\n    function updatePositionTotalAmounts(address _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            uint256 totalLiquidity\\r\\n        );\\r\\n\\r\\n    /// @notice Calculates the vault's total holdings of TOKEN0 and TOKEN1 - in\\r\\n    /// other words, how much of each token the vault would hold if it withdrew\\r\\n    /// all its liquidity from Uniswap.\\r\\n    /// @dev Updates the position and return the latest reserves & liquidity.\\r\\n    /// @param token0 token0 of the pool\\r\\n    /// @param token0 token1 of the pool\\r\\n    /// @param data any necessary data needed to get reserves\\r\\n    /// @return totalAmount0 Amount of token0 in the pool of unipilot\\r\\n    /// @return totalAmount1 Amount of token1 in the pool of unipilot\\r\\n    /// @return totalLiquidity Total liquidity available in unipilot pool\\r\\n    function getReserves(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 totalAmount0,\\r\\n            uint256 totalAmount1,\\r\\n            uint256 totalLiquidity\\r\\n        );\\r\\n\\r\\n    /// @notice Creates a new pool & then initializes the pool\\r\\n    /// @param _token0 The contract address of token0 of the pool\\r\\n    /// @param _token1 The contract address of token1 of the pool\\r\\n    /// @param data Necessary data needed to create pool\\r\\n    /// In data we will provide the `fee` amount of the v3 pool for the specified token pair,\\r\\n    /// also `sqrtPriceX96` The initial square root price of the pool\\r\\n    /// @return _pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address\\r\\n    function createPair(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        bytes memory data\\r\\n    ) external returns (address _pool);\\r\\n\\r\\n    /// @notice Deposits tokens in proportion to the Unipilot's current ticks, mints them\\r\\n    /// `Unipilot`s NFT.\\r\\n    /// @param token0 The first of the two tokens of the pool, sorted by address\\r\\n    /// @param token1 The second of the two tokens of the pool, sorted by address\\r\\n    /// @param amount0Desired Max amount of token0 to deposit\\r\\n    /// @param amount1Desired Max amount of token1 to deposit\\r\\n    /// @param shares Number of shares minted\\r\\n    /// @param tokenId Token Id of Unipilot\\r\\n    /// @param isTokenMinted Boolean to check the minting of new tokenId of Unipilot\\r\\n    /// @param data Necessary data needed to deposit\\r\\n    function deposit(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amount0Desired,\\r\\n        uint256 amount1Desired,\\r\\n        uint256 shares,\\r\\n        uint256 tokenId,\\r\\n        bool isTokenMinted,\\r\\n        bytes memory data\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice withdraws the desired shares from the vault with accumulated user fees and transfers to recipient.\\r\\n    /// @param pilotToken whether to recieve fees in PILOT or not (valid if user is not reciving fees in token0, token1)\\r\\n    /// @param wethToken whether to recieve fees in WETH or ETH (only valid for WETH/ALT pairs)\\r\\n    /// @param liquidity The amount by which liquidity will be withdrawn\\r\\n    /// @param tokenId The ID of the token for which liquidity is being withdrawn\\r\\n    /// @param data Necessary data needed to withdraw liquidity from Unipilot\\r\\n    function withdraw(\\r\\n        bool pilotToken,\\r\\n        bool wethToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Collects up to a maximum amount of fees owed to a specific user position to the recipient\\r\\n    /// @dev User have both options whether to recieve fees in PILOT or in pool token0 & token1\\r\\n    /// @param pilotToken whether to recieve fees in PILOT or not (valid if user is not reciving fees in token0, token1)\\r\\n    /// @param wethToken whether to recieve fees in WETH or ETH (only valid for WETH/ALT pairs)\\r\\n    /// @param tokenId The ID of the Unpilot NFT for which tokens will be collected\\r\\n    /// @param data Necessary data needed to collect fees from Unipilot\\r\\n    function collect(\\r\\n        bool pilotToken,\\r\\n        bool wethToken,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IHandler.sol\\\";\\r\\n\\r\\ninterface IUnipilot {\\r\\n    struct DepositVars {\\r\\n        uint256 totalAmount0;\\r\\n        uint256 totalAmount1;\\r\\n        uint256 totalLiquidity;\\r\\n        uint256 shares;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n    }\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function mintPilot(address recipient, uint256 amount) external;\\r\\n\\r\\n    function mintUnipilotNFT(address sender) external returns (uint256 mintedTokenId);\\r\\n\\r\\n    function deposit(IHandler.DepositParams memory params, bytes memory data)\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amount0Base,\\r\\n            uint256 amount1Base,\\r\\n            uint256 amount0Range,\\r\\n            uint256 amount1Range,\\r\\n            uint256 mintedTokenId\\r\\n        );\\r\\n\\r\\n    function createPoolAndDeposit(\\r\\n        IHandler.DepositParams memory params,\\r\\n        bytes[2] calldata data\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amount0Base,\\r\\n            uint256 amount1Base,\\r\\n            uint256 amount0Range,\\r\\n            uint256 amount1Range,\\r\\n            uint256 mintedTokenId\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFarmV1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IUnipilotFarmV1 {\\r\\n    struct PoolInfo {\\r\\n        uint256 startBlock;\\r\\n        uint256 globalReward;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 totalLockedLiquidity;\\r\\n        uint256 rewardMultiplier;\\r\\n        bool isRewardActive;\\r\\n        bool isAltActive;\\r\\n    }\\r\\n\\r\\n    function poolInfo(address pool) external view returns (PoolInfo memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotStake.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\ninterface IUnipilotStake {\\r\\n    function getBoostMultiplier(\\r\\n        address userAddress,\\r\\n        address poolAddress,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function userMultiplier(address userAddress, address poolAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint8 private _unlocked = 1;\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_unlocked == 1, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _unlocked = 0;\\r\\n        _;\\r\\n        _unlocked = 1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IULMEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\ninterface IULMEvents {\\r\\n    event PoolCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address indexed pool,\\r\\n        uint24 fee,\\r\\n        uint160 sqrtPriceX96\\r\\n    );\\r\\n\\r\\n    event PoolReajusted(\\r\\n        address pool,\\r\\n        uint128 baseLiquidity,\\r\\n        uint128 rangeLiquidity,\\r\\n        int24 newBaseTickLower,\\r\\n        int24 newBaseTickUpper,\\r\\n        int24 newRangeTickLower,\\r\\n        int24 newRangeTickUpper\\r\\n    );\\r\\n\\r\\n    event Deposited(\\r\\n        address indexed pool,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    event Collect(\\r\\n        uint256 tokenId,\\r\\n        uint256 userAmount0,\\r\\n        uint256 userAmount1,\\r\\n        uint256 pilotAmount,\\r\\n        address pool,\\r\\n        address recipient\\r\\n    );\\r\\n\\r\\n    event Withdrawn(\\r\\n        address indexed pool,\\r\\n        address indexed recipient,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @notice IHandler is a generalized interface for all the liquidity managers\\r\\n/// @dev Contains all necessary methods that should be available in liquidity manager contracts\\r\\ninterface IHandler {\\r\\n    struct DepositParams {\\r\\n        address sender;\\r\\n        address exchangeAddress;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n    }\\r\\n\\r\\n    struct WithdrawParams {\\r\\n        bool pilotToken;\\r\\n        bool wethToken;\\r\\n        address exchangeAddress;\\r\\n        uint256 liquidity;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct CollectParams {\\r\\n        bool pilotToken;\\r\\n        bool wethToken;\\r\\n        address exchangeAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    function createPair(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function deposit(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        uint256 shares,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amount0Base,\\r\\n            uint256 amount1Base,\\r\\n            uint256 amount0Range,\\r\\n            uint256 amount1Range,\\r\\n            uint256 mintedTokenId\\r\\n        );\\r\\n\\r\\n    function withdraw(\\r\\n        bool pilotToken,\\r\\n        bool wethToken,\\r\\n        uint256 liquidity,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function getReserves(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function collect(\\r\\n        bool pilotToken,\\r\\n        bool wethToken,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ulm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deprecated\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"}],\"name\":\"BackwardCompatible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BlacklistPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"FarmingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MigrateFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"}],\"name\":\"RewardStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"}],\"name\":\"ToggleBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"UpdateActiveAlt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"UpdateAltState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdateFarmingLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdateMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdatePilotPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdateULM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"booster\",\"type\":\"uint256\"}],\"name\":\"UserBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTransferred\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"backwardCompatible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"blacklistPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pilotReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalAltReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyNFTWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingGrowthBlockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_globalReward\",\"type\":\"uint256\"}],\"name\":\"getGlobalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"}],\"name\":\"initializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFarmingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nftStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pilotPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAltInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"altToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRewardActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAltActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolListed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"toggleActiveAlt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBackwardCompatibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"toggleBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFarmingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"toggleRewardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"totalUserNftWRTPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_altToken\",\"type\":\"address\"}],\"name\":\"updateAltToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"updateFarmingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updatePilotPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ulm\",\"type\":\"address\"}],\"name\":\"updateULM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"boosterActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToPoolToTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnipilotFarm","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1200","ConstructorArguments":"000000000000000000000000a7979d0592ecfc59b082552828ff36209ec94b11000000000000000000000000afa13aa8f1b1d89454369c28b0ce1811961a79070000000000000000000000006e665791f0219a10a4d52ac0915931cf045220b8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}