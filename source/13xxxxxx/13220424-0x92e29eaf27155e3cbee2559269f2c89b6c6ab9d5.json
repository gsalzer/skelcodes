{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.6 <0.9.0;\r\n\r\ncontract QuickPunk {\r\n    address private owner;\r\n\r\n    uint256 private registerPrice;\r\n    mapping(address => bool) private registeredUsers;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        registerPrice = 0.02 ether;\r\n    }\r\n\r\n    // Getters\r\n\r\n    function getRegisterPrice() external view returns (uint256) {\r\n        return (registerPrice);\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return (owner);\r\n    }\r\n\r\n    function isAddressRegistered(address _account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (registeredUsers[_account]);\r\n    }\r\n\r\n    // Setters\r\n    function setOwner(address _owner) external {\r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    function setRegisterPrice(uint256 _registerPrice) external {\r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n\r\n        registerPrice = _registerPrice;\r\n    }\r\n\r\n    // Register functions\r\n    receive() external payable {\r\n        register();\r\n    }\r\n\r\n    function register() public payable {\r\n        require(!registeredUsers[msg.sender], \"Address already registered!\");\r\n        require(\r\n            msg.value >= registerPrice,\r\n            \"Register price is lower than expected\"\r\n        );\r\n\r\n        registeredUsers[msg.sender] = true;\r\n    }\r\n\r\n    // Withdraw Ether\r\n    function withdraw(uint256 _amount, address _receiver) external {\r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n\r\n        payable(_receiver).transfer(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAddressRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registerPrice\",\"type\":\"uint256\"}],\"name\":\"setRegisterPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"QuickPunk","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://efb1b1478712e9e2cff40441aeb93e8c002b82ac1f25d494504165bb21634a46"}]}