{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SystemDeFiReference.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n░██████╗██╗░░░██╗░██████╗████████╗███████╗███╗░░░███╗  ██████╗░███████╗███████╗██╗  ███████╗░█████╗░██████╗░\\r\\n██╔════╝╚██╗░██╔╝██╔════╝╚══██╔══╝██╔════╝████╗░████║  ██╔══██╗██╔════╝██╔════╝██║  ██╔════╝██╔══██╗██╔══██╗\\r\\n╚█████╗░░╚████╔╝░╚█████╗░░░░██║░░░█████╗░░██╔████╔██║  ██║░░██║█████╗░░█████╗░░██║  █████╗░░██║░░██║██████╔╝\\r\\n░╚═══██╗░░╚██╔╝░░░╚═══██╗░░░██║░░░██╔══╝░░██║╚██╔╝██║  ██║░░██║██╔══╝░░██╔══╝░░██║  ██╔══╝░░██║░░██║██╔══██╗\\r\\n██████╔╝░░░██║░░░██████╔╝░░░██║░░░███████╗██║░╚═╝░██║  ██████╔╝███████╗██║░░░░░██║  ██║░░░░░╚█████╔╝██║░░██║\\r\\n╚═════╝░░░░╚═╝░░░╚═════╝░░░░╚═╝░░░╚══════╝╚═╝░░░░░╚═╝  ╚═════╝░╚══════╝╚═╝░░░░░╚═╝  ╚═╝░░░░░░╚════╝░╚═╝░░╚═╝\\r\\n\\r\\n██████╗░███████╗███████╗███████╗██████╗░███████╗███╗░░██╗░█████╗░███████╗\\r\\n██╔══██╗██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝████╗░██║██╔══██╗██╔════╝\\r\\n██████╔╝█████╗░░█████╗░░█████╗░░██████╔╝█████╗░░██╔██╗██║██║░░╚═╝█████╗░░\\r\\n██╔══██╗██╔══╝░░██╔══╝░░██╔══╝░░██╔══██╗██╔══╝░░██║╚████║██║░░██╗██╔══╝░░\\r\\n██║░░██║███████╗██║░░░░░███████╗██║░░██║███████╗██║░╚███║╚█████╔╝███████╗\\r\\n╚═╝░░╚═╝╚══════╝╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚══════╝╚═╝░░╚══╝░╚════╝░╚══════╝\\r\\nDeveloped by systemdefi.crypto and rsd.cash teams\\r\\n*/\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IReferenceSystemDeFi.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./SdrHelper.sol\\\";\\r\\n\\r\\ncontract SystemDeFiReference is Context, IERC20, Ownable {\\r\\n\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tbool private _inSwapAndLiquify;\\r\\n\\tbool private _initialLiquidityCalled = false;\\r\\n\\tbool public mustChargeFees = true;\\r\\n\\tbool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n\\tuint256 private _decimals = 18;\\r\\n\\tuint256 private _totalSupply;\\r\\n\\tuint256 private _reflectedSupply;\\r\\n\\tuint256 private _numTokensSellToAddToLiquidity;\\r\\n\\tuint256 public lastPoolRate;\\r\\n\\r\\n\\taddress public rsdTokenAddress;\\r\\n\\taddress public sdrHelperAddress;\\r\\n\\taddress public farmContractAddress;\\r\\n\\taddress public marketingAddress;\\r\\n\\taddress public immutable rsdEthPair;\\r\\n\\taddress public immutable sdrRsdPair;\\r\\n\\r\\n\\tmapping (address => uint256) private _balancesReflected;\\r\\n\\tmapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n\\tstring private _name;\\r\\n\\tstring private _symbol;\\r\\n\\r\\n\\tstruct Fees {\\r\\n\\t\\tuint256 farm;\\r\\n\\t\\tuint256 holder;\\r\\n\\t\\tuint256 liquidity;\\r\\n\\t\\tuint256 marketing;\\r\\n\\t}\\r\\n\\r\\n\\tFees public fees = Fees(46, 17, 27, 10);\\r\\n\\tIUniswapV2Router02 private _uniswapV2Router;\\r\\n\\tIReferenceSystemDeFi private _rsdToken;\\r\\n\\tIWETH private _weth;\\r\\n\\r\\n\\tevent FeesAdjusted(uint256 newHolderFee, uint256 newLiquidityFee, uint256 newFarmFee);\\r\\n\\tevent FeeForFarm(uint256 farmFeeAmount);\\r\\n\\tevent FeeForHolders(uint256 holdersFeeAmount);\\r\\n\\tevent FeeForLiquidity(uint256 liquidityFeeAmount);\\r\\n\\tevent FeeForMarketing(uint256 marketingFeeAmount);\\r\\n\\tevent MustChargeFeesUpdated(bool mustChargeFeesEnabled);\\r\\n\\tevent SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n\\tevent SwapAndLiquifySdrRsd(\\r\\n\\t\\tuint256 tokensSwapped,\\r\\n\\t\\tuint256 rsdReceived,\\r\\n\\t\\tuint256 tokensIntoLiqudity\\r\\n\\t);\\r\\n\\tevent SwapAndLiquifyRsdEth(uint256 rsdTokensSwapped, uint256 ethReceived);\\r\\n\\r\\n\\tmodifier lockTheSwap {\\r\\n\\t\\t_inSwapAndLiquify = true;\\r\\n\\t\\t_;\\r\\n\\t\\t_inSwapAndLiquify = false;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor (\\r\\n\\t\\tstring memory name_,\\r\\n\\t\\tstring memory symbol_,\\r\\n\\t\\taddress uniswapRouterAddress_,\\r\\n\\t\\taddress rsdTokenAddres_,\\r\\n\\t\\taddress farmContractAddress_,\\r\\n\\t\\taddress marketingAddress_,\\r\\n\\t\\taddress[] memory team\\r\\n\\t) {\\r\\n\\t\\t_name = name_;\\r\\n\\t\\t_symbol = symbol_;\\r\\n\\t\\tfarmContractAddress = farmContractAddress_;\\r\\n\\t\\tmarketingAddress = marketingAddress_;\\r\\n\\r\\n\\t\\tuint256 portion = ((10**_decimals).mul(300000)).div((team.length).add(1));\\r\\n\\t\\t_mint(_msgSender(), portion);\\r\\n\\t\\tfor (uint256 i = 0; i < team.length; i = i.add(1)) {\\r\\n\\t\\t\\t_mint(team[i], portion);\\r\\n\\t\\t}\\r\\n\\t\\t_mint(address(this), (10**_decimals).mul(700000));\\r\\n\\r\\n\\t\\t_numTokensSellToAddToLiquidity = _totalSupply.div(10000);\\r\\n\\r\\n\\t\\trsdTokenAddress = rsdTokenAddres_; // 0x61ed1c66239d29cc93c8597c6167159e8f69a823\\r\\n\\t\\t_rsdToken = IReferenceSystemDeFi(rsdTokenAddress);\\r\\n\\r\\n\\t\\t// PancakeSwap Router address: (BSC testnet) 0xD99D1c33F9fC3444f8101754aBC46c52416550D1  (BSC mainnet) V2 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F (Primary) | 0x10ED43C718714eb63d5aA57B78B54704E256024E (Secondary)\\r\\n\\t\\t// Ethereum Mainnet: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D | 0x1d5C6F1607A171Ad52EFB270121331b3039dD83e\\r\\n\\t\\tIUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress_);\\r\\n\\t\\t_weth = IWETH(uniswapV2Router.WETH());\\r\\n\\r\\n\\t  // Create two uniswap pairs for this new token with RSD and with ETH/BNB/MATIC/etc.\\r\\n\\t\\taddress _sdrRsdPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), rsdTokenAddress);\\r\\n\\t\\tif (_sdrRsdPair == address(0))\\r\\n\\t  \\t_sdrRsdPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), rsdTokenAddress);\\r\\n\\t\\tsdrRsdPair = _sdrRsdPair;\\r\\n\\r\\n\\t\\taddress _rsdEthPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(rsdTokenAddress, address(_weth));\\r\\n\\t\\tif (_rsdEthPair == address(0))\\r\\n\\t  \\t_rsdEthPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(rsdTokenAddress, address(_weth));\\r\\n\\t\\trsdEthPair = _rsdEthPair;\\r\\n\\r\\n\\t\\t_uniswapV2Router = uniswapV2Router;\\r\\n\\r\\n\\t\\tdelete _sdrRsdPair;\\r\\n\\t\\tdelete _rsdEthPair;\\r\\n\\t\\tdelete uniswapV2Router;\\r\\n\\t}\\r\\n\\r\\n\\tfunction name() external view virtual returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external view virtual returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external view virtual returns (uint256) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view virtual override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n    return _balancesReflected[account].div(_getRate());\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external view virtual override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external virtual override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n\\r\\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n    require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n    _approve(sender, _msgSender(), currentAllowance.sub(amount));\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\r\\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\t\\t_adjustFeesDynamically();\\r\\n\\r\\n\\t\\tuint256 senderBalance = balanceOf(sender);\\r\\n    require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n    uint256 amountToTransfer;\\r\\n\\t\\tFees memory amounts;\\r\\n\\r\\n    if (sender != address(this)) {\\r\\n      if (mustChargeFees) {\\r\\n        (amountToTransfer, amounts) = _calculateAmountsFromFees(amount, fees);\\r\\n      } else {\\r\\n\\t\\t\\t\\tFees memory zeroFees;\\r\\n        (amountToTransfer, amounts) = (amount, zeroFees);\\r\\n\\t\\t\\t}\\r\\n    } else {\\r\\n      amountToTransfer = amount;\\r\\n    }\\r\\n\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\t\\tbool overMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;\\r\\n\\t\\tif (overMinTokenBalance && !_inSwapAndLiquify && sender != sdrRsdPair && swapAndLiquifyEnabled) {\\r\\n\\t\\t\\tuint256 sdrRsdPoolBalance = _rsdToken.balanceOf(sdrRsdPair);\\r\\n\\t\\t\\t_swapAndLiquify(contractTokenBalance);\\r\\n\\t\\t\\tsdrRsdPoolBalance = _rsdToken.balanceOf(sdrRsdPair);\\r\\n\\t\\t\\t_rsdToken.generateRandomMoreThanOnce();\\r\\n\\t\\t}\\r\\n\\r\\n    uint256 rAmount = reflectedAmount(amount);\\r\\n    uint256 rAmountToTransfer = reflectedAmount(amountToTransfer);\\r\\n\\r\\n    _balancesReflected[sender] = _balancesReflected[sender].sub(rAmount);\\r\\n    _balancesReflected[recipient] = _balancesReflected[recipient].add(rAmountToTransfer);\\r\\n\\r\\n    _balancesReflected[address(this)] = _balancesReflected[address(this)].add(reflectedAmount(amounts.liquidity));\\r\\n\\t\\t_balancesReflected[farmContractAddress] = _balancesReflected[farmContractAddress].add(reflectedAmount(amounts.farm));\\r\\n\\t\\t_balancesReflected[marketingAddress] = _balancesReflected[marketingAddress].add(reflectedAmount(amounts.marketing));\\r\\n\\r\\n    _reflectedSupply = _reflectedSupply.sub(reflectedAmount(amounts.holder));\\r\\n\\r\\n    emit Transfer(sender, recipient, amountToTransfer);\\r\\n\\t\\tif (amounts.farm > 0) {\\r\\n\\t\\t\\temit FeeForFarm(amounts.farm);\\r\\n\\t\\t\\temit Transfer(sender, farmContractAddress, amounts.farm);\\r\\n\\t\\t}\\r\\n    if (amounts.holder > 0) {\\r\\n      emit FeeForHolders(amounts.holder);\\r\\n      emit Transfer(sender, address(this), amounts.holder);\\r\\n    }\\r\\n    if (amounts.liquidity > 0) {\\r\\n    \\temit FeeForLiquidity(amounts.liquidity);\\r\\n      emit Transfer(sender, address(this), amounts.liquidity);\\r\\n    }\\r\\n\\t\\tif (amounts.marketing > 0) {\\r\\n\\t\\t\\temit FeeForMarketing(amounts.marketing);\\r\\n\\t\\t\\temit Transfer(sender, marketingAddress, amounts.marketing);\\r\\n\\t\\t}\\r\\n\\r\\n    delete rAmount;\\r\\n    delete rAmountToTransfer;\\r\\n\\t\\tdelete contractTokenBalance;\\r\\n\\t\\tdelete amountToTransfer;\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    uint256 rAmount = reflectedAmount(amount);\\r\\n    _balancesReflected[account] = _balancesReflected[account].add(rAmount);\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _reflectedSupply = _reflectedSupply.add(rAmount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n    delete rAmount;\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n\\t\\tuint256 accountBalance = balanceOf(account);\\r\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    _balancesReflected[account] = _balancesReflected[account].sub(reflectedAmount(amount));\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    _reflectedSupply = _reflectedSupply.sub(reflectedAmount(amount));\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\\r\\n\\t\\tif (_reflectedSupply < _totalSupply)\\r\\n\\t\\t\\t_reflectedSupply = _getNewReflectedValue();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addLiquidityRsd(uint256 sdrTokenAmount, uint256 rsdTokenAmount) private returns(bool) {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(_uniswapV2Router), sdrTokenAmount);\\r\\n\\t\\t_rsdToken.approve(address(_uniswapV2Router), rsdTokenAmount);\\r\\n\\r\\n    // add the liquidity for SDR/RSD pair\\r\\n    _uniswapV2Router.addLiquidity(\\r\\n      address(this),\\r\\n      rsdTokenAddress,\\r\\n\\t\\t\\tsdrTokenAmount,\\r\\n\\t\\t\\trsdTokenAmount,\\r\\n      0, // slippage is unavoidable\\r\\n      0, // slippage is unavoidable\\r\\n      address(0),\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n\\t\\treturn true;\\r\\n  }\\r\\n\\r\\n  function _addLiquidityRsdEth(uint256 rsdTokenAmount, uint256 ethAmount) private returns(bool) {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _rsdToken.approve(address(_uniswapV2Router), rsdTokenAmount);\\r\\n\\t\\t_weth.approve(address(_uniswapV2Router), ethAmount);\\r\\n\\r\\n    // add the liquidity\\r\\n\\t\\t_uniswapV2Router.addLiquidity(\\r\\n\\t\\t\\trsdTokenAddress,\\r\\n\\t\\t\\taddress(_weth),\\r\\n\\t\\t\\trsdTokenAmount,\\r\\n\\t\\t\\tethAmount,\\r\\n\\t\\t\\t0, // slippage is unavoidable\\r\\n\\t\\t\\t0, // slippage is unavoidable\\r\\n\\t\\t\\taddress(0),\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t\\treturn true;\\r\\n  }\\r\\n\\r\\n\\tfunction _adjustFeesDynamically() private {\\r\\n\\t\\tuint256 currentPoolRate = _getPoolRate();\\r\\n\\t\\tuint256 rate;\\r\\n\\t\\tuint256 total = 100 - fees.marketing;\\r\\n\\t\\tif (currentPoolRate > lastPoolRate) {\\r\\n\\t\\t\\t// DECREASE holderFee, INCREASE liquidityFee and farmFee\\r\\n\\t\\t\\tlastPoolRate = lastPoolRate == 0 ? 1 : lastPoolRate;\\r\\n\\t\\t\\trate = currentPoolRate.mul(100).div(lastPoolRate);\\r\\n\\t\\t\\tif (fees.holder > 2) {\\r\\n\\t\\t\\t\\tfees.holder = fees.holder.sub(2);\\r\\n\\t\\t\\t\\tfees.liquidity = total.sub(fees.holder).sub(fees.farm).sub(1);\\r\\n\\t\\t\\t\\tfees.farm = total.sub(fees.liquidity).sub(fees.holder);\\r\\n\\t\\t\\t\\temit FeesAdjusted(fees.holder, fees.liquidity, fees.farm);\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else if (currentPoolRate < lastPoolRate) {\\r\\n\\t\\t\\t// INCREASE holderFee, DECREASE liquidityFee and farmFee\\r\\n\\t\\t\\tcurrentPoolRate = currentPoolRate == 0 ? 1 : currentPoolRate;\\r\\n\\t\\t\\trate = lastPoolRate.mul(100).div(currentPoolRate);\\r\\n\\t\\t\\tif (fees.liquidity > 1) {\\r\\n\\t\\t\\t\\tfees.liquidity = fees.liquidity.sub(1);\\r\\n\\t\\t\\t\\tfees.farm = fees.farm.sub(1);\\r\\n\\t\\t\\t\\tfees.holder = total.sub(fees.liquidity).sub(fees.farm);\\r\\n\\t\\t\\t\\temit FeesAdjusted(fees.holder, fees.liquidity, fees.farm);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlastPoolRate = currentPoolRate;\\r\\n\\t\\tdelete currentPoolRate;\\r\\n\\t\\tdelete rate;\\r\\n\\t\\tdelete total;\\r\\n\\t}\\r\\n\\r\\n  function _calculateAmountsFromFees(uint256 amount, Fees memory fees_) internal pure returns(uint256, Fees memory) {\\r\\n    uint256 totalFees;\\r\\n\\t\\tFees memory amounts_;\\r\\n\\t\\tamounts_.farm = amount.mul(fees_.farm).div(1000);\\r\\n    amounts_.holder = amount.mul(fees_.holder).div(1000);\\r\\n    amounts_.liquidity = amount.mul(fees_.liquidity).div(1000);\\r\\n\\t\\tamounts_.marketing = amount.mul(fees_.marketing).div(1000);\\r\\n\\t\\ttotalFees = totalFees.add(amounts_.farm).add(amounts_.holder).add(amounts_.liquidity).add(amounts_.marketing);\\r\\n    return (amount.sub(totalFees), amounts_);\\r\\n  }\\r\\n\\r\\n\\tfunction _getNewReflectedValue() private view returns(uint256) {\\r\\n\\t\\tuint256 total = (10**_decimals).mul(1000000);\\r\\n\\t\\tuint256 max = total.mul(10**50);\\r\\n\\t\\tuint256 reflected = (max - (max.mod(total)));\\r\\n\\t\\tdelete max;\\r\\n\\t\\tdelete total;\\r\\n\\t\\treturn reflected;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getPoolRate() private view returns(uint256) {\\r\\n\\t\\tuint256 rsdBalance = _rsdToken.balanceOf(sdrRsdPair);\\r\\n\\t\\tuint256 sdrBalance = balanceOf(sdrRsdPair);\\r\\n\\t\\tsdrBalance = sdrBalance == 0 ? 1 : sdrBalance;\\r\\n\\t\\treturn (rsdBalance.div(sdrBalance));\\r\\n\\t}\\r\\n\\r\\n  function _getRate() private view returns(uint256) {\\r\\n    if (_reflectedSupply > 0 && _totalSupply > 0 && _reflectedSupply >= _totalSupply) {\\r\\n      return _reflectedSupply.div(_totalSupply);\\r\\n    } else {\\r\\n\\t\\t\\tuint256 total = (10**_decimals).mul(1000000);\\r\\n\\t\\t\\tuint256 reflected = _getNewReflectedValue();\\r\\n\\t\\t\\tif (_totalSupply > 0)\\r\\n\\t\\t\\t\\treturn reflected.div(_totalSupply);\\r\\n\\t\\t\\telse\\r\\n      \\treturn reflected.div(total);\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\tfunction burn(uint256 amount) external {\\r\\n\\t\\t_burn(_msgSender(), amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeInitialLiquidityCalledFlag() external onlyOwner {\\r\\n\\t\\t_initialLiquidityCalled = !_initialLiquidityCalled;\\r\\n\\t}\\r\\n\\r\\n\\tfunction disableFeesCharging() external onlyOwner {\\r\\n\\t\\tmustChargeFees = false;\\r\\n\\t\\temit MustChargeFeesUpdated(mustChargeFees);\\r\\n\\t}\\r\\n\\r\\n\\tfunction enableFeesCharging() external onlyOwner {\\r\\n    mustChargeFees = true;\\r\\n\\t\\temit MustChargeFeesUpdated(mustChargeFees);\\r\\n  }\\r\\n\\r\\n\\tfunction provideInitialLiquidity() external onlyOwner {\\r\\n\\t\\trequire(!_initialLiquidityCalled, \\\"SDR: Initial SDR/RSD liquidity already provided!\\\");\\r\\n\\t\\tswapAndLiquifyEnabled = false;\\r\\n\\t\\t_addLiquidityRsd(balanceOf(address(this)), _rsdToken.balanceOf(address(this)));\\r\\n\\t\\t_initialLiquidityCalled = true;\\r\\n\\t\\tswapAndLiquifyEnabled = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction reflectedBalance(address account) external view returns(uint256) {\\r\\n\\t\\treturn _balancesReflected[account];\\r\\n\\t}\\r\\n\\r\\n  function reflectedAmount(uint256 amount) public view returns(uint256) {\\r\\n    return amount.mul(_getRate());\\r\\n  }\\r\\n\\r\\n\\tfunction _swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n    uint256 rsdPart = contractTokenBalance.div(4).mul(3);\\r\\n    uint256 sdrPart = contractTokenBalance.sub(rsdPart);\\r\\n    uint256 rsdInitialBalance = _rsdToken.balanceOf(address(this));\\r\\n\\t\\tuint256 ethInitialBalance = address(this).balance;\\r\\n\\r\\n\\t\\tSdrHelper sdrHelper;\\r\\n\\t\\tif (sdrHelperAddress == address(0)) {\\r\\n\\t\\t\\tsdrHelper = new SdrHelper(address(this));\\r\\n\\t\\t\\tsdrHelperAddress = address(sdrHelper);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (_swapTokensForRsd(rsdPart)) {\\r\\n\\t\\t\\tsdrHelper = SdrHelper(sdrHelperAddress);\\r\\n\\t\\t\\tsdrHelper.withdrawTokensSent(rsdTokenAddress);\\r\\n\\r\\n\\t    uint256 rsdBalance = _rsdToken.balanceOf(address(this)).sub(rsdInitialBalance);\\r\\n\\t    if (_addLiquidityRsd(sdrPart, rsdBalance.div(3)))\\r\\n\\t\\t\\t\\temit SwapAndLiquifySdrRsd(rsdPart, rsdBalance.div(3), sdrPart);\\r\\n\\r\\n\\t\\t\\trsdBalance = _rsdToken.balanceOf(address(this)).sub(rsdInitialBalance);\\r\\n\\t\\t\\tif (_swapRsdTokensForEth(rsdBalance.div(2))) {\\r\\n\\t\\t\\t\\tsdrHelper.withdrawTokensSent(address(_weth));\\r\\n\\r\\n\\t\\t\\t\\tuint256 newEthBalance = IERC20(address(_weth)).balanceOf(address(this)).sub(ethInitialBalance);\\r\\n\\t\\t\\t\\tif (_addLiquidityRsdEth(rsdBalance.div(2), newEthBalance))\\r\\n\\t\\t\\t\\t\\temit SwapAndLiquifyRsdEth(rsdBalance.div(2), newEthBalance);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n  }\\r\\n\\r\\n\\tfunction _swapTokensForRsd(uint256 tokenAmount) private returns(bool) {\\r\\n    // generate the uniswap pair path of SDR -> RSD\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = rsdTokenAddress;\\r\\n\\r\\n    _approve(address(this), address(_uniswapV2Router), tokenAmount);\\r\\n\\r\\n    try _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n      tokenAmount,\\r\\n      0, // accept any amount of RSD\\r\\n      path,\\r\\n      sdrHelperAddress,\\r\\n      block.timestamp\\r\\n    ) { return true; } catch { return false; }\\r\\n  }\\r\\n\\r\\n\\tfunction _swapRsdTokensForEth(uint256 rsdTokenAmount) private returns(bool) {\\r\\n    // generate the uniswap pair path of RSD -> WETH\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = rsdTokenAddress;\\r\\n    path[1] = address(_weth);\\r\\n\\r\\n\\t\\t_rsdToken.approve(address(_uniswapV2Router), rsdTokenAmount.add(1));\\r\\n\\r\\n    // make the swap\\r\\n\\t\\ttry _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\trsdTokenAmount,\\r\\n\\t\\t\\t0, // accept any amount of RSD\\r\\n\\t\\t\\tpath,\\r\\n\\t\\t\\tsdrHelperAddress,\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t) { return true; } catch { return false; }\\r\\n  }\\r\\n\\r\\n\\tfunction setFarmContractAddress(address farmContractAddress_) external onlyOwner {\\r\\n\\t\\tfarmContractAddress = farmContractAddress_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMarketingAddress(address marketingAddress_) external onlyOwner {\\r\\n\\t\\tmarketingAddress = marketingAddress_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setSwapAndLiquifyEnabled(bool enabled_) external onlyOwner {\\r\\n\\t\\tswapAndLiquifyEnabled = enabled_;\\r\\n\\t\\temit SwapAndLiquifyEnabledUpdated(enabled_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawNativeCurrencySent(address payable account) external onlyOwner {\\r\\n\\t\\trequire(address(this).balance > 0, \\\"SDR: does not have any balance\\\");\\r\\n\\t\\taccount.transfer(address(this).balance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawTokensSent(address tokenAddress) external onlyOwner {\\r\\n\\t\\tIERC20 token = IERC20(tokenAddress);\\r\\n\\t\\tif (token.balanceOf(address(this)) > 0)\\r\\n\\t\\t\\ttoken.transfer(owner(), token.balanceOf(address(this)));\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/IReferenceSystemDeFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IReferenceSystemDeFi is IERC20 {\\r\\n    function burn(uint256 amount) external;\\r\\n    function generateRandomMoreThanOnce() external;\\r\\n    function getCrowdsaleDuration() external view returns(uint128);\\r\\n    function getExpansionRate() external view returns(uint16);\\r\\n    function getSaleRate() external view returns(uint16);\\r\\n    function log_2(uint x) external pure returns (uint y);\\r\\n    function mintForStakeHolder(address stakeholder, uint256 amount) external;\\r\\n    function obtainRandomNumber(uint256 modulus) external;\\r\\n}\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n\\t\\tfunction approve(address to, uint amount) external returns (bool);\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/SdrHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SdrHelper is Context {\\n\\n\\taddress immutable private sdrTokenAddress;\\n\\n\\tmodifier fromSdrToken {\\n\\t\\trequire(_msgSender() == sdrTokenAddress, \\\"SDR Helper: only SDR token contract can call this function\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address sdrTokenAddress_) {\\n\\t\\tsdrTokenAddress = sdrTokenAddress_;\\n\\t}\\n\\n\\tfunction withdrawTokensSent(address tokenAddress) external fromSdrToken {\\n\\t\\tIERC20 token = IERC20(tokenAddress);\\n\\t\\tif (token.balanceOf(address(this)) > 0)\\n\\t\\t\\ttoken.transfer(_msgSender(), token.balanceOf(address(this)));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rsdTokenAddres_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAddress_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"team\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeForFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeForHolders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeForLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeForMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHolderFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFarmFee\",\"type\":\"uint256\"}],\"name\":\"FeesAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mustChargeFeesEnabled\",\"type\":\"bool\"}],\"name\":\"MustChargeFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rsdTokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyRsdEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rsdReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifySdrRsd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeInitialLiquidityCalledFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFeesCharging\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFeesCharging\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"farm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mustChargeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provideInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflectedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reflectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rsdEthPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rsdTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdrHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdrRsdPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmContractAddress_\",\"type\":\"address\"}],\"name\":\"setFarmContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress_\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawNativeCurrencySent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokensSent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SystemDeFiReference","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000061ed1c66239d29cc93c8597c6167159e8f69a823000000000000000000000000aada1359f96ff3963f08c9d754f175279f7381230000000000000000000000004a0a229eae7261f0226950082e6fa3445115f24e0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001953797374656d204465466920666f72205265666572656e6365000000000000000000000000000000000000000000000000000000000000000000000000000003534452000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000003b9d4a19a49b24d541867e225ac42389a924d8610000000000000000000000009fdaac5ff394934f3b5a3b64bd91cbc2ef1434ff0000000000000000000000004d3bce3e0172d1754a468a16a2f76bebf77ca46600000000000000000000000015ebfe020a525f9360d6e28379fc300455bb66d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}