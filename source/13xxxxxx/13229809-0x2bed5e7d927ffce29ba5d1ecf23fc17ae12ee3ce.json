{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: none\r\npragma solidity ^0.8.4; \r\n\r\ncontract Owned {\r\n    \r\n    /// Modifier for owner only function call\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    address public owner;\r\n   \r\n    /// Function to transfer ownership \r\n    /// Only owner can call this function\r\n    function changeOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract ERC20 {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping (address=>uint256) internal balances;\r\n    mapping (address=>mapping (address=>uint256)) internal allowed;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    /// Returns the token balance of the address which is passed in parameter\r\n    function balanceOf(address _owner) view public  returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address _to, uint256 _amount) internal virtual {\r\n        \r\n        require(_to != address(0), \"Transfer to zero address\");\r\n        require (balances[msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n        balances[msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n    }\r\n  \r\n     /**\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function _transferFrom(address _from,address _to,uint256 _amount) internal virtual {\r\n      \r\n        require(_from != address(0), \"Sender cannot be zero address\");\r\n        require(_to != address(0), \"Recipient cannot be zero address\");\r\n        require (balances[_from]>=_amount && allowed[_from][msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n        balances[_from]-=_amount;\r\n        allowed[_from][msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n  \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(_spender != address(0), \"Approval for zero address\");\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  Returns allowance for an address approved for contract\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply += amount;\r\n        balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */ \r\n    function _burn(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        balances[account] = accountBalance - amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract Taisha  is Owned, ERC20 {\r\n    \r\n    // Variables\r\n    bool locked;\r\n    uint lockTime;\r\n    \r\n    struct UnlockAddresses {\r\n        bool excluded;\r\n    }\r\n    \r\n    struct TimeOfTransfer {\r\n        uint transferTime;\r\n        uint releaseTime;\r\n    }\r\n    \r\n    mapping(address => UnlockAddresses) public unlocked;\r\n    mapping(address => TimeOfTransfer) public time;\r\n    \r\n    /**\r\n     * @dev Sets symbol, name, decimals and totalSupply of the token\r\n     * \r\n     * - Sets msg.sender as the owner of the contract\r\n     * - Transfers totalSupply to owner\r\n     */ \r\n    constructor()   {\r\n        symbol = \"TAIS\";\r\n        name = \"TAISHA\";\r\n        decimals = 18;                                    \r\n        totalSupply = 115000000 * 10**18;           \r\n       \r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n        lockTime = 10 minutes;\r\n        locked = false;\r\n        unlocked[owner].excluded = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calls mint function from ERC20 contract\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - only owner can call this function\r\n     * - 'to' address cannot be zero address\r\n     */\r\n    function mint(address to, uint amount) external onlyOwner {\r\n        require(to != address(0), \"No mint to zero address\");\r\n        _mint(to, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calls burn function from ERC20 contract\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - only owner can call this function\r\n     * - 'from' address cannot be zero address\r\n     */\r\n    function burn(uint amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n    // Set token lock status\r\n    function setLock(bool lockStatus) public onlyOwner returns (bool) {\r\n        locked = lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    // Transfer function with time check\r\n    function transfer(address to, uint amount) public returns(bool) {\r\n        \r\n        address from = msg.sender;\r\n        if(unlocked[from].excluded == true){\r\n            _transfer(to, amount);\r\n            return true;\r\n        }\r\n        else{\r\n            if(locked == true){\r\n                uint _releaseTime = time[from].transferTime + lockTime;\r\n                require(_releaseTime <= block.timestamp, \"Release time not reached\");\r\n                _transfer(to, amount);\r\n                time[to].transferTime = block.timestamp;\r\n            }\r\n            else if(locked == false){\r\n                _transfer(to, amount);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // TransferFrom function with time lock\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        if(unlocked[from].excluded == true){\r\n            _transferFrom(from, to, amount);\r\n            return true;\r\n        }\r\n        else{\r\n            if(locked == true){\r\n                uint _releaseTime = time[from].transferTime + lockTime;\r\n                require(_releaseTime <= block.timestamp, \"Release time not reached\");\r\n                _transferFrom(from, to, amount);\r\n                time[to].transferTime = block.timestamp;\r\n            }\r\n            else if(locked == false){\r\n                _transferFrom(from, to, amount);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner adds user which don't get transfer time lock \r\n     */\r\n    function addUnlockedAddress(address user) public onlyOwner returns (bool) {\r\n        unlocked[user].excluded = true;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner removes user from the excluded list \r\n     */\r\n    function removeUnlockedAddress(address user) public onlyOwner returns (bool) {\r\n        unlocked[user].excluded = false;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner sets the lock time of tokens\r\n     */\r\n    function setLockTime(uint _time) public onlyOwner {\r\n        lockTime = _time;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addUnlockedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUnlockedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Taisha","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb00f85dc6a623eda4dc620cfa3b2f44fb84f702c45474467490a111bbcd0bfa"}]}