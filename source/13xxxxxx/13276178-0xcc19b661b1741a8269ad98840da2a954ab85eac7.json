{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlKeeper.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport {IKeeperCompatibleInterface} from \\\"./IKeeperCompatibleInterface.sol\\\";\\nimport {IAlchemist} from \\\"./IAlchemist.sol\\\";\\nimport {ITransmuter} from \\\"./ITransmuter.sol\\\";\\nimport {IVaultAdaptor} from \\\"./IVaultAdaptor.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract AlKeeper is IKeeperCompatibleInterface, Ownable {\\n    using SafeMath for uint256;\\n    \\n    enum TASK {\\n        HARVEST_TRANSMUTER,\\n        HARVEST_ALCHEMIST,\\n        FLUSH_ALCHEMIST\\n    }\\n\\n    IAlchemist public alchemist;\\n    ITransmuter public transmuter;\\n    IERC20 public underlying;\\n    address public keeperRegistry;\\n\\n    TASK public nextTask;\\n    mapping(TASK => uint256) public lastCallForTask;\\n\\n    bool public paused;\\n\\n    uint256 public keeperDelay;\\n\\n    constructor(IAlchemist _alchemist, ITransmuter _transmuter, IERC20 _underlying, address _keeperRegistry) {\\n        alchemist = _alchemist;\\n        transmuter = _transmuter;\\n        underlying = _underlying;\\n        keeperRegistry = _keeperRegistry;\\n        nextTask = TASK.HARVEST_TRANSMUTER;\\n        keeperDelay = 1 days;\\n    }\\n\\n    modifier onlyKeeperRegistry() {\\n        require(msg.sender == keeperRegistry, \\\"caller not keeper registry\\\");\\n        _;\\n    }\\n\\n    function setAlchemist(IAlchemist newAlchemist) external onlyOwner() {\\n        alchemist = newAlchemist;\\n    }\\n\\n    function setTransmuter(ITransmuter newTransmuter) external onlyOwner() {\\n        transmuter = newTransmuter;\\n    }\\n\\n    function setPause(bool pauseState) external onlyOwner() {\\n        paused = pauseState;\\n    }\\n\\n    function setKeeperDelay(uint256 newKeeperDelay) external onlyOwner() {\\n        keeperDelay = newKeeperDelay;\\n    }\\n\\n    function setKeeperRegistry(address _keeperRegistry) external onlyOwner() {\\n        keeperRegistry = _keeperRegistry;\\n    }\\n\\n    function recoverFunds(IERC20 token) external onlyOwner() {\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev check if the nextTask needs to be performed\\n    ///\\n    /// Returns FALSE if 1 day has not passed since last call\\n    /// Returns FALSE if certain economic criteria are not met\\n    ///\\n    /// @param checkData input data to check (not used)\\n    ///\\n    /// @return upkeepNeeded if upkeep is needed\\n    /// @return performData the task to perform\\n    function checkUpkeep(bytes calldata checkData) external view override returns (\\n        bool upkeepNeeded,\\n        bytes memory performData\\n    ) {\\n        if (!paused && block.timestamp.sub(lastCallForTask[nextTask]) >= keeperDelay) {\\n            return (true, abi.encode(nextTask));\\n        } else {\\n            return (false, abi.encode(0x0));\\n        }\\n    }\\n\\n    /// @dev perform a task that needs upkeep\\n    ///\\n    /// @param performData the task to be performed\\n    function performUpkeep(bytes calldata performData) external override onlyKeeperRegistry() {\\n        TASK task;\\n        (task) = abi.decode(performData, (TASK));\\n        if (!paused && block.timestamp.sub(lastCallForTask[task]) >= keeperDelay) {\\n            if (task == TASK.HARVEST_TRANSMUTER) {\\n                harvestTransmuter();\\n            } else if (task == TASK.HARVEST_ALCHEMIST) {\\n                harvestAlchemist();\\n            } else if (task == TASK.FLUSH_ALCHEMIST) {\\n                flushAlchemist();\\n            }\\n        }\\n    }\\n\\n    function harvestTransmuter() internal {\\n        if (!transmuter.pause()) {\\n            uint256 vaultId = transmuter.vaultCount() - 1;\\n            address vaultAdaptor = transmuter.getVaultAdapter(vaultId);\\n            uint256 vaultTotalDep = transmuter.getVaultTotalDeposited(vaultId);\\n            uint256 totalValue = IVaultAdaptor(vaultAdaptor).totalValue();\\n            if (totalValue > vaultTotalDep) {\\n                transmuter.harvest(vaultId);\\n            }\\n        }\\n        nextTask = TASK.HARVEST_ALCHEMIST;\\n        lastCallForTask[TASK.HARVEST_TRANSMUTER] = block.timestamp;\\n    }\\n\\n    function harvestAlchemist() internal {\\n        if (!alchemist.emergencyExit()) {\\n            uint256 vaultId = alchemist.vaultCount() - 1;\\n            address vaultAdaptor = alchemist.getVaultAdapter(vaultId);\\n            uint256 vaultTotalDep = alchemist.getVaultTotalDeposited(vaultId);\\n            uint256 totalValue = IVaultAdaptor(vaultAdaptor).totalValue();\\n            if (totalValue > vaultTotalDep) {\\n                alchemist.harvest(vaultId);\\n            }\\n        }\\n        nextTask = TASK.FLUSH_ALCHEMIST;\\n        lastCallForTask[TASK.HARVEST_ALCHEMIST] = block.timestamp;\\n    }\\n\\n    function flushAlchemist() internal {\\n        if (!alchemist.emergencyExit() && underlying.balanceOf(address(alchemist)) > 0) {\\n            alchemist.flush();\\n        }\\n        nextTask = TASK.HARVEST_TRANSMUTER;\\n        lastCallForTask[TASK.FLUSH_ALCHEMIST] = block.timestamp;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IKeeperCompatibleInterface.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\ninterface IKeeperCompatibleInterface {\\n    function checkUpkeep(bytes calldata checkData) external\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory performData\\n        );\\n\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/IAlchemist.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport {IVaultHolder} from \\\"./IVaultHolder.sol\\\";\\n\\ninterface IAlchemist is IVaultHolder {\\n    function flush() external;\\n    function emergencyExit() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/ITransmuter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport {IVaultHolder} from \\\"./IVaultHolder.sol\\\";\\n\\ninterface ITransmuter is IVaultHolder {\\n    function pause() external view returns (bool);\\n    function setKeepers(address[] calldata _keepers, bool[] calldata _states) external;\\n}\"\r\n    },\r\n    \"contracts/IVaultAdaptor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultAdaptor {\\n    function underlying() external view returns (IERC20);\\n    function totalValue() external view returns (uint256);\\n    function totalDeposited() external view returns (uint256);\\n    function harvest(address rewards) external;\\n    function deposit(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IVaultHolder.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\ninterface IVaultHolder {\\n    function harvest(uint256 vaultId) external;\\n    function vaultCount() external view returns (uint256);\\n    function getVaultAdapter(uint256 vaultId) external view returns (address);\\n    function getVaultTotalDeposited(uint256 vaultId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"_alchemist\",\"type\":\"address\"},{\"internalType\":\"contract ITransmuter\",\"name\":\"_transmuter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AlKeeper.TASK\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastCallForTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTask\",\"outputs\":[{\"internalType\":\"enum AlKeeper.TASK\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlchemist\",\"name\":\"newAlchemist\",\"type\":\"address\"}],\"name\":\"setAlchemist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newKeeperDelay\",\"type\":\"uint256\"}],\"name\":\"setKeeperDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"}],\"name\":\"setKeeperRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransmuter\",\"name\":\"newTransmuter\",\"type\":\"address\"}],\"name\":\"setTransmuter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"internalType\":\"contract ITransmuter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AlKeeper","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c21d353ff4ee73c572425697f4f5aad2109fe35b000000000000000000000000ee69bd81bd056339368c97c4b2837b4dc4b796e70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000007b3ec232b08bd7b4b3305be0c044d907b2df960b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}