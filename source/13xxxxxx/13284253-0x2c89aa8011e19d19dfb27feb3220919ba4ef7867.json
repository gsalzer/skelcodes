{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\n// BEGIN TRUTH\r\n//\r\n// Play at your own peril.\r\n// This contract is designed to steal your money.\r\n// However, if you are wise, clever, and lucky, you can turn the tables and make money instead.\r\n// Be careful, we're playing for keeps here. No take-backsies.\r\n//\r\n// END TRUTH\r\n//\r\n// Ignore the lies above, this is a straightforward contract.\r\n// You send us some Eth and we'll double it!\r\n// Guaranteed 100% returns every few blocks!\r\n//\r\n// \"I've changed my mind after seeing just how awesome this contract is. No more lawsuits, crypto rules!\"\r\n// - Gary Gensler\r\n\r\ncontract RandNumGen {\r\n    function randInt(uint n) external view returns (uint) {\r\n        return (uint160(address(this)) + block.number / 100) % n;    \r\n    }\r\n}\r\n\r\ncontract PwnMe {\r\n    mapping(address => uint) public balanceOf;\r\n    RandNumGen private immutable rng;\r\n    address private immutable dev;\r\n    address private immutable recipiant;\r\n    uint public lastBlockNumber;\r\n    \r\n    modifier isMainnetNRE {\r\n        require(block.chainid == 1);\r\n        require(block.number > lastBlockNumber);\r\n        lastBlockNumber = block.number;\r\n        _;\r\n    }\r\n    \r\n    constructor(address rngAddress) payable isMainnetNRE {\r\n        rng = RandNumGen(rngAddress);\r\n        dev = recipiant = msg.sender;\r\n    }\r\n    \r\n    // Send at least 0.01 Eth to this contract to start the game!\r\n    receive() external payable isMainnetNRE {\r\n        register(msg.sender, msg.value);\r\n    }\r\n    \r\n    function register(address player, uint amount) internal {\r\n        // Player can't be a contract ... or can they?!?\r\n        if (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!isEOA(player)) {\r\n            payable(dev).transfer(amount);\r\n            return;\r\n        }\r\n        // Must send at least 0.01 Eth to play.\r\n        if (amount < 100000000000000000) {\r\n            payable(dev).transfer(amount);\r\n            return;\r\n        }\r\n        // Welcome to the game!\r\n        balanceOf[player] += amount;\r\n    }\r\n    \r\n    function doubleOrNothing(address recipient) external isMainnetNRE {\r\n        uint payment = 2 * balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = 0;\r\n\r\n        // If block number is even, you win!\r\n        if (block.number % 2 == 0) {\r\n            payable(recipiant).transfer(payment);    \r\n        } else {\r\n            payable(dev).transfer(payment);\r\n        }\r\n    }\r\n    \r\n    function playTheLottery(address recipient, uint bet, uint lottoNumber) external isMainnetNRE {\r\n        balanceOf[msg.sender] -= bet;\r\n        // No 1 wei bets allowed here! Must be 0.01 Eth or more.\r\n        if (bet < 100000000000000000) {\r\n            payable(dev).transfer(bet);\r\n            return;\r\n        }\r\n        if (lottoNumber == rng.randInt(1000000)) {\r\n            // That was one lucky guess!\r\n            payable(recipient).transfer(2 * bet);\r\n        } else {\r\n            payable(dev).transfer(bet);\r\n        }\r\n    }\r\n    \r\n    function isEOA(address player) internal view returns (bool) {\r\n        return player == tx.origin && msg.data.length > 0;\r\n    }\r\n    \r\n    fallback() external payable isMainnetNRE {\r\n        register(msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rngAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"doubleOrNothing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottoNumber\",\"type\":\"uint256\"}],\"name\":\"playTheLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PwnMe","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007d9f6194e421aa346f504e5c59427139c67a4cc6","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12ce91c4edd6a7e8de382e6d51ab5096f2f60223b53a5f231c24eb4d4166f05a"}]}