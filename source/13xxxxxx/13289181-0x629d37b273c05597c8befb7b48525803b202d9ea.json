{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NurseRaid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/INurseRaid.sol\\\";\\r\\nimport \\\"./libraries/MaidPower.sol\\\";\\r\\n\\r\\ncontract NurseRaid is Ownable, MaidPower, INurseRaid {\\r\\n    struct Raid {\\r\\n        uint256 entranceFee;\\r\\n        uint256 nursePart;\\r\\n        uint256 maxRewardCount;\\r\\n        uint256 duration;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n\\r\\n    struct Challenger {\\r\\n        uint256 enterBlock;\\r\\n        IMaids maids;\\r\\n        uint256 maidId;\\r\\n    }\\r\\n\\r\\n    struct MaidEfficacy {\\r\\n        uint256 numerator;\\r\\n        uint256 denominator;\\r\\n    }\\r\\n\\r\\n    Raid[] public raids;\\r\\n    mapping(uint256 => mapping(address => Challenger)) public challengers;\\r\\n\\r\\n    mapping(IMaids => bool) public override isMaidsApproved;\\r\\n\\r\\n    IMaidCoin public immutable override maidCoin;\\r\\n    IMaidCafe public override maidCafe;\\r\\n    INursePart public immutable override nursePart;\\r\\n    ICloneNurses public immutable override cloneNurses;\\r\\n    IRNG public override rng;\\r\\n\\r\\n    MaidEfficacy public override maidEfficacy = MaidEfficacy({numerator: 1, denominator: 1000});\\r\\n\\r\\n    constructor(\\r\\n        IMaidCoin _maidCoin,\\r\\n        IMaidCafe _maidCafe,\\r\\n        INursePart _nursePart,\\r\\n        ICloneNurses _cloneNurses,\\r\\n        IRNG _rng,\\r\\n        address _sushiGirls,\\r\\n        address _lingerieGirls\\r\\n    ) MaidPower(_sushiGirls, _lingerieGirls) {\\r\\n        maidCoin = _maidCoin;\\r\\n        maidCafe = _maidCafe;\\r\\n        nursePart = _nursePart;\\r\\n        cloneNurses = _cloneNurses;\\r\\n        rng = _rng;\\r\\n    }\\r\\n\\r\\n    function changeMaidEfficacy(uint256 _numerator, uint256 _denominator) external onlyOwner {\\r\\n        maidEfficacy = MaidEfficacy({numerator: _numerator, denominator: _denominator});\\r\\n        emit ChangeMaidEfficacy(_numerator, _denominator);\\r\\n    }\\r\\n\\r\\n    function setMaidCafe(IMaidCafe _maidCafe) external onlyOwner {\\r\\n        maidCafe = _maidCafe;\\r\\n    }\\r\\n\\r\\n    function approveMaids(IMaids[] calldata maids) public onlyOwner {\\r\\n        for (uint256 i = 0; i < maids.length; i += 1) {\\r\\n            isMaidsApproved[maids[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function disapproveMaids(IMaids[] calldata maids) public onlyOwner {\\r\\n        for (uint256 i = 0; i < maids.length; i += 1) {\\r\\n            isMaidsApproved[maids[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyApprovedMaids(IMaids maids) {\\r\\n        require(address(maids) == address(0) || isMaidsApproved[maids], \\\"NurseRaid: The maids is not approved\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeRNG(address addr) external onlyOwner {\\r\\n        rng = IRNG(addr);\\r\\n    }\\r\\n\\r\\n    function raidCount() external view override returns (uint256) {\\r\\n        return raids.length;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        uint256[] calldata entranceFees,\\r\\n        uint256[] calldata _nurseParts,\\r\\n        uint256[] calldata maxRewardCounts,\\r\\n        uint256[] calldata durations,\\r\\n        uint256[] calldata endBlocks\\r\\n    ) external override onlyOwner returns (uint256 id) {\\r\\n        uint256 length = entranceFees.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(maxRewardCounts[i] < 255, \\\"NurseRaid: Invalid number\\\");\\r\\n            {   // scope to avoid stack too deep errors\\r\\n                (uint256 nursePartCount, uint256 nurseDestroyReturn, , ) = cloneNurses.nurseTypes(_nurseParts[i]);\\r\\n\\r\\n                require(\\r\\n                    entranceFees[i] >= (nurseDestroyReturn * maxRewardCounts[i]) / nursePartCount,\\r\\n                    \\\"NurseRaid: Fee should be higher\\\"\\r\\n                );\\r\\n            }\\r\\n            id = raids.length;\\r\\n            raids.push(\\r\\n                Raid({\\r\\n                    entranceFee: entranceFees[i],\\r\\n                    nursePart: _nurseParts[i],\\r\\n                    maxRewardCount: maxRewardCounts[i],\\r\\n                    duration: durations[i],\\r\\n                    endBlock: endBlocks[i]\\r\\n                })\\r\\n            );\\r\\n            emit Create(id, entranceFees[i], _nurseParts[i], maxRewardCounts[i], durations[i], endBlocks[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enter(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId\\r\\n    ) public override onlyApprovedMaids(maids) {\\r\\n        Raid storage raid = raids[id];\\r\\n        require(block.number < raid.endBlock, \\\"NurseRaid: Raid has ended\\\");\\r\\n        require(challengers[id][msg.sender].enterBlock == 0, \\\"NurseRaid: Raid is in progress\\\");\\r\\n        challengers[id][msg.sender] = Challenger({enterBlock: block.number, maids: maids, maidId: maidId});\\r\\n        if (address(maids) != address(0)) {\\r\\n            maids.transferFrom(msg.sender, address(this), maidId);\\r\\n        }\\r\\n        uint256 _entranceFee = raid.entranceFee;\\r\\n        maidCoin.transferFrom(msg.sender, address(this), _entranceFee);\\r\\n        uint256 feeToCafe = (_entranceFee * 3) / 1000;\\r\\n        _feeTransfer(feeToCafe);\\r\\n        maidCoin.burn(_entranceFee - feeToCafe);\\r\\n        emit Enter(msg.sender, id, maids, maidId);\\r\\n    }\\r\\n\\r\\n    function enterWithPermit(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId,\\r\\n        uint256 deadline,\\r\\n        uint8 v1,\\r\\n        bytes32 r1,\\r\\n        bytes32 s1,\\r\\n        uint8 v2,\\r\\n        bytes32 r2,\\r\\n        bytes32 s2\\r\\n    ) external override {\\r\\n        maidCoin.permit(msg.sender, address(this), raids[id].entranceFee, deadline, v1, r1, s1);\\r\\n        if (address(maids) != address(0)) {\\r\\n            maids.permit(msg.sender, maidId, deadline, v2, r2, s2);\\r\\n        }\\r\\n        enter(id, maids, maidId);\\r\\n    }\\r\\n\\r\\n    function enterWithPermitAll(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId,\\r\\n        uint256 deadline,\\r\\n        uint8 v1,\\r\\n        bytes32 r1,\\r\\n        bytes32 s1,\\r\\n        uint8 v2,\\r\\n        bytes32 r2,\\r\\n        bytes32 s2\\r\\n    ) external override {\\r\\n        maidCoin.permit(msg.sender, address(this), type(uint256).max, deadline, v1, r1, s1);\\r\\n        if (address(maids) != address(0)) {\\r\\n            maids.permitAll(msg.sender, address(this), deadline, v2, r2, s2);\\r\\n        }\\r\\n        enter(id, maids, maidId);\\r\\n    }\\r\\n\\r\\n    function checkDone(uint256 id) public view override returns (bool) {\\r\\n        Raid memory raid = raids[id];\\r\\n        Challenger memory challenger = challengers[id][msg.sender];\\r\\n\\r\\n        return _checkDone(raid.duration, challenger);\\r\\n    }\\r\\n\\r\\n    function _checkDone(uint256 duration, Challenger memory challenger) internal view returns (bool) {\\r\\n        if (address(challenger.maids) == address(0)) {\\r\\n            return block.number - challenger.enterBlock >= duration;\\r\\n        } else {\\r\\n            return\\r\\n                block.number - challenger.enterBlock >=\\r\\n                duration -\\r\\n                    ((duration * powerOfMaids(challenger.maids, challenger.maidId) * maidEfficacy.numerator) /\\r\\n                        maidEfficacy.denominator);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exit(uint256[] calldata ids) external override {\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            Challenger memory challenger = challengers[ids[i]][msg.sender];\\r\\n            require(challenger.enterBlock != 0, \\\"NurseRaid: Not participating in the raid\\\");\\r\\n\\r\\n            Raid storage raid = raids[ids[i]];\\r\\n\\r\\n            if (_checkDone(raid.duration, challenger)) {\\r\\n                uint256 rewardCount = _randomReward(ids[i], raid.maxRewardCount, msg.sender);\\r\\n                nursePart.mint(msg.sender, raid.nursePart, rewardCount);\\r\\n            }\\r\\n\\r\\n            if (address(challenger.maids) != address(0)) {\\r\\n                challenger.maids.transferFrom(address(this), msg.sender, challenger.maidId);\\r\\n            }\\r\\n\\r\\n            delete challengers[ids[i]][msg.sender];\\r\\n            emit Exit(msg.sender, ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _randomReward(\\r\\n        uint256 _id,\\r\\n        uint256 _maxRewardCount,\\r\\n        address sender\\r\\n    ) internal returns (uint256 rewardCount) {\\r\\n        uint256 totalNumber = 2 * (2**_maxRewardCount - 1);\\r\\n        uint256 randomNumber = (rng.generateRandomNumber(_id, sender) % totalNumber) + 1;\\r\\n\\r\\n        uint256 ceil;\\r\\n        uint256 i = 0;\\r\\n\\r\\n        while (randomNumber > ceil) {\\r\\n            i += 1;\\r\\n            ceil = (2**(_maxRewardCount + 1)) - (2**(_maxRewardCount + 1 - i));\\r\\n        }\\r\\n\\r\\n        rewardCount = i;\\r\\n    }\\r\\n\\r\\n    function _feeTransfer(uint256 feeToCafe) internal {\\r\\n        maidCoin.transfer(address(maidCafe), feeToCafe);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INurseRaid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMaids.sol\\\";\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./IMaidCafe.sol\\\";\\r\\nimport \\\"./INursePart.sol\\\";\\r\\nimport \\\"./ICloneNurses.sol\\\";\\r\\nimport \\\"./IRNG.sol\\\";\\r\\n\\r\\ninterface INurseRaid {\\r\\n    event Create(\\r\\n        uint256 indexed id,\\r\\n        uint256 entranceFee,\\r\\n        uint256 indexed nursePart,\\r\\n        uint256 maxRewardCount,\\r\\n        uint256 duration,\\r\\n        uint256 endBlock\\r\\n    );\\r\\n    event Enter(address indexed challenger, uint256 indexed id, IMaids indexed maids, uint256 maidId);\\r\\n    event Exit(address indexed challenger, uint256 indexed id);\\r\\n    event ChangeMaidEfficacy(uint256 numerator, uint256 denominator);\\r\\n\\r\\n    function isMaidsApproved(IMaids maids) external view returns (bool);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function maidCafe() external view returns (IMaidCafe);\\r\\n\\r\\n    function nursePart() external view returns (INursePart);\\r\\n\\r\\n    function rng() external view returns (IRNG);\\r\\n\\r\\n    function cloneNurses() external view returns (ICloneNurses);\\r\\n\\r\\n    function maidEfficacy() external view returns (uint256, uint256);\\r\\n\\r\\n    function raidCount() external view returns (uint256);\\r\\n\\r\\n    function create(\\r\\n        uint256[] calldata entranceFee,\\r\\n        uint256[] calldata nursePart,\\r\\n        uint256[] calldata maxRewardCount,\\r\\n        uint256[] calldata duration,\\r\\n        uint256[] calldata endBlock\\r\\n    ) external returns (uint256 id);\\r\\n\\r\\n    function enter(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId\\r\\n    ) external;\\r\\n\\r\\n    function enterWithPermit(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId,\\r\\n        uint256 deadline,\\r\\n        uint8 v1,\\r\\n        bytes32 r1,\\r\\n        bytes32 s1,\\r\\n        uint8 v2,\\r\\n        bytes32 r2,\\r\\n        bytes32 s2\\r\\n    ) external;\\r\\n\\r\\n    function enterWithPermitAll(\\r\\n        uint256 id,\\r\\n        IMaids maids,\\r\\n        uint256 maidId,\\r\\n        uint256 deadline,\\r\\n        uint8 v1,\\r\\n        bytes32 r1,\\r\\n        bytes32 s1,\\r\\n        uint8 v2,\\r\\n        bytes32 r2,\\r\\n        bytes32 s2\\r\\n    ) external;\\r\\n\\r\\n    function checkDone(uint256 id) external view returns (bool);\\r\\n\\r\\n    function exit(uint256[] calldata ids) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/MaidPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IMaids.sol\\\";\\r\\nimport \\\"../interfaces/ISushiGirlsLingerieGIrls.sol\\\";\\r\\n\\r\\nabstract contract MaidPower is Ownable {\\r\\n    uint256 public lpTokenToMaidPower = 1000;   //1000 : 1LP(1e18 as wei) => 1Power\\r\\n    address public immutable sushiGirls;\\r\\n    address public immutable lingerieGirls;\\r\\n\\r\\n    event ChangeLPTokenToMaidPower(uint256 value);\\r\\n\\r\\n    constructor(address _sushiGirls, address _lingerieGirls) {\\r\\n        sushiGirls = _sushiGirls;\\r\\n        lingerieGirls = _lingerieGirls;\\r\\n    }\\r\\n\\r\\n    function changeLPTokenToMaidPower(uint256 value) external onlyOwner {\\r\\n        lpTokenToMaidPower = value;\\r\\n        emit ChangeLPTokenToMaidPower(value);\\r\\n    }\\r\\n\\r\\n    function powerOfMaids(IMaids maids, uint256 id) public view returns (uint256) {\\r\\n        uint256 originPower;\\r\\n        uint256 supportedLPAmount;\\r\\n\\r\\n        if (address(maids) == sushiGirls) {\\r\\n            (originPower, supportedLPAmount,) = ISushiGirls(sushiGirls).sushiGirls(id);\\r\\n        } else if (address(maids) == lingerieGirls) {\\r\\n            (originPower, supportedLPAmount,) = ILingerieGirls(lingerieGirls).lingerieGirls(id);\\r\\n        } else {\\r\\n            (originPower, supportedLPAmount) = maids.powerAndLP(id);\\r\\n        }\\r\\n\\r\\n        return originPower + (supportedLPAmount * lpTokenToMaidPower) / 1e21;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaids.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IMasterChefModule.sol\\\";\\r\\n\\r\\ninterface IMaids is IERC721, IERC721Metadata, IERC721Enumerable, IMasterChefModule {\\r\\n    event Support(uint256 indexed id, uint256 lpTokenAmount);\\r\\n    event Desupport(uint256 indexed id, uint256 lpTokenAmount);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function MAX_MAID_COUNT() external view returns (uint256);\\r\\n\\r\\n    function nonces(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function noncesForAll(address owner) external view returns (uint256);\\r\\n\\r\\n    function maids(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 originPower,\\r\\n            uint256 supportedLPTokenAmount,\\r\\n            uint256 sushiRewardDebt\\r\\n        );\\r\\n\\r\\n    function powerAndLP(uint256 id) external view returns (uint256, uint256);\\r\\n\\r\\n    function support(uint256 id, uint256 lpTokenAmount) external;\\r\\n\\r\\n    function supportWithPermit(\\r\\n        uint256 id,\\r\\n        uint256 lpTokenAmount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function desupport(uint256 id, uint256 lpTokenAmount) external;\\r\\n\\r\\n    function claimSushiReward(uint256 id) external;\\r\\n\\r\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address spender,\\r\\n        uint256 id,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function permitAll(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaidCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMaidCoin {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function INITIAL_SUPPLY() external pure returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaidCafe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\n\\r\\ninterface IMaidCafe {\\r\\n    event Enter(address indexed user, uint256 amount);\\r\\n    event Leave(address indexed user, uint256 share);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function enterWithPermit(\\r\\n        uint256 _amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/INursePart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface INursePart is IERC1155 {\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function burn(uint256 id, uint256 amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICloneNurses.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"./ICloneNurseEnumerable.sol\\\";\\r\\nimport \\\"./ISupportable.sol\\\";\\r\\nimport \\\"./INursePart.sol\\\";\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./ITheMaster.sol\\\";\\r\\n\\r\\ninterface ICloneNurses is IERC721, IERC721Metadata, ICloneNurseEnumerable, ISupportable {\\r\\n    event Claim(uint256 indexed id, address indexed claimer, uint256 reward);\\r\\n    event ElongateLifetime(uint256 indexed id, uint256 rechargedLifetime, uint256 lastEndBlock, uint256 newEndBlock);\\r\\n\\r\\n    function nursePart() external view returns (INursePart);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function theMaster() external view returns (ITheMaster);\\r\\n\\r\\n    function nurseTypes(uint256 typeId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 partCount,\\r\\n            uint256 destroyReturn,\\r\\n            uint256 power,\\r\\n            uint256 lifetime\\r\\n        );\\r\\n\\r\\n    function nurseTypeCount() external view returns (uint256);\\r\\n\\r\\n    function nurses(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 nurseType,\\r\\n            uint256 endBlock,\\r\\n            uint256 lastClaimedBlock\\r\\n        );\\r\\n\\r\\n    function assemble(uint256 nurseType, uint256 parts) external;\\r\\n\\r\\n    function assembleWithPermit(\\r\\n        uint256 nurseType,\\r\\n        uint256 parts,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function elongateLifetime(uint256[] calldata ids, uint256[] calldata parts) external;\\r\\n\\r\\n    function destroy(uint256[] calldata ids, uint256[] calldata toIds) external;\\r\\n\\r\\n    function claim(uint256[] calldata ids) external;\\r\\n\\r\\n    function pendingReward(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function findSupportingTo(address supporter) external view returns (address, uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRNG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRNG {\\r\\n    function generateRandomNumber(uint256 seed, address sender) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMasterChef.sol\\\";\\r\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ninterface IMasterChefModule {\\r\\n    function lpToken() external view returns (IUniswapV2Pair);\\r\\n\\r\\n    function sushi() external view returns (IERC20);\\r\\n\\r\\n    function sushiMasterChef() external view returns (IMasterChef);\\r\\n\\r\\n    function masterChefPid() external view returns (uint256);\\r\\n\\r\\n    function sushiLastRewardBlock() external view returns (uint256);\\r\\n\\r\\n    function accSushiPerShare() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMasterChef {\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\r\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\r\\n\\r\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\r\\n\\r\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICloneNurseEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface ICloneNurseEnumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISupportable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ISupportable {\\r\\n    event SupportTo(address indexed supporter, uint256 indexed to);\\r\\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\\r\\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\\r\\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\\r\\n\\r\\n    function supportingRoute(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function supportingTo(address supporter) external view returns (uint256);\\r\\n\\r\\n    function supportedPower(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setSupportingTo(\\r\\n        address supporter,\\r\\n        uint256 to,\\r\\n        uint256 amounts\\r\\n    ) external;\\r\\n\\r\\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\\r\\n\\r\\n    function changeSupportedPower(address supporter, int256 power) external;\\r\\n\\r\\n    function shareRewards(\\r\\n        uint256 pending,\\r\\n        address supporter,\\r\\n        uint8 supportingRatio\\r\\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITheMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./IRewardCalculator.sol\\\";\\r\\nimport \\\"./ISupportable.sol\\\";\\r\\nimport \\\"./IMasterChefModule.sol\\\";\\r\\n\\r\\ninterface ITheMaster is IMasterChefModule {\\r\\n    event ChangeRewardCalculator(address addr);\\r\\n\\r\\n    event Add(\\r\\n        uint256 indexed pid,\\r\\n        address addr,\\r\\n        bool indexed delegate,\\r\\n        bool indexed mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    );\\r\\n\\r\\n    event Set(uint256 indexed pid, uint256 allocPoint);\\r\\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\\r\\n\\r\\n    function initialRewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function decreasingInterval() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function rewardCalculator() external view returns (IRewardCalculator);\\r\\n\\r\\n    function poolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address addr,\\r\\n            bool delegate,\\r\\n            ISupportable supportable,\\r\\n            uint8 supportingRatio,\\r\\n            uint256 allocPoint,\\r\\n            uint256 lastRewardBlock,\\r\\n            uint256 accRewardPerShare,\\r\\n            uint256 supply\\r\\n        );\\r\\n\\r\\n    function poolCount() external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function mintableByAddr(address addr) external view returns (bool);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\\r\\n\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function changeRewardCalculator(address addr) external;\\r\\n\\r\\n    function add(\\r\\n        address addr,\\r\\n        bool delegate,\\r\\n        bool mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    ) external;\\r\\n\\r\\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external;\\r\\n\\r\\n    function support(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function desupport(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function emergencyDesupport(uint256 pid) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function claimSushiReward(uint256 id) external;\\r\\n\\r\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRewardCalculator {\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiGirlsLingerieGIrls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ISushiGirls {\\r\\n    function sushiGirls(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 originPower,\\r\\n            uint256 supportedLPTokenAmount,\\r\\n            uint256 sushiRewardDebt\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface ILingerieGirls {\\r\\n    function lingerieGirls(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 originPower,\\r\\n            uint256 supportedLPTokenAmount,\\r\\n            uint256 sushiRewardDebt\\r\\n        );\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"_maidCoin\",\"type\":\"address\"},{\"internalType\":\"contract IMaidCafe\",\"name\":\"_maidCafe\",\"type\":\"address\"},{\"internalType\":\"contract INursePart\",\"name\":\"_nursePart\",\"type\":\"address\"},{\"internalType\":\"contract ICloneNurses\",\"name\":\"_cloneNurses\",\"type\":\"address\"},{\"internalType\":\"contract IRNG\",\"name\":\"_rng\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiGirls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lingerieGirls\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeLPTokenToMaidPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ChangeMaidEfficacy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nursePart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRewardCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMaids[]\",\"name\":\"maids\",\"type\":\"address[]\"}],\"name\":\"approveMaids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"challengers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enterBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeLPTokenToMaidPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"changeMaidEfficacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeRNG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"checkDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneNurses\",\"outputs\":[{\"internalType\":\"contract ICloneNurses\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"entranceFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nurseParts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxRewardCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endBlocks\",\"type\":\"uint256[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids[]\",\"name\":\"maids\",\"type\":\"address[]\"}],\"name\":\"disapproveMaids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"enterWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"enterWithPermitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaidsApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lingerieGirls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenToMaidPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCafe\",\"outputs\":[{\"internalType\":\"contract IMaidCafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCoin\",\"outputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidEfficacy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nursePart\",\"outputs\":[{\"internalType\":\"contract INursePart\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"powerOfMaids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nursePart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rng\",\"outputs\":[{\"internalType\":\"contract IRNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaidCafe\",\"name\":\"_maidCafe\",\"type\":\"address\"}],\"name\":\"setMaidCafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiGirls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NurseRaid","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004af698b479d0098229dc715655c667ceb6cd8433000000000000000000000000d428f1050adc29976d4339b1ec602832034df701000000000000000000000000861f8d5b601054d5109b93d3775cd71c74593f780000000000000000000000005ee657f5426484a777a1fc7abd436dfdb13b1cc3000000000000000000000000b0c63655bb4d89a1392f2ceedf0c9c4f3efeb0f7000000000000000000000000eb3b418e4a4430392cd57b1356c5b1d2205a56d9000000000000000000000000579a60fbc649d3398f13e0385dbe79b3ffad757c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}