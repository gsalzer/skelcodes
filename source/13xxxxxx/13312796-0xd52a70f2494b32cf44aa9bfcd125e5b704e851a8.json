{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLISCENSED\r\n\r\npragma solidity 0.8.4;\r\n\r\ncontract SWP {\r\n    struct NFT_offer {\r\n        address nft_address;\r\n        uint256 token_id;\r\n        address trader;\r\n    }\r\n    \r\n    address constant JULIA = 0x6e845bE4ea601B4Dbe98ED1f52b371dca1Dbb2b6; // MAIN NET\r\n    address nft_in  = JULIA;\r\n    address nft_out = JULIA;\r\n\r\n    mapping (address => mapping (uint256 => NFT_offer)) swap_offers;\r\n\r\n    constructor () {}\r\n\r\n    /*\r\n      One has to approve this contract to use his/her `token_offered` before calling this\r\n    */\r\n    function offer_swap(uint256 token_offered, uint256 token_requested) public {\r\n        uint8   verified = 0;\r\n        uint256 j = 0;\r\n        uint256 owned;\r\n        while (verified < 1) {\r\n            owned = IERC721Enumerable(nft_in).tokenOfOwnerByIndex(msg.sender, j);\r\n            if (owned==token_offered) verified++;\r\n            j++;\r\n        }\r\n        require(verified==1);\r\n        require(IERC721Enumerable(nft_in).getApproved(token_offered)==address(this));\r\n        swap_offers[nft_in][token_offered] = NFT_offer(nft_out, token_requested, msg.sender);\r\n    }\r\n\r\n    /*\r\n      One has to approve this contract to use his/her `token_in` before calling this.\r\n      `token_in` is the token that is required by the offer maker \r\n      and should be held by the party accepting the offer.\r\n      `tokwen_out` is the token that is offered by the offer maker \r\n      and will be given to the party accepting the offer.\r\n    */\r\n    function make_swap(uint256 token_in,uint256 token_out) public {\r\n        NFT_offer memory offer = swap_offers[nft_out][token_out];\r\n        require(offer.nft_address==nft_in && offer.token_id==token_in);\r\n        IERC721Enumerable(nft_out).safeTransferFrom(offer.trader, msg.sender, token_out);\r\n        IERC721Enumerable(nft_in ).safeTransferFrom(msg.sender, offer.trader, token_in);\r\n    }\r\n\r\n    /*\r\n      Checks if an offer to swap `token_offered` for `token_requested` is available and approved\r\n      (just to avoid wasting gas in case `make_swap` would fail)\r\n    */\r\n    function check_offer(uint256 token_offered, uint256 token_requested) public view returns (bool) {\r\n        NFT_offer memory offer = swap_offers[nft_out][token_offered];\r\n        bool approved = IERC721Enumerable(nft_out).getApproved(token_offered)==address(this);\r\n        return (offer.nft_address==nft_in && offer.token_id==token_requested && approved);\r\n    }\r\n\r\n}\r\n\r\ncontract IERC721Enumerable {\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {}\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {}\r\n    function getApproved(uint256 tokenId) external view returns (address operator) {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_offered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_requested\",\"type\":\"uint256\"}],\"name\":\"check_offer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_out\",\"type\":\"uint256\"}],\"name\":\"make_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_offered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_requested\",\"type\":\"uint256\"}],\"name\":\"offer_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SWP","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://767c0c90a0faf58afdc450c03b33c98ed7c3e9c7be013b75f2fa3828ed15f399"}]}