{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Rng.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title A pseudo random number generator\r\n *\r\n * @dev This is not a true random number generator because smart contracts must be deterministic (every node a transaction goes to must produce the same result).\r\n *      True randomness requires an oracle which is both expensive in terms of gas and would take a critical part of the project off the chain.\r\n */\r\nstruct Rng {\r\n    bytes32 state;\r\n}\r\n\r\n/**\r\n * @title A library for working with the Rng struct.\r\n *\r\n * @dev Rng cannot be a contract because then anyone could manipulate it by generating random numbers.\r\n */\r\nlibrary RngLibrary {\r\n    /**\r\n     * Creates a new Rng.\r\n     */\r\n    function newRng() internal view returns (Rng memory) {\r\n        return Rng(getEntropy());\r\n    }\r\n\r\n    /**\r\n     * Creates a pseudo-random value from the current block miner's address and sender.\r\n     */\r\n    function getEntropy() internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(block.coinbase, msg.sender));\r\n    }\r\n\r\n    /**\r\n     * Generates a random uint256.\r\n     */\r\n    function generate(Rng memory self) internal view returns (uint256) {\r\n        self.state = keccak256(abi.encodePacked(getEntropy(), self.state));\r\n        return uint256(self.state);\r\n    }\r\n\r\n    /**\r\n     * Generates a random uint256 from min to max inclusive.\r\n     *\r\n     * @dev This function is not subject to modulo bias.\r\n     *      The chance that this function has to reroll is astronomically unlikely, but it can theoretically reroll forever.\r\n     */\r\n    function generate(Rng memory self, uint min, uint max) internal view returns (uint256) {\r\n        require(min <= max, \"min > max\");\r\n\r\n        uint delta = max - min;\r\n\r\n        if (delta == 0) {\r\n            return min;\r\n        }\r\n\r\n        return generate(self) % (delta + 1) + min;\r\n    }\r\n}\r\n\r\n// File: contracts/Rarities.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Rarities {\r\n    function dominant() internal pure returns (uint16[8] memory ret) {\r\n        ret = [\r\n            2500,\r\n            2200,\r\n            1900,\r\n            1300,\r\n            800,\r\n            600,\r\n            400,\r\n            300\r\n        ];\r\n    }\r\n    \r\n    function recessive() internal pure returns (uint16[6] memory ret) {\r\n        ret = [\r\n            4000,\r\n            2500,\r\n            1500,\r\n            1000,\r\n            600,\r\n            400\r\n        ];\r\n    }\r\n    \r\n    function outfit() internal pure returns (uint16[27] memory ret) {\r\n        ret = [\r\n            700,\r\n            700,\r\n            700,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            500,\r\n            500,\r\n            400,\r\n            400,\r\n            300,\r\n            200,\r\n            200,\r\n            100,\r\n            100,\r\n            100,\r\n            75,\r\n            50,\r\n            50,\r\n            50,\r\n            50,\r\n            25\r\n        ];\r\n    }\r\n    \r\n    function handaccessory() internal pure returns (uint16[16] memory ret) {\r\n        ret = [\r\n            5000,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            510,\r\n            500,\r\n            500,\r\n            300,\r\n            300,\r\n            150,\r\n            100,\r\n            100,\r\n            75,\r\n            40,\r\n            25\r\n        ];\r\n    }\r\n    \r\n    function mouth() internal pure returns (uint16[22] memory ret) {\r\n        ret = [\r\n            2000,\r\n            1000,\r\n            1000,\r\n            1000,\r\n            700,\r\n            700,\r\n            700,\r\n            700,\r\n            400,\r\n            300,\r\n            300,\r\n            300,\r\n            175,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            75,\r\n            75,\r\n            50,\r\n            25\r\n        ];\r\n    }\r\n    \r\n    function eyes() internal pure returns (uint16[24] memory ret) {\r\n        ret = [\r\n            2500,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            600,\r\n            400,\r\n            400,\r\n            400,\r\n            400,\r\n            400,\r\n            400,\r\n            400,\r\n            400,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            75,\r\n            75,\r\n            75,\r\n            50,\r\n            25\r\n        ];\r\n    }\r\n    \r\n    function headaccessory() internal pure returns (uint16[29] memory ret) {\r\n        ret = [\r\n            3000,\r\n            500,\r\n            500,\r\n            500,\r\n            500,\r\n            500,\r\n            500,\r\n            500,\r\n            500,\r\n            400,\r\n            300,\r\n            300,\r\n            200,\r\n            200,\r\n            200,\r\n            200,\r\n            200,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            100,\r\n            75,\r\n            50,\r\n            50,\r\n            25\r\n        ];\r\n    }\r\n}\r\n// File: contracts/Enums.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nenum RerollTrait {\r\n    BgColor,\r\n    Outfit,\r\n    HandAccessory,\r\n    Mouth,\r\n    Eyes,\r\n    HeadAccessory\r\n}\r\n\r\nenum Special {\r\n    NONE,\r\n    DEVIL,\r\n    GHOST,\r\n    HIPPIE,\r\n    JOKER,\r\n    PRISONER,\r\n    SQUID_GAME,\r\n    WHERES_WALDO,\r\n    HAZMAT,\r\n    ASTRONAUT\r\n}\r\n\r\nenum Dominant {\r\n    SKELETON,\r\n    VAMPIRE,\r\n    MUMMY,\r\n    GHOST,\r\n    WITCH,\r\n    FRANKENSTEIN,\r\n    WEREWOLF,\r\n    PUMPKINHEAD\r\n}\r\n\r\nenum Recessive {\r\n    SKELETON,\r\n    VAMPIRE,\r\n    MUMMY,\r\n    GHOST,\r\n    DEVIL,\r\n    KONG\r\n}\r\n\r\nenum BgColor {\r\n    DARK_BLUE,\r\n    GRAY,\r\n    LIGHT_BLUE,\r\n    ORANGE,\r\n    PINK,\r\n    PURPLE,\r\n    RED,\r\n    TAN,\r\n    TEAL,\r\n    GREEN,\r\n    RAINBOW\r\n}\r\n\r\nenum Outfit {\r\n    WHITE_SHORTS,\r\n    PINK_SHORTS,\r\n    GRAY_PANTS,\r\n    WHITE_AND_BLUE,\r\n    PURPLE_SHORTS,\r\n    PINK_AND_PURPLE,\r\n    BROWN_AND_WHITE,\r\n    BROWN_AND_BLUE,\r\n    BLUE_SHORTS,\r\n    BLUE_AND_WHITE,\r\n    UNDERGARMENTS,\r\n    LOUNGEWEAR,\r\n    HOBO,\r\n    SPORTS_JERSEY,\r\n    GOLD_CHAIN,\r\n    PAJAMAS,\r\n    OVERALLS,\r\n    SPEEDO,\r\n    NINJA_SUIT,\r\n    KARATE_UNIFORM,\r\n    NONE,\r\n    LUMBERJACK,\r\n    PRIEST,\r\n    TUX,\r\n    SKELETON,\r\n    CAMO,\r\n    ARMOR\r\n}\r\n\r\nenum HandAccessory {\r\n    NONE,\r\n    BLOODY_KNIFE,\r\n    BOW_AND_ARROW,\r\n    SWORD,\r\n    PITCHFORK,\r\n    WAND,\r\n    SPIKED_BASEBALL_BAT,\r\n    ENERGY_DRINK,\r\n    NINJA_STARS,\r\n    NUNCHUCKS,\r\n    POOP,\r\n    FLAMETHROWER,\r\n    HOOKS,\r\n    WEIGHTS,\r\n    SKULL,\r\n    BRAIN\r\n}\r\n\r\nenum Mouth {\r\n    NONE,\r\n    HAPPY,\r\n    MAD,\r\n    SMILE,\r\n    FANGS,\r\n    HAPPY_FANGS,\r\n    MAD_FANGS,\r\n    SMILE_FANGS,\r\n    SINGLE_TOOTH,\r\n    DIRTY_TEETH,\r\n    SMILE_DIRTY_TEETH,\r\n    MAD_DIRTY_TEETH,\r\n    BLOODY_FANGS,\r\n    BLACK_MASK,\r\n    HAPPY_BUCK_TEETH,\r\n    HAPPY_SINGLE_TOOTH,\r\n    MAD_SINGLE_TOOTH,\r\n    SMILE_SINGLE_TOOTH,\r\n    BREATHING_FIRE,\r\n    GOLD_GRILLS,\r\n    KISS,\r\n    SMOKING_JOINT\r\n}\r\n\r\nenum Eyes {\r\n    NONE,\r\n    BLACK_EYE,\r\n    BLACKOUT,\r\n    BLEEDING,\r\n    BLOODSHOT,\r\n    WATERY,\r\n    WHITE,\r\n    BIGGER_BLACK_EYES,\r\n    BIGGER_BLEEDING,\r\n    BIGGER_WATERY,\r\n    SMALLER_BLACK_EYES,\r\n    SMALLER_BLEEDING,\r\n    SMALLER_BLOODSHOT,\r\n    SMALLER_WATERY,\r\n    SMALLER,\r\n    SUNGLASSES,\r\n    EYE_PATCH,\r\n    VR_HEADSET,\r\n    DEAD,\r\n    _3D_GLASSES,\r\n    HEART_EYES,\r\n    LASER_GLASSES,\r\n    NINJA_MASK,\r\n    LASER_EYES\r\n}\r\n\r\nenum HeadAccessory {\r\n    NONE,\r\n    BUCKET_HAT,\r\n    FLOWER,\r\n    SPORTS_HEADBAND,\r\n    CHEF_HAT,\r\n    BLUE_DURAG,\r\n    RED_DURAG,\r\n    SPIKY_HAIR,\r\n    BONES,\r\n    RICE_HAT,\r\n    BEANIE_CAP,\r\n    SANTA_HAT,\r\n    HEAD_WOUND,\r\n    HEADPHONES,\r\n    GOLD_STUDS,\r\n    WIZARD_HAT,\r\n    LONG_HAIR,\r\n    AIR_PODS,\r\n    WHITE_PARTY_HAT,\r\n    BLUE_PARTY_HAT,\r\n    RED_PARTY_HAT,\r\n    GREEN_PARTY_HAT,\r\n    YELLOW_PARTY_HAT,\r\n    PURPLE_PARTY_HAT,\r\n    PIRATE_HAT,\r\n    KING_CROWN,\r\n    JOKER_HAT,\r\n    DEVIL_HORNS,\r\n    BRAINS\r\n}\r\n\r\nlibrary Enums {\r\n    function toString(Special v) external pure returns (string memory) {\r\n        if (v == Special.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == Special.DEVIL) {\r\n            return \"Devil\";\r\n        }\r\n    \r\n        if (v == Special.GHOST) {\r\n            return \"Ghost\";\r\n        }\r\n    \r\n        if (v == Special.HIPPIE) {\r\n            return \"Hippie\";\r\n        }\r\n    \r\n        if (v == Special.JOKER) {\r\n            return \"Society\";\r\n        }\r\n    \r\n        if (v == Special.PRISONER) {\r\n            return \"Prisoner\";\r\n        }\r\n    \r\n        if (v == Special.SQUID_GAME) {\r\n            return \"Squid Girl\";\r\n        }\r\n    \r\n        if (v == Special.WHERES_WALDO) {\r\n            return \"Where's Waldo?\";\r\n        }\r\n    \r\n        if (v == Special.HAZMAT) {\r\n            return \"Hazmat\";\r\n        }\r\n    \r\n        if (v == Special.ASTRONAUT) {\r\n            return \"Astronaut\";\r\n        }\r\n        revert(\"invalid special\");\r\n    }\r\n    \r\n    function toString(Dominant v) external pure returns (string memory) {\r\n        if (v == Dominant.SKELETON) {\r\n            return \"Skeleton\";\r\n        }\r\n    \r\n        if (v == Dominant.VAMPIRE) {\r\n            return \"Vampire\";\r\n        }\r\n    \r\n        if (v == Dominant.MUMMY) {\r\n            return \"Mummy\";\r\n        }\r\n    \r\n        if (v == Dominant.GHOST) {\r\n            return \"Ghost\";\r\n        }\r\n    \r\n        if (v == Dominant.WITCH) {\r\n            return \"Witch\";\r\n        }\r\n    \r\n        if (v == Dominant.FRANKENSTEIN) {\r\n            return \"Frankenstein\";\r\n        }\r\n    \r\n        if (v == Dominant.WEREWOLF) {\r\n            return \"Werewolf\";\r\n        }\r\n    \r\n        if (v == Dominant.PUMPKINHEAD) {\r\n            return \"Pumpkinhead\";\r\n        }\r\n        revert(\"invalid dominant\");\r\n    }\r\n    \r\n    function toString(Recessive v) external pure returns (string memory) {\r\n        if (v == Recessive.SKELETON) {\r\n            return \"Skeleton\";\r\n        }\r\n    \r\n        if (v == Recessive.VAMPIRE) {\r\n            return \"Vampire\";\r\n        }\r\n    \r\n        if (v == Recessive.MUMMY) {\r\n            return \"Mummy\";\r\n        }\r\n    \r\n        if (v == Recessive.GHOST) {\r\n            return \"Ghost\";\r\n        }\r\n    \r\n        if (v == Recessive.DEVIL) {\r\n            return \"Devil\";\r\n        }\r\n    \r\n        if (v == Recessive.KONG) {\r\n            return \"Kong\";\r\n        }\r\n        revert(\"invalid recessive\");\r\n    }\r\n    \r\n    function toString(BgColor v) external pure returns (string memory) {\r\n        if (v == BgColor.DARK_BLUE) {\r\n            return \"Dark Blue\";\r\n        }\r\n    \r\n        if (v == BgColor.GRAY) {\r\n            return \"Gray\";\r\n        }\r\n    \r\n        if (v == BgColor.LIGHT_BLUE) {\r\n            return \"Light Blue\";\r\n        }\r\n    \r\n        if (v == BgColor.ORANGE) {\r\n            return \"Orange\";\r\n        }\r\n    \r\n        if (v == BgColor.PINK) {\r\n            return \"Pink\";\r\n        }\r\n    \r\n        if (v == BgColor.PURPLE) {\r\n            return \"Purple\";\r\n        }\r\n    \r\n        if (v == BgColor.RED) {\r\n            return \"Red\";\r\n        }\r\n    \r\n        if (v == BgColor.TAN) {\r\n            return \"Tan\";\r\n        }\r\n    \r\n        if (v == BgColor.TEAL) {\r\n            return \"Teal\";\r\n        }\r\n    \r\n        if (v == BgColor.GREEN) {\r\n            return \"Green\";\r\n        }\r\n    \r\n        if (v == BgColor.RAINBOW) {\r\n            return \"Rainbow\";\r\n        }\r\n        revert(\"invalid bgcolor\");\r\n    }\r\n    \r\n    function toString(Outfit v) external pure returns (string memory) {\r\n        if (v == Outfit.WHITE_SHORTS) {\r\n            return \"White Shorts\";\r\n        }\r\n    \r\n        if (v == Outfit.PINK_SHORTS) {\r\n            return \"Pink Shorts\";\r\n        }\r\n    \r\n        if (v == Outfit.GRAY_PANTS) {\r\n            return \"Gray Pants\";\r\n        }\r\n    \r\n        if (v == Outfit.WHITE_AND_BLUE) {\r\n            return \"White and Blue\";\r\n        }\r\n    \r\n        if (v == Outfit.PURPLE_SHORTS) {\r\n            return \"Purple Shorts\";\r\n        }\r\n    \r\n        if (v == Outfit.PINK_AND_PURPLE) {\r\n            return \"Pink and Purple\";\r\n        }\r\n    \r\n        if (v == Outfit.BROWN_AND_WHITE) {\r\n            return \"Brown and White\";\r\n        }\r\n    \r\n        if (v == Outfit.BROWN_AND_BLUE) {\r\n            return \"Brown and Blue\";\r\n        }\r\n    \r\n        if (v == Outfit.BLUE_SHORTS) {\r\n            return \"Blue Shorts\";\r\n        }\r\n    \r\n        if (v == Outfit.BLUE_AND_WHITE) {\r\n            return \"Blue and White\";\r\n        }\r\n    \r\n        if (v == Outfit.UNDERGARMENTS) {\r\n            return \"Undergarments\";\r\n        }\r\n    \r\n        if (v == Outfit.LOUNGEWEAR) {\r\n            return \"Loungewear\";\r\n        }\r\n    \r\n        if (v == Outfit.HOBO) {\r\n            return \"Hobo\";\r\n        }\r\n    \r\n        if (v == Outfit.SPORTS_JERSEY) {\r\n            return \"Sports Jersey\";\r\n        }\r\n    \r\n        if (v == Outfit.GOLD_CHAIN) {\r\n            return \"Gold Chain\";\r\n        }\r\n    \r\n        if (v == Outfit.PAJAMAS) {\r\n            return \"Pajamas\";\r\n        }\r\n    \r\n        if (v == Outfit.OVERALLS) {\r\n            return \"Overalls\";\r\n        }\r\n    \r\n        if (v == Outfit.SPEEDO) {\r\n            return \"Speedo\";\r\n        }\r\n    \r\n        if (v == Outfit.NINJA_SUIT) {\r\n            return \"Ninja Suit\";\r\n        }\r\n    \r\n        if (v == Outfit.KARATE_UNIFORM) {\r\n            return \"Karate Uniform\";\r\n        }\r\n    \r\n        if (v == Outfit.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == Outfit.LUMBERJACK) {\r\n            return \"Lumberjack\";\r\n        }\r\n    \r\n        if (v == Outfit.PRIEST) {\r\n            return \"Priest\";\r\n        }\r\n    \r\n        if (v == Outfit.TUX) {\r\n            return \"Tux\";\r\n        }\r\n    \r\n        if (v == Outfit.SKELETON) {\r\n            return \"Skeleton\";\r\n        }\r\n    \r\n        if (v == Outfit.CAMO) {\r\n            return \"Camo\";\r\n        }\r\n    \r\n        if (v == Outfit.ARMOR) {\r\n            return \"Armor\";\r\n        }\r\n        revert(\"invalid outfit\");\r\n    }\r\n    \r\n    function toString(HandAccessory v) external pure returns (string memory) {\r\n        if (v == HandAccessory.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == HandAccessory.BLOODY_KNIFE) {\r\n            return \"Bloody Knife\";\r\n        }\r\n    \r\n        if (v == HandAccessory.BOW_AND_ARROW) {\r\n            return \"Bow and Arrow\";\r\n        }\r\n    \r\n        if (v == HandAccessory.SWORD) {\r\n            return \"Sword\";\r\n        }\r\n    \r\n        if (v == HandAccessory.PITCHFORK) {\r\n            return \"Pitchfork\";\r\n        }\r\n    \r\n        if (v == HandAccessory.WAND) {\r\n            return \"Wand\";\r\n        }\r\n    \r\n        if (v == HandAccessory.SPIKED_BASEBALL_BAT) {\r\n            return \"Spiked Baseball Bat\";\r\n        }\r\n    \r\n        if (v == HandAccessory.ENERGY_DRINK) {\r\n            return \"Energy Drink\";\r\n        }\r\n    \r\n        if (v == HandAccessory.NINJA_STARS) {\r\n            return \"Ninja Stars\";\r\n        }\r\n    \r\n        if (v == HandAccessory.NUNCHUCKS) {\r\n            return \"Nunchucks\";\r\n        }\r\n    \r\n        if (v == HandAccessory.POOP) {\r\n            return \"Poop\";\r\n        }\r\n    \r\n        if (v == HandAccessory.FLAMETHROWER) {\r\n            return \"Flamethrower\";\r\n        }\r\n    \r\n        if (v == HandAccessory.HOOKS) {\r\n            return \"Hooks\";\r\n        }\r\n    \r\n        if (v == HandAccessory.WEIGHTS) {\r\n            return \"Weights\";\r\n        }\r\n    \r\n        if (v == HandAccessory.SKULL) {\r\n            return \"Skull\";\r\n        }\r\n    \r\n        if (v == HandAccessory.BRAIN) {\r\n            return \"Brain\";\r\n        }\r\n        revert(\"invalid handaccessory\");\r\n    }\r\n    \r\n    function toString(Mouth v) external pure returns (string memory) {\r\n        if (v == Mouth.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == Mouth.HAPPY) {\r\n            return \"Happy\";\r\n        }\r\n    \r\n        if (v == Mouth.MAD) {\r\n            return \"Mad\";\r\n        }\r\n    \r\n        if (v == Mouth.SMILE) {\r\n            return \"Smile\";\r\n        }\r\n    \r\n        if (v == Mouth.FANGS) {\r\n            return \"Fangs\";\r\n        }\r\n    \r\n        if (v == Mouth.HAPPY_FANGS) {\r\n            return \"Happy Fangs\";\r\n        }\r\n    \r\n        if (v == Mouth.MAD_FANGS) {\r\n            return \"Mad Fangs\";\r\n        }\r\n    \r\n        if (v == Mouth.SMILE_FANGS) {\r\n            return \"Smile Fangs\";\r\n        }\r\n    \r\n        if (v == Mouth.SINGLE_TOOTH) {\r\n            return \"Single Tooth\";\r\n        }\r\n    \r\n        if (v == Mouth.DIRTY_TEETH) {\r\n            return \"Dirty Teeth\";\r\n        }\r\n    \r\n        if (v == Mouth.SMILE_DIRTY_TEETH) {\r\n            return \"Smile Dirty Teeth\";\r\n        }\r\n    \r\n        if (v == Mouth.MAD_DIRTY_TEETH) {\r\n            return \"Mad Dirty Teeth\";\r\n        }\r\n    \r\n        if (v == Mouth.BLOODY_FANGS) {\r\n            return \"Bloody Fangs\";\r\n        }\r\n    \r\n        if (v == Mouth.BLACK_MASK) {\r\n            return \"Black Mask\";\r\n        }\r\n    \r\n        if (v == Mouth.HAPPY_BUCK_TEETH) {\r\n            return \"Happy Buck Teeth\";\r\n        }\r\n    \r\n        if (v == Mouth.HAPPY_SINGLE_TOOTH) {\r\n            return \"Happy Single Tooth\";\r\n        }\r\n    \r\n        if (v == Mouth.MAD_SINGLE_TOOTH) {\r\n            return \"Mad Single Tooth\";\r\n        }\r\n    \r\n        if (v == Mouth.SMILE_SINGLE_TOOTH) {\r\n            return \"Smile Single Tooth\";\r\n        }\r\n    \r\n        if (v == Mouth.BREATHING_FIRE) {\r\n            return \"Breathing Fire\";\r\n        }\r\n    \r\n        if (v == Mouth.GOLD_GRILLS) {\r\n            return \"Gold Grills\";\r\n        }\r\n    \r\n        if (v == Mouth.KISS) {\r\n            return \"Kiss\";\r\n        }\r\n    \r\n        if (v == Mouth.SMOKING_JOINT) {\r\n            return \"Smoking Joint\";\r\n        }\r\n        revert(\"invalid mouth\");\r\n    }\r\n    \r\n    function toString(Eyes v) external pure returns (string memory) {\r\n        if (v == Eyes.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == Eyes.BLACK_EYE) {\r\n            return \"Black Eye\";\r\n        }\r\n    \r\n        if (v == Eyes.BLACKOUT) {\r\n            return \"Blackout\";\r\n        }\r\n    \r\n        if (v == Eyes.BLEEDING) {\r\n            return \"Bleeding\";\r\n        }\r\n    \r\n        if (v == Eyes.BLOODSHOT) {\r\n            return \"Bloodshot\";\r\n        }\r\n    \r\n        if (v == Eyes.WATERY) {\r\n            return \"Watery\";\r\n        }\r\n    \r\n        if (v == Eyes.WHITE) {\r\n            return \"White\";\r\n        }\r\n    \r\n        if (v == Eyes.BIGGER_BLACK_EYES) {\r\n            return \"Bigger Black Eyes\";\r\n        }\r\n    \r\n        if (v == Eyes.BIGGER_BLEEDING) {\r\n            return \"Bigger Bleeding\";\r\n        }\r\n    \r\n        if (v == Eyes.BIGGER_WATERY) {\r\n            return \"Bigger Watery\";\r\n        }\r\n    \r\n        if (v == Eyes.SMALLER_BLACK_EYES) {\r\n            return \"Smaller Black Eyes\";\r\n        }\r\n    \r\n        if (v == Eyes.SMALLER_BLEEDING) {\r\n            return \"Smaller Bleeding\";\r\n        }\r\n    \r\n        if (v == Eyes.SMALLER_BLOODSHOT) {\r\n            return \"Smaller Bloodshot\";\r\n        }\r\n    \r\n        if (v == Eyes.SMALLER_WATERY) {\r\n            return \"Smaller Watery\";\r\n        }\r\n    \r\n        if (v == Eyes.SMALLER) {\r\n            return \"Smaller\";\r\n        }\r\n    \r\n        if (v == Eyes.SUNGLASSES) {\r\n            return \"Sunglasses\";\r\n        }\r\n    \r\n        if (v == Eyes.EYE_PATCH) {\r\n            return \"Eye Patch\";\r\n        }\r\n    \r\n        if (v == Eyes.VR_HEADSET) {\r\n            return \"VR Headset\";\r\n        }\r\n    \r\n        if (v == Eyes.DEAD) {\r\n            return \"Dead\";\r\n        }\r\n    \r\n        if (v == Eyes._3D_GLASSES) {\r\n            return \"3D Glasses\";\r\n        }\r\n    \r\n        if (v == Eyes.HEART_EYES) {\r\n            return \"Heart Eyes\";\r\n        }\r\n    \r\n        if (v == Eyes.LASER_GLASSES) {\r\n            return \"Laser Glasses\";\r\n        }\r\n    \r\n        if (v == Eyes.NINJA_MASK) {\r\n            return \"Ninja Mask\";\r\n        }\r\n    \r\n        if (v == Eyes.LASER_EYES) {\r\n            return \"Laser Eyes\";\r\n        }\r\n        revert(\"invalid eyes\");\r\n    }\r\n    \r\n    function toString(HeadAccessory v) external pure returns (string memory) {\r\n        if (v == HeadAccessory.NONE) {\r\n            return \"\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BUCKET_HAT) {\r\n            return \"Bucket Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.FLOWER) {\r\n            return \"Flower\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.SPORTS_HEADBAND) {\r\n            return \"Sports Headband\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.CHEF_HAT) {\r\n            return \"Chef Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BLUE_DURAG) {\r\n            return \"Blue Durag\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.RED_DURAG) {\r\n            return \"Red Durag\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.SPIKY_HAIR) {\r\n            return \"Spiky Hair\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BONES) {\r\n            return \"Bones\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.RICE_HAT) {\r\n            return \"Rice Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BEANIE_CAP) {\r\n            return \"Beanie Cap\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.SANTA_HAT) {\r\n            return \"Santa Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.HEAD_WOUND) {\r\n            return \"Head Wound\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.HEADPHONES) {\r\n            return \"Headphones\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.GOLD_STUDS) {\r\n            return \"Gold Studs\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.WIZARD_HAT) {\r\n            return \"Wizard Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.LONG_HAIR) {\r\n            return \"Long Hair\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.AIR_PODS) {\r\n            return \"Air Pods\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.WHITE_PARTY_HAT) {\r\n            return \"White Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BLUE_PARTY_HAT) {\r\n            return \"Blue Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.RED_PARTY_HAT) {\r\n            return \"Red Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.GREEN_PARTY_HAT) {\r\n            return \"Green Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.YELLOW_PARTY_HAT) {\r\n            return \"Yellow Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.PURPLE_PARTY_HAT) {\r\n            return \"Purple Party Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.PIRATE_HAT) {\r\n            return \"Pirate Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.KING_CROWN) {\r\n            return \"King Crown\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.JOKER_HAT) {\r\n            return \"Joker Hat\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.DEVIL_HORNS) {\r\n            return \"Devil Horns\";\r\n        }\r\n    \r\n        if (v == HeadAccessory.BRAINS) {\r\n            return \"Brains\";\r\n        }\r\n        revert(\"invalid headaccessory\");\r\n    }\r\n}\r\n\r\n// File: contracts/BitMonster.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nstruct BitMonster {\r\n    bool genesis;\r\n    bool superYield;\r\n    Special special;\r\n    Dominant dominant;\r\n    Recessive recessive;\r\n    BgColor bgColor;\r\n    Outfit outfit;\r\n    HandAccessory handAccessory;\r\n    Mouth mouth;\r\n    Eyes eyes;\r\n    HeadAccessory headAccessory;\r\n}\r\n\r\n// File: contracts/IBitMonsters.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IBitMonsters is IERC721Enumerable {\r\n    function getBitMonster(uint256 tokenId) external view returns (BitMonster memory);\r\n    function setBitMonster(uint256 tokenId, BitMonster memory bm) external;\r\n    function createBitMonster(BitMonster memory bm, address owner) external;\r\n    function isAdmin(address addr) external view returns (bool);\r\n}\r\n// File: contracts/BitMonstersAddon.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title A contract should inherit this if it provides functionality for the Bit Monsters contract.\r\n */\r\nabstract contract BitMonstersAddon is Ownable {\r\n    IBitMonsters internal bitMonsters;\r\n\r\n    modifier onlyAdmin() {\r\n        require(bitMonsters.isAdmin(msg.sender), \"admins only\");\r\n        _;\r\n    }\r\n\r\n    modifier ownsToken(uint tokenId) {\r\n        require(bitMonsters.ownerOf(tokenId) == msg.sender, \"you don't own this shit\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice This must be called before the Brainz contract can be used.\r\n     *\r\n     * @dev Within the BitMonsters contract, call initializeBrainz().\r\n     */\r\n    function setBitMonstersContract(IBitMonsters _contract) external onlyOwner {\r\n        bitMonsters = _contract;\r\n    }\r\n}\r\n\r\n// File: contracts/BitMonsterGen.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary BitMonsterGen {\r\n    using RngLibrary for Rng;\r\n\r\n    function getRandomBgColor(Rng memory rng) internal view returns (BgColor) {\r\n        if (rng.generate(1, 1000) == 1) {\r\n            return BgColor.RAINBOW;\r\n        }\r\n        return BgColor(rng.generate(0, 9));\r\n    }\r\n\r\n    function getRandomDominant(Rng memory rng) internal view returns (Dominant) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[8] memory rarities = Rarities.dominant();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return Dominant(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomDominant() is fucked\");\r\n    } \r\n    \r\n    function getRandomRecessive(Rng memory rng) internal view returns (Recessive) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[6] memory rarities = Rarities.recessive();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return Recessive(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomRecessive() is fucked\");\r\n    } \r\n    \r\n    function getRandomOutfit(Rng memory rng) internal view returns (Outfit) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[27] memory rarities = Rarities.outfit();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return Outfit(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomOutfit() is fucked\");\r\n    } \r\n    \r\n    function getRandomHandAccessory(Rng memory rng) internal view returns (HandAccessory) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[16] memory rarities = Rarities.handaccessory();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return HandAccessory(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomHandAccessory() is fucked\");\r\n    } \r\n    \r\n    function getRandomMouth(Rng memory rng) internal view returns (Mouth) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[22] memory rarities = Rarities.mouth();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return Mouth(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomMouth() is fucked\");\r\n    } \r\n    \r\n    function getRandomEyes(Rng memory rng) internal view returns (Eyes) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[24] memory rarities = Rarities.eyes();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return Eyes(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomEyes() is fucked\");\r\n    } \r\n    \r\n    function getRandomHeadAccessory(Rng memory rng) internal view returns (HeadAccessory) {\r\n        // all rarities are out of 10000\r\n        uint rn = rng.generate(0, 9999);\r\n        uint16[29] memory rarities = Rarities.headaccessory();\r\n    \r\n        for (uint i = 0; i < rarities.length; ++i) {\r\n            if (rarities[i] > rn) {\r\n                return HeadAccessory(i);\r\n            }\r\n            rn -= rarities[i];\r\n        }\r\n        revert(\"getRandomHeadAccessory() is fucked\");\r\n    } \r\n\r\n    function generateUnspecialBitMonster(Rng memory rng) internal view returns (BitMonster memory) {\r\n        BitMonster memory ret = BitMonster({\r\n            genesis:       true,\r\n            superYield:    rng.generate(0, 99) == 0,\r\n            special:       Special.NONE,\r\n            dominant:      getRandomDominant(rng),\r\n            recessive:     getRandomRecessive(rng),\r\n            bgColor:       getRandomBgColor(rng),\r\n            outfit:        getRandomOutfit(rng),\r\n            handAccessory: getRandomHandAccessory(rng),\r\n            mouth:         getRandomMouth(rng),\r\n            eyes:          getRandomEyes(rng),\r\n            headAccessory: getRandomHeadAccessory(rng)\r\n        });\r\n\r\n        return ret;\r\n    }\r\n\r\n    function generateSpecialBitMonster(Rng memory rng, bool[9] memory mintedSpecials) internal view returns (BitMonster memory) {\r\n        uint available = mintedSpecials.length;\r\n        for (uint i = 0; i < mintedSpecials.length; ++i) {\r\n            if (mintedSpecials[i]) {\r\n                available--;\r\n            }\r\n        }\r\n\r\n        if (available == 0) {\r\n            return generateUnspecialBitMonster(rng);\r\n        }\r\n\r\n        uint rn = rng.generate(0, available - 1);\r\n        uint special;\r\n\r\n        // generate a random special index, skipping specials that do not exist\r\n        for (special = 0; special < 9; ++special) {\r\n            if (mintedSpecials[special]) {\r\n                continue;\r\n            }\r\n            if (rn == 0) {\r\n                break;\r\n            }\r\n            rn -= 1;\r\n        }\r\n\r\n        require(!mintedSpecials[special]);\r\n        mintedSpecials[special] = true;\r\n\r\n        return BitMonster({\r\n            genesis:       true,\r\n            superYield:    rng.generate(0, 4) == 0,\r\n            // + 1 because 0 is None\r\n            special:       Special(special + 1),\r\n            dominant:      getRandomDominant(rng),\r\n            recessive:     getRandomRecessive(rng),\r\n            bgColor:       BgColor.DARK_BLUE,\r\n            outfit:        Outfit.NONE,\r\n            handAccessory: HandAccessory.NONE,\r\n            mouth:         Mouth.NONE,\r\n            eyes:          Eyes.NONE,\r\n            headAccessory: HeadAccessory.NONE\r\n        });\r\n    }\r\n\r\n    function rerollTrait(Rng memory rng, BitMonster memory bm, RerollTrait trait) internal view {\r\n        bm.genesis = false;\r\n        if (trait == RerollTrait.BgColor) {\r\n            BgColor existing = bm.bgColor;\r\n            while (bm.bgColor == existing) {\r\n                bm.bgColor = getRandomBgColor(rng);\r\n            }\r\n        }\r\n        else if (trait == RerollTrait.Outfit) {\r\n            Outfit existing = bm.outfit;\r\n            while (bm.outfit == existing) {\r\n                bm.outfit = getRandomOutfit(rng);\r\n            }\r\n        }\r\n        else if (trait == RerollTrait.HandAccessory) {\r\n            HandAccessory existing = bm.handAccessory;\r\n            while (bm.handAccessory == existing) {\r\n                bm.handAccessory = getRandomHandAccessory(rng);\r\n            }\r\n        }\r\n        else if (trait == RerollTrait.Mouth) {\r\n            Mouth existing = bm.mouth;\r\n            while (bm.mouth == existing) {\r\n                bm.mouth = getRandomMouth(rng);\r\n            }\r\n        }\r\n        else if (trait == RerollTrait.Eyes) {\r\n            Eyes existing = bm.eyes;\r\n            while (bm.eyes == existing) {\r\n                bm.eyes = getRandomEyes(rng);\r\n            }\r\n        }\r\n        else if (trait == RerollTrait.HeadAccessory) {\r\n            HeadAccessory existing = bm.headAccessory;\r\n            while (bm.headAccessory == existing) {\r\n                bm.headAccessory = getRandomHeadAccessory(rng);\r\n            }\r\n        }\r\n        else {\r\n            revert(\"Invalid reroll trait\");\r\n        }\r\n    }\r\n\r\n    function rerollAll(Rng memory rng, BitMonster memory bm) internal view {\r\n        bm.genesis = false;\r\n        bm.bgColor = getRandomBgColor(rng);\r\n        bm.outfit = getRandomOutfit(rng);\r\n        bm.handAccessory = getRandomHandAccessory(rng);\r\n        bm.mouth = getRandomMouth(rng);\r\n        bm.eyes = getRandomEyes(rng);\r\n        bm.headAccessory = getRandomHeadAccessory(rng);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Minter.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Controls who (if anyone) can mint a Bit Monster.\r\n *\r\n * @dev In web3, these are represented as 0 (NotAllowed), 1 (WhitelistOnly), and 2 (AllAllowed).\r\n */\r\nenum MintingState {\r\n    NotAllowed,\r\n    WhitelistOnly,\r\n    AllAllowed\r\n}\r\n\r\ncontract Minter is BitMonstersAddon {\r\n    using RngLibrary for Rng;\r\n\r\n    uint256 constant public WHITELIST_PER = 6;\r\n\r\n    address payable private payHere;\r\n    // 0 == \"not whitelisted\"\r\n    // 1000 + x == \"whitelisted and x whitelists left\"\r\n    mapping (address => uint256) public whitelist;\r\n    MintingState public mintingState;\r\n\r\n    bool[9] public mintedSpecials;\r\n    uint private mintedSpecialsCount = 0;\r\n\r\n    Rng private rng;\r\n\r\n    constructor(address payable paymentAddress, address[] memory whitelistedAddrs) {\r\n        payHere = paymentAddress;\r\n        whitelist[paymentAddress] = WHITELIST_PER + 1000;\r\n        for (uint i = 0; i < whitelistedAddrs.length; ++i) {\r\n            whitelist[whitelistedAddrs[i]] = WHITELIST_PER + 1000;\r\n        }\r\n        rng = RngLibrary.newRng();\r\n    }\r\n\r\n    /**\r\n     * Adds someone to the whitelist.\r\n     */\r\n    function addToWhitelist(address[] memory addrs) external onlyAdmin {\r\n        for (uint i = 0; i < addrs.length; ++i) {\r\n            if (whitelist[addrs[i]] == 0) {\r\n                whitelist[addrs[i]] = WHITELIST_PER + 1000;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes someone from the whitelist.\r\n     */\r\n    function removeFromWhitelist(address addr) external onlyAdmin {\r\n        delete whitelist[addr];\r\n    }\r\n\r\n    /**\r\n     * Generates a random Bit Monster.\r\n     *\r\n     * 9/6666 bit monsters will be special, which means they're prebuilt images instead of assembled from the 6 attributes a normal Bit Monster has.\r\n     * All 9 specials are guaranteed to be minted by the time all 6666 Bit Monsters are minted.\r\n     * The chance of a special at each roll is roughly even, although there's a slight dip in chance in the mid-range.\r\n     */\r\n    function generateBitMonster(Rng memory rn, bool[9] memory ms) internal returns (BitMonster memory) {\r\n        uint count = bitMonsters.totalSupply();\r\n\r\n        int ub = 6666 - int(count) - 1 - (90 - int(mintedSpecialsCount) * 10);\r\n        if (ub < 0) {\r\n            ub = 0;\r\n        }\r\n\r\n        BitMonster memory m;\r\n        if (rn.generate(0, uint(ub)) <= (6666 - count) / 666) {\r\n            m = BitMonsterGen.generateSpecialBitMonster(rn, ms);\r\n        }\r\n        else {\r\n            m = BitMonsterGen.generateUnspecialBitMonster(rn);\r\n        }\r\n\r\n        if (m.special != Special.NONE) {\r\n            mintedSpecialsCount++;\r\n        }\r\n        rng = rn;\r\n        return m;\r\n    }\r\n\r\n    /**\r\n     * Sets the MintingState. See MintingState above.\r\n     * By default, no one is allowed to mint. This function must be called before any Bit Monsters can be minted.\r\n     */\r\n    function setMintingState(MintingState state) external onlyAdmin {\r\n        mintingState = state;\r\n    }\r\n\r\n    /**\r\n     * Mints some Bit Monsters.\r\n     *\r\n     * @param count The number of Bit Monsters to mint. Must be >= 1 and <= 10.\r\n     *              You must send 0.06 ETH for each Bit Monster you want to mint.\r\n     */\r\n    function mint(uint count) external payable {\r\n        require(count >= 1 && count <= 10, \"Count must be >=1 and <=10\");\r\n        require(!Address.isContract(msg.sender), \"Contracts cannot mint\");\r\n        require(mintingState != MintingState.NotAllowed, \"Minting is not allowed atm\");\r\n\r\n        if (mintingState == MintingState.WhitelistOnly) {\r\n            require(whitelist[msg.sender] >= 1000 + count, \"Not enough whitelisted mints\");\r\n            whitelist[msg.sender] -= count;\r\n        }\r\n\r\n        require(msg.value == count * 0.06 ether, \"Send exactly 0.06 ETH for each mint\");\r\n\r\n        Rng memory rn = rng;\r\n        bool[9] memory ms = mintedSpecials;\r\n\r\n        for (uint i = 0; i < count; ++i) {\r\n            bitMonsters.createBitMonster(generateBitMonster(rn, ms), msg.sender);\r\n        }\r\n\r\n        rng = rn;\r\n        mintedSpecials = ms;\r\n\r\n        Address.sendValue(payHere, msg.value);\r\n    }\r\n\r\n    /**\r\n     * Mint for a giveaway.\r\n     */\r\n    function giveawayMint(address[] memory winners) external onlyAdmin {\r\n        Rng memory rn = rng;\r\n\r\n        for (uint i = 0; i < winners.length; ++i) {\r\n            bitMonsters.createBitMonster(BitMonsterGen.generateUnspecialBitMonster(rn), winners[i]);\r\n        }\r\n\r\n        rng = rn;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistedAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WHITELIST_PER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"giveawayMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedSpecials\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingState\",\"outputs\":[{\"internalType\":\"enum MintingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBitMonsters\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBitMonstersContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setMintingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Minter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4035dd812aaef26a9901a24d7d503f0dc76d1ec0be7a743bb696465a92e5fce6"}]}