{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface ILosslessController {\r\n  function beforeTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeTransferFrom(\r\n    address msgSender,\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeApprove(\r\n    address sender,\r\n    address spender,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function beforeIncreaseAllowance(\r\n    address msgSender,\r\n    address spender,\r\n    uint256 addedValue\r\n  ) external;\r\n\r\n  function beforeDecreaseAllowance(\r\n    address msgSender,\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function afterApprove(\r\n    address sender,\r\n    address spender,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterTransferFrom(\r\n    address msgSender,\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function afterIncreaseAllowance(\r\n    address sender,\r\n    address spender,\r\n    uint256 addedValue\r\n  ) external;\r\n\r\n  function afterDecreaseAllowance(\r\n    address sender,\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n}\r\n\r\ncontract AAGToken is Context, IERC20 {\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  string private constant NAME = \"AAG\";\r\n  string private constant SYMBOL = \"AAG\";\r\n\r\n  address public recoveryAdmin;\r\n  address private recoveryAdminCanditate;\r\n  bytes32 private recoveryAdminKeyHash;\r\n  address public admin;\r\n  uint256 public timelockPeriod;\r\n  uint256 public losslessTurnOffTimestamp;\r\n  bool public isLosslessTurnOffProposed;\r\n  bool public isLosslessOn = true;\r\n  ILosslessController private lossless;\r\n\r\n  event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n  event RecoveryAdminChangeProposed(address indexed candidate);\r\n  event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n  event LosslessTurnOffProposed(uint256 turnOffDate);\r\n  event LosslessTurnedOff();\r\n  event LosslessTurnedOn();\r\n\r\n  uint256 private constant _TOTAL_SUPPLY = 1000000000e18; // Initial supply 1 000 000 000\r\n  bool private initialPoolClaimed = false;\r\n\r\n  constructor(\r\n    address admin_,\r\n    address recoveryAdmin_,\r\n    uint256 timelockPeriod_,\r\n    address lossless_,\r\n    bool losslessOn\r\n  ) {\r\n    _mint(address(this), _TOTAL_SUPPLY);\r\n    admin = admin_;\r\n    recoveryAdmin = recoveryAdmin_;\r\n    timelockPeriod = timelockPeriod_;\r\n    isLosslessOn = losslessOn;\r\n    lossless = ILosslessController(lossless_);\r\n  }\r\n\r\n  // AAG unlocked tokens claiming\r\n\r\n  function claimTokens() public onlyRecoveryAdmin {\r\n    require(initialPoolClaimed == false, \"Already claimed\");\r\n    initialPoolClaimed = true;\r\n    _transfer(address(this), admin, _TOTAL_SUPPLY);\r\n  }\r\n\r\n  // --- LOSSLESS modifiers ---\r\n\r\n  modifier lssAprove(address spender, uint256 amount) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeApprove(_msgSender(), spender, amount);\r\n      _;\r\n      lossless.afterApprove(_msgSender(), spender, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssTransfer(address recipient, uint256 amount) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n      _;\r\n      lossless.afterTransfer(_msgSender(), recipient, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssTransferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeTransferFrom(_msgSender(), sender, recipient, amount);\r\n      _;\r\n      lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n      _;\r\n      lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n    if (isLosslessOn) {\r\n      lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n      _;\r\n      lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier onlyRecoveryAdmin() {\r\n    require(_msgSender() == recoveryAdmin, \"ERC20: Must be recovery admin\");\r\n    _;\r\n  }\r\n\r\n  // --- LOSSLESS management ---\r\n\r\n  function getAdmin() external view returns (address) {\r\n    return admin;\r\n  }\r\n\r\n  function transferOutBlacklistedFunds(address[] calldata from) external {\r\n    require(_msgSender() == address(lossless), \"ERC20: Only lossless contract\");\r\n    for (uint256 i = 0; i < from.length; i++) {\r\n      _transfer(from[i], address(lossless), balanceOf(from[i]));\r\n    }\r\n  }\r\n\r\n  function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\r\n    emit AdminChanged(admin, newAdmin);\r\n    admin = newAdmin;\r\n  }\r\n\r\n  function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\r\n    recoveryAdminCanditate = candidate;\r\n    recoveryAdminKeyHash = keyHash;\r\n    emit RecoveryAdminChangeProposed(candidate);\r\n  }\r\n\r\n  function acceptRecoveryAdminOwnership(bytes memory key) external {\r\n    require(_msgSender() == recoveryAdminCanditate, \"ERC20: Must be canditate\");\r\n    require(keccak256(key) == recoveryAdminKeyHash, \"ERC20: Invalid key\");\r\n    emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\r\n    recoveryAdmin = recoveryAdminCanditate;\r\n  }\r\n\r\n  function proposeLosslessTurnOff() public onlyRecoveryAdmin {\r\n    losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n    isLosslessTurnOffProposed = true;\r\n    emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\r\n  }\r\n\r\n  function executeLosslessTurnOff() public onlyRecoveryAdmin {\r\n    require(isLosslessTurnOffProposed, \"ERC20: TurnOff not proposed\");\r\n    require(losslessTurnOffTimestamp <= block.timestamp, \"ERC20: Time lock in progress\");\r\n    isLosslessOn = false;\r\n    isLosslessTurnOffProposed = false;\r\n    emit LosslessTurnedOff();\r\n  }\r\n\r\n  function executeLosslessTurnOn() public onlyRecoveryAdmin {\r\n    isLosslessTurnOffProposed = false;\r\n    isLosslessOn = true;\r\n    emit LosslessTurnedOn();\r\n  }\r\n\r\n  // --- ERC20 methods ---\r\n\r\n  function name() public view virtual returns (string memory) {\r\n    return NAME;\r\n  }\r\n\r\n  function symbol() public view virtual returns (string memory) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  function decimals() public view virtual returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n    require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"ERC20: Cannot change non zero allowance\");\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[sender] = senderBalance - amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"losslessOn\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessTurnOffProposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AAGToken","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f536ab9e042d414c8e54bff40147f34f0926e2440000000000000000000000009accdb69d8757dd9ceb7f69e985cbca879c0ddf60000000000000000000000000000000000000000000000000000000000015180000000000000000000000000e91d7cebce484070fc70777cb04f7e2efae31db40000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9aecefac499d12e94a2baa1a76b8434a502316da619fb32f2e481a0bc5cfb41"}]}