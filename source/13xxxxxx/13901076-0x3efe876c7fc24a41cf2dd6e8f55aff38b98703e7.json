{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/Babylonian.sol@v4.0.1-alpha\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface ITreasury {\r\n  enum ReserveType {\r\n    // used by reserve manager, will not used to bond ALD.\r\n    NULL,\r\n    // used by main asset bond\r\n    UNDERLYING,\r\n    // used by vault reward bond\r\n    VAULT_REWARD,\r\n    // used by liquidity token bond\r\n    LIQUIDITY_TOKEN\r\n  }\r\n\r\n  /// @dev return the usd value given token and amount.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function valueOf(address _token, uint256 _amount) external view returns (uint256);\r\n\r\n  /// @dev return the amount of bond ALD given token and usd value.\r\n  /// @param _token The address of token.\r\n  /// @param _value The usd of token.\r\n  function bondOf(address _token, uint256 _value) external view returns (uint256);\r\n\r\n  /// @dev deposit token to bond ALD.\r\n  /// @param _type The type of deposited token.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function deposit(\r\n    ReserveType _type,\r\n    address _token,\r\n    uint256 _amount\r\n  ) external returns (uint256);\r\n\r\n  /// @dev withdraw token from POL.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function withdraw(address _token, uint256 _amount) external;\r\n\r\n  /// @dev manage token to earn passive yield.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function manage(address _token, uint256 _amount) external;\r\n\r\n  /// @dev mint ALD reward.\r\n  /// @param _recipient The address of to receive ALD token.\r\n  /// @param _amount The amount of token.\r\n  function mintRewards(address _recipient, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IUniswapV2Pair {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/POLExecutor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router {\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract POLExecutor is Ownable {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  // The address of ALD Token.\r\n  address private constant ald = 0xb26C4B3Ca601136Daf98593feAeff9E0CA702a8D;\r\n  // The address of USDC Token.\r\n  address private constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n  // The address of WETH Token.\r\n  address private constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n  // The address of Aladdin DAO treasury.\r\n  address private constant treasury = 0x5aa403275cdf5a487D195E8306FD0628D4F5747B;\r\n  // The address of ALD/WETH pair.\r\n  address private constant aldweth = 0xED6c2F053AF48Cba6cBC0958124671376f01A903;\r\n  // The address of ALD/USDC pair.\r\n  address private constant aldusdc = 0xaAa2bB0212Ec7190dC7142cD730173b0A788eC31;\r\n\r\n  /// Mapping from whilelist address to status, true: whitelist, false: not whitelist.\r\n  mapping(address => bool) public whitelist;\r\n\r\n  modifier onlyWhitelist() {\r\n    require(whitelist[msg.sender], \"POLExecutor: only whitelist\");\r\n    _;\r\n  }\r\n\r\n  function updateWhitelist(address[] memory list, bool status) external onlyOwner {\r\n    for (uint256 i = 0; i < list.length; i++) {\r\n      whitelist[list[i]] = status;\r\n    }\r\n  }\r\n\r\n  /// @dev Withdraw token from treasury and buy ald token.\r\n  /// @param token The address of token to withdraw.\r\n  /// @param amount The amount of token to withdraw.\r\n  /// @param router The address of router to use, usually uniswap or sushiswap.\r\n  /// @param toUSDC The path from token to USDC.\r\n  /// @param toWETH The path from token to WETH.\r\n  /// @param minALDAmount The minimum amount of ALD should buy.\r\n  function withdrawAndSwapToALD(\r\n    address token,\r\n    uint256 amount,\r\n    address router,\r\n    address[] calldata toUSDC,\r\n    address[] calldata toWETH,\r\n    uint256 minALDAmount\r\n  ) external onlyWhitelist {\r\n    require(token != ald, \"POLExecutor: token should not be ald\");\r\n\r\n    ITreasury(treasury).withdraw(token, amount);\r\n    uint256 aldAmount;\r\n\r\n    // swap to usdc and then to ald\r\n    uint256 usdcAmount;\r\n    if (token == usdc) {\r\n      usdcAmount = amount / 2;\r\n    } else {\r\n      require(toUSDC[toUSDC.length - 1] == usdc, \"POLExecutor: invalid toUSDC path\");\r\n      usdcAmount = _swapTo(token, amount / 2, router, toUSDC);\r\n    }\r\n    amount = amount - amount / 2;\r\n    if (usdcAmount > 0) {\r\n      aldAmount = aldAmount.add(_swapToALD(aldusdc, usdc, usdcAmount));\r\n    }\r\n    // swap to weth and then to ald\r\n    uint256 wethAmount;\r\n    if (token == weth) {\r\n      wethAmount = amount;\r\n    } else {\r\n      require(toWETH[toWETH.length - 1] == weth, \"POLExecutor: invalid toUSDC path\");\r\n      wethAmount = _swapTo(token, amount, router, toWETH);\r\n    }\r\n    if (wethAmount > 0) {\r\n      aldAmount = aldAmount.add(_swapToALD(aldweth, weth, wethAmount));\r\n    }\r\n\r\n    require(aldAmount >= minALDAmount, \"POLExecutor: not enough ald amount\");\r\n  }\r\n\r\n  /// @dev Withdraw token from treasury, swap and add liquidity\r\n  /// @param token The address of token to withdraw.\r\n  /// @param amount The amount of token to withdraw.\r\n  /// @param router The address of router to use, usually uniswap or sushiswap.\r\n  /// @param toUSDC The path from token to USDC.\r\n  /// @param toWETH The path from token to WETH.\r\n  /// @param minALDUSDCLP The minimum amount of ALD USDC LP should get.\r\n  /// @param minALDWETHLP The minimum amount of ALD USDC LP should get.\r\n  function withdrawAndSwapToLP(\r\n    address token,\r\n    uint256 amount,\r\n    address router,\r\n    address[] calldata toUSDC,\r\n    address[] calldata toWETH,\r\n    uint256 minALDUSDCLP,\r\n    uint256 minALDWETHLP\r\n  ) external onlyWhitelist {\r\n    require(whitelist[msg.sender], \"POLExecutor: only whitelist\");\r\n    ITreasury(treasury).withdraw(token, amount);\r\n\r\n    // swap to usdc and then to aldusdc lp\r\n    uint256 usdcAmount;\r\n    if (token == usdc) {\r\n      usdcAmount = amount / 2;\r\n    } else {\r\n      require(toUSDC[toUSDC.length - 1] == usdc, \"POLExecutor: invalid toUSDC path\");\r\n      usdcAmount = _swapTo(token, amount / 2, router, toUSDC);\r\n    }\r\n    amount = amount - amount / 2;\r\n    if (usdcAmount > 0) {\r\n      uint256 lpAmount = _swapToLP(aldusdc, usdc, usdcAmount);\r\n      require(lpAmount >= minALDUSDCLP, \"not enough ALDUSDC LP\");\r\n    }\r\n\r\n    // swap to weth and then to aldweth lp\r\n    uint256 wethAmount;\r\n    if (token == weth) {\r\n      wethAmount = amount;\r\n    } else {\r\n      require(toWETH[toWETH.length - 1] == weth, \"POLExecutor: invalid toUSDC path\");\r\n      wethAmount = _swapTo(token, amount, router, toWETH);\r\n    }\r\n    if (wethAmount > 0) {\r\n      uint256 lpAmount = _swapToLP(aldweth, weth, wethAmount);\r\n      require(lpAmount >= minALDWETHLP, \"not enough ALDWETH LP\");\r\n    }\r\n  }\r\n\r\n  /// @dev Withdraw ALD from treasury, swap and add liquidity.\r\n  /// @param amount The amount of ald token to withdraw.\r\n  /// @param minALDUSDCLP The minimum amount of ALD USDC LP should get.\r\n  /// @param minALDWETHLP The minimum amount of ALD USDC LP should get.\r\n  function withdrawALDAndSwapToLP(\r\n    uint256 amount,\r\n    uint256 minALDUSDCLP,\r\n    uint256 minALDWETHLP\r\n  ) external onlyWhitelist {\r\n    require(whitelist[msg.sender], \"POLExecutor: only whitelist\");\r\n    ITreasury(treasury).manage(ald, amount);\r\n\r\n    uint256 aldusdcAmount = _swapToLP(aldusdc, ald, amount / 2);\r\n    require(aldusdcAmount >= minALDUSDCLP, \"POLExecutor: not enough ALDUSDC LP\");\r\n\r\n    uint256 aldwethAmount = _swapToLP(aldweth, ald, amount - amount / 2);\r\n    require(aldwethAmount >= minALDWETHLP, \"POLExecutor: not enough ALDWETH LP\");\r\n  }\r\n\r\n  /// @dev Withdraw ALD and token from treasury, and then add liquidity.\r\n  /// @param aldAmount The amount of ald token to withdraw.\r\n  /// @param token The address of other token, should be usdc or weth.\r\n  /// @param minLPAmount The minimum lp amount should get.\r\n  function withdrawAndAddLiquidity(\r\n    uint256 aldAmount,\r\n    address token,\r\n    uint256 minLPAmount\r\n  ) external onlyWhitelist {\r\n    address pair;\r\n    uint256 reserve0;\r\n    uint256 reserve1;\r\n    if (token == usdc) {\r\n      (reserve0, reserve1, ) = IUniswapV2Pair(aldusdc).getReserves();\r\n      pair = aldusdc;\r\n    } else if (token == weth) {\r\n      (reserve0, reserve1, ) = IUniswapV2Pair(aldweth).getReserves();\r\n      pair = aldweth;\r\n    } else {\r\n      revert(\"POLExecutor: token not supported\");\r\n    }\r\n    if (ald > token) {\r\n      (reserve0, reserve1) = (reserve1, reserve0);\r\n    }\r\n    uint256 tokenAmount = aldAmount.mul(reserve1).div(reserve0);\r\n\r\n    ITreasury(treasury).manage(ald, aldAmount);\r\n    ITreasury(treasury).withdraw(token, tokenAmount);\r\n    IERC20(ald).safeTransfer(pair, aldAmount);\r\n    IERC20(token).safeTransfer(pair, tokenAmount);\r\n\r\n    uint256 lpAmount = IUniswapV2Pair(pair).mint(treasury);\r\n    require(lpAmount >= minLPAmount, \"POLExecutor: not enough lp\");\r\n  }\r\n\r\n  function _ensureAllowance(\r\n    address token,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    if (IERC20(token).allowance(address(this), spender) < amount) {\r\n      IERC20(token).safeApprove(spender, 0);\r\n      IERC20(token).safeApprove(spender, amount);\r\n    }\r\n  }\r\n\r\n  function _swapTo(\r\n    address token,\r\n    uint256 amount,\r\n    address router,\r\n    address[] memory path\r\n  ) internal returns (uint256) {\r\n    require(path.length >= 2 && path[0] == token, \"POLExecutor: invalid swap path\");\r\n    _ensureAllowance(token, router, amount);\r\n    uint256[] memory amounts = IUniswapV2Router(router).swapExactTokensForTokens(\r\n      amount,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n    return amounts[amounts.length - 1];\r\n  }\r\n\r\n  function _swapToALD(\r\n    address pair,\r\n    address token,\r\n    uint256 amount\r\n  ) internal returns (uint256) {\r\n    uint256 rIn;\r\n    uint256 rOut;\r\n    if (ald < token) {\r\n      (rOut, rIn, ) = IUniswapV2Pair(pair).getReserves();\r\n    } else {\r\n      (rIn, rOut, ) = IUniswapV2Pair(pair).getReserves();\r\n    }\r\n    uint256 amountWithFee = amount.mul(997);\r\n    uint256 output = rOut.mul(amountWithFee).div(rIn.mul(1000).add(amountWithFee));\r\n    IERC20(token).safeTransfer(pair, amount);\r\n    if (ald < token) {\r\n      IUniswapV2Pair(pair).swap(output, 0, treasury, new bytes(0));\r\n    } else {\r\n      IUniswapV2Pair(pair).swap(0, output, treasury, new bytes(0));\r\n    }\r\n    return output;\r\n  }\r\n\r\n  function _swapToLP(\r\n    address pair,\r\n    address token,\r\n    uint256 amount\r\n  ) internal returns (uint256) {\r\n    // first swap some part of token to other token.\r\n    uint256 rIn;\r\n    uint256 rOut;\r\n    address token0 = IUniswapV2Pair(pair).token0();\r\n    address token1 = IUniswapV2Pair(pair).token1();\r\n    if (token0 == token) {\r\n      (rIn, rOut, ) = IUniswapV2Pair(pair).getReserves();\r\n    } else {\r\n      (rOut, rIn, ) = IUniswapV2Pair(pair).getReserves();\r\n    }\r\n    // (amount - x) : x * rOut * 997 / (rIn * 1000 + 997 * x) = (rIn + amount) : rOut\r\n    // => 997 * x^2 + 1997 * rIn * x - rIn * amount * 1000 = 0\r\n    // => x = (sqrt(rIn^2 * 3988009 + 3988000 * amount * rIn) - 1997 * rIn) / 1994\r\n    uint256 swapAmount = Babylonian.sqrt(rIn.mul(amount.mul(3988000).add(rIn.mul(3988009)))).sub(rIn.mul(1997)) / 1994;\r\n    uint256 amountWithFee = swapAmount.mul(997);\r\n    uint256 output = rOut.mul(amountWithFee).div(rIn.mul(1000).add(amountWithFee));\r\n    IERC20(token).safeTransfer(pair, swapAmount);\r\n    if (token0 == token) {\r\n      IUniswapV2Pair(pair).swap(0, output, address(this), new bytes(0));\r\n      IERC20(token1).safeTransfer(pair, output);\r\n    } else {\r\n      IUniswapV2Pair(pair).swap(output, 0, address(this), new bytes(0));\r\n      IERC20(token0).safeTransfer(pair, output);\r\n    }\r\n\r\n    // then add liquidity\r\n    IERC20(token).safeTransfer(pair, amount.sub(swapAmount));\r\n    return IUniswapV2Pair(pair).mint(treasury);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minALDUSDCLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minALDWETHLP\",\"type\":\"uint256\"}],\"name\":\"withdrawALDAndSwapToLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aldAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLPAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toUSDC\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toWETH\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minALDAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndSwapToALD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toUSDC\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toWETH\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minALDUSDCLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minALDWETHLP\",\"type\":\"uint256\"}],\"name\":\"withdrawAndSwapToLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"POLExecutor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://58e6fcb951099005a1f08732be6c3f8c2871aa0e2469be3dca01e9385ff6c39b"}]}