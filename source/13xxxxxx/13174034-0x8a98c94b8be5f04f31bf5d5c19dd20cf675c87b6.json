{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.4;\r\n\r\n// 10,000 unique collectible eggs with proof of ownership stored on the Ethereum blockchain\r\n//   _   _   _   _   _   _   _   _   _   _\r\n//  / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\\r\n// ( C | r | y | p | t | o | E | g | g | s )\r\n//  \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/\r\n//\r\n// Website:   https://www.cryptoeggs.com\r\n// Discord:   https://discord.gg/63PEpwVR5J\r\n// Telegram:  https://t.me/cryptoeggscom\r\n// Twitter:   https://www.twitter.com/cryptoeggscom\r\n//\r\n\r\ncontract CryptoEggs {\r\n  // You can use this hash to verify the image file containing all the eggs\r\n  string public imageHash =\r\n    \"a9874035a17b212660fa69a6fb7bfa7feaa03e88825410fb13124c41a6bf70cb\";\r\n\r\n  address owner;\r\n  address private recAddress =\r\n    address(0x96Acc8515A660Ee1d84Bf393FA871948AB35a758);\r\n\r\n  string public standard = \"CRYPTOEGGS\";\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  uint256 public totalInitialFreeEggs;\r\n\r\n  uint256 public EggsRemainingToAssign = 0;\r\n\r\n  // Inital Free Eggs tracker\r\n  bool public allFreeEggsAssigned = false;\r\n  uint256 public freeEggsRemainingToAssign = 0;\r\n\r\n  mapping(uint256 => address) public eggIndexToAddress;\r\n\r\n  /* This creates an array with all balances */\r\n  mapping(address => uint256) public balanceOf;\r\n\r\n  uint256[] assignedEggsArr;\r\n\r\n  address[] public freeEggHolders;\r\n  mapping(address => bool) public freeEggHolderKnown;\r\n\r\n  struct Offer {\r\n    bool isForSale;\r\n    uint256 eggIndex;\r\n    address seller;\r\n    uint256 minValue; // in ether\r\n    address onlySellTo; // specify to sell only to a specific person\r\n  }\r\n\r\n  struct Bid {\r\n    bool hasBid;\r\n    uint256 eggIndex;\r\n    address bidder;\r\n    uint256 value;\r\n  }\r\n\r\n  // A record of eggs that are offered for sale at a specific minimum value, and perhaps to a specific person\r\n  mapping(uint256 => Offer) public eggsOfferedForSale;\r\n\r\n  // A record of the highest egg bid\r\n  mapping(uint256 => Bid) public eggBids;\r\n\r\n  mapping(address => uint256) public pendingWithdrawals;\r\n\r\n  event Assign(address indexed to, uint256 indexed eggIndex);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event EggTransfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed eggIndex\r\n  );\r\n  event EggOffered(\r\n    uint256 indexed eggIndex,\r\n    uint256 minValue,\r\n    address indexed toAddress,\r\n    address indexed sellerAddress\r\n  );\r\n  event EggBidEntered(\r\n    uint256 indexed eggIndex,\r\n    uint256 value,\r\n    address indexed fromAddress\r\n  );\r\n  event EggBidWithdrawn(\r\n    uint256 indexed eggIndex,\r\n    uint256 value,\r\n    address indexed fromAddress\r\n  );\r\n  event EggBought(\r\n    uint256 indexed eggIndex,\r\n    uint256 value,\r\n    address indexed fromAddress,\r\n    address indexed toAddress\r\n  );\r\n  event EggNoLongerForSale(uint256 indexed eggIndex);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  constructor() payable {\r\n    owner = msg.sender;\r\n    totalInitialFreeEggs = 100; // Initial of 100 free eggs\r\n    totalSupply = 10000; // Update total supply\r\n    EggsRemainingToAssign = totalSupply;\r\n    freeEggsRemainingToAssign = totalInitialFreeEggs;\r\n    name = \"CRYPTOEGGS\"; // Set the name for display purposes\r\n    symbol = \"CEGG\"; // Set the symbol for display purposes\r\n    decimals = 0; // Amount of decimals for display purposes\r\n  }\r\n\r\n  function claimRandomFreeEgg(address to, uint256 eggIndex) public {\r\n    require(eggIndexToAddress[eggIndex] == address(0x0));\r\n    require(!allFreeEggsAssigned);\r\n    require(freeEggsRemainingToAssign != 0, \"No more free egs left\");\r\n    require(eggIndex <= 10000);\r\n    require(!freeEggHolderKnown[to], \"Already claimed a free egg!\");\r\n\r\n    if (eggIndexToAddress[eggIndex] != to) {\r\n      if (eggIndexToAddress[eggIndex] != address(0x0)) {\r\n        balanceOf[eggIndexToAddress[eggIndex]]--;\r\n      } else {\r\n        EggsRemainingToAssign--;\r\n        freeEggsRemainingToAssign--;\r\n      }\r\n      eggIndexToAddress[eggIndex] = to;\r\n      assignedEggsArr.push(eggIndex);\r\n      balanceOf[to]++;\r\n\r\n      freeEggHolders.push(to);\r\n      freeEggHolderKnown[to] = true;\r\n\r\n      emit Assign(to, eggIndex);\r\n    }\r\n  }\r\n\r\n  function getRemainingFreeEgs() public view returns (uint256) {\r\n    return freeEggsRemainingToAssign;\r\n  }\r\n\r\n  function buyRandomEgg(address _to, uint256 eggIndex) public payable {\r\n    require(eggIndexToAddress[eggIndex] == address(0x0));\r\n    require(msg.value != 0);\r\n    require(msg.value >= 50000000000000000);\r\n    require(eggIndex <= 10000);\r\n\r\n    (bool sent, bytes memory data) = payable(recAddress).call{value: msg.value}(\r\n      \"\"\r\n    );\r\n    require(sent, \"Failed to send Ether\");\r\n\r\n    if (eggIndexToAddress[eggIndex] != _to) {\r\n      if (eggIndexToAddress[eggIndex] != address(0x0)) {\r\n        balanceOf[eggIndexToAddress[eggIndex]]--;\r\n      } else {\r\n        EggsRemainingToAssign--;\r\n      }\r\n      eggIndexToAddress[eggIndex] = _to;\r\n      balanceOf[_to]++;\r\n      emit Assign(_to, eggIndex);\r\n    }\r\n  }\r\n\r\n  function buyUnclaimedEgg(address _to, uint256 eggIndex) public payable {\r\n    require(eggIndexToAddress[eggIndex] == address(0x0));\r\n    require(msg.value != 0);\r\n    require(msg.value >= 100000000000000000);\r\n    require(eggIndex <= 10000);\r\n\r\n    (bool sent, bytes memory data) = payable(recAddress).call{value: msg.value}(\r\n      \"\"\r\n    );\r\n    require(sent, \"Failed to send Ether\");\r\n\r\n    if (eggIndexToAddress[eggIndex] != _to) {\r\n      if (eggIndexToAddress[eggIndex] != address(0x0)) {\r\n        balanceOf[eggIndexToAddress[eggIndex]]--;\r\n      } else {\r\n        EggsRemainingToAssign--;\r\n      }\r\n      eggIndexToAddress[eggIndex] = _to;\r\n      balanceOf[_to]++;\r\n      emit Assign(_to, eggIndex);\r\n    }\r\n  }\r\n\r\n  // Transfer ownership of an egg to another user without requiring payment\r\n  function transferEgg(address to, uint256 eggIndex) public {\r\n    require(eggIndexToAddress[eggIndex] == msg.sender);\r\n    require(eggIndex <= 10000);\r\n    if (eggsOfferedForSale[eggIndex].isForSale) {\r\n      eggNoLongerForSale(eggIndex);\r\n    }\r\n    eggIndexToAddress[eggIndex] = to;\r\n    balanceOf[msg.sender]--;\r\n    balanceOf[to]++;\r\n    emit Transfer(msg.sender, to, 1);\r\n    emit EggTransfer(msg.sender, to, eggIndex);\r\n    // Check for the case where there is a bid from the new owner and refund it.\r\n    // Any other bid can stay in place.\r\n    Bid storage bid = eggBids[eggIndex];\r\n    if (bid.bidder == to) {\r\n      // Kill bid and refund value\r\n      pendingWithdrawals[to] += bid.value;\r\n      eggBids[eggIndex] = Bid(false, eggIndex, address(0x0), 0);\r\n    }\r\n  }\r\n\r\n  function eggNoLongerForSale(uint256 eggIndex) public {\r\n    require(eggIndexToAddress[eggIndex] == msg.sender);\r\n    require(eggIndex <= 10000);\r\n    eggsOfferedForSale[eggIndex] = Offer(\r\n      false,\r\n      eggIndex,\r\n      msg.sender,\r\n      0,\r\n      address(0x0)\r\n    );\r\n    emit EggNoLongerForSale(eggIndex);\r\n  }\r\n\r\n  function offerEggForSale(uint256 eggIndex, uint256 minSalePriceInWei) public {\r\n    require(eggIndexToAddress[eggIndex] == msg.sender);\r\n    require(eggIndex <= 10000);\r\n    eggsOfferedForSale[eggIndex] = Offer(\r\n      true,\r\n      eggIndex,\r\n      msg.sender,\r\n      minSalePriceInWei,\r\n      address(0x0)\r\n    );\r\n    emit EggOffered(eggIndex, minSalePriceInWei, address(0x0), msg.sender);\r\n  }\r\n\r\n  function offerEggForSaleToAddress(\r\n    uint256 eggIndex,\r\n    uint256 minSalePriceInWei,\r\n    address toAddress\r\n  ) public {\r\n    require(eggIndexToAddress[eggIndex] != msg.sender);\r\n    require(eggIndex >= 10000);\r\n    eggsOfferedForSale[eggIndex] = Offer(\r\n      true,\r\n      eggIndex,\r\n      msg.sender,\r\n      minSalePriceInWei,\r\n      toAddress\r\n    );\r\n    emit EggOffered(eggIndex, minSalePriceInWei, toAddress, msg.sender);\r\n  }\r\n\r\n  function buyEgg(uint256 eggIndex) public payable {\r\n    Offer storage offer = eggsOfferedForSale[eggIndex];\r\n    require(eggIndex <= 10000);\r\n    require(offer.isForSale); // egg not actually for sale\r\n\r\n    // Check this rule !!!!!!!!!!!!\r\n    require(offer.onlySellTo == address(0x0) || offer.onlySellTo == msg.sender); // egg not supposed to be sold to this user\r\n    require(msg.value >= offer.minValue); // Didn't send enough ETH\r\n    require(offer.seller == eggIndexToAddress[eggIndex]); // Seller no longer owner of egg\r\n\r\n    address seller = offer.seller;\r\n\r\n    eggIndexToAddress[eggIndex] = msg.sender;\r\n    balanceOf[seller]--;\r\n    balanceOf[msg.sender]++;\r\n    emit Transfer(seller, msg.sender, 1);\r\n\r\n    eggNoLongerForSale(eggIndex);\r\n    pendingWithdrawals[seller] += msg.value;\r\n    emit EggBought(eggIndex, msg.value, seller, msg.sender);\r\n\r\n    // Check for the case where there is a bid from the new owner and refund it.\r\n    // Any other bid can stay in place.\r\n    Bid storage bid = eggBids[eggIndex];\r\n    if (bid.bidder == msg.sender) {\r\n      // Kill bid and refund value\r\n      pendingWithdrawals[msg.sender] += bid.value;\r\n      eggBids[eggIndex] = Bid(false, eggIndex, address(0x0), 0);\r\n    }\r\n  }\r\n\r\n  function withdraw() public {\r\n    uint256 amount = pendingWithdrawals[msg.sender];\r\n    uint256 fee = (amount / 100) * 3;\r\n    uint256 amountMinusFee = amount - fee;\r\n    // Remember to zero the pending refund before\r\n    // sending to prevent re-entrancy attacks\r\n    pendingWithdrawals[msg.sender] = 0;\r\n    payable(recAddress).transfer(fee);\r\n    payable(msg.sender).transfer(amountMinusFee);\r\n  }\r\n\r\n  function enterBidForEgg(uint256 eggIndex) public payable {\r\n    require(eggIndex <= 10000);\r\n    require(eggIndexToAddress[eggIndex] != address(0x0));\r\n    require(eggIndexToAddress[eggIndex] != msg.sender);\r\n    require(msg.value != 0);\r\n    Bid storage existing = eggBids[eggIndex];\r\n    require(msg.value >= existing.value);\r\n    if (existing.value > 0) {\r\n      // Refund the failing bid\r\n      pendingWithdrawals[existing.bidder] += existing.value;\r\n    }\r\n    eggBids[eggIndex] = Bid(true, eggIndex, msg.sender, msg.value);\r\n    emit EggBidEntered(eggIndex, msg.value, msg.sender);\r\n  }\r\n\r\n  function acceptBidForEgg(uint256 eggIndex, uint256 minPrice) public {\r\n    require(eggIndex <= 10000);\r\n    require(eggIndexToAddress[eggIndex] == msg.sender);\r\n    address seller = msg.sender;\r\n    Bid storage bid = eggBids[eggIndex];\r\n    require(bid.value != 0);\r\n    require(bid.value >= minPrice);\r\n\r\n    eggIndexToAddress[eggIndex] = bid.bidder;\r\n    balanceOf[seller]--;\r\n    balanceOf[bid.bidder]++;\r\n    emit Transfer(seller, bid.bidder, 1);\r\n\r\n    eggsOfferedForSale[eggIndex] = Offer(\r\n      false,\r\n      eggIndex,\r\n      bid.bidder,\r\n      0,\r\n      address(0x0)\r\n    );\r\n    uint256 amount = bid.value;\r\n    eggBids[eggIndex] = Bid(false, eggIndex, address(0x0), 0);\r\n    pendingWithdrawals[seller] += amount;\r\n    emit EggBought(eggIndex, amount, seller, bid.bidder);\r\n  }\r\n\r\n  function withdrawBidForEgg(uint256 eggIndex) public {\r\n    require(eggIndex <= 10000);\r\n    require(eggIndexToAddress[eggIndex] != address(0x0));\r\n    require(eggIndexToAddress[eggIndex] != msg.sender);\r\n    Bid storage bid = eggBids[eggIndex];\r\n    require(bid.bidder == msg.sender);\r\n    emit EggBidWithdrawn(eggIndex, bid.value, msg.sender);\r\n    uint256 amount = bid.value;\r\n    eggBids[eggIndex] = Bid(false, eggIndex, address(0x0), 0);\r\n    // Refund the bid money\r\n    payable(msg.sender).transfer(amount);\r\n  }\r\n\r\n  function getAllClaimedEggs() public view returns (uint256[] memory) {\r\n    return assignedEggsArr;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"EggBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"EggBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"EggBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"EggNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"}],\"name\":\"EggOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"EggTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EggsRemainingToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFreeEggsAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"buyEgg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"buyRandomEgg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"buyUnclaimedEgg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"claimRandomFreeEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggIndexToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"eggNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eggsOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForEgg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeEggHolderKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freeEggHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeEggsRemainingToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClaimedEggs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingFreeEgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerEggForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerEggForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInitialFreeEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"transferEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoEggs","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d9de02b0fe0124832554e23012b59b71e12efc9632d37fc3a9ed6c2356caceb"}]}