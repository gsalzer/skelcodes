{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8;\r\n\r\ncontract FlashBotRunner {\r\n\r\n    uint256 private constant OP_OPTIONAL = 0x1;\r\n    uint256 private constant OP_CHECK_RESULT = 0x2;\r\n    uint256 private constant OP_STATIC_CALL = 0x4;\r\n    uint256 private constant OP_DELEGATE_CALL = 0x8;\r\n\r\n    struct Operation {\r\n        address payable callTarget;\r\n        bytes callData;\r\n        uint256 callValue;\r\n        uint256 gas;\r\n        bytes32 returnHash;\r\n        uint256 flags;\r\n    }\r\n\r\n    mapping(address => bool) public isOperator;\r\n\r\n    modifier onlyOperatorOrSelf() {\r\n        require(msg.sender == address(this) || isOperator[msg.sender], 'ONLY_OPERATOR_OR_SELF');\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory operators) {\r\n        for (uint256 i = 0; i < operators.length; ++i) {\r\n            isOperator[operators[i]] = true;\r\n        }\r\n    }\r\n\r\n    function toggleOperator(address operator, bool isAllowed)\r\n        external\r\n        onlyOperatorOrSelf\r\n    {\r\n        isOperator[operator] = isAllowed;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    )\r\n        external\r\n        pure\r\n        returns (bytes4)\r\n    {\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function execute(Operation[] memory ops)\r\n        public\r\n        payable\r\n        onlyOperatorOrSelf\r\n    {\r\n        for (uint256 i = 0; i < ops.length; ++i) {\r\n            Operation memory op = ops[i];\r\n            uint256 callGas = op.gas == 0 ? gasleft() - 2300 : op.gas;\r\n            bool success;\r\n            bytes memory resultData;\r\n            if (op.flags & OP_DELEGATE_CALL == OP_DELEGATE_CALL) {\r\n                (success, resultData) = op.callTarget\r\n                    .delegatecall{gas: callGas}(op.callData);\r\n            } else if (op.flags & OP_STATIC_CALL == OP_STATIC_CALL) {\r\n                (success, resultData) = op.callTarget\r\n                    .staticcall{gas: callGas}(op.callData);\r\n            } else {\r\n                (success, resultData) = op.callTarget\r\n                    .call{value: op.callValue, gas: callGas}(op.callData);\r\n            }\r\n            if (op.flags & OP_OPTIONAL != OP_OPTIONAL) {\r\n                if (!success) {\r\n                    if (resultData.length == 0) {\r\n                        revert('CALL_FAILED');\r\n                    }\r\n                    assembly {\r\n                        revert(add(resultData, 32), mload(resultData))\r\n                    }\r\n                }\r\n            }\r\n            if (op.flags & OP_CHECK_RESULT == OP_CHECK_RESULT) {\r\n                require(op.returnHash == keccak256(resultData), 'UNEXPECTED_CALL_RESULT');\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"callTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"returnHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct FlashBotRunner.Operation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FlashBotRunner","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008ad20d39c20ba3a05b21a9281191371d42a9dfe7","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3778ab733a3826a9435a0d766dfe304518bc5c3eb024441eae058eea35d9a105"}]}