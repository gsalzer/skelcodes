{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\r\n */\r\ncontract Ownable {\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current pending owner.\r\n     */\r\n    address public pendingOwner;\r\n\r\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\r\n    event NewPendingOwner(\r\n        address indexed oldPendingOwner,\r\n        address indexed newPendingOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"onlyOwner: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     * @param _owner owner address.\r\n     */\r\n    function __Ownable_init(address _owner) internal {\r\n        owner = _owner;\r\n        emit NewOwner(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Base on the inputing parameter `_newPendingOwner` to check the exact error reason.\r\n     * @dev Transfer contract control to a new owner. The _newPendingOwner must call `_acceptOwner` to finish the transfer.\r\n     * @param _newPendingOwner New pending owner.\r\n     */\r\n    function _setPendingOwner(address _newPendingOwner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _newPendingOwner != address(0) && _newPendingOwner != pendingOwner,\r\n            \"_setPendingOwner: New owenr can not be zero address and owner has been set!\"\r\n        );\r\n\r\n        // Gets current owner.\r\n        address _oldPendingOwner = pendingOwner;\r\n\r\n        // Sets new pending owner.\r\n        pendingOwner = _newPendingOwner;\r\n\r\n        emit NewPendingOwner(_oldPendingOwner, _newPendingOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts the admin rights, but only for pendingOwenr.\r\n     */\r\n    function _acceptOwner() external {\r\n        require(\r\n            msg.sender == pendingOwner,\r\n            \"_acceptOwner: Only for pending owner!\"\r\n        );\r\n\r\n        // Gets current values for events.\r\n        address _oldOwner = owner;\r\n        address _oldPendingOwner = pendingOwner;\r\n\r\n        // Set the new contract owner.\r\n        owner = pendingOwner;\r\n\r\n        // Clear the pendingOwner.\r\n        pendingOwner = address(0);\r\n\r\n        emit NewOwner(_oldOwner, owner);\r\n        emit NewPendingOwner(_oldPendingOwner, pendingOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ClaimDF is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Token address to be allocated\r\n    IERC20 public token;\r\n\r\n    /// @notice Unlocked amount per stage\r\n    uint256 public stageAmount;\r\n\r\n    /// @notice Unlocked stage index\r\n    uint256 public unlockedStageIndex;\r\n\r\n    /// @notice Fix the unlock time of each stage\r\n    uint256[] public unlockStage = [\r\n        1624982400, // 2021-06-30\r\n        1632931200, // 2021-09-30\r\n        1640880000, // 2021-12-31\r\n        1648569600, // 2022-03-30\r\n        1656518400, // 2022-06-30\r\n        1664467200, // 2022-09-30\r\n        1672416000, // 2022-12-31\r\n        1680105600 // 2023-03-30\r\n    ];\r\n\r\n    /// @dev Emitted when `token` is changed.\r\n    event ClaimToken(IERC20 token);\r\n\r\n    /// @dev Emitted when `stageAmount` is changed.\r\n    event ClaimStageAmount(uint256 stageAmount);\r\n\r\n    /// @dev Emitted when `unlockedStageIndex` is changed.\r\n    event ClaimUnlockedStageIndex(uint256 oldUnlockedStageIndex, uint256 unlockedStageIndex);\r\n\r\n    /// @param _token token address to be allocated\r\n    /// @param _owner owner address\r\n    /// @param _stageAmount unlocked amount per stage\r\n    constructor(IERC20 _token, address _owner, uint256 _stageAmount) public {\r\n        __Ownable_init(_owner);\r\n\r\n        token = _token;\r\n        emit ClaimToken(_token);\r\n\r\n        stageAmount = _stageAmount;\r\n        emit ClaimStageAmount(_stageAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get amount and stage index.\r\n     * @dev Calculation unlocked amount and stage index by timestamp.\r\n     * @param _timestamp Greenwich timestamp.\r\n     * @return Unlocked amount; Unlocked stage index.\r\n     */\r\n    function _getClaimAmount(uint256 _timestamp) internal view returns (uint256, uint256) {\r\n\r\n        uint256[] memory _unlockStage = unlockStage;\r\n        uint256 _unlockedStageNum = unlockedStageIndex;\r\n        while (_unlockedStageNum < _unlockStage.length && _timestamp > _unlockStage[_unlockedStageNum])\r\n            _unlockedStageNum++;\r\n\r\n        return (_unlockedStageNum.sub(unlockedStageIndex).mul(stageAmount), _unlockedStageNum);\r\n    }\r\n\r\n    /**\r\n     * @notice Receive unlocked token.\r\n     * @dev It must be the owner address to call.\r\n     */\r\n    function claim() external onlyOwner {\r\n        (uint256 _amount, uint256 _unlockedStageIndex) = _getClaimAmount(block.timestamp);\r\n        require(_unlockedStageIndex > unlockedStageIndex, \"Not unlocked!\");\r\n\r\n        uint256 _oldUnlockedStageIndex = unlockedStageIndex;\r\n        unlockedStageIndex = _unlockedStageIndex;\r\n        emit ClaimUnlockedStageIndex(_oldUnlockedStageIndex, _unlockedStageIndex);\r\n\r\n        token.transfer(owner, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get claim info.\r\n     * @dev Get unlocked amount and information for the next unlocking stage by timestamp.\r\n     * @param _timestamp Greenwich timestamp.\r\n     * @return  _amount : unlocked amount,\r\n     *          _unlockedStageIndex : unlocking stage index,\r\n     *          _stageTimestamp : unlocking stage timestamp.\r\n     */\r\n    function getClaimInfo(uint256 _timestamp) public view returns (uint256 _amount, uint256 _unlockedStageIndex, uint256 _stageTimestamp) {\r\n        (_amount, _unlockedStageIndex) = _getClaimAmount(_timestamp);\r\n        _stageTimestamp = _unlockedStageIndex == unlockStage.length ? unlockStage[_unlockedStageIndex - 1] : unlockStage[_unlockedStageIndex];\r\n    }\r\n\r\n    /**\r\n     * @notice Get current claim info.\r\n     * @dev Get unlocked amount and information for the next unlocking stage by block timestamp.\r\n     * @return unlocked amount; unlocking stage index; unlocking stage timestamp.\r\n     */\r\n    function getClaimInfo() external view returns (uint256, uint256, uint256) {\r\n        return getClaimInfo(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the token balance of the contract\r\n     * @return  Contract token balance.\r\n     */\r\n    function getTokenBalance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stageAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stageAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimStageAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnlockedStageIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedStageIndex\",\"type\":\"uint256\"}],\"name\":\"ClaimUnlockedStageIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockedStageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stageTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedStageIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ClaimDF","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000431ad2ff6a9c365805ebad47ee021148d6f7dbe000000000000000000000000064b7fe15560e74035f8b630d01cb45189cf7fc3c0000000000000000000000000000000000000000000039b4412d791f79500000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e859b9f650a3a2f2320e16013691999db1cf2e02ceb1cc9071fcc8aed784fc4b"}]}