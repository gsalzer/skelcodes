{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/Ownable.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n\r\nOpen Zeppelin's ownable doesn't quite work with factory pattern because _owner has private access.\r\nWhen you create a DU, open-zeppelin _owner would be 0x0 (no state from template). Then no address could change _owner to the DU owner.\r\n\r\nWith this custom Ownable, the first person to call initialiaze() can set owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public {\r\n        require(msg.sender == pendingOwner, \"onlyPendingOwner\");\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/PurchaseListener.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface PurchaseListener {\r\n    // TODO: find out about how to best detect who implements an interface\r\n    //   see at least https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n    // function isPurchaseListener() external returns (bool);\r\n\r\n    /**\r\n     * Similarly to ETH transfer, returning false will decline the transaction\r\n     *   (declining should probably cause revert, but that's up to the caller)\r\n     * IMPORTANT: include onlyMarketplace modifier to your implementations!\r\n     */\r\n    function onPurchase(bytes32 productId, address subscriber, uint endTimestamp, uint priceDatacoin, uint feeDatacoin)\r\n        external returns (bool accepted);\r\n}\r\n\r\n\r\n// File contracts/CloneLib.sol\r\n\r\n\r\n\r\n\r\n//solhint-disable avoid-low-level-calls\r\n//solhint-disable no-inline-assembly\r\n\r\n/** NOTE: DO NOT MODIFY. This has been audited and test was removed in truffle -> waffle transition */\r\nlibrary CloneLib {\r\n    /**\r\n     * Returns bytecode of a new contract that clones template\r\n     * Adapted from https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-sdk/master/packages/lib/contracts/upgradeability/ProxyFactory.sol\r\n     * Which in turn adapted it from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\r\n     */\r\n    function cloneBytecode(address template) internal pure returns (bytes memory code) {\r\n        bytes20 targetBytes = bytes20(template);\r\n        assembly {\r\n            code := mload(0x40)\r\n            mstore(0x40, add(code, 0x57)) // code length is 0x37 plus 0x20 for bytes length field. update free memory pointer\r\n            mstore(code, 0x37) // store length in first 32 bytes\r\n\r\n            // store clone source address after first 32 bytes\r\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(code, 0x34), targetBytes)\r\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Predict the CREATE2 address.\r\n     * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md for calculation details\r\n     */\r\n    function predictCloneAddressCreate2(\r\n        address template,\r\n        address deployer,\r\n        bytes32 salt\r\n    ) internal pure returns (address proxy) {\r\n        bytes32 codehash = keccak256(cloneBytecode(template));\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(\r\n            bytes1(0xff),\r\n            deployer,\r\n            salt,\r\n            codehash\r\n        )))));\r\n    }\r\n\r\n    /**\r\n     * Deploy given bytecode using CREATE2, address can be known in advance, get it from predictCloneAddressCreate2\r\n     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\r\n     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\r\n     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\r\n     */\r\n    function deployCodeAndInitUsingCreate2(\r\n        bytes memory code,\r\n        bytes memory initData,\r\n        bytes32 salt\r\n    ) internal returns (address payable proxy) {\r\n        uint256 len = code.length;\r\n        assembly {\r\n            proxy := create2(0, add(code, 0x20), len, salt)\r\n        }\r\n        require(proxy != address(0), \"error_alreadyCreated\");\r\n        if (initData.length != 0) {\r\n            (bool success, ) = proxy.call(initData);\r\n            require(success, \"error_initialization\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deploy given bytecode using old-style CREATE, address is hash(sender, nonce)\r\n     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\r\n     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\r\n     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\r\n     */\r\n    function deployCodeAndInitUsingCreate(\r\n        bytes memory code,\r\n        bytes memory initData\r\n    ) internal returns (address payable proxy) {\r\n        uint256 len = code.length;\r\n        assembly {\r\n            proxy := create(0, add(code, 0x20), len)\r\n        }\r\n        require(proxy != address(0), \"error_create\");\r\n        if (initData.length != 0) {\r\n            (bool success, ) = proxy.call(initData);\r\n            require(success, \"error_initialization\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IAMB.sol\r\n\r\n\r\n\r\n\r\n\r\n// Tokenbridge Arbitrary Message Bridge\r\ninterface IAMB {\r\n\r\n    //only on mainnet AMB:\r\n    function executeSignatures(bytes calldata _data, bytes calldata _signatures) external;\r\n\r\n    function messageSender() external view returns (address);\r\n\r\n    function maxGasPerTx() external view returns (uint256);\r\n\r\n    function transactionHash() external view returns (bytes32);\r\n\r\n    function messageId() external view returns (bytes32);\r\n\r\n    function messageSourceChainId() external view returns (bytes32);\r\n\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n\r\n    function requiredSignatures() external view returns (uint256);\r\n    function numMessagesSigned(bytes32 _message) external view returns (uint256);\r\n    function signature(bytes32 _hash, uint256 _index) external view returns (bytes memory);\r\n    function message(bytes32 _hash) external view returns (bytes memory);\r\n    function failedMessageDataHash(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function failedMessageReceiver(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function failedMessageSender(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function requireToPassMessage(\r\n        address _contract,\r\n        bytes calldata _data,\r\n        uint256 _gas\r\n    ) external returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/ITokenMediator.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface ITokenMediator {\r\n    function bridgeContract() external view returns (address);\r\n\r\n    //returns:\r\n    //Multi-token mediator: 0xb1516c26 == bytes4(keccak256(abi.encodePacked(\"multi-erc-to-erc-amb\")))\r\n    //Single-token mediator: 0x76595b56 ==  bytes4(keccak256(abi.encodePacked(\"erc-to-erc-amb\")))\r\n    function getBridgeMode() external pure returns (bytes4 _data);\r\n\r\n    function relayTokensAndCall(address token, address _receiver, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\n\r\n// File contracts/IERC677Receiver.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC677Receiver {\r\n    function onTokenTransfer(\r\n        address _sender,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/DataUnionMainnet.sol\r\n\r\n\r\n\r\n\r\n\r\n // TODO: switch to \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DataUnionMainnet is Ownable, PurchaseListener, IERC677Receiver {\r\n\r\n    event RevenueReceived(uint256 amount);\r\n\r\n    // NOTE: any variables set below will NOT be visible in clones from CloneLib / factories\r\n    //       clones must set variables in initialize()\r\n\r\n    ERC20 public tokenMainnet;\r\n    ERC20 public tokenSidechain;\r\n    ITokenMediator public tokenMediatorMainnet;\r\n    ITokenMediator public tokenMediatorSidechain;\r\n    address public sidechainDUFactory;\r\n    uint256 public sidechainMaxGas;\r\n\r\n    address public sidechainDUTemplate; // needed to compute sidechain address\r\n\r\n    // only passed to the sidechain, hence not made public\r\n    uint256 initialAdminFeeFraction;\r\n    uint256 initialDataUnionFeeFraction;\r\n    address initialDataUnionBeneficiary;\r\n\r\n    function version() public pure returns (uint256) { return 2; }\r\n\r\n    uint256 public tokensSentToBridge;\r\n\r\n    constructor() Ownable(address(0)) {}\r\n\r\n    function initialize(\r\n        address _tokenMainnet,\r\n        address _mediatorMainnet,\r\n        address _tokenSidechain,\r\n        address _mediatorSidechain,\r\n        address _sidechainDUFactory,\r\n        uint256 _sidechainMaxGas,\r\n        address _sidechainDUTemplate,\r\n        address _owner,\r\n        uint256 _adminFeeFraction,\r\n        uint256 _dataUnionFeeFraction,\r\n        address _dataUnionBeneficiary,\r\n        address[] memory agents\r\n    )  public {\r\n        require(!isInitialized(), \"init_once\");\r\n\r\n        //during setup, msg.sender is admin\r\n        owner = msg.sender;\r\n\r\n        tokenMainnet = ERC20(_tokenMainnet);\r\n        tokenMediatorMainnet = ITokenMediator(_mediatorMainnet);\r\n        tokenSidechain = ERC20(_tokenSidechain);\r\n        tokenMediatorSidechain = ITokenMediator(_mediatorSidechain);\r\n        sidechainDUFactory = _sidechainDUFactory;\r\n        sidechainMaxGas = _sidechainMaxGas;\r\n        sidechainDUTemplate = _sidechainDUTemplate;\r\n\r\n        initialAdminFeeFraction = _adminFeeFraction;\r\n        initialDataUnionFeeFraction = _dataUnionFeeFraction;\r\n        initialDataUnionBeneficiary = _dataUnionBeneficiary;\r\n\r\n        //transfer to real admin\r\n        owner = _owner;\r\n        deployNewDUSidechain(agents);\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return address(tokenMainnet) != address(0);\r\n    }\r\n\r\n    function amb() public view returns (IAMB) {\r\n        return IAMB(tokenMediatorMainnet.bridgeContract());\r\n    }\r\n\r\n    function deployNewDUSidechain(address[] memory agents) public {\r\n        bytes memory data = abi.encodeWithSignature(\r\n            \"deployNewDUSidechain(address,address,address,address[],uint256,uint256,address)\",\r\n            address(tokenSidechain),\r\n            address(tokenMediatorSidechain),\r\n            owner,\r\n            agents,\r\n            initialAdminFeeFraction,\r\n            initialDataUnionFeeFraction,\r\n            initialDataUnionBeneficiary\r\n        );\r\n        amb().requireToPassMessage(sidechainDUFactory, data, sidechainMaxGas);\r\n    }\r\n\r\n    function sidechainAddress() public view returns (address) {\r\n        return CloneLib.predictCloneAddressCreate2(sidechainDUTemplate, sidechainDUFactory, bytes32(uint256(uint160(address(this)))));\r\n    }\r\n\r\n    /**\r\n     * ERC677 callback function, see https://github.com/ethereum/EIPs/issues/677\r\n     * Sends the tokens arriving through a transferAndCall to the sidechain (ignore arguments/calldata)\r\n     * Only the token contract is authorized to call this function\r\n     */\r\n    function onTokenTransfer(address, uint256, bytes calldata) override external {\r\n        require(msg.sender == address(tokenMainnet), \"error_onlyTokenContract\");\r\n        sendTokensToBridge();\r\n    }\r\n\r\n    //function onPurchase(bytes32 productId, address subscriber, uint256 endTimestamp, uint256 priceDatacoin, uint256 feeDatacoin)\r\n    function onPurchase(bytes32, address, uint256, uint256, uint256) external override returns (bool) {\r\n        sendTokensToBridge();\r\n        return true;\r\n    }\r\n\r\n    function sendTokensToBridge() public returns (uint256) {\r\n        uint256 newTokens = tokenMainnet.balanceOf(address(this));\r\n        if (newTokens == 0) { return 0; }\r\n\r\n        emit RevenueReceived(newTokens);\r\n\r\n        // transfer memberEarnings\r\n        require(tokenMainnet.approve(address(tokenMediatorMainnet), newTokens), \"approve_failed\");\r\n\r\n        // must send some non-zero data to trigger the callback function\r\n        tokenMediatorMainnet.relayTokensAndCall(address(tokenMainnet), sidechainAddress(), newTokens, abi.encodePacked(\"DU2\"));\r\n\r\n        // check that memberEarnings were sent\r\n        require(tokenMainnet.balanceOf(address(this)) == 0, \"not_transferred\");\r\n        tokensSentToBridge += newTokens;\r\n\r\n        return newTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevenueReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"name\":\"deployNewDUSidechain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenMainnet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediatorMainnet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSidechain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediatorSidechain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sidechainDUFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sidechainMaxGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sidechainDUTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_adminFeeFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dataUnionFeeFraction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dataUnionBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokensToBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidechainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidechainDUFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidechainDUTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidechainMaxGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMainnet\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMediatorMainnet\",\"outputs\":[{\"internalType\":\"contract ITokenMediator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMediatorSidechain\",\"outputs\":[{\"internalType\":\"contract ITokenMediator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSidechain\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSentToBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"DataUnionMainnet","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://039111d2a33ed491821e50d946f9d84fa629b14014566cb538c60b9f4a50abb4"}]}