{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrappers/OptimismMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/optimism/messengers/iOVM_L1CrossDomainMessenger.sol\\\";\\nimport \\\"./MessengerWrapper.sol\\\";\\n\\n/**\\n * @dev A MessengerWrapper for Optimism - https://community.optimism.io/docs/\\n * @notice Deployed on layer-1\\n */\\n\\ncontract OptimismMessengerWrapper is MessengerWrapper {\\n\\n    iOVM_L1CrossDomainMessenger public immutable l1MessengerAddress;\\n    address public immutable l2BridgeAddress;\\n    uint256 public immutable defaultGasLimit;\\n\\n    constructor(\\n        address _l1BridgeAddress,\\n        address _l2BridgeAddress,\\n        iOVM_L1CrossDomainMessenger _l1MessengerAddress,\\n        uint256 _defaultGasLimit\\n    )\\n        public\\n        MessengerWrapper(_l1BridgeAddress)\\n    {\\n        l2BridgeAddress = _l2BridgeAddress;\\n        l1MessengerAddress = _l1MessengerAddress;\\n        defaultGasLimit = _defaultGasLimit;\\n    }\\n\\n    /** \\n     * @dev Sends a message to the l2BridgeAddress from layer-1\\n     * @param _calldata The data that l2BridgeAddress will be called with\\n     */\\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\\n        l1MessengerAddress.sendMessage(\\n            l2BridgeAddress,\\n            _calldata,\\n            uint32(defaultGasLimit)\\n        );\\n    }\\n\\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public override {\\n        require(l1BridgeCaller == address(l1MessengerAddress), \\\"OVM_MSG_WPR: Caller is not l1MessengerAddress\\\");\\n        // Verify that cross-domain sender is l2BridgeAddress\\n        require(l1MessengerAddress.xDomainMessageSender() == l2BridgeAddress, \\\"OVM_MSG_WPR: Invalid cross-domain sender\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/optimism/messengers/iOVM_L1CrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { iOVM_BaseCrossDomainMessenger } from \\\"./iOVM_BaseCrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title iOVM_L1CrossDomainMessenger\\n */\\ninterface iOVM_L1CrossDomainMessenger is iOVM_BaseCrossDomainMessenger {}\"\r\n    },\r\n    \"contracts/wrappers/MessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMessengerWrapper.sol\\\";\\n\\nabstract contract MessengerWrapper is IMessengerWrapper {\\n    address public immutable l1BridgeAddress;\\n\\n    constructor(address _l1BridgeAddress) internal {\\n        l1BridgeAddress = _l1BridgeAddress;\\n    }\\n\\n    modifier onlyL1Bridge {\\n        require(msg.sender == l1BridgeAddress, \\\"MW: Sender must be the L1 Bridge\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/optimism/messengers/iOVM_BaseCrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// +build ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_BaseCrossDomainMessenger\\n */\\ninterface iOVM_BaseCrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n\\n    function deposit(\\n        address _depositor,\\n        uint256 _amount,\\n        bool _send\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMessengerWrapper {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"defaultGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptimismMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000072209fe68386b37a40d6bca04f78356fd342491f000000000000000000000000e22d2bedb3eca35e6397e0c6d62857094aa26f5200000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa100000000000000000000000000000000000000000000000000000000007a1200","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}