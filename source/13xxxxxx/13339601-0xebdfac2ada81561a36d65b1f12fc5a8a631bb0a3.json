{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/0xerc1155/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../utils/EnumerableSet.sol';\\nimport '../utils/Address.sol';\\nimport '../utils/Context.sol';\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using Address for address;\\n\\n  struct RoleData {\\n    EnumerableSet.AddressSet members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) public view returns (bool) {\\n    return _roles[role].members.contains(account);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n    return _roles[role].members.length();\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return _roles[role].members.at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to grant'\\n    );\\n\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to revoke'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual {\\n    require(\\n      account == _msgSender(),\\n      'AccessControl: can only renounce roles for self'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n    _roles[role].adminRole = adminRole;\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (_roles[role].members.add(account)) {\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (_roles[role].members.remove(account)) {\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\ninterface IERC1155 {\\n  /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferSingle(\\n    address indexed _operator,\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 _id,\\n    uint256 _amount\\n  );\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferBatch(\\n    address indexed _operator,\\n    address indexed _from,\\n    address indexed _to,\\n    uint256[] _ids,\\n    uint256[] _amounts\\n  );\\n\\n  /**\\n   * @dev MUST emit when an approval is updated\\n   */\\n  event ApprovalForAll(\\n    address indexed _owner,\\n    address indexed _operator,\\n    bool _approved\\n  );\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Transfers amount of an _id from the _from address to the _to address specified\\n   * @dev MUST emit TransferSingle event on success\\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n   * MUST throw if `_to` is the zero address\\n   * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n   * MUST throw on any other error\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @dev MUST emit TransferBatch event on success\\n   * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n   * MUST throw if `_to` is the zero address\\n   * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n   * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n   * MUST throw on any other error\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return        The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @dev MUST emit the ApprovalForAll event on success\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    external\\n    view\\n    returns (bool isOperator);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\ninterface IERC1155Metadata {\\n  event URI(string _uri, uint256 indexed _id);\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n   * @dev URIs are defined in RFC 3986.\\n   *      URIs are assumed to be deterministically generated based on token ID\\n   *      Token IDs are assumed to be represented in their hex format in URIs\\n   * @return URI string\\n   */\\n  function uri(uint256 _id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(\\n    address _operator,\\n    address _from,\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address who) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/tokens/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport '../../utils/SafeMath.sol';\\nimport '../../interfaces/IERC1155TokenReceiver.sol';\\nimport '../../interfaces/IERC1155.sol';\\nimport '../../utils/Address.sol';\\nimport '../../utils/ERC165.sol';\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract\\n */\\ncontract ERC1155 is IERC1155, ERC165 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n  // onReceive function signatures\\n  bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n  // Objects balances\\n  mapping(address => mapping(uint256 => uint256)) internal balances;\\n\\n  // Operator Functions\\n  mapping(address => mapping(address => bool)) internal operators;\\n\\n  /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(\\n      (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n      'ERC1155#safeTransferFrom: INVALID_OPERATOR'\\n    );\\n    require(_to != address(0), 'ERC1155#safeTransferFrom: INVALID_RECIPIENT');\\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\\n\\n    _safeTransferFrom(_from, _to, _id, _amount);\\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeBatchTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) public virtual override {\\n    // Requirements\\n    require(\\n      (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n      'ERC1155#safeBatchTransferFrom: INVALID_OPERATOR'\\n    );\\n    require(\\n      _to != address(0),\\n      'ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT'\\n    );\\n\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\\n  }\\n\\n  /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n   * @param _from    Source address\\n   * @param _to      Target address\\n   * @param _id      ID of the token type\\n   * @param _amount  Transfered amount\\n   */\\n  function _safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount\\n  ) internal {\\n    _beforeTokenTransfer(msg.sender, _from, _to, _id, _amount, '');\\n\\n    // Update balances\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n   */\\n  function _callonERC1155Received(\\n    address _from,\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _gasLimit,\\n    bytes memory _data\\n  ) internal {\\n    // Check if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{\\n        gas: _gasLimit\\n      }(msg.sender, _from, _id, _amount, _data);\\n      require(\\n        retval == ERC1155_RECEIVED_VALUE,\\n        'ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE'\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n   * @param _from     Source addresses\\n   * @param _to       Target addresses\\n   * @param _ids      IDs of each token type\\n   * @param _amounts  Transfer amounts per token type\\n   */\\n  function _safeBatchTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts\\n  ) internal {\\n    require(\\n      _ids.length == _amounts.length,\\n      'ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH'\\n    );\\n\\n    _beforeBatchTokenTransfer(msg.sender, _from, _to, _ids, _amounts, '');\\n\\n    // Number of transfer to execute\\n    uint256 nTransfer = _ids.length;\\n\\n    // Executing all transfers\\n    for (uint256 i = 0; i < nTransfer; i++) {\\n      // Update storage balance of previous bin\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit event\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n  }\\n\\n  /**\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n   */\\n  function _callonERC1155BatchReceived(\\n    address _from,\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    uint256 _gasLimit,\\n    bytes memory _data\\n  ) internal {\\n    // Pass data if recipient is contract\\n    if (_to.isContract()) {\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{\\n        gas: _gasLimit\\n      }(msg.sender, _from, _ids, _amounts, _data);\\n      require(\\n        retval == ERC1155_BATCH_RECEIVED_VALUE,\\n        'ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE'\\n      );\\n    }\\n  }\\n\\n  /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved)\\n    public\\n    virtual\\n    override\\n  {\\n    // Update operator status\\n    operators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool isOperator)\\n  {\\n    return operators[_owner][_operator];\\n  }\\n\\n  /***********************************|\\n  |         Balance Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return The _owner's balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return balances[_owner][_id];\\n  }\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(\\n      _owners.length == _ids.length,\\n      'ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH'\\n    );\\n\\n    // Variables\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n    // Iterate over each owner and token ID\\n    for (uint256 i = 0; i < _owners.length; i++) {\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /***********************************|\\n  |               HOOKS               |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice overrideable hook for single transfers.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @notice overrideable hook for batch transfers.\\n   */\\n  function _beforeBatchTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` and\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    if (_interfaceID == type(IERC1155).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/tokens/ERC1155/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../../interfaces/IERC1155TokenReceiver.sol';\\nimport '../../utils/ERC165.sol';\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC165, IERC1155TokenReceiver {\\n  function onERC1155Received(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  function onERC1155BatchReceived(\\n    address,\\n    address,\\n    uint256[] memory,\\n    uint256[] memory,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    if (_interfaceID == type(IERC1155TokenReceiver).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/tokens/ERC1155/ERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport '../../interfaces/IERC1155Metadata.sol';\\nimport '../../utils/ERC165.sol';\\n\\n/**\\n * @notice Contract that handles metadata related methods.\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\n *      Methods also assume that URI uses hex representation of token IDs.\\n */\\ncontract ERC1155Metadata is IERC1155Metadata, ERC165 {\\n  // URI's default URI prefix\\n  string private _baseMetadataURI;\\n\\n  // contract metadata URL\\n  string private _contractMetadataURI;\\n\\n  // Hex numbers for creating hexadecimal tokenId\\n  bytes16 private constant HEX_MAP = '0123456789ABCDEF';\\n\\n  // bytes4(keccak256('contractURI()')) == 0xe8a3d485\\n  bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\n\\n  /***********************************|\\n  |     Metadata Public Function s    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n   * @dev URIs are defined in RFC 3986.\\n   *      URIs are assumed to be deterministically generated based on token ID\\n   * @return URI string\\n   */\\n  function uri(uint256 _id)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    return _uri(_baseMetadataURI, _id, 0);\\n  }\\n\\n  /**\\n   * @notice Opensea calls this fuction to get information about how to display storefront.\\n   *\\n   * @return full URI to the location of the contract metadata.\\n   */\\n  function contractURI() public view returns (string memory) {\\n    return _contractMetadataURI;\\n  }\\n\\n  /***********************************|\\n  |    Metadata Internal Functions    |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice Will emit default URI log event for corresponding token _id\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\n   */\\n  function _logURIs(uint256[] memory _tokenIDs) internal {\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n      emit URI(_uri(_baseMetadataURI, _tokenIDs[i], 0), _tokenIDs[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Will update the base URL of token's URI\\n   * @param newBaseMetadataURI New base URL of token's URI\\n   */\\n  function _setBaseMetadataURI(string memory newBaseMetadataURI) internal {\\n    _baseMetadataURI = newBaseMetadataURI;\\n  }\\n\\n  /**\\n   * @notice Will update the contract metadata URI\\n   * @param newContractMetadataURI New contract metadata URI\\n   */\\n  function _setContractMetadataURI(string memory newContractMetadataURI)\\n    internal\\n  {\\n    _contractMetadataURI = newContractMetadataURI;\\n  }\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID` or CONTRACT_URI\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    if (\\n      _interfaceID == type(IERC1155Metadata).interfaceId ||\\n      _interfaceID == _INTERFACE_ID_CONTRACT_URI\\n    ) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n\\n  /***********************************|\\n  |    Utility private Functions     |\\n  |__________________________________*/\\n\\n  /**\\n   * @notice returns uri\\n   * @param tokenId Unsigned integer to convert to string\\n   */\\n  function _uri(\\n    string memory base,\\n    uint256 tokenId,\\n    uint256 minLength\\n  ) internal view returns (string memory) {\\n    if (bytes(base).length == 0) base = _baseMetadataURI;\\n\\n    // Calculate URI\\n    uint256 temp = tokenId;\\n    uint256 length = tokenId == 0 ? 2 : 0;\\n    while (temp != 0) {\\n      length += 2;\\n      temp >>= 8;\\n    }\\n    if (length > minLength) minLength = length;\\n\\n    bytes memory buffer = new bytes(minLength);\\n    for (uint256 i = minLength; i > minLength - length; --i) {\\n      buffer[i - 1] = HEX_MAP[tokenId & 0xf];\\n      tokenId >>= 4;\\n    }\\n    minLength -= length;\\n    while (minLength > 0) buffer[--minLength] = '0';\\n\\n    return string(abi.encodePacked(base, buffer, '.json'));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/tokens/ERC1155/ERC1155MintBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\nimport './ERC1155.sol';\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions\\n */\\ncontract ERC1155MintBurn is ERC1155 {\\n  using SafeMath for uint256;\\n\\n  /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Mint _amount of tokens of a given id\\n   * @param _to      The address to mint tokens to\\n   * @param _id      Token id to mint\\n   * @param _amount  The amount to be minted\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) internal {\\n    _beforeTokenTransfer(msg.sender, address(0x0), _to, _id, _amount, _data);\\n\\n    // Add _amount\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\\n  }\\n\\n  /**\\n   * @notice Mint tokens for each ids in _ids\\n   * @param _to       The address to mint tokens to\\n   * @param _ids      Array of ids to mint\\n   * @param _amounts  Array of amount of tokens to mint per id\\n   * @param _data    Data to pass if receiver is contract\\n   */\\n  function _batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) internal {\\n    require(\\n      _ids.length == _amounts.length,\\n      'ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH'\\n    );\\n\\n    _beforeBatchTokenTransfer(\\n      msg.sender,\\n      address(0x0),\\n      _to,\\n      _ids,\\n      _amounts,\\n      _data\\n    );\\n\\n    // Number of mints to execute\\n    uint256 nMint = _ids.length;\\n\\n    // Executing all minting\\n    for (uint256 i = 0; i < nMint; i++) {\\n      // Update storage balance\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n    // Calling onReceive method if recipient is contract\\n    _callonERC1155BatchReceived(\\n      address(0x0),\\n      _to,\\n      _ids,\\n      _amounts,\\n      gasleft(),\\n      _data\\n    );\\n  }\\n\\n  /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n  /**\\n   * @notice Burn _amount of tokens of a given token id\\n   * @param _from    The address to burn tokens from\\n   * @param _id      Token id to burn\\n   * @param _amount  The amount to be burned\\n   */\\n  function _burn(\\n    address _from,\\n    uint256 _id,\\n    uint256 _amount\\n  ) internal {\\n    _beforeTokenTransfer(msg.sender, _from, address(0x0), _id, _amount, '');\\n\\n    //Substract _amount\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\n\\n    // Emit event\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n  }\\n\\n  /**\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n   * @param _from     The address to burn tokens from\\n   * @param _ids      Array of token ids to burn\\n   * @param _amounts  Array of the amount to be burned\\n   */\\n  function _batchBurn(\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts\\n  ) internal {\\n    // Number of mints to execute\\n    uint256 nBurn = _ids.length;\\n    require(\\n      nBurn == _amounts.length,\\n      'ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH'\\n    );\\n\\n    _beforeBatchTokenTransfer(\\n      msg.sender,\\n      _from,\\n      address(0x0),\\n      _ids,\\n      _amounts,\\n      ''\\n    );\\n\\n    // Executing all minting\\n    for (uint256 i = 0; i < nBurn; i++) {\\n      // Update storage balance\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\n    }\\n\\n    // Emit batch mint event\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n  // Default hash for EOA accounts returned by extcodehash\\n  bytes32 internal constant ACCOUNT_HASH =\\n    0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract.\\n   * @param _address address of the account to check\\n   * @return Whether the target address is a contract\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    bytes32 codehash;\\n\\n    // Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(_address)\\n    }\\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract ERC165 {\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    returns (bool)\\n  {\\n    return _interfaceID == this.supportsInterface.selector;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n      bytes32 lastvalue = set._values[lastIndex];\\n\\n      // Move the last value to the index where the value to delete is\\n      set._values[toDeleteIndex] = lastvalue;\\n      // Update the index for the moved value\\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    require(set._values.length > index, 'EnumerableSet: index out of bounds');\\n    return set._values[index];\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Multiplies two unsigned integers, reverts on overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath#mul: OVERFLOW');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, 'SafeMath#div: DIVISION_BY_ZERO');\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, 'SafeMath#sub: UNDERFLOW');\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two unsigned integers, reverts on overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath#add: OVERFLOW');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n   * reverts when dividing by zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'SafeMath#mod: DIVISION_BY_ZERO');\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/TradeFloor.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/interfaces/IERC20.sol';\\nimport '../../0xerc1155/tokens/ERC1155/ERC1155Holder.sol';\\n\\nimport '../token/interfaces/IWOWSCryptofolio.sol';\\nimport '../token/interfaces/IWOWSERC1155.sol';\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\nimport '../utils/TokenIds.sol';\\n\\nimport './interfaces/ICFolioItemCallback.sol';\\nimport './WOWSMinterPauser.sol';\\n\\nabstract contract OpenSeaProxyRegistry {\\n  mapping(address => address) public proxies;\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-1155[ERC1155]\\n * Multi Token Standard, including the Metadata URI extension.\\n *\\n * This contract is an extension of the minter preset. It accepts the address\\n * of the contract minting the token via the ERC-1155 data parameter. When\\n * the token is transferred or burned, the minter is notified.\\n *\\n * Token ID allocation:\\n *\\n *   - 32Bit Stock Cards\\n *   - 32Bit Custom Cards\\n *   - Remaining CFolio NFTs\\n */\\ncontract TradeFloor is WOWSMinterPauser, ERC1155Holder {\\n  using TokenIds for uint256;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Roles\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Only OPERATORS can approve when trading is restricted\\n  bytes32 public constant OPERATOR_ROLE = 'OPERATOR_ROLE';\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constants\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // solhint-disable-next-line const-name-snakecase\\n  string public constant name = 'Wolves of Wall Street - C-Folio NFTs';\\n  // solhint-disable-next-line const-name-snakecase\\n  string public constant symbol = 'WOWSCFNFT';\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Modifier\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'Only admin');\\n    _;\\n  }\\n\\n  modifier notNull(address adr) {\\n    require(adr != address(0), 'Null address');\\n    _;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Per token information, used to cap NFT's and to allow querying a list\\n   * of NFT's owned by an address\\n   */\\n  struct ListKey {\\n    uint256 index;\\n  }\\n\\n  // Per token information\\n  struct TokenInfo {\\n    bool minted; // Make sure we only mint 1\\n    ListKey listKey; // Next tokenId in the owner linkedList\\n  }\\n  // slither-disable-next-line uninitialized-state\\n  mapping(uint256 => TokenInfo) private _tokenInfos;\\n\\n  // Mapping owner -> first owned token\\n  //\\n  // Note that we work 1 based here because of initialization\\n  // e.g. firstId == 1 links to tokenId 0;\\n  struct Owned {\\n    uint256 count;\\n    ListKey listKey; // First tokenId in linked list\\n  }\\n  // slither-disable-next-line uninitialized-state\\n  mapping(address => Owned) private _owned;\\n\\n  // Our SFT contract, needed to check for locked transfers\\n  IWOWSERC1155 private immutable _sftHolder;\\n  // Migration!! This is the old sft contract\\n  IWOWSERC1155 private immutable _sftHolderOld;\\n  // Migration!! Need filter getTokenIds\\n  address private immutable _sftMinter;\\n\\n  // Restrict approvals to OPERATOR_ROLE members\\n  bool private _tradingRestricted = false;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Emitted when the state of restriction has updated\\n   *\\n   * @param tradingRestricted True if trading has been restricted, false otherwise\\n   */\\n  event RestrictionUpdated(bool tradingRestricted);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // OpenSea compatibility\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // OpenSea per-account proxy registry. Used to whitelist Approvals and save\\n  // GAS.\\n  OpenSeaProxyRegistry private immutable _openSeaProxyRegistry;\\n  address private immutable _deployer;\\n\\n  // OpenSea events\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Rarible compatibility\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /*\\n   * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n   * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n   *\\n   * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n   */\\n  bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\n\\n  uint256 private _fee;\\n  address private _feeRecipient;\\n\\n  // Rarible events\\n  // solhint-disable-next-line event-name-camelcase\\n  event CreateERC1155_v1(address indexed creator, string name, string symbol);\\n  event SecondarySaleFees(\\n    uint256 tokenId,\\n    address payable[] recipients,\\n    uint256[] bps\\n  );\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Construct the contract\\n   *\\n   * @param addressRegistry Registry containing our system addresses\\n   *\\n   * Note: Pause operation in this context. Only calls from Proxy allowed.\\n   */\\n  constructor(\\n    IAddressRegistry addressRegistry,\\n    OpenSeaProxyRegistry openSeaProxyRegistry,\\n    IWOWSERC1155 sftHolderOld\\n  ) {\\n    // Initialize {AccessControl}\\n    _setupRole(\\n      DEFAULT_ADMIN_ROLE,\\n      _getAddressRegistryAddress(addressRegistry, AddressBook.ADMIN_ACCOUNT)\\n    );\\n\\n    // Immutable, visible for all contexts\\n    _sftHolder = IWOWSERC1155(\\n      _getAddressRegistryAddress(addressRegistry, AddressBook.SFT_HOLDER_PROXY)\\n    );\\n\\n    _sftMinter = _getAddressRegistryAddress(\\n      addressRegistry,\\n      AddressBook.SFT_MINTER_PROXY\\n    );\\n\\n    _sftHolderOld = sftHolderOld;\\n\\n    // Immutable, visible for all contexts\\n    _openSeaProxyRegistry = openSeaProxyRegistry;\\n\\n    // Immutable, visible for all contexts\\n    _deployer = _getAddressRegistryAddress(\\n      addressRegistry,\\n      AddressBook.DEPLOYER\\n    );\\n\\n    // Pause this instance\\n    _pause(true);\\n  }\\n\\n  /**\\n   * @dev One time contract initializer\\n   *\\n   * @param tokenUriPrefix The ERC-1155 metadata URI Prefix\\n   * @param contractUri The contract metadata URI\\n   */\\n  function initialize(\\n    IAddressRegistry addressRegistry,\\n    string memory tokenUriPrefix,\\n    string memory contractUri\\n  ) public {\\n    // Validate state\\n    require(_feeRecipient == address(0), 'already initialized');\\n\\n    // Initialize {AccessControl}\\n    address admin = _getAddressRegistryAddress(\\n      addressRegistry,\\n      AddressBook.ADMIN_ACCOUNT\\n    );\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n    // Initialize {ERC1155Metadata}\\n    _setBaseMetadataURI(tokenUriPrefix);\\n    _setContractMetadataURI(contractUri);\\n\\n    _feeRecipient = _getAddressRegistryAddress(\\n      addressRegistry,\\n      AddressBook.REWARD_HANDLER\\n    );\\n    _fee = 1000; // 10%\\n\\n    // This event initializes Rarible storefront\\n    emit CreateERC1155_v1(_deployer, name, symbol);\\n\\n    // OpenSea enable storefront editing\\n    emit OwnershipTransferred(address(0), _deployer);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Return list of tokenIds owned by `account`\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    IWOWSERC1155 filter = _msgSender() == _sftMinter\\n      ? _sftHolder\\n      : _sftHolderOld;\\n    return _getTokenIds(account, filter);\\n  }\\n\\n  /**\\n   * @dev Return list of V2 tokenIds owned by `account`\\n   */\\n  function getTokenIdsV2(address account)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return _getTokenIds(account, _sftHolder);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC1155} via {WOWSMinterPauser}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) public override notNull(from) notNull(to) {\\n    // Call parent\\n    super.safeTransferFrom(from, to, tokenId, amount, data);\\n\\n    uint256[] memory tokenIds = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    tokenIds[0] = tokenId;\\n    amounts[0] = amount;\\n\\n    _onTransfer(from, to, tokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) public override notNull(from) notNull(to) {\\n    // Validate parameters\\n    require(tokenIds.length == amounts.length, \\\"Lengths don't match\\\");\\n\\n    // Call parent\\n    super.safeBatchTransferFrom(from, to, tokenIds, amounts, data);\\n\\n    _onTransfer(from, to, tokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   *\\n   * Override setApprovalForAll to be able to restrict to known operators.\\n   */\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override\\n  {\\n    // Validate access\\n    require(\\n      !_tradingRestricted || hasRole(OPERATOR_ROLE, operator),\\n      'forbidden'\\n    );\\n\\n    // Call ancestor\\n    super.setApprovalForAll(operator, approved);\\n  }\\n\\n  /**\\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n   */\\n  function isApprovedForAll(address account, address operator)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    if (!_tradingRestricted && address(_openSeaProxyRegistry) != address(0)) {\\n      // Whitelist OpenSea proxy contract for easy trading.\\n      OpenSeaProxyRegistry proxyRegistry = OpenSeaProxyRegistry(\\n        _openSeaProxyRegistry\\n      );\\n      if (proxyRegistry.proxies(account) == operator) {\\n        return true;\\n      }\\n    }\\n\\n    // Call ancestor\\n    return super.isApprovedForAll(account, operator);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC1155MetadataURI} via {WOWSMinterPauser}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   *\\n   * Revert for unminted SFT NFTs.\\n   */\\n  function uri(uint256 tokenId) public view override returns (string memory) {\\n    // Validate state\\n    require(_tokenInfos[tokenId].minted, 'Not minted');\\n    // Load state\\n    return _uri('', tokenId, 0);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {WOWSMinterPauser}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ERC1155MintBurn-_burn}.\\n   */\\n  function burn(\\n    address account,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) public override notNull(account) {\\n    // Call ancestor\\n    super.burn(account, tokenId, amount);\\n\\n    // Perform internal handling\\n    uint256[] memory tokenIds = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    tokenIds[0] = tokenId;\\n    amounts[0] = amount;\\n    _onTransfer(account, address(0), tokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev See {ERC1155MintBurn-_batchBurn}.\\n   */\\n  function burnBatch(\\n    address account,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) public virtual override notNull(account) {\\n    // Validate parameters\\n    require(tokenIds.length == amounts.length, \\\"Lengths don't match\\\");\\n\\n    // Call ancestor\\n    super.burnBatch(account, tokenIds, amounts);\\n\\n    // Perform internal handling\\n    _onTransfer(account, address(0), tokenIds, amounts);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC1155TokenReceiver} via {ERC1155Holder}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC1155TokenReceiver-onERC1155Received}\\n   */\\n  function onERC1155Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) public override returns (bytes4) {\\n    // Handle tokens\\n    uint256[] memory tokenIds = new uint256[](1);\\n    tokenIds[0] = tokenId;\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = amount;\\n    _onTokensReceived(from, tokenIds, amounts, data);\\n\\n    // Call ancestor\\n    return super.onERC1155Received(operator, from, tokenId, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155TokenReceiver-onERC1155BatchReceived}\\n   */\\n  function onERC1155BatchReceived(\\n    address operator,\\n    address from,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts,\\n    bytes calldata data\\n  ) public override returns (bytes4) {\\n    // Handle tokens\\n    _onTokensReceived(from, tokenIds, amounts, data);\\n\\n    // Call ancestor\\n    return\\n      super.onERC1155BatchReceived(operator, from, tokenIds, amounts, data);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Administrative functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ERC1155Metadata-setBaseMetadataURI}.\\n   */\\n  function setBaseMetadataURI(string memory baseMetadataURI)\\n    external\\n    onlyAdmin\\n  {\\n    // Set state\\n    _setBaseMetadataURI(baseMetadataURI);\\n  }\\n\\n  /**\\n   * @dev Set contract metadata URI\\n   */\\n  function setContractMetadataURI(string memory newContractUri)\\n    public\\n    onlyAdmin\\n  {\\n    _setContractMetadataURI(newContractUri);\\n  }\\n\\n  /**\\n   * @dev Register interfaces\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override(WOWSMinterPauser, ERC1155Holder)\\n    returns (bool)\\n  {\\n    // Register rarible fee interface\\n    if (_interfaceID == _INTERFACE_ID_FEES) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n\\n  /**\\n   * @dev Withdraw tokenAddress ERC20token to destination\\n   *\\n   * A future improvement would be to swap the token into WOWS.\\n   *\\n   * @param tokenAddress the address of the token to transfer. Cannot be\\n   * rewardToken.\\n   */\\n  function collectGarbage(address tokenAddress) external onlyAdmin {\\n    // Transfer token to msg.sender\\n    uint256 amountToken = IERC20(tokenAddress).balanceOf(address(this));\\n    if (amountToken > 0)\\n      IERC20(tokenAddress).transfer(_msgSender(), amountToken);\\n  }\\n\\n  /**\\n   * @dev Restrict trading to OPERATOR_ROLE (see setApprovalForAll)\\n   */\\n  function restrictTrading(bool restrict) external onlyAdmin {\\n    // Update state\\n    _tradingRestricted = restrict;\\n\\n    // Dispatch event\\n    emit RestrictionUpdated(restrict);\\n  }\\n\\n  /**\\n   * @dev Self destruct implementation contract\\n   */\\n  function destructContract(address payable newContract) external onlyAdmin {\\n    // slither-disable-next-line suicidal\\n    selfdestruct(newContract);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // OpenSea compatibility\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function isOwner() external view returns (bool) {\\n    return _msgSender() == owner();\\n  }\\n\\n  function owner() public view returns (address) {\\n    return _deployer;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Rarible fees and events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function setFee(uint256 fee) external onlyAdmin {\\n    // Update state\\n    _fee = fee;\\n  }\\n\\n  function setFeeRecipient(address feeRecipient) external onlyAdmin {\\n    // Update state\\n    _feeRecipient = feeRecipient;\\n  }\\n\\n  function getFeeRecipients(uint256)\\n    public\\n    view\\n    returns (address payable[] memory)\\n  {\\n    // Return value\\n    address payable[] memory recipients = new address payable[](1);\\n\\n    // Load state\\n    recipients[0] = payable(_feeRecipient);\\n    return recipients;\\n  }\\n\\n  function getFeeBps(uint256) public view returns (uint256[] memory) {\\n    // Return value\\n    uint256[] memory bps = new uint256[](1);\\n\\n    // Load state\\n    bps[0] = _fee;\\n\\n    return bps;\\n  }\\n\\n  function logURI(uint256 tokenId) external {\\n    emit URI(uri(tokenId), tokenId);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal details\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _onTransfer(\\n    address from,\\n    address to,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts\\n  ) private {\\n    // Count SFT tokenIds\\n    uint256 length = tokenIds.length;\\n    uint256 validLength = 0;\\n    // Relink owner\\n    for (uint256 i = 0; i < length; ++i) {\\n      if (amounts[i] == 1) {\\n        _relinkOwner(from, to, tokenIds[i], uint256(-1));\\n        ++validLength;\\n      }\\n      // CryptoFolios send 0 amount!!\\n      else require(amounts[i] == 0, 'TF: Invalid amount');\\n    }\\n\\n    // On Burn we need to transfer SFT ownership back\\n    if (validLength > 0 && to == address(0)) {\\n      uint256[] memory sftTokenIds = new uint256[](validLength);\\n      uint256[] memory sftAmounts = new uint256[](validLength);\\n      validLength = 0;\\n      for (uint256 i = 0; i < length; ++i) {\\n        if (amounts[i] == 1) {\\n          uint256 tokenId = tokenIds[i];\\n          sftTokenIds[validLength] = tokenId.toSftTokenId();\\n          sftAmounts[validLength++] = 1;\\n        }\\n      }\\n\\n      IWOWSERC1155 sftHolder = _sftHolder;\\n      // Migration!!! Remove if all TF's are on new contract\\n      if (\\n        address(_sftHolderOld) != address(0) &&\\n        _sftHolderOld.balanceOf(address(this), sftTokenIds[0]) == 1\\n      ) sftHolder = _sftHolderOld;\\n\\n      sftHolder.safeBatchTransferFrom(\\n        address(this),\\n        _msgSender(),\\n        sftTokenIds,\\n        sftAmounts,\\n        ''\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev SFT token arrived, provide an NFT\\n   */\\n  function _onTokensReceived(\\n    address from,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    // We only support tokens from our SFT Holder contract\\n    require(_msgSender() == address(_sftHolder), 'TF: Invalid sender');\\n\\n    // Validate parameters\\n    require(tokenIds.length == amounts.length, 'TF: Lengths mismatch');\\n\\n    // To save gas we allow minting directly into a given recipient\\n    address sftRecipient;\\n    if (data.length == 20) {\\n      sftRecipient = _getAddress(data);\\n      require(sftRecipient != address(0), 'TF: invalid recipient');\\n    } else sftRecipient = from;\\n\\n    // Update state\\n    uint256[] memory mintedTokenIds = new uint256[](tokenIds.length);\\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\\n      require(amounts[i] == 1, 'Amount != 1 not allowed');\\n\\n      uint256 mintedTokenId = _hashedTokenId(tokenIds[i]);\\n      mintedTokenIds[i] = mintedTokenId;\\n\\n      // OpenSea only listens to TransferSingle event on mint\\n      _mintAndEmit(sftRecipient, mintedTokenId);\\n    }\\n    _onTransfer(address(0), sftRecipient, mintedTokenIds, amounts);\\n  }\\n\\n  /**\\n   * @dev Ownership change -> update linked list owner -> tokenId\\n   *\\n   * If tokenIdNew is != uint256(-1) this function executes an\\n   * ownership transfer of \\\"from\\\" from tokenId to tokenIdNew\\n   * In this case \\\"to\\\" must be set to 0.\\n   */\\n  function _relinkOwner(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 tokenIdNew\\n  ) internal {\\n    // Load state\\n    TokenInfo storage tokenInfo = _tokenInfos[tokenId];\\n\\n    // Remove tokenId from List\\n    if (from != address(0)) {\\n      // Load state\\n      Owned storage fromList = _owned[from];\\n\\n      // Validate state\\n      require(fromList.count > 0, 'Count mismatch');\\n\\n      ListKey storage key = fromList.listKey;\\n      uint256 count = fromList.count;\\n\\n      // Search the token which links to tokenId\\n      for (; count > 0 && key.index != tokenId; --count)\\n        key = _tokenInfos[key.index].listKey;\\n      require(key.index == tokenId, 'Key mismatch');\\n\\n      if (tokenIdNew == uint256(-1)) {\\n        // Unlink prev -> tokenId\\n        key.index = tokenInfo.listKey.index;\\n        // Decrement count\\n        fromList.count--;\\n      } else {\\n        // replace tokenId -> tokenIdNew\\n        key.index = tokenIdNew;\\n        TokenInfo storage tokenInfoNew = _tokenInfos[tokenIdNew];\\n        require(!tokenInfoNew.minted, 'Must not be minted');\\n        tokenInfoNew.listKey.index = tokenInfo.listKey.index;\\n        tokenInfoNew.minted = true;\\n      }\\n      // Unlink tokenId -> next\\n      tokenInfo.listKey.index = 0;\\n      require(tokenInfo.minted, 'Must be minted');\\n      tokenInfo.minted = false;\\n    }\\n\\n    // Update state\\n    if (to != address(0)) {\\n      Owned storage toList = _owned[to];\\n      tokenInfo.listKey.index = toList.listKey.index;\\n      require(!tokenInfo.minted, 'Must not be minted');\\n      tokenInfo.minted = true;\\n      toList.listKey.index = tokenId;\\n      toList.count++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the address from the user data parameter\\n   *\\n   * @param data Per ERC-1155, the data parameter is additional data with no\\n   * specified format, and is sent unaltered in the call to\\n   * {IERC1155Receiver-onERC1155Received} on the receiver of the minted token.\\n   */\\n  function _getAddress(bytes memory data) public pure returns (address addr) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      addr := mload(add(data, 20))\\n    }\\n  }\\n\\n  /**\\n   * @dev Save contract size by wrappng external call into an internal\\n   */\\n  function _getAddressRegistryAddress(IAddressRegistry reg, bytes32 data)\\n    private\\n    view\\n    returns (address)\\n  {\\n    return reg.getRegistryEntry(data);\\n  }\\n\\n  /**\\n   * @dev Save contract size by wrappng external call into an internal\\n   */\\n  function _addressToTokenId(address tokenAddress)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    return _sftHolder.addressToTokenId(tokenAddress);\\n  }\\n\\n  /**\\n   * @dev internal mint + event emiting\\n   */\\n  function _mintAndEmit(address recipient, uint256 tokenId) private {\\n    _mint(recipient, tokenId, 1, '');\\n\\n    // Rarible needs to be informed about fees\\n    emit SecondarySaleFees(tokenId, getFeeRecipients(0), getFeeBps(0));\\n  }\\n\\n  /**\\n   * @dev Calculate a 128-bit hash for making tokenIds unique to underlying asset\\n   *\\n   * @param sftTokenId The tokenId from SFT contract from that we use the first 128 bit\\n   * TokenIds in SFT contract are limited to max 128 Bit in WowsSftMinter contract.\\n   */\\n  function _hashedTokenId(uint256 sftTokenId) private view returns (uint256) {\\n    bytes memory hashData;\\n    uint256[] memory tokenIds;\\n    uint256 tokenIdsLength;\\n    if (sftTokenId.isBaseCard()) {\\n      // It's a base card, calculate hash using all cfolioItems\\n      address cfolio = _sftHolder.tokenIdToAddress(sftTokenId);\\n      require(cfolio != address(0), 'TF: src token invalid');\\n      tokenIds = _sftHolder.getTokenIds(cfolio);\\n      tokenIdsLength = tokenIds.length;\\n      hashData = abi.encodePacked(address(this), sftTokenId);\\n    } else {\\n      // It's a cfolioItem itself, only calculate underlying value\\n      tokenIds = new uint256[](1);\\n      tokenIds[0] = sftTokenId;\\n      tokenIdsLength = 1;\\n    }\\n\\n    // Run through all cfolioItems and let their single CFolioItemHandler\\n    // append hashable data\\n    for (uint256 i = 0; i < tokenIdsLength; ++i) {\\n      address cfolio = _sftHolder.tokenIdToAddress(tokenIds[i].toSftTokenId());\\n      require(cfolio != address(0), 'TF: item token invalid');\\n\\n      address handler = IWOWSCryptofolio(cfolio).handler();\\n      require(handler != address(0), 'TF: item handler invalid');\\n\\n      hashData = ICFolioItemCallback(handler).appendHash(cfolio, hashData);\\n    }\\n\\n    uint256 hashNum = uint256(keccak256(hashData));\\n    return (hashNum ^ (hashNum << 128)).maskHash() | sftTokenId;\\n  }\\n\\n  /**\\n   * @dev Return list of tokenIds owned by `account`\\n   */\\n  function _getTokenIds(address account, IWOWSERC1155 filter)\\n    private\\n    view\\n    returns (uint256[] memory)\\n  {\\n    Owned storage list = _owned[account];\\n    uint256[] memory result = new uint256[](list.count);\\n    uint256 filteredCount = 0;\\n    ListKey storage key = list.listKey;\\n    for (uint256 i = 0; i < list.count; ++i) {\\n      if (filter.balanceOf(address(this), key.index.toSftTokenId()) == 1)\\n        result[filteredCount++] = key.index;\\n      key = _tokenInfos[key.index].listKey;\\n    }\\n    if (filteredCount != list.count) {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        mstore(result, filteredCount)\\n      }\\n    }\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/WOWSMinterPauser.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0 AND MIT\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/access/AccessControl.sol';\\nimport '../../0xerc1155/tokens/ERC1155/ERC1155Metadata.sol';\\nimport '../../0xerc1155/tokens/ERC1155/ERC1155MintBurn.sol';\\n\\n/**\\n * @dev Partial implementation of https://eips.ethereum.org/EIPS/eip-1155[ERC1155]\\n * Multi Token Standard\\n */\\ncontract WOWSMinterPauser is\\n  Context,\\n  AccessControl,\\n  ERC1155MintBurn,\\n  ERC1155Metadata\\n{\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Roles\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Role to mint new tokens\\n  bytes32 public constant MINTER_ROLE = 'MINTER_ROLE';\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Pause\\n  bool private _pauseActive;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Event triggered when _pause state changed\\n  event Pause(bool active);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constructor\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  constructor() {}\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Pausing interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Pauses all token transfers.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must have the `DEFAULT_ADMIN_ROLE`.\\n   */\\n  function pause(bool active) public {\\n    // Validate access\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'Only admin');\\n\\n    if (_pauseActive != active) {\\n      // Update state\\n      _pauseActive = active;\\n      emit Pause(active);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    return _pauseActive;\\n  }\\n\\n  function _pause(bool active) internal {\\n    _pauseActive = active;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Minting interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Creates `amount` new tokens for `to`, of token type `tokenId`.\\n   *\\n   * See {ERC1155-_mint}.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must have the `MINTER_ROLE`.\\n   */\\n  function mint(\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual {\\n    // Validate access\\n    require(hasRole(MINTER_ROLE, _msgSender()), 'Only minter');\\n\\n    // Validate parameters\\n    require(to != address(0), \\\"Can't mint to zero address\\\");\\n\\n    // Update state\\n    _mint(to, tokenId, amount, data);\\n  }\\n\\n  /**\\n   * @dev Batched variant of {mint}.\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) public virtual {\\n    // Validate access\\n    require(hasRole(MINTER_ROLE, _msgSender()), 'Only minter');\\n\\n    // Validate parameters\\n    require(to != address(0), \\\"Can't mint to zero address\\\");\\n    require(tokenIds.length == amounts.length, \\\"Lengths don't match\\\");\\n\\n    // Update state\\n    _batchMint(to, tokenIds, amounts, data);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Burning interface\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 value\\n  ) public virtual {\\n    // Validate access\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'Caller is not owner nor approved'\\n    );\\n\\n    // Update state\\n    _burn(account, id, value);\\n  }\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] calldata ids,\\n    uint256[] calldata values\\n  ) public virtual {\\n    // Validate access\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'Caller is not owner nor approved'\\n    );\\n\\n    // Update state\\n    _batchBurn(account, ids, values);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {ERC1155}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ERC1155-_beforeTokenTransfer}.\\n   *\\n   * This function is necessary due to diamond inheritance.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual override {\\n    // Validate state\\n    require(!_pauseActive, 'Transfer operation paused!');\\n\\n    // Call ancestor\\n    super._beforeTokenTransfer(operator, from, to, tokenId, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {ERC1155-_beforeBatchTokenTransfer}.\\n   *\\n   * This function is necessary due to diamond inheritance.\\n   */\\n  function _beforeBatchTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    // Valiate state\\n    require(!_pauseActive, 'Transfer operation paused!');\\n\\n    // Call ancestor\\n    super._beforeBatchTokenTransfer(\\n      operator,\\n      from,\\n      to,\\n      tokenIds,\\n      amounts,\\n      data\\n    );\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {ERC165}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ERC165-supportsInterface}\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override(ERC1155, ERC1155Metadata)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ICFolioItemCallback.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to receive callbacks when minted tokens are burnt\\n */\\ninterface ICFolioItemCallback {\\n  /**\\n   * @dev Called when a TradeFloor CFolioItem is transfered\\n   *\\n   * In case of mint `from` is address(0).\\n   * In case of burn `to` is address(0).\\n   *\\n   * cfolioHandlers are passed to let each cfolioHandler filter for its own\\n   * token. This eliminates the need for creating separate lists.\\n   *\\n   * @param from The account sending the token\\n   * @param to The account receiving the token\\n   * @param tokenIds The ERC-1155 token IDs\\n   * @param cfolioHandlers cFolioItem handlers\\n   */\\n  function onCFolioItemsTransferedFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    address[] calldata cfolioHandlers\\n  ) external;\\n\\n  /**\\n   * @dev Append data we use later for hashing\\n   *\\n   * @param cfolioItem The token ID of the c-folio item\\n   * @param current The current data being hashes\\n   *\\n   * @return The current data, with internal data appended\\n   */\\n  function appendHash(address cfolioItem, bytes calldata current)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getter\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Return the handler (CFIH) of the underlying NFT\\n   */\\n  function handler() external view returns (address);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Set the handler of the underlying NFT\\n   *\\n   * This function is called during I-NFT setup\\n   *\\n   * @param newHandler The new handler of the underlying NFT,\\n   */\\n  function setHandler(address newHandler) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Sft holder contract\\n */\\ninterface IWOWSERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * A cross check is required because token ID 0 is valid.\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert\\n   *\\n   * @return The address, or address(0) in case the token ID does not belong\\n   * to an NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Return the level and the mint timestamp of tokenId\\n   *\\n   * @param tokenId The tokenId to query\\n   *\\n   * @return mintTimestamp The timestamp token was minted\\n   * @return level The level token belongs to\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    returns (uint64 mintTimestamp, uint8 level);\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the cFolioItemType of a given cFolioItem tokenId\\n   */\\n  function getCFolioItemType(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param owner  The address of the token holder\\n   * @param tokenId ID of the Token\\n   * @return The _owner's balance of the token type requested\\n   */\\n  function balanceOf(address owner, uint256 tokenId)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param owners The addresses of the token holders\\n   * @param tokenIds ID of the Tokens\\n   * @return       The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(\\n    address[] calldata owners,\\n    uint256[] calldata tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Mints tokenIds into 'to' account\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Throws if sender has no MINTER_ROLE\\n   * 'data' holds the CFolioItemHandler if CFI's are minted\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Burns tokenIds owned by 'account'\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Burns all owned CFolioItems\\n   * Throws if CFolioItems have assets\\n   */\\n  function burnBatch(address account, uint256[] calldata tokenIds) external;\\n\\n  /**\\n   * @notice Transfers amount of an id from the from address to the 'to' address specified\\n   * @dev Emits SftTokenTransfer Event\\n   * Throws if 'to' is the zero address\\n   * Throws if 'from' is not the current owner\\n   * If 'to' is a smart contract, ERC1155TokenReceiver interface will checked\\n   * @param from    Source address\\n   * @param to      Target address\\n   * @param tokenId ID of the token type\\n   * @param amount  Transfered amount\\n   * @param data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Batch version of {safeTransferFrom}\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Each custom card has its own level. Level will be used when\\n   * calculating rewards and raiding power.\\n   *\\n   * @param tokenId The ID of the token whose level is being set\\n   * @param cardLevel The new level of the specified token\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\\n\\n  /**\\n   * @dev Sets the cfolioItemType of a cfolioItem tokenId, not yet used\\n   * sftHolder tokenId expected (without hash)\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType_) external;\\n\\n  /**\\n   * @dev Sets external NFT for display tokenId\\n   * By default NFT is rendered using our internal metadata\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function setExternalNft(\\n    uint256 tokenId,\\n    address externalCollection,\\n    uint256 externalTokenId\\n  ) external;\\n\\n  /**\\n   * @dev Deletes external NFT settings\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function deleteExternalNft(uint256 tokenId) external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Fired on each transfer operation\\n  event SftTokenTransfer(\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256[] tokenIds\\n  );\\n\\n  // Fired if the type of a CFolioItem is set\\n  event UpdatedCFolioType(uint256 indexed tokenId, uint256 cfolioItemType);\\n\\n  // Fired if a Cryptofolio clone was set\\n  event CryptofolioSet(address cryptofolio);\\n\\n  // Fired if a SidechainTunnel was set\\n  event SidechainTunnelSet(address sidechainTunnel);\\n\\n  // Fired if we selfdestruct contract\\n  event Destruct();\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary AddressBook {\\n  bytes32 public constant DEPLOYER = 'DEPLOYER';\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant ADMIN_ACCOUNT = 'ADMIN_ACCOUNT';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n  bytes32 public constant WOWS_TOKEN = 'WOWS_TOKEN';\\n  bytes32 public constant UNISWAP_V2_PAIR = 'UNISWAP_V2_PAIR';\\n  bytes32 public constant WOWS_BOOSTER_PROXY = 'WOWS_BOOSTER_PROXY';\\n  bytes32 public constant REWARD_HANDLER = 'REWARD_HANDLER';\\n  bytes32 public constant SFT_MINTER_PROXY = 'SFT_MINTER_PROXY';\\n  bytes32 public constant SFT_HOLDER_PROXY = 'SFT_HOLDER_PROXY';\\n  bytes32 public constant SFT_EVALUATOR_PROXY = 'SFT_EVALUATOR_PROXY';\\n  bytes32 public constant TRADE_FLOOR_PROXY = 'TRADE_FLOOR_PROXY';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/TokenIds.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary TokenIds {\\n  // 128 bit underlying hash\\n  uint256 public constant HASH_MASK = (1 << 128) - 1;\\n\\n  function isBaseCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isStockCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 32);\\n  }\\n\\n  function isCustomCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 32) && (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isCFolioCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 64) && (tokenId & HASH_MASK) < (1 << 128);\\n  }\\n\\n  function toSftTokenId(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & HASH_MASK;\\n  }\\n\\n  function maskHash(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & ~HASH_MASK;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get a registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry\",\"type\":\"address\"},{\"internalType\":\"contract OpenSeaProxyRegistry\",\"name\":\"openSeaProxyRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IWOWSERC1155\",\"name\":\"sftHolderOld\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreateERC1155_v1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tradingRestricted\",\"type\":\"bool\"}],\"name\":\"RestrictionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"name\":\"SecondarySaleFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"collectGarbage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"destructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenIdsV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"logURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restrict\",\"type\":\"bool\"}],\"name\":\"restrictTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newContractUri\",\"type\":\"string\"}],\"name\":\"setContractMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TradeFloor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000fef1f573121b4418012d144534506ad35ef4b81a000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c100000000000000000000000064b3342db643f3fb4da5781b6d09b44ab4668de4","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}