{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/common/proxy/GovernableProxy.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ncontract GovernableProxy {\r\n    bytes32 constant OWNER_SLOT = keccak256(\"proxy.owner\");\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(owner() == msg.sender, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns(address _owner) {\r\n        bytes32 position = OWNER_SLOT;\r\n        assembly {\r\n            _owner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function transferOwnership(address newOwner) external onlyGovernance {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"OwnableProxy: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        bytes32 position = OWNER_SLOT;\r\n        assembly {\r\n            sstore(position, newOwner)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/common/AccessControlDefended.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ncontract AccessControlDefendedBase {\r\n    mapping (address => bool) public approved;\r\n    mapping(address => uint256) public blockLock;\r\n\r\n    modifier defend() {\r\n        require(msg.sender == tx.origin || approved[msg.sender], \"ACCESS_DENIED\");\r\n        _;\r\n    }\r\n\r\n    modifier blockLocked() {\r\n        require(approved[msg.sender] || blockLock[msg.sender] < block.number, \"BLOCK_LOCKED\");\r\n        _;\r\n    }\r\n\r\n    function _lockForBlock(address account) internal {\r\n        blockLock[account] = block.number;\r\n    }\r\n\r\n    function _approveContractAccess(address account) internal {\r\n        approved[account] = true;\r\n    }\r\n\r\n    function _revokeContractAccess(address account) internal {\r\n        approved[account] = false;\r\n    }\r\n}\r\n\r\ncontract AccessControlDefended is GovernableProxy, AccessControlDefendedBase {\r\n    uint256[50] private __gap;\r\n\r\n    function approveContractAccess(address account) external onlyGovernance {\r\n        _approveContractAccess(account);\r\n    }\r\n\r\n    function revokeContractAccess(address account) external onlyGovernance {\r\n        _revokeContractAccess(account);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/common/PausableSlot.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ncontract PausableSlot {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bytes32 constant PAUSED_SLOT = keccak256(\"_paused\");\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool _paused) {\r\n        bytes32 position = PAUSED_SLOT;\r\n        assembly {\r\n            _paused := sload(position)\r\n        }\r\n    }\r\n\r\n    function _setPaused(bool _paused) internal {\r\n        bytes32 position = PAUSED_SLOT;\r\n        assembly {\r\n            sstore(position, _paused)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _setPaused(true);\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _setPaused(false);\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISwap.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface ISwap {\r\n    function get_virtual_price() external view returns (uint);\r\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\r\n}\r\n\r\ninterface ISaddleSwap {\r\n    function getVirtualPrice() external view returns (uint);\r\n}\r\n\r\ninterface renDeposit {\r\n    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external returns (uint);\r\n}\r\n\r\ninterface sbtcDeposit {\r\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external returns (uint);\r\n}\r\n\r\ninterface tbtcDeposit {\r\n    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external returns (uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICore.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface ICore {\r\n    function mint(uint btc, address account, bytes32[] calldata merkleProof) external returns (uint);\r\n    function redeem(uint btc, address account) external returns (uint);\r\n    function btcToBbtc(uint btc) external view returns (uint, uint);\r\n    function bBtcToBtc(uint bBtc) external view returns (uint btc, uint fee);\r\n    function pricePerShare() external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISett.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface ISett is IERC20 {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _shares) external;\r\n    function withdrawAll() external;\r\n    function approveContractAccess(address account) external;\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n    function balance() external view returns (uint256);\r\n\r\n    // byvwbtc\r\n    function pricePerShare() external view returns (uint256);\r\n    function withdrawalFee() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPeak.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\n\r\ninterface IPeak {\r\n    function portfolioValue() external view returns (uint);\r\n}\r\n\r\ninterface IBadgerSettPeak is IPeak {\r\n    function mint(uint poolId, uint inAmount, bytes32[] calldata merkleProof)\r\n        external\r\n        returns(uint outAmount);\r\n\r\n    function calcMint(uint poolId, uint inAmount)\r\n        external\r\n        view\r\n        returns(uint bBTC, uint fee);\r\n\r\n    function redeem(uint poolId, uint inAmount)\r\n        external\r\n        returns (uint outAmount);\r\n\r\n    function calcRedeem(uint poolId, uint bBtc)\r\n        external\r\n        view\r\n        returns(uint sett, uint fee, uint max);\r\n}\r\n\r\ninterface IByvWbtcPeak is IPeak {\r\n    function mint(uint inAmount, bytes32[] calldata merkleProof)\r\n        external\r\n        returns(uint outAmount);\r\n\r\n    function calcMint(uint inAmount)\r\n        external\r\n        view\r\n        returns(uint bBTC, uint fee);\r\n\r\n    function redeem(uint inAmount)\r\n        external\r\n        returns (uint outAmount);\r\n\r\n    function calcRedeem(uint bBtc)\r\n        external\r\n        view\r\n        returns(uint sett, uint fee, uint max);\r\n}\r\n\r\n\r\n// File contracts/peaks/BadgerSettPeak.sol\r\n\r\n\r\n\r\npragma solidity 0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BadgerSettPeak is AccessControlDefended, PausableSlot, IBadgerSettPeak {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for ISett;\r\n    using SafeMath for uint;\r\n    using Math for uint;\r\n\r\n    ICore public immutable core;\r\n\r\n    struct CurvePool {\r\n        ISwap swap;\r\n        ISett sett;\r\n    }\r\n    mapping(uint => CurvePool) public pools;\r\n    uint public numPools;\r\n\r\n    address public guardian;\r\n    address constant public badgerGovernance = 0xB65cef03b9B89f99517643226d76e286ee999e77;\r\n\r\n    // END OF STORAGE VARIABLES\r\n\r\n    event Mint(address account, uint ibBTC, uint sett);\r\n    event Redeem(address account, uint ibBTC, uint sett);\r\n\r\n    /**\r\n    * @param _core Address of the the Core contract\r\n    */\r\n    constructor(address _core) public {\r\n        core = ICore(_core);\r\n    }\r\n\r\n    modifier onlyGuardianOrGovernance() {\r\n        require(msg.sender == guardian || msg.sender == owner(), \"onlyGuardianOrGovernance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernanceOrBadgerGovernance() {\r\n        require(msg.sender == badgerGovernance || msg.sender == owner(), \"onlyGovernanceOrBadgerGovernance\");\r\n        _;\r\n    }\r\n\r\n    // ===== Pausing Functionality =====\r\n    \r\n    function pause() external onlyGuardianOrGovernance {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyGovernanceOrBadgerGovernance {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @notice Mint bBTC with Sett LP token\r\n    * @dev Invoking pool.sett.safeTransferFrom() before core.mint(), will mess up core.totalSystemAssets() calculation\r\n    * @param poolId System internal ID of the whitelisted curve pool\r\n    * @param inAmount Amount of Sett LP token to mint bBTC with\r\n    * @return outAmount Amount of bBTC minted to user's account\r\n    */\r\n    function mint(uint poolId, uint inAmount, bytes32[] calldata merkleProof)\r\n        override\r\n        external\r\n        defend\r\n        blockLocked\r\n        whenNotPaused\r\n        returns(uint outAmount)\r\n    {\r\n        _lockForBlock(msg.sender);\r\n        CurvePool memory pool = pools[poolId];\r\n        outAmount = core.mint(_settToBtc(pool, inAmount), msg.sender, merkleProof);\r\n        // will revert if user passed an unsupported poolId\r\n        pool.sett.safeTransferFrom(msg.sender, address(this), inAmount);\r\n        emit Mint(msg.sender, outAmount, inAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Redeem bBTC in Sett LP tokens\r\n    * @dev There might not be enough Sett LP to fulfill the request, in which case the transaction will revert\r\n    *      Invoking pool.sett.safeTransfer() before core.redeem(), will mess up core.totalSystemAssets() calculation\r\n    * @param poolId System internal ID of the whitelisted curve pool\r\n    * @param inAmount Amount of bBTC to redeem\r\n    * @return outAmount Amount of Sett LP token\r\n    */\r\n    function redeem(uint poolId, uint inAmount)\r\n        override\r\n        external\r\n        defend\r\n        blockLocked\r\n        whenNotPaused\r\n        returns (uint outAmount)\r\n    {\r\n        _lockForBlock(msg.sender);\r\n        CurvePool memory pool = pools[poolId];\r\n        outAmount = _btcToSett(pool, core.redeem(inAmount, msg.sender));\r\n        // will revert if the contract has insufficient funds.\r\n        pool.sett.safeTransfer(msg.sender, outAmount);\r\n        emit Redeem(msg.sender, inAmount, outAmount);\r\n    }\r\n\r\n    /* ##### View ##### */\r\n\r\n    function calcMint(uint poolId, uint inAmount)\r\n        override\r\n        external\r\n        view\r\n        returns(uint bBTC, uint fee)\r\n    {\r\n        (bBTC, fee) = core.btcToBbtc(_settToBtc(pools[poolId], inAmount));\r\n    }\r\n\r\n    /**\r\n    * @notice Determines the Sett tokens that will be received when redeeming bBTC\r\n    * @return sett Number of sett tokens\r\n    * @return fee Fee charges\r\n    * @return max Max amount of bBTC redeemable for chosen sett\r\n    */\r\n    function calcRedeem(uint poolId, uint bBtc)\r\n        override\r\n        external\r\n        view\r\n        returns(uint sett, uint fee, uint max)\r\n    {\r\n        CurvePool memory pool = pools[poolId];\r\n        uint btc;\r\n        (btc, fee) = core.bBtcToBtc(bBtc);\r\n        sett = _btcToSett(pool, btc);\r\n        max = pool.sett.balanceOf(address(this))\r\n            .mul(pool.sett.getPricePerFullShare())\r\n            .mul(pool.swap.get_virtual_price())\r\n            .div(core.pricePerShare())\r\n            .div(1e18);\r\n    }\r\n\r\n    function portfolioValue()\r\n        override\r\n        external\r\n        view\r\n        returns (uint assets)\r\n    {\r\n        CurvePool memory pool;\r\n        uint _numPools = numPools;\r\n        // We do not expect to have more than 3-4 pools, so this loop should be fine\r\n        for (uint i = 0; i < _numPools; i++) {\r\n            pool = pools[i];\r\n            assets = assets.add(\r\n                _settToBtc(\r\n                    pool,\r\n                    pool.sett.balanceOf(address(this))\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Determine sett amount given btc\r\n    * @param btc BTC amount, scaled by 1e36\r\n    *        Will revert for > 1e41.\r\n    *        It's not possible to supply that amount because btc supply is capped at 21e24\r\n    */\r\n    function _btcToSett(CurvePool memory pool, uint btc)\r\n        internal\r\n        view\r\n        returns(uint)\r\n    {\r\n        return btc // is already scaled by 1e36\r\n            .mul(1e18)\r\n            .div(pool.swap.get_virtual_price())\r\n            .div(pool.sett.getPricePerFullShare());\r\n    }\r\n\r\n    /**\r\n    * @dev Determine btc amount given sett amount\r\n    * @param amount Sett LP token amount\r\n    *        Will revert for amount > 1e41.\r\n    *        It's not possible to supply that amount because btc supply is capped at 21e24\r\n    */\r\n    function _settToBtc(CurvePool memory pool, uint amount)\r\n        internal\r\n        view\r\n        returns(uint)\r\n    {\r\n        return amount\r\n            .mul(pool.sett.getPricePerFullShare())\r\n            .mul(pool.swap.get_virtual_price())\r\n            .div(1e36);\r\n    }\r\n\r\n    /* ##### Governance ##### */\r\n\r\n    /**\r\n    * @notice Manage whitelisted curve pools and their respective sett vaults\r\n    */\r\n    function modifyWhitelistedCurvePools(\r\n        CurvePool[] calldata _pools\r\n    )\r\n        external\r\n        onlyGovernanceOrBadgerGovernance\r\n    {\r\n        CurvePool memory pool;\r\n\r\n        for (uint i = 0; i < _pools.length; i++) {\r\n            pool = _pools[i];\r\n            require(\r\n                address(pool.swap) != address(0)\r\n                && address(pool.sett) != address(0),\r\n                \"NULL_ADDRESS\"\r\n            );\r\n            pools[i] = pool;\r\n        }\r\n\r\n        // clear older pools\r\n        if (numPools > _pools.length) {\r\n            for (uint i = _pools.length; i < numPools; i++) {\r\n                delete pools[i];\r\n            }\r\n        }\r\n        numPools = _pools.length;\r\n    }\r\n\r\n    function setGuardian(address _guardian) external onlyGovernanceOrBadgerGovernance {\r\n        guardian = _guardian;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ibBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sett\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ibBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sett\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveContractAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgerGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calcMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bBTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bBtc\",\"type\":\"uint256\"}],\"name\":\"calcRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sett\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"contract ISett\",\"name\":\"sett\",\"type\":\"address\"}],\"internalType\":\"struct BadgerSettPeak.CurvePool[]\",\"name\":\"_pools\",\"type\":\"tuple[]\"}],\"name\":\"modifyWhitelistedCurvePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"contract ISett\",\"name\":\"sett\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeContractAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BadgerSettPeak","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002a8facc9d49fbc3ecff569847833c380a13418a8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb7ecaf0ea3dafee104363487a2df691e0bbae1ab53bbe88c4ef8e1f2cb89db7"}]}