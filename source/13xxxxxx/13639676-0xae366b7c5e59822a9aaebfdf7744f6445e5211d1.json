{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RouterProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRouterProxy.sol\\\";\\nimport \\\"./interfaces/IRouterDiamond.sol\\\";\\nimport \\\"./interfaces/IERC2612Permit.sol\\\";\\n\\n/**\\n * @dev If we are paying the fee in something other than ALBT or transferring\\n * native currency, we use this proxy contract instead of the bridge router.\\n */\\ncontract RouterProxy is IRouterProxy, ERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public routerAddress;\\n    address public albtToken;\\n    mapping(address => uint256) public feeAmountByToken;\\n    uint8 private immutable _decimals;\\n\\n    /**\\n     *  @notice Constructs a new RouterProxy contract\\n     *  @param routerAddress_ The address of the underlying router\\n     *  @param albtToken_ The address of the (w)ALBT contract\\n     *  @param tokenName_ The name for the ERC20 token representing the native currency\\n     *  @param tokenSymbol_ The symbol for the ERC20 token representing the native currency\\n     *  @param decimals_ The number of decimals for the ERC20 token representing the native currency\\n     */\\n    constructor(\\n        address routerAddress_, address albtToken_, string memory tokenName_, string memory tokenSymbol_, uint8 decimals_\\n    ) ERC20(tokenName_, tokenSymbol_) {\\n        require(routerAddress_ != address(0), \\\"Router address must be non-zero\\\");\\n        require(albtToken_ != address(0), \\\"ALBT address must be non-zero\\\");\\n        routerAddress = routerAddress_;\\n        albtToken = albtToken_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     *  @notice Set the fee amount for a token\\n     *  @param tokenAddress_ The address of the ERC20 token contract\\n     *  @param fee_ The fee amount when paying with this token\\n     */\\n    function setFee(address tokenAddress_, uint256 fee_) external override onlyOwner {\\n        emit FeeSet(tokenAddress_, feeAmountByToken[tokenAddress_], fee_);\\n        feeAmountByToken[tokenAddress_] = fee_;\\n    }\\n\\n    /**\\n     *  @param tokenAddress_ The address of the ERC20 token contract\\n     *  @return The fee amount for the token\\n     */\\n    function _fee(address tokenAddress_) view internal virtual returns (uint256) {\\n        require(feeAmountByToken[tokenAddress_] > 0, \\\"Unsupported token\\\");\\n        return feeAmountByToken[tokenAddress_];\\n    }\\n\\n    /**\\n     *  @notice Set the address for the router contract\\n     *  @param routerAddress_ The address of the router contract\\n     */\\n    function setRouterAddress(address routerAddress_) external override onlyOwner {\\n        emit RouterAddressSet(routerAddress, routerAddress_);\\n        routerAddress = routerAddress_;\\n    }\\n\\n    /**\\n     *  @notice Set the address for the (w)ALBT contract\\n     *  @param albtToken_ The address of the (w)ALBT contract\\n     */\\n    function setAlbtToken(address albtToken_) external override onlyOwner {\\n        emit AlbtAddressSet(albtToken, albtToken_);\\n        albtToken = albtToken_;\\n    }\\n\\n    /**\\n     *  @param tokenAddress_ The address of the token contract\\n     *  @return Checks if the supplied token address is representing the native currency\\n     */\\n    function _isNativeCurrency(address tokenAddress_) internal view returns(bool) {\\n        return tokenAddress_ == address(this);\\n    }\\n\\n    /**\\n     *  @notice Gets the user's funds and approves their transfer to the router, covering the fee in (w)ALBT\\n     *  @param feeToken_ Token the user is paying the fee in\\n     *  @param transferToken_ Token the user wants to transfer\\n     *  @param amount_ Amount the user wants to transfer\\n     */\\n    function _setupProxyPayment(address feeToken_, address transferToken_, uint256 amount_) internal nonReentrant {\\n        uint256 currencyLeft = msg.value;\\n        bool isTransferTokenNativeCurrency = _isNativeCurrency(transferToken_);\\n\\n        if (isTransferTokenNativeCurrency) {\\n            require(currencyLeft >= amount_, \\\"Not enough funds sent to transfer\\\");\\n            currencyLeft -= amount_;\\n            _mint(address(this), amount_);\\n        }\\n        else {\\n            IERC20(transferToken_).safeTransferFrom(msg.sender, address(this), amount_);\\n        }\\n\\n        uint256 feeOwed = _fee(feeToken_);\\n        if (_isNativeCurrency(feeToken_)) {\\n            require(currencyLeft >= feeOwed, \\\"Not enough funds sent to pay the fee\\\");\\n            currencyLeft -= feeOwed;\\n\\n            (bool success, bytes memory returndata) = owner().call{value: feeOwed}(\\\"\\\");\\n            require(success, string(returndata));\\n        }\\n        else {\\n            IERC20(feeToken_).safeTransferFrom(msg.sender, owner(), feeOwed);\\n        }\\n        emit FeeCollected(feeToken_, feeOwed);\\n\\n        uint256 albtApproveAmount = IRouterDiamond(routerAddress).serviceFee() + IRouterDiamond(routerAddress).externalFee();\\n        if (transferToken_ == albtToken) {\\n            albtApproveAmount += amount_;\\n        }\\n        else if (isTransferTokenNativeCurrency) {\\n            _approve(address(this), routerAddress, amount_);\\n        }\\n        else {\\n            IERC20(transferToken_).approve(routerAddress, amount_);\\n        }\\n        IERC20(albtToken).approve(routerAddress, albtApproveAmount);\\n\\n        if (currencyLeft > 0) {\\n            (bool success, bytes memory returndata) = msg.sender.call{value: currencyLeft}(\\\"\\\");\\n            require(success, string(returndata));\\n        }\\n    }\\n\\n    /**\\n     *  @notice Transfers `amount` native tokens to the router contract.\\n                The router must be authorised to transfer both the native token and the ALBT tokens for the fees.\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param targetChain_ The target chain for the bridging operation\\n     *  @param nativeToken_ The token to be bridged\\n     *  @param amount_ The amount of tokens to bridge\\n     *  @param receiver_ The address of the receiver in the target chain\\n     */\\n    function lock(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address nativeToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_\\n    ) public override payable {\\n        _setupProxyPayment(feeToken_, nativeToken_, amount_);\\n        IRouterDiamond(routerAddress).lock(targetChain_, nativeToken_, amount_, receiver_);\\n        emit ProxyLock(feeToken_, targetChain_, nativeToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n     *  @notice Locks the provided amount of nativeToken using an EIP-2612 permit and initiates a bridging transaction\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param targetChain_ The chain to bridge the tokens to\\n     *  @param nativeToken_ The native token to bridge\\n     *  @param amount_ The amount of nativeToken to lock and bridge\\n     *  @param deadline_ The deadline for the provided permit\\n     *  @param v_ The recovery id of the permit's ECDSA signature\\n     *  @param r_ The first output of the permit's ECDSA signature\\n     *  @param s_ The second output of the permit's ECDSA signature\\n     */\\n    function lockWithPermit(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address nativeToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external override payable {\\n        IERC2612Permit(nativeToken_).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);\\n        lock(feeToken_, targetChain_, nativeToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n     *  @notice Calls burn on the given wrapped token contract with `amount` wrapped tokens from `msg.sender`.\\n                The router must be authorised to transfer the ABLT tokens for the fees.\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param wrappedToken_ The wrapped token to burn\\n     *  @param amount_ The amount of wrapped tokens to be bridged\\n     *  @param receiver_ The address of the user in the original chain for this wrapped token\\n     */\\n    function burn(\\n        address feeToken_, address wrappedToken_, uint256 amount_, bytes memory receiver_\\n    ) public override payable {\\n        _setupProxyPayment(feeToken_, wrappedToken_, amount_);\\n        IRouterDiamond(routerAddress).burn(wrappedToken_, amount_, receiver_);\\n        emit ProxyBurn(feeToken_, wrappedToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n     *  @notice Burns `amount` of `wrappedToken` using an EIP-2612 permit and initializes a bridging transaction to the original chain\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param wrappedToken_ The address of the wrapped token to burn\\n     *  @param amount_ The amount of `wrappedToken` to burn\\n     *  @param receiver_ The receiving address in the original chain for this wrapped token\\n     *  @param deadline_ The deadline of the provided permit\\n     *  @param v_ The recovery id of the permit's ECDSA signature\\n     *  @param r_ The first output of the permit's ECDSA signature\\n     *  @param s_ The second output of the permit's ECDSA signature\\n     */\\n    function burnWithPermit(\\n        address feeToken_,\\n        address wrappedToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external override payable {\\n        IERC2612Permit(wrappedToken_).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);\\n        burn(feeToken_, wrappedToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n     *  @notice Calls burn on the given wrapped token contract with `amount` wrapped tokens from `msg.sender`.\\n                The router must be authorised to transfer the ABLT tokens for the fees.\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param targetChain_ The target chain for the bridging operation\\n     *  @param wrappedToken_ The wrapped token to burn\\n     *  @param amount_ The amount of wrapped tokens to be bridged\\n     *  @param receiver_ The address of the user in the original chain for this wrapped token\\n     */\\n    function burnAndTransfer(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address wrappedToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_\\n    ) public override payable {\\n        _setupProxyPayment(feeToken_, wrappedToken_, amount_);\\n        IRouterDiamond(routerAddress).burnAndTransfer(targetChain_, wrappedToken_, amount_, receiver_);\\n        emit ProxyBurnAndTransfer(feeToken_, targetChain_, wrappedToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n     *  @notice Burns `amount` of `wrappedToken` using an EIP-2612 permit and initializes a bridging transaction to the original chain\\n     *  @param feeToken_ Token used to pay the fee\\n     *  @param targetChain_ The target chain for the bridging operation\\n     *  @param wrappedToken_ The address of the wrapped token to burn\\n     *  @param amount_ The amount of `wrappedToken` to burn\\n     *  @param receiver_ The receiving address in the original chain for this wrapped token\\n     *  @param deadline_ The deadline of the provided permit\\n     *  @param v_ The recovery id of the permit's ECDSA signature\\n     *  @param r_ The first output of the permit's ECDSA signature\\n     *  @param s_ The second output of the permit's ECDSA signature\\n     */\\n    function burnAndTransferWithPermit(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address wrappedToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external override payable {\\n        IERC2612Permit(wrappedToken_).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);\\n        burnAndTransfer(feeToken_, targetChain_, wrappedToken_, amount_, receiver_);\\n    }\\n\\n    /**\\n    * @dev Invoked by the router when unlocking tokens\\n    * Overriden so unlocking automatically unwraps to native currency\\n    */\\n    function transfer(address recipient_, uint256 amount_) public override returns (bool) {\\n        bool success = false;\\n\\n        if (msg.sender == routerAddress) {\\n            bytes memory returndata;\\n\\n            _burn(msg.sender, amount_);\\n            (success, returndata) = recipient_.call{value: amount_}(\\\"\\\");\\n            require(success, string(returndata));\\n        }\\n\\n        return success;\\n    }\\n\\n    /**\\n     *  @notice Get the ERC20 decimal count\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     *  @notice Send contract's tokens to the owner's address\\n     *  @param tokenAddress_ The token we want to claim\\n     *  @dev In case we want to take out the (w)ALBT\\n     */\\n    function claimTokens(address tokenAddress_) external override onlyOwner {\\n        uint256 amount = IERC20(tokenAddress_).balanceOf(address(this));\\n        IERC20(tokenAddress_).safeTransfer(owner(), amount);\\n        emit TokensClaimed(tokenAddress_, amount);\\n    }\\n\\n    /**\\n     *  @notice Send the contract's currency to the owner's address\\n     *  @dev In case we want to replace the RouterProxy contract\\n     */\\n    function claimCurrency() external override onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, bytes memory returndata) = owner().call{value: amount}(\\\"\\\");\\n        require(success, string(returndata));\\n\\n        emit CurrencyClaimed(amount);\\n    }\\n\\n    /**\\n     *  @notice Loads the bridge with native currency\\n     *  @dev Usable when you add a pre-existing WrappedToken contract for native currency\\n     */\\n    function bridgeAirdrop() external override payable onlyOwner {\\n        require(msg.value > 0, \\\"Expected funds\\\");\\n        _mint(routerAddress, msg.value);\\n        emit BridgeAirdrop(msg.value);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouterProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRouterProxy {\\n\\n    /// @notice An event emitted when setting the fee amount for a token\\n    event FeeSet(address token_, uint256 oldFee_, uint256 newFee_);\\n    /// @notice An event emitted when setting a new Router address\\n    event RouterAddressSet(address oldRouter_, address newRouter_);\\n    /// @notice An event emitted when setting a new ALBT address\\n    event AlbtAddressSet(address oldAlbt_, address newAlbt_);\\n    /// @notice An event emitted once a Lock transaction is proxied\\n    event ProxyLock(address feeToken_, uint8 targetChain_, address nativeToken_, uint256 amount_, bytes receiver_);\\n    /// @notice An event emitted once a Burn transaction is proxied\\n    event ProxyBurn(address feeToken_, address wrappedToken_, uint256 amount_, bytes receiver_);\\n    /// @notice An event emitted once a BurnAndTransfer transaction is proxied\\n    event ProxyBurnAndTransfer(address feeToken_, uint8 targetChain_, address wrappedToken_, uint256 amount_, bytes receiver_);\\n    /// @notice An event emitted when the proxy collects a fee\\n    event FeeCollected(address token_, uint256 amount_);\\n    /// @notice An event emitted when contract's tokens are sent to the owner\\n    event TokensClaimed(address token_, uint256 amount_);\\n    /// @notice An event emitted when the contract's currency is sent to the owner\\n    event CurrencyClaimed(uint256 amount);\\n    /// @notice An event emitted when currency is manually sent to the bridge\\n    event BridgeAirdrop(uint256 amount_);\\n\\n    function setFee(address tokenAddress_, uint256 fee_) external;\\n\\n    function setRouterAddress(address routerAddress_) external;\\n\\n    function setAlbtToken(address albtToken_) external;\\n\\n    function lock(address feeToken_, uint8 targetChain_, address nativeToken_, uint256 amount_, bytes calldata receiver_) external payable;\\n\\n    function lockWithPermit(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address nativeToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external payable;\\n\\n    function burn(address feeToken_, address wrappedToken_, uint256 amount_, bytes calldata receiver_) external payable;\\n\\n    function burnWithPermit(\\n        address feeToken_,\\n        address wrappedToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external payable;\\n\\n    function burnAndTransfer(address feeToken_, uint8 targetChain_, address wrappedToken_, uint256 amount_, bytes calldata receiver_)\\n        external payable;\\n\\n    function burnAndTransferWithPermit(\\n        address feeToken_,\\n        uint8 targetChain_,\\n        address wrappedToken_,\\n        uint256 amount_,\\n        bytes calldata receiver_,\\n        uint256 deadline_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external payable;\\n\\n    function claimTokens(address tokenAddress_) external;\\n    function claimCurrency() external;\\n\\n    function bridgeAirdrop() external payable;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouterDiamond.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IDiamondCut.sol\\\";\\nimport \\\"./IDiamondLoupe.sol\\\";\\nimport \\\"./IFeeCalculator.sol\\\";\\nimport \\\"./IFeeExternal.sol\\\";\\nimport \\\"./IRouter.sol\\\";\\nimport \\\"./IGovernance.sol\\\";\\nimport \\\"./IUtility.sol\\\";\\n\\ninterface IRouterDiamond is IGovernance, IDiamondCut, IDiamondLoupe, IFeeCalculator, IFeeExternal, IUtility, IRouter {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC2612Permit.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612Permit {\\n    /**\\n     * @dev Sets `_amount` as the allowance of `_spender` over `_owner`'s tokens,\\n     * given `_owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     * - `_deadline` must be a timestamp in the future.\\n     * - `_v`, `_r` and `_s` must be a valid `secp256k1` signature from `_owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``_owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `_owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``_owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address _owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    /// @param _signatures The signatures of between n/2 and n validators for this upgrade\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata,\\n        bytes[] memory _signatures\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeCalculator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFeeCalculator {\\n    /// @notice An event emitted once the service fee is modified\\n    event ServiceFeeSet(address account, uint256 newServiceFee);\\n    /// @notice An event emitted once a member claims fees accredited to him\\n    event Claim(address member, uint256 amount);\\n\\n    /**\\n     *  @notice Construct a new FeeCalculator contract\\n     *  @param _serviceFee The initial service fee in ALBT tokens (flat)\\n     */\\n    function initFeeCalculator(uint256 _serviceFee) external;\\n\\n    /// @return The currently set service fee\\n    function serviceFee() external view returns (uint256);\\n\\n    /**\\n     *  @notice Sets the service fee for this chain\\n     *  @param _serviceFee The new service fee\\n     *  @param _signatures The array of signatures from the members, authorising the operation\\n     */\\n    function setServiceFee(uint256 _serviceFee, bytes[] calldata _signatures) external;\\n\\n    /// @return The current feesAccrued counter\\n    function feesAccrued() external view returns (uint256);\\n\\n    /// @return The feesAccrued counter before the last reward distribution\\n    function previousAccrued() external view returns (uint256);\\n\\n    /// @return The current accumulator counter\\n    function accumulator() external view returns (uint256);\\n\\n    /**\\n     *  @param _account The address of a validator\\n     *  @return The total amount of ALBT claimed by the provided validator address\\n     */\\n    function claimedRewardsPerAccount(address _account) external view returns (uint256);\\n\\n    /// @notice Sends out the reward in ALBT accumulated by the caller\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeExternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFeeExternal {\\n    /// @notice An event emitted once the external fee is modified\\n    event ExternalFeeSet(address account, uint256 newExternalFee);\\n    /// @notice An event emitted once a the external fee account is modified\\n    event ExternalFeeAddressSet(address account, address newExternalFeeAddress);\\n\\n    /**\\n     *  @notice Construct a new FeeExternal contract\\n     *  @param _externalFee The initial external fee in ALBT tokens (flat)\\n     */\\n    function initFeeExternal(uint256 _externalFee, address _externalFeeAddress) external;\\n    function externalFee() external view returns (uint256);\\n    function externalFeeAddress() external view returns (address);\\n    function setExternalFee(uint256 _externalFee, bytes[] calldata _signatures) external;\\n    function setExternalFeeAddress(address _externalFeeAddress, bytes[] calldata _signatures) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibRouter.sol\\\";\\n\\nstruct WrappedTokenParams {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n}\\n\\ninterface IRouter {\\n    /// @notice An event emitted once a Lock transaction is executed\\n    event Lock(uint8 targetChain, address token, bytes receiver, uint256 amount, uint256 serviceFee);\\n    /// @notice An event emitted once a Burn transaction is executed\\n    event Burn(address token, uint256 amount, bytes receiver);\\n    /// @notice An event emitted once a BurnAndTransfer transaction is executed\\n    event BurnAndTransfer(uint8 targetChain, address token, uint256 amount, bytes receiver);\\n    /// @notice An event emitted once an Unlock transaction is executed\\n    event Unlock(address token, uint256 amount, address receiver);\\n    /// @notice An even emitted once a Mint transaction is executed\\n    event Mint(address token, uint256 amount, address receiver);\\n    /// @notice An event emitted once a new wrapped token is deployed by the contract\\n    event WrappedTokenDeployed(uint8 sourceChain, bytes nativeToken, address wrappedToken);\\n    /// @notice An event emitted when collecting fees\\n    event Fees(uint256 serviceFee, uint256 externalFee);\\n\\n    function initRouter(uint8 _chainId, address _albtToken) external;\\n    function nativeToWrappedToken(uint8 _chainId, bytes memory _nativeToken) external view returns (address);\\n    function wrappedToNativeToken(address _wrappedToken) external view returns (LibRouter.NativeTokenWithChainId memory);\\n    function hashesUsed(uint8 _chainId, bytes32 _ethHash) external view returns (bool);\\n    function albtToken() external view returns (address);\\n    function lock(uint8 _targetChain, address _nativeToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function lockWithPermit(\\n        uint8 _targetChain,\\n        address _nativeToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlock(\\n        uint8 _sourceChain,\\n        bytes memory _transactionId,\\n        address _nativeToken,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures\\n    ) external;\\n\\n    function burn(address _wrappedToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function burnWithPermit(\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function burnAndTransfer(uint8 _targetChain, address _wrappedToken, uint256 _amount, bytes memory _receiver) external;\\n\\n    function burnAndTransferWithPermit(\\n        uint8 _targetChain,\\n        address _wrappedToken,\\n        uint256 _amount,\\n        bytes memory _receiver,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function mint(\\n        uint8 _nativeChain,\\n        bytes memory _nativeToken,\\n        bytes memory _transactionId,\\n        uint256 _amount,\\n        address _receiver,\\n        bytes[] calldata _signatures,\\n        WrappedTokenParams memory _tokenParams\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernance {\\n    /// @notice An event emitted once member is updated\\n    event MemberUpdated(address member, bool status);\\n\\n    /**\\n     *  @notice Initializes the Governance facet with an initial set of members\\n     *  @param _members The initial set of members\\n     */\\n    function initGovernance(address[] memory _members) external;\\n\\n    /**\\n     *  @notice Adds/removes a member account\\n     *  @param _account The account to be modified\\n     *  @param _status Whether the account will be set as member or not\\n     *  @param _signatures The signatures of the validators authorizing this member update\\n     */\\n    function updateMember(address _account, bool _status, bytes[] calldata _signatures) external;\\n\\n    /// @return True/false depending on whether a given address is member or not\\n    function isMember(address _member) external view returns (bool);\\n\\n    /// @return The count of members in the members set\\n    function membersCount() external view returns (uint256);\\n\\n    /// @return The address of a member at a given index\\n    function memberAt(uint256 _index) external view returns (address);\\n\\n    /// @return The current administrative nonce\\n    function administrativeNonce() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IUtility {\\n    enum TokenAction {Pause, Unpause}\\n\\n    function pauseToken(address _tokenAddress, bytes[] calldata _signatures) external;\\n    function unpauseToken(address _tokenAddress, bytes[] calldata _signatures) external;\\n\\n    function setWrappedToken(uint8 _nativeChainId, bytes memory _nativeToken, address _wrappedToken, bytes[] calldata _signatures) external;\\n    function unsetWrappedToken(address _wrappedToken, bytes[] calldata _signatures) external;\\n\\n    event TokenPause(address _account, address _token);\\n    event TokenUnpause(address _account, address _token);\\n    event WrappedTokenSet(uint8 _nativeChainId, bytes _nativeToken, address _wrappedToken);\\n    event WrappedTokenUnset(address _wrappedToken);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nlibrary LibRouter {\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"router.storage\\\");\\n\\n    /// @notice Struct containing information about a token's address and its native chain\\n    struct NativeTokenWithChainId {\\n        uint8 chainId;\\n        bytes token;\\n    }\\n\\n    struct Storage {\\n        bool initialized;\\n\\n        // Maps chainID => (nativeToken => wrappedToken)\\n        mapping(uint8 => mapping(bytes => address)) nativeToWrappedToken;\\n\\n        // Maps wrapped tokens in the current chain to their native chain + token address\\n        mapping(address => NativeTokenWithChainId) wrappedToNativeToken;\\n\\n        // Storage metadata for transfers. Maps sourceChain => (transactionId => metadata)\\n        mapping(uint8 => mapping(bytes32 => bool)) hashesUsed;\\n\\n        // Address of the ALBT token in the current chain\\n        address albtToken;\\n\\n        // The chainId of the current chain\\n        uint8 chainId;\\n    }\\n\\n    function routerStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"albtToken_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAlbt_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAlbt_\",\"type\":\"address\"}],\"name\":\"AlbtAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"BridgeAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CurrencyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee_\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"ProxyBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"ProxyBurnAndTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"ProxyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter_\",\"type\":\"address\"}],\"name\":\"RouterAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"albtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"burnAndTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"burnAndTransferWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"burnWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"targetChain_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"lockWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"albtToken_\",\"type\":\"address\"}],\"name\":\"setAlbtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RouterProxy","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007cab80b6facd52a0f3e044d8bfc43d0ad6d258f400000000000000000000000000a8b738e453ffd858a7edf03bccfe20412f0eb000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000014416c6c69616e636542726964676520457468657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000054142455448000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}