{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/WrappedTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./ERC1404.sol\\\";\\n\\nimport \\\"./roles/OwnerRole.sol\\\";\\n\\nimport \\\"./capabilities/Proxiable.sol\\\";\\n\\nimport \\\"./capabilities/Burnable.sol\\\";\\nimport \\\"./capabilities/Mintable.sol\\\";\\nimport \\\"./capabilities/Pausable.sol\\\";\\nimport \\\"./capabilities/Revocable.sol\\\";\\n\\nimport \\\"./capabilities/Blacklistable.sol\\\";\\nimport \\\"./capabilities/Whitelistable.sol\\\";\\n\\nimport \\\"./capabilities/RevocableToAddress.sol\\\";\\n\\n/// @title Wrapped Token V1 Contract\\n/// @notice The role based access controls allow the Owner accounts to determine which permissions are granted to admin\\n/// accounts. Admin accounts can enable, disable, and configure the token restrictions built into the contract.\\n/// @dev This contract implements the ERC1404 Interface to add transfer restrictions to a standard ERC20 token.\\ncontract WrappedTokenV1 is\\n    Proxiable,\\n    ERC20Upgradeable,\\n    ERC1404,\\n    OwnerRole,\\n    Whitelistable,\\n    Mintable,\\n    Burnable,\\n    Revocable,\\n    Pausable,\\n    Blacklistable,\\n    RevocableToAddress\\n{\\n    AggregatorV3Interface public reserveFeed;\\n\\n    // ERC1404 Error codes and messages\\n    uint8 public constant SUCCESS_CODE = 0;\\n    uint8 public constant FAILURE_NON_WHITELIST = 1;\\n    uint8 public constant FAILURE_PAUSED = 2;\\n    string public constant SUCCESS_MESSAGE = \\\"SUCCESS\\\";\\n    string public constant FAILURE_NON_WHITELIST_MESSAGE =\\n        \\\"The transfer was restricted due to white list configuration.\\\";\\n    string public constant FAILURE_PAUSED_MESSAGE =\\n        \\\"The transfer was restricted due to the contract being paused.\\\";\\n    string public constant UNKNOWN_ERROR = \\\"Unknown Error Code\\\";\\n\\n    /// @notice The from/to account has been explicitly denied the ability to send/receive\\n    uint8 public constant FAILURE_BLACKLIST = 3;\\n    string public constant FAILURE_BLACKLIST_MESSAGE =\\n        \\\"Restricted due to blacklist\\\";\\n\\n    event OracleAddressUpdated(address newAddress);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        AggregatorV3Interface resFeed\\n    ) {\\n        initialize(msg.sender, name, symbol, 0, resFeed, true, false);\\n    }\\n\\n    /// @notice This method can only be called once for a unique contract address\\n    /// @dev Initialization for the token to set readable details and mint all tokens to the specified owner\\n    /// @param owner Owner address for the contract\\n    /// @param name Token name identifier\\n    /// @param symbol Token symbol identifier\\n    /// @param initialSupply Amount minted to the owner\\n    /// @param resFeed oracle contract address\\n    /// @param whitelistEnabled A boolean flag that enables token transfers to be white listed\\n    /// @param flashMintEnabled A boolean flag that enables tokens to be flash minted\\n    function initialize(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        AggregatorV3Interface resFeed,\\n        bool whitelistEnabled,\\n        bool flashMintEnabled\\n    ) public initializer {\\n        reserveFeed = resFeed;\\n\\n        ERC20Upgradeable.__ERC20_init(name, symbol);\\n        Mintable._mint(msg.sender, owner, initialSupply);\\n        OwnerRole._addOwner(owner);\\n\\n        Mintable._setFlashMintEnabled(flashMintEnabled);\\n        Whitelistable._setWhitelistEnabled(whitelistEnabled);\\n\\n        Mintable._setFlashMintFeeReceiver(owner);\\n    }\\n\\n    /// @dev Public function to update the address of the code contract\\n    /// @param newAddress new implementation contract address\\n    function updateCodeAddress(address newAddress) external onlyOwner {\\n        Proxiable._updateCodeAddress(newAddress);\\n    }\\n\\n    /// @dev Public function to update the address of the code oracle, retricted to owner\\n    /// @param resFeed oracle contract address\\n    function updateOracleAddress(AggregatorV3Interface resFeed)\\n        external\\n        onlyOwner\\n    {\\n        reserveFeed = resFeed;\\n\\n        mint(msg.sender, 0);\\n        emit OracleAddressUpdated(address(reserveFeed));\\n    }\\n\\n    /// @notice If the function returns SUCCESS_CODE (0) then it should be allowed\\n    /// @dev Public function detects whether a transfer should be restricted and not allowed\\n    /// @param from The sender of a token transfer\\n    /// @param to The receiver of a token transfer\\n    ///\\n    function detectTransferRestriction(\\n        address from,\\n        address to,\\n        uint256\\n    ) public view override returns (uint8) {\\n        // Restrictions are enabled, so verify the whitelist config allows the transfer.\\n        // Logic defined in Blacklistable parent class\\n        if (!checkBlacklistAllowed(from, to)) {\\n            return FAILURE_BLACKLIST;\\n        }\\n\\n        // Check the paused status of the contract\\n        if (Pausable.paused()) {\\n            return FAILURE_PAUSED;\\n        }\\n\\n        // If an owner transferring, then ignore whitelist restrictions\\n        if (OwnerRole.isOwner(from)) {\\n            return SUCCESS_CODE;\\n        }\\n\\n        // Restrictions are enabled, so verify the whitelist config allows the transfer.\\n        // Logic defined in Whitelistable parent class\\n        if (!checkWhitelistAllowed(from, to)) {\\n            return FAILURE_NON_WHITELIST;\\n        }\\n\\n        // If no restrictions were triggered return success\\n        return SUCCESS_CODE;\\n    }\\n\\n    /// @notice It should return enough information for the user to know why it failed.\\n    /// @dev Public function allows a wallet or other client to get a human readable string to show a user if a transfer\\n    /// was restricted.\\n    /// @param restrictionCode The sender of a token transfer\\n    function messageForTransferRestriction(uint8 restrictionCode)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        if (restrictionCode == FAILURE_BLACKLIST) {\\n            return FAILURE_BLACKLIST_MESSAGE;\\n        }\\n\\n        if (restrictionCode == SUCCESS_CODE) {\\n            return SUCCESS_MESSAGE;\\n        }\\n\\n        if (restrictionCode == FAILURE_NON_WHITELIST) {\\n            return FAILURE_NON_WHITELIST_MESSAGE;\\n        }\\n\\n        if (restrictionCode == FAILURE_PAUSED) {\\n            return FAILURE_PAUSED_MESSAGE;\\n        }\\n\\n        // An unknown error code was passed in.\\n        return UNKNOWN_ERROR;\\n    }\\n\\n    /// @dev Modifier that evaluates whether a transfer should be allowed or not\\n    /// @param from The sender of a token transfer\\n    /// @param to The receiver of a token transfer\\n    /// @param value Quantity of tokens being exchanged between the sender and receiver\\n    modifier notRestricted(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) {\\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\\n        require(\\n            restrictionCode == SUCCESS_CODE,\\n            messageForTransferRestriction(restrictionCode)\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function that overrides the parent class token transfer function to enforce restrictions\\n    /// @param to Receiver of the token transfer\\n    /// @param value Amount of tokens to transfer\\n    /// @return success Status of the transfer\\n    function transfer(address to, uint256 value)\\n        public\\n        override\\n        notRestricted(msg.sender, to, value)\\n        returns (bool success)\\n    {\\n        success = ERC20Upgradeable.transfer(to, value);\\n    }\\n\\n    /// @dev Public function that overrides the parent class token transferFrom function to enforce restrictions\\n    /// @param from Sender of the token transfer\\n    /// @param to Receiver of the token transfer\\n    /// @param value Amount of tokens to transfer\\n    /// @return success Status of the transfer\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override notRestricted(from, to, value) returns (bool success) {\\n        success = ERC20Upgradeable.transferFrom(from, to, value);\\n    }\\n\\n    /// @dev Public function to recover all ether sent to this contract to an owner address\\n    function withdraw() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @dev Public function to recover all tokens sent to this contract to an owner address\\n    /// @param token ERC20 that has a balance for this contract address\\n    /// @return success Status of the transfer\\n    function recover(IERC20Upgradeable token)\\n        external\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        success = token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Allow Owners to mint tokens to valid addresses\\n    /// @param account The account tokens will be added to\\n    /// @param amount The number of tokens to add to a balance\\n    function mint(address account, uint256 amount)\\n        public\\n        override\\n        onlyMinter\\n        returns (bool)\\n    {\\n        uint256 total = amount + ERC20Upgradeable.totalSupply();\\n        (, int256 answer, , , ) = reserveFeed.latestRoundData();\\n\\n        uint256 decimals = ERC20Upgradeable.decimals();\\n        uint256 reserveFeedDecimals = reserveFeed.decimals();\\n\\n        require(decimals >= reserveFeedDecimals, \\\"invalid price feed decimals\\\");\\n\\n        require(\\n            (answer > 0) &&\\n                (uint256(answer) * 10**uint256(decimals - reserveFeedDecimals) >\\n                    total),\\n            \\\"reserve must exceed the total supply\\\"\\n        );\\n\\n        return Mintable.mint(account, amount);\\n    }\\n\\n    /// @dev Overrides the parent hook which is called ahead of `transfer` every time that method is called\\n    /// @param from Sender of the token transfer\\n    /// @param amount Amount of token being transferred\\n    function _beforeTokenTransfer(\\n        address from,\\n        address,\\n        uint256 amount\\n    ) internal view override {\\n        if (from != address(0)) {\\n            return;\\n        }\\n\\n        require(\\n            ERC20FlashMintUpgradeable.maxFlashLoan(address(this)) > amount,\\n            \\\"mint exceeds max allowed\\\"\\n        );\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/WhitelisterRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title WhitelisterRole Contract\\n/// @notice Only administrators can update the white lister roles\\n/// @dev Keeps track of white listers and can check if an account is authorized\\ncontract WhitelisterRole is OwnerRole {\\n    event WhitelisterAdded(\\n        address indexed addedWhitelister,\\n        address indexed addedBy\\n    );\\n    event WhitelisterRemoved(\\n        address indexed removedWhitelister,\\n        address indexed removedBy\\n    );\\n\\n    Role private _whitelisters;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a white lister\\n    modifier onlyWhitelister() {\\n        require(\\n            isWhitelister(msg.sender),\\n            \\\"WhitelisterRole: caller does not have the Whitelister role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a white lister role\\n    function isWhitelister(address account) public view returns (bool) {\\n        return _has(_whitelisters, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a white lister\\n    /// @param account The address that is guaranteed white lister authorization\\n    function _addWhitelister(address account) internal {\\n        _add(_whitelisters, account);\\n        emit WhitelisterAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a white lister\\n    /// @param account The address removed as a white lister\\n    function _removeWhitelister(address account) internal {\\n        _remove(_whitelisters, account);\\n        emit WhitelisterRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a white lister\\n    /// @param account The address that is guaranteed white lister authorization\\n    function addWhitelister(address account) external onlyOwner {\\n        _addWhitelister(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a white lister\\n    /// @param account The address removed as a white lister\\n    function removeWhitelister(address account) external onlyOwner {\\n        _removeWhitelister(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/RevokerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title RevokerRole Contract\\n/// @notice Only administrators can update the revoker roles\\n/// @dev Keeps track of revokers and can check if an account is authorized\\ncontract RevokerRole is OwnerRole {\\n    event RevokerAdded(address indexed addedRevoker, address indexed addedBy);\\n    event RevokerRemoved(\\n        address indexed removedRevoker,\\n        address indexed removedBy\\n    );\\n\\n    Role private _revokers;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a revoker\\n    modifier onlyRevoker() {\\n        require(\\n            isRevoker(msg.sender),\\n            \\\"RevokerRole: caller does not have the Revoker role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a revoker role\\n    function isRevoker(address account) public view returns (bool) {\\n        return _has(_revokers, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a revoker\\n    /// @param account The address that is guaranteed revoker authorization\\n    function _addRevoker(address account) internal {\\n        _add(_revokers, account);\\n        emit RevokerAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a revoker\\n    /// @param account The address removed as a revoker\\n    function _removeRevoker(address account) internal {\\n        _remove(_revokers, account);\\n        emit RevokerRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a revoker\\n    /// @param account The address that is guaranteed revoker authorization\\n    function addRevoker(address account) external onlyOwner {\\n        _addRevoker(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a revoker\\n    /// @param account The address removed as a revoker\\n    function removeRevoker(address account) external onlyOwner {\\n        _removeRevoker(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/PauserRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title PauserRole Contract\\n/// @notice Only administrators can update the pauser roles\\n/// @dev Keeps track of pausers and can check if an account is authorized\\ncontract PauserRole is OwnerRole {\\n    event PauserAdded(address indexed addedPauser, address indexed addedBy);\\n    event PauserRemoved(\\n        address indexed removedPauser,\\n        address indexed removedBy\\n    );\\n\\n    Role private _pausers;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a pauser\\n    modifier onlyPauser() {\\n        require(\\n            isPauser(msg.sender),\\n            \\\"PauserRole: caller does not have the Pauser role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a pauser role\\n    function isPauser(address account) public view returns (bool) {\\n        return _has(_pausers, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a pauser\\n    /// @param account The address that is guaranteed pauser authorization\\n    function _addPauser(address account) internal {\\n        _add(_pausers, account);\\n        emit PauserAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a pauser\\n    /// @param account The address removed as a pauser\\n    function _removePauser(address account) internal {\\n        _remove(_pausers, account);\\n        emit PauserRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a pauser\\n    /// @param account The address that is guaranteed pauser authorization\\n    function addPauser(address account) external onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a pauser\\n    /// @param account The address removed as a pauser\\n    function removePauser(address account) external onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/OwnerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title OwnerRole Contract\\n/// @notice Only administrators can update the owner roles\\n/// @dev Keeps track of owners and can check if an account is authorized\\ncontract OwnerRole {\\n    event OwnerAdded(address indexed addedOwner, address indexed addedBy);\\n    event OwnerRemoved(address indexed removedOwner, address indexed removedBy);\\n\\n    struct Role {\\n        mapping(address => bool) members;\\n    }\\n\\n    Role private _owners;\\n\\n    /// @dev Modifier to make a function callable only when the caller is an owner\\n    modifier onlyOwner() {\\n        require(\\n            isOwner(msg.sender),\\n            \\\"OwnerRole: caller does not have the Owner role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted an owner role\\n    function isOwner(address account) public view returns (bool) {\\n        return _has(_owners, account);\\n    }\\n\\n    /// @dev Public function that adds an address as an owner\\n    /// @param account The address that is guaranteed owner authorization\\n    function addOwner(address account) external onlyOwner {\\n        _addOwner(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being an owner\\n    /// @param account The address removed as a owner\\n    function removeOwner(address account) external onlyOwner {\\n        _removeOwner(account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as an owner\\n    /// @param account The address that is guaranteed owner authorization\\n    function _addOwner(address account) internal {\\n        _add(_owners, account);\\n        emit OwnerAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being an owner\\n    /// @param account The address removed as an owner\\n    function _removeOwner(address account) internal {\\n        _remove(_owners, account);\\n        emit OwnerRemoved(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Give an account access to this role\\n    /// @param role All authorizations for the contract\\n    /// @param account The address that is guaranteed owner authorization\\n    function _add(Role storage role, address account) internal {\\n        require(account != address(0x0), \\\"Invalid 0x0 address\\\");\\n        require(!_has(role, account), \\\"Roles: account already has role\\\");\\n        role.members[account] = true;\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Remove an account's access to this role\\n    /// @param role All authorizations for the contract\\n    /// @param account The address that is guaranteed owner authorization\\n    function _remove(Role storage role, address account) internal {\\n        require(_has(role, account), \\\"Roles: account does not have role\\\");\\n        role.members[account] = false;\\n    }\\n\\n    /// @dev Check if an account is in the set of roles\\n    /// @param role All authorizations for the contract\\n    /// @param account The address that is guaranteed owner authorization\\n    /// @return boolean\\n    function _has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.members[account];\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/MinterRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title MinterRole Contract\\n/// @notice Only administrators can update the minter roles\\n/// @dev Keeps track of minters and can check if an account is authorized\\ncontract MinterRole is OwnerRole {\\n    event MinterAdded(address indexed addedMinter, address indexed addedBy);\\n    event MinterRemoved(\\n        address indexed removedMinter,\\n        address indexed removedBy\\n    );\\n\\n    Role private _minters;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a minter\\n    modifier onlyMinter() {\\n        require(\\n            isMinter(msg.sender),\\n            \\\"MinterRole: caller does not have the Minter role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a minter role\\n    function isMinter(address account) public view returns (bool) {\\n        return _has(_minters, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a minter\\n    /// @param account The address that is guaranteed minter authorization\\n    function _addMinter(address account) internal {\\n        _add(_minters, account);\\n        emit MinterAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a minter\\n    /// @param account The address removed as a minter\\n    function _removeMinter(address account) internal {\\n        _remove(_minters, account);\\n        emit MinterRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a minter\\n    /// @param account The address that is guaranteed minter authorization\\n    function addMinter(address account) external onlyOwner {\\n        _addMinter(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a minter\\n    /// @param account The address removed as a minter\\n    function removeMinter(address account) external onlyOwner {\\n        _removeMinter(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/BurnerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title BurnerRole Contract\\n/// @notice Only administrators can update the burner roles\\n/// @dev Keeps track of burners and can check if an account is authorized\\ncontract BurnerRole is OwnerRole {\\n    event BurnerAdded(address indexed addedBurner, address indexed addedBy);\\n    event BurnerRemoved(\\n        address indexed removedBurner,\\n        address indexed removedBy\\n    );\\n\\n    Role private _burners;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a burner\\n    modifier onlyBurner() {\\n        require(\\n            isBurner(msg.sender),\\n            \\\"BurnerRole: caller does not have the Burner role\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a burner role\\n    function isBurner(address account) public view returns (bool) {\\n        return _has(_burners, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a burner\\n    /// @param account The address that is guaranteed burner authorization\\n    function _addBurner(address account) internal {\\n        _add(_burners, account);\\n        emit BurnerAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a burner\\n    /// @param account The address removed as a burner\\n    function _removeBurner(address account) internal {\\n        _remove(_burners, account);\\n        emit BurnerRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a burner\\n    /// @param account The address that is guaranteed burner authorization\\n    function addBurner(address account) external onlyOwner {\\n        _addBurner(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a burner\\n    /// @param account The address removed as a burner\\n    function removeBurner(address account) external onlyOwner {\\n        _removeBurner(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/roles/BlacklisterRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnerRole.sol\\\";\\n\\n/// @title BlacklisterRole Contract\\n/// @notice Only administrators can update the black lister roles\\n/// @dev Keeps track of black listers and can check if an account is authorized\\ncontract BlacklisterRole is OwnerRole {\\n    event BlacklisterAdded(\\n        address indexed addedBlacklister,\\n        address indexed addedBy\\n    );\\n    event BlacklisterRemoved(\\n        address indexed removedBlacklister,\\n        address indexed removedBy\\n    );\\n\\n    Role private _Blacklisters;\\n\\n    /// @dev Modifier to make a function callable only when the caller is a black lister\\n    modifier onlyBlacklister() {\\n        require(isBlacklister(msg.sender), \\\"BlacklisterRole missing\\\");\\n        _;\\n    }\\n\\n    /// @dev Public function returns `true` if `account` has been granted a black lister role\\n    function isBlacklister(address account) public view returns (bool) {\\n        return _has(_Blacklisters, account);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Adds an address as a black lister\\n    /// @param account The address that is guaranteed black lister authorization\\n    function _addBlacklister(address account) internal {\\n        _add(_Blacklisters, account);\\n        emit BlacklisterAdded(account, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Removes an account from being a black lister\\n    /// @param account The address removed as a black lister\\n    function _removeBlacklister(address account) internal {\\n        _remove(_Blacklisters, account);\\n        emit BlacklisterRemoved(account, msg.sender);\\n    }\\n\\n    /// @dev Public function that adds an address as a black lister\\n    /// @param account The address that is guaranteed black lister authorization\\n    function addBlacklister(address account) external onlyOwner {\\n        _addBlacklister(account);\\n    }\\n\\n    /// @dev Public function that removes an account from being a black lister\\n    /// @param account The address removed as a black lister\\n    function removeBlacklister(address account) external onlyOwner {\\n        _removeBlacklister(account);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Whitelistable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../roles/WhitelisterRole.sol\\\";\\n\\n/// @title Whitelistable Contract\\n/// @notice Only administrators can update the white lists, and any address can only be a member of one whitelist at a\\n/// time\\n/// @dev Keeps track of white lists and can check if sender and reciever are configured to allow a transfer\\ncontract Whitelistable is WhitelisterRole {\\n    // The mapping to keep track of which whitelist any address belongs to.\\n    // 0 is reserved for no whitelist and is the default for all addresses.\\n    mapping(address => uint8) public addressWhitelists;\\n\\n    // The mapping to keep track of each whitelist's outbound whitelist flags.\\n    // Boolean flag indicates whether outbound transfers are enabled.\\n    mapping(uint8 => mapping(uint8 => bool)) public outboundWhitelistsEnabled;\\n\\n    // Track whether whitelisting is enabled\\n    bool public isWhitelistEnabled;\\n\\n    // Zero is reserved for indicating it is not on a whitelist\\n    uint8 constant NO_WHITELIST = 0;\\n\\n    // Events to allow tracking add/remove.\\n    event AddressAddedToWhitelist(\\n        address indexed addedAddress,\\n        uint8 indexed whitelist,\\n        address indexed addedBy\\n    );\\n    event AddressRemovedFromWhitelist(\\n        address indexed removedAddress,\\n        uint8 indexed whitelist,\\n        address indexed removedBy\\n    );\\n    event OutboundWhitelistUpdated(\\n        address indexed updatedBy,\\n        uint8 indexed sourceWhitelist,\\n        uint8 indexed destinationWhitelist,\\n        bool from,\\n        bool to\\n    );\\n    event WhitelistEnabledUpdated(\\n        address indexed updatedBy,\\n        bool indexed enabled\\n    );\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Enable or disable the whitelist enforcement\\n    /// @param enabled A boolean flag that enables token transfers to be white listed\\n    function _setWhitelistEnabled(bool enabled) internal {\\n        isWhitelistEnabled = enabled;\\n        emit WhitelistEnabledUpdated(msg.sender, enabled);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this. If an address is on an existing whitelist, it will\\n    /// just get updated to the new value (removed from previous)\\n    /// @dev Sets an address's white list ID.\\n    /// @param addressToAdd The address added to a whitelist\\n    /// @param whitelist Number identifier for the whitelist the address is being added to\\n    function _addToWhitelist(address addressToAdd, uint8 whitelist) internal {\\n        // Verify a valid address was passed in\\n        require(\\n            addressToAdd != address(0),\\n            \\\"Cannot add address 0x0 to a whitelist.\\\"\\n        );\\n\\n        // Verify the whitelist is valid\\n        require(whitelist != NO_WHITELIST, \\\"Invalid whitelist ID supplied\\\");\\n\\n        // Save off the previous white list\\n        uint8 previousWhitelist = addressWhitelists[addressToAdd];\\n\\n        // Set the address's white list ID\\n        addressWhitelists[addressToAdd] = whitelist;\\n\\n        // If the previous whitelist existed then we want to indicate it has been removed\\n        if (previousWhitelist != NO_WHITELIST) {\\n            // Emit the event for tracking\\n            emit AddressRemovedFromWhitelist(\\n                addressToAdd,\\n                previousWhitelist,\\n                msg.sender\\n            );\\n        }\\n\\n        // Emit the event for new whitelist\\n        emit AddressAddedToWhitelist(addressToAdd, whitelist, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Clears out an address's white list ID\\n    /// @param addressToRemove The address removed from a white list\\n    function _removeFromWhitelist(address addressToRemove) internal {\\n        // Verify a valid address was passed in\\n        require(\\n            addressToRemove != address(0),\\n            \\\"Cannot remove address 0x0 from a whitelist.\\\"\\n        );\\n\\n        // Save off the previous white list\\n        uint8 previousWhitelist = addressWhitelists[addressToRemove];\\n\\n        // Verify the address was actually on a whitelist\\n        require(\\n            previousWhitelist != NO_WHITELIST,\\n            \\\"Address cannot be removed from invalid whitelist.\\\"\\n        );\\n\\n        // Zero out the previous white list\\n        addressWhitelists[addressToRemove] = NO_WHITELIST;\\n\\n        // Emit the event for tracking\\n        emit AddressRemovedFromWhitelist(\\n            addressToRemove,\\n            previousWhitelist,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Sets the flag to indicate whether source whitelist is allowed to send to destination whitelist\\n    /// @param sourceWhitelist The white list of the sender\\n    /// @param destinationWhitelist The white list of the receiver\\n    /// @param newEnabledValue A boolean flag that enables token transfers between white lists\\n    function _updateOutboundWhitelistEnabled(\\n        uint8 sourceWhitelist,\\n        uint8 destinationWhitelist,\\n        bool newEnabledValue\\n    ) internal {\\n        // Get the old enabled flag\\n        bool oldEnabledValue = outboundWhitelistsEnabled[sourceWhitelist][\\n            destinationWhitelist\\n        ];\\n\\n        // Update to the new value\\n        outboundWhitelistsEnabled[sourceWhitelist][\\n            destinationWhitelist\\n        ] = newEnabledValue;\\n\\n        // Emit event for tracking\\n        emit OutboundWhitelistUpdated(\\n            msg.sender,\\n            sourceWhitelist,\\n            destinationWhitelist,\\n            oldEnabledValue,\\n            newEnabledValue\\n        );\\n    }\\n\\n    /// @notice The source whitelist must be enabled to send to the whitelist where the receive exists\\n    /// @dev Determine if the a sender is allowed to send to the receiver\\n    /// @param sender The address of the sender\\n    /// @param receiver The address of the receiver\\n    function checkWhitelistAllowed(address sender, address receiver)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // If whitelist enforcement is not enabled, then allow all\\n        if (!isWhitelistEnabled) {\\n            return true;\\n        }\\n\\n        // First get each address white list\\n        uint8 senderWhiteList = addressWhitelists[sender];\\n        uint8 receiverWhiteList = addressWhitelists[receiver];\\n\\n        // If either address is not on a white list then the check should fail\\n        if (\\n            senderWhiteList == NO_WHITELIST || receiverWhiteList == NO_WHITELIST\\n        ) {\\n            return false;\\n        }\\n\\n        // Determine if the sending whitelist is allowed to send to the destination whitelist\\n        return outboundWhitelistsEnabled[senderWhiteList][receiverWhiteList];\\n    }\\n\\n    /// @dev Public function that enables or disables the white list enforcement\\n    /// @param enabled A boolean flag that enables token transfers to be whitelisted\\n    function setWhitelistEnabled(bool enabled) external onlyOwner {\\n        _setWhitelistEnabled(enabled);\\n    }\\n\\n    /// @notice If an address is on an existing whitelist, it will just get updated to the new value (removed from\\n    /// previous)\\n    /// @dev Public function that sets an address's white list ID\\n    /// @param addressToAdd The address added to a whitelist\\n    /// @param whitelist Number identifier for the whitelist the address is being added to\\n    function addToWhitelist(address addressToAdd, uint8 whitelist)\\n        external\\n        onlyWhitelister\\n    {\\n        _addToWhitelist(addressToAdd, whitelist);\\n    }\\n\\n    /// @dev Public function that clears out an address's white list ID\\n    /// @param addressToRemove The address removed from a white list\\n    function removeFromWhitelist(address addressToRemove)\\n        external\\n        onlyWhitelister\\n    {\\n        _removeFromWhitelist(addressToRemove);\\n    }\\n\\n    /// @dev Public function that sets the flag to indicate whether source white list is allowed to send to destination\\n    /// white list\\n    /// @param sourceWhitelist The white list of the sender\\n    /// @param destinationWhitelist The white list of the receiver\\n    /// @param newEnabledValue A boolean flag that enables token transfers between white lists\\n    function updateOutboundWhitelistEnabled(\\n        uint8 sourceWhitelist,\\n        uint8 destinationWhitelist,\\n        bool newEnabledValue\\n    ) external onlyWhitelister {\\n        _updateOutboundWhitelistEnabled(\\n            sourceWhitelist,\\n            destinationWhitelist,\\n            newEnabledValue\\n        );\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/RevocableToAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../roles/RevokerRole.sol\\\";\\n\\n/// @title RevocableToAddress Contract\\n/// @notice Only administrators can revoke tokens to an address\\n/// @dev Enables reducing a balance by transfering tokens to an address\\ncontract RevocableToAddress is ERC20Upgradeable, RevokerRole {\\n    event RevokeToAddress(\\n        address indexed revoker,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /// @notice Only administrators should be allowed to revoke on behalf of another account\\n    /// @dev Revoke a quantity of token in an account, reducing the balance\\n    /// @param from The account tokens will be deducted from\\n    /// @param to The account revoked token will be transferred to\\n    /// @param amount The number of tokens to remove from a balance\\n    function _revokeToAddress(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        ERC20Upgradeable._transfer(from, to, amount);\\n        emit RevokeToAddress(msg.sender, from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n    Allow Admins to revoke tokens from any address to any destination\\n    */\\n\\n    /// @notice Only administrators should be allowed to revoke on behalf of another account\\n    /// @dev Revoke a quantity of token in an account, reducing the balance\\n    /// @param from The account tokens will be deducted from\\n    /// @param amount The number of tokens to remove from a balance\\n    function revokeToAddress(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external onlyRevoker returns (bool) {\\n        return _revokeToAddress(from, to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Revocable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../roles/RevokerRole.sol\\\";\\n\\n/// @title Revocable Contract\\n/// @notice Only administrators can revoke tokens\\n/// @dev Enables reducing a balance by transfering tokens to the caller\\ncontract Revocable is ERC20Upgradeable, RevokerRole {\\n    event Revoke(address indexed revoker, address indexed from, uint256 amount);\\n\\n    /// @notice Only administrators should be allowed to revoke on behalf of another account\\n    /// @dev Revoke a quantity of token in an account, reducing the balance\\n    /// @param from The account tokens will be deducted from\\n    /// @param amount The number of tokens to remove from a balance\\n    function _revoke(address from, uint256 amount) internal returns (bool) {\\n        ERC20Upgradeable._transfer(from, msg.sender, amount);\\n        emit Revoke(msg.sender, from, amount);\\n        return true;\\n    }\\n\\n    /// @dev Allow Revokers to revoke tokens for addresses\\n    /// @param from The account tokens will be deducted from\\n    /// @param amount The number of tokens to remove from a balance\\n    function revoke(address from, uint256 amount)\\n        external\\n        onlyRevoker\\n        returns (bool)\\n    {\\n        return _revoke(from, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Proxiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Proxiable {\\n    // Code position in storage is keccak256(\\\"PROXIABLE\\\") = \\\"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\\\"\\n    uint256 constant PROXIABLE_MEM_SLOT =\\n        0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\\n\\n    event CodeAddressUpdated(address newAddress);\\n\\n    function _updateCodeAddress(address newAddress) internal {\\n        require(\\n            bytes32(PROXIABLE_MEM_SLOT) ==\\n                Proxiable(newAddress).proxiableUUID(),\\n            \\\"Not compatible\\\"\\n        );\\n        assembly {\\n            // solium-disable-line\\n            sstore(PROXIABLE_MEM_SLOT, newAddress)\\n        }\\n\\n        emit CodeAddressUpdated(newAddress);\\n    }\\n\\n    function getLogicAddress() external view returns (address logicAddress) {\\n        assembly {\\n            // solium-disable-line\\n            logicAddress := sload(PROXIABLE_MEM_SLOT)\\n        }\\n    }\\n\\n    function proxiableUUID() external pure returns (bytes32) {\\n        return bytes32(PROXIABLE_MEM_SLOT);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../roles/PauserRole.sol\\\";\\n\\n/// @title Pausable Contract\\n/// @notice Child contracts will not be pausable by simply including this module, but only once the modifiers are put in\\n/// place\\n/// @dev Contract module which allows children to implement an emergency stop mechanism that can be triggered by an\\n/// authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused`\\n/// and `whenPaused`, which can be applied to the functions of your contract.\\ncontract Pausable is PauserRole {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /// @dev Returns true if the contract is paused, and false otherwise.\\n    /// @return A boolean flag for if the contract is paused\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when the contract is not paused\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when the contract is paused\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Triggers stopped state\\n    function _pause() internal {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Resets to normal state\\n    function _unpause() internal {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /// @dev Public function triggers stopped state\\n    function pause() external onlyPauser whenNotPaused {\\n        Pausable._pause();\\n    }\\n\\n    /// @dev Public function resets to normal state.\\n    function unpause() external onlyPauser whenPaused {\\n        Pausable._unpause();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20FlashMintUpgradeable.sol\\\";\\n\\nimport \\\"../roles/MinterRole.sol\\\";\\n\\n/// @title Mintable Contract\\n/// @notice Only administrators can mint tokens\\n/// @dev Enables increasing a balance by minting tokens\\ncontract Mintable is\\n    ERC20FlashMintUpgradeable,\\n    MinterRole,\\n    ReentrancyGuardUpgradeable\\n{\\n    event Mint(address indexed minter, address indexed to, uint256 amount);\\n\\n    uint256 public flashMintFee = 0;\\n    address public flashMintFeeReceiver;\\n\\n    bool public isFlashMintEnabled = false;\\n\\n    bytes32 public constant _RETURN_VALUE =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /// @notice Only administrators should be allowed to mint on behalf of another account\\n    /// @dev Mint a quantity of token in an account, increasing the balance\\n    /// @param minter Designated to be allowed to mint account tokens\\n    /// @param to The account tokens will be increased to\\n    /// @param amount The number of tokens to add to a balance\\n    function _mint(\\n        address minter,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        ERC20Upgradeable._mint(to, amount);\\n        emit Mint(minter, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Enable or disable the flash mint functionality\\n    /// @param enabled A boolean flag that enables tokens to be flash minted\\n    function _setFlashMintEnabled(bool enabled) internal {\\n        isFlashMintEnabled = enabled;\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Sets the address that will receive fees of flash mints\\n    /// @param receiver The account that will receive flash mint fees\\n    function _setFlashMintFeeReceiver(address receiver) internal {\\n        flashMintFeeReceiver = receiver;\\n    }\\n\\n    /// @dev Allow Owners to mint tokens to valid addresses\\n    /// @param account The account tokens will be added to\\n    /// @param amount The number of tokens to add to a balance\\n    function mint(address account, uint256 amount)\\n        public\\n        virtual\\n        onlyMinter\\n        returns (bool)\\n    {\\n        return Mintable._mint(msg.sender, account, amount);\\n    }\\n\\n    /// @dev Public function to set the fee paid by the borrower for a flash mint\\n    /// @param fee The number of tokens that will cost to flash mint\\n    function setFlashMintFee(uint256 fee) external onlyMinter {\\n        flashMintFee = fee;\\n    }\\n\\n    /// @dev Public function to enable or disable the flash mint functionality\\n    /// @param enabled A boolean flag that enables tokens to be flash minted\\n    function setFlashMintEnabled(bool enabled) external onlyMinter {\\n        _setFlashMintEnabled(enabled);\\n    }\\n\\n    /// @dev Public function to update the receiver of the fee paid for a flash mint\\n    /// @param receiver The account that will receive flash mint fees\\n    function setFlashMintFeeReceiver(address receiver) external onlyMinter {\\n        _setFlashMintFeeReceiver(receiver);\\n    }\\n\\n    /// @dev Public function that returns the fee set for a flash mint\\n    /// @param token The token to be flash loaned\\n    /// @return The fees applied to the corresponding flash loan\\n    function flashFee(address token, uint256)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n\\n        return flashMintFee;\\n    }\\n\\n    /// @dev Performs a flash loan. New tokens are minted and sent to the\\n    /// `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n    /// interface. By the end of the flash loan, the receiver is expected to own\\n    /// amount + fee tokens so that the fee can be sent to the fee receiver and the\\n    /// amount minted should be burned before the transaction completes\\n    /// @param receiver The receiver of the flash loan. Should implement the\\n    /// {IERC3156FlashBorrower.onFlashLoan} interface\\n    /// @param token The token to be flash loaned. Only `address(this)` is\\n    /// supported\\n    /// @param amount The amount of tokens to be loaned\\n    /// @param data An arbitrary datafield that is passed to the receiver\\n    /// @return `true` if the flash loan was successful\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public override nonReentrant returns (bool) {\\n        require(isFlashMintEnabled, \\\"flash mint is disabled\\\");\\n\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\\n                _RETURN_VALUE,\\n            \\\"ERC20FlashMint: invalid return value\\\"\\n        );\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(\\n            currentAllowance >= amount + fee,\\n            \\\"ERC20FlashMint: allowance does not allow refund\\\"\\n        );\\n\\n        _transfer(address(receiver), flashMintFeeReceiver, fee);\\n        _approve(\\n            address(receiver),\\n            address(this),\\n            currentAllowance - amount - fee\\n        );\\n        _burn(address(receiver), amount);\\n\\n        return true;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../roles/BurnerRole.sol\\\";\\n\\n/// @title Burnable Contract\\n/// @notice Only administrators can burn tokens\\n/// @dev Enables reducing a balance by burning tokens\\ncontract Burnable is ERC20Upgradeable, BurnerRole {\\n    event Burn(address indexed burner, address indexed from, uint256 amount);\\n\\n    /// @notice Only administrators should be allowed to burn on behalf of another account\\n    /// @dev Burn a quantity of token in an account, reducing the balance\\n    /// @param burner Designated to be allowed to burn account tokens\\n    /// @param from The account tokens will be deducted from\\n    /// @param amount The number of tokens to remove from a balance\\n    function _burn(\\n        address burner,\\n        address from,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        ERC20Upgradeable._burn(from, amount);\\n        emit Burn(burner, from, amount);\\n        return true;\\n    }\\n\\n    /// @dev Allow Burners to burn tokens for addresses\\n    /// @param account The account tokens will be deducted from\\n    /// @param amount The number of tokens to remove from a balance\\n    function burn(address account, uint256 amount)\\n        external\\n        onlyBurner\\n        returns (bool)\\n    {\\n        return _burn(msg.sender, account, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/capabilities/Blacklistable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../roles/BlacklisterRole.sol\\\";\\n\\n/// @title Blacklistable Contract\\n/// @notice Only administrators can update the black list\\n/// @dev Keeps track of black lists and can check if sender and reciever are configured to allow a transfer\\ncontract Blacklistable is BlacklisterRole {\\n    // The mapping to keep track if an address is black listed\\n    mapping(address => bool) public addressBlacklists;\\n\\n    // Track whether Blacklisting is enabled\\n    bool public isBlacklistEnabled;\\n\\n    // Events to allow tracking add/remove.\\n    event AddressAddedToBlacklist(\\n        address indexed addedAddress,\\n        address indexed addedBy\\n    );\\n    event AddressRemovedFromBlacklist(\\n        address indexed removedAddress,\\n        address indexed removedBy\\n    );\\n    event BlacklistEnabledUpdated(\\n        address indexed updatedBy,\\n        bool indexed enabled\\n    );\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Enable or disable the black list enforcement\\n    /// @param enabled A boolean flag that enables token transfers to be black listed\\n    function _setBlacklistEnabled(bool enabled) internal {\\n        isBlacklistEnabled = enabled;\\n        emit BlacklistEnabledUpdated(msg.sender, enabled);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Sets an address's black listing status\\n    /// @param addressToAdd The address added to a black list\\n    function _addToBlacklist(address addressToAdd) internal {\\n        // Verify a valid address was passed in\\n        require(addressToAdd != address(0), \\\"Cannot add 0x0\\\");\\n\\n        // Verify the address is on the blacklist before it can be removed\\n        require(!addressBlacklists[addressToAdd], \\\"Already on list\\\");\\n\\n        // Set the address's white list ID\\n        addressBlacklists[addressToAdd] = true;\\n\\n        // Emit the event for new Blacklist\\n        emit AddressAddedToBlacklist(addressToAdd, msg.sender);\\n    }\\n\\n    /// @notice Only administrators should be allowed to update this\\n    /// @dev Clears out an address from the black list\\n    /// @param addressToRemove The address removed from a black list\\n    function _removeFromBlacklist(address addressToRemove) internal {\\n        // Verify a valid address was passed in\\n        require(addressToRemove != address(0), \\\"Cannot remove 0x0\\\");\\n\\n        // Verify the address is on the blacklist before it can be removed\\n        require(addressBlacklists[addressToRemove], \\\"Not on list\\\");\\n\\n        // Zero out the previous white list\\n        addressBlacklists[addressToRemove] = false;\\n\\n        // Emit the event for tracking\\n        emit AddressRemovedFromBlacklist(addressToRemove, msg.sender);\\n    }\\n\\n    /// @notice If either the sender or receiver is black listed, then the transfer should be denied\\n    /// @dev Determine if the a sender is allowed to send to the receiver\\n    /// @param sender The sender of a token transfer\\n    /// @param receiver The receiver of a token transfer\\n    function checkBlacklistAllowed(address sender, address receiver)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // If black list enforcement is not enabled, then allow all\\n        if (!isBlacklistEnabled) {\\n            return true;\\n        }\\n\\n        // If either address is on the black list then fail\\n        return !addressBlacklists[sender] && !addressBlacklists[receiver];\\n    }\\n\\n    /// @dev Public function that enables or disables the black list enforcement\\n    /// @param enabled A boolean flag that enables token transfers to be black listed\\n    function setBlacklistEnabled(bool enabled) external onlyOwner {\\n        _setBlacklistEnabled(enabled);\\n    }\\n\\n    /// @dev Public function that allows admins to remove an address from a black list\\n    /// @param addressToAdd The address added to a black list\\n    function addToBlacklist(address addressToAdd) external onlyBlacklister {\\n        _addToBlacklist(addressToAdd);\\n    }\\n\\n    /// @dev Public function that allows admins to remove an address from a black list\\n    /// @param addressToRemove The address removed from a black list\\n    function removeFromBlacklist(address addressToRemove)\\n        external\\n        onlyBlacklister\\n    {\\n        _removeFromBlacklist(addressToRemove);\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC1404.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ERC1404 {\\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\\n    /// @dev Overwrite with your custom transfer restriction logic\\n    /// @param from Sending address\\n    /// @param to Receiving address\\n    /// @param value Amount of tokens being transferred\\n    /// @return Code by which to reference message for rejection reasoning\\n    function detectTransferRestriction(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public view virtual returns (uint8);\\n\\n    /// @notice Returns a human-readable message for a given restriction code\\n    /// @dev Overwrite with your custom message and restrictionCode handling\\n    /// @param restrictionCode Identifier for looking up a message\\n    /// @return Text showing the restriction's reasoning\\n    function messageForTransferRestriction(uint8 restrictionCode)\\n        public\\n        view\\n        virtual\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20FlashMintUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20FlashMint.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../interfaces/IERC3156Upgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * Adds the {flashLoan} method, which provides flash loan support at the token\\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC20FlashMintUpgradeable is Initializable, ERC20Upgradeable, IERC3156FlashLenderUpgradeable {\\n    function __ERC20FlashMint_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20FlashMint_init_unchained();\\n    }\\n\\n    function __ERC20FlashMint_init_unchained() internal initializer {\\n    }\\n    bytes32 private constant _RETURN_VALUE = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /**\\n     * @dev Returns the maximum amount of tokens available for loan.\\n     * @param token The address of the token that is requested.\\n     * @return The amont of token that can be loaned.\\n     */\\n    function maxFlashLoan(address token) public view override returns (uint256) {\\n        return token == address(this) ? type(uint256).max - ERC20Upgradeable.totalSupply() : 0;\\n    }\\n\\n    /**\\n     * @dev Returns the fee applied when doing flash loans. By default this\\n     * implementation has 0 fees. This function can be overloaded to make\\n     * the flash loan mechanism deflationary.\\n     * @param token The token to be flash loaned.\\n     * @param amount The amount of tokens to be loaned.\\n     * @return The fees applied to the corresponding flash loan.\\n     */\\n    function flashFee(address token, uint256 amount) public view virtual override returns (uint256) {\\n        require(token == address(this), \\\"ERC20FlashMint: wrong token\\\");\\n        // silence warning about unused variable without the addition of bytecode.\\n        amount;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a flash loan. New tokens are minted and sent to the\\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\\n     * interface. By the end of the flash loan, the receiver is expected to own\\n     * amount + fee tokens and have them approved back to the token contract itself so\\n     * they can be burned.\\n     * @param receiver The receiver of the flash loan. Should implement the\\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\\n     * @param token The token to be flash loaned. Only `address(this)` is\\n     * supported.\\n     * @param amount The amount of tokens to be loaned.\\n     * @param data An arbitrary datafield that is passed to the receiver.\\n     * @return `true` is the flash loan was successful.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override returns (bool) {\\n        uint256 fee = flashFee(token, amount);\\n        _mint(address(receiver), amount);\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) == _RETURN_VALUE,\\n            \\\"ERC20FlashMint: invalid return value\\\"\\n        );\\n        uint256 currentAllowance = allowance(address(receiver), address(this));\\n        require(currentAllowance >= amount + fee, \\\"ERC20FlashMint: allowance does not allow refund\\\");\\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\\n        _burn(address(receiver), amount + fee);\\n        return true;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance =   _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC3156Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC3156.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrowerUpgradeable.sol\\\";\\nimport \\\"./IERC3156FlashLenderUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashLenderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrowerUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLenderUpgradeable {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrowerUpgradeable receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC3156FlashBorrowerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrowerUpgradeable {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"resFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"AddressAddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"whitelist\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"AddressAddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"whitelist\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBlacklister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"BlacklisterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBlacklister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"BlacklisterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBurner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBurner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CodeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"sourceWhitelist\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationWhitelist\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"from\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"to\",\"type\":\"bool\"}],\"name\":\"OutboundWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevokeToAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedRevoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"RevokerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedRevoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"RevokerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"WhitelistEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"WhitelisterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"WhitelisterRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FAILURE_BLACKLIST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAILURE_BLACKLIST_MESSAGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAILURE_NON_WHITELIST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAILURE_NON_WHITELIST_MESSAGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAILURE_PAUSED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAILURE_PAUSED_MESSAGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNKNOWN_ERROR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RETURN_VALUE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addRevoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToAdd\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToAdd\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"whitelist\",\"type\":\"uint8\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressBlacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressWhitelists\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"checkBlacklistAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"checkWhitelistAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrowerUpgradeable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMintFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"resFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flashMintEnabled\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlacklistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRevoker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outboundWhitelistsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeRevoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revokeToAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setFlashMintEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFlashMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setFlashMintFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCodeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"resFeed\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sourceWhitelist\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"destinationWhitelist\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"newEnabledValue\",\"type\":\"bool\"}],\"name\":\"updateOutboundWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedTokenV1","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000002465cefd3b488be410b941b1d4b2767088e2a028000000000000000000000000000000000000000000000000000000000000001543656c7369757358205772617070656420444f4745000000000000000000000000000000000000000000000000000000000000000000000000000000000000066378444f47450000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}