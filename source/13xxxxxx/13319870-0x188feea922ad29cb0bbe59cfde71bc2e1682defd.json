{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n// INTERFACE\r\ninterface IERC20Mintable {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool);\r\n\r\n    function mint(address _to, uint256 _value) external returns (bool);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// LIB\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n    /*\r\n     * Minimum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n    /*\r\n     * Maximum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x signed 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromInt(int256 x) internal pure returns (int128) {\r\n        require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n        return int128(x << 64);\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n     * rounding down.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64-bit integer number\r\n     */\r\n    function toInt(int128 x) internal pure returns (int64) {\r\n        return int64(x >> 64);\r\n    }\r\n\r\n    /**\r\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromUInt(uint256 x) internal pure returns (int128) {\r\n        require(x <= 0x7FFFFFFFFFFFFFFF);\r\n        return int128(x << 64);\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n     * number rounding down.  Revert on underflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return unsigned 64-bit integer number\r\n     */\r\n    function toUInt(int128 x) internal pure returns (uint64) {\r\n        require(x >= 0);\r\n        return uint64(x >> 64);\r\n    }\r\n\r\n    /**\r\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n     * number rounding down.  Revert on overflow.\r\n     *\r\n     * @param x signed 128.128-bin fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function from128x128(int256 x) internal pure returns (int128) {\r\n        int256 result = x >> 64;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n     * number.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 128.128 fixed point number\r\n     */\r\n    function to128x128(int128 x) internal pure returns (int256) {\r\n        return int256(x) << 64;\r\n    }\r\n\r\n    /**\r\n     * Calculate x + y.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function add(int128 x, int128 y) internal pure returns (int128) {\r\n        int256 result = int256(x) + y;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate x - y.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function sub(int128 x, int128 y) internal pure returns (int128) {\r\n        int256 result = int256(x) - y;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding down.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function mul(int128 x, int128 y) internal pure returns (int128) {\r\n        int256 result = (int256(x) * y) >> 64;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n     * number and y is signed 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64 fixed point number\r\n     * @param y signed 256-bit integer number\r\n     * @return signed 256-bit integer number\r\n     */\r\n    function muli(int128 x, int256 y) internal pure returns (int256) {\r\n        if (x == MIN_64x64) {\r\n            require(\r\n                y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n                    y <= 0x1000000000000000000000000000000000000000000000000\r\n            );\r\n            return -y << 63;\r\n        } else {\r\n            bool negativeResult = false;\r\n            if (x < 0) {\r\n                x = -x;\r\n                negativeResult = true;\r\n            }\r\n            if (y < 0) {\r\n                y = -y; // We rely on overflow behavior here\r\n                negativeResult = !negativeResult;\r\n            }\r\n            uint256 absoluteResult = mulu(x, uint256(y));\r\n            if (negativeResult) {\r\n                require(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n                return -int256(absoluteResult); // We rely on overflow behavior here\r\n            } else {\r\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n                return int256(absoluteResult);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64 fixed point number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return unsigned 256-bit integer number\r\n     */\r\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\r\n        if (y == 0) return 0;\r\n\r\n        require(x >= 0);\r\n\r\n        uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n        uint256 hi = uint256(x) * (y >> 128);\r\n\r\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        hi <<= 64;\r\n\r\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n        return hi + lo;\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n     * zero.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function div(int128 x, int128 y) internal pure returns (int128) {\r\n        require(y != 0);\r\n        int256 result = (int256(x) << 64) / y;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x signed 256-bit integer number\r\n     * @param y signed 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function divi(int256 x, int256 y) internal pure returns (int128) {\r\n        require(y != 0);\r\n\r\n        bool negativeResult = false;\r\n        if (x < 0) {\r\n            x = -x; // We rely on overflow behavior here\r\n            negativeResult = true;\r\n        }\r\n        if (y < 0) {\r\n            y = -y; // We rely on overflow behavior here\r\n            negativeResult = !negativeResult;\r\n        }\r\n        uint128 absoluteResult = divuu(uint256(x), uint256(y));\r\n        if (negativeResult) {\r\n            require(absoluteResult <= 0x80000000000000000000000000000000);\r\n            return -int128(absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return int128(absoluteResult); // We rely on overflow behavior here\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\r\n        require(y != 0);\r\n        uint128 result = divuu(x, y);\r\n        require(result <= uint128(MAX_64x64));\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate -x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function neg(int128 x) internal pure returns (int128) {\r\n        require(x != MIN_64x64);\r\n        return -x;\r\n    }\r\n\r\n    /**\r\n     * Calculate |x|.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function abs(int128 x) internal pure returns (int128) {\r\n        require(x != MIN_64x64);\r\n        return x < 0 ? -x : x;\r\n    }\r\n\r\n    /**\r\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n     * zero.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function inv(int128 x) internal pure returns (int128) {\r\n        require(x != 0);\r\n        int256 result = int256(0x100000000000000000000000000000000) / x;\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function avg(int128 x, int128 y) internal pure returns (int128) {\r\n        return int128((int256(x) + int256(y)) >> 1);\r\n    }\r\n\r\n    /**\r\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n     * Revert on overflow or in case x * y is negative.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\r\n        int256 m = int256(x) * int256(y);\r\n        require(m >= 0);\r\n        require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\r\n        return int128(sqrtu(uint256(m)));\r\n    }\r\n\r\n    /**\r\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y uint256 value\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\r\n        bool negative = x < 0 && y & 1 == 1;\r\n\r\n        uint256 absX = uint128(x < 0 ? -x : x);\r\n        uint256 absResult;\r\n        absResult = 0x100000000000000000000000000000000;\r\n\r\n        if (absX <= 0x10000000000000000) {\r\n            absX <<= 63;\r\n            while (y != 0) {\r\n                if (y & 0x1 != 0) {\r\n                    absResult = (absResult * absX) >> 127;\r\n                }\r\n                absX = (absX * absX) >> 127;\r\n\r\n                if (y & 0x2 != 0) {\r\n                    absResult = (absResult * absX) >> 127;\r\n                }\r\n                absX = (absX * absX) >> 127;\r\n\r\n                if (y & 0x4 != 0) {\r\n                    absResult = (absResult * absX) >> 127;\r\n                }\r\n                absX = (absX * absX) >> 127;\r\n\r\n                if (y & 0x8 != 0) {\r\n                    absResult = (absResult * absX) >> 127;\r\n                }\r\n                absX = (absX * absX) >> 127;\r\n\r\n                y >>= 4;\r\n            }\r\n\r\n            absResult >>= 64;\r\n        } else {\r\n            uint256 absXShift = 63;\r\n            if (absX < 0x1000000000000000000000000) {\r\n                absX <<= 32;\r\n                absXShift -= 32;\r\n            }\r\n            if (absX < 0x10000000000000000000000000000) {\r\n                absX <<= 16;\r\n                absXShift -= 16;\r\n            }\r\n            if (absX < 0x1000000000000000000000000000000) {\r\n                absX <<= 8;\r\n                absXShift -= 8;\r\n            }\r\n            if (absX < 0x10000000000000000000000000000000) {\r\n                absX <<= 4;\r\n                absXShift -= 4;\r\n            }\r\n            if (absX < 0x40000000000000000000000000000000) {\r\n                absX <<= 2;\r\n                absXShift -= 2;\r\n            }\r\n            if (absX < 0x80000000000000000000000000000000) {\r\n                absX <<= 1;\r\n                absXShift -= 1;\r\n            }\r\n\r\n            uint256 resultShift = 0;\r\n            while (y != 0) {\r\n                require(absXShift < 64);\r\n\r\n                if (y & 0x1 != 0) {\r\n                    absResult = (absResult * absX) >> 127;\r\n                    resultShift += absXShift;\r\n                    if (absResult > 0x100000000000000000000000000000000) {\r\n                        absResult >>= 1;\r\n                        resultShift += 1;\r\n                    }\r\n                }\r\n                absX = (absX * absX) >> 127;\r\n                absXShift <<= 1;\r\n                if (absX >= 0x100000000000000000000000000000000) {\r\n                    absX >>= 1;\r\n                    absXShift += 1;\r\n                }\r\n\r\n                y >>= 1;\r\n            }\r\n\r\n            require(resultShift < 64);\r\n            absResult >>= 64 - resultShift;\r\n        }\r\n        int256 result = negative ? -int256(absResult) : int256(absResult);\r\n        require(result >= MIN_64x64 && result <= MAX_64x64);\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function sqrt(int128 x) internal pure returns (int128) {\r\n        require(x >= 0);\r\n        return int128(sqrtu(uint256(x) << 64));\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function log_2(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n        if (xc >= 0x10000000000000000) {\r\n            xc >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (xc >= 0x100000000) {\r\n            xc >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (xc >= 0x10000) {\r\n            xc >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (xc >= 0x100) {\r\n            xc >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (xc >= 0x10) {\r\n            xc >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (xc >= 0x4) {\r\n            xc >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256(x) << uint256(127 - msb);\r\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate natural logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\r\n    }\r\n\r\n    /**\r\n     * Calculate binary exponent of x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function exp_2(int128 x) internal pure returns (int128) {\r\n        require(x < 0x400000000000000000); // Overflow\r\n\r\n        if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n        uint256 result = 0x80000000000000000000000000000000;\r\n\r\n        if (x & 0x8000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\r\n        if (x & 0x4000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\r\n        if (x & 0x2000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\r\n        if (x & 0x1000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\r\n        if (x & 0x800000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\r\n        if (x & 0x400000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\r\n        if (x & 0x200000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\r\n        if (x & 0x100000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\r\n        if (x & 0x80000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\r\n        if (x & 0x40000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\r\n        if (x & 0x20000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\r\n        if (x & 0x10000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\r\n        if (x & 0x8000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\r\n        if (x & 0x4000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\r\n        if (x & 0x2000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\r\n        if (x & 0x1000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\r\n        if (x & 0x800000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\r\n        if (x & 0x400000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\r\n        if (x & 0x200000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\r\n        if (x & 0x100000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\r\n        if (x & 0x80000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\r\n        if (x & 0x40000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\r\n        if (x & 0x20000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\r\n        if (x & 0x10000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\r\n        if (x & 0x8000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\r\n        if (x & 0x4000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\r\n        if (x & 0x2000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\r\n        if (x & 0x1000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\r\n        if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\r\n        if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\r\n        if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\r\n        if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\r\n        if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\r\n        if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\r\n        if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\r\n        if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\r\n        if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\r\n        if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\r\n        if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\r\n        if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\r\n        if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\r\n        if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\r\n        if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\r\n        if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\r\n        if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\r\n        if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\r\n        if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\r\n        if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\r\n        if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\r\n        if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\r\n        if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\r\n        if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\r\n        if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\r\n        if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\r\n        if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\r\n        if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\r\n        if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\r\n        if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\r\n        if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\r\n        if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\r\n        if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\r\n        if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\r\n        if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\r\n        if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\r\n\r\n        result >>= uint256(63 - (x >> 64));\r\n        require(result <= uint256(MAX_64x64));\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate natural exponent of x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function exp(int128 x) internal pure returns (int128) {\r\n        require(x < 0x400000000000000000); // Overflow\r\n\r\n        if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n        return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return unsigned 64.64-bit fixed point number\r\n     */\r\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\r\n        require(y != 0);\r\n\r\n        uint256 result;\r\n\r\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\r\n        else {\r\n            uint256 msb = 192;\r\n            uint256 xc = x >> 192;\r\n            if (xc >= 0x100000000) {\r\n                xc >>= 32;\r\n                msb += 32;\r\n            }\r\n            if (xc >= 0x10000) {\r\n                xc >>= 16;\r\n                msb += 16;\r\n            }\r\n            if (xc >= 0x100) {\r\n                xc >>= 8;\r\n                msb += 8;\r\n            }\r\n            if (xc >= 0x10) {\r\n                xc >>= 4;\r\n                msb += 4;\r\n            }\r\n            if (xc >= 0x4) {\r\n                xc >>= 2;\r\n                msb += 2;\r\n            }\r\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n            result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\r\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n            uint256 hi = result * (y >> 128);\r\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n            uint256 xh = x >> 192;\r\n            uint256 xl = x << 64;\r\n\r\n            if (xl < lo) xh -= 1;\r\n            xl -= lo; // We rely on overflow behavior here\r\n            lo = hi << 128;\r\n            if (xl < lo) xh -= 1;\r\n            xl -= lo; // We rely on overflow behavior here\r\n\r\n            assert(xh == hi >> 128);\r\n\r\n            result += xl / y;\r\n        }\r\n\r\n        require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return uint128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n     * number.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return unsigned 128-bit integer number\r\n     */\r\n    function sqrtu(uint256 x) private pure returns (uint128) {\r\n        if (x == 0) return 0;\r\n        else {\r\n            uint256 xx = x;\r\n            uint256 r = 1;\r\n            if (xx >= 0x100000000000000000000000000000000) {\r\n                xx >>= 128;\r\n                r <<= 64;\r\n            }\r\n            if (xx >= 0x10000000000000000) {\r\n                xx >>= 64;\r\n                r <<= 32;\r\n            }\r\n            if (xx >= 0x100000000) {\r\n                xx >>= 32;\r\n                r <<= 16;\r\n            }\r\n            if (xx >= 0x10000) {\r\n                xx >>= 16;\r\n                r <<= 8;\r\n            }\r\n            if (xx >= 0x100) {\r\n                xx >>= 8;\r\n                r <<= 4;\r\n            }\r\n            if (xx >= 0x10) {\r\n                xx >>= 4;\r\n                r <<= 2;\r\n            }\r\n            if (xx >= 0x8) {\r\n                r <<= 1;\r\n            }\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1;\r\n            r = (r + x / r) >> 1; // Seven iterations should be enough\r\n            uint256 r1 = x / r;\r\n            return uint128(r < r1 ? r : r1);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with IEEE 754\r\n * quadruple-precision binary floating-point numbers (quadruple precision\r\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\r\n * represented by bytes16 type.\r\n */\r\nlibrary ABDKMathQuad {\r\n    /*\r\n     * 0.\r\n     */\r\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\r\n\r\n    /*\r\n     * -0.\r\n     */\r\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\r\n\r\n    /*\r\n     * +Infinity.\r\n     */\r\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\r\n\r\n    /*\r\n     * -Infinity.\r\n     */\r\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\r\n\r\n    /*\r\n     * Canonical NaN value.\r\n     */\r\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\r\n\r\n    /**\r\n     * Convert signed 256-bit integer number into quadruple precision number.\r\n     *\r\n     * @param x signed 256-bit integer number\r\n     * @return quadruple precision number\r\n     */\r\n    function fromInt(int256 x) internal pure returns (bytes16) {\r\n        if (x == 0) return bytes16(0);\r\n        else {\r\n            // We rely on overflow behavior here\r\n            uint256 result = uint256(x > 0 ? x : -x);\r\n\r\n            uint256 msb = msb(result);\r\n            if (msb < 112) result <<= 112 - msb;\r\n            else if (msb > 112) result >>= msb - 112;\r\n\r\n            result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\r\n            if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n            return bytes16(uint128(result));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into signed 256-bit integer number\r\n     * rounding towards zero.  Revert on overflow.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return signed 256-bit integer number\r\n     */\r\n    function toInt(bytes16 x) internal pure returns (int256) {\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n\r\n        require(exponent <= 16638); // Overflow\r\n        if (exponent < 16383) return 0; // Underflow\r\n\r\n        uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\r\n\r\n        if (exponent < 16495) result >>= 16495 - exponent;\r\n        else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n        if (uint128(x) >= 0x80000000000000000000000000000000) {\r\n            // Negative\r\n            require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n            return -int256(result); // We rely on overflow behavior here\r\n        } else {\r\n            require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return int256(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert unsigned 256-bit integer number into quadruple precision number.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return quadruple precision number\r\n     */\r\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\r\n        if (x == 0) return bytes16(0);\r\n        else {\r\n            uint256 result = x;\r\n\r\n            uint256 msb = msb(result);\r\n            if (msb < 112) result <<= 112 - msb;\r\n            else if (msb > 112) result >>= msb - 112;\r\n\r\n            result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16383 + msb) << 112);\r\n\r\n            return bytes16(uint128(result));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into unsigned 256-bit integer number\r\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\r\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\r\n     * without error, because they are rounded to zero.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return unsigned 256-bit integer number\r\n     */\r\n    function toUInt(bytes16 x) internal pure returns (uint256) {\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n\r\n        if (exponent < 16383) return 0; // Underflow\r\n\r\n        require(uint128(x) < 0x80000000000000000000000000000000); // Negative\r\n\r\n        require(exponent <= 16638); // Overflow\r\n        uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\r\n\r\n        if (exponent < 16495) result >>= 16495 - exponent;\r\n        else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert signed 128.128 bit fixed point number into quadruple precision\r\n     * number.\r\n     *\r\n     * @param x signed 128.128 bit fixed point number\r\n     * @return quadruple precision number\r\n     */\r\n    function from128x128(int256 x) internal pure returns (bytes16) {\r\n        if (x == 0) return bytes16(0);\r\n        else {\r\n            // We rely on overflow behavior here\r\n            uint256 result = uint256(x > 0 ? x : -x);\r\n\r\n            uint256 msb = msb(result);\r\n            if (msb < 112) result <<= 112 - msb;\r\n            else if (msb > 112) result >>= msb - 112;\r\n\r\n            result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16255 + msb) << 112);\r\n            if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n            return bytes16(uint128(result));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into signed 128.128 bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return signed 128.128 bit fixed point number\r\n     */\r\n    function to128x128(bytes16 x) internal pure returns (int256) {\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n\r\n        require(exponent <= 16510); // Overflow\r\n        if (exponent < 16255) return 0; // Underflow\r\n\r\n        uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\r\n\r\n        if (exponent < 16367) result >>= 16367 - exponent;\r\n        else if (exponent > 16367) result <<= exponent - 16367;\r\n\r\n        if (uint128(x) >= 0x80000000000000000000000000000000) {\r\n            // Negative\r\n            require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n            return -int256(result); // We rely on overflow behavior here\r\n        } else {\r\n            require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return int256(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 bit fixed point number into quadruple precision\r\n     * number.\r\n     *\r\n     * @param x signed 64.64 bit fixed point number\r\n     * @return quadruple precision number\r\n     */\r\n    function from64x64(int128 x) internal pure returns (bytes16) {\r\n        if (x == 0) return bytes16(0);\r\n        else {\r\n            // We rely on overflow behavior here\r\n            uint256 result = uint128(x > 0 ? x : -x);\r\n\r\n            uint256 msb = msb(result);\r\n            if (msb < 112) result <<= 112 - msb;\r\n            else if (msb > 112) result >>= msb - 112;\r\n\r\n            result = (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | ((16319 + msb) << 112);\r\n            if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n            return bytes16(uint128(result));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into signed 64.64 bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return signed 64.64 bit fixed point number\r\n     */\r\n    function to64x64(bytes16 x) internal pure returns (int128) {\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n\r\n        require(exponent <= 16446); // Overflow\r\n        if (exponent < 16319) return 0; // Underflow\r\n\r\n        uint256 result = (uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | 0x10000000000000000000000000000;\r\n\r\n        if (exponent < 16431) result >>= 16431 - exponent;\r\n        else if (exponent > 16431) result <<= exponent - 16431;\r\n\r\n        if (uint128(x) >= 0x80000000000000000000000000000000) {\r\n            // Negative\r\n            require(result <= 0x80000000000000000000000000000000);\r\n            return -int128(result); // We rely on overflow behavior here\r\n        } else {\r\n            require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert octuple precision number into quadruple precision number.\r\n     *\r\n     * @param x octuple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\r\n        bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\r\n\r\n        uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\r\n        uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        if (exponent == 0x7FFFF) {\r\n            if (significand > 0) return NaN;\r\n            else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n        }\r\n\r\n        if (exponent > 278526) return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n        else if (exponent < 245649) return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n        else if (exponent < 245761) {\r\n            significand =\r\n                (significand | 0x100000000000000000000000000000000000000000000000000000000000) >>\r\n                (245885 - exponent);\r\n            exponent = 0;\r\n        } else {\r\n            significand >>= 124;\r\n            exponent -= 245760;\r\n        }\r\n\r\n        uint128 result = uint128(significand | (exponent << 112));\r\n        if (negative) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16(result);\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into octuple precision number.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return octuple precision number\r\n     */\r\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n\r\n        uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        if (exponent == 0x7FFF)\r\n            exponent = 0x7FFFF; // Infinity or NaN\r\n        else if (exponent == 0) {\r\n            if (result > 0) {\r\n                uint256 msb = msb(result);\r\n                result = (result << (236 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                exponent = 245649 + msb;\r\n            }\r\n        } else {\r\n            result <<= 124;\r\n            exponent += 245760;\r\n        }\r\n\r\n        result |= exponent << 236;\r\n        if (uint128(x) >= 0x80000000000000000000000000000000)\r\n            result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n        return bytes32(result);\r\n    }\r\n\r\n    /**\r\n     * Convert double precision number into quadruple precision number.\r\n     *\r\n     * @param x double precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\r\n        uint256 exponent = (uint64(x) >> 52) & 0x7FF;\r\n\r\n        uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\r\n\r\n        if (exponent == 0x7FF)\r\n            exponent = 0x7FFF; // Infinity or NaN\r\n        else if (exponent == 0) {\r\n            if (result > 0) {\r\n                uint256 msb = msb(result);\r\n                result = (result << (112 - msb)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                exponent = 15309 + msb;\r\n            }\r\n        } else {\r\n            result <<= 60;\r\n            exponent += 15360;\r\n        }\r\n\r\n        result |= exponent << 112;\r\n        if (x & 0x8000000000000000 > 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16(uint128(result));\r\n    }\r\n\r\n    /**\r\n     * Convert quadruple precision number into double precision number.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return double precision number\r\n     */\r\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\r\n        bool negative = uint128(x) >= 0x80000000000000000000000000000000;\r\n\r\n        uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\r\n        uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        if (exponent == 0x7FFF) {\r\n            if (significand > 0) return 0x7FF8000000000000;\r\n            // NaN\r\n            else\r\n                return\r\n                    negative\r\n                        ? bytes8(0xFFF0000000000000) // -Infinity\r\n                        : bytes8(0x7FF0000000000000); // Infinity\r\n        }\r\n\r\n        if (exponent > 17406)\r\n            return\r\n                negative\r\n                    ? bytes8(0xFFF0000000000000) // -Infinity\r\n                    : bytes8(0x7FF0000000000000);\r\n        // Infinity\r\n        else if (exponent < 15309)\r\n            return\r\n                negative\r\n                    ? bytes8(0x8000000000000000) // -0\r\n                    : bytes8(0x0000000000000000);\r\n        // 0\r\n        else if (exponent < 15361) {\r\n            significand = (significand | 0x10000000000000000000000000000) >> (15421 - exponent);\r\n            exponent = 0;\r\n        } else {\r\n            significand >>= 60;\r\n            exponent -= 15360;\r\n        }\r\n\r\n        uint64 result = uint64(significand | (exponent << 52));\r\n        if (negative) result |= 0x8000000000000000;\r\n\r\n        return bytes8(result);\r\n    }\r\n\r\n    /**\r\n     * Test whether given quadruple precision number is NaN.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return true if x is NaN, false otherwise\r\n     */\r\n    function isNaN(bytes16 x) internal pure returns (bool) {\r\n        return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\r\n    }\r\n\r\n    /**\r\n     * Test whether given quadruple precision number is positive or negative\r\n     * infinity.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return true if x is positive or negative infinity, false otherwise\r\n     */\r\n    function isInfinity(bytes16 x) internal pure returns (bool) {\r\n        return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\r\n    }\r\n\r\n    /**\r\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\r\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return sign of x\r\n     */\r\n    function sign(bytes16 x) internal pure returns (int8) {\r\n        uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n        if (absoluteX == 0) return 0;\r\n        else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\r\n        else return 1;\r\n    }\r\n\r\n    /**\r\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\r\n     * arguments are infinities of the same sign.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return sign (x - y)\r\n     */\r\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\r\n        uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n        uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n        // Not infinities of the same sign\r\n        require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\r\n\r\n        if (x == y) return 0;\r\n        else {\r\n            bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\r\n            bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\r\n\r\n            if (negativeX) {\r\n                if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\r\n                else return -1;\r\n            } else {\r\n                if (negativeY) return 1;\r\n                else return absoluteX > absoluteY ? int8(1) : -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\r\n     * anything.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return true if x equals to y, false otherwise\r\n     */\r\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\r\n        if (x == y) {\r\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\r\n        } else return false;\r\n    }\r\n\r\n    /**\r\n     * Calculate x + y.  Special values behave in the following way:\r\n     *\r\n     * NaN + x = NaN for any x.\r\n     * Infinity + x = Infinity for any finite x.\r\n     * -Infinity + x = -Infinity for any finite x.\r\n     * Infinity + Infinity = Infinity.\r\n     * -Infinity + -Infinity = -Infinity.\r\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n        uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n        uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\r\n\r\n        if (xExponent == 0x7FFF) {\r\n            if (yExponent == 0x7FFF) {\r\n                if (x == y) return x;\r\n                else return NaN;\r\n            } else return x;\r\n        } else if (yExponent == 0x7FFF) return y;\r\n        else {\r\n            bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\r\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (xExponent == 0) xExponent = 1;\r\n            else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n            bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\r\n            uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (yExponent == 0) yExponent = 1;\r\n            else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n            if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\r\n            else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\r\n            else {\r\n                int256 delta = int256(xExponent) - int256(yExponent);\r\n\r\n                if (xSign == ySign) {\r\n                    if (delta > 112) return x;\r\n                    else if (delta > 0) ySignifier >>= uint256(delta);\r\n                    else if (delta < -112) return y;\r\n                    else if (delta < 0) {\r\n                        xSignifier >>= uint256(-delta);\r\n                        xExponent = yExponent;\r\n                    }\r\n\r\n                    xSignifier += ySignifier;\r\n\r\n                    if (xSignifier >= 0x20000000000000000000000000000) {\r\n                        xSignifier >>= 1;\r\n                        xExponent += 1;\r\n                    }\r\n\r\n                    if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n                    else {\r\n                        if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\r\n                        else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n                        return\r\n                            bytes16(\r\n                                uint128(\r\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\r\n                                )\r\n                            );\r\n                    }\r\n                } else {\r\n                    if (delta > 0) {\r\n                        xSignifier <<= 1;\r\n                        xExponent -= 1;\r\n                    } else if (delta < 0) {\r\n                        ySignifier <<= 1;\r\n                        xExponent = yExponent - 1;\r\n                    }\r\n\r\n                    if (delta > 112) ySignifier = 1;\r\n                    else if (delta > 1) ySignifier = ((ySignifier - 1) >> uint256(delta - 1)) + 1;\r\n                    else if (delta < -112) xSignifier = 1;\r\n                    else if (delta < -1) xSignifier = ((xSignifier - 1) >> uint256(-delta - 1)) + 1;\r\n\r\n                    if (xSignifier >= ySignifier) xSignifier -= ySignifier;\r\n                    else {\r\n                        xSignifier = ySignifier - xSignifier;\r\n                        xSign = ySign;\r\n                    }\r\n\r\n                    if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n                    uint256 msb = msb(xSignifier);\r\n\r\n                    if (msb == 113) {\r\n                        xSignifier = (xSignifier >> 1) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                        xExponent += 1;\r\n                    } else if (msb < 112) {\r\n                        uint256 shift = 112 - msb;\r\n                        if (xExponent > shift) {\r\n                            xSignifier = (xSignifier << shift) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                            xExponent -= shift;\r\n                        } else {\r\n                            xSignifier <<= xExponent - 1;\r\n                            xExponent = 0;\r\n                        }\r\n                    } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n                    if (xExponent == 0x7FFF) return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n                    else\r\n                        return\r\n                            bytes16(\r\n                                uint128(\r\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\r\n                                )\r\n                            );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x - y.  Special values behave in the following way:\r\n     *\r\n     * NaN - x = NaN for any x.\r\n     * Infinity - x = Infinity for any finite x.\r\n     * -Infinity - x = -Infinity for any finite x.\r\n     * Infinity - -Infinity = Infinity.\r\n     * -Infinity - Infinity = -Infinity.\r\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n        return add(x, y ^ 0x80000000000000000000000000000000);\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y.  Special values behave in the following way:\r\n     *\r\n     * NaN * x = NaN for any x.\r\n     * Infinity * x = Infinity for any finite positive x.\r\n     * Infinity * x = -Infinity for any finite negative x.\r\n     * -Infinity * x = -Infinity for any finite positive x.\r\n     * -Infinity * x = Infinity for any finite negative x.\r\n     * Infinity * 0 = NaN.\r\n     * -Infinity * 0 = NaN.\r\n     * Infinity * Infinity = Infinity.\r\n     * Infinity * -Infinity = -Infinity.\r\n     * -Infinity * Infinity = -Infinity.\r\n     * -Infinity * -Infinity = Infinity.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n        uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n        uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\r\n\r\n        if (xExponent == 0x7FFF) {\r\n            if (yExponent == 0x7FFF) {\r\n                if (x == y) return x ^ (y & 0x80000000000000000000000000000000);\r\n                else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\r\n                else return NaN;\r\n            } else {\r\n                if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n                else return x ^ (y & 0x80000000000000000000000000000000);\r\n            }\r\n        } else if (yExponent == 0x7FFF) {\r\n            if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n            else return y ^ (x & 0x80000000000000000000000000000000);\r\n        } else {\r\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (xExponent == 0) xExponent = 1;\r\n            else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n            uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (yExponent == 0) yExponent = 1;\r\n            else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n            xSignifier *= ySignifier;\r\n            if (xSignifier == 0)\r\n                return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n            xExponent += yExponent;\r\n\r\n            uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\r\n                ? 225\r\n                : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\r\n                ? 224\r\n                : msb(xSignifier);\r\n\r\n            if (xExponent + msb < 16496) {\r\n                // Underflow\r\n                xExponent = 0;\r\n                xSignifier = 0;\r\n            } else if (xExponent + msb < 16608) {\r\n                // Subnormal\r\n                if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\r\n                else if (xExponent > 16496) xSignifier <<= xExponent - 16496;\r\n                xExponent = 0;\r\n            } else if (xExponent + msb > 49373) {\r\n                xExponent = 0x7FFF;\r\n                xSignifier = 0;\r\n            } else {\r\n                if (msb > 112) xSignifier >>= msb - 112;\r\n                else if (msb < 112) xSignifier <<= 112 - msb;\r\n\r\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n                xExponent = xExponent + msb - 16607;\r\n            }\r\n\r\n            return\r\n                bytes16(\r\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y.  Special values behave in the following way:\r\n     *\r\n     * NaN / x = NaN for any x.\r\n     * x / NaN = NaN for any x.\r\n     * Infinity / x = Infinity for any finite non-negative x.\r\n     * Infinity / x = -Infinity for any finite negative x including -0.\r\n     * -Infinity / x = -Infinity for any finite non-negative x.\r\n     * -Infinity / x = Infinity for any finite negative x including -0.\r\n     * x / Infinity = 0 for any finite non-negative x.\r\n     * x / -Infinity = -0 for any finite non-negative x.\r\n     * x / Infinity = -0 for any finite non-negative x including -0.\r\n     * x / -Infinity = 0 for any finite non-negative x including -0.\r\n     *\r\n     * Infinity / Infinity = NaN.\r\n     * Infinity / -Infinity = -NaN.\r\n     * -Infinity / Infinity = -NaN.\r\n     * -Infinity / -Infinity = NaN.\r\n     *\r\n     * Division by zero behaves in the following way:\r\n     *\r\n     * x / 0 = Infinity for any finite positive x.\r\n     * x / -0 = -Infinity for any finite positive x.\r\n     * x / 0 = -Infinity for any finite negative x.\r\n     * x / -0 = Infinity for any finite negative x.\r\n     * 0 / 0 = NaN.\r\n     * 0 / -0 = NaN.\r\n     * -0 / 0 = NaN.\r\n     * -0 / -0 = NaN.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @param y quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n        uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n        uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\r\n\r\n        if (xExponent == 0x7FFF) {\r\n            if (yExponent == 0x7FFF) return NaN;\r\n            else return x ^ (y & 0x80000000000000000000000000000000);\r\n        } else if (yExponent == 0x7FFF) {\r\n            if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\r\n            else return POSITIVE_ZERO | ((x ^ y) & 0x80000000000000000000000000000000);\r\n        } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\r\n            if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n            else return POSITIVE_INFINITY | ((x ^ y) & 0x80000000000000000000000000000000);\r\n        } else {\r\n            uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (yExponent == 0) yExponent = 1;\r\n            else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (xExponent == 0) {\r\n                if (xSignifier != 0) {\r\n                    uint256 shift = 226 - msb(xSignifier);\r\n\r\n                    xSignifier <<= shift;\r\n\r\n                    xExponent = 1;\r\n                    yExponent += shift - 114;\r\n                }\r\n            } else {\r\n                xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\r\n            }\r\n\r\n            xSignifier = xSignifier / ySignifier;\r\n            if (xSignifier == 0)\r\n                return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n            assert(xSignifier >= 0x1000000000000000000000000000);\r\n\r\n            uint256 msb = xSignifier >= 0x80000000000000000000000000000\r\n                ? msb(xSignifier)\r\n                : xSignifier >= 0x40000000000000000000000000000\r\n                ? 114\r\n                : xSignifier >= 0x20000000000000000000000000000\r\n                ? 113\r\n                : 112;\r\n\r\n            if (xExponent + msb > yExponent + 16497) {\r\n                // Overflow\r\n                xExponent = 0x7FFF;\r\n                xSignifier = 0;\r\n            } else if (xExponent + msb + 16380 < yExponent) {\r\n                // Underflow\r\n                xExponent = 0;\r\n                xSignifier = 0;\r\n            } else if (xExponent + msb + 16268 < yExponent) {\r\n                // Subnormal\r\n                if (xExponent + 16380 > yExponent) xSignifier <<= xExponent + 16380 - yExponent;\r\n                else if (xExponent + 16380 < yExponent) xSignifier >>= yExponent - xExponent - 16380;\r\n\r\n                xExponent = 0;\r\n            } else {\r\n                // Normal\r\n                if (msb > 112) xSignifier >>= msb - 112;\r\n\r\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n                xExponent = xExponent + msb + 16269 - yExponent;\r\n            }\r\n\r\n            return\r\n                bytes16(\r\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | (xExponent << 112) | xSignifier)\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate -x.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function neg(bytes16 x) internal pure returns (bytes16) {\r\n        return x ^ 0x80000000000000000000000000000000;\r\n    }\r\n\r\n    /**\r\n     * Calculate |x|.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function abs(bytes16 x) internal pure returns (bytes16) {\r\n        return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    }\r\n\r\n    /**\r\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\r\n        if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\r\n        else {\r\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n            if (xExponent == 0x7FFF) return x;\r\n            else {\r\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                if (xExponent == 0) xExponent = 1;\r\n                else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n                if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n                bool oddExponent = xExponent & 0x1 == 0;\r\n                xExponent = (xExponent + 16383) >> 1;\r\n\r\n                if (oddExponent) {\r\n                    if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 113;\r\n                    else {\r\n                        uint256 msb = msb(xSignifier);\r\n                        uint256 shift = (226 - msb) & 0xFE;\r\n                        xSignifier <<= shift;\r\n                        xExponent -= (shift - 112) >> 1;\r\n                    }\r\n                } else {\r\n                    if (xSignifier >= 0x10000000000000000000000000000) xSignifier <<= 112;\r\n                    else {\r\n                        uint256 msb = msb(xSignifier);\r\n                        uint256 shift = (225 - msb) & 0xFE;\r\n                        xSignifier <<= shift;\r\n                        xExponent -= (shift - 112) >> 1;\r\n                    }\r\n                }\r\n\r\n                uint256 r = 0x10000000000000000000000000000;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1;\r\n                r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\r\n                uint256 r1 = xSignifier / r;\r\n                if (r1 < r) r = r1;\r\n\r\n                return bytes16(uint128((xExponent << 112) | (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function log_2(bytes16 x) internal pure returns (bytes16) {\r\n        if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\r\n        else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO;\r\n        else {\r\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n            if (xExponent == 0x7FFF) return x;\r\n            else {\r\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                if (xExponent == 0) xExponent = 1;\r\n                else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n                if (xSignifier == 0) return NEGATIVE_INFINITY;\r\n\r\n                bool resultNegative;\r\n                uint256 resultExponent = 16495;\r\n                uint256 resultSignifier;\r\n\r\n                if (xExponent >= 0x3FFF) {\r\n                    resultNegative = false;\r\n                    resultSignifier = xExponent - 0x3FFF;\r\n                    xSignifier <<= 15;\r\n                } else {\r\n                    resultNegative = true;\r\n                    if (xSignifier >= 0x10000000000000000000000000000) {\r\n                        resultSignifier = 0x3FFE - xExponent;\r\n                        xSignifier <<= 15;\r\n                    } else {\r\n                        uint256 msb = msb(xSignifier);\r\n                        resultSignifier = 16493 - msb;\r\n                        xSignifier <<= 127 - msb;\r\n                    }\r\n                }\r\n\r\n                if (xSignifier == 0x80000000000000000000000000000000) {\r\n                    if (resultNegative) resultSignifier += 1;\r\n                    uint256 shift = 112 - msb(resultSignifier);\r\n                    resultSignifier <<= shift;\r\n                    resultExponent -= shift;\r\n                } else {\r\n                    uint256 bb = resultNegative ? 1 : 0;\r\n                    while (resultSignifier < 0x10000000000000000000000000000) {\r\n                        resultSignifier <<= 1;\r\n                        resultExponent -= 1;\r\n\r\n                        xSignifier *= xSignifier;\r\n                        uint256 b = xSignifier >> 255;\r\n                        resultSignifier += b ^ bb;\r\n                        xSignifier >>= 127 + b;\r\n                    }\r\n                }\r\n\r\n                return\r\n                    bytes16(\r\n                        uint128(\r\n                            (resultNegative ? 0x80000000000000000000000000000000 : 0) |\r\n                                (resultExponent << 112) |\r\n                                (resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                        )\r\n                    );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function ln(bytes16 x) internal pure returns (bytes16) {\r\n        return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\r\n    }\r\n\r\n    /**\r\n     * Calculate 2^x.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\r\n        bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\r\n        uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\r\n        uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\r\n        else if (xExponent > 16397) return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\r\n        else if (xExponent < 16255) return 0x3FFF0000000000000000000000000000;\r\n        else {\r\n            if (xExponent == 0) xExponent = 1;\r\n            else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n            if (xExponent > 16367) xSignifier <<= xExponent - 16367;\r\n            else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\r\n\r\n            if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) return POSITIVE_ZERO;\r\n\r\n            if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return POSITIVE_INFINITY;\r\n\r\n            uint256 resultExponent = xSignifier >> 128;\r\n            xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (xNegative && xSignifier != 0) {\r\n                xSignifier = ~xSignifier;\r\n                resultExponent += 1;\r\n            }\r\n\r\n            uint256 resultSignifier = 0x80000000000000000000000000000000;\r\n            if (xSignifier & 0x80000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\r\n            if (xSignifier & 0x40000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\r\n            if (xSignifier & 0x20000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\r\n            if (xSignifier & 0x10000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\r\n            if (xSignifier & 0x8000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\r\n            if (xSignifier & 0x4000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\r\n            if (xSignifier & 0x2000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\r\n            if (xSignifier & 0x1000000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\r\n            if (xSignifier & 0x800000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\r\n            if (xSignifier & 0x400000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\r\n            if (xSignifier & 0x200000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\r\n            if (xSignifier & 0x100000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\r\n            if (xSignifier & 0x80000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\r\n            if (xSignifier & 0x40000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\r\n            if (xSignifier & 0x20000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000162E525EE054754457D5995292026) >> 128;\r\n            if (xSignifier & 0x10000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\r\n            if (xSignifier & 0x8000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\r\n            if (xSignifier & 0x4000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\r\n            if (xSignifier & 0x2000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\r\n            if (xSignifier & 0x1000000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\r\n            if (xSignifier & 0x800000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\r\n            if (xSignifier & 0x400000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\r\n            if (xSignifier & 0x200000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\r\n            if (xSignifier & 0x100000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\r\n            if (xSignifier & 0x80000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\r\n            if (xSignifier & 0x40000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\r\n            if (xSignifier & 0x20000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\r\n            if (xSignifier & 0x10000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\r\n            if (xSignifier & 0x8000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\r\n            if (xSignifier & 0x4000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\r\n            if (xSignifier & 0x2000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\r\n            if (xSignifier & 0x1000000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\r\n            if (xSignifier & 0x800000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\r\n            if (xSignifier & 0x400000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\r\n            if (xSignifier & 0x200000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\r\n            if (xSignifier & 0x100000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\r\n            if (xSignifier & 0x80000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\r\n            if (xSignifier & 0x40000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\r\n            if (xSignifier & 0x20000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\r\n            if (xSignifier & 0x10000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\r\n            if (xSignifier & 0x8000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\r\n            if (xSignifier & 0x4000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000002C5C85FDF477B662B26945) >> 128;\r\n            if (xSignifier & 0x2000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000162E42FEFA3AE53369388C) >> 128;\r\n            if (xSignifier & 0x1000000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000B17217F7D1D351A389D40) >> 128;\r\n            if (xSignifier & 0x800000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\r\n            if (xSignifier & 0x400000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\r\n            if (xSignifier & 0x200000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000162E42FEFA39FE95583C2) >> 128;\r\n            if (xSignifier & 0x100000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\r\n            if (xSignifier & 0x80000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\r\n            if (xSignifier & 0x40000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000002C5C85FDF473E242EA38) >> 128;\r\n            if (xSignifier & 0x20000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000162E42FEFA39F02B772C) >> 128;\r\n            if (xSignifier & 0x10000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\r\n            if (xSignifier & 0x8000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\r\n            if (xSignifier & 0x4000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000002C5C85FDF473DEA871F) >> 128;\r\n            if (xSignifier & 0x2000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000162E42FEFA39EF44D91) >> 128;\r\n            if (xSignifier & 0x1000000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000B17217F7D1CF79E949) >> 128;\r\n            if (xSignifier & 0x800000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\r\n            if (xSignifier & 0x400000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\r\n            if (xSignifier & 0x200000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000162E42FEFA39EF366F) >> 128;\r\n            if (xSignifier & 0x100000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\r\n            if (xSignifier & 0x80000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\r\n            if (xSignifier & 0x40000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\r\n            if (xSignifier & 0x20000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000162E42FEFA39EF358) >> 128;\r\n            if (xSignifier & 0x10000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000B17217F7D1CF79AB) >> 128;\r\n            if (xSignifier & 0x8000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5) >> 128;\r\n            if (xSignifier & 0x4000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000002C5C85FDF473DE6A) >> 128;\r\n            if (xSignifier & 0x2000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000162E42FEFA39EF34) >> 128;\r\n            if (xSignifier & 0x1000000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000B17217F7D1CF799) >> 128;\r\n            if (xSignifier & 0x800000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000058B90BFBE8E7BCC) >> 128;\r\n            if (xSignifier & 0x400000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000002C5C85FDF473DE5) >> 128;\r\n            if (xSignifier & 0x200000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000162E42FEFA39EF2) >> 128;\r\n            if (xSignifier & 0x100000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000B17217F7D1CF78) >> 128;\r\n            if (xSignifier & 0x80000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000058B90BFBE8E7BB) >> 128;\r\n            if (xSignifier & 0x40000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000002C5C85FDF473DD) >> 128;\r\n            if (xSignifier & 0x20000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000162E42FEFA39EE) >> 128;\r\n            if (xSignifier & 0x10000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000B17217F7D1CF6) >> 128;\r\n            if (xSignifier & 0x8000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000058B90BFBE8E7A) >> 128;\r\n            if (xSignifier & 0x4000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000002C5C85FDF473C) >> 128;\r\n            if (xSignifier & 0x2000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000162E42FEFA39D) >> 128;\r\n            if (xSignifier & 0x1000000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000B17217F7D1CE) >> 128;\r\n            if (xSignifier & 0x800000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000058B90BFBE8E6) >> 128;\r\n            if (xSignifier & 0x400000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000002C5C85FDF472) >> 128;\r\n            if (xSignifier & 0x200000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000162E42FEFA38) >> 128;\r\n            if (xSignifier & 0x100000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000B17217F7D1B) >> 128;\r\n            if (xSignifier & 0x80000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000058B90BFBE8D) >> 128;\r\n            if (xSignifier & 0x40000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000002C5C85FDF46) >> 128;\r\n            if (xSignifier & 0x20000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000162E42FEFA2) >> 128;\r\n            if (xSignifier & 0x10000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000B17217F7D0) >> 128;\r\n            if (xSignifier & 0x8000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000058B90BFBE7) >> 128;\r\n            if (xSignifier & 0x4000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000002C5C85FDF3) >> 128;\r\n            if (xSignifier & 0x2000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000162E42FEF9) >> 128;\r\n            if (xSignifier & 0x1000000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000B17217F7C) >> 128;\r\n            if (xSignifier & 0x800000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000058B90BFBD) >> 128;\r\n            if (xSignifier & 0x400000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000002C5C85FDE) >> 128;\r\n            if (xSignifier & 0x200000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000162E42FEE) >> 128;\r\n            if (xSignifier & 0x100000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000B17217F6) >> 128;\r\n            if (xSignifier & 0x80000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000058B90BFA) >> 128;\r\n            if (xSignifier & 0x40000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000002C5C85FC) >> 128;\r\n            if (xSignifier & 0x20000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000162E42FD) >> 128;\r\n            if (xSignifier & 0x10000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000B17217E) >> 128;\r\n            if (xSignifier & 0x8000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000058B90BE) >> 128;\r\n            if (xSignifier & 0x4000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000002C5C85E) >> 128;\r\n            if (xSignifier & 0x2000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000162E42E) >> 128;\r\n            if (xSignifier & 0x1000000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000B17216) >> 128;\r\n            if (xSignifier & 0x800000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000058B90A) >> 128;\r\n            if (xSignifier & 0x400000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000002C5C84) >> 128;\r\n            if (xSignifier & 0x200000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000162E41) >> 128;\r\n            if (xSignifier & 0x100000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000000B1720) >> 128;\r\n            if (xSignifier & 0x80000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000058B8F) >> 128;\r\n            if (xSignifier & 0x40000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000002C5C7) >> 128;\r\n            if (xSignifier & 0x20000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000000162E3) >> 128;\r\n            if (xSignifier & 0x10000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000000B171) >> 128;\r\n            if (xSignifier & 0x8000 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000000058B8) >> 128;\r\n            if (xSignifier & 0x4000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000002C5B) >> 128;\r\n            if (xSignifier & 0x2000 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000000162D) >> 128;\r\n            if (xSignifier & 0x1000 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000000B16) >> 128;\r\n            if (xSignifier & 0x800 > 0)\r\n                resultSignifier = (resultSignifier * 0x10000000000000000000000000000058A) >> 128;\r\n            if (xSignifier & 0x400 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000000002C4) >> 128;\r\n            if (xSignifier & 0x200 > 0)\r\n                resultSignifier = (resultSignifier * 0x100000000000000000000000000000161) >> 128;\r\n            if (xSignifier & 0x100 > 0)\r\n                resultSignifier = (resultSignifier * 0x1000000000000000000000000000000B0) >> 128;\r\n            if (xSignifier & 0x80 > 0) resultSignifier = (resultSignifier * 0x100000000000000000000000000000057) >> 128;\r\n            if (xSignifier & 0x40 > 0) resultSignifier = (resultSignifier * 0x10000000000000000000000000000002B) >> 128;\r\n            if (xSignifier & 0x20 > 0) resultSignifier = (resultSignifier * 0x100000000000000000000000000000015) >> 128;\r\n            if (xSignifier & 0x10 > 0) resultSignifier = (resultSignifier * 0x10000000000000000000000000000000A) >> 128;\r\n            if (xSignifier & 0x8 > 0) resultSignifier = (resultSignifier * 0x100000000000000000000000000000004) >> 128;\r\n            if (xSignifier & 0x4 > 0) resultSignifier = (resultSignifier * 0x100000000000000000000000000000001) >> 128;\r\n\r\n            if (!xNegative) {\r\n                resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                resultExponent += 0x3FFF;\r\n            } else if (resultExponent <= 0x3FFE) {\r\n                resultSignifier = (resultSignifier >> 15) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                resultExponent = 0x3FFF - resultExponent;\r\n            } else {\r\n                resultSignifier = resultSignifier >> (resultExponent - 16367);\r\n                resultExponent = 0;\r\n            }\r\n\r\n            return bytes16(uint128((resultExponent << 112) | resultSignifier));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate e^x.\r\n     *\r\n     * @param x quadruple precision number\r\n     * @return quadruple precision number\r\n     */\r\n    function exp(bytes16 x) internal pure returns (bytes16) {\r\n        return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\r\n    }\r\n\r\n    /**\r\n     * Get index of the most significant non-zero bit in binary representation of\r\n     * x.  Reverts if x is zero.\r\n     *\r\n     * @return index of the most significant non-zero bit in binary representation\r\n     *         of x\r\n     */\r\n    function msb(uint256 x) private pure returns (uint256) {\r\n        require(x > 0);\r\n\r\n        uint256 result = 0;\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            result += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            result += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            result += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            result += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            result += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            result += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            result += 2;\r\n        }\r\n        if (x >= 0x2) result += 1; // No need to shift x anymore\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// CONTRACTS\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract Sacrifice {\r\n    constructor(address payable _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMathERC20 {\r\n    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ncontract StakingV2 is Ownable, ReentrancyGuard {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Emitted when a user deposits tokens.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     * @param amount The amount of deposited tokens.\r\n     * @param currentBalance Current user balance.\r\n     * @param timestamp Operation date\r\n     */\r\n    event Deposited(\r\n        address indexed sender,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 currentBalance,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a user withdraws tokens.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     * @param totalWithdrawalAmount The total amount of withdrawn tokens.\r\n     * @param currentBalance Balance before withdrawal\r\n     * @param timestamp Operation date\r\n     */\r\n    event WithdrawnAll(\r\n        address indexed sender,\r\n        uint256 indexed id,\r\n        uint256 totalWithdrawalAmount,\r\n        uint256 currentBalance,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a user extends lockup.\r\n     * @param sender User address.\r\n     * @param id User's unique deposit ID.\r\n     * @param currentBalance Balance before lockup extension\r\n     * @param finalBalance Final balance\r\n     * @param timestamp The instant when the lockup is extended.\r\n     */\r\n    event ExtendedLockup(\r\n        address indexed sender,\r\n        uint256 indexed id,\r\n        uint256 currentBalance,\r\n        uint256 finalBalance,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a new Liquidity Provider address value is set.\r\n     * @param value A new address value.\r\n     * @param sender The owner address at the moment of address changing.\r\n     */\r\n    event LiquidityProviderAddressSet(address value, address sender);\r\n\r\n    struct AddressParam {\r\n        address oldValue;\r\n        address newValue;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // The deposit user balaces\r\n    mapping(address => mapping(uint256 => uint256)) public balances;\r\n    // The dates of users deposits/withdraws/extendLockups\r\n    mapping(address => mapping(uint256 => uint256)) public depositDates;\r\n\r\n    // The total staked amount\r\n    uint256 public totalStaked;\r\n\r\n    // Variable that prevents _deposit method from being called 2 times TODO CHECK\r\n    bool private locked;\r\n\r\n    // Variable to pause all operations\r\n    bool private contractPaused = false;\r\n\r\n    bool private pausedDepositsAndLockupExtensions = false;\r\n\r\n    // STAKE token\r\n    IERC20Mintable public token;\r\n    // Reward Token\r\n    IERC20Mintable public tokenReward;\r\n\r\n    // The address for the Liquidity Providers\r\n    AddressParam public liquidityProviderAddressParam;\r\n\r\n    uint256 private constant DAY = 1 days;\r\n    uint256 private constant MONTH = 30 days;\r\n    uint256 private constant YEAR = 365 days;\r\n\r\n    // The period after which the new value of the parameter is set\r\n    uint256 public constant PARAM_UPDATE_DELAY = 7 days;\r\n\r\n    // MODIFIERS\r\n\r\n    /*\r\n     *      1   |     2    |     3    |     4    |     5\r\n     * 0 Months | 3 Months | 6 Months | 9 Months | 12 Months\r\n     */\r\n    modifier validDepositId(uint256 _depositId) {\r\n        require(_depositId >= 1 && _depositId <= 5, \"Invalid depositId\");\r\n        _;\r\n    }\r\n\r\n    // Impossible to withdrawAll if you have never deposited.\r\n    modifier balanceExists(uint256 _depositId) {\r\n        require(balances[msg.sender][_depositId] > 0, \"Your deposit is zero\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotLocked() {\r\n        require(locked == false, \"Locked, try again later\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotPaused() {\r\n        require(contractPaused == false, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotPausedOperations() {\r\n        require(contractPaused == false, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotPausedDepositAndLockupExtensions() {\r\n        require(pausedDepositsAndLockupExtensions == false, \"Paused Deposits and Extensions\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Pause Deposits, Withdraw, Lockup Extension\r\n     */\r\n    function pauseContract(bool value) public onlyOwner {\r\n        contractPaused = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Pause Deposits and Lockup Extension\r\n     */\r\n    function pauseDepositAndLockupExtensions(bool value) public onlyOwner {\r\n        pausedDepositsAndLockupExtensions = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract. _tokenAddress _tokenReward will have the same address\r\n     * @param _owner The owner of the contract.\r\n     * @param _tokenAddress The address of the STAKE token contract.\r\n     * @param _tokenReward The address of token rewards.\r\n     * @param _liquidityProviderAddress The address for the Liquidity Providers reward.\r\n     */\r\n    function initializeStaking(\r\n        address _owner,\r\n        address _tokenAddress,\r\n        address _tokenReward,\r\n        address _liquidityProviderAddress\r\n    ) external initializer {\r\n        require(_owner != address(0), \"Zero address\");\r\n        require(_tokenAddress.isContract(), \"Not a contract address\");\r\n        Ownable.initialize(msg.sender);\r\n        ReentrancyGuard.initialize();\r\n        token = IERC20Mintable(_tokenAddress);\r\n        tokenReward = IERC20Mintable(_tokenReward);\r\n        setLiquidityProviderAddress(_liquidityProviderAddress);\r\n        Ownable.transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address for the Liquidity Providers reward.\r\n     * Can only be called by owner.\r\n     * @param _address The new address.\r\n     */\r\n    function setLiquidityProviderAddress(address _address) public onlyOwner {\r\n        require(_address != address(0), \"Zero address\");\r\n        require(_address != address(this), \"Wrong address\");\r\n        AddressParam memory param = liquidityProviderAddressParam;\r\n        if (param.timestamp == 0) {\r\n            param.oldValue = _address;\r\n        } else if (_paramUpdateDelayElapsed(param.timestamp)) {\r\n            param.oldValue = param.newValue;\r\n        }\r\n        param.newValue = _address;\r\n        param.timestamp = _now();\r\n        liquidityProviderAddressParam = param;\r\n        emit LiquidityProviderAddressSet(_address, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return Returns true if param update delay elapsed.\r\n     */\r\n    function _paramUpdateDelayElapsed(uint256 _paramTimestamp) internal view returns (bool) {\r\n        return _now() > _paramTimestamp.add(PARAM_UPDATE_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to deposit tokens to the deposit opened before.\r\n     * It calls the internal \"_deposit\" method and transfers tokens from sender to contract.\r\n     * Sender must approve tokens first.\r\n     *\r\n     * Instead this, user can use the simple \"transferFrom\" method of OVR token contract to make a deposit.\r\n     *\r\n     * @param _depositId User's unique deposit ID.\r\n     * @param _amount The amount to deposit.\r\n     */\r\n    function deposit(uint256 _depositId, uint256 _amount)\r\n        public\r\n        validDepositId(_depositId)\r\n        isNotLocked\r\n        isNotPaused\r\n        isNotPausedDepositAndLockupExtensions\r\n    {\r\n        require(_amount > 0, \"Amount should be more than 0\");\r\n\r\n        _deposit(msg.sender, _depositId, _amount);\r\n\r\n        _setLocked(true);\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n        _setLocked(false);\r\n    }\r\n\r\n    /**\r\n     * @param _sender The address of the sender.\r\n     * @param _depositId User's deposit ID.\r\n     * @param _amount The amount to deposit.\r\n     */\r\n    function _deposit(\r\n        address _sender,\r\n        uint256 _depositId,\r\n        uint256 _amount\r\n    ) internal nonReentrant {\r\n        uint256 currentBalance = getCurrentBalance(_depositId, _sender);\r\n        uint256 finalBalance = calcRewards(_sender, _depositId);\r\n        uint256 timestamp = _now();\r\n\r\n        totalStaked = totalStaked.add(finalBalance).sub(currentBalance);\r\n        balances[_sender][_depositId] = _amount.add(finalBalance);\r\n        depositDates[_sender][_depositId] = _now();\r\n        emit Deposited(_sender, _depositId, _amount, currentBalance, timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to withdraw rewards and balance.\r\n     * It calls the internal \"_withdrawAll\" method.\r\n     * @param _depositId User's unique deposit ID\r\n     */\r\n    function withdrawAll(uint256 _depositId) external balanceExists(_depositId) validDepositId(_depositId) isNotPaused {\r\n        require(isLockupPeriodExpired(_depositId), \"Too early, Lockup period\");\r\n        _withdrawAll(msg.sender, _depositId);\r\n    }\r\n\r\n    function _withdrawAll(address _sender, uint256 _depositId)\r\n        internal\r\n        balanceExists(_depositId)\r\n        validDepositId(_depositId)\r\n        nonReentrant\r\n    {\r\n        uint256 currentBalance = getCurrentBalance(_depositId, _sender);\r\n        uint256 finalBalance = calcRewards(_sender, _depositId);\r\n\r\n        require(finalBalance > 0, \"Nothing to withdraw\");\r\n        balances[_sender][_depositId] = 0;\r\n\r\n        _setLocked(true);\r\n        require(\r\n            tokenReward.transferFrom(liquidityProviderAddress(), _sender, finalBalance),\r\n            \"Liquidity pool transfer failed\"\r\n        );\r\n        _setLocked(false);\r\n\r\n        emit WithdrawnAll(_sender, _depositId, finalBalance, currentBalance, _now());\r\n    }\r\n\r\n    /**\r\n     * This method is used to extend lockup. It is available if your lockup period is expired and if depositId != 1\r\n     * It calls the internal \"_extendLockup\" method.\r\n     * @param _depositId User's unique deposit ID\r\n     */\r\n    function extendLockup(uint256 _depositId)\r\n        external\r\n        balanceExists(_depositId)\r\n        validDepositId(_depositId)\r\n        isNotPaused\r\n        isNotPausedDepositAndLockupExtensions\r\n    {\r\n        require(_depositId != 1, \"No lockup is set up\");\r\n        _extendLockup(msg.sender, _depositId);\r\n    }\r\n\r\n    function _extendLockup(address _sender, uint256 _depositId) internal nonReentrant {\r\n        uint256 timestamp = _now();\r\n        uint256 currentBalance = getCurrentBalance(_depositId, _sender);\r\n        uint256 finalBalance = calcRewards(_sender, _depositId);\r\n\r\n\t\ttotalStaked = totalStaked.add(finalBalance).sub(currentBalance);\r\n        balances[_sender][_depositId] = finalBalance;\r\n        depositDates[_sender][_depositId] = timestamp;\r\n        emit ExtendedLockup(_sender, _depositId, currentBalance, finalBalance, timestamp);\r\n    }\r\n\r\n    function isLockupPeriodExpired(uint256 _depositId) public view validDepositId(_depositId) returns (bool) {\r\n        uint256 lockPeriod;\r\n\r\n        if (_depositId == 1) {\r\n            lockPeriod = 0;\r\n        } else if (_depositId == 2) {\r\n            lockPeriod = MONTH * 3; // 3 months\r\n        } else if (_depositId == 3) {\r\n            lockPeriod = MONTH * 6; // 6 months\r\n        } else if (_depositId == 4) {\r\n            lockPeriod = MONTH * 9; // 9 months\r\n        } else if (_depositId == 5) {\r\n            lockPeriod = MONTH * 12; // 12 months\r\n        }\r\n\r\n        if (_now() > depositDates[msg.sender][_depositId].add(lockPeriod)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function pow(int128 _x, uint256 _n) public pure returns (int128 r) {\r\n        r = ABDKMath64x64.fromUInt(1);\r\n        while (_n > 0) {\r\n            if (_n % 2 == 1) {\r\n                r = ABDKMath64x64.mul(r, _x);\r\n                _n -= 1;\r\n            } else {\r\n                _x = ABDKMath64x64.mul(_x, _x);\r\n                _n /= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is calcuate final compouded capital.\r\n     * @param _principal User's balance\r\n     * @param _ratio Interest rate\r\n     * @param _n Periods is timestamp\r\n     * @return finalBalance The final compounded capital\r\n     *\r\n     * A = C ( 1 + rate )^t\r\n     */\r\n    function compound(\r\n        uint256 _principal,\r\n        uint256 _ratio,\r\n        uint256 _n\r\n    ) public view returns (uint256) {\r\n        uint256 daysCount = _n.div(DAY);\r\n\r\n        return\r\n            ABDKMath64x64.mulu(\r\n                pow(ABDKMath64x64.add(ABDKMath64x64.fromUInt(1), ABDKMath64x64.divu(_ratio, 10**18)), daysCount),\r\n                _principal\r\n            );\r\n    }\r\n\r\n    /**\r\n     * This moethod is used to calculate final compounded balance and is based on deposit duration and deposit id.\r\n     * Each deposit mode is characterized by the lockup period and interest rate.\r\n     * At the expiration of the lockup period the final compounded capital\r\n     * will use minimum interest rate.\r\n     *\r\n     * This function can be called at any time to get the current total reward.\r\n     * @param _sender Sender Address.\r\n     * @param _depositId The depositId\r\n     * @return finalBalance The final compounded capital\r\n     */\r\n    function calcRewards(address _sender, uint256 _depositId) public view validDepositId(_depositId) returns (uint256) {\r\n        uint256 timePassed = _now().sub(depositDates[_sender][_depositId]);\r\n        uint256 currentBalance = getCurrentBalance(_depositId, _sender);\r\n        uint256 finalBalance;\r\n\r\n        uint256 ratio;\r\n        uint256 lockPeriod;\r\n\r\n        if (_depositId == 1) {\r\n            ratio = 100000000000000; // APY 3.7% InterestRate = 0.01\r\n            lockPeriod = 0;\r\n        } else if (_depositId == 2) {\r\n            ratio = 300000000000000; // APY 11.6% InterestRate = 0.03\r\n            lockPeriod = MONTH * 3; // 3 months\r\n        } else if (_depositId == 3) {\r\n            ratio = 400000000000000; // APY 15.7% InterestRate = 0.04\r\n            lockPeriod = MONTH * 6; // 6 months\r\n        } else if (_depositId == 4) {\r\n            ratio = 600000000000000; // APY 25.5% InterestRate = 0.06\r\n            lockPeriod = MONTH * 9; // 9 months\r\n        } else if (_depositId == 5) {\r\n            ratio = 800000000000000; // APY 33.9% InterestRate = 0.08\r\n            lockPeriod = YEAR; // 12 months\r\n        }\r\n\r\n        // You can't have earnings without balance\r\n        if (currentBalance == 0) {\r\n            return finalBalance = 0;\r\n        }\r\n\r\n        // No lockup\r\n        if (_depositId == 1) {\r\n            finalBalance = compound(currentBalance, ratio, timePassed);\r\n\r\n            return finalBalance;\r\n        }\r\n\r\n        // If you have an uncovered period from lockup, you still get rewards at the minimum rate\r\n        if (timePassed > lockPeriod) {\r\n            uint256 rewardsWithLockup = compound(currentBalance, ratio, lockPeriod).sub(currentBalance);\r\n            finalBalance = compound(rewardsWithLockup.add(currentBalance), 100000000000000, timePassed.sub(lockPeriod));\r\n\r\n\r\n\r\n            return finalBalance;\r\n        }\r\n\r\n        finalBalance = compound(currentBalance, ratio, timePassed);\r\n        return finalBalance;\r\n    }\r\n\r\n    function getCurrentBalance(uint256 _depositId, address _address) public view returns (uint256 addressBalance) {\r\n        addressBalance = balances[_address][_depositId];\r\n    }\r\n\r\n    /**\r\n     * @return Returns current liquidity providers reward address.\r\n     */\r\n    function liquidityProviderAddress() public view returns (address) {\r\n        AddressParam memory param = liquidityProviderAddressParam;\r\n        return param.newValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets lock to prevent reentrance.\r\n     */\r\n    function _setLocked(bool _locked) internal {\r\n        locked = _locked;\r\n    }\r\n\r\n    function senderCurrentBalance() public view returns (uint256) {\r\n        return msg.sender.balance;\r\n    }\r\n\r\n    /**\r\n     * @return Returns current timestamp.\r\n     */\r\n    function _now() internal view returns (uint256) {\r\n        // Note that the timestamp can have a 900-second error:\r\n        // https://github.com/ethereum/wiki/blob/c02254611f218f43cbb07517ca8e5d00fd6d6d75/Block-Protocol-2.0.md\r\n        // return now; // solium-disable-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to claim unsupported tokens accidentally sent to the contract.\r\n     * It can only be called by the owner.\r\n     * @param _token The address of the token contract (zero address for claiming native coins).\r\n     * @param _to The address of the tokens/coins receiver.\r\n     * @param _amount Amount to claim.\r\n     */\r\n    function claimTokens(\r\n        address _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(_to != address(0) && _to != address(this), \"not a valid recipient\");\r\n        require(_amount > 0, \"amount should be greater than 0\");\r\n        if (_token == address(0)) {\r\n            if (!_to.send(_amount)) {\r\n                // solium-disable-line security/no-send\r\n                (new Sacrifice).value(_amount)(_to);\r\n            }\r\n        } else if (_token == address(token)) {\r\n            uint256 availableAmount = token.balanceOf(address(this)).sub(totalStaked);\r\n            require(availableAmount >= _amount, \"insufficient funds\");\r\n            require(token.transfer(_to, _amount), \"transfer failed\");\r\n        } else {\r\n            IERC20 customToken = IERC20(_token);\r\n            customToken.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExtendedLockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityProviderAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWithdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawnAll\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARAM_UPDATE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calcRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"extendLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"addressBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityProviderAddress\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"isLockupPeriodExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityProviderAddressParam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"pauseDepositAndLockupExtensions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_x\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"r\",\"type\":\"int128\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"senderCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityProviderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://054a0e78ad817e6d3ba2d44baab65e298793e0653205e787e1ae727d0b7973b4"}]}