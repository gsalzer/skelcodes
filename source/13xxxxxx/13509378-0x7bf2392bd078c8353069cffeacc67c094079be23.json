{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/ProxyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableInternal} from \\\"@solidstate/contracts/access/OwnableInternal.sol\\\";\\n\\nimport {IProxyManager} from \\\"./IProxyManager.sol\\\";\\nimport {ProxyManagerStorage} from \\\"./ProxyManagerStorage.sol\\\";\\nimport {PoolProxy} from \\\"../pool/PoolProxy.sol\\\";\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\nimport {IPoolView} from \\\"../pool/IPoolView.sol\\\";\\nimport {IPremiaMining} from \\\"../mining/IPremiaMining.sol\\\";\\n\\n/**\\n * @title Options pair management contract\\n * @dev deployed standalone and connected to Premia as diamond facet\\n */\\ncontract ProxyManager is IProxyManager, OwnableInternal {\\n    using ProxyManagerStorage for ProxyManagerStorage.Layout;\\n\\n    address private immutable DIAMOND;\\n\\n    // 64x64 fixed point representation of 1e\\n    int128 private constant INITIAL_C_LEVEL_64x64 = 0x2b7e151628aed2a6b;\\n    // 64x64 fixed point representation of 0.5\\n    int128 private constant INITIAL_STEEPNESS_64x64 = 0x8000000000000000;\\n\\n    event DeployPool(\\n        address indexed base,\\n        address indexed underlying,\\n        int128 indexed initialCLevel64x64,\\n        address baseOracle,\\n        address underlyingOracle,\\n        address pool\\n    );\\n\\n    constructor(address diamond) {\\n        DIAMOND = diamond;\\n    }\\n\\n    /**\\n     * @notice get address of Pool contract for given assets\\n     * @param base base token\\n     * @param underlying underlying token\\n     * @return pool address (zero address if pool does not exist)\\n     */\\n    function getPool(address base, address underlying)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return ProxyManagerStorage.layout().getPool(base, underlying);\\n    }\\n\\n    /**\\n     * @notice get address list of all Pool contracts\\n     * @return list of pool addresses\\n     */\\n    function getPoolList() external view override returns (address[] memory) {\\n        return ProxyManagerStorage.layout().poolList;\\n    }\\n\\n    /**\\n     * @notice deploy PoolProxy contracts for the pair\\n     * @param base base token\\n     * @param underlying underlying token\\n     * @param baseOracle Chainlink price aggregator for base\\n     * @param underlyingOracle Chainlink price aggregator for underlying\\n     * @param baseMinimum64x64 64x64 fixed point representation of minimum base currency amount\\n     * @param underlyingMinimum64x64 64x64 fixed point representation of minimum underlying currency amount\\n     * @param basePoolCap64x64 64x64 fixed point representation of pool-wide base currency deposit cap\\n     * @param underlyingPoolCap64x64 64x64 fixed point representation of pool-wide underlying currency deposit cap\\n     * @param miningAllocPoints alloc points attributed per pool (call and put) for liquidity mining\\n     * @return deployment address\\n     */\\n    function deployPool(\\n        address base,\\n        address underlying,\\n        address baseOracle,\\n        address underlyingOracle,\\n        int128 baseMinimum64x64,\\n        int128 underlyingMinimum64x64,\\n        int128 basePoolCap64x64,\\n        int128 underlyingPoolCap64x64,\\n        uint256 miningAllocPoints\\n    ) external onlyOwner returns (address) {\\n        ProxyManagerStorage.Layout storage l = ProxyManagerStorage.layout();\\n\\n        require(\\n            l.getPool(base, underlying) == address(0),\\n            \\\"ProxyManager: Pool already exists\\\"\\n        );\\n\\n        address pool = address(\\n            new PoolProxy(\\n                DIAMOND,\\n                base,\\n                underlying,\\n                baseOracle,\\n                underlyingOracle,\\n                baseMinimum64x64,\\n                underlyingMinimum64x64,\\n                basePoolCap64x64,\\n                underlyingPoolCap64x64,\\n                INITIAL_C_LEVEL_64x64,\\n                INITIAL_STEEPNESS_64x64\\n            )\\n        );\\n        l.setPool(base, underlying, underlyingOracle);\\n\\n        l.poolList.push(pool);\\n\\n        IPremiaMining(IPoolView(DIAMOND).getPremiaMining()).addPool(\\n            pool,\\n            miningAllocPoints\\n        );\\n\\n        emit DeployPool(\\n            base,\\n            underlying,\\n            INITIAL_C_LEVEL_64x64,\\n            baseOracle,\\n            underlyingOracle,\\n            pool\\n        );\\n\\n        return pool;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/IProxyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyManager {\\r\\n    function getPoolList() external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/ProxyManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ProxyManagerStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"premia.contracts.storage.ProxyManager\\\");\\n\\n    struct Layout {\\n        // base => underlying => Pool\\n        mapping(address => mapping(address => address)) pools;\\n        address[] poolList;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function getPool(\\n        Layout storage l,\\n        address base,\\n        address underlying\\n    ) internal view returns (address) {\\n        return l.pools[base][underlying];\\n    }\\n\\n    function setPool(\\n        Layout storage l,\\n        address base,\\n        address underlying,\\n        address pool\\n    ) internal {\\n        l.pools[base][underlying] = pool;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableStorage} from \\\"@solidstate/contracts/access/OwnableStorage.sol\\\";\\nimport {ERC165Storage} from \\\"@solidstate/contracts/introspection/ERC165Storage.sol\\\";\\nimport {Proxy} from \\\"@solidstate/contracts/proxy/Proxy.sol\\\";\\nimport {IDiamondLoupe} from \\\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\\\";\\nimport {IERC20Metadata} from \\\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\\\";\\nimport {IERC1155} from \\\"@solidstate/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@solidstate/contracts/introspection/IERC165.sol\\\";\\n\\nimport {IProxyManager} from \\\"../core/IProxyManager.sol\\\";\\nimport {PoolStorage} from \\\"./PoolStorage.sol\\\";\\nimport {ABDKMath64x64Token} from \\\"../libraries/ABDKMath64x64Token.sol\\\";\\n\\n/**\\n * @title Upgradeable proxy with centrally controlled Pool implementation\\n */\\ncontract PoolProxy is Proxy {\\n    using PoolStorage for PoolStorage.Layout;\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    address private immutable DIAMOND;\\n\\n    constructor(\\n        address diamond,\\n        address base,\\n        address underlying,\\n        address baseOracle,\\n        address underlyingOracle,\\n        int128 baseMinimum64x64,\\n        int128 underlyingMinimum64x64,\\n        int128 basePoolCap64x64,\\n        int128 underlyingPoolCap64x64,\\n        int128 initialCLevel64x64,\\n        int128 initialSteepness64x64\\n    ) {\\n        DIAMOND = diamond;\\n        OwnableStorage.layout().owner = msg.sender;\\n\\n        {\\n            PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n            l.base = base;\\n            l.underlying = underlying;\\n\\n            l.setOracles(baseOracle, underlyingOracle);\\n\\n            uint8 baseDecimals = IERC20Metadata(base).decimals();\\n            uint8 underlyingDecimals = IERC20Metadata(underlying).decimals();\\n\\n            l.baseDecimals = baseDecimals;\\n            l.underlyingDecimals = underlyingDecimals;\\n\\n            l.baseMinimum = ABDKMath64x64Token.toDecimals(\\n                baseMinimum64x64,\\n                baseDecimals\\n            );\\n\\n            l.underlyingMinimum = ABDKMath64x64Token.toDecimals(\\n                underlyingMinimum64x64,\\n                underlyingDecimals\\n            );\\n\\n            l.basePoolCap = ABDKMath64x64Token.toDecimals(\\n                basePoolCap64x64,\\n                baseDecimals\\n            );\\n\\n            l.underlyingPoolCap = ABDKMath64x64Token.toDecimals(\\n                underlyingPoolCap64x64,\\n                underlyingDecimals\\n            );\\n\\n            l.steepness64x64 = initialSteepness64x64;\\n            l.cLevelBase64x64 = initialCLevel64x64;\\n            l.cLevelUnderlying64x64 = initialCLevel64x64;\\n\\n            int128 newPrice64x64 = l.fetchPriceUpdate();\\n            l.setPriceUpdate(block.timestamp, newPrice64x64);\\n\\n            l.updatedAt = block.timestamp;\\n            l.cLevelBaseUpdatedAt = block.timestamp;\\n            l.cLevelUnderlyingUpdatedAt = block.timestamp;\\n        }\\n\\n        {\\n            ERC165Storage.Layout storage l = ERC165Storage.layout();\\n            l.setSupportedInterface(type(IERC165).interfaceId, true);\\n            l.setSupportedInterface(type(IERC1155).interfaceId, true);\\n        }\\n    }\\n\\n    function _getImplementation() internal view override returns (address) {\\n        return IDiamondLoupe(DIAMOND).facetAddress(msg.sig);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OptionMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary OptionMath {\\n    using ABDKMath64x64 for int128;\\n\\n    struct QuoteArgs {\\n        int128 varianceAnnualized64x64; // 64x64 fixed point representation of annualized variance\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\n        int128 timeToMaturity64x64; // 64x64 fixed point representation of duration of option contract (in years)\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level of Pool before purchase\\n        int128 oldPoolState; // 64x64 fixed point representation of current state of the pool\\n        int128 newPoolState; // 64x64 fixed point representation of state of the pool after trade\\n        int128 steepness64x64; // 64x64 fixed point representation of Pool state delta multiplier\\n        int128 minAPY64x64; // 64x64 fixed point representation of minimum APY for capital locked up to underwrite options\\n        bool isCall; // whether to price \\\"call\\\" or \\\"put\\\" option\\n    }\\n\\n    struct CalculateCLevelDecayArgs {\\n        int128 timeIntervalsElapsed64x64; // 64x64 fixed point representation of quantity of discrete arbitrary intervals elapsed since last update\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level prior to accounting for decay\\n        int128 utilization64x64; // 64x64 fixed point representation of pool capital utilization rate\\n        int128 utilizationLowerBound64x64;\\n        int128 utilizationUpperBound64x64;\\n        int128 cLevelLowerBound64x64;\\n        int128 cLevelUpperBound64x64;\\n        int128 cConvergenceULowerBound64x64;\\n        int128 cConvergenceUUpperBound64x64;\\n    }\\n\\n    // 64x64 fixed point integer constants\\n    int128 internal constant ONE_64x64 = 0x10000000000000000;\\n    int128 internal constant THREE_64x64 = 0x30000000000000000;\\n\\n    // 64x64 fixed point constants used in Choudhury’s approximation of the Black-Scholes CDF\\n    int128 private constant CDF_CONST_0 = 0x09109f285df452394; // 2260 / 3989\\n    int128 private constant CDF_CONST_1 = 0x19abac0ea1da65036; // 6400 / 3989\\n    int128 private constant CDF_CONST_2 = 0x0d3c84b78b749bd6b; // 3300 / 3989\\n\\n    /**\\n     * @notice recalculate C-Level based on change in liquidity\\n     * @param initialCLevel64x64 64x64 fixed point representation of C-Level of Pool before update\\n     * @param oldPoolState64x64 64x64 fixed point representation of liquidity in pool before update\\n     * @param newPoolState64x64 64x64 fixed point representation of liquidity in pool after update\\n     * @param steepness64x64 64x64 fixed point representation of steepness coefficient\\n     * @return 64x64 fixed point representation of new C-Level\\n     */\\n    function calculateCLevel(\\n        int128 initialCLevel64x64,\\n        int128 oldPoolState64x64,\\n        int128 newPoolState64x64,\\n        int128 steepness64x64\\n    ) external pure returns (int128) {\\n        return\\n            newPoolState64x64\\n                .sub(oldPoolState64x64)\\n                .div(\\n                    oldPoolState64x64 > newPoolState64x64\\n                        ? oldPoolState64x64\\n                        : newPoolState64x64\\n                )\\n                .mul(steepness64x64)\\n                .neg()\\n                .exp()\\n                .mul(initialCLevel64x64);\\n    }\\n\\n    /**\\n     * @notice calculate the price of an option using the Premia Finance model\\n     * @param args arguments of quotePrice\\n     * @return premiaPrice64x64 64x64 fixed point representation of Premia option price\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after purchase\\n     */\\n    function quotePrice(QuoteArgs memory args)\\n        external\\n        pure\\n        returns (\\n            int128 premiaPrice64x64,\\n            int128 cLevel64x64,\\n            int128 slippageCoefficient64x64\\n        )\\n    {\\n        int128 deltaPoolState64x64 = args\\n            .newPoolState\\n            .sub(args.oldPoolState)\\n            .div(args.oldPoolState)\\n            .mul(args.steepness64x64);\\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\\n\\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\\n            args.varianceAnnualized64x64,\\n            args.strike64x64,\\n            args.spot64x64,\\n            args.timeToMaturity64x64,\\n            args.isCall\\n        );\\n\\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\\n            deltaPoolState64x64\\n        );\\n\\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\\n            slippageCoefficient64x64\\n        );\\n\\n        int128 intrinsicValue64x64;\\n\\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\\n        }\\n\\n        int128 collateralValue64x64 = args.isCall\\n            ? args.spot64x64\\n            : args.strike64x64;\\n\\n        int128 minPrice64x64 = intrinsicValue64x64.add(\\n            collateralValue64x64.mul(args.minAPY64x64).mul(\\n                args.timeToMaturity64x64\\n            )\\n        );\\n\\n        if (minPrice64x64 > premiaPrice64x64) {\\n            premiaPrice64x64 = minPrice64x64;\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate the decay of C-Level based on heat diffusion function\\n     * @param args structured CalculateCLevelDecayArgs\\n     * @return cLevelDecayed64x64 C-Level after accounting for decay\\n     */\\n    function calculateCLevelDecay(CalculateCLevelDecayArgs memory args)\\n        external\\n        pure\\n        returns (int128 cLevelDecayed64x64)\\n    {\\n        int128 convFHighU64x64 = (args.utilization64x64 >=\\n            args.utilizationUpperBound64x64 &&\\n            args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\\n            ? ONE_64x64\\n            : int128(0);\\n\\n        int128 convFLowU64x64 = (args.utilization64x64 <=\\n            args.utilizationLowerBound64x64 &&\\n            args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\\n            ? ONE_64x64\\n            : int128(0);\\n\\n        cLevelDecayed64x64 = args\\n            .oldCLevel64x64\\n            .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\\n            .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\\n            .mul(\\n                convFLowU64x64\\n                    .mul(ONE_64x64.sub(args.utilization64x64))\\n                    .add(convFHighU64x64.mul(args.utilization64x64))\\n                    .mul(args.timeIntervalsElapsed64x64)\\n                    .neg()\\n                    .exp()\\n            )\\n            .add(\\n                args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\\n                    args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice calculate the exponential decay coefficient for a given interval\\n     * @param oldTimestamp timestamp of previous update\\n     * @param newTimestamp current timestamp\\n     * @return 64x64 fixed point representation of exponential decay coefficient\\n     */\\n    function _decay(uint256 oldTimestamp, uint256 newTimestamp)\\n        internal\\n        pure\\n        returns (int128)\\n    {\\n        return\\n            ONE_64x64.sub(\\n                (-ABDKMath64x64.divu(newTimestamp - oldTimestamp, 7 days)).exp()\\n            );\\n    }\\n\\n    /**\\n     * @notice calculate Choudhury’s approximation of the Black-Scholes CDF\\n     * @param input64x64 64x64 fixed point representation of random variable\\n     * @return 64x64 fixed point representation of the approximated CDF of x\\n     */\\n    function _N(int128 input64x64) internal pure returns (int128) {\\n        // squaring via mul is cheaper than via pow\\n        int128 inputSquared64x64 = input64x64.mul(input64x64);\\n\\n        int128 value64x64 = (-inputSquared64x64 >> 1).exp().div(\\n            CDF_CONST_0.add(CDF_CONST_1.mul(input64x64.abs())).add(\\n                CDF_CONST_2.mul(inputSquared64x64.add(THREE_64x64).sqrt())\\n            )\\n        );\\n\\n        return input64x64 > 0 ? ONE_64x64.sub(value64x64) : value64x64;\\n    }\\n\\n    /**\\n     * @notice calculate the price of an option using the Black-Scholes model\\n     * @param varianceAnnualized64x64 64x64 fixed point representation of annualized variance\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @param spot64x64 64x64 fixed point representation of spot price\\n     * @param timeToMaturity64x64 64x64 fixed point representation of duration of option contract (in years)\\n     * @param isCall whether to price \\\"call\\\" or \\\"put\\\" option\\n     * @return 64x64 fixed point representation of Black-Scholes option price\\n     */\\n    function _blackScholesPrice(\\n        int128 varianceAnnualized64x64,\\n        int128 strike64x64,\\n        int128 spot64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) internal pure returns (int128) {\\n        int128 cumulativeVariance64x64 = timeToMaturity64x64.mul(\\n            varianceAnnualized64x64\\n        );\\n        int128 cumulativeVarianceSqrt64x64 = cumulativeVariance64x64.sqrt();\\n\\n        int128 d1_64x64 = spot64x64\\n            .div(strike64x64)\\n            .ln()\\n            .add(cumulativeVariance64x64 >> 1)\\n            .div(cumulativeVarianceSqrt64x64);\\n        int128 d2_64x64 = d1_64x64.sub(cumulativeVarianceSqrt64x64);\\n\\n        if (isCall) {\\n            return\\n                spot64x64.mul(_N(d1_64x64)).sub(strike64x64.mul(_N(d2_64x64)));\\n        } else {\\n            return\\n                -spot64x64.mul(_N(-d1_64x64)).sub(\\n                    strike64x64.mul(_N(-d2_64x64))\\n                );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IPoolView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {PoolStorage} from \\\"./PoolStorage.sol\\\";\\r\\n\\r\\ninterface IPoolView {\\r\\n    function getFeeReceiverAddress() external view returns (address);\\r\\n\\r\\n    function getPoolSettings()\\r\\n        external\\r\\n        view\\r\\n        returns (PoolStorage.PoolSettings memory);\\r\\n\\r\\n    function getTokenIds() external view returns (uint256[] memory);\\r\\n\\r\\n    function getCLevel64x64(bool isCall) external view returns (int128);\\r\\n\\r\\n    function getSteepness64x64() external view returns (int128);\\r\\n\\r\\n    function getPrice(uint256 timestamp) external view returns (int128);\\r\\n\\r\\n    function getParametersForTokenId(uint256 tokenId)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            PoolStorage.TokenType,\\r\\n            uint64,\\r\\n            int128\\r\\n        );\\r\\n\\r\\n    function getMinimumAmounts()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 minCallTokenAmount, uint256 minPutTokenAmount);\\r\\n\\r\\n    function getCapAmounts()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 callTokenCapAmount, uint256 putTokenCapAmount);\\r\\n\\r\\n    function getUserTVL(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 underlyingTVL, uint256 baseTVL);\\r\\n\\r\\n    function getTotalTVL()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 underlyingTVL, uint256 baseTVL);\\r\\n\\r\\n    function getPremiaMining() external view returns (address);\\r\\n\\r\\n    function getDivestmentTimestamps(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 callDivestmentTimestamp,\\r\\n            uint256 putDivestmentTimestamp\\r\\n        );\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mining/IPremiaMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {PremiaMiningStorage} from \\\"./PremiaMiningStorage.sol\\\";\\r\\n\\r\\ninterface IPremiaMining {\\r\\n    function addPremiaRewards(uint256 _amount) external;\\r\\n\\r\\n    function premiaRewardsAvailable() external view returns (uint256);\\r\\n\\r\\n    function getTotalAllocationPoints() external view returns (uint256);\\r\\n\\r\\n    function getPoolInfo(address pool, bool isCallPool)\\r\\n        external\\r\\n        view\\r\\n        returns (PremiaMiningStorage.PoolInfo memory);\\r\\n\\r\\n    function getPremiaPerBlock() external view returns (uint256);\\r\\n\\r\\n    function addPool(address _pool, uint256 _allocPoints) external;\\r\\n\\r\\n    function setPoolAllocPoints(address _pool, uint256 _allocPoints) external;\\r\\n\\r\\n    function pendingPremia(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        address _user\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updatePool(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function allocatePending(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function claim(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation.isContract(),\\n            'Proxy: implementation must be contract'\\n        );\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {EnumerableSet, ERC1155EnumerableStorage} from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\\\";\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport {ABDKMath64x64Token} from \\\"../libraries/ABDKMath64x64Token.sol\\\";\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\n\\nlibrary PoolStorage {\\n    using ABDKMath64x64 for int128;\\n    using PoolStorage for PoolStorage.Layout;\\n\\n    enum TokenType {\\n        UNDERLYING_FREE_LIQ,\\n        BASE_FREE_LIQ,\\n        UNDERLYING_RESERVED_LIQ,\\n        BASE_RESERVED_LIQ,\\n        LONG_CALL,\\n        SHORT_CALL,\\n        LONG_PUT,\\n        SHORT_PUT\\n    }\\n\\n    struct PoolSettings {\\n        address underlying;\\n        address base;\\n        address underlyingOracle;\\n        address baseOracle;\\n    }\\n\\n    struct QuoteArgsInternal {\\n        address feePayer; // address of the fee payer\\n        uint64 maturity; // timestamp of option maturity\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\n        uint256 contractSize; // size of option contract\\n        bool isCall; // true for call, false for put\\n    }\\n\\n    struct QuoteResultInternal {\\n        int128 baseCost64x64; // 64x64 fixed point representation of option cost denominated in underlying currency (without fee)\\n        int128 feeCost64x64; // 64x64 fixed point representation of option fee cost denominated in underlying currency for call, or base currency for put\\n        int128 cLevel64x64; // 64x64 fixed point representation of C-Level of Pool after purchase\\n        int128 slippageCoefficient64x64; // 64x64 fixed point representation of slippage coefficient for given order size\\n    }\\n\\n    struct BatchData {\\n        uint256 eta;\\n        uint256 totalPendingDeposits;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"premia.contracts.storage.Pool\\\");\\n\\n    uint256 private constant C_DECAY_BUFFER = 12 hours;\\n    uint256 private constant C_DECAY_INTERVAL = 4 hours;\\n\\n    struct Layout {\\n        // ERC20 token addresses\\n        address base;\\n        address underlying;\\n        // AggregatorV3Interface oracle addresses\\n        address baseOracle;\\n        address underlyingOracle;\\n        // token metadata\\n        uint8 underlyingDecimals;\\n        uint8 baseDecimals;\\n        // minimum amounts\\n        uint256 baseMinimum;\\n        uint256 underlyingMinimum;\\n        // deposit caps\\n        uint256 basePoolCap;\\n        uint256 underlyingPoolCap;\\n        // market state\\n        int128 steepness64x64;\\n        int128 cLevelBase64x64;\\n        int128 cLevelUnderlying64x64;\\n        uint256 cLevelBaseUpdatedAt;\\n        uint256 cLevelUnderlyingUpdatedAt;\\n        uint256 updatedAt;\\n        // User -> isCall -> depositedAt\\n        mapping(address => mapping(bool => uint256)) depositedAt;\\n        mapping(address => mapping(bool => uint256)) divestmentTimestamps;\\n        // doubly linked list of free liquidity intervals\\n        // isCall -> User -> User\\n        mapping(bool => mapping(address => address)) liquidityQueueAscending;\\n        mapping(bool => mapping(address => address)) liquidityQueueDescending;\\n        // minimum resolution price bucket => price\\n        mapping(uint256 => int128) bucketPrices64x64;\\n        // sequence id (minimum resolution price bucket / 256) => price update sequence\\n        mapping(uint256 => uint256) priceUpdateSequences;\\n        // isCall -> batch data\\n        mapping(bool => BatchData) nextDeposits;\\n        // user -> batch timestamp -> isCall -> pending amount\\n        mapping(address => mapping(uint256 => mapping(bool => uint256))) pendingDeposits;\\n        EnumerableSet.UintSet tokenIds;\\n        // user -> isCallPool -> total value locked of user (Used for liquidity mining)\\n        mapping(address => mapping(bool => uint256)) userTVL;\\n        // isCallPool -> total value locked\\n        mapping(bool => uint256) totalTVL;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate ERC1155 token id for given option parameters\\n     * @param tokenType TokenType enum\\n     * @param maturity timestamp of option maturity\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @return tokenId token id\\n     */\\n    function formatTokenId(\\n        TokenType tokenType,\\n        uint64 maturity,\\n        int128 strike64x64\\n    ) internal pure returns (uint256 tokenId) {\\n        tokenId =\\n            (uint256(tokenType) << 248) +\\n            (uint256(maturity) << 128) +\\n            uint256(int256(strike64x64));\\n    }\\n\\n    /**\\n     * @notice derive option maturity and strike price from ERC1155 token id\\n     * @param tokenId token id\\n     * @return tokenType TokenType enum\\n     * @return maturity timestamp of option maturity\\n     * @return strike64x64 option strike price\\n     */\\n    function parseTokenId(uint256 tokenId)\\n        internal\\n        pure\\n        returns (\\n            TokenType tokenType,\\n            uint64 maturity,\\n            int128 strike64x64\\n        )\\n    {\\n        assembly {\\n            tokenType := shr(248, tokenId)\\n            maturity := shr(128, tokenId)\\n            strike64x64 := tokenId\\n        }\\n    }\\n\\n    function getTokenDecimals(Layout storage l, bool isCall)\\n        internal\\n        view\\n        returns (uint8 decimals)\\n    {\\n        decimals = isCall ? l.underlyingDecimals : l.baseDecimals;\\n    }\\n\\n    function totalFreeLiquiditySupply64x64(Layout storage l, bool isCall)\\n        internal\\n        view\\n        returns (int128)\\n    {\\n        uint256 tokenId = formatTokenId(\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\n            0,\\n            0\\n        );\\n\\n        return\\n            ABDKMath64x64Token.fromDecimals(\\n                ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\n                    l.nextDeposits[isCall].totalPendingDeposits,\\n                l.getTokenDecimals(isCall)\\n            );\\n    }\\n\\n    function getReinvestmentStatus(\\n        Layout storage l,\\n        address account,\\n        bool isCallPool\\n    ) internal view returns (bool) {\\n        uint256 timestamp = l.divestmentTimestamps[account][isCallPool];\\n        return timestamp == 0 || timestamp > block.timestamp;\\n    }\\n\\n    function addUnderwriter(\\n        Layout storage l,\\n        address account,\\n        bool isCallPool\\n    ) internal {\\n        require(account != address(0));\\n\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\n            isCallPool\\n        ];\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\n            isCallPool\\n        ];\\n\\n        if (_isInQueue(account, asc, desc)) return;\\n\\n        address last = desc[address(0)];\\n\\n        asc[last] = account;\\n        desc[account] = last;\\n        desc[address(0)] = account;\\n    }\\n\\n    function removeUnderwriter(\\n        Layout storage l,\\n        address account,\\n        bool isCallPool\\n    ) internal {\\n        require(account != address(0));\\n\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\n            isCallPool\\n        ];\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\n            isCallPool\\n        ];\\n\\n        if (!_isInQueue(account, asc, desc)) return;\\n\\n        address prev = desc[account];\\n        address next = asc[account];\\n        asc[prev] = next;\\n        desc[next] = prev;\\n        delete asc[account];\\n        delete desc[account];\\n    }\\n\\n    function isInQueue(\\n        Layout storage l,\\n        address account,\\n        bool isCallPool\\n    ) internal view returns (bool) {\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\n            isCallPool\\n        ];\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\n            isCallPool\\n        ];\\n\\n        return _isInQueue(account, asc, desc);\\n    }\\n\\n    function _isInQueue(\\n        address account,\\n        mapping(address => address) storage asc,\\n        mapping(address => address) storage desc\\n    ) private view returns (bool) {\\n        return asc[account] != address(0) || desc[address(0)] == account;\\n    }\\n\\n    function getCLevel(Layout storage l, bool isCall)\\n        internal\\n        view\\n        returns (int128 cLevel64x64)\\n    {\\n        int128 oldCLevel64x64 = isCall\\n            ? l.cLevelUnderlying64x64\\n            : l.cLevelBase64x64;\\n\\n        uint256 timeElapsed = block.timestamp -\\n            (isCall ? l.cLevelUnderlyingUpdatedAt : l.cLevelBaseUpdatedAt);\\n\\n        // do not apply C decay if less than 24 hours have elapsed\\n\\n        if (timeElapsed > C_DECAY_BUFFER) {\\n            timeElapsed -= C_DECAY_BUFFER;\\n        } else {\\n            return oldCLevel64x64;\\n        }\\n\\n        int128 timeIntervalsElapsed64x64 = ABDKMath64x64.divu(\\n            timeElapsed,\\n            C_DECAY_INTERVAL\\n        );\\n\\n        uint256 tokenId = formatTokenId(\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\n            0,\\n            0\\n        );\\n\\n        uint256 tvl = l.totalTVL[isCall];\\n\\n        int128 utilization = ABDKMath64x64.divu(\\n            tvl -\\n                (ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\n                    l.nextDeposits[isCall].totalPendingDeposits),\\n            tvl\\n        );\\n\\n        cLevel64x64 = OptionMath.calculateCLevelDecay(\\n            OptionMath.CalculateCLevelDecayArgs(\\n                timeIntervalsElapsed64x64,\\n                oldCLevel64x64,\\n                utilization,\\n                0xb333333333333333, // 0.7\\n                0xe666666666666666, // 0.9\\n                0x10000000000000000, // 1.0\\n                0x10000000000000000, // 1.0\\n                0xe666666666666666, // 0.9\\n                0x56fc2a2c515da32ea // 2e\\n            )\\n        );\\n    }\\n\\n    function setCLevel(\\n        Layout storage l,\\n        int128 oldLiquidity64x64,\\n        int128 newLiquidity64x64,\\n        bool isCallPool\\n    ) internal returns (int128 cLevel64x64) {\\n        cLevel64x64 = l.calculateCLevel(\\n            oldLiquidity64x64,\\n            newLiquidity64x64,\\n            isCallPool\\n        );\\n\\n        l.setCLevel(cLevel64x64, isCallPool);\\n    }\\n\\n    function setCLevel(\\n        Layout storage l,\\n        int128 cLevel64x64,\\n        bool isCallPool\\n    ) internal {\\n        if (isCallPool) {\\n            l.cLevelUnderlying64x64 = cLevel64x64;\\n            l.cLevelUnderlyingUpdatedAt = block.timestamp;\\n        } else {\\n            l.cLevelBase64x64 = cLevel64x64;\\n            l.cLevelBaseUpdatedAt = block.timestamp;\\n        }\\n    }\\n\\n    function calculateCLevel(\\n        Layout storage l,\\n        int128 oldLiquidity64x64,\\n        int128 newLiquidity64x64,\\n        bool isCallPool\\n    ) internal view returns (int128 cLevel64x64) {\\n        cLevel64x64 = OptionMath.calculateCLevel(\\n            l.getCLevel(isCallPool),\\n            oldLiquidity64x64,\\n            newLiquidity64x64,\\n            l.steepness64x64\\n        );\\n\\n        if (cLevel64x64 < 0xb333333333333333) {\\n            cLevel64x64 = int128(0xb333333333333333); // 64x64 fixed point representation of 0.7\\n        }\\n    }\\n\\n    function setOracles(\\n        Layout storage l,\\n        address baseOracle,\\n        address underlyingOracle\\n    ) internal {\\n        require(\\n            AggregatorV3Interface(baseOracle).decimals() ==\\n                AggregatorV3Interface(underlyingOracle).decimals(),\\n            \\\"Pool: oracle decimals must match\\\"\\n        );\\n\\n        l.baseOracle = baseOracle;\\n        l.underlyingOracle = underlyingOracle;\\n    }\\n\\n    function fetchPriceUpdate(Layout storage l)\\n        internal\\n        view\\n        returns (int128 price64x64)\\n    {\\n        int256 priceUnderlying = AggregatorInterface(l.underlyingOracle)\\n            .latestAnswer();\\n        int256 priceBase = AggregatorInterface(l.baseOracle).latestAnswer();\\n\\n        return ABDKMath64x64.divi(priceUnderlying, priceBase);\\n    }\\n\\n    /**\\n     * @notice set price update for current hourly bucket\\n     * @param l storage layout struct\\n     * @param timestamp timestamp to update\\n     * @param price64x64 64x64 fixed point representation of price\\n     */\\n    function setPriceUpdate(\\n        Layout storage l,\\n        uint256 timestamp,\\n        int128 price64x64\\n    ) internal {\\n        uint256 bucket = timestamp / (1 hours);\\n        l.bucketPrices64x64[bucket] = price64x64;\\n        l.priceUpdateSequences[bucket >> 8] += 1 << (255 - (bucket & 255));\\n    }\\n\\n    /**\\n     * @notice get price update for hourly bucket corresponding to given timestamp\\n     * @param l storage layout struct\\n     * @param timestamp timestamp to query\\n     * @return 64x64 fixed point representation of price\\n     */\\n    function getPriceUpdate(Layout storage l, uint256 timestamp)\\n        internal\\n        view\\n        returns (int128)\\n    {\\n        return l.bucketPrices64x64[timestamp / (1 hours)];\\n    }\\n\\n    /**\\n     * @notice get first price update available following given timestamp\\n     * @param l storage layout struct\\n     * @param timestamp timestamp to query\\n     * @return 64x64 fixed point representation of price\\n     */\\n    function getPriceUpdateAfter(Layout storage l, uint256 timestamp)\\n        internal\\n        view\\n        returns (int128)\\n    {\\n        // price updates are grouped into hourly buckets\\n        uint256 bucket = timestamp / (1 hours);\\n        // divide by 256 to get the index of the relevant price update sequence\\n        uint256 sequenceId = bucket >> 8;\\n\\n        // get position within sequence relevant to current price update\\n\\n        uint256 offset = bucket & 255;\\n        // shift to skip buckets from earlier in sequence\\n        uint256 sequence = (l.priceUpdateSequences[sequenceId] << offset) >>\\n            offset;\\n\\n        // iterate through future sequences until a price update is found\\n        // sequence corresponding to current timestamp used as upper bound\\n\\n        uint256 currentPriceUpdateSequenceId = block.timestamp / (256 hours);\\n\\n        while (sequence == 0 && sequenceId <= currentPriceUpdateSequenceId) {\\n            sequence = l.priceUpdateSequences[++sequenceId];\\n        }\\n\\n        // if no price update is found (sequence == 0) function will return 0\\n        // this should never occur, as each relevant external function triggers a price update\\n\\n        // the most significant bit of the sequence corresponds to the offset of the relevant bucket\\n\\n        uint256 msb;\\n\\n        for (uint256 i = 128; i > 0; i >>= 1) {\\n            if (sequence >> i > 0) {\\n                msb += i;\\n                sequence >>= i;\\n            }\\n        }\\n\\n        return l.bucketPrices64x64[((sequenceId + 1) << 8) - msb - 1];\\n    }\\n\\n    function fromBaseToUnderlyingDecimals(Layout storage l, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int128 valueFixed64x64 = ABDKMath64x64Token.fromDecimals(\\n            value,\\n            l.baseDecimals\\n        );\\n        return\\n            ABDKMath64x64Token.toDecimals(\\n                valueFixed64x64,\\n                l.underlyingDecimals\\n            );\\n    }\\n\\n    function fromUnderlyingToBaseDecimals(Layout storage l, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int128 valueFixed64x64 = ABDKMath64x64Token.fromDecimals(\\n            value,\\n            l.underlyingDecimals\\n        );\\n        return ABDKMath64x64Token.toDecimals(valueFixed64x64, l.baseDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ABDKMath64x64Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary ABDKMath64x64Token {\\n    using ABDKMath64x64 for int128;\\n\\n    /**\\n     * @notice convert 64x64 fixed point representation of token amount to decimal\\n     * @param value64x64 64x64 fixed point representation of token amount\\n     * @param decimals token display decimals\\n     * @return value decimal representation of token amount\\n     */\\n    function toDecimals(int128 value64x64, uint8 decimals)\\n        internal\\n        pure\\n        returns (uint256 value)\\n    {\\n        value = value64x64.mulu(10**decimals);\\n    }\\n\\n    /**\\n     * @notice convert decimal representation of token amount to 64x64 fixed point\\n     * @param value decimal representation of token amount\\n     * @param decimals token display decimals\\n     * @return value64x64 64x64 fixed point representation of token amount\\n     */\\n    function fromDecimals(uint256 value, uint8 decimals)\\n        internal\\n        pure\\n        returns (int128 value64x64)\\n    {\\n        value64x64 = ABDKMath64x64.divu(value, 10**decimals);\\n    }\\n\\n    /**\\n     * @notice convert 64x64 fixed point representation of token amount to wei (18 decimals)\\n     * @param value64x64 64x64 fixed point representation of token amount\\n     * @return value wei representation of token amount\\n     */\\n    function toWei(int128 value64x64) internal pure returns (uint256 value) {\\n        value = toDecimals(value64x64, 18);\\n    }\\n\\n    /**\\n     * @notice convert wei representation (18 decimals) of token amount to 64x64 fixed point\\n     * @param value wei representation of token amount\\n     * @return value64x64 64x64 fixed point representation of token amount\\n     */\\n    function fromWei(uint256 value) internal pure returns (int128 value64x64) {\\n        value64x64 = fromDecimals(value, 18);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mining/PremiaMiningStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nlibrary PremiaMiningStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"premia.contracts.storage.PremiaMining\\\");\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 allocPoint; // How many allocation points assigned to this pool. PREMIA to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that PREMIA distribution occurs.\\n        uint256 accPremiaPerShare; // Accumulated PREMIA per share, times 1e12. See below.\\n    }\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 reward; // Total allocated unclaimed reward\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of PREMIA\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accPremiaPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accPremiaPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    struct Layout {\\n        // Total PREMIA left to distribute\\n        uint256 premiaAvailable;\\n        // Amount of premia per block distributed\\n        uint256 premiaPerBlock;\\n        // pool -> isCallPool -> PoolInfo\\n        mapping(address => mapping(bool => PoolInfo)) poolInfo;\\n        // pool -> isCallPool -> user -> UserInfo\\n        mapping(address => mapping(bool => mapping(address => UserInfo))) userInfo;\\n        // Total allocation points. Must be the sum of all allocation points in all pools.\\n        uint256 totalAllocPoint;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int128\",\"name\":\"initialCLevel64x64\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DeployPool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingOracle\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"baseMinimum64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingMinimum64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"basePoolCap64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingPoolCap64x64\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"miningAllocPoints\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyManager","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048d49466cb2efbf05faa5fa5e69f2984edc8d1d7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}