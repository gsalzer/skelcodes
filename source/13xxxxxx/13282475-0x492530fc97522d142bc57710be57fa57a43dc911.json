{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Foundation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./interfaces/IFoundation.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Foundation is IFoundation {\\n  IERC20 public constant usdp = IERC20(0x1456688345527bE1f37E9e627DA0837D6f08C925);\\n\\n  address public duckStaking = 0x3f93dE882dA8150Dc98a3a1F4626E80E3282df46;\\n  address public usdpStakingCollector;\\n  \\n  address public auction = 0xC6733B8bb1eF64eF450e8fCd8682f6bEc0A5099a;\\n\\n  uint public constant BASE = 100;\\n\\n  uint public liquidationFee;\\n  uint public sfSharesForDuckStaking = 50;\\n  uint public lfSharesForDuckStaking = 100;\\n\\n  // Unit multisig initially\\n  address public gov = 0xae37E8f9a3f960eE090706Fa4db41Ca2f2C56Cb8;\\n\\n  event Distributed(uint usdpStaking, uint duckStaking);\\n\\n  modifier auctionOnly() {\\n    require(msg.sender == auction, \\\"Foundation: !auction\\\");\\n    _;\\n  }\\n\\n  modifier g() {\\n    require(msg.sender == gov, \\\"Foundation: !gov\\\");\\n    _;\\n  }\\n\\n  constructor (address _usdpStaking) {\\n    usdpStakingCollector = _usdpStaking;\\n  }\\n\\n  function setGov(address _gov) external g {\\n    gov = _gov;\\n  }\\n\\n  function setDuckStaking(address _duckStaking) external g {\\n    duckStaking = _duckStaking;\\n  }\\n\\n  function setUSDPStaking(address _usdpStakingCollector) external g {\\n    usdpStakingCollector = _usdpStakingCollector;\\n  }\\n\\n  function setAuction(address _auction) external g {\\n    auction = _auction;\\n  }\\n\\n  function setSFSharesForDuckStaking(uint _sfSharesForDuckStaking) external g {\\n    require(_sfSharesForDuckStaking <= BASE, \\\"Foundation: shares > BASE\\\");\\n    sfSharesForDuckStaking = _sfSharesForDuckStaking;\\n  }\\n\\n  function setLFSharesForDuckStaking(uint _lfSharesForDuckStaking) external g {\\n    require(_lfSharesForDuckStaking <= BASE, \\\"Foundation: shares > BASE\\\");\\n    lfSharesForDuckStaking = _lfSharesForDuckStaking;\\n  }\\n\\n  function submitLiquidationFee(uint fee) external override auctionOnly {\\n    liquidationFee = liquidationFee + fee;\\n  }\\n\\n  function distribute() external override {\\n    uint usdpBalance = usdp.balanceOf(address(this));\\n\\n    uint stabilityFee = usdpBalance - liquidationFee;\\n\\n    uint duckStakingAmount = liquidationFee * lfSharesForDuckStaking / BASE + stabilityFee * sfSharesForDuckStaking / BASE;\\n    uint usdpStakingAmount = usdpBalance - duckStakingAmount;\\n\\n    liquidationFee = 0;\\n\\n    usdp.transfer(usdpStakingCollector, usdpStakingAmount);\\n    usdp.transfer(duckStaking, duckStakingAmount);\\n\\n    emit Distributed(usdpStakingAmount, duckStakingAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"interfaces/IFoundation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\npragma solidity ^0.8.6;\\n\\ninterface IFoundation {\\n\\n  function submitLiquidationFee(uint fee) external;\\n\\n  function distribute() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdpStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdpStaking\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duckStaking\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duckStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lfSharesForDuckStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_duckStaking\",\"type\":\"address\"}],\"name\":\"setDuckStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lfSharesForDuckStaking\",\"type\":\"uint256\"}],\"name\":\"setLFSharesForDuckStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sfSharesForDuckStaking\",\"type\":\"uint256\"}],\"name\":\"setSFSharesForDuckStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdpStakingCollector\",\"type\":\"address\"}],\"name\":\"setUSDPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfSharesForDuckStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"submitLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdpStakingCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Foundation","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ac08b12b9417dbecf7f6ab2dd96e22441adf3a4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}