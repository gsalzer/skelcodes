{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILandCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILandCollection {\\n  function totalMinted(uint256 groupId) external view returns (uint256);\\n  function maximumSupply(uint256 groupId) external view returns (uint256);\\n  function mintToken(address account, uint256 groupId, uint256 count, uint256 seed) external;\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\"},\"IOreClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IOreClaim {\\n  function lastClaimedWeekByTokenId(uint256 _tokenId) external view returns (uint256);\\n  function initialClaimTimestampByGroupId(uint256 _groupId) external view returns (uint256);\\n  function finalClaimTimestamp() external view returns (uint256);\\n}\\n\"},\"OreClaimHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./ILandCollection.sol\\\";\\nimport \\\"./IOreClaim.sol\\\";\\n\\n\\n// Contains getter methods used by the webapp for ore claiming\\ncontract OreClaimHelper is Ownable {\\n  // Collection token contract interface\\n  ILandCollection public collection;\\n  // Ore token contract interface\\n  IOreClaim public oreClaim;\\n\\n  constructor(address _oreClaim, address _collection) {\\n    oreClaim = IOreClaim(_oreClaim);\\n    collection = ILandCollection(_collection);\\n  }\\n\\n  function claimWeek(uint256 _groupId) public view returns (uint256) {\\n    // Calculate and return the number of weeks elapsed since the initial claim timestamp for the groupId \\n    uint256 initial = oreClaim.initialClaimTimestampByGroupId(_groupId);\\n    // In the case of the claiming being paused for the current contract due to contract upgrade\\n    // make sure that the maximum claimable week is within the set final timestamp\\n    uint256 finalClaimTimestamp = oreClaim.finalClaimTimestamp();\\n    uint256 timestamp = (finalClaimTimestamp \\u003e 0 \\u0026\\u0026 block.timestamp \\u003e finalClaimTimestamp ? finalClaimTimestamp : block.timestamp);\\n\\n    if (initial == 0 || timestamp \\u003c initial) {\\n      return 0;\\n    }\\n\\n    uint256 elapsed = timestamp - initial;\\n    return (elapsed / 60 / 60 / 24 / 7) + 1;\\n  }\\n\\n  // Returns the list of tokenIds (with elapsed weeks for each) eligible for claiming owned by the specified address\\n  function unclaimedTokenIds(address _address) external view returns (uint256[] memory, uint256[] memory) {\\n    uint256 owned = collection.balanceOf(_address);\\n    uint256 count = 0;\\n\\n    // Count the total number of eligible tokens\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n      \\n      uint256 currentWeek = claimWeek(groupId);\\n      uint256 lastClaimedWeek = oreClaim.lastClaimedWeekByTokenId(tokenId);\\n\\n      if (currentWeek \\u003e lastClaimedWeek) {\\n        count++;\\n      }\\n    }\\n\\n    // Fill the array to be returned containing the eligible tokenIds along with the elapsed weeks\\n    uint256[] memory tokenIds = new uint256[](count);\\n    uint256[] memory elapsedWeeks = new uint256[](count);\\n    uint256 j = 0;\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n      uint256 currentWeek = claimWeek(groupId);\\n      uint256 lastClaimedWeek = oreClaim.lastClaimedWeekByTokenId(tokenId);\\n\\n      if (currentWeek \\u003e lastClaimedWeek) {\\n        tokenIds[j] = tokenId;\\n        elapsedWeeks[j++] = currentWeek - lastClaimedWeek;\\n      }\\n    }\\n\\n    return (tokenIds, elapsedWeeks);\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oreClaim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"claimWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract ILandCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oreClaim\",\"outputs\":[{\"internalType\":\"contract IOreClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unclaimedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OreClaimHelper","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000022fa7ae0e8fb3dd2c4768f44a264a366721902340000000000000000000000007f0ab6a57cfd191a202ab3f813ef9b851c77e618","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12d11268b1b5a7fe2f5950984ecf7a955286f4adc693a43e733986f555ad0d4a"}]}