{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/PoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ACLTrait} from \\\"../core/ACLTrait.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\n\\nimport {IInterestRateModel} from \\\"../interfaces/IInterestRateModel.sol\\\";\\nimport {IPoolService} from \\\"../interfaces/IPoolService.sol\\\";\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {ICreditManager} from \\\"../interfaces/ICreditManager.sol\\\";\\n\\nimport {AddressProvider} from \\\"../core/AddressProvider.sol\\\";\\nimport {DieselToken} from \\\"../tokens/DieselToken.sol\\\";\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n/// @title Pool Service\\n/// @notice Encapsulates business logic for:\\n///  - Adding/removing pool liquidity\\n///  - Managing diesel tokens & diesel rates\\n///  - Lend funds to credit manager\\n///\\n/// #define currentBorrowRate() uint =\\n///     let expLiq := expectedLiquidity() in\\n///     let availLiq := availableLiquidity() in\\n///         interestRateModel.calcBorrowRate(expLiq, availLiq);\\n///\\n/// More: https://dev.gearbox.fi/developers/pools/pool-service\\ncontract PoolService is IPoolService, ACLTrait, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using PercentageMath for uint256;\\n\\n    // Expected liquidity at last update (LU)\\n    uint256 public _expectedLiquidityLU;\\n\\n    // Expected liquidity limit\\n    uint256 public override expectedLiquidityLimit;\\n\\n    // Total borrowed amount: https://dev.gearbox.fi/developers/pools/economy/total-borrowed\\n    uint256 public override totalBorrowed;\\n\\n    // Address repository\\n    AddressProvider public addressProvider;\\n\\n    // Interest rate model\\n    IInterestRateModel public interestRateModel;\\n\\n    // Underlying token address\\n    address public override underlyingToken;\\n\\n    // Diesel(LP) token address\\n    address public override dieselToken;\\n\\n    // Credit managers mapping with permission to borrow / repay\\n    mapping(address => bool) public override creditManagersCanBorrow;\\n    mapping(address => bool) public creditManagersCanRepay;\\n\\n    // Credif managers\\n    address[] public override creditManagers;\\n\\n    // Treasury address for tokens\\n    address public treasuryAddress;\\n\\n    // Cumulative index in RAY\\n    uint256 public override _cumulativeIndex_RAY;\\n\\n    // Current borrow rate in RAY: https://dev.gearbox.fi/developers/pools/economy#borrow-apy\\n    uint256 public override borrowAPY_RAY;\\n\\n    // Timestamp of last update\\n    uint256 public override _timestampLU;\\n\\n    // Withdraw fee in PERCENTAGE FORMAT\\n    uint256 public override withdrawFee;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    //\\n    // CONSTRUCTOR\\n    //\\n\\n    /// @dev Constructor\\n    /// @param _addressProvider Address Repository for upgradable contract model\\n    /// @param _underlyingToken Address of underlying token\\n    /// @param _dieselAddress Address of diesel (LP) token\\n    /// @param _interestRateModelAddress Address of interest rate model\\n    constructor(\\n        address _addressProvider,\\n        address _underlyingToken,\\n        address _dieselAddress,\\n        address _interestRateModelAddress,\\n        uint256 _expectedLiquidityLimit\\n    ) ACLTrait(_addressProvider) {\\n        require(\\n            _addressProvider != address(0) &&\\n                _underlyingToken != address(0) &&\\n                _dieselAddress != address(0) &&\\n                _interestRateModelAddress != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n\\n        addressProvider = AddressProvider(_addressProvider);\\n\\n        underlyingToken = _underlyingToken;\\n        dieselToken = _dieselAddress;\\n        treasuryAddress = addressProvider.getTreasuryContract();\\n\\n        _cumulativeIndex_RAY = WadRayMath.RAY; // T:[PS-5]\\n        _updateInterestRateModel(_interestRateModelAddress);\\n        expectedLiquidityLimit = _expectedLiquidityLimit;\\n    }\\n\\n    //\\n    // LIQUIDITY MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Adds liquidity to pool\\n     * - Transfers underlying asset to pool\\n     * - Mints diesel (LP) token with current diesel rate\\n     * - Updates expected liquidity\\n     * - Updates borrow rate\\n     *\\n     * More: https://dev.gearbox.fi/developers/pools/pool-service#addliquidity\\n     *\\n     * @param amount Amount of tokens to be transfer\\n     * @param onBehalfOf The address that will receive the diesel tokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of diesel\\n     * tokens is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     *\\n     * #if_succeeds {:msg \\\"After addLiquidity() the pool gets the correct amoung of underlyingToken(s)\\\"}\\n     *      IERC20(underlyingToken).balanceOf(address(this)) == old(IERC20(underlyingToken).balanceOf(address(this))) + amount;\\n     * #if_succeeds {:msg \\\"After addLiquidity() onBehalfOf gets the right amount of dieselTokens\\\"}\\n     *      IERC20(dieselToken).balanceOf(onBehalfOf) == old(IERC20(dieselToken).balanceOf(onBehalfOf)) + old(toDiesel(amount));\\n     * #if_succeeds {:msg \\\"After addLiquidity() borrow rate decreases\\\"}\\n     *      amount > 0 ==> borrowAPY_RAY <= old(currentBorrowRate());\\n     * #limit {:msg \\\"Not more than 1 day since last borrow rate update\\\"} block.timestamp <= _timestampLU + 3600 * 24;\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    )\\n        external\\n        override\\n        whenNotPaused // T:[PS-4]\\n        nonReentrant\\n    {\\n        require(onBehalfOf != address(0), Errors.ZERO_ADDRESS_IS_NOT_ALLOWED);\\n\\n        require(\\n            expectedLiquidity().add(amount) <= expectedLiquidityLimit,\\n            Errors.POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT\\n        ); // T:[PS-31]\\n\\n        uint256 balanceBefore = IERC20(underlyingToken).balanceOf(\\n            address(this)\\n        );\\n\\n        IERC20(underlyingToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        ); // T:[PS-2, 7]\\n\\n        amount = IERC20(underlyingToken).balanceOf(address(this)).sub(\\n            balanceBefore\\n        ); // T:[FT-1]\\n\\n        DieselToken(dieselToken).mint(onBehalfOf, toDiesel(amount)); // T:[PS-2, 7]\\n\\n        _expectedLiquidityLU = _expectedLiquidityLU.add(amount); // T:[PS-2, 7]\\n        _updateBorrowRate(0); // T:[PS-2, 7]\\n\\n        emit AddLiquidity(msg.sender, onBehalfOf, amount, referralCode); // T:[PS-2, 7]\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from pool\\n     * - Transfers to LP underlying account = amount * diesel rate\\n     * - Burns diesel tokens\\n     * - Decreases underlying amount from total_liquidity\\n     * - Updates borrow rate\\n     *\\n     * More: https://dev.gearbox.fi/developers/pools/pool-service#removeliquidity\\n     *\\n     * @param amount Amount of tokens to be transfer\\n     * @param to Address to transfer liquidity\\n     *\\n     * #if_succeeds {:msg \\\"For removeLiquidity() sender must have sufficient diesel\\\"}\\n     *      old(DieselToken(dieselToken).balanceOf(msg.sender)) >= amount;\\n     * #if_succeeds {:msg \\\"After removeLiquidity() `to` gets the liquidity in underlyingToken(s)\\\"}\\n     *      (to != address(this) && to != treasuryAddress) ==>\\n     *          IERC20(underlyingToken).balanceOf(to) == old(IERC20(underlyingToken).balanceOf(to) + (let t:= fromDiesel(amount) in t.sub(t.percentMul(withdrawFee))));\\n     * #if_succeeds {:msg \\\"After removeLiquidity() treasury gets the withdraw fee in underlyingToken(s)\\\"}\\n     *      (to != address(this) && to != treasuryAddress) ==>\\n     *          IERC20(underlyingToken).balanceOf(treasuryAddress) == old(IERC20(underlyingToken).balanceOf(treasuryAddress) + fromDiesel(amount).percentMul(withdrawFee));\\n     * #if_succeeds {:msg \\\"After removeLiquidity() borrow rate increases\\\"}\\n     *      (to != address(this) && amount > 0) ==> borrowAPY_RAY >= old(currentBorrowRate());\\n     * #limit {:msg \\\"Not more than 1 day since last borrow rate update\\\"} block.timestamp <= _timestampLU + 3600 * 24;\\n     */\\n    function removeLiquidity(uint256 amount, address to)\\n        external\\n        override\\n        whenNotPaused // T:[PS-4]\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(to != address(0), Errors.ZERO_ADDRESS_IS_NOT_ALLOWED);\\n\\n        uint256 underlyingTokensAmount = fromDiesel(amount); // T:[PS-3, 8]\\n\\n        uint256 amountTreasury = underlyingTokensAmount.percentMul(withdrawFee);\\n        uint256 amountSent = underlyingTokensAmount.sub(amountTreasury);\\n\\n        IERC20(underlyingToken).safeTransfer(to, amountSent); // T:[PS-3, 34]\\n\\n        if (amountTreasury > 0) {\\n            IERC20(underlyingToken).safeTransfer(\\n                treasuryAddress,\\n                amountTreasury\\n            );\\n        } // T:[PS-3, 34]\\n\\n        DieselToken(dieselToken).burn(msg.sender, amount); // T:[PS-3, 8]\\n\\n        _expectedLiquidityLU = _expectedLiquidityLU.sub(underlyingTokensAmount); // T:[PS-3, 8]\\n        _updateBorrowRate(0); // T:[PS-3,8 ]\\n\\n        emit RemoveLiquidity(msg.sender, to, amount); // T:[PS-3, 8]\\n\\n        return amountSent;\\n    }\\n\\n    /// @dev Returns expected liquidity - the amount of money should be in the pool\\n    /// if all users close their Credit accounts and return debt\\n    ///\\n    /// More: https://dev.gearbox.fi/developers/pools/economy#expected-liquidity\\n    function expectedLiquidity() public view override returns (uint256) {\\n        // timeDifference = blockTime - previous timeStamp\\n        uint256 timeDifference = block.timestamp.sub(uint256(_timestampLU));\\n\\n        //                                    currentBorrowRate * timeDifference\\n        //  interestAccrued = totalBorrow *  ------------------------------------\\n        //                                             SECONDS_PER_YEAR\\n        //\\n        uint256 interestAccrued = totalBorrowed\\n        .mul(borrowAPY_RAY)\\n        .mul(timeDifference)\\n        .div(Constants.RAY)\\n        .div(Constants.SECONDS_PER_YEAR); // T:[PS-29]\\n\\n        return _expectedLiquidityLU.add(interestAccrued); // T:[PS-29]\\n    }\\n\\n    /// @dev Returns available liquidity in the pool (pool balance)\\n    /// More: https://dev.gearbox.fi/developers/\\n    function availableLiquidity() public view override returns (uint256) {\\n        return IERC20(underlyingToken).balanceOf(address(this));\\n    }\\n\\n    //\\n    // CREDIT ACCOUNT LENDING\\n    //\\n\\n    /// @dev Lends funds to credit manager and updates the pool parameters\\n    /// More: https://dev.gearbox.fi/developers/pools/pool-service#lendcreditAccount\\n    ///\\n    /// @param borrowedAmount Borrowed amount for credit account\\n    /// @param creditAccount Credit account address\\n    ///\\n    /// #if_succeeds {:msg \\\"After lendCreditAccount() borrow rate increases\\\"}\\n    ///      borrowedAmount > 0 ==> borrowAPY_RAY >= old(currentBorrowRate());\\n    /// #limit {:msg \\\"Not more than 1 day since last borrow rate update\\\"} block.timestamp <= _timestampLU + 3600 * 24;\\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount)\\n        external\\n        override\\n        whenNotPaused // T:[PS-4]\\n    {\\n        require(\\n            creditManagersCanBorrow[msg.sender],\\n            Errors.POOL_CONNECTED_CREDIT_MANAGERS_ONLY\\n        ); // T:[PS-12, 13]\\n\\n        // Transfer funds to credit account\\n        IERC20(underlyingToken).safeTransfer(creditAccount, borrowedAmount); // T:[PS-14]\\n\\n        // Update borrow Rate\\n        _updateBorrowRate(0); // T:[PS-17]\\n\\n        // Increase total borrowed amount\\n        totalBorrowed = totalBorrowed.add(borrowedAmount); // T:[PS-16]\\n\\n        emit Borrow(msg.sender, creditAccount, borrowedAmount); // T:[PS-15]\\n    }\\n\\n    /// @dev It's called after credit account funds transfer back to pool and updates corretly parameters.\\n    /// More: https://dev.gearbox.fi/developers/pools/pool-service#repaycreditAccount\\n    ///\\n    /// @param borrowedAmount Borrowed amount (without interest accrued)\\n    /// @param profit Represents PnL value if PnL > 0\\n    /// @param loss Represents PnL value if PnL <0\\n    ///\\n    /// #if_succeeds {:msg \\\"Cant have both profit and loss\\\"} !(profit > 0 && loss > 0);\\n    /// #if_succeeds {:msg \\\"After repayCreditAccount() if we are profitabe, or treasury can cover the losses, diesel rate doesn't decrease\\\"}\\n    ///      (profit > 0 || toDiesel(loss) >= DieselToken(dieselToken).balanceOf(treasuryAddress)) ==> getDieselRate_RAY() >= old(getDieselRate_RAY());\\n    /// #limit {:msg \\\"Not more than 1 day since last borrow rate update\\\"} block.timestamp <= _timestampLU + 3600 * 24;\\n    function repayCreditAccount(\\n        uint256 borrowedAmount,\\n        uint256 profit,\\n        uint256 loss\\n    )\\n        external\\n        override\\n        whenNotPaused // T:[PS-4]\\n    {\\n        require(\\n            creditManagersCanRepay[msg.sender],\\n            Errors.POOL_CONNECTED_CREDIT_MANAGERS_ONLY\\n        ); // T:[PS-12]\\n\\n        // For fee surplus we mint tokens for treasury\\n        if (profit > 0) {\\n            // T:[PS-22] provess that diesel rate will be the same within the margin of error\\n            DieselToken(dieselToken).mint(treasuryAddress, toDiesel(profit)); // T:[PS-21, 22]\\n            _expectedLiquidityLU = _expectedLiquidityLU.add(profit); // T:[PS-21, 22]\\n        }\\n        // If returned money < borrowed amount + interest accrued\\n        // it tries to compensate loss by burning diesel (LP) tokens\\n        // from treasury fund\\n        else {\\n            uint256 amountToBurn = toDiesel(loss); // T:[PS-19,20]\\n\\n            uint256 treasuryBalance = DieselToken(dieselToken).balanceOf(\\n                treasuryAddress\\n            ); // T:[PS-19,20]\\n\\n            if (treasuryBalance < amountToBurn) {\\n                amountToBurn = treasuryBalance;\\n                emit UncoveredLoss(\\n                    msg.sender,\\n                    loss.sub(fromDiesel(treasuryBalance))\\n                ); // T:[PS-23]\\n            }\\n\\n            // If treasury has enough funds, it just burns needed amount\\n            // to keep diesel rate on the same level\\n            DieselToken(dieselToken).burn(treasuryAddress, amountToBurn); // T:[PS-19, 20]\\n\\n            //            _expectedLiquidityLU = _expectedLiquidityLU.sub(loss); //T:[PS-19,20]\\n        }\\n\\n        // Update available liquidity\\n        _updateBorrowRate(loss); // T:[PS-19, 20, 21]\\n\\n        // Reduce total borrowed. Should be after _updateBorrowRate() for correct calculations\\n        totalBorrowed = totalBorrowed.sub(borrowedAmount); // T:[PS-19, 20]\\n\\n        emit Repay(msg.sender, borrowedAmount, profit, loss); // T:[PS-18]\\n    }\\n\\n    //\\n    // INTEREST RATE MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Calculates interest accrued from the last update using the linear model\\n     *\\n     *                                    /     currentBorrowRate * timeDifference \\\\\\n     *  newCumIndex  = currentCumIndex * | 1 + ------------------------------------ |\\n     *                                    \\\\              SECONDS_PER_YEAR          /\\n     *\\n     * @return current cumulative index in RAY\\n     */\\n    function calcLinearCumulative_RAY() public view override returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(uint256(_timestampLU)); // T:[PS-28]\\n\\n        return\\n            calcLinearIndex_RAY(\\n                _cumulativeIndex_RAY,\\n                borrowAPY_RAY,\\n                timeDifference\\n            ); // T:[PS-28]\\n    }\\n\\n    /// @dev Calculate linear index\\n    /// @param cumulativeIndex_RAY Current cumulative index in RAY\\n    /// @param currentBorrowRate_RAY Current borrow rate in RAY\\n    /// @param timeDifference Duration in seconds\\n    /// @return newCumulativeIndex Cumulative index accrued duration in Rays\\n    function calcLinearIndex_RAY(\\n        uint256 cumulativeIndex_RAY,\\n        uint256 currentBorrowRate_RAY,\\n        uint256 timeDifference\\n    ) public pure returns (uint256) {\\n        //                                    /     currentBorrowRate * timeDifference \\\\\\n        //  newCumIndex  = currentCumIndex * | 1 + ------------------------------------ |\\n        //                                    \\\\              SECONDS_PER_YEAR          /\\n        //\\n        uint256 linearAccumulated_RAY = WadRayMath.RAY.add(\\n            currentBorrowRate_RAY.mul(timeDifference).div(\\n                Constants.SECONDS_PER_YEAR\\n            )\\n        ); // T:[GM-2]\\n\\n        return cumulativeIndex_RAY.rayMul(linearAccumulated_RAY); // T:[GM-2]\\n    }\\n\\n    /// @dev Updates Cumulative index when liquidity parameters are changed\\n    ///  - compute how much interest were accrued from last update\\n    ///  - compute new cumulative index based on updated liquidity parameters\\n    ///  - stores new cumulative index and timestamp when it was updated\\n    function _updateBorrowRate(uint256 loss) internal {\\n        // Update total _expectedLiquidityLU\\n\\n        _expectedLiquidityLU = expectedLiquidity().sub(loss); // T:[PS-27]\\n\\n        // Update cumulativeIndex\\n        _cumulativeIndex_RAY = calcLinearCumulative_RAY(); // T:[PS-27]\\n\\n        // update borrow APY\\n        borrowAPY_RAY = interestRateModel.calcBorrowRate(\\n            _expectedLiquidityLU,\\n            availableLiquidity()\\n        ); // T:[PS-27]\\n        _timestampLU = block.timestamp; // T:[PS-27]\\n    }\\n\\n    //\\n    // DIESEL TOKEN MGMT\\n    //\\n\\n    /// @dev Returns current diesel rate in RAY format\\n    /// More info: https://dev.gearbox.fi/developers/pools/economy#diesel-rate\\n    function getDieselRate_RAY() public view override returns (uint256) {\\n        uint256 dieselSupply = IERC20(dieselToken).totalSupply();\\n        if (dieselSupply == 0) return WadRayMath.RAY; // T:[PS-1]\\n        return expectedLiquidity().mul(Constants.RAY).div(dieselSupply); // T:[PS-6]\\n    }\\n\\n    /// @dev Converts amount into diesel tokens\\n    /// @param amount Amount in underlying tokens to be converted to diesel tokens\\n    function toDiesel(uint256 amount) public view override returns (uint256) {\\n        return amount.mul(Constants.RAY).div(getDieselRate_RAY()); // T:[PS-24]\\n    }\\n\\n    /// @dev Converts amount from diesel tokens to undelying token\\n    /// @param amount Amount in diesel tokens to be converted to diesel tokens\\n    function fromDiesel(uint256 amount) public view override returns (uint256) {\\n        return amount.mul(getDieselRate_RAY()).div(Constants.RAY); // T:[PS-24]\\n    }\\n\\n    //\\n    // CONFIGURATION\\n    //\\n\\n    /// @dev Connects new Credif manager to pool\\n    /// @param _creditManager Address of credif manager\\n    function connectCreditManager(address _creditManager)\\n        external\\n        configuratorOnly // T:[PS-9]\\n    {\\n        require(\\n            address(this) == ICreditManager(_creditManager).poolService(),\\n            Errors.POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER\\n        ); // T:[PS-10]\\n\\n        require(\\n            !creditManagersCanRepay[_creditManager],\\n            Errors.POOL_CANT_ADD_CREDIT_MANAGER_TWICE\\n        ); // T:[PS-35]\\n\\n        creditManagersCanBorrow[_creditManager] = true; // T:[PS-11]\\n        creditManagersCanRepay[_creditManager] = true; // T:[PS-11]\\n        creditManagers.push(_creditManager); // T:[PS-11]\\n        emit NewCreditManagerConnected(_creditManager); // T:[PS-11]\\n    }\\n\\n    /// @dev Forbid to borrow for particulat credif manager\\n    /// @param _creditManager Address of credif manager\\n    function forbidCreditManagerToBorrow(address _creditManager)\\n        external\\n        configuratorOnly // T:[PS-9]\\n    {\\n        creditManagersCanBorrow[_creditManager] = false; // T:[PS-13]\\n        emit BorrowForbidden(_creditManager); // T:[PS-13]\\n    }\\n\\n    /// @dev Sets the new interest rate model for pool\\n    /// @param _interestRateModel Address of new interest rate model contract\\n    /// #limit {:msg \\\"Disallow updating the interest rate model after the constructor\\\"} address(interestRateModel) == address(0x0);\\n    function updateInterestRateModel(address _interestRateModel)\\n        public\\n        configuratorOnly // T:[PS-9]\\n    {\\n        _updateInterestRateModel(_interestRateModel);\\n    }\\n\\n    function _updateInterestRateModel(address _interestRateModel) internal {\\n        require(\\n            _interestRateModel != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n        interestRateModel = IInterestRateModel(_interestRateModel); // T:[PS-25]\\n        _updateBorrowRate(0); // T:[PS-26]\\n        emit NewInterestRateModel(_interestRateModel); // T:[PS-25]\\n    }\\n\\n    /// @dev Sets expected liquidity limit\\n    /// @param newLimit New expected liquidity limit\\n    function setExpectedLiquidityLimit(uint256 newLimit)\\n        external\\n        configuratorOnly // T:[PS-9]\\n    {\\n        expectedLiquidityLimit = newLimit; // T:[PS-30]\\n        emit NewExpectedLiquidityLimit(newLimit); // T:[PS-30]\\n    }\\n\\n    /// @dev Sets withdraw fee\\n    function setWithdrawFee(uint256 fee)\\n        public\\n        configuratorOnly // T:[PS-9]\\n    {\\n        require(\\n            fee <= Constants.MAX_WITHDRAW_FEE,\\n            Errors.POOL_INCORRECT_WITHDRAW_FEE\\n        ); // T:[PS-32]\\n        withdrawFee = fee; // T:[PS-33]\\n        emit NewWithdrawFee(fee); // T:[PS-33]\\n    }\\n\\n    /// @dev Returns quantity of connected credit accounts managers\\n    function creditManagersCount() external view override returns (uint256) {\\n        return creditManagers.length; // T:[PS-11]\\n    }\\n\\n    function calcCumulativeIndexAtBorrowMore(\\n        uint256 amount,\\n        uint256 dAmount,\\n        uint256 cumulativeIndexAtOpen\\n    ) external view override returns (uint256) {\\n        return\\n            calcLinearCumulative_RAY()\\n                .mul(cumulativeIndexAtOpen)\\n                .mul(amount.add(dAmount))\\n                .div(\\n                calcLinearCumulative_RAY().mul(amount).add(\\n                    dAmount.mul(cumulativeIndexAtOpen)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACLTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {AddressProvider} from \\\"./AddressProvider.sol\\\";\\nimport {ACL} from \\\"./ACL.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL Trait\\n/// @notice Trait which adds acl functions to contract\\nabstract contract ACLTrait is Pausable {\\n    // ACL contract to check rights\\n    ACL private _acl;\\n\\n    /// @dev constructor\\n    /// @param addressProvider Address of address repository\\n    constructor(address addressProvider) {\\n        require(\\n            addressProvider != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n\\n        _acl = ACL(AddressProvider(addressProvider).getACL());\\n    }\\n\\n    /// @dev  Reverts if msg.sender is not configurator\\n    modifier configuratorOnly() {\\n        require(\\n            _acl.isConfigurator(msg.sender),\\n            Errors.ACL_CALLER_NOT_CONFIGURATOR\\n        ); // T:[ACLT-8]\\n        _;\\n    }\\n\\n    ///@dev Pause contract\\n    function pause() external {\\n        require(\\n            _acl.isPausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1]\\n        _pause();\\n    }\\n\\n    /// @dev Unpause contract\\n    function unpause() external {\\n        require(\\n            _acl.isUnpausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1],[ACLT-2]\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * More info https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     */\\n    function ray() internal pure returns (uint256) {\\n        return RAY; // T:[WRM-1]\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     */\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD; // T:[WRM-1]\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     */\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY; // T:[WRM-2]\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     */\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD; // T:[WRM-2]\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0; // T:[WRM-3]\\n        }\\n\\n        require(\\n            a <= (type(uint256).max - halfWAD) / b,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-3]\\n\\n        return (a * b + halfWAD) / WAD; // T:[WRM-3]\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[WRM-4]\\n        uint256 halfB = b / 2;\\n\\n        require(\\n            a <= (type(uint256).max - halfB) / WAD,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-4]\\n\\n        return (a * WAD + halfB) / b; // T:[WRM-4]\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0; // T:[WRM-5]\\n        }\\n\\n        require(\\n            a <= (type(uint256).max - halfRAY) / b,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-5]\\n\\n        return (a * b + halfRAY) / RAY; // T:[WRM-5]\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[WRM-6]\\n        uint256 halfB = b / 2; // T:[WRM-6]\\n\\n        require(\\n            a <= (type(uint256).max - halfB) / RAY,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-6]\\n\\n        return (a * RAY + halfB) / b; // T:[WRM-6]\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2; // T:[WRM-7]\\n        uint256 result = halfRatio + a; // T:[WRM-7]\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW); // T:[WRM-7]\\n\\n        return result / WAD_RAY_RATIO; // T:[WRM-7]\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO; // T:[WRM-8]\\n        require(\\n            result / WAD_RAY_RATIO == a,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-8]\\n        return result; // T:[WRM-8]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0; // T:[PM-1]\\n        }\\n\\n        require(\\n            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-1]\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR; // T:[PM-1]\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[PM-2]\\n        uint256 halfPercentage = percentage / 2; // T:[PM-2]\\n\\n        require(\\n            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-2]\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title IInterestRateModel interface\\n/// @dev Interface for the calculation of the interest rates\\ninterface IInterestRateModel {\\n\\n    /// @dev Calculated borrow rate based on expectedLiquidity and availableLiquidity\\n    /// @param expectedLiquidity Expected liquidity in the pool\\n    /// @param availableLiquidity Available liquidity in the pool\\n    function calcBorrowRate(uint256 expectedLiquidity, uint256 availableLiquidity)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\nimport {IAppPoolService} from \\\"./app/IAppPoolService.sol\\\";\\n\\n\\n/// @title Pool Service Interface\\n/// @notice Implements business logic:\\n///   - Adding/removing pool liquidity\\n///   - Managing diesel tokens & diesel rates\\n///   - Lending/repaying funds to credit Manager\\n/// More: https://dev.gearbox.fi/developers/pool/abstractpoolservice\\ninterface IPoolService is IAppPoolService {\\n    // Emits each time when LP adds liquidity to the pool\\n    event AddLiquidity(\\n        address indexed sender,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 referralCode\\n    );\\n\\n    // Emits each time when LP removes liquidity to the pool\\n    event RemoveLiquidity(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    // Emits each time when Credit Manager borrows money from pool\\n    event Borrow(\\n        address indexed creditManager,\\n        address indexed creditAccount,\\n        uint256 amount\\n    );\\n\\n    // Emits each time when Credit Manager repays money from pool\\n    event Repay(\\n        address indexed creditManager,\\n        uint256 borrowedAmount,\\n        uint256 profit,\\n        uint256 loss\\n    );\\n\\n    // Emits each time when Interest Rate model was changed\\n    event NewInterestRateModel(address indexed newInterestRateModel);\\n\\n    // Emits each time when new credit Manager was connected\\n    event NewCreditManagerConnected(address indexed creditManager);\\n\\n    // Emits each time when borrow forbidden for credit manager\\n    event BorrowForbidden(address indexed creditManager);\\n\\n    // Emits each time when uncovered (non insured) loss accrued\\n    event UncoveredLoss(address indexed creditManager, uint256 loss);\\n\\n    // Emits after expected liquidity limit update\\n    event NewExpectedLiquidityLimit(uint256 newLimit);\\n\\n    // Emits each time when withdraw fee is udpated\\n    event NewWithdrawFee(uint256 fee);\\n\\n    //\\n    // LIQUIDITY MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Adds liquidity to pool\\n     * - transfers lp tokens to pool\\n     * - mint diesel (LP) tokens and provide them\\n     * @param amount Amount of tokens to be transfer\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    ) external override;\\n\\n    /**\\n     * @dev Removes liquidity from pool\\n     * - burns lp's diesel (LP) tokens\\n     * - returns underlying tokens to lp\\n     * @param amount Amount of tokens to be transfer\\n     * @param to Address to transfer liquidity\\n     */\\n\\n    function removeLiquidity(uint256 amount, address to)\\n        external\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @dev Transfers money from the pool to credit account\\n     * and updates the pool parameters\\n     * @param borrowedAmount Borrowed amount for credit account\\n     * @param creditAccount Credit account address\\n     */\\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount)\\n        external;\\n\\n    /**\\n     * @dev Recalculates total borrowed & borrowRate\\n     * mints/burns diesel tokens\\n     */\\n    function repayCreditAccount(\\n        uint256 borrowedAmount,\\n        uint256 profit,\\n        uint256 loss\\n    ) external;\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /**\\n     * @return expected pool liquidity\\n     */\\n    function expectedLiquidity() external view returns (uint256);\\n\\n    /**\\n     * @return expected liquidity limit\\n     */\\n    function expectedLiquidityLimit() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets available liquidity in the pool (pool balance)\\n     * @return available pool liquidity\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates interest accrued from the last update using the linear model\\n     */\\n    function calcLinearCumulative_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates borrow rate\\n     * @return borrow rate in RAY format\\n     */\\n    function borrowAPY_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the amount of total borrowed funds\\n     * @return Amount of borrowed funds at current time\\n     */\\n    function totalBorrowed() external view returns (uint256);\\n\\n    /**\\n     * @return Current diesel rate\\n     **/\\n\\n    function getDieselRate_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Underlying token address getter\\n     * @return address of underlying ERC-20 token\\n     */\\n    function underlyingToken() external view returns (address);\\n\\n    /**\\n     * @dev Diesel(LP) token address getter\\n     * @return address of diesel(LP) ERC-20 token\\n     */\\n    function dieselToken() external view returns (address);\\n\\n    /**\\n     * @dev Credit Manager address getter\\n     * @return address of Credit Manager contract by id\\n     */\\n    function creditManagers(uint256 id) external view returns (address);\\n\\n    /**\\n     * @dev Credit Managers quantity\\n     * @return quantity of connected credit Managers\\n     */\\n    function creditManagersCount() external view returns (uint256);\\n\\n    function creditManagersCanBorrow(address id) external view returns (bool);\\n\\n    function toDiesel(uint256 amount) external view returns (uint256);\\n\\n    function fromDiesel(uint256 amount) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    function _timestampLU() external view returns (uint256);\\n\\n    function _cumulativeIndex_RAY() external view returns (uint256);\\n\\n    function calcCumulativeIndexAtBorrowMore(\\n        uint256 amount,\\n        uint256 dAmount,\\n        uint256 cumulativeIndexAtOpen\\n    ) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditFilter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\ninterface ICreditFilter {\\n    // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenAllowed(address indexed token, uint256 liquidityThreshold);\\n\\n   // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenForbidden(address indexed token);\\n\\n    // Emits each time contract is allowed or adapter changed\\n    event ContractAllowed(address indexed protocol, address indexed adapter);\\n\\n    // Emits each time contract is forbidden\\n    event ContractForbidden(address indexed protocol);\\n\\n    // Emits each time when fast check parameters are updated\\n    event NewFastCheckParameters(uint256 chiThreshold, uint256 fastCheckDelay);\\n\\n    event TransferAccountAllowed(\\n        address indexed from,\\n        address indexed to,\\n        bool state\\n    );\\n\\n    event TransferPluginAllowed(\\n        address indexed pugin,\\n        bool state\\n    );\\n\\n    event PriceOracleUpdated(address indexed newPriceOracle);\\n\\n    //\\n    // STATE-CHANGING FUNCTIONS\\n    //\\n\\n    /// @dev Adds token to the list of allowed tokens\\n    /// @param token Address of allowed token\\n    /// @param liquidationThreshold The constant showing the maximum allowable ratio of Loan-To-Value for the i-th asset.\\n    function allowToken(address token, uint256 liquidationThreshold) external;\\n\\n    /// @dev Adds contract to the list of allowed contracts\\n    /// @param targetContract Address of contract to be allowed\\n    /// @param adapter Adapter contract address\\n    function allowContract(address targetContract, address adapter) external;\\n\\n    /// @dev Forbids contract and removes it from the list of allowed contracts\\n    /// @param targetContract Address of allowed contract\\n    function forbidContract(address targetContract) external;\\n\\n    /// @dev Checks financial order and reverts if tokens aren't in list or collateral protection alerts\\n    /// @param creditAccount Address of credit account\\n    /// @param tokenIn Address of token In in swap operation\\n    /// @param tokenOut Address of token Out in swap operation\\n    /// @param amountIn Amount of tokens in\\n    /// @param amountOut Amount of tokens out\\n    function checkCollateralChange(\\n        address creditAccount,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    ) external;\\n\\n    function checkMultiTokenCollateral(\\n        address creditAccount,\\n        uint256[] memory amountIn,\\n        uint256[] memory amountOut,\\n        address[] memory tokenIn,\\n        address[] memory tokenOut\\n    ) external;\\n\\n    /// @dev Connects credit managaer, hecks that all needed price feeds exists and finalize config\\n    function connectCreditManager(address poolService) external;\\n\\n    /// @dev Sets collateral protection for new credit accounts\\n    function initEnabledTokens(address creditAccount) external;\\n\\n    function checkAndEnableToken(address creditAccount, address token) external;\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /// @dev Returns quantity of contracts in allowed list\\n    function allowedContractsCount() external view returns (uint256);\\n\\n    /// @dev Returns of contract address from the allowed list by its id\\n    function allowedContracts(uint256 id) external view returns (address);\\n\\n    /// @dev Reverts if token isn't in token allowed list\\n    function revertIfTokenNotAllowed(address token) external view;\\n\\n    /// @dev Returns true if token is in allowed list otherwise false\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    /// @dev Returns quantity of tokens in allowed list\\n    function allowedTokensCount() external view returns (uint256);\\n\\n    /// @dev Returns of token address from allowed list by its id\\n    function allowedTokens(uint256 id) external view returns (address);\\n\\n    /// @dev Calculates total value for provided address\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#total-value\\n    ///\\n    /// @param creditAccount Token creditAccount address\\n    function calcTotalValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    /// @dev Calculates Threshold Weighted Total Value\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#threshold-weighted-value\\n    ///\\n    ///@param creditAccount Credit account address\\n    function calcThresholdWeightedValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    function contractToAdapter(address allowedContract)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @dev Returns address of underlying token\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address & balance of token by the id of allowed token in the list\\n    /// @param creditAccount Credit account address\\n    /// @param id Id of token in allowed list\\n    /// @return token Address of token\\n    /// @return balance Token balance\\n    function getCreditAccountTokenById(address creditAccount, uint256 id)\\n        external\\n        view\\n        returns (\\n            address token,\\n            uint256 balance,\\n            uint256 tv,\\n            uint256 twv\\n        );\\n\\n    /**\\n     * @dev Calculates health factor for the credit account\\n     *\\n     *         sum(asset[i] * liquidation threshold[i])\\n     *   Hf = --------------------------------------------\\n     *             borrowed amount + interest accrued\\n     *\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/economy#health-factor\\n     *\\n     * @param creditAccount Credit account address\\n     * @return Health factor in percents (see PERCENTAGE FACTOR in PercentageMath.sol)\\n     */\\n    function calcCreditAccountHealthFactor(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Calculates credit account interest accrued\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#interest-rate-accrued\\n    ///\\n    /// @param creditAccount Credit account address\\n    function calcCreditAccountAccruedInterest(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Return enabled tokens - token masks where each bit is \\\"1\\\" is token is enabled\\n    function enabledTokens(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidationThresholds(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function updateUnderlyingTokenLiquidationThreshold() external;\\n\\n    function revertIfCantIncreaseBorrowing(\\n        address creditAccount,\\n        uint256 minHealthFactor\\n    ) external view;\\n\\n    function revertIfAccountTransferIsNotAllowed(\\n        address onwer,\\n        address creditAccount\\n    ) external view;\\n\\n    function approveAccountTransfers(address from, bool state) external;\\n\\n    function allowanceForAccountTransfers(address from, address to)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {IAppCreditManager} from \\\"./app/IAppCreditManager.sol\\\";\\nimport {DataTypes} from \\\"../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Credit Manager interface\\n/// @notice It encapsulates business logic for managing credit accounts\\n///\\n/// More info: https://dev.gearbox.fi/developers/credit/credit_manager\\ninterface ICreditManager is IAppCreditManager {\\n    // Emits each time when the credit account is opened\\n    event OpenCreditAccount(\\n        address indexed sender,\\n        address indexed onBehalfOf,\\n        address indexed creditAccount,\\n        uint256 amount,\\n        uint256 borrowAmount,\\n        uint256 referralCode\\n    );\\n\\n    // Emits each time when the credit account is closed\\n    event CloseCreditAccount(\\n        address indexed owner,\\n        address indexed to,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when the credit account is liquidated\\n    event LiquidateCreditAccount(\\n        address indexed owner,\\n        address indexed liquidator,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when borrower increases borrowed amount\\n    event IncreaseBorrowedAmount(address indexed borrower, uint256 amount);\\n\\n    // Emits each time when borrower adds collateral\\n    event AddCollateral(\\n        address indexed onBehalfOf,\\n        address indexed token,\\n        uint256 value\\n    );\\n\\n    // Emits each time when the credit account is repaid\\n    event RepayCreditAccount(address indexed owner, address indexed to);\\n\\n    // Emit each time when financial order is executed\\n    event ExecuteOrder(address indexed borrower, address indexed target);\\n\\n    // Emits each time when new fees are set\\n    event NewParameters(\\n        uint256 minAmount,\\n        uint256 maxAmount,\\n        uint256 maxLeverage,\\n        uint256 feeInterest,\\n        uint256 feeLiquidation,\\n        uint256 liquidationDiscount\\n    );\\n\\n    event TransferAccount(address indexed oldOwner, address indexed newOwner);\\n\\n    //\\n    // CREDIT ACCOUNT MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Opens credit account and provides credit funds.\\n     * - Opens credit account (take it from account factory)\\n     * - Transfers trader /farmers initial funds to credit account\\n     * - Transfers borrowed leveraged amount from pool (= amount x leverageFactor) calling lendCreditAccount() on connected Pool contract.\\n     * - Emits OpenCreditAccount event\\n     * Function reverts if user has already opened position\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#open-credit-account\\n     *\\n     * @param amount Borrowers own funds\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param leverageFactor Multiplier to borrowers own funds\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external override;\\n\\n    /**\\n     * @dev Closes credit account\\n     * - Swaps all assets to underlying one using default swap protocol\\n     * - Pays borrowed amount + interest accrued + fees back to the pool by calling repayCreditAccount\\n     * - Transfers remaining funds to the trader / farmer\\n     * - Closes the credit account and return it to account factory\\n     * - Emits CloseCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#close-credit-account\\n     *\\n     * @param to Address to send remaining funds\\n     * @param paths Exchange type data which provides paths + amountMinOut\\n     */\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external\\n        override;\\n\\n    /**\\n     * @dev Liquidates credit account\\n     * - Transfers discounted total credit account value from liquidators account\\n     * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\n     * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\n     * - Returns credit account to factory\\n     * - Emits LiquidateCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\n     *\\n     * @param borrower Borrower address\\n     * @param to Address to transfer all assets from credit account\\n     * @param force If true, use transfer function for transferring tokens instead of safeTransfer\\n     */\\n    function liquidateCreditAccount(\\n        address borrower,\\n        address to,\\n        bool force\\n    ) external;\\n\\n    /// @dev Repays credit account\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#repay-credit-account\\n    ///\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccount(address to) external override;\\n\\n    /// @dev Repays credit account with ETH. Restricted to be called by WETH Gateway only\\n    ///\\n    /// @param borrower Address of borrower\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccountETH(address borrower, address to)\\n        external\\n        returns (uint256);\\n\\n    /// @dev Increases borrowed amount by transferring additional funds from\\n    /// the pool if after that HealthFactor > minHealth\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrowed-amount\\n    ///\\n    /// @param amount Amount to increase borrowed amount\\n    function increaseBorrowedAmount(uint256 amount) external override;\\n\\n    /// @dev Adds collateral to borrower's credit account\\n    /// @param onBehalfOf Address of borrower to add funds\\n    /// @param token Token address\\n    /// @param amount Amount to add\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external override;\\n\\n    /// @dev Returns true if the borrower has opened a credit account\\n    /// @param borrower Borrower account\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        override\\n        returns (bool);\\n\\n    /// @dev Calculates Repay amount = borrow amount + interest accrued + fee\\n    ///\\n    /// More info: https://dev.gearbox.fi/developers/credit/economy#repay\\n    ///           https://dev.gearbox.fi/developers/credit/economy#liquidate\\n    ///\\n    /// @param borrower Borrower address\\n    /// @param isLiquidated True if calculated repay amount for liquidator\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        override\\n        returns (uint256);\\n\\n    /// @dev Returns minimal amount for open credit account\\n    function minAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum amount for open credit account\\n    function maxAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum leveraged factor allowed for this pool\\n    function maxLeverageFactor() external view returns (uint256);\\n\\n    /// @dev Returns underlying token address\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address of connected pool\\n    function poolService() external view returns (address);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditFilter() external view returns (ICreditFilter);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditAccounts(address borrower) external view returns (address);\\n\\n    /// @dev Executes filtered order on credit account which is connected with particular borrowers\\n    /// @param borrower Borrower address\\n    /// @param target Target smart-contract\\n    /// @param data Call data for call\\n    function executeOrder(\\n        address borrower,\\n        address target,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @dev Approves token for msg.sender's credit account\\n    function approve(address targetContract, address token) external;\\n\\n    /// @dev Approve tokens for credit accounts. Restricted for adapters only\\n    function provideCreditAccountAllowance(\\n        address creditAccount,\\n        address toContract,\\n        address token\\n    ) external;\\n\\n    function transferAccountOwnership(address newOwner) external;\\n\\n    /// @dev Returns address of borrower's credit account and reverts of borrower has no one.\\n    /// @param borrower Borrower address\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        override\\n        returns (address);\\n\\n//    function feeSuccess() external view returns (uint256);\\n\\n    function feeInterest() external view returns (uint256);\\n\\n    function feeLiquidation() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function minHealthFactor() external view returns (uint256);\\n\\n    function defaultSwapContract() external view override returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/core/AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {IAppAddressProvider} from \\\"../interfaces/app/IAppAddressProvider.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title AddressRepository\\n/// @notice Stores addresses of deployed contracts\\ncontract AddressProvider is Ownable, IAppAddressProvider {\\n    // Mapping which keeps all addresses\\n    mapping(bytes32 => address) public addresses;\\n\\n    // Emits each time when new address is set\\n    event AddressSet(bytes32 indexed service, address indexed newAddress);\\n\\n    // This event is triggered when a call to ClaimTokens succeeds.\\n    event Claimed(uint256 user_id, address account, uint256 amount, bytes32 leaf);\\n\\n    // Repositories & services\\n    bytes32 public constant CONTRACTS_REGISTER = \\\"CONTRACTS_REGISTER\\\";\\n    bytes32 public constant ACL = \\\"ACL\\\";\\n    bytes32 public constant PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\n    bytes32 public constant ACCOUNT_FACTORY = \\\"ACCOUNT_FACTORY\\\";\\n    bytes32 public constant DATA_COMPRESSOR = \\\"DATA_COMPRESSOR\\\";\\n    bytes32 public constant TREASURY_CONTRACT = \\\"TREASURY_CONTRACT\\\";\\n    bytes32 public constant GEAR_TOKEN = \\\"GEAR_TOKEN\\\";\\n    bytes32 public constant WETH_TOKEN = \\\"WETH_TOKEN\\\";\\n    bytes32 public constant WETH_GATEWAY = \\\"WETH_GATEWAY\\\";\\n    bytes32 public constant LEVERAGED_ACTIONS = \\\"LEVERAGED_ACTIONS\\\";\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    constructor() {\\n        // @dev Emits first event for contract discovery\\n        emit AddressSet(\\\"ADDRESS_PROVIDER\\\", address(this));\\n    }\\n\\n    /// @return Address of ACL contract\\n    function getACL() external view returns (address) {\\n        return _getAddress(ACL); // T:[AP-3]\\n    }\\n\\n    /// @dev Sets address of ACL contract\\n    /// @param _address Address of ACL contract\\n    function setACL(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACL, _address); // T:[AP-3]\\n    }\\n\\n    /// @return Address of ContractsRegister\\n    function getContractsRegister() external view returns (address) {\\n        return _getAddress(CONTRACTS_REGISTER); // T:[AP-4]\\n    }\\n\\n    /// @dev Sets address of ContractsRegister\\n    /// @param _address Address of ContractsRegister\\n    function setContractsRegister(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(CONTRACTS_REGISTER, _address); // T:[AP-4]\\n    }\\n\\n    /// @return Address of PriceOracle\\n    function getPriceOracle() external view override returns (address) {\\n        return _getAddress(PRICE_ORACLE); // T:[AP-5]\\n    }\\n\\n    /// @dev Sets address of PriceOracle\\n    /// @param _address Address of PriceOracle\\n    function setPriceOracle(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(PRICE_ORACLE, _address); // T:[AP-5]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getAccountFactory() external view returns (address) {\\n        return _getAddress(ACCOUNT_FACTORY); // T:[AP-6]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setAccountFactory(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACCOUNT_FACTORY, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getDataCompressor() external view override returns (address) {\\n        return _getAddress(DATA_COMPRESSOR); // T:[AP-8]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setDataCompressor(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(DATA_COMPRESSOR, _address); // T:[AP-8]\\n    }\\n\\n    /// @return Address of Treasury contract\\n    function getTreasuryContract() external view returns (address) {\\n        return _getAddress(TREASURY_CONTRACT); //T:[AP-11]\\n    }\\n\\n    /// @dev Sets address of Treasury Contract\\n    /// @param _address Address of Treasury Contract\\n    function setTreasuryContract(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(TREASURY_CONTRACT, _address); //T:[AP-11]\\n    }\\n\\n    /// @return Address of GEAR token\\n    function getGearToken() external view override returns (address) {\\n        return _getAddress(GEAR_TOKEN); // T:[AP-12]\\n    }\\n\\n    /// @dev Sets address of GEAR token\\n    /// @param _address Address of GEAR token\\n    function setGearToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(GEAR_TOKEN, _address); // T:[AP-12]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWethToken() external view override returns (address) {\\n        return _getAddress(WETH_TOKEN); // T:[AP-13]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWethToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_TOKEN, _address); // T:[AP-13]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWETHGateway() external view override returns (address) {\\n        return _getAddress(WETH_GATEWAY); // T:[AP-14]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWETHGateway(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_GATEWAY, _address); // T:[AP-14]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getLeveragedActions() external view override returns (address) {\\n        return _getAddress(LEVERAGED_ACTIONS); // T:[AP-7]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setLeveragedActions(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(LEVERAGED_ACTIONS, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of key, reverts if key doesn't exist\\n    function _getAddress(bytes32 key) internal view returns (address) {\\n        address result = addresses[key];\\n        require(result != address(0), Errors.AS_ADDRESS_NOT_FOUND); // T:[AP-1]\\n        return result; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n    }\\n\\n    /// @dev Sets address to map by its key\\n    /// @param key Key in string format\\n    /// @param value Address\\n    function _setAddress(bytes32 key, address value) internal {\\n        addresses[key] = value; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n        emit AddressSet(key, value); // T:[AP-2]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DieselToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @dev DieselToken is LP token for Gearbox pools\\ncontract DieselToken is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) ERC20(name_, symbol_) {\\n        _setupDecimals(decimals_);\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address to, uint256 amount) external onlyOwner {\\n        _burn(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\n\\nlibrary Constants {\\n    uint256 constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // 25% of MAX_INT\\n    uint256 constant MAX_INT_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // REWARD FOR LEAN DEPLOYMENT MINING\\n    uint256 constant ACCOUNT_CREATION_REWARD = 1e5;\\n    uint256 constant DEPLOYMENT_COST = 1e17;\\n\\n    // FEE = 10%\\n    uint256 constant FEE_INTEREST = 1000; // 10%\\n\\n    // FEE + LIQUIDATION_FEE 2%\\n    uint256 constant FEE_LIQUIDATION = 200;\\n\\n    // Liquidation premium 5%\\n    uint256 constant LIQUIDATION_DISCOUNTED_SUM = 9500;\\n\\n    // 100% - LIQUIDATION_FEE - LIQUIDATION_PREMIUM\\n    uint256 constant UNDERLYING_TOKEN_LIQUIDATION_THRESHOLD =\\n        LIQUIDATION_DISCOUNTED_SUM - FEE_LIQUIDATION;\\n\\n    // Seconds in a year\\n    uint256 constant SECONDS_PER_YEAR = 365 days;\\n    uint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = SECONDS_PER_YEAR * 3 /2;\\n\\n    // 1e18\\n    uint256 constant RAY = 1e27;\\n    uint256 constant WAD = 1e18;\\n\\n    // OPERATIONS\\n    uint8 constant OPERATION_CLOSURE = 1;\\n    uint8 constant OPERATION_REPAY = 2;\\n    uint8 constant OPERATION_LIQUIDATION = 3;\\n\\n    // Decimals for leverage, so x4 = 4*LEVERAGE_DECIMALS for openCreditAccount function\\n    uint8 constant LEVERAGE_DECIMALS = 100;\\n\\n    // Maximum withdraw fee for pool in percentage math format. 100 = 1%\\n    uint8 constant MAX_WITHDRAW_FEE = 100;\\n\\n    uint256 constant CHI_THRESHOLD = 9950;\\n    uint256 constant HF_CHECK_INTERVAL_DEFAULT = 4;\\n\\n    uint256 constant NO_SWAP = 0;\\n    uint256 constant UNISWAP_V2 = 1;\\n    uint256 constant UNISWAP_V3 = 2;\\n    uint256 constant CURVE_V1 = 3;\\n    uint256 constant LP_YEARN = 4;\\n\\n    uint256 constant EXACT_INPUT = 1;\\n    uint256 constant EXACT_OUTPUT = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Errors library\\nlibrary Errors {\\n    //\\n    // COMMON\\n    //\\n\\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \\\"Z0\\\";\\n    string public constant NOT_IMPLEMENTED = \\\"NI\\\";\\n    string public constant INCORRECT_PATH_LENGTH = \\\"PL\\\";\\n    string public constant INCORRECT_ARRAY_LENGTH = \\\"CR\\\";\\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \\\"CP\\\";\\n    string public constant REGISTERED_POOLS_ONLY = \\\"RP\\\";\\n    string public constant INCORRECT_PARAMETER = \\\"IP\\\";\\n\\n    //\\n    // MATH\\n    //\\n\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"M1\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"M2\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"M3\\\";\\n\\n    //\\n    // POOL\\n    //\\n\\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \\\"PS0\\\";\\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \\\"PS1\\\";\\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \\\"PS2\\\";\\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \\\"PS3\\\";\\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \\\"PS4\\\";\\n\\n    //\\n    // CREDIT MANAGER\\n    //\\n\\n    string public constant CM_NO_OPEN_ACCOUNT = \\\"CM1\\\";\\n    string\\n        public constant CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT =\\n        \\\"CM2\\\";\\n\\n    string public constant CM_INCORRECT_AMOUNT = \\\"CM3\\\";\\n    string public constant CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM4\\\";\\n    string public constant CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM5\\\";\\n    string public constant CM_WETH_GATEWAY_ONLY = \\\"CM6\\\";\\n    string public constant CM_INCORRECT_PARAMS = \\\"CM7\\\";\\n    string public constant CM_INCORRECT_FEES = \\\"CM8\\\";\\n    string public constant CM_MAX_LEVERAGE_IS_TOO_HIGH = \\\"CM9\\\";\\n    string public constant CM_CANT_CLOSE_WITH_LOSS = \\\"CMA\\\";\\n    string public constant CM_TARGET_CONTRACT_iS_NOT_ALLOWED = \\\"CMB\\\";\\n    string public constant CM_TRANSFER_FAILED = \\\"CMC\\\";\\n    string public constant CM_INCORRECT_NEW_OWNER = \\\"CME\\\";\\n\\n    //\\n    // ACCOUNT FACTORY\\n    //\\n\\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\\n        \\\"AF1\\\";\\n    string public constant AF_MINING_IS_FINISHED = \\\"AF2\\\";\\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \\\"AF3\\\";\\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \\\"AF4\\\";\\n\\n    //\\n    // ADDRESS PROVIDER\\n    //\\n\\n    string public constant AS_ADDRESS_NOT_FOUND = \\\"AP1\\\";\\n\\n    //\\n    // CONTRACTS REGISTER\\n    //\\n\\n    string public constant CR_POOL_ALREADY_ADDED = \\\"CR1\\\";\\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \\\"CR2\\\";\\n\\n    //\\n    // CREDIT_FILTER\\n    //\\n\\n    string public constant CF_UNDERLYING_TOKEN_FILTER_CONFLICT = \\\"CF0\\\";\\n    string public constant CF_INCORRECT_LIQUIDATION_THRESHOLD = \\\"CF1\\\";\\n    string public constant CF_TOKEN_IS_NOT_ALLOWED = \\\"CF2\\\";\\n    string public constant CF_CREDIT_MANAGERS_ONLY = \\\"CF3\\\";\\n    string public constant CF_ADAPTERS_ONLY = \\\"CF4\\\";\\n    string public constant CF_OPERATION_LOW_HEALTH_FACTOR = \\\"CF5\\\";\\n    string public constant CF_TOO_MUCH_ALLOWED_TOKENS = \\\"CF6\\\";\\n    string public constant CF_INCORRECT_CHI_THRESHOLD = \\\"CF7\\\";\\n    string public constant CF_INCORRECT_FAST_CHECK = \\\"CF8\\\";\\n    string public constant CF_NON_TOKEN_CONTRACT = \\\"CF9\\\";\\n    string public constant CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST = \\\"CFA\\\";\\n    string public constant CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP = \\\"CFB\\\";\\n    string public constant CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE =\\n        \\\"CFC\\\";\\n    string public constant CF_ADAPTER_CAN_BE_USED_ONLY_ONCE = \\\"CFD\\\";\\n    string public constant CF_INCORRECT_PRICEFEED = \\\"CFE\\\";\\n    string public constant CF_TRANSFER_IS_NOT_ALLOWED = \\\"CFF\\\";\\n    string public constant CF_CREDIT_MANAGER_IS_ALREADY_SET = \\\"CFG\\\";\\n\\n    //\\n    // CREDIT ACCOUNT\\n    //\\n\\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \\\"CA1\\\";\\n    string public constant CA_FACTORY_ONLY = \\\"CA2\\\";\\n\\n    //\\n    // PRICE ORACLE\\n    //\\n\\n    string public constant PO_PRICE_FEED_DOESNT_EXIST = \\\"PO0\\\";\\n    string public constant PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED = \\\"PO1\\\";\\n    string public constant PO_AGGREGATOR_DECIMALS_SHOULD_BE_18 = \\\"PO2\\\";\\n\\n    //\\n    // ACL\\n    //\\n\\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \\\"ACL1\\\";\\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \\\"ACL2\\\";\\n\\n    //\\n    // WETH GATEWAY\\n    //\\n\\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \\\"WG1\\\";\\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \\\"WG2\\\";\\n    string public constant WG_NOT_ENOUGH_FUNDS = \\\"WG3\\\";\\n\\n    //\\n    // LEVERAGED ACTIONS\\n    //\\n\\n    string public constant LA_INCORRECT_VALUE = \\\"LA1\\\";\\n    string public constant LA_HAS_VALUE_WITH_TOKEN_TRANSFER = \\\"LA2\\\";\\n    string public constant LA_UNKNOWN_SWAP_INTERFACE = \\\"LA3\\\";\\n    string public constant LA_UNKNOWN_LP_INTERFACE = \\\"LA4\\\";\\n    string public constant LA_LOWER_THAN_AMOUNT_MIN = \\\"LA5\\\";\\n    string public constant LA_TOKEN_OUT_IS_NOT_COLLATERAL = \\\"LA6\\\";\\n\\n    //\\n    // YEARN PRICE FEED\\n    //\\n    string public constant YPF_PRICE_PER_SHARE_OUT_OF_RANGE = \\\"YP1\\\";\\n    string public constant YPF_INCORRECT_LIMITER_PARAMETERS = \\\"YP2\\\";\\n\\n    //\\n    // TOKEN DISTRIBUTOR\\n    //\\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \\\"TD1\\\";\\n    string public constant TD_INCORRECT_WEIGHTS = \\\"TD2\\\";\\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \\\"TD3\\\";\\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \\\"TD4\\\";\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL keeps admins addresses\\n/// More info: https://dev.gearbox.fi/security/roles\\ncontract ACL is Ownable {\\n    mapping(address => bool) public pausableAdminSet;\\n    mapping(address => bool) public unpausableAdminSet;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    // emits each time when new pausable admin added\\n    event PausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each time when pausable admin removed\\n    event PausableAdminRemoved(address indexed admin);\\n\\n    // emits each time when new unpausable admin added\\n    event UnpausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each times when unpausable admin removed\\n    event UnpausableAdminRemoved(address indexed admin);\\n\\n    /// @dev Adds pausable admin address\\n    /// @param newAdmin Address of new pausable admin\\n    function addPausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[newAdmin] = true; // T:[ACL-2]\\n        emit PausableAdminAdded(newAdmin); // T:[ACL-2]\\n    }\\n\\n    /// @dev Removes pausable admin\\n    /// @param admin Address of admin which should be removed\\n    function removePausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[admin] = false; // T:[ACL-3]\\n        emit PausableAdminRemoved(admin); // T:[ACL-3]\\n    }\\n\\n    /// @dev Returns true if the address is pausable admin and false if not\\n    function isPausableAdmin(address addr) external view returns (bool) {\\n        return pausableAdminSet[addr]; // T:[ACL-2,3]\\n    }\\n\\n    /// @dev Adds unpausable admin address to the list\\n    /// @param newAdmin Address of new unpausable admin\\n    function addUnpausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[newAdmin] = true; // T:[ACL-4]\\n        emit UnpausableAdminAdded(newAdmin); // T:[ACL-4]\\n    }\\n\\n    /// @dev Removes unpausable admin\\n    /// @param admin Address of admin to be removed\\n    function removeUnpausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[admin] = false; // T:[ACL-5]\\n        emit UnpausableAdminRemoved(admin); // T:[ACL-5]\\n    }\\n\\n    /// @dev Returns true if the address is unpausable admin and false if not\\n    function isUnpausableAdmin(address addr) external view returns (bool) {\\n        return unpausableAdminSet[addr]; // T:[ACL-4,5]\\n    }\\n\\n    /// @dev Returns true if addr has configurator rights\\n    function isConfigurator(address account) external view returns (bool) {\\n        return account == owner(); // T:[ACL-6]\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Optimised for front-end Address Provider interface\\ninterface IAppAddressProvider {\\n    function getDataCompressor() external view returns (address);\\n\\n    function getGearToken() external view returns (address);\\n\\n    function getWethToken() external view returns (address);\\n\\n    function getWETHGateway() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getLeveragedActions() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppPoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n/// @title POptimised for front-end Pool Service Interface\\ninterface IAppPoolService {\\n\\n    function addLiquidity(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    ) external;\\n\\n    function removeLiquidity(uint256 amount, address to) external returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppCreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {DataTypes} from \\\"../../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Optimised for front-end credit Manager interface\\n/// @notice It's optimised for light-weight abi\\ninterface IAppCreditManager {\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external;\\n\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external;\\n\\n    function repayCreditAccount(address to) external;\\n\\n    function increaseBorrowedAmount(uint256 amount) external;\\n\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        returns (address);\\n\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        returns (bool);\\n\\n    function defaultSwapContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/data/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title DataType library\\n/// @notice Contains data types used in data compressor.\\nlibrary DataTypes {\\n    struct Exchange {\\n        address[] path;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct TokenBalance {\\n        address token;\\n        uint256 balance;\\n        bool isAllowed;\\n    }\\n\\n    struct ContractAdapter {\\n        address allowedContract;\\n        address adapter;\\n    }\\n\\n    struct CreditAccountData {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n    }\\n\\n    struct CreditAccountDataExtended {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n        uint256 repayAmount;\\n        uint256 liquidationAmount;\\n        bool canBeClosed;\\n        uint256 borrowedAmount;\\n        uint256 cumulativeIndexAtOpen;\\n        uint256 since;\\n    }\\n\\n    struct CreditManagerData {\\n        address addr;\\n        bool hasAccount;\\n        address underlyingToken;\\n        bool isWETH;\\n        bool canBorrow;\\n        uint256 borrowRate;\\n        uint256 minAmount;\\n        uint256 maxAmount;\\n        uint256 maxLeverageFactor;\\n        uint256 availableLiquidity;\\n        address[] allowedTokens;\\n        ContractAdapter[] adapters;\\n    }\\n\\n    struct PoolData {\\n        address addr;\\n        bool isWETH;\\n        address underlyingToken;\\n        address dieselToken;\\n        uint256 linearCumulativeIndex;\\n        uint256 availableLiquidity;\\n        uint256 expectedLiquidity;\\n        uint256 expectedLiquidityLimit;\\n        uint256 totalBorrowed;\\n        uint256 depositAPY_RAY;\\n        uint256 borrowAPY_RAY;\\n        uint256 dieselRate_RAY;\\n        uint256 withdrawFee;\\n        uint256 cumulativeIndex_RAY;\\n        uint256 timestampLU;\\n    }\\n\\n    struct TokenInfo {\\n        address addr;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct AddressProviderData {\\n        address contractRegister;\\n        address acl;\\n        address priceOracle;\\n        address traderAccountFactory;\\n        address dataCompressor;\\n        address farmingFactory;\\n        address accountMiner;\\n        address treasuryContract;\\n        address gearToken;\\n        address wethToken;\\n        address wethGateway;\\n    }\\n\\n    struct MiningApproval {\\n        address token;\\n        address swapContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dieselAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateModelAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expectedLiquidityLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"BorrowForbidden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"}],\"name\":\"NewCreditManagerConnected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"NewExpectedLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"UncoveredLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cumulativeIndex_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expectedLiquidityLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timestampLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract AddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowAPY_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeIndexAtOpen\",\"type\":\"uint256\"}],\"name\":\"calcCumulativeIndexAtBorrowMore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcLinearCumulative_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeIndex_RAY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate_RAY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"}],\"name\":\"calcLinearIndex_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"}],\"name\":\"connectCreditManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditManagersCanBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditManagersCanRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditManagersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dieselToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedLiquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"}],\"name\":\"forbidCreditManagerToBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromDiesel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDieselRate_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\"}],\"name\":\"lendCreditAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"repayCreditAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setExpectedLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toDiesel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\"}],\"name\":\"updateInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolService","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cf64698aff7e5f27a11dff868af228653ba53be00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000006cfaf95457d7688022fc53e7abe052ef8dfbbdba000000000000000000000000f37d605f6428576529657e24dfb439803f602118000000000000000000000000000000000000000000027b46536c66c8e3000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}