{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPerpetualManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\"\r\n    },\r\n    \"contracts/poolManager/PoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerInternal.sol\\\";\\n\\n/// @title PoolManager\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains the functions that are callable by governance or by other contracts of the protocol\\n/// @dev References to this contract are called `PoolManager`\\ncontract PoolManager is PoolManagerInternal, IPoolManagerFunctions {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Constructor of the `PoolManager` contract\\n    /// @param _token Address of the collateral\\n    /// @param _stableMaster Reference to the master stablecoin (`StableMaster`) interface\\n    function initialize(address _token, IStableMaster _stableMaster)\\n        external\\n        initializer\\n        zeroCheck(_token)\\n        zeroCheck(address(_stableMaster))\\n    {\\n        __AccessControl_init();\\n\\n        // Creating the correct references\\n        stableMaster = _stableMaster;\\n        token = IERC20(_token);\\n\\n        // Access Control\\n        // The roles in this contract can only be modified from the `StableMaster`\\n        // For the moment `StableMaster` never uses the `GOVERNOR_ROLE`\\n        _setupRole(STABLEMASTER_ROLE, address(stableMaster));\\n        _setRoleAdmin(STABLEMASTER_ROLE, STABLEMASTER_ROLE);\\n        _setRoleAdmin(GOVERNOR_ROLE, STABLEMASTER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, STABLEMASTER_ROLE);\\n        // No admin is set for `STRATEGY_ROLE`, checks are made in the appropriate functions\\n        // `addStrategy` and `revokeStrategy`\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ========================= `StableMaster` Functions ==========================\\n\\n    /// @notice Changes the references to contracts from this protocol with which this collateral `PoolManager` interacts\\n    /// and propagates some references to the `perpetualManager` and `feeManager` contracts\\n    /// @param governorList List of the governor addresses of protocol\\n    /// @param guardian Address of the guardian of the protocol (it can be revoked)\\n    /// @param _perpetualManager New reference to the `PerpetualManager` contract containing all the logic for HAs\\n    /// @param _feeManager Reference to the `FeeManager` contract that will serve for the `PerpetualManager` contract\\n    /// @param _oracle Reference to the `Oracle` contract that will serve for the `PerpetualManager` contract\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager _feeManager,\\n        IOracle _oracle\\n    ) external override onlyRole(STABLEMASTER_ROLE) {\\n        // These references need to be stored to be able to propagate changes and maintain\\n        // the protocol's integrity when changes are posted from the `StableMaster`\\n        perpetualManager = _perpetualManager;\\n        feeManager = _feeManager;\\n\\n        // Access control\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _grantRole(GOVERNOR_ROLE, governorList[i]);\\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n\\n        // Propagates the changes to the other involved contracts\\n        perpetualManager.deployCollateral(governorList, guardian, _feeManager, _oracle);\\n        _feeManager.deployCollateral(governorList, guardian, address(_perpetualManager));\\n\\n        // `StableMaster` and `PerpetualManager` need to have approval to directly transfer some of\\n        // this contract's tokens\\n        token.safeIncreaseAllowance(address(stableMaster), type(uint256).max);\\n        token.safeIncreaseAllowance(address(_perpetualManager), type(uint256).max);\\n    }\\n\\n    /// @notice Adds a new governor address and echoes it to other contracts\\n    /// @param _governor New governor address\\n    function addGovernor(address _governor) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Access control for this contract\\n        _grantRole(GOVERNOR_ROLE, _governor);\\n        // Echoes the change to other contracts interacting with this collateral `PoolManager`\\n        // Since the other contracts interacting with this `PoolManager` do not have governor roles,\\n        // we just need it to set the new governor as guardian in these contracts\\n        _addGuardian(_governor);\\n    }\\n\\n    /// @notice Removes a governor address and echoes it to other contracts\\n    /// @param _governor Governor address to remove\\n    function removeGovernor(address _governor) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Access control for this contract\\n        _revokeRole(GOVERNOR_ROLE, _governor);\\n        _revokeGuardian(_governor);\\n    }\\n\\n    /// @notice Changes the guardian address and echoes it to other contracts that interact with this `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @param guardian Old guardian address to revoke\\n    function setGuardian(address _guardian, address guardian) external override onlyRole(STABLEMASTER_ROLE) {\\n        _revokeGuardian(guardian);\\n        _addGuardian(_guardian);\\n    }\\n\\n    /// @notice Revokes the guardian address and echoes the change to other contracts that interact with this `PoolManager`\\n    /// @param guardian Address of the guardian to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(STABLEMASTER_ROLE) {\\n        _revokeGuardian(guardian);\\n    }\\n\\n    /// @notice Allows to propagate the change of keeper for the collateral/stablecoin pair\\n    /// @param _feeManager New `FeeManager` contract\\n    function setFeeManager(IFeeManager _feeManager) external override onlyRole(STABLEMASTER_ROLE) {\\n        // Changing the reference in the `PerpetualManager` contract where keepers are involved\\n        feeManager = _feeManager;\\n        perpetualManager.setFeeManager(_feeManager);\\n    }\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Provides an estimated Annual Percentage Rate for SLPs based on lending to other protocols\\n    /// @dev This function is an estimation and is made for external use only\\n    /// @dev This does not take into account transaction fees which accrue to SLPs too\\n    /// @dev This can be manipulated by a flash loan attack (SLP deposit/ withdraw) via `_getTotalAsset`\\n    /// when entering you should make sure this hasn't be called by a flash loan and look\\n    /// at a mean of past APR.\\n    function estimatedAPR() external view returns (uint256 apr) {\\n        apr = 0;\\n        (, ISanToken sanTokenForAPR, , , , uint256 sanRate, , SLPData memory slpData, ) = stableMaster.collateralMap(\\n            IPoolManager(address(this))\\n        );\\n        uint256 supply = sanTokenForAPR.totalSupply();\\n\\n        // `sanRate` should never be equal to 0\\n        if (supply == 0) return type(uint256).max;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            apr =\\n                apr +\\n                (strategies[strategyList[i]].debtRatio * IStrategy(strategyList[i]).estimatedAPR()) /\\n                BASE_PARAMS;\\n        }\\n        apr = (apr * slpData.interestsForSLPs * _getTotalAsset()) / sanRate / supply;\\n    }\\n\\n    /// @notice Tells a strategy how much it can borrow from this `PoolManager`\\n    /// @return Amount of token a strategy has access to as a credit line\\n    /// @dev Since this function is a view function, there is no need to have an access control logic\\n    /// even though it will just be relevant for a strategy\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function creditAvailable() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target < params.totalStrategyDebt) return 0;\\n\\n        return Math.min(target - params.totalStrategyDebt, _getBalance());\\n    }\\n\\n    /// @notice Tells a strategy how much it owes to this `PoolManager`\\n    /// @return Amount of token a strategy has to reimburse\\n    /// @dev Manipulating `_getTotalAsset` with a flashloan will only\\n    /// result in tokens being transferred at the cost of the caller\\n    function debtOutstanding() external view override returns (uint256) {\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        uint256 target = (_getTotalAsset() * params.debtRatio) / BASE_PARAMS;\\n\\n        if (target > params.totalStrategyDebt) return 0;\\n\\n        return (params.totalStrategyDebt - target);\\n    }\\n\\n    /// @notice Reports the gains or loss made by a strategy\\n    /// @param gain Amount strategy has realized as a gain on its investment since its\\n    /// last report, and is free to be given back to `PoolManager` as earnings\\n    /// @param loss Amount strategy has realized as a loss on its investment since its\\n    /// last report, and should be accounted for on the `PoolManager`'s balance sheet.\\n    /// The loss will reduce the `debtRatio`. The next time the strategy will harvest,\\n    /// it will pay back the debt in an attempt to adjust to the new debt limit.\\n    /// @param debtPayment Amount strategy has made available to cover outstanding debt\\n    /// @dev This is the main contact point where the strategy interacts with the `PoolManager`\\n    /// @dev The strategy reports back what it has free, then the `PoolManager` contract \\\"decides\\\"\\n    /// whether to take some back or give it more. Note that the most it can\\n    /// take is `gain + _debtPayment`, and the most it can give is all of the\\n    /// remaining reserves. Anything outside of those bounds is abnormal behavior.\\n    function report(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment\\n    ) external override onlyRole(STRATEGY_ROLE) {\\n        require(token.balanceOf(msg.sender) >= gain + debtPayment, \\\"72\\\");\\n\\n        StrategyParams storage params = strategies[msg.sender];\\n\\n        // Updating parameters in the `perpetualManager`\\n        // This needs to be done now because it has implications in `_getTotalAsset()`\\n        params.totalStrategyDebt = params.totalStrategyDebt + gain - loss;\\n        totalDebt = totalDebt + gain - loss;\\n        params.lastReport = block.timestamp;\\n\\n        // Warning: `_getTotalAsset` could be manipulated by flashloan attacks.\\n        // It may allow external users to transfer funds into strategy or remove funds\\n        // from the strategy. Yet, as it does not impact the profit or loss and as attackers\\n        // have no interest in making such txs to have a direct profit, we let it as is.\\n        // The only issue is if the strategy is compromised; in this case governance\\n        // should revoke the strategy\\n        uint256 target = ((_getTotalAsset()) * params.debtRatio) / BASE_PARAMS;\\n        if (target > params.totalStrategyDebt) {\\n            // If the strategy has some credit left, tokens can be transferred to this strategy\\n            uint256 available = Math.min(target - params.totalStrategyDebt, _getBalance());\\n            params.totalStrategyDebt = params.totalStrategyDebt + available;\\n            totalDebt = totalDebt + available;\\n            if (available > 0) {\\n                token.safeTransfer(msg.sender, available);\\n            }\\n        } else {\\n            uint256 available = Math.min(params.totalStrategyDebt - target, debtPayment + gain);\\n            params.totalStrategyDebt = params.totalStrategyDebt - available;\\n            totalDebt = totalDebt - available;\\n            if (available > 0) {\\n                token.safeTransferFrom(msg.sender, address(this), available);\\n            }\\n        }\\n        emit StrategyReported(msg.sender, gain, loss, debtPayment, params.totalStrategyDebt);\\n\\n        // Handle gains before losses\\n        if (gain > 0) {\\n            stableMaster.accumulateInterest(gain);\\n            emit FeesDistributed(gain);\\n        }\\n\\n        // Handle eventual losses\\n        if (loss > 0) {\\n            stableMaster.signalLoss(loss);\\n        }\\n    }\\n\\n    // =========================== Governor Functions ==============================\\n\\n    /// @notice Allows to recover any ERC20 token, including the token handled by this contract, and to send it\\n    /// to a contract\\n    /// @param tokenAddress Address of the token to recover\\n    /// @param to Address of the contract to send collateral to\\n    /// @param amountToRecover Amount of collateral to transfer\\n    /// @dev As this function can be used to transfer funds to another contract, it has to be a `GOVERNOR` function\\n    /// @dev In case the concerned token is the specific token handled by this contract, this function checks that the\\n    /// amount entered is not too big and approximates the surplus of the protocol\\n    /// @dev To esimate the amount of user claims on the concerned collateral, this function uses the `stocksUsers` for\\n    /// this collateral, but this is just an approximation as users can claim the collateral of their choice provided\\n    /// that they own a stablecoin\\n    /// @dev The sanity check excludes the HA claims: to get a sense of it, this function would need to compute the cash out\\n    /// amount of all the perpetuals, and this cannot be done on-chain in a cheap manner\\n    /// @dev Overall, even though there is a sanity check, this function relies on the fact that governance is not corrupted\\n    /// in this protocol and will not try to withdraw too much funds\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        if (tokenAddress == address(token)) {\\n            // Fetching info from the `StableMaster`\\n            (\\n                ,\\n                ISanToken sanToken,\\n                ,\\n                IOracle oracle,\\n                uint256 stocksUsers,\\n                uint256 sanRate,\\n                uint256 collatBase,\\n                ,\\n\\n            ) = IStableMaster(stableMaster).collateralMap(IPoolManager(address(this)));\\n\\n            // Checking if there are enough reserves for the amount to withdraw\\n            require(\\n                _getTotalAsset() >=\\n                    amountToRecover +\\n                        (sanToken.totalSupply() * sanRate) /\\n                        BASE_TOKENS +\\n                        (stocksUsers * collatBase) /\\n                        oracle.readUpper(),\\n                \\\"66\\\"\\n            );\\n\\n            token.safeTransfer(to, amountToRecover);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        }\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Adds a strategy to the `PoolManager`\\n    /// @param strategy The address of the strategy to add\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev Multiple checks are made. For instance, the contract must not already belong to the `PoolManager`\\n    /// and the underlying token of the strategy has to be consistent with the `PoolManager` contracts\\n    /// @dev This function is a `governor` function and not a `guardian` one because a `guardian` could add a strategy\\n    /// enabling the withdraw of the funds of the protocol\\n    /// @dev The `_debtRatio` should be expressed in `BASE_PARAMS`\\n    function addStrategy(address strategy, uint256 _debtRatio) external onlyRole(GOVERNOR_ROLE) zeroCheck(strategy) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.lastReport == 0, \\\"73\\\");\\n        require(address(this) == IStrategy(strategy).poolManager(), \\\"74\\\");\\n        // Using current code, this condition should always be verified as in the constructor\\n        // of the strategy the `want()` is set to the token of this `PoolManager`\\n        require(address(token) == IStrategy(strategy).want(), \\\"75\\\");\\n        require(debtRatio + _debtRatio <= BASE_PARAMS, \\\"76\\\");\\n\\n        // Add strategy to approved strategies\\n        params.lastReport = 1;\\n        params.totalStrategyDebt = 0;\\n        params.debtRatio = _debtRatio;\\n\\n        _grantRole(STRATEGY_ROLE, strategy);\\n\\n        // Update global parameters\\n        debtRatio += _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n\\n        strategyList.push(strategy);\\n    }\\n\\n    // =========================== Guardian Functions ==============================\\n\\n    /// @notice Modifies the funds a strategy has access to\\n    /// @param strategy The address of the Strategy\\n    /// @param _debtRatio The share of the total assets that the strategy has access to\\n    /// @dev The update has to be such that the `debtRatio` does not exceeds the 100% threshold\\n    /// as this `PoolManager` cannot lend collateral that it doesn't not own.\\n    /// @dev `_debtRatio` is stored as a uint256 but as any parameter of the protocol, it should be expressed\\n    /// in `BASE_PARAMS`\\n    function updateStrategyDebtRatio(address strategy, uint256 _debtRatio) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, _debtRatio);\\n    }\\n\\n    /// @notice Triggers an emergency exit for a strategy and then harvests it to fetch all the funds\\n    /// @param strategy The address of the `Strategy`\\n    function setStrategyEmergencyExit(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        _updateStrategyDebtRatio(strategy, 0);\\n        IStrategy(strategy).setEmergencyExit();\\n        IStrategy(strategy).harvest();\\n    }\\n\\n    /// @notice Revokes a strategy\\n    /// @param strategy The address of the strategy to revoke\\n    /// @dev This should only be called after the following happened in order: the `strategy.debtRatio` has been set to 0,\\n    /// `harvest` has been called enough times to recover all capital gain/losses.\\n    function revokeStrategy(address strategy) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[strategy];\\n\\n        require(params.debtRatio == 0, \\\"77\\\");\\n        require(params.totalStrategyDebt == 0, \\\"77\\\");\\n        uint256 strategyListLength = strategyList.length;\\n        require(params.lastReport != 0 && strategyListLength >= 1, \\\"78\\\");\\n        // It has already been checked whether the strategy was a valid strategy\\n        for (uint256 i = 0; i < strategyListLength - 1; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyListLength - 1];\\n                break;\\n            }\\n        }\\n\\n        strategyList.pop();\\n\\n        // Update global parameters\\n        debtRatio -= params.debtRatio;\\n        delete strategies[strategy];\\n\\n        _revokeRole(STRATEGY_ROLE, strategy);\\n\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    /// @notice Withdraws a given amount from a strategy\\n    /// @param strategy The address of the strategy\\n    /// @param amount The amount to withdraw\\n    /// @dev This function tries to recover `amount` from the strategy, but it may not go through\\n    /// as we may not be able to withdraw from the lending protocol the full amount\\n    /// @dev In this last case we only update the parameters by setting the loss as the gap between\\n    /// what has been asked and what has been returned.\\n    function withdrawFromStrategy(IStrategy strategy, uint256 amount) external onlyRole(GUARDIAN_ROLE) {\\n        StrategyParams storage params = strategies[address(strategy)];\\n        require(params.lastReport != 0, \\\"78\\\");\\n\\n        uint256 loss;\\n        (amount, loss) = strategy.withdraw(amount);\\n\\n        // Handling eventual losses\\n        params.totalStrategyDebt = params.totalStrategyDebt - loss - amount;\\n        totalDebt = totalDebt - loss - amount;\\n\\n        emit StrategyReported(address(strategy), 0, loss, amount - loss, params.totalStrategyDebt);\\n\\n        // Handle eventual losses\\n        // With the strategy we are using in current tests, it is going to be impossible to have\\n        // a positive loss by calling strategy.withdraw, this function indeed calls _liquidatePosition\\n        // which output value is always zero\\n        if (loss > 0) stableMaster.signalLoss(loss);\\n    }\\n\\n    // ======================== Getters - View Functions ===========================\\n\\n    /// @notice Gets the current balance of this `PoolManager` contract\\n    /// @return The amount of the underlying collateral that the contract currently owns\\n    /// @dev This balance does not take into account what has been lent to strategies\\n    function getBalance() external view override returns (uint256) {\\n        return _getBalance();\\n    }\\n\\n    /// @notice Gets the total amount of collateral that is controlled by this `PoolManager` contract\\n    /// @return The amount of collateral owned by this contract plus the amount that has been lent to strategies\\n    /// @dev This is the value that is used to compute the debt ratio for a given strategy\\n    function getTotalAsset() external view override returns (uint256) {\\n        return _getTotalAsset();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/poolManager/PoolManagerEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/ISanToken.sol\\\";\\nimport \\\"../interfaces/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\nimport \\\"../utils/FunctionUtils.sol\\\";\\n\\n/// @title PoolManagerEvents\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This contract contains all the events of the `PoolManager` Contract\\ncontract PoolManagerEvents {\\n    event FeesDistributed(uint256 amountDistributed);\\n\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n\\n    event StrategyRevoked(address indexed strategy);\\n\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 totalDebt\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/poolManager/PoolManagerInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerStorage.sol\\\";\\n\\n/// @title PoolManagerInternal\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains all the internal functions of the `PoolManager` contract\\ncontract PoolManagerInternal is PoolManagerStorage, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // Roles need to be defined here because there are some internal access control functions\\n    // in the `PoolManagerInternal` file\\n\\n    /// @notice Role for `StableMaster` only\\n    bytes32 public constant STABLEMASTER_ROLE = keccak256(\\\"STABLEMASTER_ROLE\\\");\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for `Strategy` only\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n    // ======================= Access Control and Governance =======================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    function _addGuardian(address _guardian) internal {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n        // Propagating the new role in other contract\\n        perpetualManager.grantRole(GUARDIAN_ROLE, _guardian);\\n        feeManager.grantRole(GUARDIAN_ROLE, _guardian);\\n        uint256 strategyListLength = strategyList.length;\\n        for (uint256 i = 0; i < strategyListLength; i++) {\\n            IStrategy(strategyList[i]).addGuardian(_guardian);\\n        }\\n    }\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function _revokeGuardian(address guardian) internal {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n        perpetualManager.revokeRole(GUARDIAN_ROLE, guardian);\\n        feeManager.revokeRole(GUARDIAN_ROLE, guardian);\\n        uint256 strategyListLength = strategyList.length;\\n        for (uint256 i = 0; i < strategyListLength; i++) {\\n            IStrategy(strategyList[i]).revokeGuardian(guardian);\\n        }\\n    }\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Internal version of `updateStrategyDebtRatio`\\n    /// @dev Updates the debt ratio for a strategy\\n    function _updateStrategyDebtRatio(address strategy, uint256 _debtRatio) internal {\\n        StrategyParams storage params = strategies[strategy];\\n        require(params.lastReport != 0, \\\"78\\\");\\n        debtRatio = debtRatio + _debtRatio - params.debtRatio;\\n        require(debtRatio <= BASE_PARAMS, \\\"76\\\");\\n        params.debtRatio = _debtRatio;\\n        emit StrategyAdded(strategy, debtRatio);\\n    }\\n\\n    // ============================ Utils ==========================================\\n\\n    /// @notice Returns this `PoolManager`'s reserve of collateral (not including what has been lent)\\n    function _getBalance() internal view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the amount of assets owned by this `PoolManager`\\n    /// @dev This sums the current balance of the contract to what has been given to strategies\\n    /// @dev This amount can be manipulated by flash loans\\n    function _getTotalAsset() internal view returns (uint256) {\\n        return _getBalance() + totalDebt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/poolManager/PoolManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PoolManagerEvents.sol\\\";\\n\\n/// @title PoolManagerStorage\\n/// @author Angle Core Team\\n/// @notice The `PoolManager` contract corresponds to a collateral pool of the protocol for a stablecoin,\\n/// it manages a single ERC20 token. It is responsible for interacting with the strategies enabling the protocol\\n/// to get yield on its collateral\\n/// @dev This file contains all the variables and parameters stored for this contract\\ncontract PoolManagerStorage is PoolManagerEvents, FunctionUtils {\\n    // ================ References to contracts that cannot be modified ============\\n\\n    /// @notice Interface for the underlying token accepted by this contract\\n    IERC20 public token;\\n\\n    /// @notice Reference to the `PerpetualManager` for this collateral/stablecoin pair\\n    /// `PerpetualManager` is an upgradeable contract, there is therefore no need to be able to update this reference\\n    IPerpetualManager public perpetualManager;\\n\\n    /// @notice Reference to the `StableMaster` contract corresponding to this `PoolManager`\\n    IStableMaster public stableMaster;\\n\\n    // ============== References to contracts that can be modified =================\\n\\n    /// @notice FeeManager contract for this collateral/stablecoin pair\\n    /// This reference can be updated by the `StableMaster` and change is going to be propagated\\n    /// to the `PerpetualManager` from this contract\\n    IFeeManager public feeManager;\\n\\n    // ============================= Yield Farming =================================\\n\\n    /// @notice Funds currently given to strategies\\n    uint256 public totalDebt;\\n\\n    /// @notice Proportion of the funds managed dedicated to strategies\\n    /// Has to be between 0 and `BASE_PARAMS`\\n    uint256 public debtRatio;\\n\\n    /// The struct `StrategyParams` is defined in the interface `IPoolManager`\\n    /// @notice Mapping between the address of a strategy contract and its corresponding details\\n    mapping(address => StrategyParams) public strategies;\\n\\n    /// @notice List of the current strategies\\n    address[] public strategyList;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FunctionUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title FunctionUtils\\n/// @author Angle Core Team\\n/// @notice Contains all the utility functions that are needed in different places of the protocol\\n/// @dev Functions in this contract should typically be pure functions\\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\\ncontract FunctionUtils {\\n    /// @notice Base that is used to compute ratios and floating numbers\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\\n    /// that are defined as ratios)\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the yArray\\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                // There is no risk of overflow here as in the product of the difference of `y`\\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\\n                // overflow for `uint64`\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev This function is a way to avoid some governance attacks or errors\\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\\n    /// to `BASE_PARAMS`\\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\\n        require(xArray.length == yArray.length && xArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \\\"6\\\");\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\\n    /// if it corresponds to a ratio)\\n    /// @param fees Value of the new parameter to check\\n    modifier onlyCompatibleFees(uint64 fees) {\\n        require(fees <= BASE_PARAMS, \\\"4\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the new address given is not null\\n    /// @param newAddress Address to check\\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\\n    modifier zeroCheck(address newAddress) {\\n        require(newAddress != address(0), \\\"0\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributed\",\"type\":\"uint256\"}],\"name\":\"FeesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLEMASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManager\",\"name\":\"_perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IStableMaster\",\"name\":\"_stableMaster\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpetualManager\",\"outputs\":[{\"internalType\":\"contract IPerpetualManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategyEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableMaster\",\"outputs\":[{\"internalType\":\"contract IStableMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStrategyDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"updateStrategyDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolManager","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}