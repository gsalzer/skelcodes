{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.0 https://hardhat.org\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/IPermissions.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title Permissions interface\r\n/// @author Fei Protocol\r\ninterface IPermissions is IAccessControl {\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function createRole(bytes32 role, bytes32 adminRole) external;\r\n\r\n    function grantMinter(address minter) external;\r\n\r\n    function grantBurner(address burner) external;\r\n\r\n    function grantPCVController(address pcvController) external;\r\n\r\n    function grantGovernor(address governor) external;\r\n\r\n    function grantGuardian(address guardian) external;\r\n\r\n    function revokeMinter(address minter) external;\r\n\r\n    function revokeBurner(address burner) external;\r\n\r\n    function revokePCVController(address pcvController) external;\r\n\r\n    function revokeGovernor(address governor) external;\r\n\r\n    function revokeGuardian(address guardian) external;\r\n\r\n    // ----------- Revoker only state changing api -----------\r\n\r\n    function revokeOverride(bytes32 role, address account) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function isBurner(address _address) external view returns (bool);\r\n\r\n    function isMinter(address _address) external view returns (bool);\r\n\r\n    function isGovernor(address _address) external view returns (bool);\r\n\r\n    function isGuardian(address _address) external view returns (bool);\r\n\r\n    function isPCVController(address _address) external view returns (bool);\r\n\r\n    function GUARDIAN_ROLE() external view returns (bytes32);\r\n\r\n    function GOVERN_ROLE() external view returns (bytes32);\r\n\r\n    function BURNER_ROLE() external view returns (bytes32);\r\n\r\n    function MINTER_ROLE() external view returns (bytes32);\r\n\r\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/token/IFei.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title FEI stablecoin interface\r\n/// @author Fei Protocol\r\ninterface IFei is IERC20 {\r\n    // ----------- Events -----------\r\n\r\n    event Minting(\r\n        address indexed _to,\r\n        address indexed _minter,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Burning(\r\n        address indexed _to,\r\n        address indexed _burner,\r\n        uint256 _amount\r\n    );\r\n\r\n    event IncentiveContractUpdate(\r\n        address indexed _incentivized,\r\n        address indexed _incentiveContract\r\n    );\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    // ----------- Burner only state changing api -----------\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // ----------- Minter only state changing api -----------\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setIncentiveContract(address account, address incentive) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function incentiveContract(address account) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/core/ICore.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/// @title Core Interface\r\n/// @author Fei Protocol\r\ninterface ICore is IPermissions {\r\n    // ----------- Events -----------\r\n\r\n    event FeiUpdate(address indexed _fei);\r\n    event TribeUpdate(address indexed _tribe);\r\n    event GenesisGroupUpdate(address indexed _genesisGroup);\r\n    event TribeAllocation(address indexed _to, uint256 _amount);\r\n    event GenesisPeriodComplete(uint256 _timestamp);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function init() external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setFei(address token) external;\r\n\r\n    function setTribe(address token) external;\r\n\r\n    function allocateTribe(address to, uint256 amount) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n}\r\n\r\n\r\n// File contracts/refs/ICoreRef.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title CoreRef interface\r\n/// @author Fei Protocol\r\ninterface ICoreRef {\r\n    // ----------- Events -----------\r\n\r\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\r\n\r\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setCore(address newCore) external;\r\n\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\r\n\r\n    // ----------- Governor or Guardian only state changing api -----------\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function core() external view returns (ICore);\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n\r\n    function feiBalance() external view returns (uint256);\r\n\r\n    function tribeBalance() external view returns (uint256);\r\n\r\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function isContractAdmin(address admin) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/refs/CoreRef.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/// @title A Reference to Core\r\n/// @author Fei Protocol\r\n/// @notice defines some modifiers and utilities around interacting with Core\r\nabstract contract CoreRef is ICoreRef, Pausable {\r\n    ICore private _core;\r\n\r\n    /// @notice a role used with a subset of governor permissions for this contract only\r\n    bytes32 public override CONTRACT_ADMIN_ROLE;\r\n\r\n    /// @notice CoreRef constructor\r\n    /// @param coreAddress Fei Core to reference\r\n    constructor(address coreAddress) {\r\n        _core = ICore(coreAddress);\r\n        _setContractAdminRole(_core.GOVERN_ROLE());\r\n    }\r\n\r\n    modifier ifMinterSelf() {\r\n        if (_core.isMinter(address(this))) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_core.isMinter(msg.sender), \"CoreRef: Caller is not a minter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(_core.isBurner(msg.sender), \"CoreRef: Caller is not a burner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPCVController() {\r\n        require(\r\n            _core.isPCVController(msg.sender),\r\n            \"CoreRef: Caller is not a PCV controller\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernorOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) ||\r\n            isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not a governor or contract admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender),\r\n            \"CoreRef: Caller is not a governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardianOrGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || \r\n            _core.isGuardian(msg.sender),\r\n            \"CoreRef: Caller is not a guardian or governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyFei() {\r\n        require(msg.sender == address(fei()), \"CoreRef: Caller is not FEI\");\r\n        _;\r\n    }\r\n\r\n    /// @notice set new Core reference address\r\n    /// @param newCore the new core address\r\n    function setCore(address newCore) external override onlyGovernor {\r\n        require(newCore != address(0), \"CoreRef: zero address\");\r\n        address oldCore = address(_core);\r\n        _core = ICore(newCore);\r\n        emit CoreUpdate(oldCore, newCore);\r\n    }\r\n\r\n    /// @notice sets a new admin role for this contract\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\r\n        _setContractAdminRole(newContractAdminRole);\r\n    }\r\n\r\n    /// @notice returns whether a given address has the admin role for this contract\r\n    function isContractAdmin(address _admin) public view override returns (bool) {\r\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\r\n    }\r\n\r\n    /// @notice set pausable methods to paused\r\n    function pause() public override onlyGuardianOrGovernor {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice set pausable methods to unpaused\r\n    function unpause() public override onlyGuardianOrGovernor {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice address of the Core contract referenced\r\n    /// @return ICore implementation address\r\n    function core() public view override returns (ICore) {\r\n        return _core;\r\n    }\r\n\r\n    /// @notice address of the Fei contract referenced by Core\r\n    /// @return IFei implementation address\r\n    function fei() public view override returns (IFei) {\r\n        return _core.fei();\r\n    }\r\n\r\n    /// @notice address of the Tribe contract referenced by Core\r\n    /// @return IERC20 implementation address\r\n    function tribe() public view override returns (IERC20) {\r\n        return _core.tribe();\r\n    }\r\n\r\n    /// @notice fei balance of contract\r\n    /// @return fei amount held\r\n    function feiBalance() public view override returns (uint256) {\r\n        return fei().balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice tribe balance of contract\r\n    /// @return tribe amount held\r\n    function tribeBalance() public view override returns (uint256) {\r\n        return tribe().balanceOf(address(this));\r\n    }\r\n\r\n    function _burnFeiHeld() internal {\r\n        fei().burn(feiBalance());\r\n    }\r\n\r\n    function _mintFei(uint256 amount) internal {\r\n        fei().mint(address(this), amount);\r\n    }\r\n\r\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\r\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\r\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\r\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/pcv/IPCVDeposit.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title a PCV Deposit interface\r\n/// @author Fei Protocol\r\ninterface IPCVDeposit {\r\n    // ----------- Events -----------\r\n    event Deposit(address indexed _from, uint256 _amount);\r\n\r\n    event Withdrawal(\r\n        address indexed _caller,\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n\r\n    event WithdrawERC20(\r\n        address indexed _caller,\r\n        address indexed _token,\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n\r\n    event WithdrawETH(\r\n        address indexed _caller,\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function deposit() external;\r\n\r\n    // ----------- PCV Controller only state changing api -----------\r\n\r\n    function withdraw(address to, uint256 amount) external;\r\n\r\n    function withdrawERC20(address token, address to, uint256 amount) external;\r\n\r\n    function withdrawETH(address payable to, uint256 amount) external;\r\n    \r\n    // ----------- Getters -----------\r\n\r\n    function balance() external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/pcv/PCVDeposit.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n/// @title abstract contract for withdrawing ERC-20 tokens using a PCV Controller\r\n/// @author Fei Protocol\r\nabstract contract PCVDeposit is IPCVDeposit, CoreRef {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice withdraw ERC20 from the contract\r\n    /// @param token address of the ERC20 to send\r\n    /// @param to address destination of the ERC20\r\n    /// @param amount quantity of ERC20 to send\r\n    function withdrawERC20(\r\n      address token, \r\n      address to, \r\n      uint256 amount\r\n    ) public override onlyPCVController {\r\n        _withdrawERC20(token, to, amount);\r\n    }\r\n\r\n    function _withdrawERC20(\r\n      address token, \r\n      address to, \r\n      uint256 amount\r\n    ) internal {\r\n        IERC20(token).safeTransfer(to, amount);\r\n        emit WithdrawERC20(msg.sender, token, to, amount);\r\n    }\r\n\r\n    /// @notice withdraw ETH from the contract\r\n    /// @param to address to send ETH\r\n    /// @param amountOut amount of ETH to send\r\n    function withdrawETH(address payable to, uint256 amountOut) external virtual override onlyPCVController {\r\n        Address.sendValue(to, amountOut);\r\n        emit WithdrawETH(msg.sender, to, amountOut);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/pcv/utils/WethPCVDeposit.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/// @title base class for a WethPCVDeposit PCV Deposit\r\n/// @author Fei Protocol\r\nabstract contract WethPCVDeposit is PCVDeposit {\r\n    /// @notice WETH9 address\r\n    IWETH public constant WETH =\r\n        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    /// @notice Empty callback on ETH reception\r\n    receive() external payable virtual {}\r\n\r\n    /// @notice Wraps all ETH held by the contract to WETH\r\n    /// Anyone can call it\r\n    function wrapETH() public {\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance != 0) {\r\n            IWETH(WETH).deposit{value: ethBalance}();\r\n        }\r\n    }\r\n\r\n    /// @notice deposit\r\n    function deposit() external virtual override {\r\n        wrapETH();\r\n    }\r\n\r\n    /// @notice withdraw ETH from the contract\r\n    /// @param to address to send ETH\r\n    /// @param amountOut amount of ETH to send\r\n    function withdrawETH(address payable to, uint256 amountOut)\r\n        external\r\n        override\r\n        onlyPCVController\r\n    {\r\n        IWETH(WETH).withdraw(amountOut);\r\n        Address.sendValue(to, amountOut);\r\n        emit WithdrawETH(msg.sender, to, amountOut);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/pcv/aave/AavePCVDeposit.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LendingPool {\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    \r\n    function withdraw(address asset, uint256 amount, address to) external;\r\n}\r\n\r\ninterface IncentivesController {\r\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external;\r\n\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns(uint256);\r\n}\r\n\r\n/// @title Aave PCV Deposit\r\n/// @author Fei Protocol\r\ncontract AavePCVDeposit is WethPCVDeposit {\r\n\r\n    event ClaimRewards(address indexed caller, uint256 amount);\r\n\r\n    /// @notice the associated Aave aToken for the deposit\r\n    IERC20 public aToken;\r\n\r\n    /// @notice the Aave v2 lending pool\r\n    LendingPool public lendingPool;\r\n\r\n    /// @notice the underlying token of the PCV deposit\r\n    IERC20 public token;\r\n\r\n    /// @notice the Aave incentives controller for the aToken\r\n    IncentivesController public incentivesController;\r\n\r\n    /// @notice Aave PCV Deposit constructor\r\n    /// @param _core Fei Core for reference\r\n    /// @param _lendingPool the Aave v2 lending pool\r\n    /// @param _token the underlying token of the PCV deposit\r\n    /// @param _aToken the associated Aave aToken for the deposit\r\n    /// @param _incentivesController the Aave incentives controller for the aToken\r\n    constructor(\r\n        address _core,\r\n        LendingPool _lendingPool,\r\n        IERC20 _token,\r\n        IERC20 _aToken,\r\n        IncentivesController _incentivesController\r\n    ) CoreRef(_core) {\r\n        lendingPool = _lendingPool;\r\n        aToken = _aToken;\r\n        token = _token;\r\n        incentivesController = _incentivesController;\r\n    }\r\n\r\n    /// @notice claims Aave rewards from the deposit and transfers to this address\r\n    function claimRewards() external {\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = address(aToken);\r\n        // First grab the available balance\r\n        uint256 amount = incentivesController.getRewardsBalance(assets, address(this));\r\n\r\n        // claim all available rewards\r\n        incentivesController.claimRewards(assets, amount, address(this));\r\n\r\n        emit ClaimRewards(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice deposit buffered aTokens\r\n    function deposit() external override whenNotPaused {\r\n        // wrap any held ETH if present\r\n        wrapETH();\r\n\r\n        // Approve and deposit buffered tokens\r\n        uint256 pendingBalance = token.balanceOf(address(this));\r\n        token.approve(address(lendingPool), pendingBalance);\r\n        lendingPool.deposit(address(token), pendingBalance, address(this), 0);\r\n        \r\n        emit Deposit(msg.sender, pendingBalance);\r\n    }\r\n\r\n    /// @notice withdraw tokens from the PCV allocation\r\n    /// @param amountUnderlying of tokens withdrawn\r\n    /// @param to the address to send PCV to\r\n    function withdraw(address to, uint256 amountUnderlying)\r\n        external\r\n        override\r\n        onlyPCVController\r\n    {\r\n        lendingPool.withdraw(address(token), amountUnderlying, to);\r\n        emit Withdrawal(msg.sender, to, amountUnderlying);\r\n    }\r\n\r\n    /// @notice returns total balance of PCV in the Deposit\r\n    /// @dev aTokens are rebasing, so represent 1:1 on underlying value\r\n    function balance() public view override returns (uint256) {\r\n        return aToken.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract LendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"contract IncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract LendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AavePCVDeposit","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b90000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a900000000000000000000000003ab458634910aad20ef5f1c8ee96f1d6ac54919000000000000000000000000c9bc48c72154ef3e5425641a3c747242112a46af000000000000000000000000d784927ff2f95ba542bfc824c8a8a98f3495f6b5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2180985e195ffca4a8a1e0beb9e5a2b698a2a3edc4ddeb6a72c99fac2702d5d1"}]}