{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Minters/BuyCharacters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n\\r\\n\\r\\n▄▄▄█████▓ ██░ ██ ▓█████     ██░ ██ ▓█████  ██▓  ██████ ▄▄▄█████▓\\r\\n▓  ██▒ ▓▒▓██░ ██▒▓█   ▀    ▓██░ ██▒▓█   ▀ ▓██▒▒██    ▒ ▓  ██▒ ▓▒\\r\\n▒ ▓██░ ▒░▒██▀▀██░▒███      ▒██▀▀██░▒███   ▒██▒░ ▓██▄   ▒ ▓██░ ▒░\\r\\n░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ░▓█ ░██ ▒▓█  ▄ ░██░  ▒   ██▒░ ▓██▓ ░ \\r\\n  ▒██▒ ░ ░▓█▒░██▓░▒████▒   ░▓█▒░██▓░▒████▒░██░▒██████▒▒  ▒██▒ ░ \\r\\n  ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░    ▒ ░░▒░▒░░ ▒░ ░░▓  ▒ ▒▓▒ ▒ ░  ▒ ░░   \\r\\n    ░     ▒ ░▒░ ░ ░ ░  ░    ▒ ░▒░ ░ ░ ░  ░ ▒ ░░ ░▒  ░ ░    ░    \\r\\n  ░       ░  ░░ ░   ░       ░  ░░ ░   ░    ▒ ░░  ░  ░    ░      \\r\\n          ░  ░  ░   ░  ░    ░  ░  ░   ░  ░ ░        ░           \\r\\n                                                                \\r\\n\\r\\n            ;`.                       ,'/\\r\\n            |`.`-.      _____      ,-;,'|\\r\\n            |  `-.\\\\__,-'     `-.__//'   |\\r\\n            |     `|               \\\\ ,  |\\r\\n            `.  ```                 ,  .'\\r\\n              \\\\_`      \\\\     /      `_/\\r\\n                \\\\    ^  \\\\   /   ^   /\\r\\n                 |   X   ____   X  |\\r\\n                 |     ,'    `.    |\\r\\n                 |    (  O' O  )   |\\r\\n                 `.    \\\\__,.__/   ,'\\r\\n                   `-._  `--'  _,'\\r\\n                       `------'\\r\\n\\r\\ncreated with curiosity by .pwa group 2021.\\r\\n\\r\\n    gm. wgmi.\\r\\n\\r\\n            if you're reading this, you are early.\\r\\n\\r\\n*/\\r\\n\\r\\nimport \\\"../Interfaces/I_TokenCharacter.sol\\\"; \\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../Models/Base/Pausable.sol\\\";\\r\\nimport \\\"../Models/PaymentHandler.sol\\\";\\r\\n\\r\\ncontract BuyCharacters is Ownable, Pausable, PaymentHandler {\\r\\n\\r\\n    uint256 public constant MAX_ETH_MINTABLE = 10000;\\r\\n    uint256 public constant TOKEN_PRICE = 0.07 ether;\\r\\n    uint256 public constant MINTS_PER_TRANSACTION = 5;\\r\\n    uint256 totalMinted;\\r\\n\\r\\n    uint256 constant MAX_GIFT = 200;\\r\\n    uint256 totalGifted;\\r\\n\\r\\n    I_TokenCharacter tokenCharacter;\\r\\n\\r\\n    constructor(address _tokenCharacterAddress) {\\r\\n        tokenCharacter = I_TokenCharacter(_tokenCharacterAddress);\\r\\n    }\\r\\n\\r\\n    function Buy(uint256 amountToBuy) external payable whenNotPaused {\\r\\n        require(msg.value >= TOKEN_PRICE * amountToBuy,\\\"Not enough ETH\\\");\\r\\n        require(amountToBuy <= MINTS_PER_TRANSACTION,\\\"Too many per transaction\\\");\\r\\n                \\r\\n        require(totalMinted + amountToBuy <= MAX_ETH_MINTABLE,\\\"Sold out\\\");\\r\\n\\r\\n        uint256 newTotalMinted = totalMinted;\\r\\n        for (uint256 i = 0; i < amountToBuy; i++ ){\\r\\n            newTotalMinted += 1;\\r\\n            tokenCharacter.Mint(1, msg.sender);\\r\\n        }\\r\\n        totalMinted = newTotalMinted;\\r\\n    }\\r\\n\\r\\n    function Gift(uint256 amountToGift, address to) external onlyOwner {\\r\\n        require(totalGifted + amountToGift <= MAX_GIFT,\\\"No more characters left\\\");\\r\\n\\r\\n        uint256 newTotalGifted = totalGifted;\\r\\n        for (uint256 i = 0; i < amountToGift; i++ ){\\r\\n            newTotalGifted += 1;\\r\\n            tokenCharacter.Mint(1, to);\\r\\n        }\\r\\n        totalGifted = newTotalGifted;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Interfaces/I_TokenCharacter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//Interface for characters NFT\\r\\ninterface I_TokenCharacter {\\r\\n\\r\\n    function Mint(uint8, address) external; //amount, to\\r\\n    \\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function setApprovalForAll(address, bool) external;  //address, operator\\r\\n    function transferFrom(address, address, uint256) external;\\r\\n    function ownerOf(uint256) external view returns (address); //who owns this token\\r\\n    function _ownerOf16(uint16) external view returns (address);\\r\\n\\r\\n    function addController(address) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Models/Base/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n//allows pausing of critical functions in the contract\\r\\ncontract Pausable is Ownable {\\r\\n\\r\\n    bool public paused = false; //start unpaused\\r\\n\\r\\n    event Paused();\\r\\n    event Unpaused();\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused,\\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused,\\\"Contract is not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function Pause() onlyOwner whenNotPaused external {\\r\\n        paused = true;\\r\\n        emit Paused();\\r\\n    }\\r\\n\\r\\n    function Unpause() onlyOwner whenPaused external {\\r\\n        paused = false;\\r\\n        emit Unpaused();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Models/PaymentHandler.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//simple payments handling for splitting between a wallet and contract owner\\r\\ncontract PaymentHandler is Ownable{\\r\\n\\r\\n    address otherWallet;\\r\\n\\r\\n    function setWithdrawWallet(address newWallet) external onlyOwner {\\r\\n        require(newWallet != address(0));\\r\\n        otherWallet = newWallet;\\r\\n    }\\r\\n\\r\\n    //payments\\r\\n    function withdrawAll() external onlyOwner {\\r\\n        require(otherWallet != address(0),\\\"Withdraw wallet not set\\\");\\r\\n                \\r\\n        payable(otherWallet).transfer(address(this).balance / 2); //50%\\r\\n        payable(owner()).transfer(address(this).balance); //50%        \\r\\n    }\\r\\n\\r\\n    function withdrawAmount(uint amount) external onlyOwner {\\r\\n        require(otherWallet != address(0),\\\"Withdraw wallet not set\\\");\\r\\n        require(address(this).balance >= amount);\\r\\n\\r\\n        payable(otherWallet).transfer(amount / 2); //50%\\r\\n        payable(owner()).transfer(amount / 2); //50%     \\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenCharacterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToGift\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ETH_MINTABLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTS_PER_TRANSACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWithdrawWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BuyCharacters","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000092a8ee8abf1e24791c68af6fc3ae9effbd865008","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}