{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Controlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n  // controller address => is a controller\\n  mapping(address => bool) internal _controllers;\\n  address[] public controllers;\\n\\n  function __Controlled_init(address[] memory controllers_, address moduleMap_)\\n    public\\n    initializer\\n  {\\n    for (uint256 i; i < controllers_.length; i++) {\\n      _controllers[controllers_[i]] = true;\\n    }\\n    controllers = controllers_;\\n    __ModuleMapConsumer_init(moduleMap_);\\n  }\\n\\n  function addController(address controller) external onlyOwner {\\n    _controllers[controller] = true;\\n    bool added;\\n    for (uint256 i; i < controllers.length; i++) {\\n      if (controller == controllers[i]) {\\n        added = true;\\n      }\\n    }\\n    if (!added) {\\n      controllers.push(controller);\\n    }\\n  }\\n\\n  modifier onlyOwner() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n      \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n      \\\"Controlled::onlyManager: Caller is not manager\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyController() {\\n    require(\\n      _controllers[msg.sender],\\n      \\\"Controlled::onlyController: Caller is not controller\\\"\\n    );\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ModuleMapConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n  IModuleMap public moduleMap;\\n\\n  function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n    moduleMap = IModuleMap(moduleMap_);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/YieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IIntegration.sol\\\";\\nimport \\\"../interfaces/IEtherRewards.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\nimport \\\"../interfaces/IUniswapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\n/// @title Yield Manager\\n/// @notice Manages yield deployments, harvesting, processing, and distribution\\ncontract YieldManager is\\n  Initializable,\\n  ModuleMapConsumer,\\n  Controlled,\\n  IYieldManager\\n{\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  uint256 private gasAccountTargetEthBalance;\\n  uint32 private biosBuyBackEthWeight;\\n  uint32 private treasuryEthWeight;\\n  uint32 private protocolFeeEthWeight;\\n  uint32 private rewardsEthWeight;\\n  uint256 private lastEthRewardsAmount;\\n\\n  address payable private gasAccount;\\n  address payable private treasuryAccount;\\n\\n  mapping(address => uint256) private processedWethByToken;\\n\\n  receive() external payable {}\\n\\n  /// @param controllers_ The addresses of the controlling contracts\\n  /// @param moduleMap_ Address of the Module Map\\n  /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n  /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n  /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n  /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n  /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n  /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n  /// @param treasuryAccount_ The address of the system treasury account\\n  function initialize(\\n    address[] memory controllers_,\\n    address moduleMap_,\\n    uint256 gasAccountTargetEthBalance_,\\n    uint32 biosBuyBackEthWeight_,\\n    uint32 treasuryEthWeight_,\\n    uint32 protocolFeeEthWeight_,\\n    uint32 rewardsEthWeight_,\\n    address payable gasAccount_,\\n    address payable treasuryAccount_\\n  ) public initializer {\\n    __Controlled_init(controllers_, moduleMap_);\\n    __ModuleMapConsumer_init(moduleMap_);\\n    gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\\n    biosBuyBackEthWeight = biosBuyBackEthWeight_;\\n    treasuryEthWeight = treasuryEthWeight_;\\n    protocolFeeEthWeight = protocolFeeEthWeight_;\\n    rewardsEthWeight = rewardsEthWeight_;\\n    gasAccount = gasAccount_;\\n    treasuryAccount = treasuryAccount_;\\n  }\\n\\n  /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n  function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_)\\n    external\\n    override\\n    onlyController\\n  {\\n    gasAccountTargetEthBalance = gasAccountTargetEthBalance_;\\n  }\\n\\n  /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n  /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n  /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n  /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n  function updateEthDistributionWeights(\\n    uint32 biosBuyBackEthWeight_,\\n    uint32 treasuryEthWeight_,\\n    uint32 protocolFeeEthWeight_,\\n    uint32 rewardsEthWeight_\\n  ) external override onlyController {\\n    biosBuyBackEthWeight = biosBuyBackEthWeight_;\\n    treasuryEthWeight = treasuryEthWeight_;\\n    protocolFeeEthWeight = protocolFeeEthWeight_;\\n    rewardsEthWeight = rewardsEthWeight_;\\n  }\\n\\n  /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n  function updateGasAccount(address payable gasAccount_)\\n    external\\n    override\\n    onlyController\\n  {\\n    gasAccount = gasAccount_;\\n  }\\n\\n  /// @param treasuryAccount_ The address of the system treasury account\\n  function updateTreasuryAccount(address payable treasuryAccount_)\\n    external\\n    override\\n    onlyController\\n  {\\n    treasuryAccount = treasuryAccount_;\\n  }\\n\\n  /// @notice Withdraws and then re-deploys tokens to integrations according to configured weights\\n  function rebalance() external override onlyController {\\n    _deploy();\\n  }\\n\\n  /// @notice Deploys all tokens to all integrations according to configured weights\\n  function deploy() external override onlyController {\\n    _deploy();\\n  }\\n\\n  function _deploy() internal {\\n    bool shouldRedeploy = _rebalance();\\n    if (shouldRedeploy) {\\n      _rebalance();\\n    }\\n  }\\n\\n  function _rebalance() internal returns (bool redeploy) {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    IStrategyMap strategyMap = IStrategyMap(\\n      moduleMap.getModuleAddress(Modules.StrategyMap)\\n    );\\n    uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n    uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\\n    uint256 denominator = integrationMap.getReserveRatioDenominator();\\n\\n    for (uint256 i = 0; i < integrationCount; i++) {\\n      address integration = integrationMap.getIntegrationAddress(i);\\n      for (uint256 j = 0; j < tokenCount; j++) {\\n        address token = integrationMap.getTokenAddress(j);\\n        uint256 numerator = integrationMap.getTokenReserveRatioNumerator(token);\\n\\n        uint256 grossAmountInvested = strategyMap.getExpectedBalance(\\n          integration,\\n          token\\n        );\\n\\n        uint256 desiredBalance = grossAmountInvested -\\n          _calculateReserveAmount(grossAmountInvested, numerator, denominator);\\n\\n        uint256 actualBalance = IIntegration(integration).getBalance(token);\\n\\n        if (desiredBalance > actualBalance) {\\n          // Underfunded, top up\\n          redeploy = true;\\n          uint256 shortage = desiredBalance - actualBalance;\\n          if (\\n            IERC20MetadataUpgradeable(token).balanceOf(\\n              moduleMap.getModuleAddress(Modules.Kernel)\\n            ) >= shortage\\n          ) {\\n            uint256 balanceBefore = IERC20MetadataUpgradeable(token).balanceOf(\\n              integration\\n            );\\n            IERC20MetadataUpgradeable(token).safeTransferFrom(\\n              moduleMap.getModuleAddress(Modules.Kernel),\\n              integration,\\n              shortage\\n            );\\n            uint256 balanceAfter = IERC20MetadataUpgradeable(token).balanceOf(\\n              integration\\n            );\\n\\n            IIntegration(integration).deposit(\\n              token,\\n              balanceAfter - balanceBefore\\n            );\\n          }\\n        } else if (actualBalance > desiredBalance) {\\n          // Overfunded, give it a haircut\\n          redeploy = true;\\n          IIntegration(integration).withdraw(\\n            token,\\n            actualBalance - desiredBalance\\n          );\\n        }\\n      }\\n      IIntegration(integration).deploy();\\n    }\\n  }\\n\\n  function _calculateReserveAmount(\\n    uint256 amount,\\n    uint256 numerator,\\n    uint256 denominator\\n  ) internal pure returns (uint256) {\\n    return (amount * numerator) / denominator;\\n  }\\n\\n  /// @notice Harvests available yield from all tokens and integrations\\n  function harvestYield() public override onlyController {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n    uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\\n\\n    for (\\n      uint256 integrationId;\\n      integrationId < integrationCount;\\n      integrationId++\\n    ) {\\n      IIntegration(integrationMap.getIntegrationAddress(integrationId))\\n        .harvestYield();\\n    }\\n\\n    for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n      IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\\n        integrationMap.getTokenAddress(tokenId)\\n      );\\n\\n      uint256 tokenDesiredReserve = getDesiredReserveTokenBalance(\\n        address(token)\\n      );\\n      uint256 tokenActualReserve = getReserveTokenBalance(address(token));\\n\\n      uint256 harvestedTokenAmount = token.balanceOf(address(this));\\n\\n      // Check if reserves need to be replenished\\n      if (tokenDesiredReserve > tokenActualReserve) {\\n        // Need to replenish reserves\\n        if (tokenDesiredReserve - tokenActualReserve <= harvestedTokenAmount) {\\n          // Need to send portion of harvested token to Kernel to replenish reserves\\n          token.safeTransfer(\\n            moduleMap.getModuleAddress(Modules.Kernel),\\n            tokenDesiredReserve - tokenActualReserve\\n          );\\n        } else {\\n          // Need to send all of harvested token to Kernel to partially replenish reserves\\n          token.safeTransfer(\\n            moduleMap.getModuleAddress(Modules.Kernel),\\n            token.balanceOf(address(this))\\n          );\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Swaps all harvested yield tokens for WETH\\n  function processYield() external override onlyController {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n    IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(\\n      integrationMap.getWethTokenAddress()\\n    );\\n\\n    for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n      IERC20MetadataUpgradeable token = IERC20MetadataUpgradeable(\\n        integrationMap.getTokenAddress(tokenId)\\n      );\\n\\n      if (token.balanceOf(address(this)) > 0) {\\n        uint256 wethReceived;\\n\\n        if (address(token) != address(weth)) {\\n          // If token is not WETH, need to swap it for WETH\\n          uint256 wethBalanceBefore = weth.balanceOf(address(this));\\n\\n          // Swap token harvested yield for WETH. If trade succeeds, update accounting. Otherwise, do not update accounting\\n          token.safeTransfer(\\n            moduleMap.getModuleAddress(Modules.UniswapTrader),\\n            token.balanceOf(address(this))\\n          );\\n\\n          IUniswapTrader(moduleMap.getModuleAddress(Modules.UniswapTrader))\\n            .swapExactInput(\\n              address(token),\\n              address(weth),\\n              address(this),\\n              token.balanceOf(moduleMap.getModuleAddress(Modules.UniswapTrader))\\n            );\\n\\n          wethReceived = weth.balanceOf(address(this)) - wethBalanceBefore;\\n        } else {\\n          // If token is WETH, no swap is needed\\n          wethReceived =\\n            weth.balanceOf(address(this)) -\\n            getProcessedWethByTokenSum();\\n        }\\n\\n        // Update accounting\\n        processedWethByToken[address(token)] += wethReceived;\\n      }\\n    }\\n  }\\n\\n  /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n  function distributeEth() external override onlyController {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    address wethAddress = IIntegrationMap(integrationMap).getWethTokenAddress();\\n\\n    // First fill up gas wallet with ETH\\n    ethToGasAccount();\\n\\n    uint256 wethToDistribute = IERC20MetadataUpgradeable(wethAddress).balanceOf(\\n      address(this)\\n    );\\n\\n    if (wethToDistribute > 0) {\\n      uint256 biosBuyBackWethAmount = (wethToDistribute *\\n        biosBuyBackEthWeight) / getEthWeightSum();\\n      uint256 treasuryWethAmount = (wethToDistribute * treasuryEthWeight) /\\n        getEthWeightSum();\\n      uint256 protocolFeeWethAmount = (wethToDistribute *\\n        protocolFeeEthWeight) / getEthWeightSum();\\n      uint256 rewardsWethAmount = wethToDistribute -\\n        biosBuyBackWethAmount -\\n        treasuryWethAmount -\\n        protocolFeeWethAmount;\\n\\n      // Send WETH to SushiSwap trader for BIOS buy back\\n      IERC20MetadataUpgradeable(wethAddress).safeTransfer(\\n        moduleMap.getModuleAddress(Modules.SushiSwapTrader),\\n        biosBuyBackWethAmount\\n      );\\n\\n      // Swap WETH for ETH and transfer to the treasury account\\n      IWeth9(wethAddress).withdraw(treasuryWethAmount);\\n      payable(treasuryAccount).transfer(treasuryWethAmount);\\n\\n      // Send ETH to protocol fee accrual rewards (BIOS stakers)\\n      ethToProtocolFeeAccrual(protocolFeeWethAmount);\\n\\n      // Send ETH to token rewards\\n      ethToRewards(rewardsWethAmount);\\n    }\\n  }\\n\\n  /// @notice Distributes WETH to gas wallet\\n  function ethToGasAccount() private {\\n    address wethAddress = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    ).getWethTokenAddress();\\n    uint256 wethBalance = IERC20MetadataUpgradeable(wethAddress).balanceOf(\\n      address(this)\\n    );\\n\\n    if (wethBalance > 0) {\\n      uint256 gasAccountActualEthBalance = gasAccount.balance;\\n      if (gasAccountActualEthBalance < gasAccountTargetEthBalance) {\\n        // Need to send ETH to gas account\\n        uint256 ethAmountToGasAccount;\\n        if (\\n          wethBalance < gasAccountTargetEthBalance - gasAccountActualEthBalance\\n        ) {\\n          // Send all of WETH to gas wallet\\n          ethAmountToGasAccount = wethBalance;\\n          IWeth9(wethAddress).withdraw(ethAmountToGasAccount);\\n          gasAccount.transfer(ethAmountToGasAccount);\\n        } else {\\n          // Send portion of WETH to gas wallet\\n          ethAmountToGasAccount =\\n            gasAccountTargetEthBalance -\\n            gasAccountActualEthBalance;\\n          IWeth9(wethAddress).withdraw(ethAmountToGasAccount);\\n          gasAccount.transfer(ethAmountToGasAccount);\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Uses any WETH held in the SushiSwap trader to buy back BIOS which is sent to the Kernel\\n  function biosBuyBack() external override onlyController {\\n    if (\\n      IERC20MetadataUpgradeable(\\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n          .getWethTokenAddress()\\n      ).balanceOf(moduleMap.getModuleAddress(Modules.SushiSwapTrader)) > 0\\n    ) {\\n      // Use all ETH sent to the SushiSwap trader to buy BIOS\\n      ISushiSwapTrader(moduleMap.getModuleAddress(Modules.SushiSwapTrader))\\n        .biosBuyBack();\\n\\n      // Use all BIOS transferred to the Kernel to increase bios rewards\\n      IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\\n        .increaseBiosRewards();\\n    }\\n  }\\n\\n  /// @notice Distributes ETH to Rewards per token\\n  /// @param ethRewardsAmount The amount of ETH rewards to distribute\\n  function ethToRewards(uint256 ethRewardsAmount) private {\\n    uint256 processedWethByTokenSum = getProcessedWethSum();\\n    require(\\n      processedWethByTokenSum > 0,\\n      \\\"YieldManager::ethToRewards: No processed WETH to distribute\\\"\\n    );\\n\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    address wethAddress = integrationMap.getWethTokenAddress();\\n    uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n\\n    for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n      address tokenAddress = integrationMap.getTokenAddress(tokenId);\\n\\n      if (processedWethByToken[tokenAddress] > 0) {\\n        IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\\n          .increaseEthRewards(\\n            tokenAddress,\\n            (ethRewardsAmount * processedWethByToken[tokenAddress]) /\\n              processedWethByTokenSum\\n          );\\n\\n        processedWethByToken[tokenAddress] = 0;\\n      }\\n    }\\n\\n    lastEthRewardsAmount = ethRewardsAmount;\\n\\n    IWeth9(wethAddress).withdraw(ethRewardsAmount);\\n\\n    payable(moduleMap.getModuleAddress(Modules.Kernel)).transfer(\\n      ethRewardsAmount\\n    );\\n  }\\n\\n  /// @notice Distributes ETH to protocol fee accrual (BIOS staker rewards)\\n  /// @param protocolFeeEthRewardsAmount Amount of ETH to distribute to protocol fee accrual\\n  function ethToProtocolFeeAccrual(uint256 protocolFeeEthRewardsAmount)\\n    private\\n  {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    address biosAddress = integrationMap.getBiosTokenAddress();\\n    address wethAddress = integrationMap.getWethTokenAddress();\\n\\n    if (\\n      IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap))\\n        .getTokenTotalBalance(biosAddress) > 0\\n    ) {\\n      // BIOS has been deposited, increase Ether rewards for BIOS depositors\\n      IEtherRewards(moduleMap.getModuleAddress(Modules.EtherRewards))\\n        .increaseEthRewards(biosAddress, protocolFeeEthRewardsAmount);\\n\\n      IWeth9(wethAddress).withdraw(protocolFeeEthRewardsAmount);\\n\\n      payable(moduleMap.getModuleAddress(Modules.Kernel)).transfer(\\n        protocolFeeEthRewardsAmount\\n      );\\n    } else {\\n      // No BIOS has been deposited, send WETH back to Kernel as reserves\\n      IERC20MetadataUpgradeable(wethAddress).transfer(\\n        moduleMap.getModuleAddress(Modules.Kernel),\\n        protocolFeeEthRewardsAmount\\n      );\\n    }\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return harvestedTokenBalance The amount of the token yield harvested held in the Kernel\\n  function getHarvestedTokenBalance(address tokenAddress)\\n    external\\n    view\\n    override\\n    returns (uint256 harvestedTokenBalance)\\n  {\\n    if (\\n      tokenAddress ==\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getWethTokenAddress()\\n    ) {\\n      harvestedTokenBalance =\\n        IERC20MetadataUpgradeable(tokenAddress).balanceOf(address(this)) -\\n        getProcessedWethSum();\\n    } else {\\n      harvestedTokenBalance = IERC20MetadataUpgradeable(tokenAddress).balanceOf(\\n          address(this)\\n        );\\n    }\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of the token held in the Kernel as reserves\\n  function getReserveTokenBalance(address tokenAddress)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getIsTokenAdded(tokenAddress),\\n      \\\"YieldManager::getReserveTokenBalance: Token not added\\\"\\n    );\\n    return\\n      IERC20MetadataUpgradeable(tokenAddress).balanceOf(\\n        moduleMap.getModuleAddress(Modules.Kernel)\\n      );\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The desired amount of the token to hold in the Kernel as reserves\\n  function getDesiredReserveTokenBalance(address tokenAddress)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getIsTokenAdded(tokenAddress),\\n      \\\"YieldManager::getDesiredReserveTokenBalance: Token not added\\\"\\n    );\\n    uint256 tokenReserveRatioNumerator = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    ).getTokenReserveRatioNumerator(tokenAddress);\\n    uint256 tokenTotalBalance = IStrategyMap(\\n      moduleMap.getModuleAddress(Modules.StrategyMap)\\n    ).getTokenTotalBalance(tokenAddress);\\n    return\\n      (tokenTotalBalance * tokenReserveRatioNumerator) /\\n      IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n        .getReserveRatioDenominator();\\n  }\\n\\n  /// @return ethWeightSum The sum of ETH distribution weights\\n  function getEthWeightSum()\\n    public\\n    view\\n    override\\n    returns (uint32 ethWeightSum)\\n  {\\n    ethWeightSum =\\n      biosBuyBackEthWeight +\\n      treasuryEthWeight +\\n      protocolFeeEthWeight +\\n      rewardsEthWeight;\\n  }\\n\\n  /// @return processedWethSum The sum of yields processed into WETH\\n  function getProcessedWethSum()\\n    public\\n    view\\n    override\\n    returns (uint256 processedWethSum)\\n  {\\n    uint256 tokenCount = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    ).getTokenAddressesLength();\\n\\n    for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n      address tokenAddress = IIntegrationMap(\\n        moduleMap.getModuleAddress(Modules.IntegrationMap)\\n      ).getTokenAddress(tokenId);\\n      processedWethSum += processedWethByToken[tokenAddress];\\n    }\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of WETH received from token yield processing\\n  function getProcessedWethByToken(address tokenAddress)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return processedWethByToken[tokenAddress];\\n  }\\n\\n  /// @return processedWethByTokenSum The sum of processed WETH\\n  function getProcessedWethByTokenSum()\\n    public\\n    view\\n    override\\n    returns (uint256 processedWethByTokenSum)\\n  {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    uint256 tokenCount = integrationMap.getTokenAddressesLength();\\n\\n    for (uint256 tokenId; tokenId < tokenCount; tokenId++) {\\n      processedWethByTokenSum += processedWethByToken[\\n        integrationMap.getTokenAddress(tokenId)\\n      ];\\n    }\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\\n  function getTokenTotalIntegrationBalance(address tokenAddress)\\n    public\\n    view\\n    override\\n    returns (uint256 tokenTotalIntegrationBalance)\\n  {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\\n\\n    for (\\n      uint256 integrationId;\\n      integrationId < integrationCount;\\n      integrationId++\\n    ) {\\n      tokenTotalIntegrationBalance += IIntegration(\\n        integrationMap.getIntegrationAddress(integrationId)\\n      ).getBalance(tokenAddress);\\n    }\\n  }\\n\\n  /// @return The address of the gas account\\n  function getGasAccount() public view override returns (address) {\\n    return gasAccount;\\n  }\\n\\n  /// @return The address of the treasury account\\n  function getTreasuryAccount() public view override returns (address) {\\n    return treasuryAccount;\\n  }\\n\\n  /// @return The last amount of ETH distributed to rewards\\n  function getLastEthRewardsAmount() public view override returns (uint256) {\\n    return lastEthRewardsAmount;\\n  }\\n\\n  /// @return The target ETH balance of the gas account\\n  function getGasAccountTargetEthBalance()\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return gasAccountTargetEthBalance;\\n  }\\n\\n  /// @return The BIOS buyback ETH weight\\n  /// @return The Treasury ETH weight\\n  /// @return The Protocol fee ETH weight\\n  /// @return The rewards ETH weight\\n  function getEthDistributionWeights()\\n    public\\n    view\\n    override\\n    returns (\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32\\n    )\\n  {\\n    return (\\n      biosBuyBackEthWeight,\\n      treasuryEthWeight,\\n      protocolFeeEthWeight,\\n      rewardsEthWeight\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEtherRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IEtherRewards {\\n  /// @param token The address of the token ERC20 contract\\n  /// @param user The address of the user\\n  function updateUserRewards(address token, address user) external;\\n\\n  /// @param token The address of the token ERC20 contract\\n  /// @param ethRewardsAmount The amount of Ether rewards to add\\n  function increaseEthRewards(address token, uint256 ethRewardsAmount) external;\\n\\n  /// @param user The address of the user\\n  /// @return ethRewards The amount of Ether claimed\\n  function claimEthRewards(address user) external returns (uint256 ethRewards);\\n\\n  /// @param token The address of the token ERC20 contract\\n  /// @param user The address of the user\\n  /// @return ethRewards The amount of Ether claimed\\n  function getUserTokenEthRewards(address token, address user)\\n    external\\n    view\\n    returns (uint256 ethRewards);\\n\\n  /// @param user The address of the user\\n  /// @return ethRewards The amount of Ether claimed\\n  function getUserEthRewards(address user)\\n    external\\n    view\\n    returns (uint256 ethRewards);\\n\\n  /// @param token The address of the token ERC20 contract\\n  /// @return The amount of Ether rewards for the specified token\\n  function getTokenEthRewards(address token) external view returns (uint256);\\n\\n  /// @return The total value of ETH claimed by users\\n  function getTotalClaimedEthRewards() external view returns (uint256);\\n\\n  /// @return The total value of ETH claimed by a user\\n  function getTotalUserClaimedEthRewards(address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The total amount of Ether rewards\\n  function getEthRewards() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegration {\\n  /// @param tokenAddress The address of the deposited token\\n  /// @param amount The amount of the token being deposited\\n  function deposit(address tokenAddress, uint256 amount) external;\\n\\n  /// @param tokenAddress The address of the withdrawal token\\n  /// @param amount The amount of the token to withdraw\\n  function withdraw(address tokenAddress, uint256 amount) external;\\n\\n  /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n  function deploy() external;\\n\\n  /// @dev Harvests token yield from the Aave lending pool\\n  function harvestYield() external;\\n\\n  /// @dev This returns the total amount of the underlying token that\\n  /// @dev has been deposited to the integration contract\\n  /// @param tokenAddress The address of the deployed token\\n  /// @return The amount of the underlying token that can be withdrawn\\n  function getBalance(address tokenAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n  struct Integration {\\n    bool added;\\n    string name;\\n  }\\n\\n  struct Token {\\n    uint256 id;\\n    bool added;\\n    bool acceptingDeposits;\\n    bool acceptingWithdrawals;\\n    uint256 biosRewardWeight;\\n    uint256 reserveRatioNumerator;\\n  }\\n\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name) external;\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param rewardWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n    external;\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param integrationId The ID of the integration\\n  /// @return The address of the integration contract\\n  function getIntegrationAddress(uint256 integrationId)\\n    external\\n    view\\n    returns (address);\\n\\n  /// @param integrationAddress The address of the integration contract\\n  /// @return The name of the of the protocol being integrated to\\n  function getIntegrationName(address integrationAddress)\\n    external\\n    view\\n    returns (string memory);\\n\\n  /// @return The address of the WETH token\\n  function getWethTokenAddress() external view returns (address);\\n\\n  /// @return The address of the BIOS token\\n  function getBiosTokenAddress() external view returns (address);\\n\\n  /// @param tokenId The ID of the token\\n  /// @return The address of the token ERC20 contract\\n  function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The index of the token in the tokens array\\n  function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The token BIOS reward weight\\n  function getTokenBiosRewardWeight(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return rewardWeightSum reward weight of depositable tokens\\n  function getBiosRewardWeightSum()\\n    external\\n    view\\n    returns (uint256 rewardWeightSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether depositing this token is currently enabled\\n  function getTokenAcceptingDeposits(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether withdrawing this token is currently enabled\\n  function getTokenAcceptingWithdrawals(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  // @param tokenAddress The address of the token ERC20 contract\\n  // @return bool indicating whether the token has been added\\n  function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n  // @param integrationAddress The address of the integration contract\\n  // @return bool indicating whether the integration has been added\\n  function getIsIntegrationAdded(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice get the length of supported tokens\\n  /// @return The quantity of tokens added\\n  function getTokenAddressesLength() external view returns (uint256);\\n\\n  /// @notice get the length of supported integrations\\n  /// @return The quantity of integrations added\\n  function getIntegrationAddressesLength() external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The value that gets divided by the reserve ratio denominator\\n  function getTokenReserveRatioNumerator(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The token reserve ratio denominator\\n  function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) external view returns (bool);\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModuleMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n  Kernel, // 0\\n  UserPositions, // 1\\n  YieldManager, // 2\\n  IntegrationMap, // 3\\n  BiosRewards, // 4\\n  EtherRewards, // 5\\n  SushiSwapTrader, // 6\\n  UniswapTrader, // 7\\n  StrategyMap, // 8\\n  StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n  function getModuleAddress(Modules key) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\n\\ninterface IStrategyMap {\\n  // #### Structs\\n  struct WeightedIntegration {\\n    address integration;\\n    uint256 weight;\\n  }\\n\\n  struct Strategy {\\n    string name;\\n    uint256 totalStrategyWeight;\\n    mapping(address => bool) enabledTokens;\\n    address[] tokens;\\n    WeightedIntegration[] integrations;\\n  }\\n\\n  struct StrategySummary {\\n    string name;\\n    uint256 totalStrategyWeight;\\n    address[] tokens;\\n    WeightedIntegration[] integrations;\\n  }\\n\\n  struct StrategyTransaction {\\n    uint256 amount;\\n    address token;\\n  }\\n\\n  // #### Events\\n  event NewStrategy(\\n    uint256 indexed id,\\n    string name,\\n    WeightedIntegration[] integrations,\\n    address[] tokens\\n  );\\n  event UpdateName(uint256 indexed id, string name);\\n  event UpdateIntegrations(\\n    uint256 indexed id,\\n    WeightedIntegration[] integrations\\n  );\\n  event UpdateTokens(uint256 indexed id, address[] tokens);\\n  event DeleteStrategy(\\n    uint256 indexed id,\\n    string name,\\n    address[] tokens,\\n    WeightedIntegration[] integrations\\n  );\\n\\n  event EnterStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] amounts\\n  );\\n  event ExitStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] amounts\\n  );\\n\\n  // #### Functions\\n  /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     */\\n  function addStrategy(\\n    string calldata name,\\n    WeightedIntegration[] memory integrations,\\n    address[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n  function updateName(uint256 id, string calldata name) external;\\n\\n  /**\\n  @notice Updates a strategy's accepted tokens\\n  @param id  The strategy ID\\n  @param tokens  The new tokens to allow\\n  */\\n  function updateTokens(uint256 id, address[] calldata tokens) external;\\n\\n  /**\\n    @notice Updates the strategy integrations \\n    @param integrations  the new integrations\\n     */\\n  function updateIntegrations(\\n    uint256 id,\\n    WeightedIntegration[] memory integrations\\n  ) external;\\n\\n  /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it\\n    @param id  the strategy to delete\\n     */\\n  function deleteStrategy(uint256 id) external;\\n\\n  /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n    @param amounts  The amounts to be deposited\\n     */\\n  function enterStrategy(\\n    uint256 id,\\n    address user,\\n    address[] calldata tokens,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  the tokens to withdraw\\n    @param amounts  The amounts to be withdrawn\\n     */\\n  function exitStrategy(\\n    uint256 id,\\n    address user,\\n    address[] calldata tokens,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n  function getStrategy(uint256 id)\\n    external\\n    view\\n    returns (StrategySummary memory);\\n\\n  /**\\n    @notice Returns the expected balance of a given token in a given integration\\n    @param integration  the integration the amount should be invested in\\n    @param token  the token that is being invested\\n    @return balance  the balance of the token that should be currently invested in the integration \\n     */\\n  function getExpectedBalance(address integration, address token)\\n    external\\n    view\\n    returns (uint256 balance);\\n\\n  /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n  function getStrategyTokenBalance(uint256 id, address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n  function getUserStrategyBalanceByToken(\\n    uint256 id,\\n    address token,\\n    address user\\n  ) external view returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n  function getUserInvestedAmountByToken(address token, address user)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n  function getTokenTotalBalance(address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n  @notice Returns the weight of an individual integration within the system\\n  @param integration  the integration to look up\\n  @return The weight of the integration\\n   */\\n  function getIntegrationWeight(address integration)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n  @notice Returns the sum of all weights in the system.\\n  @return The sum of all integration weights within the system\\n   */\\n  function getIntegrationWeightSum() external view returns (uint256);\\n\\n  /// @notice autogenerated getter definition\\n  function idCounter() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapTrader {\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external returns (bool);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapTrader {\\n  struct Path {\\n    address tokenOut;\\n    uint256 firstPoolFee;\\n    address tokenInTokenOut;\\n    uint256 secondPoolFee;\\n    address tokenIn;\\n  }\\n\\n  /// @param tokenA The address of tokenA ERC20 contract\\n  /// @param tokenB The address of tokenB ERC20 contract\\n  /// @param fee The Uniswap pool fee\\n  /// @param slippageNumerator The value divided by the slippage denominator\\n  /// to calculate the allowable slippage\\n  function addPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param poolIndex The index of the pool for the specified token pair\\n  /// @param slippageNumerator The new slippage numerator to update the pool\\n  function updatePoolSlippageNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolIndex,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @notice Changes which Uniswap pool to use as the default pool\\n  /// @notice when swapping between token0 and token1\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\\n  function updatePairPrimaryPool(\\n    address tokenA,\\n    address tokenB,\\n    uint256 primaryPoolIndex\\n  ) external;\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountOut The exact amount of the output token to receive\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactOutput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountOut\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountOut The exact amount of token being swapped for\\n  /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\\n  function getAmountInMaximum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountInMaximum);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getEstimatedTokenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPathFor(address tokenOut, address tokenIn)\\n    external\\n    view\\n    returns (Path memory);\\n\\n  function setPathFor(\\n    address tokenOut,\\n    address tokenIn,\\n    uint256 firstPoolFee,\\n    address tokenInTokenOut,\\n    uint256 secondPoolFee\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of the sorted token0\\n  /// @return token1 The address of the sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  /// @return The number of token pairs configured\\n  function getTokenPairsLength() external view returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return The quantity of pools configured for the specified token pair\\n  function getTokenPairPoolsLength(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param poolId The index of the pool in the pools mapping\\n  /// @return feeNumerator The numerator that gets divided by the fee denominator\\n  function getPoolFeeNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolId\\n  ) external view returns (uint24 feeNumerator);\\n\\n  function getPoolAddress(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserPositions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUserPositions {\\n  /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\\n  function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\\n\\n  /// @param sender The account seeding BIOS rewards\\n  /// @param biosAmount The amount of BIOS to add to rewards\\n  function seedBiosRewards(address sender, uint256 biosAmount) external;\\n\\n  /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n  function increaseBiosRewards() external;\\n\\n  /// @notice User is allowed to deposit whitelisted tokens\\n  /// @param depositor Address of the account depositing\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  /// @param ethAmount The amount of ETH sent with the deposit\\n  function deposit(\\n    address depositor,\\n    address[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256 ethAmount\\n  ) external;\\n\\n  /// @notice User is allowed to withdraw tokens\\n  /// @param recipient The address of the user withdrawing\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  function withdraw(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts,\\n    bool withdrawWethAsEth\\n  ) external returns (uint256 ethWithdrawn);\\n\\n  /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n  /// @param recipient The address of the user withdrawing tokens\\n  /// @param tokens Array of token address that user is exiting positions from\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  /// @return tokenAmounts The amounts of each token being withdrawn\\n  /// @return ethWithdrawn The amount of ETH being withdrawn\\n  /// @return ethClaimed The amount of ETH being claimed from rewards\\n  /// @return biosClaimed The amount of BIOS being claimed from rewards\\n  function withdrawAllAndClaim(\\n    address recipient,\\n    address[] memory tokens,\\n    bool withdrawWethAsEth\\n  )\\n    external\\n    returns (\\n      uint256[] memory tokenAmounts,\\n      uint256 ethWithdrawn,\\n      uint256 ethClaimed,\\n      uint256 biosClaimed\\n    );\\n\\n  /// @param user The address of the user claiming ETH rewards\\n  function claimEthRewards(address user) external returns (uint256 ethClaimed);\\n\\n  /// @notice Allows users to claim their BIOS rewards for each token\\n  /// @param recipient The address of the usuer claiming BIOS rewards\\n  function claimBiosRewards(address recipient)\\n    external\\n    returns (uint256 biosClaimed);\\n\\n  /// @param asset Address of the ERC20 token contract\\n  /// @return The total balance of the asset deposited in the system\\n  function totalTokenBalance(address asset) external view returns (uint256);\\n\\n  /// @param asset Address of the ERC20 token contract\\n  /// @param account Address of the user account\\n  function userTokenBalance(address asset, address account)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The Bios Rewards Duration\\n  function getBiosRewardsDuration() external view returns (uint32);\\n\\n  /// @notice Transfers tokens to the StrategyMap\\n  /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n  /// @param recipient  The user to transfer funds for\\n  /// @param tokens  the tokens to be moved\\n  /// @param amounts  the amounts of each token to move\\n  function transferToStrategy(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /// @notice Transfers tokens from the StrategyMap\\n  /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n  /// @param recipient  The user to transfer funds for\\n  /// @param tokens  the tokens to be moved\\n  /// @param amounts  the amounts of each token to move\\n  function transferFromStrategy(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWeth9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IWeth9 {\\n  event Deposit(address indexed dst, uint256 wad);\\n  event Withdrawal(address indexed src, uint256 wad);\\n\\n  function deposit() external payable;\\n\\n  /// @param wad The amount of wETH to withdraw into ETH\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IYieldManager {\\n  /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n  function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_)\\n    external;\\n\\n  /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n  /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n  /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n  /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n  function updateEthDistributionWeights(\\n    uint32 biosBuyBackEthWeight_,\\n    uint32 treasuryEthWeight_,\\n    uint32 protocolFeeEthWeight_,\\n    uint32 rewardsEthWeight_\\n  ) external;\\n\\n  /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n  function updateGasAccount(address payable gasAccount_) external;\\n\\n  /// @param treasuryAccount_ The address of the system treasury account\\n  function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n  /// @notice Withdraws and then re-deploys tokens to integrations according to configured weights\\n  function rebalance() external;\\n\\n  /// @notice Deploys all tokens to all integrations according to configured weights\\n  function deploy() external;\\n\\n  /// @notice Harvests available yield from all tokens and integrations\\n  function harvestYield() external;\\n\\n  /// @notice Swaps harvested yield for all tokens for ETH\\n  function processYield() external;\\n\\n  /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n  function distributeEth() external;\\n\\n  /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n  function biosBuyBack() external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return harvestedTokenBalance The amount of the token yield harvested held in the Kernel\\n  function getHarvestedTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of the token held in the Kernel as reserves\\n  function getReserveTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The desired amount of the token to hold in the Kernel as reserves\\n  function getDesiredReserveTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return ethWeightSum The sum of ETH distribution weights\\n  function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n  /// @return processedWethSum The sum of yields processed into WETH\\n  function getProcessedWethSum()\\n    external\\n    view\\n    returns (uint256 processedWethSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of WETH received from token yield processing\\n  function getProcessedWethByToken(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return processedWethByTokenSum The sum of processed WETH\\n  function getProcessedWethByTokenSum()\\n    external\\n    view\\n    returns (uint256 processedWethByTokenSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\\n  function getTokenTotalIntegrationBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256 tokenTotalIntegrationBalance);\\n\\n  /// @return The address of the gas account\\n  function getGasAccount() external view returns (address);\\n\\n  /// @return The address of the treasury account\\n  function getTreasuryAccount() external view returns (address);\\n\\n  /// @return The last amount of ETH distributed to rewards\\n  function getLastEthRewardsAmount() external view returns (uint256);\\n\\n  /// @return The target ETH balance of the gas account\\n  function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n  /// @return The BIOS buyback ETH weight\\n  /// @return The Treasury ETH weight\\n  /// @return The Protocol fee ETH weight\\n  /// @return The rewards ETH weight\\n  function getEthDistributionWeights()\\n    external\\n    view\\n    returns (\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32\\n    );\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biosBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getDesiredReserveTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthDistributionWeights\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthWeightSum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"ethWeightSum\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccountTargetEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getHarvestedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"harvestedTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEthRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getProcessedWethByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProcessedWethByTokenSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"processedWethByTokenSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProcessedWethSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"processedWethSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getReserveTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenTotalIntegrationBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalIntegrationBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"gasAccount_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAccount_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight_\",\"type\":\"uint32\"}],\"name\":\"updateEthDistributionWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"gasAccount_\",\"type\":\"address\"}],\"name\":\"updateGasAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance_\",\"type\":\"uint256\"}],\"name\":\"updateGasAccountTargetEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasuryAccount_\",\"type\":\"address\"}],\"name\":\"updateTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"YieldManager","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":""}]}