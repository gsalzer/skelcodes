{"status":"1","message":"OK","result":[{"SourceCode":"////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMinerV1{\r\n    function accountStoked(address addr) external view returns (uint256);\r\n    function totalStoke() external view returns (uint256);\r\n    function userTimes(address) external view returns (uint256);\r\n    function totalMineds( address ) external view returns (uint256);\r\n    // function current() external view returns (uint256);//private,don't call\r\n    function earnedBalance( address ) external view returns (uint256);\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\n////import '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\n\r\ncontract DEBIToken is ERC20 {\r\n    constructor() ERC20(\"DeerBit Token\",\"DEBI\") {\r\n        _mint(msg.sender, 100000000000 * 1e8);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8){\r\n        return 8;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\n////import '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// ////import './libraries/Strings.sol';\r\n\r\ncontract DBLendToken is ERC20,Ownable {\r\n\r\n    // using Strings for *;\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n    address public miner;\r\n    address public timelock;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint256 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint256) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint256) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n    \r\n    constructor() ERC20(\"DBLend Line\",\"DBL\"){\r\n        _mint(msg.sender, 2100000*1e8);//Total 2100000 DBL\r\n        // timelock = _timelock;\r\n\r\n        //_delegate(address(this), address(this));\r\n        //numCheckpoints[address(this)] = 2100000*1e8;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return 2100000*1e8 - balanceOf(address(this));\r\n    }\r\n\r\n    ///@dev init miner and approve miner transfer dbl\r\n    function initMiner(address _minerAddress) external onlyOwner returns (uint256){\r\n        require(miner == address(0), \"DBL: INIT ONLY ONCE\");\r\n        require(_minerAddress != address(0), \"DBL: NOT VALID MINER\");\r\n        return approveMiner(_minerAddress);\r\n    }\r\n\r\n    ///@dev update timelock,if timelock has been set, only timelock can be call. Otherwise the owner can call.\r\n    function updateTimelock(address _timelock) external {\r\n        require((timelock == address(0) && msg.sender == owner()) || msg.sender == timelock, \"NO PERMISSION\");\r\n        require(_timelock != address(0),\"INVALID ADDRESS\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    ///@dev replace miner through governance voting,if timelock is not set, the owner can operate.\r\n    function _setMiner(address _minerAddress) external {\r\n        require(msg.sender == timelock || (timelock == address(0) && msg.sender == owner()), \"DBL: NEED TIMELOCK OR OWNER\");\r\n        approveMiner(_minerAddress);\r\n    }\r\n\r\n    ///@dev DBLToken contract approve Miner Contract to spend all dbl\r\n    function approveMiner(address _minerAddress) internal returns (uint256){\r\n        //////importance,prevent delegatecall attack\r\n        if(!isContract(_minerAddress)) return 0;\r\n        uint256 balance = balanceOf(address(this));\r\n        _approve(address(this), _minerAddress, 2100000 * 1e8);\r\n        miner = _minerAddress;\r\n        return balance;\r\n    }\r\n\r\n    ///@dev Miner mint，actually transfer from address(this) to _account\r\n    function mint(address _account, uint256 _amount) public returns (bool){\r\n        require(msg.sender == miner, \"DEL:ONLY MINER\");\r\n        return transferFrom(address(this), _account, _amount);\r\n    }\r\n\r\n    ///@dev DBL token can be transferred through governance voting\r\n    // function govTransfer(address _receipt, uint256 _amount) public returns (bool){\r\n    //     require(msg.sender == timelock, \"DBL:ONLY TIMELOCK\");\r\n    //     uint256 balance = balanceOf(address(this));\r\n    //     if(_amount > balance) _amount = balance;\r\n    //     return transferFrom(address(this), _account, _amount);\r\n    // }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        if(recipient == address(this)){\r\n            recipient = address(0);\r\n        }\r\n        _moveDelegates(delegates[_msgSender()], delegates[recipient], amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = allowance(sender,_msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        //如果是挖矿铸币，则src为0，不需要记录本地的投票数据\r\n        if(sender == address(this)){\r\n            sender = address(0);\r\n        }       \r\n        _moveDelegates(delegates[sender], delegates[recipient], amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) public {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public returns (address){\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"DBL::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"DBL::delegateBySig: invalid nonce\");\r\n        require(block.timestamp <= expiry, \"DBL::delegateBySig: signature expired\");\r\n        _delegate(signatory, delegatee);\r\n        return signatory;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint256 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {\r\n        require(blockNumber < block.number, \"DBL::getPriorVotes: not yet determined\");\r\n\r\n        uint256 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lower = 0;\r\n        uint256 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator);\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    // function _transferTokens(address src, address dst, uint96 amount) internal {\r\n    //     require(src != address(0), \"DBL::_transferTokens: cannot transfer from the zero address\");\r\n    //     require(dst != address(0), \"DBL::_transferTokens: cannot transfer to the zero address\");\r\n\r\n    //     balances[src] = sub96(balances[src], amount, \"DBL::_transferTokens: transfer amount exceeds balance\");\r\n    //     balances[dst] = add96(balances[dst], amount, \"DBL::_transferTokens: transfer amount overflows\");\r\n    //     emit Transfer(src, dst, amount);\r\n\r\n    //     _moveDelegates(delegates[src], delegates[dst], amount);\r\n    // }\r\n\r\n    //转移投票权，减少原代理地址的票数，增加到新代理地址的票数，票数跟balance相关\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {                \r\n                uint256 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;                \r\n                uint256 srcRepNew = srcRepOld - amount;            \r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint256 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld + amount;\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint256 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\r\n      uint32 blockNumber = safe32(block.number, \"DBL::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n      } else {\r\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n          numCheckpoints[delegatee] = nCheckpoints + 1;\r\n      }\r\n\r\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal view returns (uint256) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Miner is Ownable{\r\n    // using Strings for *;\r\n    address public immutable DBL;\r\n    address public immutable DIBI;\r\n    uint256 public constant FIREST_YEAR_DBL = 1050000 * 1e8 * 1e18;\r\n    uint256 public immutable DEPLOY_BLOCK;\r\n    //2020's total blocks: 2371755\r\n    uint public constant blocksPerYear = 2371755;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    uint256 public perDibiSharedDbl = 0;    \r\n    uint256 public latestCalTime = 0;\r\n    uint256 public latestBlockNum = 0;\r\n    uint256 public totalStaked = 0;\r\n\r\n    //The Pause Guardian can pause certain actions as a safety mechanism.\r\n    bool public rewardGuardianPaused = false;\r\n    bool public stakeGuardianPaused = false;\r\n\r\n    struct STAKER{\r\n        uint256 stakeBalance;\r\n        uint256 lastHarvestBlock;\r\n        uint256 harvestDebt;\r\n        uint256 rewardPending;\r\n    }\r\n    mapping(address=>STAKER) public stakers;\r\n    \r\n    event Stake(address indexed staker,uint256 amounts, uint256 earned);\r\n    event Harvest(address indexed harver,uint256 earned);\r\n    \r\n    /// @notice Emitted when an action is paused globally\r\n    event ActionPaused(string action, bool pauseState);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n\r\n    constructor(address _dbl, address _dibi, uint256 _deploy_block){\r\n        require(_dbl != address(0) && _dibi != address(0),\"INVALID ADDRESS\");\r\n        DBL = _dbl;\r\n        DIBI = _dibi;\r\n        DEPLOY_BLOCK = _deploy_block;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        // Pausing is a very serious situation - we revert to sound the alarms\r\n        require(!rewardGuardianPaused && !stakeGuardianPaused, \"STAKE_OR_REWARD IS PAUSED\");\r\n\r\n\r\n        require(_amount > 0,\"AMOUNT MUST > 0\");\r\n        require(DEBIToken(DIBI).balanceOf(msg.sender) >= _amount, \"INSUFFICIENT DIBI\");\r\n        STAKER storage staker = stakers[msg.sender]; \r\n        _calPerDibiSharedDbl();\r\n        uint256 earned = 0;\r\n        if(staker.stakeBalance>0){\r\n            earned = ( perDibiSharedDbl * (staker.stakeBalance) - staker.harvestDebt ) / 1e18;\r\n            if(earned>0 && earned!=2**256-1){\r\n                staker.rewardPending = staker.rewardPending + earned;\r\n                // DBLendToken(DBL).mint(msg.sender,earned);\r\n            }\r\n            staker.lastHarvestBlock = block.number;\r\n        }\r\n        DEBIToken(DIBI).transferFrom(msg.sender,address(this),_amount);\r\n        if(totalStaked==0) latestBlockNum=block.number;\r\n        totalStaked += _amount;\r\n\r\n        staker.stakeBalance += _amount;\r\n        staker.harvestDebt = perDibiSharedDbl * staker.stakeBalance;\r\n        emit Stake(msg.sender, _amount,earned);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n        require(stakers[msg.sender].stakeBalance >= _amount,\"DBL: INSUFFICIENT DIBI\");\r\n        STAKER storage staker = stakers[msg.sender];\r\n        if(block.number > staker.lastHarvestBlock){      \r\n            // harvest();\r\n            _calPerDibiSharedDbl();\r\n            uint256 earned = ( perDibiSharedDbl * (staker.stakeBalance) - staker.harvestDebt ) / 1e18;\r\n            if(earned>0 && earned!=2**256-1){\r\n                staker.rewardPending = staker.rewardPending + earned;\r\n            }\r\n            staker.lastHarvestBlock = block.number;\r\n        }\r\n        staker.stakeBalance -= _amount;\r\n        staker.harvestDebt = staker.stakeBalance * perDibiSharedDbl;\r\n        totalStaked -= _amount;\r\n        DEBIToken(DIBI).transfer(msg.sender, _amount);  \r\n    }\r\n\r\n    function unStake() external {\r\n        require(stakers[msg.sender].stakeBalance>0,\"DBL: INSUFFICIENT DIBI STAKE\");\r\n        harvest();\r\n        withdraw(stakers[msg.sender].stakeBalance);     \r\n    }\r\n\r\n    function harvest() public returns(uint256 earned){\r\n        require(stakers[msg.sender].stakeBalance > 0 || stakers[msg.sender].rewardPending > 0, \"DBL: INSUFFICIENT STAKE OR REWARD\");\r\n        require(block.number > stakers[msg.sender].lastHarvestBlock,\"DBL: REPEAT HARVEST\");\r\n\r\n        _calPerDibiSharedDbl();\r\n        STAKER storage staker = stakers[msg.sender];\r\n        earned = ( staker.stakeBalance * perDibiSharedDbl - staker.harvestDebt ) / 1e18;\r\n        if(staker.rewardPending >0 || earned>0){\r\n            staker.lastHarvestBlock = block.number;\r\n            staker.harvestDebt = staker.stakeBalance * perDibiSharedDbl;\r\n            earned = staker.rewardPending + earned;\r\n            staker.rewardPending = 0;\r\n            \r\n            uint256 dblbalance = DBLendToken(DBL).balanceOf(DBL);\r\n            if(earned>dblbalance){\r\n                earned = dblbalance;\r\n            }\r\n            DBLendToken(DBL).mint(msg.sender,earned);\r\n            emit Harvest(msg.sender, earned);\r\n        }        \r\n    }    \r\n\r\n    function _calPerDibiSharedDbl() internal{\r\n        uint256 incDblPerDIBI = _calPerDibiIncDbl();\r\n        if(incDblPerDIBI > 0){\r\n            if(!rewardGuardianPaused){\r\n                perDibiSharedDbl += incDblPerDIBI;\r\n                latestBlockNum = block.number;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    function _calPerDibiIncDbl() internal view returns (uint256 incDblPerDIBI){\r\n        incDblPerDIBI = 0;\r\n\r\n        if(rewardGuardianPaused) return incDblPerDIBI;\r\n\r\n        if(block.number > latestBlockNum && totalStaked>0){          \r\n            uint256 current = currentYearDibi();\r\n            uint256 increaseDbl = ( block.number - latestBlockNum ) * current / blocksPerYear ; \r\n            incDblPerDIBI = increaseDbl / totalStaked;\r\n            \r\n        }\r\n\r\n        return incDblPerDIBI;\r\n    }\r\n\r\n    function currentYearDibi() public view returns (uint256 current){\r\n        current = FIREST_YEAR_DBL;\r\n        if(block.number > DEPLOY_BLOCK){\r\n            uint256 severalYears = (block.number - DEPLOY_BLOCK) / blocksPerYear;\r\n            if (severalYears > 0) {\r\n                current = FIREST_YEAR_DBL / (2 * severalYears);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function earnedBalance(address user) external view returns(uint256){\r\n        uint256 _perDibiIncDbl = _calPerDibiIncDbl();\r\n        return stakers[user].rewardPending + ( ( perDibiSharedDbl + _perDibiIncDbl ) * stakers[user].stakeBalance - stakers[user].harvestDebt ) / 1e18;\r\n    }\r\n\r\n    function getAmountStakedByAddr(address user) external view returns(uint256){\r\n        return stakers[user].stakeBalance;\r\n    }\r\n\r\n    function accountStoked(address addr) external view returns (uint256) {\r\n        return stakers[addr].stakeBalance;\r\n    }\r\n\r\n    function balanceOf(address _account) external view returns (uint256){\r\n        return DBLendToken(DBL).balanceOf(_account);\r\n    }\r\n\r\n    function setRewardPaused(bool state) external onlyOwner returns (bool) {\r\n        if(state){\r\n            _calPerDibiSharedDbl();\r\n        }\r\n        rewardGuardianPaused = state;\r\n        emit ActionPaused(\"Reward\", state);\r\n        return state;\r\n    }\r\n\r\n    function setStakePaused(bool state) external onlyOwner returns (bool) {\r\n        stakeGuardianPaused = state;\r\n        emit ActionPaused(\"Stake\", state);\r\n        return state;\r\n    }\r\n\r\n    function _setPendingAdmin(address _pendingAdming) external {\r\n        require(msg.sender == admin && _pendingAdming != address(0),\"Miner::Only Admin Allown\");\r\n        address oldPendingAdmin = pendingAdmin;\r\n        pendingAdmin = _pendingAdming;\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n    function _acceptAdmin() external {\r\n        require(msg.sender == pendingAdmin, \"Miner::Must PendingAdmin\");\r\n        address oldAdmin = admin;\r\n        admin = pendingAdmin;\r\n        pendingAdmin=address(0);\r\n        emit NewAdmin(oldAdmin,admin);\r\n    }\r\n\r\n    ///@dev Take out the Token that was accidentally deposited,without DEBI\r\n    ///@param token token contract address\r\n    ///@param amount withdraw amount\r\n    function photobomb(address token, uint256 amount) onlyOwner external{\r\n        require(token != DIBI,\"NOT ALLOWAN\");\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dbl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dibi\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deploy_block\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DBL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOY_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIBI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIREST_YEAR_DBL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingAdming\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"accountStoked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentYearDibi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmountStakedByAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestCalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDibiSharedDbl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"photobomb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setRewardPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setStakePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Miner","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000043fc893f68b0fb654027f87b090060bfb0cc4c81000000000000000000000000f67b5123a873bf70d2bba20a62df981973691b570000000000000000000000000000000000000000000000000000000000a73430","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8eb28e76aa46b2602849245388ac752e6318357d71d9e81600199ce65a10fac2"}]}