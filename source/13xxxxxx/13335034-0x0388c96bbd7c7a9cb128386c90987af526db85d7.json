{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface UniPoolLike {\r\n    function slot0() external view returns (uint160, int24, uint16, uint16, uint16, uint8, bool);\r\n    function swap(address, bool, int256, uint160, bytes calldata) external;\r\n    function positions(bytes32) external view returns (uint128, uint256, uint256, uint128, uint128);\r\n}\r\n\r\ninterface GUNITokenLike is IERC20 {\r\n    function mint(uint256 mintAmount, address receiver) external returns (\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint128 liquidityMinted\r\n    );\r\n    function burn(uint256 burnAmount, address receiver) external returns (\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint128 liquidityBurned\r\n    );\r\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max) external view returns (uint256 amount0, uint256 amount1, uint256 mintAmount);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function pool() external view returns (address);\r\n    function getUnderlyingBalances() external view returns (uint256, uint256);\r\n}\r\n\r\ninterface CurveSwapLike {\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n    function coins(uint256) external view returns (address);\r\n}\r\n\r\ninterface GUNIRouterLike {\r\n    function addLiquidity(\r\n        address _pool,\r\n        uint256 _amount0Max,\r\n        uint256 _amount1Max,\r\n        uint256 _amount0Min,\r\n        uint256 _amount1Min,\r\n        address _receiver\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 mintAmount\r\n    );\r\n    function removeLiquidity(\r\n        address _pool,\r\n        uint256 _burnAmount,\r\n        uint256 _amount0Min,\r\n        uint256 _amount1Min,\r\n        address _receiver\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 liquidityBurned\r\n    );\r\n}\r\n\r\ninterface GUNIResolverLike {\r\n    function getRebalanceParams(\r\n        address pool,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 price18Decimals\r\n    ) external view returns (bool zeroForOne, uint256 swapAmount);\r\n}\r\n\r\ninterface IERC3156FlashBorrower {\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\ninterface IERC3156FlashLender {\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (\r\n        uint256 Art,  // [wad]\r\n        uint256 rate, // [ray]\r\n        uint256 spot, // [ray]\r\n        uint256 line, // [rad]\r\n        uint256 dust  // [rad]\r\n    );\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function hope(address usr) external;\r\n    function frob (bytes32 i, address u, address v, address w, int dink, int dart) external;\r\n    function dai(address) external view returns (uint256);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (address pip, uint256 mat);\r\n}\r\n\r\ncontract GuniLev is IERC3156FlashBorrower {\r\n\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    enum Action {WIND, UNWIND}\r\n\r\n    VatLike public immutable vat;\r\n    bytes32 public immutable ilk;\r\n    GemJoinLike public immutable join;\r\n    DaiJoinLike public immutable daiJoin;\r\n    SpotLike public immutable spotter;\r\n    GUNITokenLike public immutable guni;\r\n    IERC20 public immutable dai;\r\n    IERC20 public immutable otherToken;\r\n    IERC3156FlashLender public immutable lender;\r\n    CurveSwapLike public immutable curve;\r\n    GUNIRouterLike public immutable router;\r\n    GUNIResolverLike public immutable resolver;\r\n    int128 public immutable curveIndexDai;\r\n    int128 public immutable curveIndexOtherToken;\r\n    uint256 public immutable otherTokenTo18Conversion;\r\n\r\n    constructor(\r\n        GemJoinLike _join,\r\n        DaiJoinLike _daiJoin,\r\n        SpotLike _spotter,\r\n        IERC20 _otherToken,\r\n        IERC3156FlashLender _lender,\r\n        CurveSwapLike _curve,\r\n        GUNIRouterLike _router,\r\n        GUNIResolverLike _resolver, \r\n        int128 _curveIndexDai,\r\n        int128 _curveIndexOtherToken\r\n    ) {\r\n        vat = VatLike(_join.vat());\r\n        ilk = _join.ilk();\r\n        join = _join;\r\n        daiJoin = _daiJoin;\r\n        spotter = _spotter;\r\n        guni = GUNITokenLike(_join.gem());\r\n        dai = IERC20(_daiJoin.dai());\r\n        otherToken = _otherToken;\r\n        lender = _lender;\r\n        curve = _curve;\r\n        router = _router;\r\n        resolver = _resolver;\r\n        curveIndexDai = _curveIndexDai;\r\n        curveIndexOtherToken = _curveIndexOtherToken;\r\n        otherTokenTo18Conversion = 10 ** (18 - _otherToken.decimals());\r\n        \r\n        VatLike(_join.vat()).hope(address(_daiJoin));\r\n    }\r\n\r\n    function getWindEstimates(address usr, uint256 principal) public view returns (uint256 estimatedDaiRemaining, uint256 estimatedGuniAmount, uint256 estimatedDebt) {\r\n        uint256 leveragedAmount;\r\n        {\r\n            (,uint256 mat) = spotter.ilks(ilk);\r\n            leveragedAmount = principal*RAY/(mat - RAY);\r\n        }\r\n\r\n        uint256 swapAmount;\r\n        {\r\n            (uint256 sqrtPriceX96,,,,,,) = UniPoolLike(guni.pool()).slot0();\r\n            (, swapAmount) = resolver.getRebalanceParams(\r\n                address(guni),\r\n                guni.token0() == address(dai) ? leveragedAmount : 0,\r\n                guni.token1() == address(dai) ? leveragedAmount : 0,\r\n                ((((sqrtPriceX96*sqrtPriceX96) >> 96) * 1e18) >> 96) * otherTokenTo18Conversion\r\n            );\r\n        }\r\n\r\n        uint256 daiBalance;\r\n        {\r\n            (,, estimatedGuniAmount) = guni.getMintAmounts(guni.token0() == address(dai) ? leveragedAmount - swapAmount : curve.get_dy(curveIndexDai, curveIndexOtherToken, swapAmount), guni.token1() == address(otherToken) ? curve.get_dy(curveIndexDai, curveIndexOtherToken, swapAmount) : leveragedAmount - swapAmount);\r\n            (,uint256 rate, uint256 spot,,) = vat.ilks(ilk);\r\n            (uint256 ink, uint256 art) = vat.urns(ilk, usr);\r\n            estimatedDebt = ((estimatedGuniAmount + ink) * spot / rate - art) * rate / RAY;\r\n            daiBalance = dai.balanceOf(usr);\r\n        }\r\n\r\n        require(leveragedAmount <= estimatedDebt + daiBalance, \"not-enough-dai\");\r\n\r\n        estimatedDaiRemaining = estimatedDebt + daiBalance - leveragedAmount;\r\n    }\r\n\r\n    function getUnwindEstimates(uint256 ink, uint256 art) public view returns (uint256 estimatedDaiRemaining) {\r\n        (,uint256 rate,,,) = vat.ilks(ilk);\r\n        (uint256 bal0, uint256 bal1) = guni.getUnderlyingBalances();\r\n        uint256 totalSupply = guni.totalSupply();\r\n        bal0 = bal0 * ink / totalSupply;\r\n        bal1 = bal1 * ink / totalSupply;\r\n        uint256 dy = curve.get_dy(curveIndexOtherToken, curveIndexDai, guni.token0() == address(dai) ? bal1 : bal0);\r\n\r\n        return (guni.token0() == address(dai) ? bal0 : bal1) + dy - art * rate / RAY;\r\n    }\r\n\r\n    function getUnwindEstimates(address usr) external view returns (uint256 estimatedDaiRemaining) {\r\n        (uint256 ink, uint256 art) = vat.urns(ilk, usr);\r\n        return getUnwindEstimates(ink, art);\r\n    }\r\n\r\n    function getLeverageBPS() external view returns (uint256) {\r\n        (,uint256 mat) = spotter.ilks(ilk);\r\n        return 10000 * RAY/(mat - RAY);\r\n    }\r\n\r\n    function getEstimatedCostToWindUnwind(address usr, uint256 principal) external view returns (uint256) {\r\n        (, uint256 estimatedGuniAmount, uint256 estimatedDebt) = getWindEstimates(usr, principal);\r\n        (,uint256 rate,,,) = vat.ilks(ilk);\r\n        return dai.balanceOf(usr) - getUnwindEstimates(estimatedGuniAmount, estimatedDebt * RAY / rate);\r\n    }\r\n\r\n    function wind(\r\n        uint256 principal,\r\n        uint256 minWalletDai\r\n    ) external {\r\n        bytes memory data = abi.encode(Action.WIND, msg.sender, minWalletDai);\r\n        (,uint256 mat) = spotter.ilks(ilk);\r\n        initFlashLoan(data, principal*RAY/(mat - RAY));\r\n    }\r\n\r\n    function unwind(\r\n        uint256 minWalletDai\r\n    ) external {\r\n        bytes memory data = abi.encode(Action.UNWIND, msg.sender, minWalletDai);\r\n        (,uint256 rate,,,) = vat.ilks(ilk);\r\n        (, uint256 art) = vat.urns(ilk, msg.sender);\r\n        initFlashLoan(data, art*rate/RAY);\r\n    }\r\n\r\n    function initFlashLoan(bytes memory data, uint256 amount) internal {\r\n        uint256 _allowance = dai.allowance(address(this), address(lender));\r\n        uint256 _fee = lender.flashFee(address(dai), amount);\r\n        uint256 _repayment = amount + _fee;\r\n        dai.approve(address(lender), _allowance + _repayment);\r\n        lender.flashLoan(this, address(dai), amount, data);\r\n    }\r\n\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external override returns (bytes32) {\r\n        require(\r\n            msg.sender == address(lender),\r\n            \"FlashBorrower: Untrusted lender\"\r\n        );\r\n        require(\r\n            initiator == address(this),\r\n            \"FlashBorrower: Untrusted loan initiator\"\r\n        );\r\n        (Action action, address usr, uint256 minWalletDai) = abi.decode(data, (Action, address, uint256));\r\n        if (action == Action.WIND) {\r\n            _wind(usr, amount + fee, minWalletDai);\r\n        } else if (action == Action.UNWIND) {\r\n            _unwind(usr, amount, fee, minWalletDai);\r\n        }\r\n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n    }\r\n\r\n    function _wind(address usr, uint256 totalOwed, uint256 minWalletDai) internal {\r\n        // Calculate how much DAI we should be swapping for otherToken\r\n        uint256 swapAmount;\r\n        {\r\n            (uint256 sqrtPriceX96,,,,,,) = UniPoolLike(guni.pool()).slot0();\r\n            (, swapAmount) = resolver.getRebalanceParams(\r\n                address(guni),\r\n                IERC20(guni.token0()).balanceOf(address(this)),\r\n                IERC20(guni.token1()).balanceOf(address(this)),\r\n                ((((sqrtPriceX96*sqrtPriceX96) >> 96) * 1e18) >> 96) * otherTokenTo18Conversion\r\n            );\r\n        }\r\n\r\n        // Swap DAI for otherToken on Curve\r\n        dai.approve(address(curve), swapAmount);\r\n        curve.exchange(curveIndexDai, curveIndexOtherToken, swapAmount, 0);\r\n\r\n        // Mint G-UNI\r\n        uint256 guniBalance;\r\n        {\r\n            uint256 bal0 = IERC20(guni.token0()).balanceOf(address(this));\r\n            uint256 bal1 = IERC20(guni.token1()).balanceOf(address(this));\r\n            dai.approve(address(router), bal0);\r\n            otherToken.approve(address(router), bal1);\r\n            (,, guniBalance) = router.addLiquidity(address(guni), bal0, bal1, 0, 0, address(this));\r\n            dai.approve(address(router), 0);\r\n            otherToken.approve(address(router), 0);\r\n        }\r\n\r\n        // Open / Re-enforce vault\r\n        {\r\n            guni.approve(address(join), guniBalance);\r\n            join.join(address(usr), guniBalance);\r\n            (,uint256 rate, uint256 spot,,) = vat.ilks(ilk);\r\n            (uint256 ink, uint256 art) = vat.urns(ilk, usr);\r\n            uint256 dart = (guniBalance + ink) * spot / rate - art;\r\n            vat.frob(ilk, address(usr), address(usr), address(this), int256(guniBalance), int256(dart));\r\n            daiJoin.exit(address(this), vat.dai(address(this)) / RAY);\r\n        }\r\n\r\n        uint256 daiBalance = dai.balanceOf(address(this));\r\n        if (daiBalance > totalOwed) {\r\n            // Send extra dai to user\r\n            dai.transfer(usr, daiBalance - totalOwed);\r\n        } else if (daiBalance < totalOwed) {\r\n            // Pull remaining dai needed from usr\r\n            dai.transferFrom(usr, address(this), totalOwed - daiBalance);\r\n        }\r\n\r\n        // Send any remaining dust from other token to user as well\r\n        otherToken.transfer(usr, otherToken.balanceOf(address(this)));\r\n\r\n        require(dai.balanceOf(address(usr)) + otherToken.balanceOf(address(this)) >= minWalletDai, \"slippage\");\r\n    }\r\n\r\n    function _unwind(address usr, uint256 amount, uint256 fee, uint256 minWalletDai) internal {\r\n        // Pay back all CDP debt and exit g-uni\r\n        (uint256 ink, uint256 art) = vat.urns(ilk, usr);\r\n        dai.approve(address(daiJoin), amount);\r\n        daiJoin.join(address(this), amount);\r\n        vat.frob(ilk, address(usr), address(this), address(this), -int256(ink), -int256(art));\r\n        join.exit(address(this), ink);\r\n\r\n        // Burn G-UNI\r\n        guni.approve(address(router), ink);\r\n        router.removeLiquidity(address(guni), ink, 0, 0, address(this));\r\n\r\n        // Trade all otherToken for dai\r\n        uint256 swapAmount = otherToken.balanceOf(address(this));\r\n        otherToken.approve(address(curve), swapAmount);\r\n        curve.exchange(curveIndexOtherToken, curveIndexDai, swapAmount, 0);\r\n\r\n        uint256 daiBalance = dai.balanceOf(address(this));\r\n        uint256 totalOwed = amount + fee;\r\n        if (daiBalance > totalOwed) {\r\n            // Send extra dai to user\r\n            dai.transfer(usr, daiBalance - totalOwed);\r\n        } else if (daiBalance < totalOwed) {\r\n            // Pull remaining dai needed from usr\r\n            dai.transferFrom(usr, address(this), totalOwed - daiBalance);\r\n        }\r\n\r\n        // Send any remaining dust from other token to user as well\r\n        otherToken.transfer(usr, otherToken.balanceOf(address(this)));\r\n\r\n        require(dai.balanceOf(address(usr)) + otherToken.balanceOf(address(this)) >= minWalletDai, \"slippage\");\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract GemJoinLike\",\"name\":\"_join\",\"type\":\"address\"},{\"internalType\":\"contract DaiJoinLike\",\"name\":\"_daiJoin\",\"type\":\"address\"},{\"internalType\":\"contract SpotLike\",\"name\":\"_spotter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_otherToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"contract CurveSwapLike\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"contract GUNIRouterLike\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract GUNIResolverLike\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_curveIndexDai\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"_curveIndexOtherToken\",\"type\":\"int128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract CurveSwapLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveIndexDai\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveIndexOtherToken\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"getEstimatedCostToWindUnwind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeverageBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnwindEstimates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedDaiRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"}],\"name\":\"getUnwindEstimates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedDaiRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"getWindEstimates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedDaiRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGuniAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guni\",\"outputs\":[{\"internalType\":\"contract GUNITokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[{\"internalType\":\"contract GemJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherTokenTo18Conversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract GUNIResolverLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract GUNIRouterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract SpotLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWalletDai\",\"type\":\"uint256\"}],\"name\":\"unwind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWalletDai\",\"type\":\"uint256\"}],\"name\":\"wind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GuniLev","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bfd445a97e7459b0ebb34cfbd3245750dba4d7a40000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a2800000000000000000000000065c79fcb50ca1594b025960e539ed7a9a6d434a3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000001eb4cf3a948e7d72a198fe073ccb8c7a948cd853000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c700000000000000000000000014e6d67f824c3a7b4329d3228807f8654294e4bd0000000000000000000000000317650af6f184344d7368ac8bb0beba5edb214a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b95eb31bc93edddbf2fde9a47b9673a0ddfcd729a7e892269c795c9a437505c"}]}